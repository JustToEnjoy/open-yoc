
.//Obj/ble_controller_phy6220.elf:     file format elf32-csky-little


Disassembly of section .data:

1fff1a40 <ringbuf_pop>:

    return RHINO_SUCCESS;
}

kstat_t ringbuf_pop(k_ringbuf_t *p_ringbuf, void *pdata, size_t *plen)
{
1fff1a40:	14d4      	push      	r4-r7, r15
1fff1a42:	1422      	subi      	r14, r14, 8
    size_t   split_len           = 0;
    uint8_t *data                = pdata;
    size_t   len                 = 0;
1fff1a44:	3300      	movi      	r3, 0
{
1fff1a46:	6d03      	mov      	r4, r0
    size_t   len                 = 0;
1fff1a48:	b860      	st.w      	r3, (r14, 0x0)
    uint8_t  c_len[RING_BUF_LEN] = {0};
1fff1a4a:	b861      	st.w      	r3, (r14, 0x4)
    size_t   len_bytes           = 0;

    if (p_ringbuf->type == RINGBUF_TYPE_FIX) {
1fff1a4c:	9065      	ld.w      	r3, (r0, 0x14)
{
1fff1a4e:	6d87      	mov      	r6, r1
    if (p_ringbuf->type == RINGBUF_TYPE_FIX) {
1fff1a50:	3b40      	cmpnei      	r3, 0
{
1fff1a52:	6dcb      	mov      	r7, r2
1fff1a54:	9062      	ld.w      	r3, (r0, 0x8)
1fff1a56:	90a1      	ld.w      	r5, (r0, 0x4)
    if (p_ringbuf->type == RINGBUF_TYPE_FIX) {
1fff1a58:	0817      	bt      	0x1fff1a86	// 1fff1a86 <ringbuf_pop+0x46>
        if (p_ringbuf->head == p_ringbuf->end) {
1fff1a5a:	654e      	cmpne      	r3, r5
1fff1a5c:	0803      	bt      	0x1fff1a62	// 1fff1a62 <ringbuf_pop+0x22>
            p_ringbuf->head = p_ringbuf->buf;
1fff1a5e:	9060      	ld.w      	r3, (r0, 0x0)
1fff1a60:	b062      	st.w      	r3, (r0, 0x8)
        }

        memcpy(pdata, p_ringbuf->head, p_ringbuf->blk_size);
1fff1a62:	9446      	ld.w      	r2, (r4, 0x18)
1fff1a64:	9422      	ld.w      	r1, (r4, 0x8)
1fff1a66:	6c1b      	mov      	r0, r6
1fff1a68:	e0001664 	bsr      	0x1fff4730	// 1fff4730 <__memcpy_fast>
        p_ringbuf->head += p_ringbuf->blk_size;
1fff1a6c:	9466      	ld.w      	r3, (r4, 0x18)
1fff1a6e:	9442      	ld.w      	r2, (r4, 0x8)
        p_ringbuf->freesize += p_ringbuf->blk_size;

        if (plen != NULL) {
1fff1a70:	3f40      	cmpnei      	r7, 0
        p_ringbuf->head += p_ringbuf->blk_size;
1fff1a72:	608c      	addu      	r2, r3
1fff1a74:	b442      	st.w      	r2, (r4, 0x8)
        p_ringbuf->freesize += p_ringbuf->blk_size;
1fff1a76:	9444      	ld.w      	r2, (r4, 0x10)
1fff1a78:	608c      	addu      	r2, r3
1fff1a7a:	b444      	st.w      	r2, (r4, 0x10)
        if (plen != NULL) {
1fff1a7c:	0c02      	bf      	0x1fff1a80	// 1fff1a80 <ringbuf_pop+0x40>
            *plen = p_ringbuf->blk_size;
1fff1a7e:	b760      	st.w      	r3, (r7, 0x0)
        p_ringbuf->freesize += len;

        return RHINO_SUCCESS;

    }
}
1fff1a80:	3000      	movi      	r0, 0
1fff1a82:	1402      	addi      	r14, r14, 8
1fff1a84:	1494      	pop      	r4-r7, r15
        if (p_ringbuf->head == p_ringbuf->end) {
1fff1a86:	654e      	cmpne      	r3, r5
1fff1a88:	0803      	bt      	0x1fff1a8e	// 1fff1a8e <ringbuf_pop+0x4e>
            p_ringbuf->head = p_ringbuf->buf;
1fff1a8a:	9060      	ld.w      	r3, (r0, 0x0)
1fff1a8c:	b062      	st.w      	r3, (r0, 0x8)
        if (((split_len = p_ringbuf->end - p_ringbuf->head) < len_bytes) &&
1fff1a8e:	9422      	ld.w      	r1, (r4, 0x8)
1fff1a90:	6146      	subu      	r5, r1
1fff1a92:	5d63      	subi      	r3, r5, 1
1fff1a94:	3b02      	cmphsi      	r3, 3
1fff1a96:	0848      	bt      	0x1fff1b26	// 1fff1b26 <ringbuf_pop+0xe6>
            memcpy(&c_len[0], p_ringbuf->head, split_len);
1fff1a98:	6c97      	mov      	r2, r5
1fff1a9a:	1801      	addi      	r0, r14, 4
1fff1a9c:	e000164a 	bsr      	0x1fff4730	// 1fff4730 <__memcpy_fast>
            p_ringbuf->head      =  p_ringbuf->buf;
1fff1aa0:	9460      	ld.w      	r3, (r4, 0x0)
1fff1aa2:	b462      	st.w      	r3, (r4, 0x8)
            p_ringbuf->freesize += split_len;
1fff1aa4:	9464      	ld.w      	r3, (r4, 0x10)
1fff1aa6:	60d4      	addu      	r3, r5
1fff1aa8:	b464      	st.w      	r3, (r4, 0x10)
            memcpy(&c_len[split_len], p_ringbuf->head, (len_bytes - split_len));
1fff1aaa:	9422      	ld.w      	r1, (r4, 0x8)
1fff1aac:	3304      	movi      	r3, 4
1fff1aae:	60d6      	subu      	r3, r5
1fff1ab0:	6c8f      	mov      	r2, r3
1fff1ab2:	1801      	addi      	r0, r14, 4
1fff1ab4:	6014      	addu      	r0, r5
1fff1ab6:	6d4f      	mov      	r5, r3
1fff1ab8:	e000163c 	bsr      	0x1fff4730	// 1fff4730 <__memcpy_fast>
            p_ringbuf->head     += (len_bytes - split_len);
1fff1abc:	9442      	ld.w      	r2, (r4, 0x8)
1fff1abe:	6094      	addu      	r2, r5
1fff1ac0:	b442      	st.w      	r2, (r4, 0x8)
        memcpy(&len, c_len, RING_BUF_LEN);
1fff1ac2:	6c3b      	mov      	r0, r14
            p_ringbuf->freesize += (len_bytes - split_len);
1fff1ac4:	9444      	ld.w      	r2, (r4, 0x10)
1fff1ac6:	5a74      	addu      	r3, r2, r5
        memcpy(&len, c_len, RING_BUF_LEN);
1fff1ac8:	3204      	movi      	r2, 4
            p_ringbuf->freesize += (len_bytes - split_len);
1fff1aca:	b464      	st.w      	r3, (r4, 0x10)
        memcpy(&len, c_len, RING_BUF_LEN);
1fff1acc:	1901      	addi      	r1, r14, 4
1fff1ace:	e0001631 	bsr      	0x1fff4730	// 1fff4730 <__memcpy_fast>
        *plen = len;
1fff1ad2:	9860      	ld.w      	r3, (r14, 0x0)
1fff1ad4:	b760      	st.w      	r3, (r7, 0x0)
        if (p_ringbuf->head == p_ringbuf->end) {
1fff1ad6:	94a1      	ld.w      	r5, (r4, 0x4)
1fff1ad8:	9442      	ld.w      	r2, (r4, 0x8)
1fff1ada:	654a      	cmpne      	r2, r5
1fff1adc:	0803      	bt      	0x1fff1ae2	// 1fff1ae2 <ringbuf_pop+0xa2>
            p_ringbuf->head = p_ringbuf->buf;
1fff1ade:	9440      	ld.w      	r2, (r4, 0x0)
1fff1ae0:	b442      	st.w      	r2, (r4, 0x8)
        if (p_ringbuf->head > p_ringbuf->tail &&
1fff1ae2:	9422      	ld.w      	r1, (r4, 0x8)
1fff1ae4:	9443      	ld.w      	r2, (r4, 0xc)
1fff1ae6:	6448      	cmphs      	r2, r1
1fff1ae8:	0811      	bt      	0x1fff1b0a	// 1fff1b0a <ringbuf_pop+0xca>
            (split_len = p_ringbuf->end - p_ringbuf->head) < len) {
1fff1aea:	6146      	subu      	r5, r1
        if (p_ringbuf->head > p_ringbuf->tail &&
1fff1aec:	64d4      	cmphs      	r5, r3
1fff1aee:	080e      	bt      	0x1fff1b0a	// 1fff1b0a <ringbuf_pop+0xca>
            memcpy(pdata, p_ringbuf->head, split_len);
1fff1af0:	6c97      	mov      	r2, r5
1fff1af2:	6c1b      	mov      	r0, r6
            data = (uint8_t *)pdata + split_len;
1fff1af4:	6194      	addu      	r6, r5
            memcpy(pdata, p_ringbuf->head, split_len);
1fff1af6:	e000161d 	bsr      	0x1fff4730	// 1fff4730 <__memcpy_fast>
            len -= split_len;
1fff1afa:	9860      	ld.w      	r3, (r14, 0x0)
1fff1afc:	60d6      	subu      	r3, r5
1fff1afe:	b860      	st.w      	r3, (r14, 0x0)
            p_ringbuf->head      = p_ringbuf->buf;
1fff1b00:	9460      	ld.w      	r3, (r4, 0x0)
1fff1b02:	b462      	st.w      	r3, (r4, 0x8)
            p_ringbuf->freesize += split_len;
1fff1b04:	9464      	ld.w      	r3, (r4, 0x10)
1fff1b06:	614c      	addu      	r5, r3
1fff1b08:	b4a4      	st.w      	r5, (r4, 0x10)
        memcpy(data, p_ringbuf->head, len);
1fff1b0a:	9860      	ld.w      	r3, (r14, 0x0)
1fff1b0c:	6c8f      	mov      	r2, r3
1fff1b0e:	9422      	ld.w      	r1, (r4, 0x8)
1fff1b10:	6c1b      	mov      	r0, r6
1fff1b12:	e000160f 	bsr      	0x1fff4730	// 1fff4730 <__memcpy_fast>
        p_ringbuf->head     += len;
1fff1b16:	9820      	ld.w      	r1, (r14, 0x0)
1fff1b18:	9442      	ld.w      	r2, (r4, 0x8)
        p_ringbuf->freesize += len;
1fff1b1a:	9464      	ld.w      	r3, (r4, 0x10)
        p_ringbuf->head     += len;
1fff1b1c:	6084      	addu      	r2, r1
        p_ringbuf->freesize += len;
1fff1b1e:	60c4      	addu      	r3, r1
        p_ringbuf->head     += len;
1fff1b20:	b442      	st.w      	r2, (r4, 0x8)
        p_ringbuf->freesize += len;
1fff1b22:	b464      	st.w      	r3, (r4, 0x10)
        return RHINO_SUCCESS;
1fff1b24:	07ae      	br      	0x1fff1a80	// 1fff1a80 <ringbuf_pop+0x40>
            split_len = 0;
1fff1b26:	3500      	movi      	r5, 0
1fff1b28:	07c1      	br      	0x1fff1aaa	// 1fff1aaa <ringbuf_pop+0x6a>

1fff1b2a <klist_rm>:
 *
 * @param[in]  element    the list node to be deleted.
 */
RHINO_INLINE void klist_rm(klist_t *element)
{
    element->prev->next = element->next;
1fff1b2a:	9061      	ld.w      	r3, (r0, 0x4)
1fff1b2c:	9040      	ld.w      	r2, (r0, 0x0)
1fff1b2e:	b340      	st.w      	r2, (r3, 0x0)
    element->next->prev = element->prev;
1fff1b30:	9060      	ld.w      	r3, (r0, 0x0)
1fff1b32:	9041      	ld.w      	r2, (r0, 0x4)
1fff1b34:	b341      	st.w      	r2, (r3, 0x4)
}
1fff1b36:	783c      	jmp      	r15

1fff1b38 <pend_list_add>:
 */

#include "k_api.h"

RHINO_INLINE void pend_list_add(klist_t *head, ktask_t *task)
{
1fff1b38:	14c1      	push      	r4
    klist_t *tmp;
    klist_t *list_start = head;
    klist_t *list_end   = head;

    for (tmp = list_start->next; tmp != list_end; tmp = tmp->next) {
1fff1b3a:	9060      	ld.w      	r3, (r0, 0x0)
1fff1b3c:	640e      	cmpne      	r3, r0
1fff1b3e:	0c07      	bf      	0x1fff1b4c	// 1fff1b4c <pend_list_add+0x14>
        if (krhino_list_entry(tmp, ktask_t, task_list)->prio > task->prio) {
1fff1b40:	d8830054 	ld.b      	r4, (r3, 0x54)
1fff1b44:	d8410064 	ld.b      	r2, (r1, 0x64)
1fff1b48:	6508      	cmphs      	r2, r4
1fff1b4a:	080a      	bt      	0x1fff1b5e	// 1fff1b5e <pend_list_add+0x26>
    element->prev = head->prev;
1fff1b4c:	9301      	ld.w      	r0, (r3, 0x4)
    element->next = head;
1fff1b4e:	b164      	st.w      	r3, (r1, 0x10)
    element->prev = head->prev;
1fff1b50:	b105      	st.w      	r0, (r1, 0x14)
            break;
        }
    }

    klist_insert(tmp, &task->task_list);
1fff1b52:	e441000f 	addi      	r2, r1, 16
    head->prev->next = element;
1fff1b56:	9321      	ld.w      	r1, (r3, 0x4)
1fff1b58:	b140      	st.w      	r2, (r1, 0x0)
    head->prev       = element;
1fff1b5a:	b341      	st.w      	r2, (r3, 0x4)
}
1fff1b5c:	1481      	pop      	r4
    for (tmp = list_start->next; tmp != list_end; tmp = tmp->next) {
1fff1b5e:	9360      	ld.w      	r3, (r3, 0x0)
1fff1b60:	07ee      	br      	0x1fff1b3c	// 1fff1b3c <pend_list_add+0x4>
	...

1fff1b64 <pend_task_wakeup>:

void pend_task_wakeup(ktask_t *task)
{
1fff1b64:	14d1      	push      	r4, r15
1fff1b66:	6d03      	mov      	r4, r0
    /* wake up task depend on the different state of task */
    switch (task->task_state) {
1fff1b68:	9070      	ld.w      	r3, (r0, 0x40)
1fff1b6a:	3b42      	cmpnei      	r3, 2
1fff1b6c:	0c09      	bf      	0x1fff1b7e	// 1fff1b7e <pend_task_wakeup+0x1a>
1fff1b6e:	3b44      	cmpnei      	r3, 4
1fff1b70:	0c17      	bf      	0x1fff1b9e	// 1fff1b9e <pend_task_wakeup+0x3a>
            /* remove task on the block list because task is waken up */
            klist_rm(&task->task_list);
            task->task_state = K_SUSPENDED;
            break;
        default:
            k_err_proc(RHINO_SYS_FATAL_ERR);
1fff1b72:	3227      	movi      	r2, 39
1fff1b74:	102d      	lrw      	r1, 0x110121c3	// 1fff1ba8 <pend_task_wakeup+0x44>
1fff1b76:	3001      	movi      	r0, 1
1fff1b78:	e0000358 	bsr      	0x1fff2228	// 1fff2228 <k_err_proc_debug>
            break;
1fff1b7c:	040a      	br      	0x1fff1b90	// 1fff1b90 <pend_task_wakeup+0x2c>
            klist_rm(&task->task_list);
1fff1b7e:	200f      	addi      	r0, 16
1fff1b80:	e3ffffd5 	bsr      	0x1fff1b2a	// 1fff1b2a <klist_rm>
            ready_list_add(&g_ready_queue, task);
1fff1b84:	6c53      	mov      	r1, r4
1fff1b86:	100a      	lrw      	r0, 0x1fffd274	// 1fff1bac <pend_task_wakeup+0x48>
1fff1b88:	e0000454 	bsr      	0x1fff2430	// 1fff2430 <ready_list_add>
            task->task_state = K_RDY;
1fff1b8c:	3301      	movi      	r3, 1
            task->task_state = K_SUSPENDED;
1fff1b8e:	b470      	st.w      	r3, (r4, 0x40)
    }

    /* remove task on the tick list because task is waken up */
    tick_list_rm(task);
1fff1b90:	6c13      	mov      	r0, r4
1fff1b92:	e00000e3 	bsr      	0x1fff1d58	// 1fff1d58 <tick_list_rm>

    task->blk_state = BLK_FINISH;
1fff1b96:	3300      	movi      	r3, 0
1fff1b98:	b471      	st.w      	r3, (r4, 0x44)
    task->blk_obj   = NULL;
1fff1b9a:	b472      	st.w      	r3, (r4, 0x48)
}
1fff1b9c:	1491      	pop      	r4, r15
            klist_rm(&task->task_list);
1fff1b9e:	200f      	addi      	r0, 16
1fff1ba0:	e3ffffc5 	bsr      	0x1fff1b2a	// 1fff1b2a <klist_rm>
            task->task_state = K_SUSPENDED;
1fff1ba4:	3303      	movi      	r3, 3
1fff1ba6:	07f4      	br      	0x1fff1b8e	// 1fff1b8e <pend_task_wakeup+0x2a>
1fff1ba8:	110121c3 	.long	0x110121c3
1fff1bac:	1fffd274 	.long	0x1fffd274

1fff1bb0 <pend_to_blk_obj>:

void pend_to_blk_obj(blk_obj_t *blk_obj, ktask_t *task, tick_t timeout)
{
1fff1bb0:	14d2      	push      	r4-r5, r15
1fff1bb2:	6d07      	mov      	r4, r1
1fff1bb4:	6d43      	mov      	r5, r0
    /* task need to remember which object is blocked on */
    task->blk_obj = blk_obj;
1fff1bb6:	b412      	st.w      	r0, (r4, 0x48)

    if (timeout != RHINO_WAIT_FOREVER) {
1fff1bb8:	3000      	movi      	r0, 0
1fff1bba:	2800      	subi      	r0, 1
1fff1bbc:	640a      	cmpne      	r2, r0
{
1fff1bbe:	6c4b      	mov      	r1, r2
    if (timeout != RHINO_WAIT_FOREVER) {
1fff1bc0:	0803      	bt      	0x1fff1bc6	// 1fff1bc6 <pend_to_blk_obj+0x16>
1fff1bc2:	648e      	cmpne      	r3, r2
1fff1bc4:	0c05      	bf      	0x1fff1bce	// 1fff1bce <pend_to_blk_obj+0x1e>
        tick_list_insert(task, timeout);
1fff1bc6:	6c8f      	mov      	r2, r3
1fff1bc8:	6c13      	mov      	r0, r4
1fff1bca:	e000008d 	bsr      	0x1fff1ce4	// 1fff1ce4 <tick_list_insert>
    }

    task->task_state = K_PEND;
1fff1bce:	3302      	movi      	r3, 2

    /* remove from the ready list */
    ready_list_rm(&g_ready_queue, task);
1fff1bd0:	6c53      	mov      	r1, r4
    task->task_state = K_PEND;
1fff1bd2:	b470      	st.w      	r3, (r4, 0x40)
    ready_list_rm(&g_ready_queue, task);
1fff1bd4:	100a      	lrw      	r0, 0x1fffd274	// 1fff1bfc <pend_to_blk_obj+0x4c>
1fff1bd6:	e0000431 	bsr      	0x1fff2438	// 1fff2438 <ready_list_rm>

    if (blk_obj->blk_policy == BLK_POLICY_FIFO) {
1fff1bda:	9563      	ld.w      	r3, (r5, 0xc)
1fff1bdc:	3b41      	cmpnei      	r3, 1
1fff1bde:	080a      	bt      	0x1fff1bf2	// 1fff1bf2 <pend_to_blk_obj+0x42>
    element->prev = head->prev;
1fff1be0:	9541      	ld.w      	r2, (r5, 0x4)
    element->next = head;
1fff1be2:	b4a4      	st.w      	r5, (r4, 0x10)
    element->prev = head->prev;
1fff1be4:	b445      	st.w      	r2, (r4, 0x14)
        /* add to the end of blocked objet list */
        klist_insert(&blk_obj->blk_list, &task->task_list);
1fff1be6:	e464000f 	addi      	r3, r4, 16
    head->prev->next = element;
1fff1bea:	9541      	ld.w      	r2, (r5, 0x4)
1fff1bec:	b260      	st.w      	r3, (r2, 0x0)
    head->prev       = element;
1fff1bee:	b561      	st.w      	r3, (r5, 0x4)
    } else {
        /* add to the prio sorted block list */
        pend_list_add(&blk_obj->blk_list, task);
    }
}
1fff1bf0:	1492      	pop      	r4-r5, r15
        pend_list_add(&blk_obj->blk_list, task);
1fff1bf2:	6c53      	mov      	r1, r4
1fff1bf4:	6c17      	mov      	r0, r5
1fff1bf6:	e3ffffa1 	bsr      	0x1fff1b38	// 1fff1b38 <pend_list_add>
}
1fff1bfa:	07fb      	br      	0x1fff1bf0	// 1fff1bf0 <pend_to_blk_obj+0x40>
1fff1bfc:	1fffd274 	.long	0x1fffd274

1fff1c00 <pend_task_rm>:

void pend_task_rm(ktask_t *task)
{
1fff1c00:	14d1      	push      	r4, r15
1fff1c02:	6d03      	mov      	r4, r0
    switch (task->task_state) {
1fff1c04:	9070      	ld.w      	r3, (r0, 0x40)
1fff1c06:	3b42      	cmpnei      	r3, 2
1fff1c08:	0c09      	bf      	0x1fff1c1a	// 1fff1c1a <pend_task_rm+0x1a>
1fff1c0a:	3b44      	cmpnei      	r3, 4
1fff1c0c:	0c18      	bf      	0x1fff1c3c	// 1fff1c3c <pend_task_rm+0x3c>
            /* remove task on the block list because task is waken up */
            klist_rm(&task->task_list);
            task->task_state = K_SUSPENDED;
            break;
        default:
            k_err_proc(RHINO_SYS_FATAL_ERR);
1fff1c0e:	3259      	movi      	r2, 89
1fff1c10:	102e      	lrw      	r1, 0x110121c3	// 1fff1c48 <pend_task_rm+0x48>
1fff1c12:	3001      	movi      	r0, 1
1fff1c14:	e000030a 	bsr      	0x1fff2228	// 1fff2228 <k_err_proc_debug>
            break;
1fff1c18:	040a      	br      	0x1fff1c2c	// 1fff1c2c <pend_task_rm+0x2c>
            klist_rm(&task->task_list);
1fff1c1a:	200f      	addi      	r0, 16
1fff1c1c:	e3ffff87 	bsr      	0x1fff1b2a	// 1fff1b2a <klist_rm>
            ready_list_add(&g_ready_queue, task);
1fff1c20:	6c53      	mov      	r1, r4
1fff1c22:	100b      	lrw      	r0, 0x1fffd274	// 1fff1c4c <pend_task_rm+0x4c>
1fff1c24:	e0000406 	bsr      	0x1fff2430	// 1fff2430 <ready_list_add>
            task->task_state = K_RDY;
1fff1c28:	3301      	movi      	r3, 1
            task->task_state = K_SUSPENDED;
1fff1c2a:	b470      	st.w      	r3, (r4, 0x40)
    }

    /* remove task on the tick list because task is waken up */
    tick_list_rm(task);
1fff1c2c:	6c13      	mov      	r0, r4
1fff1c2e:	e0000095 	bsr      	0x1fff1d58	// 1fff1d58 <tick_list_rm>
    task->blk_state = BLK_DEL;
1fff1c32:	3303      	movi      	r3, 3
1fff1c34:	b471      	st.w      	r3, (r4, 0x44)

    /* task is nothing blocked on so reset it to NULL */
    task->blk_obj = NULL;
1fff1c36:	3300      	movi      	r3, 0
1fff1c38:	b472      	st.w      	r3, (r4, 0x48)
}
1fff1c3a:	1491      	pop      	r4, r15
            klist_rm(&task->task_list);
1fff1c3c:	200f      	addi      	r0, 16
1fff1c3e:	e3ffff76 	bsr      	0x1fff1b2a	// 1fff1b2a <klist_rm>
            task->task_state = K_SUSPENDED;
1fff1c42:	3303      	movi      	r3, 3
1fff1c44:	07f3      	br      	0x1fff1c2a	// 1fff1c2a <pend_task_rm+0x2a>
1fff1c46:	0000      	bkpt
1fff1c48:	110121c3 	.long	0x110121c3
1fff1c4c:	1fffd274 	.long	0x1fffd274

1fff1c50 <pend_list_reorder>:

void pend_list_reorder(ktask_t *task)
{
1fff1c50:	14d1      	push      	r4, r15
1fff1c52:	6d03      	mov      	r4, r0
    if (task->blk_obj->blk_policy == BLK_POLICY_PRI) {
1fff1c54:	9072      	ld.w      	r3, (r0, 0x48)
1fff1c56:	9363      	ld.w      	r3, (r3, 0xc)
1fff1c58:	3b40      	cmpnei      	r3, 0
1fff1c5a:	0808      	bt      	0x1fff1c6a	// 1fff1c6a <pend_list_reorder+0x1a>
        /* remove it first and add it again in prio sorted list */
        klist_rm(&task->task_list);
1fff1c5c:	200f      	addi      	r0, 16
1fff1c5e:	e3ffff66 	bsr      	0x1fff1b2a	// 1fff1b2a <klist_rm>
        pend_list_add(&task->blk_obj->blk_list, task);
1fff1c62:	9412      	ld.w      	r0, (r4, 0x48)
1fff1c64:	6c53      	mov      	r1, r4
1fff1c66:	e3ffff69 	bsr      	0x1fff1b38	// 1fff1b38 <pend_list_add>
    }
}
1fff1c6a:	1491      	pop      	r4, r15

1fff1c6c <pend_state_end_proc>:

kstat_t pend_state_end_proc(ktask_t *task, blk_obj_t *blk_obj)
{
1fff1c6c:	14d2      	push      	r4-r5, r15
1fff1c6e:	6d43      	mov      	r5, r0
    kstat_t status;

    (void)blk_obj;

    switch (task->blk_state) {
1fff1c70:	9011      	ld.w      	r0, (r0, 0x44)
{
1fff1c72:	6d07      	mov      	r4, r1
    switch (task->blk_state) {
1fff1c74:	3803      	cmphsi      	r0, 4
1fff1c76:	0817      	bt      	0x1fff1ca4	// 1fff1ca4 <pend_state_end_proc+0x38>
1fff1c78:	e0000d02 	bsr      	0x1fff367c	// 1fff367c <___gnu_csky_case_uqi>
1fff1c7c:	110e021c 	.long	0x110e021c
        case BLK_FINISH:
            status = RHINO_SUCCESS;
            break;
        case BLK_ABORT:
            status = RHINO_BLK_ABORT;
1fff1c80:	ea000191 	movi      	r0, 401
            status = RHINO_BLK_INV_STATE;
            break;
    }

#if (RHINO_CONFIG_TASK_DEL > 0)
    if (blk_obj == NULL) {
1fff1c84:	3c40      	cmpnei      	r4, 0
1fff1c86:	d8450063 	ld.b      	r2, (r5, 0x63)
1fff1c8a:	0817      	bt      	0x1fff1cb8	// 1fff1cb8 <pend_state_end_proc+0x4c>
        if (task->cancel == 1u) {
            status = RHINO_TASK_CANCELED;
1fff1c8c:	3398      	movi      	r3, 152
1fff1c8e:	4361      	lsli      	r3, r3, 1
1fff1c90:	3a41      	cmpnei      	r2, 1
1fff1c92:	c4030c20 	incf      	r0, r3, 0
        status = RHINO_TASK_CANCELED;
    }
#endif

    return status;
}
1fff1c96:	1492      	pop      	r4-r5, r15
            status = RHINO_BLK_TIMEOUT;
1fff1c98:	30c9      	movi      	r0, 201
            status = RHINO_BLK_INV_STATE;
1fff1c9a:	4001      	lsli      	r0, r0, 1
            break;
1fff1c9c:	07f4      	br      	0x1fff1c84	// 1fff1c84 <pend_state_end_proc+0x18>
            status = RHINO_BLK_DEL;
1fff1c9e:	ea000193 	movi      	r0, 403
            break;
1fff1ca2:	07f1      	br      	0x1fff1c84	// 1fff1c84 <pend_state_end_proc+0x18>
            k_err_proc(RHINO_BLK_INV_STATE);
1fff1ca4:	30ca      	movi      	r0, 202
1fff1ca6:	4001      	lsli      	r0, r0, 1
1fff1ca8:	3282      	movi      	r2, 130
1fff1caa:	1026      	lrw      	r1, 0x110121c3	// 1fff1cc0 <pend_state_end_proc+0x54>
1fff1cac:	e00002be 	bsr      	0x1fff2228	// 1fff2228 <k_err_proc_debug>
            status = RHINO_BLK_INV_STATE;
1fff1cb0:	30ca      	movi      	r0, 202
1fff1cb2:	07f4      	br      	0x1fff1c9a	// 1fff1c9a <pend_state_end_proc+0x2e>
            status = RHINO_SUCCESS;
1fff1cb4:	3000      	movi      	r0, 0
1fff1cb6:	07e7      	br      	0x1fff1c84	// 1fff1c84 <pend_state_end_proc+0x18>
    if ((task->cancel == 1u) && (blk_obj->cancel == 1u)) {
1fff1cb8:	3a41      	cmpnei      	r2, 1
1fff1cba:	0bee      	bt      	0x1fff1c96	// 1fff1c96 <pend_state_end_proc+0x2a>
1fff1cbc:	8454      	ld.b      	r2, (r4, 0x14)
1fff1cbe:	07e7      	br      	0x1fff1c8c	// 1fff1c8c <pend_state_end_proc+0x20>
1fff1cc0:	110121c3 	.long	0x110121c3

1fff1cc4 <klist_rm_init>:
 *
 * @param[in]  element    the list node to be deleted and reinited.
 */
RHINO_INLINE void klist_rm_init(klist_t *element)
{
    element->prev->next = element->next;
1fff1cc4:	9061      	ld.w      	r3, (r0, 0x4)
1fff1cc6:	9040      	ld.w      	r2, (r0, 0x0)
1fff1cc8:	b340      	st.w      	r2, (r3, 0x0)
    element->next->prev = element->prev;
1fff1cca:	9060      	ld.w      	r3, (r0, 0x0)
1fff1ccc:	9041      	ld.w      	r2, (r0, 0x4)
1fff1cce:	b341      	st.w      	r2, (r3, 0x4)

    element->next = element->prev = element;
1fff1cd0:	b001      	st.w      	r0, (r0, 0x4)
1fff1cd2:	b000      	st.w      	r0, (r0, 0x0)
}
1fff1cd4:	783c      	jmp      	r15
	...

1fff1cd8 <tick_list_init>:
    list_head->next = list_head;
1fff1cd8:	1062      	lrw      	r3, 0x1fffd9c8	// 1fff1ce0 <tick_list_init+0x8>
    list_head->prev = list_head;
1fff1cda:	b361      	st.w      	r3, (r3, 0x4)
    list_head->next = list_head;
1fff1cdc:	b360      	st.w      	r3, (r3, 0x0)
#include "k_api.h"

void tick_list_init(void)
{
   klist_init(&g_tick_head);
}
1fff1cde:	783c      	jmp      	r15
1fff1ce0:	1fffd9c8 	.long	0x1fffd9c8

1fff1ce4 <tick_list_insert>:

    klist_insert(q, &task->tick_list);
}

void tick_list_insert(ktask_t *task, tick_t time)
{
1fff1ce4:	14c4      	push      	r4-r7
1fff1ce6:	1423      	subi      	r14, r14, 12
    task->tick_match  = g_tick_count + time;
1fff1ce8:	107a      	lrw      	r3, 0x1fffd850	// 1fff1d50 <tick_list_insert+0x6c>
{
1fff1cea:	6d87      	mov      	r6, r1
1fff1cec:	6dcb      	mov      	r7, r2
    task->tick_match  = g_tick_count + time;
1fff1cee:	9381      	ld.w      	r4, (r3, 0x4)
1fff1cf0:	9360      	ld.w      	r3, (r3, 0x0)
1fff1cf2:	b860      	st.w      	r3, (r14, 0x0)
1fff1cf4:	b881      	st.w      	r4, (r14, 0x4)
1fff1cf6:	6c8f      	mov      	r2, r3
1fff1cf8:	6cd3      	mov      	r3, r4
1fff1cfa:	6489      	cmplt      	r2, r2
1fff1cfc:	6099      	addc      	r2, r6
1fff1cfe:	60dd      	addc      	r3, r7
1fff1d00:	b04a      	st.w      	r2, (r0, 0x28)
1fff1d02:	b06b      	st.w      	r3, (r0, 0x2c)
    task->tick_remain = time;
1fff1d04:	b0cc      	st.w      	r6, (r0, 0x30)
1fff1d06:	b0ed      	st.w      	r7, (r0, 0x34)
    for (q = list_start->next; q != list_end; q = q->next) {
1fff1d08:	1053      	lrw      	r2, 0x1fffd9c8	// 1fff1d54 <tick_list_insert+0x70>
1fff1d0a:	b842      	st.w      	r2, (r14, 0x8)
1fff1d0c:	9260      	ld.w      	r3, (r2, 0x0)
1fff1d0e:	9842      	ld.w      	r2, (r14, 0x8)
1fff1d10:	648e      	cmpne      	r3, r2
1fff1d12:	080b      	bt      	0x1fff1d28	// 1fff1d28 <tick_list_insert+0x44>
    element->prev = head->prev;
1fff1d14:	9321      	ld.w      	r1, (r3, 0x4)
    element->next = head;
1fff1d16:	b068      	st.w      	r3, (r0, 0x20)
    element->prev = head->prev;
1fff1d18:	b029      	st.w      	r1, (r0, 0x24)
    klist_insert(q, &task->tick_list);
1fff1d1a:	e440001f 	addi      	r2, r0, 32
    head->prev->next = element;
1fff1d1e:	9321      	ld.w      	r1, (r3, 0x4)
1fff1d20:	b140      	st.w      	r2, (r1, 0x0)
    head->prev       = element;
1fff1d22:	b341      	st.w      	r2, (r3, 0x4)
    tick_list_pri_insert(&g_tick_head, task);
}
1fff1d24:	1403      	addi      	r14, r14, 12
1fff1d26:	1484      	pop      	r4-r7
        if ((task_iter_temp->tick_match - g_tick_count) > val) {
1fff1d28:	9382      	ld.w      	r4, (r3, 0x8)
1fff1d2a:	93a3      	ld.w      	r5, (r3, 0xc)
1fff1d2c:	9820      	ld.w      	r1, (r14, 0x0)
1fff1d2e:	9841      	ld.w      	r2, (r14, 0x4)
1fff1d30:	6444      	cmphs      	r1, r1
1fff1d32:	c4240101 	subc      	r1, r4, r1
1fff1d36:	c4450102 	subc      	r2, r5, r2
1fff1d3a:	6d07      	mov      	r4, r1
1fff1d3c:	6d4b      	mov      	r5, r2
1fff1d3e:	655c      	cmphs      	r7, r5
1fff1d40:	0fea      	bf      	0x1fff1d14	// 1fff1d14 <tick_list_insert+0x30>
1fff1d42:	65d6      	cmpne      	r5, r7
1fff1d44:	0803      	bt      	0x1fff1d4a	// 1fff1d4a <tick_list_insert+0x66>
1fff1d46:	6458      	cmphs      	r6, r1
1fff1d48:	0fe6      	bf      	0x1fff1d14	// 1fff1d14 <tick_list_insert+0x30>
    for (q = list_start->next; q != list_end; q = q->next) {
1fff1d4a:	9360      	ld.w      	r3, (r3, 0x0)
1fff1d4c:	07e1      	br      	0x1fff1d0e	// 1fff1d0e <tick_list_insert+0x2a>
1fff1d4e:	0000      	bkpt
1fff1d50:	1fffd850 	.long	0x1fffd850
1fff1d54:	1fffd9c8 	.long	0x1fffd9c8

1fff1d58 <tick_list_rm>:

void tick_list_rm(ktask_t *task)
{
1fff1d58:	14d0      	push      	r15
    klist_rm_init(&task->tick_list);
1fff1d5a:	201f      	addi      	r0, 32
1fff1d5c:	e3ffffb4 	bsr      	0x1fff1cc4	// 1fff1cc4 <klist_rm_init>
}
1fff1d60:	1490      	pop      	r15
	...

1fff1d64 <tick_list_update>:

void tick_list_update(tick_i_t ticks)
{
1fff1d64:	14d4      	push      	r4-r7, r15
1fff1d66:	1423      	subi      	r14, r14, 12
    klist_t  *iter_temp;
    tick_i_t  delta;

    RHINO_CRITICAL_ENTER();

    g_tick_count += ticks;
1fff1d68:	11ff      	lrw      	r7, 0x1fffd850	// 1fff1e64 <tick_list_update+0x100>
{
1fff1d6a:	6d03      	mov      	r4, r0
1fff1d6c:	6d47      	mov      	r5, r1
    RHINO_CRITICAL_ENTER();
1fff1d6e:	e0000c41 	bsr      	0x1fff35f0	// 1fff35f0 <cpu_intrpt_save>
1fff1d72:	6d83      	mov      	r6, r0
    g_tick_count += ticks;
1fff1d74:	9700      	ld.w      	r0, (r7, 0x0)
1fff1d76:	9721      	ld.w      	r1, (r7, 0x4)
1fff1d78:	6489      	cmplt      	r2, r2
1fff1d7a:	c4800042 	addc      	r2, r0, r4
1fff1d7e:	c4a10043 	addc      	r3, r1, r5
                break;
            case K_PEND:
                tick_list_rm(p_tcb);
                /* remove task on the block list because task is timeout */
                klist_rm(&p_tcb->task_list);
                ready_list_add(&g_ready_queue, p_tcb);
1fff1d82:	11ba      	lrw      	r5, 0x1fffd274	// 1fff1e68 <tick_list_update+0x104>
    g_tick_count += ticks;
1fff1d84:	b740      	st.w      	r2, (r7, 0x0)
1fff1d86:	b761      	st.w      	r3, (r7, 0x4)
    iter          =  tick_head_ptr->next;
1fff1d88:	1179      	lrw      	r3, 0x1fffd9c8	// 1fff1e6c <tick_list_update+0x108>
1fff1d8a:	b861      	st.w      	r3, (r14, 0x4)
1fff1d8c:	9380      	ld.w      	r4, (r3, 0x0)
                p_tcb->task_state = K_SUSPENDED;
                p_tcb->blk_state  = BLK_FINISH;
                tick_list_rm(p_tcb);
                break;
            default:
                k_err_proc(RHINO_SYS_FATAL_ERR);
1fff1d8e:	1179      	lrw      	r3, 0x11012236	// 1fff1e70 <tick_list_update+0x10c>
1fff1d90:	b862      	st.w      	r3, (r14, 0x8)
    while (iter != tick_head_ptr) {
1fff1d92:	9861      	ld.w      	r3, (r14, 0x4)
1fff1d94:	64d2      	cmpne      	r4, r3
1fff1d96:	0806      	bt      	0x1fff1da2	// 1fff1da2 <tick_list_update+0x3e>
        }

        iter = iter_temp;
    }

    RHINO_CRITICAL_EXIT();
1fff1d98:	6c1b      	mov      	r0, r6
1fff1d9a:	e0000c30 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
}
1fff1d9e:	1403      	addi      	r14, r14, 12
1fff1da0:	1494      	pop      	r4-r7, r15
        iter_temp = iter->next;
1fff1da2:	9460      	ld.w      	r3, (r4, 0x0)
        p_tcb     = krhino_list_entry(iter, ktask_t, tick_list);
1fff1da4:	2c1f      	subi      	r4, 32
        iter_temp = iter->next;
1fff1da6:	b860      	st.w      	r3, (r14, 0x0)
        delta = (tick_i_t)p_tcb->tick_match - (tick_i_t)g_tick_count;
1fff1da8:	9700      	ld.w      	r0, (r7, 0x0)
1fff1daa:	9721      	ld.w      	r1, (r7, 0x4)
1fff1dac:	944a      	ld.w      	r2, (r4, 0x28)
1fff1dae:	946b      	ld.w      	r3, (r4, 0x2c)
1fff1db0:	6400      	cmphs      	r0, r0
1fff1db2:	c4020100 	subc      	r0, r2, r0
1fff1db6:	c4230101 	subc      	r1, r3, r1
1fff1dba:	6c83      	mov      	r2, r0
1fff1dbc:	6cc7      	mov      	r3, r1
        if (delta > 0) {
1fff1dbe:	3b20      	cmplti      	r3, 1
1fff1dc0:	0fec      	bf      	0x1fff1d98	// 1fff1d98 <tick_list_update+0x34>
1fff1dc2:	3b40      	cmpnei      	r3, 0
1fff1dc4:	0803      	bt      	0x1fff1dca	// 1fff1dca <tick_list_update+0x66>
1fff1dc6:	3840      	cmpnei      	r0, 0
1fff1dc8:	0be8      	bt      	0x1fff1d98	// 1fff1d98 <tick_list_update+0x34>
        switch (p_tcb->task_state) {
1fff1dca:	9410      	ld.w      	r0, (r4, 0x40)
1fff1dcc:	2801      	subi      	r0, 2
1fff1dce:	3804      	cmphsi      	r0, 5
1fff1dd0:	0843      	bt      	0x1fff1e56	// 1fff1e56 <tick_list_update+0xf2>
1fff1dd2:	e0000c55 	bsr      	0x1fff367c	// 1fff367c <___gnu_csky_case_uqi>
1fff1dd6:	4011      	.short	0x4011
1fff1dd8:	00370329 	.long	0x00370329
                p_tcb->blk_state  = BLK_FINISH;
1fff1ddc:	3300      	movi      	r3, 0
    klist_rm_init(&task->tick_list);
1fff1dde:	e404001f 	addi      	r0, r4, 32
                p_tcb->blk_state  = BLK_FINISH;
1fff1de2:	b471      	st.w      	r3, (r4, 0x44)
                p_tcb->task_state = K_RDY;
1fff1de4:	3301      	movi      	r3, 1
1fff1de6:	b470      	st.w      	r3, (r4, 0x40)
    klist_rm_init(&task->tick_list);
1fff1de8:	e3ffff6e 	bsr      	0x1fff1cc4	// 1fff1cc4 <klist_rm_init>
                ready_list_add(&g_ready_queue, p_tcb);
1fff1dec:	6c53      	mov      	r1, r4
1fff1dee:	6c17      	mov      	r0, r5
1fff1df0:	e0000320 	bsr      	0x1fff2430	// 1fff2430 <ready_list_add>
{
1fff1df4:	9880      	ld.w      	r4, (r14, 0x0)
1fff1df6:	07ce      	br      	0x1fff1d92	// 1fff1d92 <tick_list_update+0x2e>
    klist_rm_init(&task->tick_list);
1fff1df8:	e404001f 	addi      	r0, r4, 32
1fff1dfc:	e3ffff64 	bsr      	0x1fff1cc4	// 1fff1cc4 <klist_rm_init>
    element->prev->next = element->next;
1fff1e00:	9465      	ld.w      	r3, (r4, 0x14)
1fff1e02:	9444      	ld.w      	r2, (r4, 0x10)
                ready_list_add(&g_ready_queue, p_tcb);
1fff1e04:	6c53      	mov      	r1, r4
1fff1e06:	b340      	st.w      	r2, (r3, 0x0)
1fff1e08:	6c17      	mov      	r0, r5
    element->next->prev = element->prev;
1fff1e0a:	9464      	ld.w      	r3, (r4, 0x10)
1fff1e0c:	9445      	ld.w      	r2, (r4, 0x14)
1fff1e0e:	b341      	st.w      	r2, (r3, 0x4)
1fff1e10:	e0000310 	bsr      	0x1fff2430	// 1fff2430 <ready_list_add>
                p_tcb->blk_state  = BLK_TIMEOUT;
1fff1e14:	3302      	movi      	r3, 2
1fff1e16:	b471      	st.w      	r3, (r4, 0x44)
                p_tcb->task_state = K_RDY;
1fff1e18:	3301      	movi      	r3, 1
                p_tcb->task_state = K_SUSPENDED;
1fff1e1a:	b470      	st.w      	r3, (r4, 0x40)
                mutex_task_pri_reset(p_tcb);
1fff1e1c:	6c13      	mov      	r0, r4
1fff1e1e:	e000053a 	bsr      	0x1fff2892	// 1fff2892 <mutex_task_pri_reset>
                p_tcb->blk_obj    = NULL;
1fff1e22:	3300      	movi      	r3, 0
1fff1e24:	b472      	st.w      	r3, (r4, 0x48)
                break;
1fff1e26:	07e7      	br      	0x1fff1df4	// 1fff1df4 <tick_list_update+0x90>
    klist_rm_init(&task->tick_list);
1fff1e28:	e404001f 	addi      	r0, r4, 32
1fff1e2c:	e3ffff4c 	bsr      	0x1fff1cc4	// 1fff1cc4 <klist_rm_init>
    element->prev->next = element->next;
1fff1e30:	9465      	ld.w      	r3, (r4, 0x14)
1fff1e32:	9444      	ld.w      	r2, (r4, 0x10)
1fff1e34:	b340      	st.w      	r2, (r3, 0x0)
    element->next->prev = element->prev;
1fff1e36:	9464      	ld.w      	r3, (r4, 0x10)
1fff1e38:	9445      	ld.w      	r2, (r4, 0x14)
1fff1e3a:	b341      	st.w      	r2, (r3, 0x4)
                p_tcb->blk_state  = BLK_TIMEOUT;
1fff1e3c:	3302      	movi      	r3, 2
1fff1e3e:	b471      	st.w      	r3, (r4, 0x44)
                p_tcb->task_state = K_SUSPENDED;
1fff1e40:	3303      	movi      	r3, 3
1fff1e42:	07ec      	br      	0x1fff1e1a	// 1fff1e1a <tick_list_update+0xb6>
                p_tcb->task_state = K_SUSPENDED;
1fff1e44:	3303      	movi      	r3, 3
    klist_rm_init(&task->tick_list);
1fff1e46:	e404001f 	addi      	r0, r4, 32
                p_tcb->task_state = K_SUSPENDED;
1fff1e4a:	b470      	st.w      	r3, (r4, 0x40)
                p_tcb->blk_state  = BLK_FINISH;
1fff1e4c:	3300      	movi      	r3, 0
1fff1e4e:	b471      	st.w      	r3, (r4, 0x44)
    klist_rm_init(&task->tick_list);
1fff1e50:	e3ffff3a 	bsr      	0x1fff1cc4	// 1fff1cc4 <klist_rm_init>
1fff1e54:	07d0      	br      	0x1fff1df4	// 1fff1df4 <tick_list_update+0x90>
                k_err_proc(RHINO_SYS_FATAL_ERR);
1fff1e56:	326a      	movi      	r2, 106
1fff1e58:	9822      	ld.w      	r1, (r14, 0x8)
1fff1e5a:	3001      	movi      	r0, 1
1fff1e5c:	e00001e6 	bsr      	0x1fff2228	// 1fff2228 <k_err_proc_debug>
                break;
1fff1e60:	07ca      	br      	0x1fff1df4	// 1fff1df4 <tick_list_update+0x90>
1fff1e62:	0000      	bkpt
1fff1e64:	1fffd850 	.long	0x1fffd850
1fff1e68:	1fffd274 	.long	0x1fffd274
1fff1e6c:	1fffd9c8 	.long	0x1fffd9c8
1fff1e70:	11012236 	.long	0x11012236

1fff1e74 <krhino_intrpt_enter>:
}
#endif
#endif /* RHINO_CONFIG_INTRPT_STACK_OVF_CHECK */

kstat_t krhino_intrpt_enter(void)
{
1fff1e74:	14d0      	push      	r15

#if (RHINO_CONFIG_INTRPT_STACK_OVF_CHECK > 0)
    krhino_intrpt_stack_ovf_check();
#endif

    RHINO_CPU_INTRPT_DISABLE();
1fff1e76:	e0000bbd 	bsr      	0x1fff35f0	// 1fff35f0 <cpu_intrpt_save>
    g_intrpt_nested_level[cpu_cur_get()]++;
1fff1e7a:	1045      	lrw      	r2, 0x1fffd9b8	// 1fff1e8c <krhino_intrpt_enter+0x18>
1fff1e7c:	8260      	ld.b      	r3, (r2, 0x0)
1fff1e7e:	2300      	addi      	r3, 1
1fff1e80:	a260      	st.b      	r3, (r2, 0x0)
    RHINO_CPU_INTRPT_ENABLE();
1fff1e82:	e0000bbc 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
#if (RHINO_CONFIG_PWRMGMT > 0)
    cpu_pwr_up();
#endif

    return RHINO_SUCCESS;
}
1fff1e86:	3000      	movi      	r0, 0
1fff1e88:	1490      	pop      	r15
1fff1e8a:	0000      	bkpt
1fff1e8c:	1fffd9b8 	.long	0x1fffd9b8

1fff1e90 <krhino_intrpt_exit>:

void krhino_intrpt_exit(void)
{
1fff1e90:	14d1      	push      	r4, r15

#if (RHINO_CONFIG_INTRPT_STACK_OVF_CHECK > 0)
    krhino_intrpt_stack_ovf_check();
#endif

    RHINO_CPU_INTRPT_DISABLE();
1fff1e92:	e0000baf 	bsr      	0x1fff35f0	// 1fff35f0 <cpu_intrpt_save>

    cur_cpu_num = cpu_cur_get();

    g_intrpt_nested_level[cur_cpu_num]--;
1fff1e96:	1053      	lrw      	r2, 0x1fffd9b8	// 1fff1ee0 <krhino_intrpt_exit+0x50>
    RHINO_CPU_INTRPT_DISABLE();
1fff1e98:	6d03      	mov      	r4, r0
    g_intrpt_nested_level[cur_cpu_num]--;
1fff1e9a:	8260      	ld.b      	r3, (r2, 0x0)
1fff1e9c:	2b00      	subi      	r3, 1
1fff1e9e:	74cc      	zextb      	r3, r3
1fff1ea0:	a260      	st.b      	r3, (r2, 0x0)

    if (g_intrpt_nested_level[cur_cpu_num] > 0u) {
1fff1ea2:	3b40      	cmpnei      	r3, 0
1fff1ea4:	0c05      	bf      	0x1fff1eae	// 1fff1eae <krhino_intrpt_exit+0x1e>
        g_preferred_ready_task[cur_cpu_num] = preferred_task;
        cpu_intrpt_switch();
#if (RHINO_SCHED_NONE_PREEMPT > 0)
    }
#endif
    RHINO_CPU_INTRPT_ENABLE();
1fff1ea6:	6c13      	mov      	r0, r4
1fff1ea8:	e0000ba9 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
}
1fff1eac:	1491      	pop      	r4, r15
    if (g_per_cpu[cur_cpu_num].dis_sched > 0u) {
1fff1eae:	106e      	lrw      	r3, 0x1fffd9ac	// 1fff1ee4 <krhino_intrpt_exit+0x54>
1fff1eb0:	8340      	ld.b      	r2, (r3, 0x0)
1fff1eb2:	3a40      	cmpnei      	r2, 0
1fff1eb4:	0c04      	bf      	0x1fff1ebc	// 1fff1ebc <krhino_intrpt_exit+0x2c>
        g_per_cpu[cur_cpu_num].dis_sched = 0u;
1fff1eb6:	3200      	movi      	r2, 0
1fff1eb8:	a340      	st.b      	r2, (r3, 0x0)
1fff1eba:	07f6      	br      	0x1fff1ea6	// 1fff1ea6 <krhino_intrpt_exit+0x16>
    if (g_sched_lock[cur_cpu_num] > 0u) {
1fff1ebc:	106b      	lrw      	r3, 0x1fffd2b4	// 1fff1ee8 <krhino_intrpt_exit+0x58>
1fff1ebe:	8360      	ld.b      	r3, (r3, 0x0)
1fff1ec0:	3b40      	cmpnei      	r3, 0
1fff1ec2:	0bf2      	bt      	0x1fff1ea6	// 1fff1ea6 <krhino_intrpt_exit+0x16>
    preferred_task = preferred_cpu_ready_task_get(&g_ready_queue, cur_cpu_num);
1fff1ec4:	3100      	movi      	r1, 0
1fff1ec6:	100a      	lrw      	r0, 0x1fffd274	// 1fff1eec <krhino_intrpt_exit+0x5c>
1fff1ec8:	e0000316 	bsr      	0x1fff24f4	// 1fff24f4 <preferred_cpu_ready_task_get>
    if (preferred_task == g_active_task[cur_cpu_num]) {
1fff1ecc:	1069      	lrw      	r3, 0x1fffdad4	// 1fff1ef0 <krhino_intrpt_exit+0x60>
1fff1ece:	9360      	ld.w      	r3, (r3, 0x0)
1fff1ed0:	64c2      	cmpne      	r0, r3
1fff1ed2:	0fea      	bf      	0x1fff1ea6	// 1fff1ea6 <krhino_intrpt_exit+0x16>
        g_preferred_ready_task[cur_cpu_num] = preferred_task;
1fff1ed4:	1068      	lrw      	r3, 0x1fffd858	// 1fff1ef4 <krhino_intrpt_exit+0x64>
1fff1ed6:	b300      	st.w      	r0, (r3, 0x0)
        cpu_intrpt_switch();
1fff1ed8:	e0000cc0 	bsr      	0x1fff3858	// 1fff3858 <cpu_intrpt_switch>
1fff1edc:	07e5      	br      	0x1fff1ea6	// 1fff1ea6 <krhino_intrpt_exit+0x16>
1fff1ede:	0000      	bkpt
1fff1ee0:	1fffd9b8 	.long	0x1fffd9b8
1fff1ee4:	1fffd9ac 	.long	0x1fffd9ac
1fff1ee8:	1fffd2b4 	.long	0x1fffd2b4
1fff1eec:	1fffd274 	.long	0x1fffd274
1fff1ef0:	1fffdad4 	.long	0x1fffdad4
1fff1ef4:	1fffd858 	.long	0x1fffd858

1fff1ef8 <krhino_tick_proc>:
 */

#include "k_api.h"

void krhino_tick_proc(void)
{
1fff1ef8:	14d0      	push      	r15
#if (RHINO_CONFIG_USER_HOOK > 0)
    krhino_tick_hook();
1fff1efa:	e0000bbb 	bsr      	0x1fff3670	// 1fff3670 <krhino_tick_hook>
#endif

    tick_list_update(1);
1fff1efe:	3001      	movi      	r0, 1
1fff1f00:	3100      	movi      	r1, 0
1fff1f02:	e3ffff31 	bsr      	0x1fff1d64	// 1fff1d64 <tick_list_update>

#if (RHINO_CONFIG_SCHED_RR > 0)
    time_slice_update();
1fff1f06:	e00002ff 	bsr      	0x1fff2504	// 1fff2504 <time_slice_update>
#endif
}
1fff1f0a:	1490      	pop      	r15

1fff1f0c <sem_give>:
}

#endif

static kstat_t sem_give(ksem_t *sem, uint8_t opt_wake_all)
{
1fff1f0c:	14d3      	push      	r4-r6, r15
1fff1f0e:	6d03      	mov      	r4, r0
1fff1f10:	6d87      	mov      	r6, r1
    CPSR_ALLOC();

    uint8_t  cur_cpu_num;
    klist_t *blk_list_head;

    RHINO_CRITICAL_ENTER();
1fff1f12:	e0000b6f 	bsr      	0x1fff35f0	// 1fff35f0 <cpu_intrpt_save>

    if (sem->blk_obj.obj_type != RHINO_SEM_OBJ_TYPE) {
1fff1f16:	9464      	ld.w      	r3, (r4, 0x10)
    RHINO_CRITICAL_ENTER();
1fff1f18:	6d43      	mov      	r5, r0
    if (sem->blk_obj.obj_type != RHINO_SEM_OBJ_TYPE) {
1fff1f1a:	3b41      	cmpnei      	r3, 1
1fff1f1c:	0c05      	bf      	0x1fff1f26	// 1fff1f26 <sem_give+0x1a>
        RHINO_CRITICAL_EXIT();
1fff1f1e:	e0000b6e 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
        return RHINO_KOBJ_TYPE_ERR;
1fff1f22:	3008      	movi      	r0, 8
    }

    RHINO_CRITICAL_EXIT_SCHED();

    return RHINO_SUCCESS;
}
1fff1f24:	1493      	pop      	r4-r6, r15
    return (list->next == list);
1fff1f26:	9400      	ld.w      	r0, (r4, 0x0)
    if (is_klist_empty(blk_list_head)) {
1fff1f28:	6412      	cmpne      	r4, r0
1fff1f2a:	0817      	bt      	0x1fff1f58	// 1fff1f58 <sem_give+0x4c>
        if (sem->count == (sem_count_t)-1) {
1fff1f2c:	9466      	ld.w      	r3, (r4, 0x18)
1fff1f2e:	3200      	movi      	r2, 0
1fff1f30:	2a00      	subi      	r2, 1
1fff1f32:	648e      	cmpne      	r3, r2
1fff1f34:	0807      	bt      	0x1fff1f42	// 1fff1f42 <sem_give+0x36>
            RHINO_CRITICAL_EXIT();
1fff1f36:	6c17      	mov      	r0, r5
1fff1f38:	e0000b61 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
            return RHINO_SEM_OVF;
1fff1f3c:	30c8      	movi      	r0, 200
1fff1f3e:	4002      	lsli      	r0, r0, 2
1fff1f40:	07f2      	br      	0x1fff1f24	// 1fff1f24 <sem_give+0x18>
        if (sem->count > sem->peak_count) {
1fff1f42:	9447      	ld.w      	r2, (r4, 0x1c)
        sem->count++;
1fff1f44:	2300      	addi      	r3, 1
        if (sem->count > sem->peak_count) {
1fff1f46:	64c8      	cmphs      	r2, r3
        sem->count++;
1fff1f48:	b466      	st.w      	r3, (r4, 0x18)
        if (sem->count > sem->peak_count) {
1fff1f4a:	0802      	bt      	0x1fff1f4e	// 1fff1f4e <sem_give+0x42>
            sem->peak_count = sem->count;
1fff1f4c:	b467      	st.w      	r3, (r4, 0x1c)
    RHINO_CRITICAL_EXIT_SCHED();
1fff1f4e:	6c17      	mov      	r0, r5
1fff1f50:	e0000b55 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
    return RHINO_SUCCESS;
1fff1f54:	3000      	movi      	r0, 0
1fff1f56:	07e7      	br      	0x1fff1f24	// 1fff1f24 <sem_give+0x18>
    if (opt_wake_all) {
1fff1f58:	3e40      	cmpnei      	r6, 0
1fff1f5a:	0808      	bt      	0x1fff1f6a	// 1fff1f6a <sem_give+0x5e>
        pend_task_wakeup(krhino_list_entry(blk_list_head->next, ktask_t, task_list));
1fff1f5c:	280f      	subi      	r0, 16
1fff1f5e:	e3fffe03 	bsr      	0x1fff1b64	// 1fff1b64 <pend_task_wakeup>
1fff1f62:	0407      	br      	0x1fff1f70	// 1fff1f70 <sem_give+0x64>
            pend_task_wakeup(krhino_list_entry(blk_list_head->next, ktask_t, task_list));
1fff1f64:	280f      	subi      	r0, 16
1fff1f66:	e3fffdff 	bsr      	0x1fff1b64	// 1fff1b64 <pend_task_wakeup>
1fff1f6a:	9400      	ld.w      	r0, (r4, 0x0)
        while (!is_klist_empty(blk_list_head)) {
1fff1f6c:	6412      	cmpne      	r4, r0
1fff1f6e:	0bfb      	bt      	0x1fff1f64	// 1fff1f64 <sem_give+0x58>
    RHINO_CRITICAL_EXIT_SCHED();
1fff1f70:	e00001e2 	bsr      	0x1fff2334	// 1fff2334 <core_sched>
1fff1f74:	07ed      	br      	0x1fff1f4e	// 1fff1f4e <sem_give+0x42>
	...

1fff2000 <PHY6220_Vectors>:
	...

1fff2100 <ringbuf_push>:
{
1fff2100:	14d4      	push      	r4-r7, r15
1fff2102:	1422      	subi      	r14, r14, 8
    uint8_t  c_len[RING_BUF_LEN] = {0};
1fff2104:	3300      	movi      	r3, 0
{
1fff2106:	6d03      	mov      	r4, r0
    uint8_t  c_len[RING_BUF_LEN] = {0};
1fff2108:	b861      	st.w      	r3, (r14, 0x4)
    if (p_ringbuf->type == RINGBUF_TYPE_FIX) {
1fff210a:	9065      	ld.w      	r3, (r0, 0x14)
{
1fff210c:	6d87      	mov      	r6, r1
    if (p_ringbuf->type == RINGBUF_TYPE_FIX) {
1fff210e:	3b40      	cmpnei      	r3, 0
{
1fff2110:	b840      	st.w      	r2, (r14, 0x0)
    if (p_ringbuf->type == RINGBUF_TYPE_FIX) {
1fff2112:	0819      	bt      	0x1fff2144	// 1fff2144 <ringbuf_push+0x44>
        if (p_ringbuf->freesize < p_ringbuf->blk_size) {
1fff2114:	9046      	ld.w      	r2, (r0, 0x18)
1fff2116:	9064      	ld.w      	r3, (r0, 0x10)
1fff2118:	648c      	cmphs      	r3, r2
1fff211a:	0c72      	bf      	0x1fff21fe	// 1fff21fe <ringbuf_push+0xfe>
        if (p_ringbuf->tail == p_ringbuf->end) {
1fff211c:	9023      	ld.w      	r1, (r0, 0xc)
1fff211e:	9061      	ld.w      	r3, (r0, 0x4)
1fff2120:	64c6      	cmpne      	r1, r3
1fff2122:	0803      	bt      	0x1fff2128	// 1fff2128 <ringbuf_push+0x28>
            p_ringbuf->tail = p_ringbuf->buf;
1fff2124:	9060      	ld.w      	r3, (r0, 0x0)
1fff2126:	b063      	st.w      	r3, (r0, 0xc)
        memcpy(p_ringbuf->tail, data, p_ringbuf->blk_size);
1fff2128:	6c5b      	mov      	r1, r6
1fff212a:	9403      	ld.w      	r0, (r4, 0xc)
1fff212c:	e0001302 	bsr      	0x1fff4730	// 1fff4730 <__memcpy_fast>
        p_ringbuf->tail     += p_ringbuf->blk_size;
1fff2130:	9446      	ld.w      	r2, (r4, 0x18)
        p_ringbuf->tail += len;
1fff2132:	9463      	ld.w      	r3, (r4, 0xc)
1fff2134:	60c8      	addu      	r3, r2
1fff2136:	b463      	st.w      	r3, (r4, 0xc)
        p_ringbuf->freesize -= len;
1fff2138:	9464      	ld.w      	r3, (r4, 0x10)
1fff213a:	60ca      	subu      	r3, r2
1fff213c:	b464      	st.w      	r3, (r4, 0x10)
    return RHINO_SUCCESS;
1fff213e:	3000      	movi      	r0, 0
}
1fff2140:	1402      	addi      	r14, r14, 8
1fff2142:	1494      	pop      	r4-r7, r15
        if ((len == 0u) || (len >= (uint32_t) - 1)) {
1fff2144:	9860      	ld.w      	r3, (r14, 0x0)
1fff2146:	3200      	movi      	r2, 0
1fff2148:	5b23      	subi      	r1, r3, 1
1fff214a:	2a02      	subi      	r2, 3
1fff214c:	6448      	cmphs      	r2, r1
1fff214e:	0c56      	bf      	0x1fff21fa	// 1fff21fa <ringbuf_push+0xfa>
        if (p_ringbuf->freesize < (len_bytes + len)) {
1fff2150:	9044      	ld.w      	r2, (r0, 0x10)
1fff2152:	2303      	addi      	r3, 4
1fff2154:	64c8      	cmphs      	r2, r3
1fff2156:	0c54      	bf      	0x1fff21fe	// 1fff21fe <ringbuf_push+0xfe>
        memcpy(c_len, &len, RING_BUF_LEN);
1fff2158:	3204      	movi      	r2, 4
1fff215a:	6c7b      	mov      	r1, r14
1fff215c:	1801      	addi      	r0, r14, 4
1fff215e:	e00012e9 	bsr      	0x1fff4730	// 1fff4730 <__memcpy_fast>
        if (p_ringbuf->tail == p_ringbuf->end) {
1fff2162:	94a1      	ld.w      	r5, (r4, 0x4)
1fff2164:	9463      	ld.w      	r3, (r4, 0xc)
1fff2166:	654e      	cmpne      	r3, r5
1fff2168:	0803      	bt      	0x1fff216e	// 1fff216e <ringbuf_push+0x6e>
            p_ringbuf->tail = p_ringbuf->buf;
1fff216a:	9460      	ld.w      	r3, (r4, 0x0)
1fff216c:	b463      	st.w      	r3, (r4, 0xc)
        if (p_ringbuf->tail >= p_ringbuf->head &&
1fff216e:	9403      	ld.w      	r0, (r4, 0xc)
1fff2170:	9462      	ld.w      	r3, (r4, 0x8)
1fff2172:	64c0      	cmphs      	r0, r3
1fff2174:	0c40      	bf      	0x1fff21f4	// 1fff21f4 <ringbuf_push+0xf4>
            (split_len = p_ringbuf->end - p_ringbuf->tail) < len_bytes && split_len > 0) {
1fff2176:	6142      	subu      	r5, r0
1fff2178:	5d63      	subi      	r3, r5, 1
1fff217a:	3b02      	cmphsi      	r3, 3
1fff217c:	083c      	bt      	0x1fff21f4	// 1fff21f4 <ringbuf_push+0xf4>
            memcpy(p_ringbuf->tail, &c_len[0], split_len);
1fff217e:	6c97      	mov      	r2, r5
1fff2180:	1901      	addi      	r1, r14, 4
1fff2182:	e00012d7 	bsr      	0x1fff4730	// 1fff4730 <__memcpy_fast>
            p_ringbuf->tail =  p_ringbuf->buf;
1fff2186:	9460      	ld.w      	r3, (r4, 0x0)
            len_bytes -= split_len;
1fff2188:	3704      	movi      	r7, 4
            p_ringbuf->tail =  p_ringbuf->buf;
1fff218a:	b463      	st.w      	r3, (r4, 0xc)
            p_ringbuf->freesize -= split_len;
1fff218c:	9464      	ld.w      	r3, (r4, 0x10)
1fff218e:	60d6      	subu      	r3, r5
1fff2190:	b464      	st.w      	r3, (r4, 0x10)
            len_bytes -= split_len;
1fff2192:	61d6      	subu      	r7, r5
            memcpy(p_ringbuf->tail, &c_len[split_len], len_bytes);
1fff2194:	6c9f      	mov      	r2, r7
1fff2196:	9403      	ld.w      	r0, (r4, 0xc)
1fff2198:	1901      	addi      	r1, r14, 4
1fff219a:	6054      	addu      	r1, r5
1fff219c:	e00012ca 	bsr      	0x1fff4730	// 1fff4730 <__memcpy_fast>
        if (p_ringbuf->tail == p_ringbuf->end) {
1fff21a0:	94a1      	ld.w      	r5, (r4, 0x4)
            p_ringbuf->freesize -= len_bytes;
1fff21a2:	9464      	ld.w      	r3, (r4, 0x10)
1fff21a4:	60de      	subu      	r3, r7
1fff21a6:	b464      	st.w      	r3, (r4, 0x10)
            p_ringbuf->tail += len_bytes;
1fff21a8:	9463      	ld.w      	r3, (r4, 0xc)
1fff21aa:	61cc      	addu      	r7, r3
        if (p_ringbuf->tail == p_ringbuf->end) {
1fff21ac:	655e      	cmpne      	r7, r5
            p_ringbuf->tail += len_bytes;
1fff21ae:	b4e3      	st.w      	r7, (r4, 0xc)
        if (p_ringbuf->tail == p_ringbuf->end) {
1fff21b0:	0803      	bt      	0x1fff21b6	// 1fff21b6 <ringbuf_push+0xb6>
            p_ringbuf->tail = p_ringbuf->buf;
1fff21b2:	9460      	ld.w      	r3, (r4, 0x0)
1fff21b4:	b463      	st.w      	r3, (r4, 0xc)
        if (p_ringbuf->tail >= p_ringbuf->head &&
1fff21b6:	9403      	ld.w      	r0, (r4, 0xc)
1fff21b8:	9462      	ld.w      	r3, (r4, 0x8)
1fff21ba:	64c0      	cmphs      	r0, r3
1fff21bc:	0c14      	bf      	0x1fff21e4	// 1fff21e4 <ringbuf_push+0xe4>
1fff21be:	9860      	ld.w      	r3, (r14, 0x0)
            ((split_len = p_ringbuf->end - p_ringbuf->tail) < len) &&
1fff21c0:	6142      	subu      	r5, r0
        if (p_ringbuf->tail >= p_ringbuf->head &&
1fff21c2:	64d4      	cmphs      	r5, r3
1fff21c4:	0810      	bt      	0x1fff21e4	// 1fff21e4 <ringbuf_push+0xe4>
            ((split_len = p_ringbuf->end - p_ringbuf->tail) < len) &&
1fff21c6:	3d40      	cmpnei      	r5, 0
1fff21c8:	0c0e      	bf      	0x1fff21e4	// 1fff21e4 <ringbuf_push+0xe4>
            memcpy(p_ringbuf->tail, data, split_len);
1fff21ca:	6c5b      	mov      	r1, r6
1fff21cc:	6c97      	mov      	r2, r5
            data = (uint8_t *)data + split_len;
1fff21ce:	6194      	addu      	r6, r5
            memcpy(p_ringbuf->tail, data, split_len);
1fff21d0:	e00012b0 	bsr      	0x1fff4730	// 1fff4730 <__memcpy_fast>
            len -= split_len;
1fff21d4:	9860      	ld.w      	r3, (r14, 0x0)
1fff21d6:	60d6      	subu      	r3, r5
1fff21d8:	b860      	st.w      	r3, (r14, 0x0)
            p_ringbuf->tail =  p_ringbuf->buf;
1fff21da:	9460      	ld.w      	r3, (r4, 0x0)
1fff21dc:	b463      	st.w      	r3, (r4, 0xc)
            p_ringbuf->freesize -= split_len;
1fff21de:	9464      	ld.w      	r3, (r4, 0x10)
1fff21e0:	60d6      	subu      	r3, r5
1fff21e2:	b464      	st.w      	r3, (r4, 0x10)
        memcpy(p_ringbuf->tail, data, len);
1fff21e4:	9860      	ld.w      	r3, (r14, 0x0)
1fff21e6:	6c8f      	mov      	r2, r3
1fff21e8:	6c5b      	mov      	r1, r6
1fff21ea:	9403      	ld.w      	r0, (r4, 0xc)
1fff21ec:	e00012a2 	bsr      	0x1fff4730	// 1fff4730 <__memcpy_fast>
        p_ringbuf->tail += len;
1fff21f0:	9840      	ld.w      	r2, (r14, 0x0)
1fff21f2:	07a0      	br      	0x1fff2132	// 1fff2132 <ringbuf_push+0x32>
            split_len = 0;
1fff21f4:	3500      	movi      	r5, 0
        len_bytes = RING_BUF_LEN;
1fff21f6:	3704      	movi      	r7, 4
1fff21f8:	07ce      	br      	0x1fff2194	// 1fff2194 <ringbuf_push+0x94>
            return RHINO_INV_PARAM;
1fff21fa:	3005      	movi      	r0, 5
1fff21fc:	07a2      	br      	0x1fff2140	// 1fff2140 <ringbuf_push+0x40>
            return RHINO_RINGBUF_FULL;
1fff21fe:	306a      	movi      	r0, 106
1fff2200:	07a0      	br      	0x1fff2140	// 1fff2140 <ringbuf_push+0x40>

1fff2202 <ringbuf_reset>:
    return 0;
}

kstat_t ringbuf_reset(k_ringbuf_t *p_ringbuf)
{
    p_ringbuf->head     = p_ringbuf->buf;
1fff2202:	9040      	ld.w      	r2, (r0, 0x0)
    p_ringbuf->tail     = p_ringbuf->buf;
    p_ringbuf->freesize = p_ringbuf->end - p_ringbuf->buf;
1fff2204:	9061      	ld.w      	r3, (r0, 0x4)
1fff2206:	60ca      	subu      	r3, r2
    p_ringbuf->head     = p_ringbuf->buf;
1fff2208:	b042      	st.w      	r2, (r0, 0x8)
    p_ringbuf->tail     = p_ringbuf->buf;
1fff220a:	b043      	st.w      	r2, (r0, 0xc)
    p_ringbuf->freesize = p_ringbuf->end - p_ringbuf->buf;
1fff220c:	b064      	st.w      	r3, (r0, 0x10)

    return RHINO_SUCCESS;
}
1fff220e:	3000      	movi      	r0, 0
1fff2210:	783c      	jmp      	r15

1fff2212 <ringbuf_init>:
{
1fff2212:	14d1      	push      	r4, r15
1fff2214:	9882      	ld.w      	r4, (r14, 0x8)
    p_ringbuf->buf      = buf;
1fff2216:	b020      	st.w      	r1, (r0, 0x0)
    p_ringbuf->end      = (uint8_t *)buf + len;
1fff2218:	6048      	addu      	r1, r2
    p_ringbuf->type     = type;
1fff221a:	b065      	st.w      	r3, (r0, 0x14)
    p_ringbuf->end      = (uint8_t *)buf + len;
1fff221c:	b021      	st.w      	r1, (r0, 0x4)
    p_ringbuf->blk_size = block_size;
1fff221e:	b086      	st.w      	r4, (r0, 0x18)
    ringbuf_reset(p_ringbuf);
1fff2220:	e3fffff1 	bsr      	0x1fff2202	// 1fff2202 <ringbuf_reset>
}
1fff2224:	3000      	movi      	r0, 0
1fff2226:	1491      	pop      	r4, r15

1fff2228 <k_err_proc_debug>:
#ifdef AOS_COMP_DEBUG
#include "debug_api.h"
#endif

void k_err_proc_debug(kstat_t err, char *file, int line)
{
1fff2228:	14d0      	push      	r15
#ifdef AOS_COMP_DEBUG
    debug_fatal_error(err, file, line);
#endif

    if (g_err_proc != NULL) {
1fff222a:	1064      	lrw      	r3, 0x1fffa540	// 1fff2238 <k_err_proc_debug+0x10>
1fff222c:	9360      	ld.w      	r3, (r3, 0x0)
1fff222e:	3b40      	cmpnei      	r3, 0
1fff2230:	0c02      	bf      	0x1fff2234	// 1fff2234 <k_err_proc_debug+0xc>
        g_err_proc(err);
1fff2232:	7bcd      	jsr      	r3
    }
}
1fff2234:	1490      	pop      	r15
1fff2236:	0000      	bkpt
1fff2238:	1fffa540 	.long	0x1fffa540

1fff223c <idle_task>:
    return idle_count;
}
#endif

void idle_task(void *arg)
{
1fff223c:	14d1      	push      	r4, r15
            }
        }
        RHINO_CPU_INTRPT_ENABLE();
#endif
        /* type conversion is used to avoid compiler optimization */
        *(volatile idle_count_t*)(&g_idle_count[cpu_num]) = g_idle_count[cpu_num] + 1;
1fff223e:	1088      	lrw      	r4, 0x1fffd2b8	// 1fff225c <idle_task+0x20>
    krhino_idle_pre_hook();
1fff2240:	e0000a19 	bsr      	0x1fff3672	// 1fff3672 <krhino_idle_pre_hook>
        *(volatile idle_count_t*)(&g_idle_count[cpu_num]) = g_idle_count[cpu_num] + 1;
1fff2244:	9440      	ld.w      	r2, (r4, 0x0)
1fff2246:	9461      	ld.w      	r3, (r4, 0x4)
1fff2248:	2200      	addi      	r2, 1
1fff224a:	3a40      	cmpnei      	r2, 0
1fff224c:	c4630c21 	incf      	r3, r3, 1
1fff2250:	b440      	st.w      	r2, (r4, 0x0)
1fff2252:	b461      	st.w      	r3, (r4, 0x4)

#if (RHINO_CONFIG_USER_HOOK > 0)
        krhino_idle_hook();
1fff2254:	e000431e 	bsr      	0x1fffa890	// 1fffa890 <check_before_startup+0x1b8>
1fff2258:	07f6      	br      	0x1fff2244	// 1fff2244 <idle_task+0x8>
1fff225a:	0000      	bkpt
1fff225c:	1fffd2b8 	.long	0x1fffd2b8

1fff2260 <krhino_sem_give>:

kstat_t krhino_sem_give(ksem_t *sem)
{
1fff2260:	14d0      	push      	r15
    NULL_PARA_CHK(sem);
1fff2262:	3840      	cmpnei      	r0, 0
1fff2264:	0c05      	bf      	0x1fff226e	// 1fff226e <krhino_sem_give+0xe>

    return sem_give(sem, WAKE_ONE_SEM);
1fff2266:	3100      	movi      	r1, 0
1fff2268:	e3fffe52 	bsr      	0x1fff1f0c	// 1fff1f0c <sem_give>
}
1fff226c:	1490      	pop      	r15
    NULL_PARA_CHK(sem);
1fff226e:	3006      	movi      	r0, 6
1fff2270:	07fe      	br      	0x1fff226c	// 1fff226c <krhino_sem_give+0xc>

1fff2272 <ready_list_init>:
        rq->cur_list_item[prio] = NULL;
    }
}

RHINO_INLINE void ready_list_init(runqueue_t *rq, ktask_t *task)
{
1fff2272:	14c2      	push      	r4-r5
    rq->cur_list_item[task->prio] = &task->task_list;
1fff2274:	e441000f 	addi      	r2, r1, 16
1fff2278:	d8610064 	ld.b      	r3, (r1, 0x64)
1fff227c:	4362      	lsli      	r3, r3, 2
1fff227e:	60c0      	addu      	r3, r0
1fff2280:	b340      	st.w      	r2, (r3, 0x0)
    klist_init(rq->cur_list_item[task->prio]);
    krhino_bitmap_set(rq->task_bit_map, task->prio);
1fff2282:	e4a00037 	addi      	r5, r0, 56
    klist_init(rq->cur_list_item[task->prio]);
1fff2286:	d8610064 	ld.b      	r3, (r1, 0x64)
1fff228a:	4362      	lsli      	r3, r3, 2
1fff228c:	60c0      	addu      	r3, r0
1fff228e:	9360      	ld.w      	r3, (r3, 0x0)
    list_head->next = list_head;
1fff2290:	b360      	st.w      	r3, (r3, 0x0)
    list_head->prev = list_head;
1fff2292:	b361      	st.w      	r3, (r3, 0x4)
    krhino_bitmap_set(rq->task_bit_map, task->prio);
1fff2294:	d8410064 	ld.b      	r2, (r1, 0x64)
 *
 * @return  no return
 */
RHINO_INLINE void krhino_bitmap_set(uint32_t *bitmap, int32_t nr)
{
    bitmap[BITMAP_WORD(nr)] |= BITMAP_MASK(nr);
1fff2298:	5285      	asri      	r4, r2, 5
1fff229a:	4462      	lsli      	r3, r4, 2
1fff229c:	341f      	movi      	r4, 31
1fff229e:	60d4      	addu      	r3, r5
1fff22a0:	c4442042 	andn      	r2, r4, r2
1fff22a4:	3401      	movi      	r4, 1
1fff22a6:	7108      	lsl      	r4, r2
1fff22a8:	9340      	ld.w      	r2, (r3, 0x0)
1fff22aa:	6c90      	or      	r2, r4
1fff22ac:	b340      	st.w      	r2, (r3, 0x0)

    if ((task->prio) < (rq->highest_pri)) {
1fff22ae:	d8610064 	ld.b      	r3, (r1, 0x64)
1fff22b2:	d840003c 	ld.b      	r2, (r0, 0x3c)
1fff22b6:	648c      	cmphs      	r3, r2
1fff22b8:	0803      	bt      	0x1fff22be	// 1fff22be <ready_list_init+0x4c>
        rq->highest_pri = task->prio;
1fff22ba:	dc60003c 	st.b      	r3, (r0, 0x3c)
    }
}
1fff22be:	1482      	pop      	r4-r5

1fff22c0 <_ready_list_add_tail>:
{
    return (g_ready_queue.cur_list_item[prio] == NULL);
}

RHINO_INLINE void _ready_list_add_tail(runqueue_t *rq, ktask_t *task)
{
1fff22c0:	14d0      	push      	r15
    return (g_ready_queue.cur_list_item[prio] == NULL);
1fff22c2:	104c      	lrw      	r2, 0x1fffd274	// 1fff22f0 <_ready_list_add_tail+0x30>
1fff22c4:	d8610064 	ld.b      	r3, (r1, 0x64)
1fff22c8:	4362      	lsli      	r3, r3, 2
1fff22ca:	608c      	addu      	r2, r3
    if (is_ready_list_empty(task->prio)) {
1fff22cc:	9240      	ld.w      	r2, (r2, 0x0)
1fff22ce:	3a40      	cmpnei      	r2, 0
1fff22d0:	0804      	bt      	0x1fff22d8	// 1fff22d8 <_ready_list_add_tail+0x18>
        ready_list_init(rq, task);
1fff22d2:	e3ffffd0 	bsr      	0x1fff2272	// 1fff2272 <ready_list_init>
        return;
    }

    klist_insert(rq->cur_list_item[task->prio], &task->task_list);
}
1fff22d6:	1490      	pop      	r15
    klist_insert(rq->cur_list_item[task->prio], &task->task_list);
1fff22d8:	600c      	addu      	r0, r3
1fff22da:	9060      	ld.w      	r3, (r0, 0x0)
1fff22dc:	e441000f 	addi      	r2, r1, 16
    element->prev = head->prev;
1fff22e0:	9301      	ld.w      	r0, (r3, 0x4)
    element->next = head;
1fff22e2:	b164      	st.w      	r3, (r1, 0x10)
    element->prev = head->prev;
1fff22e4:	b105      	st.w      	r0, (r1, 0x14)
    head->prev->next = element;
1fff22e6:	9321      	ld.w      	r1, (r3, 0x4)
1fff22e8:	b140      	st.w      	r2, (r1, 0x0)
    head->prev       = element;
1fff22ea:	b341      	st.w      	r2, (r3, 0x4)
1fff22ec:	07f5      	br      	0x1fff22d6	// 1fff22d6 <_ready_list_add_tail+0x16>
1fff22ee:	0000      	bkpt
1fff22f0:	1fffd274 	.long	0x1fffd274

1fff22f4 <krhino_sched_disable>:
{
1fff22f4:	14d0      	push      	r15
    RHINO_CRITICAL_ENTER();
1fff22f6:	e000097d 	bsr      	0x1fff35f0	// 1fff35f0 <cpu_intrpt_save>
    INTRPT_NESTED_LEVEL_CHK();
1fff22fa:	106d      	lrw      	r3, 0x1fffd9b8	// 1fff232c <krhino_sched_disable+0x38>
1fff22fc:	8360      	ld.b      	r3, (r3, 0x0)
1fff22fe:	3b40      	cmpnei      	r3, 0
1fff2300:	0c06      	bf      	0x1fff230c	// 1fff230c <krhino_sched_disable+0x18>
1fff2302:	e000097c 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
1fff2306:	30fa      	movi      	r0, 250
1fff2308:	4002      	lsli      	r0, r0, 2
}
1fff230a:	1490      	pop      	r15
    if (g_sched_lock[cpu_cur_get()] >= SCHED_MAX_LOCK_COUNT) {
1fff230c:	1049      	lrw      	r2, 0x1fffd2b4	// 1fff2330 <krhino_sched_disable+0x3c>
1fff230e:	31c7      	movi      	r1, 199
1fff2310:	8260      	ld.b      	r3, (r2, 0x0)
1fff2312:	64c4      	cmphs      	r1, r3
1fff2314:	0805      	bt      	0x1fff231e	// 1fff231e <krhino_sched_disable+0x2a>
        RHINO_CRITICAL_EXIT();
1fff2316:	e0000972 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
        return RHINO_SCHED_LOCK_COUNT_OVF;
1fff231a:	30ca      	movi      	r0, 202
1fff231c:	07f7      	br      	0x1fff230a	// 1fff230a <krhino_sched_disable+0x16>
    g_sched_lock[cpu_cur_get()]++;
1fff231e:	2300      	addi      	r3, 1
1fff2320:	a260      	st.b      	r3, (r2, 0x0)
    RHINO_CRITICAL_EXIT();
1fff2322:	e000096c 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
    return RHINO_SUCCESS;
1fff2326:	3000      	movi      	r0, 0
1fff2328:	07f1      	br      	0x1fff230a	// 1fff230a <krhino_sched_disable+0x16>
1fff232a:	0000      	bkpt
1fff232c:	1fffd9b8 	.long	0x1fffd9b8
1fff2330:	1fffd2b4 	.long	0x1fffd2b4

1fff2334 <core_sched>:
{
1fff2334:	14d0      	push      	r15
    if (g_intrpt_nested_level[cur_cpu_num] > 0u) {
1fff2336:	106e      	lrw      	r3, 0x1fffd9b8	// 1fff236c <core_sched+0x38>
1fff2338:	8360      	ld.b      	r3, (r3, 0x0)
1fff233a:	3b40      	cmpnei      	r3, 0
1fff233c:	0816      	bt      	0x1fff2368	// 1fff2368 <core_sched+0x34>
    if (g_sched_lock[cur_cpu_num] > 0u) {
1fff233e:	106d      	lrw      	r3, 0x1fffd2b4	// 1fff2370 <core_sched+0x3c>
1fff2340:	8360      	ld.b      	r3, (r3, 0x0)
1fff2342:	3b40      	cmpnei      	r3, 0
1fff2344:	0812      	bt      	0x1fff2368	// 1fff2368 <core_sched+0x34>
    }
}
#else
ktask_t *preferred_cpu_ready_task_get(runqueue_t *rq, uint8_t cpu_num)
{
    klist_t *node = rq->cur_list_item[rq->highest_pri];
1fff2346:	106c      	lrw      	r3, 0x1fffd274	// 1fff2374 <core_sched+0x40>
1fff2348:	d843003c 	ld.b      	r2, (r3, 0x3c)
1fff234c:	4242      	lsli      	r2, r2, 2
1fff234e:	60c8      	addu      	r3, r2
    /* get the highest prio task object */
    return krhino_list_entry(node, ktask_t, task_list);
1fff2350:	9320      	ld.w      	r1, (r3, 0x0)
1fff2352:	290f      	subi      	r1, 16
    if (preferred_task == g_active_task[cur_cpu_num]) {
1fff2354:	1069      	lrw      	r3, 0x1fffdad4	// 1fff2378 <core_sched+0x44>
1fff2356:	9300      	ld.w      	r0, (r3, 0x0)
1fff2358:	6406      	cmpne      	r1, r0
1fff235a:	0c07      	bf      	0x1fff2368	// 1fff2368 <core_sched+0x34>
    g_preferred_ready_task[cur_cpu_num] = preferred_task;
1fff235c:	1068      	lrw      	r3, 0x1fffd858	// 1fff237c <core_sched+0x48>
1fff235e:	b320      	st.w      	r1, (r3, 0x0)
    krhino_task_switch_hook(g_active_task[cur_cpu_num], g_preferred_ready_task[cur_cpu_num]);
1fff2360:	e0000987 	bsr      	0x1fff366e	// 1fff366e <krhino_task_switch_hook>
    cpu_task_switch();
1fff2364:	e0000a72 	bsr      	0x1fff3848	// 1fff3848 <cpu_task_switch>
}
1fff2368:	1490      	pop      	r15
1fff236a:	0000      	bkpt
1fff236c:	1fffd9b8 	.long	0x1fffd9b8
1fff2370:	1fffd2b4 	.long	0x1fffd2b4
1fff2374:	1fffd274 	.long	0x1fffd274
1fff2378:	1fffdad4 	.long	0x1fffdad4
1fff237c:	1fffd858 	.long	0x1fffd858

1fff2380 <krhino_sched_enable>:
{
1fff2380:	14d1      	push      	r4, r15
    RHINO_CRITICAL_ENTER();
1fff2382:	e0000937 	bsr      	0x1fff35f0	// 1fff35f0 <cpu_intrpt_save>
    INTRPT_NESTED_LEVEL_CHK();
1fff2386:	1072      	lrw      	r3, 0x1fffd9b8	// 1fff23cc <krhino_sched_enable+0x4c>
1fff2388:	8360      	ld.b      	r3, (r3, 0x0)
1fff238a:	3b40      	cmpnei      	r3, 0
1fff238c:	0c06      	bf      	0x1fff2398	// 1fff2398 <krhino_sched_enable+0x18>
1fff238e:	e0000936 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
1fff2392:	30fa      	movi      	r0, 250
1fff2394:	4002      	lsli      	r0, r0, 2
}
1fff2396:	1491      	pop      	r4, r15
    if (g_sched_lock[cpu_cur_get()] == 0u) {
1fff2398:	104e      	lrw      	r2, 0x1fffd2b4	// 1fff23d0 <krhino_sched_enable+0x50>
1fff239a:	8260      	ld.b      	r3, (r2, 0x0)
1fff239c:	3b40      	cmpnei      	r3, 0
1fff239e:	0805      	bt      	0x1fff23a8	// 1fff23a8 <krhino_sched_enable+0x28>
        RHINO_CRITICAL_EXIT();
1fff23a0:	e000092d 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
        return RHINO_SCHED_ALREADY_ENABLED;
1fff23a4:	30c9      	movi      	r0, 201
1fff23a6:	07f8      	br      	0x1fff2396	// 1fff2396 <krhino_sched_enable+0x16>
    g_sched_lock[cpu_cur_get()]--;
1fff23a8:	2b00      	subi      	r3, 1
1fff23aa:	74cc      	zextb      	r3, r3
1fff23ac:	a260      	st.b      	r3, (r2, 0x0)
    if (g_sched_lock[cpu_cur_get()] > 0u) {
1fff23ae:	3b40      	cmpnei      	r3, 0
1fff23b0:	0c05      	bf      	0x1fff23ba	// 1fff23ba <krhino_sched_enable+0x3a>
        RHINO_CRITICAL_EXIT();
1fff23b2:	e0000924 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
        return RHINO_SCHED_DISABLE;
1fff23b6:	30c8      	movi      	r0, 200
1fff23b8:	07ef      	br      	0x1fff2396	// 1fff2396 <krhino_sched_enable+0x16>
1fff23ba:	6d03      	mov      	r4, r0
    RHINO_CRITICAL_EXIT_SCHED();
1fff23bc:	e3ffffbc 	bsr      	0x1fff2334	// 1fff2334 <core_sched>
1fff23c0:	6c13      	mov      	r0, r4
1fff23c2:	e000091c 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
    return RHINO_SUCCESS;
1fff23c6:	3000      	movi      	r0, 0
1fff23c8:	07e7      	br      	0x1fff2396	// 1fff2396 <krhino_sched_enable+0x16>
1fff23ca:	0000      	bkpt
1fff23cc:	1fffd9b8 	.long	0x1fffd9b8
1fff23d0:	1fffd2b4 	.long	0x1fffd2b4

1fff23d4 <runqueue_init>:
    rq->highest_pri = RHINO_CONFIG_PRI_MAX;
1fff23d4:	330e      	movi      	r3, 14
1fff23d6:	dc60003c 	st.b      	r3, (r0, 0x3c)
1fff23da:	e4600037 	addi      	r3, r0, 56
        rq->cur_list_item[prio] = NULL;
1fff23de:	3200      	movi      	r2, 0
1fff23e0:	b040      	st.w      	r2, (r0, 0x0)
1fff23e2:	2003      	addi      	r0, 4
    for (prio = 0; prio < RHINO_CONFIG_PRI_MAX; prio++) {
1fff23e4:	64c2      	cmpne      	r0, r3
1fff23e6:	0bfc      	bt      	0x1fff23de	// 1fff23de <runqueue_init+0xa>
}
1fff23e8:	783c      	jmp      	r15
	...

1fff23ec <ready_list_add_head>:
{
1fff23ec:	14d1      	push      	r4, r15
    return (g_ready_queue.cur_list_item[prio] == NULL);
1fff23ee:	104e      	lrw      	r2, 0x1fffd274	// 1fff2424 <ready_list_add_head+0x38>
1fff23f0:	d8610064 	ld.b      	r3, (r1, 0x64)
1fff23f4:	4362      	lsli      	r3, r3, 2
1fff23f6:	608c      	addu      	r2, r3
    if (is_ready_list_empty(task->prio)) {
1fff23f8:	9240      	ld.w      	r2, (r2, 0x0)
1fff23fa:	3a40      	cmpnei      	r2, 0
1fff23fc:	0804      	bt      	0x1fff2404	// 1fff2404 <ready_list_add_head+0x18>
        ready_list_init(rq, task);
1fff23fe:	e3ffff3a 	bsr      	0x1fff2272	// 1fff2272 <ready_list_init>
}
1fff2402:	1491      	pop      	r4, r15
    klist_insert(rq->cur_list_item[task->prio], &task->task_list);
1fff2404:	60c0      	addu      	r3, r0
1fff2406:	9360      	ld.w      	r3, (r3, 0x0)
1fff2408:	e441000f 	addi      	r2, r1, 16
    element->prev = head->prev;
1fff240c:	9381      	ld.w      	r4, (r3, 0x4)
    element->next = head;
1fff240e:	b164      	st.w      	r3, (r1, 0x10)
    element->prev = head->prev;
1fff2410:	b185      	st.w      	r4, (r1, 0x14)
    head->prev->next = element;
1fff2412:	9381      	ld.w      	r4, (r3, 0x4)
1fff2414:	b440      	st.w      	r2, (r4, 0x0)
    head->prev       = element;
1fff2416:	b341      	st.w      	r2, (r3, 0x4)
    rq->cur_list_item[task->prio] = &task->task_list;
1fff2418:	d8610064 	ld.b      	r3, (r1, 0x64)
1fff241c:	4362      	lsli      	r3, r3, 2
1fff241e:	600c      	addu      	r0, r3
1fff2420:	b040      	st.w      	r2, (r0, 0x0)
}
1fff2422:	07f0      	br      	0x1fff2402	// 1fff2402 <ready_list_add_head+0x16>
1fff2424:	1fffd274 	.long	0x1fffd274

1fff2428 <ready_list_add_tail>:
1fff2428:	14d0      	push      	r15
1fff242a:	e3ffff4b 	bsr      	0x1fff22c0	// 1fff22c0 <_ready_list_add_tail>
1fff242e:	1490      	pop      	r15

1fff2430 <ready_list_add>:
{
1fff2430:	14d0      	push      	r15
    _ready_list_add_tail(rq, task);
1fff2432:	e3ffff47 	bsr      	0x1fff22c0	// 1fff22c0 <_ready_list_add_tail>
}
1fff2436:	1490      	pop      	r15

1fff2438 <ready_list_rm>:
{
1fff2438:	14d2      	push      	r4-r5, r15
    uint8_t  pri = task->prio;
1fff243a:	d8810064 	ld.b      	r4, (r1, 0x64)
1fff243e:	4462      	lsli      	r3, r4, 2
1fff2440:	60c0      	addu      	r3, r0
    if ((rq->cur_list_item[pri]) != (rq->cur_list_item[pri]->next)) {
1fff2442:	9340      	ld.w      	r2, (r3, 0x0)
1fff2444:	92a0      	ld.w      	r5, (r2, 0x0)
1fff2446:	654a      	cmpne      	r2, r5
1fff2448:	0c0d      	bf      	0x1fff2462	// 1fff2462 <ready_list_rm+0x2a>
        if (rq->cur_list_item[pri] == &task->task_list) {
1fff244a:	e401000f 	addi      	r0, r1, 16
1fff244e:	640a      	cmpne      	r2, r0
1fff2450:	0802      	bt      	0x1fff2454	// 1fff2454 <ready_list_rm+0x1c>
            rq->cur_list_item[pri] = rq->cur_list_item[pri]->next;
1fff2452:	b3a0      	st.w      	r5, (r3, 0x0)
    element->prev->next = element->next;
1fff2454:	9165      	ld.w      	r3, (r1, 0x14)
1fff2456:	9144      	ld.w      	r2, (r1, 0x10)
1fff2458:	b340      	st.w      	r2, (r3, 0x0)
    element->next->prev = element->prev;
1fff245a:	9164      	ld.w      	r3, (r1, 0x10)
1fff245c:	9145      	ld.w      	r2, (r1, 0x14)
1fff245e:	b341      	st.w      	r2, (r3, 0x4)
}
1fff2460:	1492      	pop      	r4-r5, r15
    rq->cur_list_item[pri] = NULL;
1fff2462:	3200      	movi      	r2, 0
 *
 * @return  no return
 */
RHINO_INLINE void krhino_bitmap_clear(uint32_t *bitmap, int32_t nr)
{
    bitmap[BITMAP_WORD(nr)] &= ~BITMAP_MASK(nr);
1fff2464:	311f      	movi      	r1, 31
1fff2466:	b340      	st.w      	r2, (r3, 0x0)
1fff2468:	5445      	asri      	r2, r4, 5
1fff246a:	c4812045 	andn      	r5, r1, r4
    krhino_bitmap_clear(rq->task_bit_map, pri);
1fff246e:	e4600037 	addi      	r3, r0, 56
1fff2472:	4242      	lsli      	r2, r2, 2
1fff2474:	608c      	addu      	r2, r3
1fff2476:	3100      	movi      	r1, 0
1fff2478:	2901      	subi      	r1, 2
1fff247a:	7057      	rotl      	r1, r5
1fff247c:	92a0      	ld.w      	r5, (r2, 0x0)
1fff247e:	6854      	and      	r1, r5
1fff2480:	b220      	st.w      	r1, (r2, 0x0)
    if (pri != rq->highest_pri) {
1fff2482:	d840003c 	ld.b      	r2, (r0, 0x3c)
1fff2486:	650a      	cmpne      	r2, r4
1fff2488:	0bec      	bt      	0x1fff2460	// 1fff2460 <ready_list_rm+0x28>
1fff248a:	3400      	movi      	r4, 0
1fff248c:	3220      	movi      	r2, 32
 */
RHINO_INLINE int32_t krhino_find_first_bit(uint32_t *bitmap)
{
    int32_t  nr  = 0;

    while (*bitmap == 0UL) {
1fff248e:	9320      	ld.w      	r1, (r3, 0x0)
1fff2490:	3940      	cmpnei      	r1, 0
1fff2492:	0c22      	bf      	0x1fff24d6	// 1fff24d6 <ready_list_rm+0x9e>
    if ((x & 0XFFFF0000) == 0) {
1fff2494:	4970      	lsri      	r3, r1, 16
1fff2496:	3b40      	cmpnei      	r3, 0
1fff2498:	0822      	bt      	0x1fff24dc	// 1fff24dc <ready_list_rm+0xa4>
        x <<= 16;
1fff249a:	4130      	lsli      	r1, r1, 16
        n += 16;
1fff249c:	3310      	movi      	r3, 16
    if ((x & 0XFF000000) == 0) {
1fff249e:	4958      	lsri      	r2, r1, 24
1fff24a0:	3a40      	cmpnei      	r2, 0
1fff24a2:	0804      	bt      	0x1fff24aa	// 1fff24aa <ready_list_rm+0x72>
        n += 8;
1fff24a4:	5b5e      	addi      	r2, r3, 8
        x <<= 8;
1fff24a6:	4128      	lsli      	r1, r1, 8
        n += 8;
1fff24a8:	74c8      	zextb      	r3, r2
    if ((x & 0XF0000000) == 0) {
1fff24aa:	495c      	lsri      	r2, r1, 28
1fff24ac:	3a40      	cmpnei      	r2, 0
1fff24ae:	0804      	bt      	0x1fff24b6	// 1fff24b6 <ready_list_rm+0x7e>
        n += 4;
1fff24b0:	5b4e      	addi      	r2, r3, 4
        x <<= 4;
1fff24b2:	4124      	lsli      	r1, r1, 4
        n += 4;
1fff24b4:	74c8      	zextb      	r3, r2
    if ((x & 0XC0000000) == 0) {
1fff24b6:	495e      	lsri      	r2, r1, 30
1fff24b8:	3a40      	cmpnei      	r2, 0
1fff24ba:	0804      	bt      	0x1fff24c2	// 1fff24c2 <ready_list_rm+0x8a>
        n += 2;
1fff24bc:	5b46      	addi      	r2, r3, 2
        x <<= 2;
1fff24be:	4122      	lsli      	r1, r1, 2
        n += 2;
1fff24c0:	74c8      	zextb      	r3, r2
    if ((x & 0X80000000) == 0) {
1fff24c2:	39df      	btsti      	r1, 31
1fff24c4:	0803      	bt      	0x1fff24ca	// 1fff24ca <ready_list_rm+0x92>
        n += 1;
1fff24c6:	5b42      	addi      	r2, r3, 1
1fff24c8:	74c8      	zextb      	r3, r2
        nr += BITMAP_UNIT_SIZE;
        bitmap++;
    }

    nr += krhino_clz32(*bitmap);
1fff24ca:	60d0      	addu      	r3, r4
    if (i >= 0) {
1fff24cc:	3bdf      	btsti      	r3, 31
1fff24ce:	0809      	bt      	0x1fff24e0	// 1fff24e0 <ready_list_rm+0xa8>
        rq->highest_pri = i;
1fff24d0:	dc60003c 	st.b      	r3, (r0, 0x3c)
1fff24d4:	07c6      	br      	0x1fff2460	// 1fff2460 <ready_list_rm+0x28>
1fff24d6:	6108      	addu      	r4, r2
        bitmap++;
1fff24d8:	2303      	addi      	r3, 4
1fff24da:	07da      	br      	0x1fff248e	// 1fff248e <ready_list_rm+0x56>
    uint8_t n = 0;
1fff24dc:	3300      	movi      	r3, 0
1fff24de:	07e0      	br      	0x1fff249e	// 1fff249e <ready_list_rm+0x66>
        k_err_proc(RHINO_SYS_FATAL_ERR);
1fff24e0:	ea0201af 	movi      	r2, 431
1fff24e4:	1023      	lrw      	r1, 0x110121e3	// 1fff24f0 <ready_list_rm+0xb8>
1fff24e6:	3001      	movi      	r0, 1
1fff24e8:	e3fffea0 	bsr      	0x1fff2228	// 1fff2228 <k_err_proc_debug>
1fff24ec:	07ba      	br      	0x1fff2460	// 1fff2460 <ready_list_rm+0x28>
1fff24ee:	0000      	bkpt
1fff24f0:	110121e3 	.long	0x110121e3

1fff24f4 <preferred_cpu_ready_task_get>:
    klist_t *node = rq->cur_list_item[rq->highest_pri];
1fff24f4:	d860003c 	ld.b      	r3, (r0, 0x3c)
1fff24f8:	4362      	lsli      	r3, r3, 2
1fff24fa:	600c      	addu      	r0, r3
    return krhino_list_entry(node, ktask_t, task_list);
1fff24fc:	9000      	ld.w      	r0, (r0, 0x0)
1fff24fe:	280f      	subi      	r0, 16
}
1fff2500:	783c      	jmp      	r15
	...

1fff2504 <time_slice_update>:
#endif

#if (RHINO_CONFIG_SCHED_RR > 0)
void time_slice_update(void)
{
1fff2504:	14d2      	push      	r4-r5, r15

    ktask_t *task;
    klist_t *head;
    uint8_t  task_pri;

    RHINO_CRITICAL_ENTER();
1fff2506:	e0000875 	bsr      	0x1fff35f0	// 1fff35f0 <cpu_intrpt_save>
    task = g_active_task[cpu_cur_get()];
1fff250a:	1072      	lrw      	r3, 0x1fffdad4	// 1fff2550 <time_slice_update+0x4c>
        return;
    }
#endif

    task_pri = task->prio;
    head = g_ready_queue.cur_list_item[task_pri];
1fff250c:	1052      	lrw      	r2, 0x1fffd274	// 1fff2554 <time_slice_update+0x50>
    task = g_active_task[cpu_cur_get()];
1fff250e:	9360      	ld.w      	r3, (r3, 0x0)
    head = g_ready_queue.cur_list_item[task_pri];
1fff2510:	d8a30064 	ld.b      	r5, (r3, 0x64)
1fff2514:	45a2      	lsli      	r5, r5, 2
1fff2516:	5a34      	addu      	r1, r2, r5
1fff2518:	9180      	ld.w      	r4, (r1, 0x0)
1fff251a:	6c4b      	mov      	r1, r2

    /* if ready list is empty then just return because nothing is to be caculated */
    if (is_ready_list_empty(task_pri)) {
1fff251c:	3c40      	cmpnei      	r4, 0
1fff251e:	0804      	bt      	0x1fff2526	// 1fff2526 <time_slice_update+0x22>
    ready_list_head_to_tail(&g_ready_queue, task);

    /* restore the task time slice */
    task->time_slice = task->time_total;

    RHINO_CRITICAL_EXIT();
1fff2520:	e000086d 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
}
1fff2524:	1492      	pop      	r4-r5, r15
    if (task->sched_policy == KSCHED_FIFO) {
1fff2526:	d8430061 	ld.b      	r2, (r3, 0x61)
1fff252a:	3a40      	cmpnei      	r2, 0
1fff252c:	0ffa      	bf      	0x1fff2520	// 1fff2520 <time_slice_update+0x1c>
    if (head->next == head) {
1fff252e:	9440      	ld.w      	r2, (r4, 0x0)
1fff2530:	6492      	cmpne      	r4, r2
1fff2532:	0ff7      	bf      	0x1fff2520	// 1fff2520 <time_slice_update+0x1c>
    if (task->time_slice > 0u) {
1fff2534:	9354      	ld.w      	r2, (r3, 0x50)
1fff2536:	3a40      	cmpnei      	r2, 0
1fff2538:	0c03      	bf      	0x1fff253e	// 1fff253e <time_slice_update+0x3a>
        task->time_slice--;
1fff253a:	2a00      	subi      	r2, 1
1fff253c:	b354      	st.w      	r2, (r3, 0x50)
    if (task->time_slice > 0u) {
1fff253e:	9354      	ld.w      	r2, (r3, 0x50)
1fff2540:	3a40      	cmpnei      	r2, 0
1fff2542:	0bef      	bt      	0x1fff2520	// 1fff2520 <time_slice_update+0x1c>
    rq->cur_list_item[task->prio] = rq->cur_list_item[task->prio]->next;
1fff2544:	5954      	addu      	r2, r1, r5
1fff2546:	9420      	ld.w      	r1, (r4, 0x0)
1fff2548:	b220      	st.w      	r1, (r2, 0x0)
    task->time_slice = task->time_total;
1fff254a:	9355      	ld.w      	r2, (r3, 0x54)
1fff254c:	b354      	st.w      	r2, (r3, 0x50)
1fff254e:	07e9      	br      	0x1fff2520	// 1fff2520 <time_slice_update+0x1c>
1fff2550:	1fffdad4 	.long	0x1fffdad4
1fff2554:	1fffd274 	.long	0x1fffd274

1fff2558 <buf_queue_create>:

#if (RHINO_CONFIG_BUF_QUEUE > 0)

static kstat_t buf_queue_create(kbuf_queue_t *queue, const name_t *name, void *buf, size_t size,
                                size_t max_msg, uint8_t mm_alloc_flag, size_t type)
{
1fff2558:	14d4      	push      	r4-r7, r15
1fff255a:	1424      	subi      	r14, r14, 16
1fff255c:	6d8f      	mov      	r6, r3
1fff255e:	9869      	ld.w      	r3, (r14, 0x24)
#if (RHINO_CONFIG_KOBJ_LIST > 0)
    CPSR_ALLOC();
#endif

    NULL_PARA_CHK(queue);
1fff2560:	3840      	cmpnei      	r0, 0
{
1fff2562:	b861      	st.w      	r3, (r14, 0x4)
1fff2564:	986b      	ld.w      	r3, (r14, 0x2c)
1fff2566:	6d03      	mov      	r4, r0
1fff2568:	b862      	st.w      	r3, (r14, 0x8)
1fff256a:	6dc7      	mov      	r7, r1
1fff256c:	6d4b      	mov      	r5, r2
1fff256e:	d86e0028 	ld.b      	r3, (r14, 0x28)
    NULL_PARA_CHK(queue);
1fff2572:	0c2f      	bf      	0x1fff25d0	// 1fff25d0 <buf_queue_create+0x78>
    NULL_PARA_CHK(buf);
1fff2574:	3a40      	cmpnei      	r2, 0
1fff2576:	0c2d      	bf      	0x1fff25d0	// 1fff25d0 <buf_queue_create+0x78>
    NULL_PARA_CHK(name);
1fff2578:	3940      	cmpnei      	r1, 0
1fff257a:	0c2b      	bf      	0x1fff25d0	// 1fff25d0 <buf_queue_create+0x78>

    if (max_msg == 0u) {
1fff257c:	9841      	ld.w      	r2, (r14, 0x4)
1fff257e:	3a40      	cmpnei      	r2, 0
1fff2580:	0c2a      	bf      	0x1fff25d4	// 1fff25d4 <buf_queue_create+0x7c>
        return RHINO_INV_PARAM;
    }

    if (size == 0u) {
1fff2582:	3e40      	cmpnei      	r6, 0
1fff2584:	0c2a      	bf      	0x1fff25d8	// 1fff25d8 <buf_queue_create+0x80>
        return RHINO_BUF_QUEUE_SIZE_ZERO;
    }

    memset(queue, 0, sizeof(kbuf_queue_t));
1fff2586:	324c      	movi      	r2, 76
1fff2588:	3100      	movi      	r1, 0
1fff258a:	b863      	st.w      	r3, (r14, 0xc)
1fff258c:	e000410a 	bsr      	0x1fffa7a0	// 1fffa7a0 <check_before_startup+0xc8>

    /* init the queue blocked list */
    klist_init(&queue->blk_obj.blk_list);

    queue->buf                = buf;
    queue->cur_num            = 0u;
1fff2590:	3300      	movi      	r3, 0
    list_head->next = list_head;
1fff2592:	b480      	st.w      	r4, (r4, 0x0)
1fff2594:	b46f      	st.w      	r3, (r4, 0x3c)
    queue->peak_num           = 0u;
1fff2596:	b470      	st.w      	r3, (r4, 0x40)
    queue->max_msg_size       = max_msg;
1fff2598:	9861      	ld.w      	r3, (r14, 0x4)
    list_head->prev = list_head;
1fff259a:	b481      	st.w      	r4, (r4, 0x4)
1fff259c:	b46e      	st.w      	r3, (r4, 0x38)
    queue->blk_obj.name       = name;
    queue->blk_obj.blk_policy = BLK_POLICY_PRI;
1fff259e:	3300      	movi      	r3, 0
    queue->buf                = buf;
1fff25a0:	b4a6      	st.w      	r5, (r4, 0x18)
    queue->blk_obj.blk_policy = BLK_POLICY_PRI;
1fff25a2:	b463      	st.w      	r3, (r4, 0xc)
    queue->mm_alloc_flag      = mm_alloc_flag;
1fff25a4:	9863      	ld.w      	r3, (r14, 0xc)
    queue->blk_obj.name       = name;
1fff25a6:	b4e2      	st.w      	r7, (r4, 0x8)
    queue->mm_alloc_flag      = mm_alloc_flag;
1fff25a8:	dc640048 	st.b      	r3, (r4, 0x48)
#if (RHINO_CONFIG_TASK_DEL > 0)
    queue->blk_obj.cancel     = 1u;
1fff25ac:	3301      	movi      	r3, 1
    RHINO_CRITICAL_EXIT();
#endif

    queue->blk_obj.obj_type = RHINO_BUF_QUEUE_OBJ_TYPE;

    ringbuf_init(&(queue->ringbuf), buf, size, type, max_msg);
1fff25ae:	6c9b      	mov      	r2, r6
    queue->blk_obj.cancel     = 1u;
1fff25b0:	a474      	st.b      	r3, (r4, 0x14)
    queue->blk_obj.obj_type = RHINO_BUF_QUEUE_OBJ_TYPE;
1fff25b2:	3304      	movi      	r3, 4
    ringbuf_init(&(queue->ringbuf), buf, size, type, max_msg);
1fff25b4:	6c57      	mov      	r1, r5
    queue->blk_obj.obj_type = RHINO_BUF_QUEUE_OBJ_TYPE;
1fff25b6:	b464      	st.w      	r3, (r4, 0x10)
    ringbuf_init(&(queue->ringbuf), buf, size, type, max_msg);
1fff25b8:	9861      	ld.w      	r3, (r14, 0x4)
1fff25ba:	e404001b 	addi      	r0, r4, 28
1fff25be:	b860      	st.w      	r3, (r14, 0x0)
1fff25c0:	9862      	ld.w      	r3, (r14, 0x8)
1fff25c2:	e3fffe28 	bsr      	0x1fff2212	// 1fff2212 <ringbuf_init>
    queue->min_free_buf_size  = queue->ringbuf.freesize;
1fff25c6:	946b      	ld.w      	r3, (r4, 0x2c)
1fff25c8:	3000      	movi      	r0, 0
1fff25ca:	b471      	st.w      	r3, (r4, 0x44)
    TRACE_BUF_QUEUE_CREATE(krhino_cur_task_get(), queue);

    return RHINO_SUCCESS;
}
1fff25cc:	1404      	addi      	r14, r14, 16
1fff25ce:	1494      	pop      	r4-r7, r15
    NULL_PARA_CHK(queue);
1fff25d0:	3006      	movi      	r0, 6
1fff25d2:	07fd      	br      	0x1fff25cc	// 1fff25cc <buf_queue_create+0x74>
        return RHINO_INV_PARAM;
1fff25d4:	3005      	movi      	r0, 5
1fff25d6:	07fb      	br      	0x1fff25cc	// 1fff25cc <buf_queue_create+0x74>
        return RHINO_BUF_QUEUE_SIZE_ZERO;
1fff25d8:	ea0002bd 	movi      	r0, 701
1fff25dc:	07f8      	br      	0x1fff25cc	// 1fff25cc <buf_queue_create+0x74>

1fff25de <krhino_fix_buf_queue_create>:
    return buf_queue_create(queue, name, buf, size, max_msg, K_OBJ_STATIC_ALLOC, RINGBUF_TYPE_DYN);
}

kstat_t krhino_fix_buf_queue_create(kbuf_queue_t *queue, const name_t *name,
                                   void *buf, size_t msg_size, size_t msg_num)
{
1fff25de:	14d2      	push      	r4-r5, r15
1fff25e0:	1423      	subi      	r14, r14, 12
    return buf_queue_create(queue, name, buf, msg_size * msg_num, msg_size, K_OBJ_STATIC_ALLOC, RINGBUF_TYPE_FIX);
1fff25e2:	3500      	movi      	r5, 0
{
1fff25e4:	6d0f      	mov      	r4, r3
    return buf_queue_create(queue, name, buf, msg_size * msg_num, msg_size, K_OBJ_STATIC_ALLOC, RINGBUF_TYPE_FIX);
1fff25e6:	b8a2      	st.w      	r5, (r14, 0x8)
1fff25e8:	3501      	movi      	r5, 1
{
1fff25ea:	9866      	ld.w      	r3, (r14, 0x18)
    return buf_queue_create(queue, name, buf, msg_size * msg_num, msg_size, K_OBJ_STATIC_ALLOC, RINGBUF_TYPE_FIX);
1fff25ec:	7cd0      	mult      	r3, r4
1fff25ee:	b8a1      	st.w      	r5, (r14, 0x4)
1fff25f0:	b880      	st.w      	r4, (r14, 0x0)
1fff25f2:	e3ffffb3 	bsr      	0x1fff2558	// 1fff2558 <buf_queue_create>
}
1fff25f6:	1403      	addi      	r14, r14, 12
1fff25f8:	1492      	pop      	r4-r5, r15

1fff25fa <krhino_buf_queue_send>:

    return RHINO_SUCCESS;
}

kstat_t krhino_buf_queue_send(kbuf_queue_t *queue, void *msg, size_t size)
{
1fff25fa:	14d4      	push      	r4-r7, r15
1fff25fc:	6d03      	mov      	r4, r0
    NULL_PARA_CHK(queue);
1fff25fe:	3840      	cmpnei      	r0, 0
{
1fff2600:	6d4b      	mov      	r5, r2
    NULL_PARA_CHK(queue);
1fff2602:	0c54      	bf      	0x1fff26aa	// 1fff26aa <krhino_buf_queue_send+0xb0>
    NULL_PARA_CHK(msg);
1fff2604:	3940      	cmpnei      	r1, 0
1fff2606:	6dc7      	mov      	r7, r1
1fff2608:	0c51      	bf      	0x1fff26aa	// 1fff26aa <krhino_buf_queue_send+0xb0>
    RHINO_CRITICAL_ENTER();
1fff260a:	e00007f3 	bsr      	0x1fff35f0	// 1fff35f0 <cpu_intrpt_save>
    if (queue->blk_obj.obj_type != RHINO_BUF_QUEUE_OBJ_TYPE) {
1fff260e:	9464      	ld.w      	r3, (r4, 0x10)
    RHINO_CRITICAL_ENTER();
1fff2610:	6d83      	mov      	r6, r0
    if (queue->blk_obj.obj_type != RHINO_BUF_QUEUE_OBJ_TYPE) {
1fff2612:	3b44      	cmpnei      	r3, 4
1fff2614:	6c5f      	mov      	r1, r7
1fff2616:	0c06      	bf      	0x1fff2622	// 1fff2622 <krhino_buf_queue_send+0x28>
        RHINO_CRITICAL_EXIT();
1fff2618:	e00007f1 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
        return RHINO_KOBJ_TYPE_ERR;
1fff261c:	3508      	movi      	r5, 8

    return buf_queue_send(queue, msg, size);
}
1fff261e:	6c17      	mov      	r0, r5
1fff2620:	1494      	pop      	r4-r7, r15
    if (msg_size > queue->max_msg_size) {
1fff2622:	946e      	ld.w      	r3, (r4, 0x38)
1fff2624:	654c      	cmphs      	r3, r5
1fff2626:	0806      	bt      	0x1fff2632	// 1fff2632 <krhino_buf_queue_send+0x38>
        RHINO_CRITICAL_EXIT();
1fff2628:	e00007e9 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
        return RHINO_BUF_QUEUE_MSG_SIZE_OVERFLOW;
1fff262c:	ea0502bf 	movi      	r5, 703
1fff2630:	07f7      	br      	0x1fff261e	// 1fff261e <krhino_buf_queue_send+0x24>
    if (msg_size == 0) {
1fff2632:	3d40      	cmpnei      	r5, 0
1fff2634:	0805      	bt      	0x1fff263e	// 1fff263e <krhino_buf_queue_send+0x44>
        RHINO_CRITICAL_EXIT();
1fff2636:	e00007e2 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
        return RHINO_INV_PARAM;
1fff263a:	3505      	movi      	r5, 5
1fff263c:	07f1      	br      	0x1fff261e	// 1fff261e <krhino_buf_queue_send+0x24>
    return (list->next == list);
1fff263e:	9460      	ld.w      	r3, (r4, 0x0)
    if (is_klist_empty(head)) {
1fff2640:	64d2      	cmpne      	r4, r3
1fff2642:	0823      	bt      	0x1fff2688	// 1fff2688 <krhino_buf_queue_send+0x8e>
        err = ringbuf_push(&(queue->ringbuf), msg, msg_size);
1fff2644:	6c97      	mov      	r2, r5
1fff2646:	e404001b 	addi      	r0, r4, 28
1fff264a:	e3fffd5b 	bsr      	0x1fff2100	// 1fff2100 <ringbuf_push>
1fff264e:	6d43      	mov      	r5, r0
        if (err != RHINO_SUCCESS) {
1fff2650:	3840      	cmpnei      	r0, 0
1fff2652:	0c0b      	bf      	0x1fff2668	// 1fff2668 <krhino_buf_queue_send+0x6e>
            RHINO_CRITICAL_EXIT();
1fff2654:	6c1b      	mov      	r0, r6
1fff2656:	e00007d2 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
                err =  RHINO_BUF_QUEUE_FULL;
1fff265a:	eb45006a 	cmpnei      	r5, 106
1fff265e:	ea0302be 	movi      	r3, 702
1fff2662:	c4a30c20 	incf      	r5, r3, 0
1fff2666:	07dc      	br      	0x1fff261e	// 1fff261e <krhino_buf_queue_send+0x24>
        if (queue->peak_num  < queue->cur_num) {
1fff2668:	9450      	ld.w      	r2, (r4, 0x40)
        queue->cur_num++;
1fff266a:	946f      	ld.w      	r3, (r4, 0x3c)
1fff266c:	2300      	addi      	r3, 1
        if (queue->peak_num  < queue->cur_num) {
1fff266e:	64c8      	cmphs      	r2, r3
        queue->cur_num++;
1fff2670:	b46f      	st.w      	r3, (r4, 0x3c)
        if (queue->peak_num  < queue->cur_num) {
1fff2672:	0802      	bt      	0x1fff2676	// 1fff2676 <krhino_buf_queue_send+0x7c>
            queue->peak_num  = queue->cur_num;
1fff2674:	b470      	st.w      	r3, (r4, 0x40)
        if (queue->min_free_buf_size > queue->ringbuf.freesize) {
1fff2676:	946b      	ld.w      	r3, (r4, 0x2c)
1fff2678:	9451      	ld.w      	r2, (r4, 0x44)
1fff267a:	648c      	cmphs      	r3, r2
1fff267c:	0802      	bt      	0x1fff2680	// 1fff2680 <krhino_buf_queue_send+0x86>
            queue->min_free_buf_size = queue->ringbuf.freesize;
1fff267e:	b471      	st.w      	r3, (r4, 0x44)
        RHINO_CRITICAL_EXIT();
1fff2680:	6c1b      	mov      	r0, r6
1fff2682:	e00007bc 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
1fff2686:	07cc      	br      	0x1fff261e	// 1fff261e <krhino_buf_queue_send+0x24>
    memcpy(task->msg, msg, msg_size);
1fff2688:	6c97      	mov      	r2, r5
1fff268a:	930a      	ld.w      	r0, (r3, 0x28)
    task = krhino_list_entry(head->next, ktask_t, task_list);
1fff268c:	e483100f 	subi      	r4, r3, 16
    memcpy(task->msg, msg, msg_size);
1fff2690:	e0001050 	bsr      	0x1fff4730	// 1fff4730 <__memcpy_fast>
    pend_task_wakeup(task);
1fff2694:	6c13      	mov      	r0, r4
    task->bq_msg_size = msg_size;
1fff2696:	b4af      	st.w      	r5, (r4, 0x3c)
    return RHINO_SUCCESS;
1fff2698:	3500      	movi      	r5, 0
    pend_task_wakeup(task);
1fff269a:	e3fffa65 	bsr      	0x1fff1b64	// 1fff1b64 <pend_task_wakeup>
    RHINO_CRITICAL_EXIT_SCHED();
1fff269e:	e3fffe4b 	bsr      	0x1fff2334	// 1fff2334 <core_sched>
1fff26a2:	6c1b      	mov      	r0, r6
1fff26a4:	e00007ab 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
1fff26a8:	07bb      	br      	0x1fff261e	// 1fff261e <krhino_buf_queue_send+0x24>
    NULL_PARA_CHK(queue);
1fff26aa:	3506      	movi      	r5, 6
1fff26ac:	07b9      	br      	0x1fff261e	// 1fff261e <krhino_buf_queue_send+0x24>
	...

1fff26b0 <krhino_buf_queue_recv>:

kstat_t krhino_buf_queue_recv(kbuf_queue_t *queue, tick_t ticks, void *msg, size_t *size)
{
1fff26b0:	14d4      	push      	r4-r7, r15
1fff26b2:	1423      	subi      	r14, r14, 12
1fff26b4:	6d03      	mov      	r4, r0
    CPSR_ALLOC();

    kstat_t ret;
    uint8_t cur_cpu_num;

    NULL_PARA_CHK(queue);
1fff26b6:	3840      	cmpnei      	r0, 0
{
1fff26b8:	b822      	st.w      	r1, (r14, 0x8)
1fff26ba:	6dcb      	mov      	r7, r2
1fff26bc:	b860      	st.w      	r3, (r14, 0x0)
1fff26be:	98c8      	ld.w      	r6, (r14, 0x20)
    NULL_PARA_CHK(queue);
1fff26c0:	0c7a      	bf      	0x1fff27b4	// 1fff27b4 <krhino_buf_queue_recv+0x104>
    NULL_PARA_CHK(msg);
1fff26c2:	3b40      	cmpnei      	r3, 0
1fff26c4:	0c78      	bf      	0x1fff27b4	// 1fff27b4 <krhino_buf_queue_recv+0x104>
    NULL_PARA_CHK(size);
1fff26c6:	3e40      	cmpnei      	r6, 0
1fff26c8:	0c76      	bf      	0x1fff27b4	// 1fff27b4 <krhino_buf_queue_recv+0x104>

    RHINO_CRITICAL_ENTER();
1fff26ca:	e0000793 	bsr      	0x1fff35f0	// 1fff35f0 <cpu_intrpt_save>

    cur_cpu_num = cpu_cur_get();
    TASK_CANCEL_CHK(queue);
1fff26ce:	117b      	lrw      	r3, 0x1fffdad4	// 1fff27b8 <krhino_buf_queue_recv+0x108>
    RHINO_CRITICAL_ENTER();
1fff26d0:	6d43      	mov      	r5, r0
    TASK_CANCEL_CHK(queue);
1fff26d2:	9300      	ld.w      	r0, (r3, 0x0)
1fff26d4:	b861      	st.w      	r3, (r14, 0x4)
1fff26d6:	d8400063 	ld.b      	r2, (r0, 0x63)
1fff26da:	9822      	ld.w      	r1, (r14, 0x8)
1fff26dc:	3a41      	cmpnei      	r2, 1
1fff26de:	080a      	bt      	0x1fff26f2	// 1fff26f2 <krhino_buf_queue_recv+0x42>
1fff26e0:	8474      	ld.b      	r3, (r4, 0x14)
1fff26e2:	3b41      	cmpnei      	r3, 1
1fff26e4:	0807      	bt      	0x1fff26f2	// 1fff26f2 <krhino_buf_queue_recv+0x42>
1fff26e6:	6c17      	mov      	r0, r5
1fff26e8:	3498      	movi      	r4, 152
1fff26ea:	e0000788 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
    }

    if (ticks == RHINO_NO_WAIT) {
        *size = 0u;
        RHINO_CRITICAL_EXIT();
        return RHINO_NO_PEND_WAIT;
1fff26ee:	4481      	lsli      	r4, r4, 1
1fff26f0:	040e      	br      	0x1fff270c	// 1fff270c <krhino_buf_queue_recv+0x5c>
    if ((g_intrpt_nested_level[cur_cpu_num] > 0u) && (ticks != RHINO_NO_WAIT)) {
1fff26f2:	1173      	lrw      	r3, 0x1fffd9b8	// 1fff27bc <krhino_buf_queue_recv+0x10c>
1fff26f4:	8360      	ld.b      	r3, (r3, 0x0)
1fff26f6:	3b40      	cmpnei      	r3, 0
1fff26f8:	0c0d      	bf      	0x1fff2712	// 1fff2712 <krhino_buf_queue_recv+0x62>
1fff26fa:	c4e12423 	or      	r3, r1, r7
1fff26fe:	3b40      	cmpnei      	r3, 0
1fff2700:	0c09      	bf      	0x1fff2712	// 1fff2712 <krhino_buf_queue_recv+0x62>
        RHINO_CRITICAL_EXIT();
1fff2702:	6c17      	mov      	r0, r5
        return RHINO_NOT_CALLED_BY_INTRPT;
1fff2704:	34fa      	movi      	r4, 250
        RHINO_CRITICAL_EXIT();
1fff2706:	e000077a 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
        return RHINO_NOT_CALLED_BY_INTRPT;
1fff270a:	4482      	lsli      	r4, r4, 2
    }

    RHINO_CPU_INTRPT_ENABLE();

    return ret;
}
1fff270c:	6c13      	mov      	r0, r4
1fff270e:	1403      	addi      	r14, r14, 12
1fff2710:	1494      	pop      	r4-r7, r15
    if (queue->blk_obj.obj_type != RHINO_BUF_QUEUE_OBJ_TYPE) {
1fff2712:	9464      	ld.w      	r3, (r4, 0x10)
1fff2714:	3b44      	cmpnei      	r3, 4
1fff2716:	0c06      	bf      	0x1fff2722	// 1fff2722 <krhino_buf_queue_recv+0x72>
        RHINO_CRITICAL_EXIT();
1fff2718:	6c17      	mov      	r0, r5
        return RHINO_KOBJ_TYPE_ERR;
1fff271a:	3408      	movi      	r4, 8
        RHINO_CRITICAL_EXIT();
1fff271c:	e000076f 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
        return RHINO_KOBJ_TYPE_ERR;
1fff2720:	07f6      	br      	0x1fff270c	// 1fff270c <krhino_buf_queue_recv+0x5c>
    if (queue->cur_num > 0u) {
1fff2722:	946f      	ld.w      	r3, (r4, 0x3c)
1fff2724:	3b40      	cmpnei      	r3, 0
1fff2726:	0c0f      	bf      	0x1fff2744	// 1fff2744 <krhino_buf_queue_recv+0x94>
        ringbuf_pop(&(queue->ringbuf), msg, size);
1fff2728:	6c9b      	mov      	r2, r6
1fff272a:	9820      	ld.w      	r1, (r14, 0x0)
1fff272c:	e404001b 	addi      	r0, r4, 28
1fff2730:	e3fff988 	bsr      	0x1fff1a40	// 1fff1a40 <ringbuf_pop>
        queue->cur_num --;
1fff2734:	946f      	ld.w      	r3, (r4, 0x3c)
1fff2736:	2b00      	subi      	r3, 1
1fff2738:	b46f      	st.w      	r3, (r4, 0x3c)
        RHINO_CRITICAL_EXIT();
1fff273a:	6c17      	mov      	r0, r5
        return RHINO_SUCCESS;
1fff273c:	3400      	movi      	r4, 0
        RHINO_CRITICAL_EXIT();
1fff273e:	e000075e 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
        return RHINO_SUCCESS;
1fff2742:	07e5      	br      	0x1fff270c	// 1fff270c <krhino_buf_queue_recv+0x5c>
    if (ticks == RHINO_NO_WAIT) {
1fff2744:	c4e12423 	or      	r3, r1, r7
1fff2748:	3b40      	cmpnei      	r3, 0
1fff274a:	0807      	bt      	0x1fff2758	// 1fff2758 <krhino_buf_queue_recv+0xa8>
        *size = 0u;
1fff274c:	b660      	st.w      	r3, (r6, 0x0)
        RHINO_CRITICAL_EXIT();
1fff274e:	6c17      	mov      	r0, r5
        return RHINO_NO_PEND_WAIT;
1fff2750:	34c8      	movi      	r4, 200
        RHINO_CRITICAL_EXIT();
1fff2752:	e0000754 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
1fff2756:	07cc      	br      	0x1fff26ee	// 1fff26ee <krhino_buf_queue_recv+0x3e>
    if (g_sched_lock[cur_cpu_num] > 0u) {
1fff2758:	107a      	lrw      	r3, 0x1fffd2b4	// 1fff27c0 <krhino_buf_queue_recv+0x110>
1fff275a:	8360      	ld.b      	r3, (r3, 0x0)
1fff275c:	3b40      	cmpnei      	r3, 0
1fff275e:	0c08      	bf      	0x1fff276e	// 1fff276e <krhino_buf_queue_recv+0xbe>
        *size = 0u;
1fff2760:	3300      	movi      	r3, 0
        RHINO_CRITICAL_EXIT();
1fff2762:	6c17      	mov      	r0, r5
        *size = 0u;
1fff2764:	b660      	st.w      	r3, (r6, 0x0)
        return RHINO_SCHED_DISABLE;
1fff2766:	34c8      	movi      	r4, 200
        RHINO_CRITICAL_EXIT();
1fff2768:	e0000749 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
        return RHINO_SCHED_DISABLE;
1fff276c:	07d0      	br      	0x1fff270c	// 1fff270c <krhino_buf_queue_recv+0x5c>
    g_active_task[cur_cpu_num]->msg = msg;
1fff276e:	9860      	ld.w      	r3, (r14, 0x0)
    pend_to_blk_obj(&queue->blk_obj, g_active_task[cur_cpu_num], ticks);
1fff2770:	6c87      	mov      	r2, r1
    g_active_task[cur_cpu_num]->msg = msg;
1fff2772:	b06e      	st.w      	r3, (r0, 0x38)
    pend_to_blk_obj(&queue->blk_obj, g_active_task[cur_cpu_num], ticks);
1fff2774:	6c43      	mov      	r1, r0
1fff2776:	6cdf      	mov      	r3, r7
1fff2778:	6c13      	mov      	r0, r4
1fff277a:	e3fffa1b 	bsr      	0x1fff1bb0	// 1fff1bb0 <pend_to_blk_obj>
    RHINO_CRITICAL_EXIT_SCHED();
1fff277e:	e3fffddb 	bsr      	0x1fff2334	// 1fff2334 <core_sched>
1fff2782:	6c17      	mov      	r0, r5
1fff2784:	e000073b 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
    RHINO_CPU_INTRPT_DISABLE();
1fff2788:	e0000734 	bsr      	0x1fff35f0	// 1fff35f0 <cpu_intrpt_save>
    ret = pend_state_end_proc(g_active_task[cur_cpu_num], &queue->blk_obj);
1fff278c:	9861      	ld.w      	r3, (r14, 0x4)
1fff278e:	6c53      	mov      	r1, r4
1fff2790:	9360      	ld.w      	r3, (r3, 0x0)
    RHINO_CPU_INTRPT_DISABLE();
1fff2792:	6d43      	mov      	r5, r0
    ret = pend_state_end_proc(g_active_task[cur_cpu_num], &queue->blk_obj);
1fff2794:	6c0f      	mov      	r0, r3
1fff2796:	e3fffa6b 	bsr      	0x1fff1c6c	// 1fff1c6c <pend_state_end_proc>
1fff279a:	6d03      	mov      	r4, r0
    switch (ret) {
1fff279c:	3840      	cmpnei      	r0, 0
1fff279e:	0809      	bt      	0x1fff27b0	// 1fff27b0 <krhino_buf_queue_recv+0x100>
            *size = g_active_task[cur_cpu_num]->bq_msg_size;
1fff27a0:	9861      	ld.w      	r3, (r14, 0x4)
1fff27a2:	9360      	ld.w      	r3, (r3, 0x0)
1fff27a4:	936f      	ld.w      	r3, (r3, 0x3c)
            *size = 0u;
1fff27a6:	b660      	st.w      	r3, (r6, 0x0)
    RHINO_CPU_INTRPT_ENABLE();
1fff27a8:	6c17      	mov      	r0, r5
1fff27aa:	e0000728 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
    return ret;
1fff27ae:	07af      	br      	0x1fff270c	// 1fff270c <krhino_buf_queue_recv+0x5c>
            *size = 0u;
1fff27b0:	3300      	movi      	r3, 0
1fff27b2:	07fa      	br      	0x1fff27a6	// 1fff27a6 <krhino_buf_queue_recv+0xf6>
    NULL_PARA_CHK(queue);
1fff27b4:	3406      	movi      	r4, 6
1fff27b6:	07ab      	br      	0x1fff270c	// 1fff270c <krhino_buf_queue_recv+0x5c>
1fff27b8:	1fffdad4 	.long	0x1fffdad4
1fff27bc:	1fffd9b8 	.long	0x1fffd9b8
1fff27c0:	1fffd2b4 	.long	0x1fffd2b4

1fff27c4 <mutex_release.isra.1>:
kstat_t krhino_mutex_create(kmutex_t *mutex, const name_t *name)
{
    return mutex_create(mutex, name, K_OBJ_STATIC_ALLOC);
}

static void mutex_release(ktask_t *task, kmutex_t *mutex_rel)
1fff27c4:	14d0      	push      	r15
        prev = &mutex_tmp->mutex_list;
    }

    return new_pri;
#else
    return task->b_prio;
1fff27c6:	d8200065 	ld.b      	r1, (r0, 0x65)
    if (new_pri != task->prio) {
1fff27ca:	d8600064 	ld.b      	r3, (r0, 0x64)
1fff27ce:	644e      	cmpne      	r3, r1
1fff27d0:	0c03      	bf      	0x1fff27d6	// 1fff27d6 <mutex_release.isra.1+0x12>
        task_pri_change(task, new_pri);
1fff27d2:	e00042ab 	bsr      	0x1fffad28	// 1fffad28 <check_before_startup+0x650>
}
1fff27d6:	1490      	pop      	r15

1fff27d8 <mutex_create>:
{
1fff27d8:	14d3      	push      	r4-r6, r15
1fff27da:	6d03      	mov      	r4, r0
    NULL_PARA_CHK(mutex);
1fff27dc:	3840      	cmpnei      	r0, 0
{
1fff27de:	6d47      	mov      	r5, r1
1fff27e0:	6d8b      	mov      	r6, r2
    NULL_PARA_CHK(mutex);
1fff27e2:	0c15      	bf      	0x1fff280c	// 1fff280c <mutex_create+0x34>
    NULL_PARA_CHK(name);
1fff27e4:	3940      	cmpnei      	r1, 0
1fff27e6:	0c13      	bf      	0x1fff280c	// 1fff280c <mutex_create+0x34>
    memset(mutex, 0, sizeof(kmutex_t));
1fff27e8:	3228      	movi      	r2, 40
1fff27ea:	3100      	movi      	r1, 0
1fff27ec:	e0003fda 	bsr      	0x1fffa7a0	// 1fffa7a0 <check_before_startup+0xc8>
    mutex->blk_obj.blk_policy = BLK_POLICY_PRI;
1fff27f0:	3300      	movi      	r3, 0
    list_head->next = list_head;
1fff27f2:	b480      	st.w      	r4, (r4, 0x0)
1fff27f4:	b463      	st.w      	r3, (r4, 0xc)
    mutex->mutex_task         = NULL;
1fff27f6:	b466      	st.w      	r3, (r4, 0x18)
    mutex->mutex_list         = NULL;
1fff27f8:	b467      	st.w      	r3, (r4, 0x1c)
    mutex->blk_obj.cancel     = 0u;
1fff27fa:	a474      	st.b      	r3, (r4, 0x14)
    mutex->blk_obj.obj_type = RHINO_MUTEX_OBJ_TYPE;
1fff27fc:	3302      	movi      	r3, 2
    list_head->prev = list_head;
1fff27fe:	b481      	st.w      	r4, (r4, 0x4)
    mutex->blk_obj.name       = name;
1fff2800:	b4a2      	st.w      	r5, (r4, 0x8)
    mutex->mm_alloc_flag      = mm_alloc_flag;
1fff2802:	dcc40024 	st.b      	r6, (r4, 0x24)
    mutex->blk_obj.obj_type = RHINO_MUTEX_OBJ_TYPE;
1fff2806:	b464      	st.w      	r3, (r4, 0x10)
1fff2808:	3000      	movi      	r0, 0
}
1fff280a:	1493      	pop      	r4-r6, r15
    NULL_PARA_CHK(mutex);
1fff280c:	3006      	movi      	r0, 6
1fff280e:	07fe      	br      	0x1fff280a	// 1fff280a <mutex_create+0x32>

1fff2810 <krhino_mutex_create>:
{
1fff2810:	14d0      	push      	r15
    return mutex_create(mutex, name, K_OBJ_STATIC_ALLOC);
1fff2812:	3201      	movi      	r2, 1
1fff2814:	e3ffffe2 	bsr      	0x1fff27d8	// 1fff27d8 <mutex_create>
}
1fff2818:	1490      	pop      	r15
	...

1fff281c <krhino_mutex_del>:
{
1fff281c:	14d2      	push      	r4-r5, r15
1fff281e:	6d03      	mov      	r4, r0
    if (mutex == NULL) {
1fff2820:	3840      	cmpnei      	r0, 0
1fff2822:	0c31      	bf      	0x1fff2884	// 1fff2884 <krhino_mutex_del+0x68>
    RHINO_CRITICAL_ENTER();
1fff2824:	e00006e6 	bsr      	0x1fff35f0	// 1fff35f0 <cpu_intrpt_save>
    INTRPT_NESTED_LEVEL_CHK();
1fff2828:	1078      	lrw      	r3, 0x1fffd9b8	// 1fff2888 <krhino_mutex_del+0x6c>
    RHINO_CRITICAL_ENTER();
1fff282a:	6d43      	mov      	r5, r0
    INTRPT_NESTED_LEVEL_CHK();
1fff282c:	8360      	ld.b      	r3, (r3, 0x0)
1fff282e:	3b40      	cmpnei      	r3, 0
1fff2830:	0c06      	bf      	0x1fff283c	// 1fff283c <krhino_mutex_del+0x20>
1fff2832:	e00006e4 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
1fff2836:	30fa      	movi      	r0, 250
1fff2838:	4002      	lsli      	r0, r0, 2
}
1fff283a:	1492      	pop      	r4-r5, r15
    if (mutex->blk_obj.obj_type != RHINO_MUTEX_OBJ_TYPE) {
1fff283c:	9464      	ld.w      	r3, (r4, 0x10)
1fff283e:	3b42      	cmpnei      	r3, 2
1fff2840:	0c05      	bf      	0x1fff284a	// 1fff284a <krhino_mutex_del+0x2e>
        RHINO_CRITICAL_EXIT();
1fff2842:	e00006dc 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
        return RHINO_KOBJ_TYPE_ERR;
1fff2846:	3008      	movi      	r0, 8
1fff2848:	07f9      	br      	0x1fff283a	// 1fff283a <krhino_mutex_del+0x1e>
    if (mutex->mm_alloc_flag != K_OBJ_STATIC_ALLOC) {
1fff284a:	d8640024 	ld.b      	r3, (r4, 0x24)
1fff284e:	3b41      	cmpnei      	r3, 1
1fff2850:	0c05      	bf      	0x1fff285a	// 1fff285a <krhino_mutex_del+0x3e>
        RHINO_CRITICAL_EXIT();
1fff2852:	e00006d4 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
        return RHINO_KOBJ_DEL_ERR;
1fff2856:	3009      	movi      	r0, 9
1fff2858:	07f1      	br      	0x1fff283a	// 1fff283a <krhino_mutex_del+0x1e>
    if (mutex->mutex_task != NULL) {
1fff285a:	9406      	ld.w      	r0, (r4, 0x18)
    mutex->blk_obj.obj_type = RHINO_OBJ_TYPE_NONE;
1fff285c:	3300      	movi      	r3, 0
    if (mutex->mutex_task != NULL) {
1fff285e:	3840      	cmpnei      	r0, 0
    mutex->blk_obj.obj_type = RHINO_OBJ_TYPE_NONE;
1fff2860:	b464      	st.w      	r3, (r4, 0x10)
    if (mutex->mutex_task != NULL) {
1fff2862:	0c03      	bf      	0x1fff2868	// 1fff2868 <krhino_mutex_del+0x4c>
        mutex_release(mutex->mutex_task, mutex);
1fff2864:	e3ffffb0 	bsr      	0x1fff27c4	// 1fff27c4 <mutex_release.isra.1>
    return (list->next == list);
1fff2868:	9400      	ld.w      	r0, (r4, 0x0)
    while (!is_klist_empty(blk_list_head)) {
1fff286a:	6412      	cmpne      	r4, r0
1fff286c:	0808      	bt      	0x1fff287c	// 1fff287c <krhino_mutex_del+0x60>
    RHINO_CRITICAL_EXIT_SCHED();
1fff286e:	e3fffd63 	bsr      	0x1fff2334	// 1fff2334 <core_sched>
1fff2872:	6c17      	mov      	r0, r5
1fff2874:	e00006c3 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
    return RHINO_SUCCESS;
1fff2878:	3000      	movi      	r0, 0
1fff287a:	07e0      	br      	0x1fff283a	// 1fff283a <krhino_mutex_del+0x1e>
        pend_task_rm(krhino_list_entry(blk_list_head->next, ktask_t, task_list));
1fff287c:	280f      	subi      	r0, 16
1fff287e:	e3fff9c1 	bsr      	0x1fff1c00	// 1fff1c00 <pend_task_rm>
1fff2882:	07f3      	br      	0x1fff2868	// 1fff2868 <krhino_mutex_del+0x4c>
        return RHINO_NULL_PTR;
1fff2884:	3006      	movi      	r0, 6
1fff2886:	07da      	br      	0x1fff283a	// 1fff283a <krhino_mutex_del+0x1e>
1fff2888:	1fffd9b8 	.long	0x1fffd9b8

1fff288c <mutex_pri_look>:
    return task->b_prio;
1fff288c:	d8000065 	ld.b      	r0, (r0, 0x65)
#endif
}
1fff2890:	783c      	jmp      	r15

1fff2892 <mutex_task_pri_reset>:
        if (mutex_task->prio == task->prio) {
            mutex_release(mutex_task, NULL);
        }
    }
#endif
}
1fff2892:	783c      	jmp      	r15

1fff2894 <krhino_mutex_lock>:

kstat_t krhino_mutex_lock(kmutex_t *mutex, tick_t ticks)
{
1fff2894:	14d4      	push      	r4-r7, r15
1fff2896:	1421      	subi      	r14, r14, 4
1fff2898:	6d03      	mov      	r4, r0

    kstat_t  ret;
    ktask_t *mutex_task;
    uint8_t  cur_cpu_num;

    NULL_PARA_CHK(mutex);
1fff289a:	3840      	cmpnei      	r0, 0
{
1fff289c:	b820      	st.w      	r1, (r14, 0x0)
1fff289e:	6dcb      	mov      	r7, r2
    NULL_PARA_CHK(mutex);
1fff28a0:	0c7a      	bf      	0x1fff2994	// 1fff2994 <krhino_mutex_lock+0x100>

    if (g_sys_stat == RHINO_STOPPED) {
1fff28a2:	115e      	lrw      	r2, 0x1fffd7e4	// 1fff2998 <krhino_mutex_lock+0x104>
1fff28a4:	9240      	ld.w      	r2, (r2, 0x0)
1fff28a6:	3a44      	cmpnei      	r2, 4
1fff28a8:	0c4c      	bf      	0x1fff2940	// 1fff2940 <krhino_mutex_lock+0xac>
    }

    RHINO_CRITICAL_ENTER();

    cur_cpu_num = cpu_cur_get();
    TASK_CANCEL_CHK(mutex);
1fff28aa:	11dd      	lrw      	r6, 0x1fffdad4	// 1fff299c <krhino_mutex_lock+0x108>
    RHINO_CRITICAL_ENTER();
1fff28ac:	e00006a2 	bsr      	0x1fff35f0	// 1fff35f0 <cpu_intrpt_save>
    TASK_CANCEL_CHK(mutex);
1fff28b0:	9620      	ld.w      	r1, (r6, 0x0)
    RHINO_CRITICAL_ENTER();
1fff28b2:	6d43      	mov      	r5, r0
    TASK_CANCEL_CHK(mutex);
1fff28b4:	d8410063 	ld.b      	r2, (r1, 0x63)
1fff28b8:	9860      	ld.w      	r3, (r14, 0x0)
1fff28ba:	3a41      	cmpnei      	r2, 1
1fff28bc:	0809      	bt      	0x1fff28ce	// 1fff28ce <krhino_mutex_lock+0x3a>
1fff28be:	8454      	ld.b      	r2, (r4, 0x14)
1fff28c0:	3a41      	cmpnei      	r2, 1
1fff28c2:	0806      	bt      	0x1fff28ce	// 1fff28ce <krhino_mutex_lock+0x3a>
1fff28c4:	e000069b 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
1fff28c8:	3498      	movi      	r4, 152
    }

    /* can't get mutex, and return immediately if wait_option is RHINO_NO_WAIT */
    if (ticks == RHINO_NO_WAIT) {
        RHINO_CRITICAL_EXIT();
        return RHINO_NO_PEND_WAIT;
1fff28ca:	4481      	lsli      	r4, r4, 1
1fff28cc:	040a      	br      	0x1fff28e0	// 1fff28e0 <krhino_mutex_lock+0x4c>
    INTRPT_NESTED_LEVEL_CHK();
1fff28ce:	1155      	lrw      	r2, 0x1fffd9b8	// 1fff29a0 <krhino_mutex_lock+0x10c>
1fff28d0:	8240      	ld.b      	r2, (r2, 0x0)
1fff28d2:	3a40      	cmpnei      	r2, 0
1fff28d4:	0c09      	bf      	0x1fff28e6	// 1fff28e6 <krhino_mutex_lock+0x52>
1fff28d6:	6c17      	mov      	r0, r5
1fff28d8:	34fa      	movi      	r4, 250
1fff28da:	e0000690 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
1fff28de:	4482      	lsli      	r4, r4, 2
    ret = pend_state_end_proc(g_active_task[cpu_cur_get()], &mutex->blk_obj);

    RHINO_CPU_INTRPT_ENABLE();

    return ret;
}
1fff28e0:	6c13      	mov      	r0, r4
1fff28e2:	1401      	addi      	r14, r14, 4
1fff28e4:	1494      	pop      	r4-r7, r15
    if (mutex->blk_obj.obj_type != RHINO_MUTEX_OBJ_TYPE) {
1fff28e6:	9444      	ld.w      	r2, (r4, 0x10)
1fff28e8:	3a42      	cmpnei      	r2, 2
1fff28ea:	0c06      	bf      	0x1fff28f6	// 1fff28f6 <krhino_mutex_lock+0x62>
        RHINO_CRITICAL_EXIT();
1fff28ec:	6c17      	mov      	r0, r5
        return RHINO_KOBJ_TYPE_ERR;
1fff28ee:	3408      	movi      	r4, 8
        RHINO_CRITICAL_EXIT();
1fff28f0:	e0000685 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
        return RHINO_KOBJ_TYPE_ERR;
1fff28f4:	07f6      	br      	0x1fff28e0	// 1fff28e0 <krhino_mutex_lock+0x4c>
    if (g_active_task[cur_cpu_num] == mutex->mutex_task) {
1fff28f6:	9446      	ld.w      	r2, (r4, 0x18)
1fff28f8:	6486      	cmpne      	r1, r2
1fff28fa:	081b      	bt      	0x1fff2930	// 1fff2930 <krhino_mutex_lock+0x9c>
        if (mutex->owner_nested == (mutex_nested_t)-1) {
1fff28fc:	9468      	ld.w      	r3, (r4, 0x20)
1fff28fe:	3200      	movi      	r2, 0
1fff2900:	2a00      	subi      	r2, 1
1fff2902:	648e      	cmpne      	r3, r2
1fff2904:	080e      	bt      	0x1fff2920	// 1fff2920 <krhino_mutex_lock+0x8c>
            k_err_proc(RHINO_MUTEX_NESTED_OVF);
1fff2906:	ea02013b 	movi      	r2, 315
1fff290a:	1127      	lrw      	r1, 0x110121a2	// 1fff29a4 <krhino_mutex_lock+0x110>
1fff290c:	ea000386 	movi      	r0, 902
            return RHINO_MUTEX_NESTED_OVF;
1fff2910:	ea040386 	movi      	r4, 902
            k_err_proc(RHINO_MUTEX_NESTED_OVF);
1fff2914:	e3fffc8a 	bsr      	0x1fff2228	// 1fff2228 <k_err_proc_debug>
            RHINO_CRITICAL_EXIT();
1fff2918:	6c17      	mov      	r0, r5
1fff291a:	e0000670 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
            return RHINO_MUTEX_NESTED_OVF;
1fff291e:	07e1      	br      	0x1fff28e0	// 1fff28e0 <krhino_mutex_lock+0x4c>
            mutex->owner_nested++;
1fff2920:	2300      	addi      	r3, 1
1fff2922:	b468      	st.w      	r3, (r4, 0x20)
        RHINO_CRITICAL_EXIT();
1fff2924:	6c17      	mov      	r0, r5
        return RHINO_MUTEX_OWNER_NESTED;
1fff2926:	ea040385 	movi      	r4, 901
        RHINO_CRITICAL_EXIT();
1fff292a:	e0000668 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
        return RHINO_MUTEX_OWNER_NESTED;
1fff292e:	07d9      	br      	0x1fff28e0	// 1fff28e0 <krhino_mutex_lock+0x4c>
    if (mutex_task == NULL) {
1fff2930:	3a40      	cmpnei      	r2, 0
1fff2932:	0809      	bt      	0x1fff2944	// 1fff2944 <krhino_mutex_lock+0xb0>
        mutex->owner_nested       = 1u;
1fff2934:	3301      	movi      	r3, 1
        mutex->mutex_task         = g_active_task[cur_cpu_num];
1fff2936:	b426      	st.w      	r1, (r4, 0x18)
        mutex->owner_nested       = 1u;
1fff2938:	b468      	st.w      	r3, (r4, 0x20)
        RHINO_CRITICAL_EXIT();
1fff293a:	6c17      	mov      	r0, r5
1fff293c:	e000065f 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
        return RHINO_SUCCESS;
1fff2940:	3400      	movi      	r4, 0
1fff2942:	07cf      	br      	0x1fff28e0	// 1fff28e0 <krhino_mutex_lock+0x4c>
    if (ticks == RHINO_NO_WAIT) {
1fff2944:	c4e32422 	or      	r2, r3, r7
1fff2948:	3a40      	cmpnei      	r2, 0
1fff294a:	0806      	bt      	0x1fff2956	// 1fff2956 <krhino_mutex_lock+0xc2>
        RHINO_CRITICAL_EXIT();
1fff294c:	6c17      	mov      	r0, r5
        return RHINO_NO_PEND_WAIT;
1fff294e:	34c8      	movi      	r4, 200
        RHINO_CRITICAL_EXIT();
1fff2950:	e0000655 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
1fff2954:	07bb      	br      	0x1fff28ca	// 1fff28ca <krhino_mutex_lock+0x36>
    if (g_sched_lock[cur_cpu_num] > 0u) {
1fff2956:	1055      	lrw      	r2, 0x1fffd2b4	// 1fff29a8 <krhino_mutex_lock+0x114>
1fff2958:	8240      	ld.b      	r2, (r2, 0x0)
1fff295a:	3a40      	cmpnei      	r2, 0
1fff295c:	0c06      	bf      	0x1fff2968	// 1fff2968 <krhino_mutex_lock+0xd4>
        RHINO_CRITICAL_EXIT();
1fff295e:	6c17      	mov      	r0, r5
        return RHINO_SCHED_DISABLE;
1fff2960:	34c8      	movi      	r4, 200
        RHINO_CRITICAL_EXIT();
1fff2962:	e000064c 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
        return RHINO_SCHED_DISABLE;
1fff2966:	07bd      	br      	0x1fff28e0	// 1fff28e0 <krhino_mutex_lock+0x4c>
    pend_to_blk_obj(&mutex->blk_obj, g_active_task[cur_cpu_num], ticks);
1fff2968:	6c8f      	mov      	r2, r3
1fff296a:	6c13      	mov      	r0, r4
1fff296c:	6cdf      	mov      	r3, r7
1fff296e:	e3fff921 	bsr      	0x1fff1bb0	// 1fff1bb0 <pend_to_blk_obj>
    RHINO_CRITICAL_EXIT_SCHED();
1fff2972:	e3fffce1 	bsr      	0x1fff2334	// 1fff2334 <core_sched>
1fff2976:	6c17      	mov      	r0, r5
1fff2978:	e0000641 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
    RHINO_CPU_INTRPT_DISABLE();
1fff297c:	e000063a 	bsr      	0x1fff35f0	// 1fff35f0 <cpu_intrpt_save>
1fff2980:	6d43      	mov      	r5, r0
    ret = pend_state_end_proc(g_active_task[cpu_cur_get()], &mutex->blk_obj);
1fff2982:	6c53      	mov      	r1, r4
1fff2984:	9600      	ld.w      	r0, (r6, 0x0)
1fff2986:	e3fff973 	bsr      	0x1fff1c6c	// 1fff1c6c <pend_state_end_proc>
1fff298a:	6d03      	mov      	r4, r0
    RHINO_CPU_INTRPT_ENABLE();
1fff298c:	6c17      	mov      	r0, r5
1fff298e:	e0000636 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
    return ret;
1fff2992:	07a7      	br      	0x1fff28e0	// 1fff28e0 <krhino_mutex_lock+0x4c>
    NULL_PARA_CHK(mutex);
1fff2994:	3406      	movi      	r4, 6
1fff2996:	07a5      	br      	0x1fff28e0	// 1fff28e0 <krhino_mutex_lock+0x4c>
1fff2998:	1fffd7e4 	.long	0x1fffd7e4
1fff299c:	1fffdad4 	.long	0x1fffdad4
1fff29a0:	1fffd9b8 	.long	0x1fffd9b8
1fff29a4:	110121a2 	.long	0x110121a2
1fff29a8:	1fffd2b4 	.long	0x1fffd2b4

1fff29ac <krhino_mutex_unlock>:

kstat_t krhino_mutex_unlock(kmutex_t *mutex)
{
1fff29ac:	14d3      	push      	r4-r6, r15
1fff29ae:	6d03      	mov      	r4, r0

    klist_t *blk_list_head;
    ktask_t *task;
    uint8_t  cur_cpu_num;

    NULL_PARA_CHK(mutex);
1fff29b0:	3840      	cmpnei      	r0, 0
1fff29b2:	0c43      	bf      	0x1fff2a38	// 1fff2a38 <krhino_mutex_unlock+0x8c>

    if (g_sys_stat == RHINO_STOPPED) {
1fff29b4:	1162      	lrw      	r3, 0x1fffd7e4	// 1fff2a3c <krhino_mutex_unlock+0x90>
1fff29b6:	9360      	ld.w      	r3, (r3, 0x0)
1fff29b8:	3b44      	cmpnei      	r3, 4
1fff29ba:	0c33      	bf      	0x1fff2a20	// 1fff2a20 <krhino_mutex_unlock+0x74>
        return RHINO_SUCCESS;
    }

    RHINO_CRITICAL_ENTER();
1fff29bc:	e000061a 	bsr      	0x1fff35f0	// 1fff35f0 <cpu_intrpt_save>

    INTRPT_NESTED_LEVEL_CHK();
1fff29c0:	1160      	lrw      	r3, 0x1fffd9b8	// 1fff2a40 <krhino_mutex_unlock+0x94>
    RHINO_CRITICAL_ENTER();
1fff29c2:	6d43      	mov      	r5, r0
    INTRPT_NESTED_LEVEL_CHK();
1fff29c4:	8360      	ld.b      	r3, (r3, 0x0)
1fff29c6:	3b40      	cmpnei      	r3, 0
1fff29c8:	0c06      	bf      	0x1fff29d4	// 1fff29d4 <krhino_mutex_unlock+0x28>
1fff29ca:	e0000618 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
1fff29ce:	30fa      	movi      	r0, 250
    cur_cpu_num = cpu_cur_get();

    /* mutex must be released by itself */
    if (g_active_task[cur_cpu_num] != mutex->mutex_task) {
        RHINO_CRITICAL_EXIT();
        return RHINO_MUTEX_NOT_RELEASED_BY_OWNER;
1fff29d0:	4002      	lsli      	r0, r0, 2
1fff29d2:	0407      	br      	0x1fff29e0	// 1fff29e0 <krhino_mutex_unlock+0x34>
    if (mutex->blk_obj.obj_type != RHINO_MUTEX_OBJ_TYPE) {
1fff29d4:	9464      	ld.w      	r3, (r4, 0x10)
1fff29d6:	3b42      	cmpnei      	r3, 2
1fff29d8:	0c05      	bf      	0x1fff29e2	// 1fff29e2 <krhino_mutex_unlock+0x36>
        RHINO_CRITICAL_EXIT();
1fff29da:	e0000610 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
        return RHINO_KOBJ_TYPE_ERR;
1fff29de:	3008      	movi      	r0, 8
    mutex->owner_nested = 1u;

    RHINO_CRITICAL_EXIT_SCHED();

    return RHINO_SUCCESS;
}
1fff29e0:	1493      	pop      	r4-r6, r15
    if (g_active_task[cur_cpu_num] != mutex->mutex_task) {
1fff29e2:	1079      	lrw      	r3, 0x1fffdad4	// 1fff2a44 <krhino_mutex_unlock+0x98>
1fff29e4:	9300      	ld.w      	r0, (r3, 0x0)
1fff29e6:	9466      	ld.w      	r3, (r4, 0x18)
1fff29e8:	64c2      	cmpne      	r0, r3
1fff29ea:	0c06      	bf      	0x1fff29f6	// 1fff29f6 <krhino_mutex_unlock+0x4a>
        RHINO_CRITICAL_EXIT();
1fff29ec:	6c17      	mov      	r0, r5
1fff29ee:	e0000606 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
        return RHINO_MUTEX_NOT_RELEASED_BY_OWNER;
1fff29f2:	30e1      	movi      	r0, 225
1fff29f4:	07ee      	br      	0x1fff29d0	// 1fff29d0 <krhino_mutex_unlock+0x24>
    mutex->owner_nested--;
1fff29f6:	9468      	ld.w      	r3, (r4, 0x20)
1fff29f8:	2b00      	subi      	r3, 1
    if (mutex->owner_nested > 0u) {
1fff29fa:	3b40      	cmpnei      	r3, 0
    mutex->owner_nested--;
1fff29fc:	b468      	st.w      	r3, (r4, 0x20)
    if (mutex->owner_nested > 0u) {
1fff29fe:	0c07      	bf      	0x1fff2a0c	// 1fff2a0c <krhino_mutex_unlock+0x60>
        RHINO_CRITICAL_EXIT();
1fff2a00:	6c17      	mov      	r0, r5
1fff2a02:	e00005fc 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
        return RHINO_MUTEX_OWNER_NESTED;
1fff2a06:	ea000385 	movi      	r0, 901
1fff2a0a:	07eb      	br      	0x1fff29e0	// 1fff29e0 <krhino_mutex_unlock+0x34>
    mutex_release(g_active_task[cur_cpu_num], mutex);
1fff2a0c:	e3fffedc 	bsr      	0x1fff27c4	// 1fff27c4 <mutex_release.isra.1>
1fff2a10:	94c0      	ld.w      	r6, (r4, 0x0)
    if (is_klist_empty(blk_list_head)) {
1fff2a12:	6592      	cmpne      	r4, r6
1fff2a14:	0808      	bt      	0x1fff2a24	// 1fff2a24 <krhino_mutex_unlock+0x78>
        mutex->mutex_task = NULL;
1fff2a16:	3300      	movi      	r3, 0
1fff2a18:	b466      	st.w      	r3, (r4, 0x18)
    RHINO_CRITICAL_EXIT_SCHED();
1fff2a1a:	6c17      	mov      	r0, r5
1fff2a1c:	e00005ef 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
        return RHINO_SUCCESS;
1fff2a20:	3000      	movi      	r0, 0
1fff2a22:	07df      	br      	0x1fff29e0	// 1fff29e0 <krhino_mutex_unlock+0x34>
    task = krhino_list_entry(blk_list_head->next, ktask_t, task_list);
1fff2a24:	2e0f      	subi      	r6, 16
    pend_task_wakeup(task);
1fff2a26:	6c1b      	mov      	r0, r6
1fff2a28:	e3fff89e 	bsr      	0x1fff1b64	// 1fff1b64 <pend_task_wakeup>
    mutex->owner_nested = 1u;
1fff2a2c:	3301      	movi      	r3, 1
    mutex->mutex_task   = task;
1fff2a2e:	b4c6      	st.w      	r6, (r4, 0x18)
    mutex->owner_nested = 1u;
1fff2a30:	b468      	st.w      	r3, (r4, 0x20)
    RHINO_CRITICAL_EXIT_SCHED();
1fff2a32:	e3fffc81 	bsr      	0x1fff2334	// 1fff2334 <core_sched>
1fff2a36:	07f2      	br      	0x1fff2a1a	// 1fff2a1a <krhino_mutex_unlock+0x6e>
    NULL_PARA_CHK(mutex);
1fff2a38:	3006      	movi      	r0, 6
1fff2a3a:	07d3      	br      	0x1fff29e0	// 1fff29e0 <krhino_mutex_unlock+0x34>
1fff2a3c:	1fffd7e4 	.long	0x1fffd7e4
1fff2a40:	1fffd9b8 	.long	0x1fffd9b8
1fff2a44:	1fffdad4 	.long	0x1fffdad4

1fff2a48 <timer_list_pri_insert.constprop.3>:
 */

#include "k_api.h"

#if (RHINO_CONFIG_TIMER > 0)
static void timer_list_pri_insert(klist_t *head, ktimer_t *timer)
1fff2a48:	14c4      	push      	r4-r7
1fff2a4a:	1423      	subi      	r14, r14, 12

    val = timer->remain;

    for (q = start->next; q != end; q = q->next) {
        task_iter_temp = krhino_list_entry(q, ktimer_t, timer_list);
        if ((task_iter_temp->match - g_timer_count) > val) {
1fff2a4c:	1094      	lrw      	r4, 0x1fffd774	// 1fff2a9c <timer_list_pri_insert.constprop.3+0x54>
    for (q = start->next; q != end; q = q->next) {
1fff2a4e:	10d5      	lrw      	r6, 0x1fffd9c0	// 1fff2aa0 <timer_list_pri_insert.constprop.3+0x58>
        if ((task_iter_temp->match - g_timer_count) > val) {
1fff2a50:	94a1      	ld.w      	r5, (r4, 0x4)
1fff2a52:	9480      	ld.w      	r4, (r4, 0x0)
    val = timer->remain;
1fff2a54:	9028      	ld.w      	r1, (r0, 0x20)
1fff2a56:	9049      	ld.w      	r2, (r0, 0x24)
    for (q = start->next; q != end; q = q->next) {
1fff2a58:	9660      	ld.w      	r3, (r6, 0x0)
        if ((task_iter_temp->match - g_timer_count) > val) {
1fff2a5a:	b880      	st.w      	r4, (r14, 0x0)
1fff2a5c:	b8a1      	st.w      	r5, (r14, 0x4)
1fff2a5e:	b8c2      	st.w      	r6, (r14, 0x8)
    for (q = start->next; q != end; q = q->next) {
1fff2a60:	9882      	ld.w      	r4, (r14, 0x8)
1fff2a62:	650e      	cmpne      	r3, r4
1fff2a64:	0809      	bt      	0x1fff2a76	// 1fff2a76 <timer_list_pri_insert.constprop.3+0x2e>
    element->prev = head->prev;
1fff2a66:	9341      	ld.w      	r2, (r3, 0x4)
    element->next = head;
1fff2a68:	b060      	st.w      	r3, (r0, 0x0)
    element->prev = head->prev;
1fff2a6a:	b041      	st.w      	r2, (r0, 0x4)
    head->prev->next = element;
1fff2a6c:	9341      	ld.w      	r2, (r3, 0x4)
1fff2a6e:	b200      	st.w      	r0, (r2, 0x0)
    head->prev       = element;
1fff2a70:	b301      	st.w      	r0, (r3, 0x4)
            break;
        }
    }

    klist_insert(q, &timer->timer_list);
}
1fff2a72:	1403      	addi      	r14, r14, 12
1fff2a74:	1484      	pop      	r4-r7
        if ((task_iter_temp->match - g_timer_count) > val) {
1fff2a76:	9386      	ld.w      	r4, (r3, 0x18)
1fff2a78:	93a7      	ld.w      	r5, (r3, 0x1c)
1fff2a7a:	98c0      	ld.w      	r6, (r14, 0x0)
1fff2a7c:	98e1      	ld.w      	r7, (r14, 0x4)
1fff2a7e:	6598      	cmphs      	r6, r6
1fff2a80:	c4c40106 	subc      	r6, r4, r6
1fff2a84:	c4e50107 	subc      	r7, r5, r7
1fff2a88:	6d1b      	mov      	r4, r6
1fff2a8a:	6d5f      	mov      	r5, r7
1fff2a8c:	6548      	cmphs      	r2, r5
1fff2a8e:	0fec      	bf      	0x1fff2a66	// 1fff2a66 <timer_list_pri_insert.constprop.3+0x1e>
1fff2a90:	6496      	cmpne      	r5, r2
1fff2a92:	0803      	bt      	0x1fff2a98	// 1fff2a98 <timer_list_pri_insert.constprop.3+0x50>
1fff2a94:	6584      	cmphs      	r1, r6
1fff2a96:	0fe8      	bf      	0x1fff2a66	// 1fff2a66 <timer_list_pri_insert.constprop.3+0x1e>
    for (q = start->next; q != end; q = q->next) {
1fff2a98:	9360      	ld.w      	r3, (r3, 0x0)
1fff2a9a:	07e3      	br      	0x1fff2a60	// 1fff2a60 <timer_list_pri_insert.constprop.3+0x18>
1fff2a9c:	1fffd774 	.long	0x1fffd774
1fff2aa0:	1fffd9c0 	.long	0x1fffd9c0

1fff2aa4 <cmd_proc>:
        }
    }
}

static void cmd_proc(k_timer_queue_cb *cb, uint8_t cmd)
{
1fff2aa4:	14d1      	push      	r4, r15
1fff2aa6:	6cc3      	mov      	r3, r0
    ktimer_t *timer = cb->timer;
1fff2aa8:	9080      	ld.w      	r4, (r0, 0x0)

    if (timer->obj_type != RHINO_TIMER_OBJ_TYPE) {
1fff2aaa:	944f      	ld.w      	r2, (r4, 0x3c)
1fff2aac:	3a45      	cmpnei      	r2, 5
1fff2aae:	0822      	bt      	0x1fff2af2	// 1fff2af2 <cmd_proc+0x4e>
        return;
    }

    switch (cmd) {
1fff2ab0:	5903      	subi      	r0, r1, 1
1fff2ab2:	3806      	cmphsi      	r0, 7
1fff2ab4:	0862      	bt      	0x1fff2b78	// 1fff2b78 <cmd_proc+0xd4>
1fff2ab6:	e00005e3 	bsr      	0x1fff367c	// 1fff367c <___gnu_csky_case_uqi>
1fff2aba:	1d04      	.short	0x1d04
1fff2abc:	465f3f2e 	.long	0x465f3f2e
1fff2ac0:	0051      	.short	0x0051
        case TIMER_CMD_START:
            if (timer->timer_state == TIMER_ACTIVE) {
1fff2ac2:	d8640040 	ld.b      	r3, (r4, 0x40)
1fff2ac6:	3b41      	cmpnei      	r3, 1
1fff2ac8:	0c15      	bf      	0x1fff2af2	// 1fff2af2 <cmd_proc+0x4e>
                break;
            }

            timer->match   =  g_timer_count + timer->init_count;
1fff2aca:	1170      	lrw      	r3, 0x1fffd774	// 1fff2b88 <cmd_proc+0xe4>
1fff2acc:	940a      	ld.w      	r0, (r4, 0x28)
1fff2ace:	942b      	ld.w      	r1, (r4, 0x2c)
1fff2ad0:	9340      	ld.w      	r2, (r3, 0x0)
1fff2ad2:	9361      	ld.w      	r3, (r3, 0x4)
1fff2ad4:	6489      	cmplt      	r2, r2
1fff2ad6:	6081      	addc      	r2, r0
1fff2ad8:	60c5      	addc      	r3, r1
1fff2ada:	b446      	st.w      	r2, (r4, 0x18)
1fff2adc:	b467      	st.w      	r3, (r4, 0x1c)
            /* sort by remain time */
            timer->remain  =  timer->init_count;
1fff2ade:	b408      	st.w      	r0, (r4, 0x20)
1fff2ae0:	b429      	st.w      	r1, (r4, 0x24)
            /* used by timer delete */
            timer->to_head = &g_timer_head;
            timer_list_pri_insert(&g_timer_head, timer);
1fff2ae2:	6c13      	mov      	r0, r4
            timer->to_head = &g_timer_head;
1fff2ae4:	116a      	lrw      	r3, 0x1fffd9c0	// 1fff2b8c <cmd_proc+0xe8>
1fff2ae6:	b462      	st.w      	r3, (r4, 0x8)
            timer_list_pri_insert(&g_timer_head, timer);
1fff2ae8:	e3ffffb0 	bsr      	0x1fff2a48	// 1fff2a48 <timer_list_pri_insert.constprop.3>
            timer->timer_state = TIMER_ACTIVE;
1fff2aec:	3301      	movi      	r3, 1
        case TIMER_CMD_STOP:
            if (timer->timer_state == TIMER_DEACTIVE) {
                break;
            }
            timer_list_rm(timer);
            timer->timer_state = TIMER_DEACTIVE;
1fff2aee:	dc640040 	st.b      	r3, (r4, 0x40)
        default:
            k_err_proc(RHINO_SYS_FATAL_ERR);
            break;
    }

}
1fff2af2:	1491      	pop      	r4, r15
            if (timer->timer_state == TIMER_DEACTIVE) {
1fff2af4:	d8640040 	ld.b      	r3, (r4, 0x40)
1fff2af8:	3b40      	cmpnei      	r3, 0
1fff2afa:	0ffc      	bf      	0x1fff2af2	// 1fff2af2 <cmd_proc+0x4e>
    if (head != NULL) {
1fff2afc:	9462      	ld.w      	r3, (r4, 0x8)
1fff2afe:	3b40      	cmpnei      	r3, 0
1fff2b00:	0c09      	bf      	0x1fff2b12	// 1fff2b12 <cmd_proc+0x6e>
    element->prev->next = element->next;
1fff2b02:	9461      	ld.w      	r3, (r4, 0x4)
1fff2b04:	9440      	ld.w      	r2, (r4, 0x0)
1fff2b06:	b340      	st.w      	r2, (r3, 0x0)
    element->next->prev = element->prev;
1fff2b08:	9460      	ld.w      	r3, (r4, 0x0)
1fff2b0a:	9441      	ld.w      	r2, (r4, 0x4)
1fff2b0c:	b341      	st.w      	r2, (r3, 0x4)
        timer->to_head = NULL;
1fff2b0e:	3300      	movi      	r3, 0
1fff2b10:	b462      	st.w      	r3, (r4, 0x8)
            timer->timer_state = TIMER_DEACTIVE;
1fff2b12:	3300      	movi      	r3, 0
1fff2b14:	07ed      	br      	0x1fff2aee	// 1fff2aee <cmd_proc+0x4a>
            if (cb->first == 0u) {
1fff2b16:	9322      	ld.w      	r1, (r3, 0x8)
1fff2b18:	9343      	ld.w      	r2, (r3, 0xc)
1fff2b1a:	c4412420 	or      	r0, r1, r2
1fff2b1e:	3840      	cmpnei      	r0, 0
1fff2b20:	0fe9      	bf      	0x1fff2af2	// 1fff2af2 <cmd_proc+0x4e>
            if (timer->timer_state != TIMER_DEACTIVE) {
1fff2b22:	d8040040 	ld.b      	r0, (r4, 0x40)
1fff2b26:	3840      	cmpnei      	r0, 0
1fff2b28:	0be5      	bt      	0x1fff2af2	// 1fff2af2 <cmd_proc+0x4e>
            timer->init_count  = cb->first;
1fff2b2a:	b42a      	st.w      	r1, (r4, 0x28)
1fff2b2c:	b44b      	st.w      	r2, (r4, 0x2c)
            timer->round_ticks = cb->u.round;
1fff2b2e:	9344      	ld.w      	r2, (r3, 0x10)
1fff2b30:	9365      	ld.w      	r3, (r3, 0x14)
1fff2b32:	b44c      	st.w      	r2, (r4, 0x30)
1fff2b34:	b46d      	st.w      	r3, (r4, 0x34)
            break;
1fff2b36:	07de      	br      	0x1fff2af2	// 1fff2af2 <cmd_proc+0x4e>
            if (timer->timer_state != TIMER_DEACTIVE) {
1fff2b38:	d8440040 	ld.b      	r2, (r4, 0x40)
1fff2b3c:	3a40      	cmpnei      	r2, 0
1fff2b3e:	0bda      	bt      	0x1fff2af2	// 1fff2af2 <cmd_proc+0x4e>
            timer->timer_cb_arg = cb->u.arg;
1fff2b40:	9364      	ld.w      	r3, (r3, 0x10)
1fff2b42:	b465      	st.w      	r3, (r4, 0x14)
            break;
1fff2b44:	07d7      	br      	0x1fff2af2	// 1fff2af2 <cmd_proc+0x4e>
            if (timer->timer_state != TIMER_DEACTIVE) {
1fff2b46:	d8640040 	ld.b      	r3, (r4, 0x40)
1fff2b4a:	3b40      	cmpnei      	r3, 0
1fff2b4c:	0bd3      	bt      	0x1fff2af2	// 1fff2af2 <cmd_proc+0x4e>
            if (timer->mm_alloc_flag != K_OBJ_STATIC_ALLOC) {
1fff2b4e:	d8640041 	ld.b      	r3, (r4, 0x41)
1fff2b52:	3b41      	cmpnei      	r3, 1
1fff2b54:	0bcf      	bt      	0x1fff2af2	// 1fff2af2 <cmd_proc+0x4e>
            timer->obj_type = RHINO_OBJ_TYPE_NONE;
1fff2b56:	3300      	movi      	r3, 0
1fff2b58:	b46f      	st.w      	r3, (r4, 0x3c)
            break;
1fff2b5a:	07cc      	br      	0x1fff2af2	// 1fff2af2 <cmd_proc+0x4e>
            if (timer->timer_state != TIMER_DEACTIVE) {
1fff2b5c:	d8640040 	ld.b      	r3, (r4, 0x40)
1fff2b60:	3b40      	cmpnei      	r3, 0
1fff2b62:	0bc8      	bt      	0x1fff2af2	// 1fff2af2 <cmd_proc+0x4e>
            if (timer->mm_alloc_flag != K_OBJ_DYN_ALLOC) {
1fff2b64:	d8640041 	ld.b      	r3, (r4, 0x41)
1fff2b68:	3b42      	cmpnei      	r3, 2
1fff2b6a:	0bc4      	bt      	0x1fff2af2	// 1fff2af2 <cmd_proc+0x4e>
            timer->obj_type = RHINO_OBJ_TYPE_NONE;
1fff2b6c:	3300      	movi      	r3, 0
            krhino_mm_free(timer);
1fff2b6e:	6c13      	mov      	r0, r4
            timer->obj_type = RHINO_OBJ_TYPE_NONE;
1fff2b70:	b46f      	st.w      	r3, (r4, 0x3c)
            krhino_mm_free(timer);
1fff2b72:	e00004c9 	bsr      	0x1fff3504	// 1fff3504 <krhino_mm_free>
            break;
1fff2b76:	07be      	br      	0x1fff2af2	// 1fff2af2 <cmd_proc+0x4e>
            k_err_proc(RHINO_SYS_FATAL_ERR);
1fff2b78:	ea020149 	movi      	r2, 329
1fff2b7c:	1025      	lrw      	r1, 0x11012256	// 1fff2b90 <cmd_proc+0xec>
1fff2b7e:	3001      	movi      	r0, 1
1fff2b80:	e3fffb54 	bsr      	0x1fff2228	// 1fff2228 <k_err_proc_debug>
            break;
1fff2b84:	07b7      	br      	0x1fff2af2	// 1fff2af2 <cmd_proc+0x4e>
1fff2b86:	0000      	bkpt
1fff2b88:	1fffd774 	.long	0x1fffd774
1fff2b8c:	1fffd9c0 	.long	0x1fffd9c0
1fff2b90:	11012256 	.long	0x11012256

1fff2b94 <timer_cmd_proc>:

static void timer_cmd_proc(k_timer_queue_cb *cb)
{
1fff2b94:	14d1      	push      	r4, r15
1fff2b96:	6d03      	mov      	r4, r0
    if (cb->cb_num == TIMER_ARG_CHG_AUTO) {
1fff2b98:	8024      	ld.b      	r1, (r0, 0x4)
1fff2b9a:	3945      	cmpnei      	r1, 5
1fff2b9c:	0809      	bt      	0x1fff2bae	// 1fff2bae <timer_cmd_proc+0x1a>
        cmd_proc(cb, TIMER_CMD_STOP);
1fff2b9e:	3102      	movi      	r1, 2
1fff2ba0:	e3ffff82 	bsr      	0x1fff2aa4	// 1fff2aa4 <cmd_proc>
        cmd_proc(cb, TIMER_ARG_CHG);
1fff2ba4:	3104      	movi      	r1, 4
1fff2ba6:	6c13      	mov      	r0, r4
1fff2ba8:	e3ffff7e 	bsr      	0x1fff2aa4	// 1fff2aa4 <cmd_proc>
        cmd_proc(cb, TIMER_CMD_START);
1fff2bac:	3101      	movi      	r1, 1
    }
    else {
        cmd_proc(cb, cb->cb_num);
1fff2bae:	6c13      	mov      	r0, r4
1fff2bb0:	e3ffff7a 	bsr      	0x1fff2aa4	// 1fff2aa4 <cmd_proc>
    }
}
1fff2bb4:	1491      	pop      	r4, r15
	...

1fff2bb8 <timer_cb_proc>:
{
1fff2bb8:	14d4      	push      	r4-r7, r15
1fff2bba:	1421      	subi      	r14, r14, 4
    for (q = start->next; q != end; q = q->next) {
1fff2bbc:	11c3      	lrw      	r6, 0x1fffd9c0	// 1fff2c48 <timer_cb_proc+0x90>
        delta = (tick_i_t)timer->match - (tick_i_t)g_timer_count;
1fff2bbe:	1164      	lrw      	r3, 0x1fffd774	// 1fff2c4c <timer_cb_proc+0x94>
1fff2bc0:	6ddb      	mov      	r7, r6
    for (q = start->next; q != end; q = q->next) {
1fff2bc2:	9680      	ld.w      	r4, (r6, 0x0)
        delta = (tick_i_t)timer->match - (tick_i_t)g_timer_count;
1fff2bc4:	b860      	st.w      	r3, (r14, 0x0)
    for (q = start->next; q != end; q = q->next) {
1fff2bc6:	65d2      	cmpne      	r4, r7
1fff2bc8:	0803      	bt      	0x1fff2bce	// 1fff2bce <timer_cb_proc+0x16>
}
1fff2bca:	1401      	addi      	r14, r14, 4
1fff2bcc:	1494      	pop      	r4-r7, r15
        delta = (tick_i_t)timer->match - (tick_i_t)g_timer_count;
1fff2bce:	9820      	ld.w      	r1, (r14, 0x0)
1fff2bd0:	9446      	ld.w      	r2, (r4, 0x18)
1fff2bd2:	9467      	ld.w      	r3, (r4, 0x1c)
1fff2bd4:	9100      	ld.w      	r0, (r1, 0x0)
1fff2bd6:	9121      	ld.w      	r1, (r1, 0x4)
1fff2bd8:	6554      	cmphs      	r5, r5
1fff2bda:	c4020105 	subc      	r5, r2, r0
1fff2bde:	c4230106 	subc      	r6, r3, r1
1fff2be2:	6c57      	mov      	r1, r5
1fff2be4:	6c9b      	mov      	r2, r6
        if (delta <= 0) {
1fff2be6:	3a20      	cmplti      	r2, 1
1fff2be8:	0ff1      	bf      	0x1fff2bca	// 1fff2bca <timer_cb_proc+0x12>
1fff2bea:	3a40      	cmpnei      	r2, 0
1fff2bec:	0803      	bt      	0x1fff2bf2	// 1fff2bf2 <timer_cb_proc+0x3a>
1fff2bee:	3d40      	cmpnei      	r5, 0
1fff2bf0:	0bed      	bt      	0x1fff2bca	// 1fff2bca <timer_cb_proc+0x12>
            timer->cb(timer, timer->timer_cb_arg);
1fff2bf2:	9464      	ld.w      	r3, (r4, 0x10)
1fff2bf4:	9425      	ld.w      	r1, (r4, 0x14)
1fff2bf6:	6c13      	mov      	r0, r4
1fff2bf8:	7bcd      	jsr      	r3
    if (head != NULL) {
1fff2bfa:	9462      	ld.w      	r3, (r4, 0x8)
1fff2bfc:	3b40      	cmpnei      	r3, 0
1fff2bfe:	0c09      	bf      	0x1fff2c10	// 1fff2c10 <timer_cb_proc+0x58>
    element->prev->next = element->next;
1fff2c00:	9461      	ld.w      	r3, (r4, 0x4)
1fff2c02:	9440      	ld.w      	r2, (r4, 0x0)
1fff2c04:	b340      	st.w      	r2, (r3, 0x0)
    element->next->prev = element->prev;
1fff2c06:	9460      	ld.w      	r3, (r4, 0x0)
1fff2c08:	9441      	ld.w      	r2, (r4, 0x4)
1fff2c0a:	b341      	st.w      	r2, (r3, 0x4)
        timer->to_head = NULL;
1fff2c0c:	3300      	movi      	r3, 0
1fff2c0e:	b462      	st.w      	r3, (r4, 0x8)
            if (timer->round_ticks > 0u) {
1fff2c10:	940c      	ld.w      	r0, (r4, 0x30)
1fff2c12:	942d      	ld.w      	r1, (r4, 0x34)
1fff2c14:	c4202423 	or      	r3, r0, r1
1fff2c18:	3b40      	cmpnei      	r3, 0
1fff2c1a:	0c13      	bf      	0x1fff2c40	// 1fff2c40 <timer_cb_proc+0x88>
                timer->match   =  g_timer_count + timer->remain;
1fff2c1c:	9860      	ld.w      	r3, (r14, 0x0)
                timer->remain  =  timer->round_ticks;
1fff2c1e:	b408      	st.w      	r0, (r4, 0x20)
1fff2c20:	b429      	st.w      	r1, (r4, 0x24)
                timer->match   =  g_timer_count + timer->remain;
1fff2c22:	9340      	ld.w      	r2, (r3, 0x0)
1fff2c24:	9361      	ld.w      	r3, (r3, 0x4)
1fff2c26:	6555      	cmplt      	r5, r5
1fff2c28:	c4020045 	addc      	r5, r2, r0
1fff2c2c:	c4230046 	addc      	r6, r3, r1
                timer->to_head = &g_timer_head;
1fff2c30:	b4e2      	st.w      	r7, (r4, 0x8)
                timer->match   =  g_timer_count + timer->remain;
1fff2c32:	b4a6      	st.w      	r5, (r4, 0x18)
1fff2c34:	b4c7      	st.w      	r6, (r4, 0x1c)
                timer_list_pri_insert(&g_timer_head, timer);
1fff2c36:	6c13      	mov      	r0, r4
1fff2c38:	e3ffff08 	bsr      	0x1fff2a48	// 1fff2a48 <timer_list_pri_insert.constprop.3>
    for (q = start->next; q != end; q = q->next) {
1fff2c3c:	9480      	ld.w      	r4, (r4, 0x0)
1fff2c3e:	07c4      	br      	0x1fff2bc6	// 1fff2bc6 <timer_cb_proc+0xe>
                timer->timer_state = TIMER_DEACTIVE;
1fff2c40:	3300      	movi      	r3, 0
1fff2c42:	dc640040 	st.b      	r3, (r4, 0x40)
1fff2c46:	07fb      	br      	0x1fff2c3c	// 1fff2c3c <timer_cb_proc+0x84>
1fff2c48:	1fffd9c0 	.long	0x1fffd9c0
1fff2c4c:	1fffd774 	.long	0x1fffd774

1fff2c50 <timer_task>:

static void timer_task(void *pa)
{
1fff2c50:	14d4      	push      	r4-r7, r15
1fff2c52:	1428      	subi      	r14, r14, 32
    while (RHINO_TRUE) {
        err      = krhino_buf_queue_recv(&g_timer_queue, RHINO_WAIT_FOREVER, &cb_msg, &msg_size);
        tick_end = krhino_sys_tick_get();

        if (err == RHINO_SUCCESS) {
            g_timer_count = tick_end;
1fff2c54:	11c9      	lrw      	r6, 0x1fffd774	// 1fff2cf8 <timer_task+0xa8>
        err      = krhino_buf_queue_recv(&g_timer_queue, RHINO_WAIT_FOREVER, &cb_msg, &msg_size);
1fff2c56:	1b01      	addi      	r3, r14, 4
1fff2c58:	1109      	lrw      	r0, 0x1fffd728	// 1fff2cfc <timer_task+0xac>
1fff2c5a:	3100      	movi      	r1, 0
1fff2c5c:	b860      	st.w      	r3, (r14, 0x0)
1fff2c5e:	2900      	subi      	r1, 1
1fff2c60:	1b02      	addi      	r3, r14, 8
1fff2c62:	3200      	movi      	r2, 0
1fff2c64:	2a00      	subi      	r2, 1
1fff2c66:	e3fffd25 	bsr      	0x1fff26b0	// 1fff26b0 <krhino_buf_queue_recv>
1fff2c6a:	6d03      	mov      	r4, r0
        tick_end = krhino_sys_tick_get();
1fff2c6c:	e0003da0 	bsr      	0x1fffa7ac	// 1fffa7ac <check_before_startup+0xd4>
        if (err == RHINO_SUCCESS) {
1fff2c70:	3c40      	cmpnei      	r4, 0
1fff2c72:	0828      	bt      	0x1fff2cc2	// 1fff2cc2 <timer_task+0x72>
            g_timer_count = tick_end;
1fff2c74:	b600      	st.w      	r0, (r6, 0x0)
1fff2c76:	b621      	st.w      	r1, (r6, 0x4)
        } else {
            k_err_proc(RHINO_SYS_FATAL_ERR);
        }

        timer_cmd_proc(&cb_msg);
1fff2c78:	1802      	addi      	r0, r14, 8
    return (list->next == list);
1fff2c7a:	11e2      	lrw      	r7, 0x1fffd9c0	// 1fff2d00 <timer_task+0xb0>
1fff2c7c:	e3ffff8c 	bsr      	0x1fff2b94	// 1fff2b94 <timer_cmd_proc>
1fff2c80:	9780      	ld.w      	r4, (r7, 0x0)

        while (!is_klist_empty(&g_timer_head)) {
1fff2c82:	65d2      	cmpne      	r4, r7
1fff2c84:	0fe9      	bf      	0x1fff2c56	// 1fff2c56 <timer_task+0x6>
            timer = krhino_list_entry(g_timer_head.next, ktimer_t, timer_list);
            tick_start = krhino_sys_tick_get();
1fff2c86:	e0003d93 	bsr      	0x1fffa7ac	// 1fffa7ac <check_before_startup+0xd4>
            delta = (tick_i_t)timer->match - (tick_i_t)tick_start;
1fff2c8a:	94a7      	ld.w      	r5, (r4, 0x1c)
1fff2c8c:	9486      	ld.w      	r4, (r4, 0x18)
1fff2c8e:	6510      	cmphs      	r4, r4
1fff2c90:	6103      	subc      	r4, r0
1fff2c92:	6147      	subc      	r5, r1
            if (delta > 0) {
1fff2c94:	3d20      	cmplti      	r5, 1
1fff2c96:	0c05      	bf      	0x1fff2ca0	// 1fff2ca0 <timer_task+0x50>
1fff2c98:	3d40      	cmpnei      	r5, 0
1fff2c9a:	0811      	bt      	0x1fff2cbc	// 1fff2cbc <timer_task+0x6c>
1fff2c9c:	3c40      	cmpnei      	r4, 0
1fff2c9e:	0c0f      	bf      	0x1fff2cbc	// 1fff2cbc <timer_task+0x6c>
                err = krhino_buf_queue_recv(&g_timer_queue, (tick_t)delta, &cb_msg, &msg_size);
1fff2ca0:	6c53      	mov      	r1, r4
1fff2ca2:	6c97      	mov      	r2, r5
1fff2ca4:	1b01      	addi      	r3, r14, 4
1fff2ca6:	1016      	lrw      	r0, 0x1fffd728	// 1fff2cfc <timer_task+0xac>
1fff2ca8:	b860      	st.w      	r3, (r14, 0x0)
1fff2caa:	1b02      	addi      	r3, r14, 8
1fff2cac:	e3fffd02 	bsr      	0x1fff26b0	// 1fff26b0 <krhino_buf_queue_recv>
1fff2cb0:	6d03      	mov      	r4, r0
                tick_end = krhino_sys_tick_get();
1fff2cb2:	e0003d7d 	bsr      	0x1fffa7ac	// 1fffa7ac <check_before_startup+0xd4>
                if (err == RHINO_BLK_TIMEOUT) {
1fff2cb6:	eb440192 	cmpnei      	r4, 402
1fff2cba:	080b      	bt      	0x1fff2cd0	// 1fff2cd0 <timer_task+0x80>
                    timer_cmd_proc(&cb_msg);
                } else {
                    k_err_proc(RHINO_SYS_FATAL_ERR);
                }
            } else {
                g_timer_count = tick_start;
1fff2cbc:	b600      	st.w      	r0, (r6, 0x0)
1fff2cbe:	b621      	st.w      	r1, (r6, 0x4)
1fff2cc0:	0411      	br      	0x1fff2ce2	// 1fff2ce2 <timer_task+0x92>
            k_err_proc(RHINO_SYS_FATAL_ERR);
1fff2cc2:	32b7      	movi      	r2, 183
1fff2cc4:	4241      	lsli      	r2, r2, 1
1fff2cc6:	1030      	lrw      	r1, 0x11012256	// 1fff2d04 <timer_task+0xb4>
1fff2cc8:	3001      	movi      	r0, 1
1fff2cca:	e3fffaaf 	bsr      	0x1fff2228	// 1fff2228 <k_err_proc_debug>
1fff2cce:	07d5      	br      	0x1fff2c78	// 1fff2c78 <timer_task+0x28>
                } else if (err == RHINO_SUCCESS) {
1fff2cd0:	3c40      	cmpnei      	r4, 0
1fff2cd2:	080b      	bt      	0x1fff2ce8	// 1fff2ce8 <timer_task+0x98>
                    g_timer_count = tick_end;
1fff2cd4:	b600      	st.w      	r0, (r6, 0x0)
1fff2cd6:	b621      	st.w      	r1, (r6, 0x4)
                    timer_cb_proc();
1fff2cd8:	e3ffff70 	bsr      	0x1fff2bb8	// 1fff2bb8 <timer_cb_proc>
                    timer_cmd_proc(&cb_msg);
1fff2cdc:	1802      	addi      	r0, r14, 8
1fff2cde:	e3ffff5b 	bsr      	0x1fff2b94	// 1fff2b94 <timer_cmd_proc>
            }
                timer_cb_proc();
1fff2ce2:	e3ffff6b 	bsr      	0x1fff2bb8	// 1fff2bb8 <timer_cb_proc>
1fff2ce6:	07cd      	br      	0x1fff2c80	// 1fff2c80 <timer_task+0x30>
                    k_err_proc(RHINO_SYS_FATAL_ERR);
1fff2ce8:	ea020181 	movi      	r2, 385
1fff2cec:	1026      	lrw      	r1, 0x11012256	// 1fff2d04 <timer_task+0xb4>
1fff2cee:	3001      	movi      	r0, 1
1fff2cf0:	e3fffa9c 	bsr      	0x1fff2228	// 1fff2228 <k_err_proc_debug>
1fff2cf4:	07f7      	br      	0x1fff2ce2	// 1fff2ce2 <timer_task+0x92>
1fff2cf6:	0000      	bkpt
1fff2cf8:	1fffd774 	.long	0x1fffd774
1fff2cfc:	1fffd728 	.long	0x1fffd728
1fff2d00:	1fffd9c0 	.long	0x1fffd9c0
1fff2d04:	11012256 	.long	0x11012256

1fff2d08 <krhino_timer_dyn_del>:
{
1fff2d08:	14d0      	push      	r15
1fff2d0a:	1426      	subi      	r14, r14, 24
    NULL_PARA_CHK(timer);
1fff2d0c:	3840      	cmpnei      	r0, 0
1fff2d0e:	0c0c      	bf      	0x1fff2d26	// 1fff2d26 <krhino_timer_dyn_del+0x1e>
    cb.timer  = timer;
1fff2d10:	b800      	st.w      	r0, (r14, 0x0)
    cb.cb_num = TIMER_CMD_DYN_DEL;
1fff2d12:	3307      	movi      	r3, 7
    return krhino_buf_queue_send(&g_timer_queue, &cb, sizeof(k_timer_queue_cb));
1fff2d14:	3218      	movi      	r2, 24
1fff2d16:	6c7b      	mov      	r1, r14
1fff2d18:	1005      	lrw      	r0, 0x1fffd728	// 1fff2d2c <krhino_timer_dyn_del+0x24>
    cb.cb_num = TIMER_CMD_DYN_DEL;
1fff2d1a:	dc6e0004 	st.b      	r3, (r14, 0x4)
    return krhino_buf_queue_send(&g_timer_queue, &cb, sizeof(k_timer_queue_cb));
1fff2d1e:	e3fffc6e 	bsr      	0x1fff25fa	// 1fff25fa <krhino_buf_queue_send>
}
1fff2d22:	1406      	addi      	r14, r14, 24
1fff2d24:	1490      	pop      	r15
    NULL_PARA_CHK(timer);
1fff2d26:	3006      	movi      	r0, 6
1fff2d28:	07fd      	br      	0x1fff2d22	// 1fff2d22 <krhino_timer_dyn_del+0x1a>
1fff2d2a:	0000      	bkpt
1fff2d2c:	1fffd728 	.long	0x1fffd728

1fff2d30 <krhino_timer_start>:
{
1fff2d30:	14d0      	push      	r15
1fff2d32:	1426      	subi      	r14, r14, 24
    NULL_PARA_CHK(timer);
1fff2d34:	3840      	cmpnei      	r0, 0
1fff2d36:	0c0c      	bf      	0x1fff2d4e	// 1fff2d4e <krhino_timer_start+0x1e>
    cb.timer  = timer;
1fff2d38:	b800      	st.w      	r0, (r14, 0x0)
    cb.cb_num = TIMER_CMD_START;
1fff2d3a:	3301      	movi      	r3, 1
    return krhino_buf_queue_send(&g_timer_queue, &cb, sizeof(k_timer_queue_cb));
1fff2d3c:	3218      	movi      	r2, 24
1fff2d3e:	6c7b      	mov      	r1, r14
1fff2d40:	1005      	lrw      	r0, 0x1fffd728	// 1fff2d54 <krhino_timer_start+0x24>
    cb.cb_num = TIMER_CMD_START;
1fff2d42:	dc6e0004 	st.b      	r3, (r14, 0x4)
    return krhino_buf_queue_send(&g_timer_queue, &cb, sizeof(k_timer_queue_cb));
1fff2d46:	e3fffc5a 	bsr      	0x1fff25fa	// 1fff25fa <krhino_buf_queue_send>
}
1fff2d4a:	1406      	addi      	r14, r14, 24
1fff2d4c:	1490      	pop      	r15
    NULL_PARA_CHK(timer);
1fff2d4e:	3006      	movi      	r0, 6
1fff2d50:	07fd      	br      	0x1fff2d4a	// 1fff2d4a <krhino_timer_start+0x1a>
1fff2d52:	0000      	bkpt
1fff2d54:	1fffd728 	.long	0x1fffd728

1fff2d58 <krhino_timer_dyn_create>:
{
1fff2d58:	1421      	subi      	r14, r14, 4
1fff2d5a:	14d4      	push      	r4-r7, r15
1fff2d5c:	1426      	subi      	r14, r14, 24
1fff2d5e:	6d4f      	mov      	r5, r3
1fff2d60:	b86b      	st.w      	r3, (r14, 0x2c)
1fff2d62:	986d      	ld.w      	r3, (r14, 0x34)
    NULL_PARA_CHK(timer);
1fff2d64:	3840      	cmpnei      	r0, 0
{
1fff2d66:	b862      	st.w      	r3, (r14, 0x8)
1fff2d68:	986e      	ld.w      	r3, (r14, 0x38)
1fff2d6a:	6dc3      	mov      	r7, r0
1fff2d6c:	b863      	st.w      	r3, (r14, 0xc)
1fff2d6e:	986f      	ld.w      	r3, (r14, 0x3c)
1fff2d70:	b825      	st.w      	r1, (r14, 0x14)
1fff2d72:	b860      	st.w      	r3, (r14, 0x0)
1fff2d74:	d86e0040 	ld.b      	r3, (r14, 0x40)
1fff2d78:	b844      	st.w      	r2, (r14, 0x10)
1fff2d7a:	98cc      	ld.w      	r6, (r14, 0x30)
1fff2d7c:	b861      	st.w      	r3, (r14, 0x4)
    NULL_PARA_CHK(timer);
1fff2d7e:	0c4e      	bf      	0x1fff2e1a	// 1fff2e1a <krhino_timer_dyn_create+0xc2>
    timer_obj = krhino_mm_alloc(sizeof(ktimer_t));
1fff2d80:	3044      	movi      	r0, 68
1fff2d82:	e00003a9 	bsr      	0x1fff34d4	// 1fff34d4 <krhino_mm_alloc>
1fff2d86:	6d03      	mov      	r4, r0
    if (timer_obj == NULL) {
1fff2d88:	3840      	cmpnei      	r0, 0
1fff2d8a:	0c4a      	bf      	0x1fff2e1e	// 1fff2e1e <krhino_timer_dyn_create+0xc6>
    NULL_PARA_CHK(name);
1fff2d8c:	9825      	ld.w      	r1, (r14, 0x14)
1fff2d8e:	3940      	cmpnei      	r1, 0
1fff2d90:	0c3e      	bf      	0x1fff2e0c	// 1fff2e0c <krhino_timer_dyn_create+0xb4>
    NULL_PARA_CHK(cb);
1fff2d92:	9844      	ld.w      	r2, (r14, 0x10)
1fff2d94:	3a40      	cmpnei      	r2, 0
1fff2d96:	0c3b      	bf      	0x1fff2e0c	// 1fff2e0c <krhino_timer_dyn_create+0xb4>
    if (first == 0u) {
1fff2d98:	3e20      	cmplti      	r6, 1
1fff2d9a:	9863      	ld.w      	r3, (r14, 0xc)
1fff2d9c:	0c05      	bf      	0x1fff2da6	// 1fff2da6 <krhino_timer_dyn_create+0x4e>
1fff2d9e:	3e40      	cmpnei      	r6, 0
1fff2da0:	0838      	bt      	0x1fff2e10	// 1fff2e10 <krhino_timer_dyn_create+0xb8>
1fff2da2:	3d40      	cmpnei      	r5, 0
1fff2da4:	0c36      	bf      	0x1fff2e10	// 1fff2e10 <krhino_timer_dyn_create+0xb8>
    if (round > MAX_TIMER_TICKS) {
1fff2da6:	3bdf      	btsti      	r3, 31
1fff2da8:	0834      	bt      	0x1fff2e10	// 1fff2e10 <krhino_timer_dyn_create+0xb8>
    timer->cb            = cb;
1fff2daa:	b444      	st.w      	r2, (r4, 0x10)
    timer->round_ticks   = round;
1fff2dac:	9842      	ld.w      	r2, (r14, 0x8)
1fff2dae:	b46d      	st.w      	r3, (r4, 0x34)
1fff2db0:	b44c      	st.w      	r2, (r4, 0x30)
    timer->remain        = 0u;
1fff2db2:	3300      	movi      	r3, 0
1fff2db4:	3200      	movi      	r2, 0
    timer->name          = name;
1fff2db6:	b423      	st.w      	r1, (r4, 0xc)
    timer->remain        = 0u;
1fff2db8:	b448      	st.w      	r2, (r4, 0x20)
1fff2dba:	b469      	st.w      	r3, (r4, 0x24)
    timer->match         = 0u;
1fff2dbc:	b446      	st.w      	r2, (r4, 0x18)
1fff2dbe:	b467      	st.w      	r3, (r4, 0x1c)
    timer->timer_state   = TIMER_DEACTIVE;
1fff2dc0:	3300      	movi      	r3, 0
    timer->init_count    = first;
1fff2dc2:	b4aa      	st.w      	r5, (r4, 0x28)
    timer->timer_state   = TIMER_DEACTIVE;
1fff2dc4:	dc640040 	st.b      	r3, (r4, 0x40)
    timer->to_head       = NULL;
1fff2dc8:	3300      	movi      	r3, 0
    timer->init_count    = first;
1fff2dca:	b4cb      	st.w      	r6, (r4, 0x2c)
    timer->to_head       = NULL;
1fff2dcc:	b462      	st.w      	r3, (r4, 0x8)
    timer->mm_alloc_flag = mm_alloc_flag;
1fff2dce:	3302      	movi      	r3, 2
    list_head->next = list_head;
1fff2dd0:	b480      	st.w      	r4, (r4, 0x0)
1fff2dd2:	dc640041 	st.b      	r3, (r4, 0x41)
    timer->timer_cb_arg  = arg;
1fff2dd6:	9860      	ld.w      	r3, (r14, 0x0)
    list_head->prev = list_head;
1fff2dd8:	b481      	st.w      	r4, (r4, 0x4)
1fff2dda:	b465      	st.w      	r3, (r4, 0x14)
    timer->obj_type = RHINO_TIMER_OBJ_TYPE;
1fff2ddc:	3305      	movi      	r3, 5
1fff2dde:	b46f      	st.w      	r3, (r4, 0x3c)
    if (auto_run > 0u) {
1fff2de0:	9861      	ld.w      	r3, (r14, 0x4)
1fff2de2:	3b40      	cmpnei      	r3, 0
1fff2de4:	0c18      	bf      	0x1fff2e14	// 1fff2e14 <krhino_timer_dyn_create+0xbc>
        err = krhino_timer_start(timer);
1fff2de6:	6c13      	mov      	r0, r4
1fff2de8:	e3ffffa4 	bsr      	0x1fff2d30	// 1fff2d30 <krhino_timer_start>
1fff2dec:	6d43      	mov      	r5, r0
    if (ret != RHINO_SUCCESS) {
1fff2dee:	3840      	cmpnei      	r0, 0
1fff2df0:	0c12      	bf      	0x1fff2e14	// 1fff2e14 <krhino_timer_dyn_create+0xbc>
        krhino_mm_free(timer_obj);
1fff2df2:	6c13      	mov      	r0, r4
1fff2df4:	e0000388 	bsr      	0x1fff3504	// 1fff3504 <krhino_mm_free>
}
1fff2df8:	6c17      	mov      	r0, r5
1fff2dfa:	1406      	addi      	r14, r14, 24
1fff2dfc:	d9ee2004 	ld.w      	r15, (r14, 0x10)
1fff2e00:	98e3      	ld.w      	r7, (r14, 0xc)
1fff2e02:	98c2      	ld.w      	r6, (r14, 0x8)
1fff2e04:	98a1      	ld.w      	r5, (r14, 0x4)
1fff2e06:	9880      	ld.w      	r4, (r14, 0x0)
1fff2e08:	1406      	addi      	r14, r14, 24
1fff2e0a:	783c      	jmp      	r15
    NULL_PARA_CHK(name);
1fff2e0c:	3506      	movi      	r5, 6
1fff2e0e:	07f2      	br      	0x1fff2df2	// 1fff2df2 <krhino_timer_dyn_create+0x9a>
        return RHINO_INV_PARAM;
1fff2e10:	3505      	movi      	r5, 5
1fff2e12:	07f0      	br      	0x1fff2df2	// 1fff2df2 <krhino_timer_dyn_create+0x9a>
   *timer = timer_obj;
1fff2e14:	b780      	st.w      	r4, (r7, 0x0)
    return ret;
1fff2e16:	3500      	movi      	r5, 0
1fff2e18:	07f0      	br      	0x1fff2df8	// 1fff2df8 <krhino_timer_dyn_create+0xa0>
    NULL_PARA_CHK(timer);
1fff2e1a:	3506      	movi      	r5, 6
1fff2e1c:	07ee      	br      	0x1fff2df8	// 1fff2df8 <krhino_timer_dyn_create+0xa0>
        return RHINO_NO_MEM;
1fff2e1e:	3569      	movi      	r5, 105
1fff2e20:	07ec      	br      	0x1fff2df8	// 1fff2df8 <krhino_timer_dyn_create+0xa0>

1fff2e22 <krhino_timer_create>:
{
1fff2e22:	1421      	subi      	r14, r14, 4
1fff2e24:	14d4      	push      	r4-r7, r15
1fff2e26:	1421      	subi      	r14, r14, 4
1fff2e28:	98ca      	ld.w      	r6, (r14, 0x28)
    NULL_PARA_CHK(timer);
1fff2e2a:	3840      	cmpnei      	r0, 0
{
1fff2e2c:	b8c0      	st.w      	r6, (r14, 0x0)
1fff2e2e:	b866      	st.w      	r3, (r14, 0x18)
1fff2e30:	9887      	ld.w      	r4, (r14, 0x1c)
1fff2e32:	98e8      	ld.w      	r7, (r14, 0x20)
1fff2e34:	98a9      	ld.w      	r5, (r14, 0x24)
1fff2e36:	d8ce002c 	ld.b      	r6, (r14, 0x2c)
    NULL_PARA_CHK(timer);
1fff2e3a:	0c33      	bf      	0x1fff2ea0	// 1fff2ea0 <krhino_timer_create+0x7e>
    NULL_PARA_CHK(name);
1fff2e3c:	3940      	cmpnei      	r1, 0
1fff2e3e:	0c31      	bf      	0x1fff2ea0	// 1fff2ea0 <krhino_timer_create+0x7e>
    NULL_PARA_CHK(cb);
1fff2e40:	3a40      	cmpnei      	r2, 0
1fff2e42:	0c2f      	bf      	0x1fff2ea0	// 1fff2ea0 <krhino_timer_create+0x7e>
    if (first == 0u) {
1fff2e44:	3c20      	cmplti      	r4, 1
1fff2e46:	0c05      	bf      	0x1fff2e50	// 1fff2e50 <krhino_timer_create+0x2e>
1fff2e48:	3c40      	cmpnei      	r4, 0
1fff2e4a:	082d      	bt      	0x1fff2ea4	// 1fff2ea4 <krhino_timer_create+0x82>
1fff2e4c:	3b40      	cmpnei      	r3, 0
1fff2e4e:	0c2b      	bf      	0x1fff2ea4	// 1fff2ea4 <krhino_timer_create+0x82>
    if (round > MAX_TIMER_TICKS) {
1fff2e50:	3ddf      	btsti      	r5, 31
1fff2e52:	0829      	bt      	0x1fff2ea4	// 1fff2ea4 <krhino_timer_create+0x82>
    timer->init_count    = first;
1fff2e54:	b06a      	st.w      	r3, (r0, 0x28)
1fff2e56:	b08b      	st.w      	r4, (r0, 0x2c)
    timer->remain        = 0u;
1fff2e58:	3300      	movi      	r3, 0
1fff2e5a:	3400      	movi      	r4, 0
    timer->timer_state   = TIMER_DEACTIVE;
1fff2e5c:	dc600040 	st.b      	r3, (r0, 0x40)
    timer->remain        = 0u;
1fff2e60:	b068      	st.w      	r3, (r0, 0x20)
1fff2e62:	b089      	st.w      	r4, (r0, 0x24)
    timer->match         = 0u;
1fff2e64:	b066      	st.w      	r3, (r0, 0x18)
1fff2e66:	b087      	st.w      	r4, (r0, 0x1c)
    timer->to_head       = NULL;
1fff2e68:	3300      	movi      	r3, 0
    if (auto_run > 0u) {
1fff2e6a:	3e40      	cmpnei      	r6, 0
    timer->to_head       = NULL;
1fff2e6c:	b062      	st.w      	r3, (r0, 0x8)
    timer->mm_alloc_flag = mm_alloc_flag;
1fff2e6e:	3301      	movi      	r3, 1
    timer->name          = name;
1fff2e70:	b023      	st.w      	r1, (r0, 0xc)
    timer->mm_alloc_flag = mm_alloc_flag;
1fff2e72:	dc600041 	st.b      	r3, (r0, 0x41)
    timer->timer_cb_arg  = arg;
1fff2e76:	9860      	ld.w      	r3, (r14, 0x0)
    timer->cb            = cb;
1fff2e78:	b044      	st.w      	r2, (r0, 0x10)
    timer->timer_cb_arg  = arg;
1fff2e7a:	b065      	st.w      	r3, (r0, 0x14)
    timer->obj_type = RHINO_TIMER_OBJ_TYPE;
1fff2e7c:	3305      	movi      	r3, 5
    timer->round_ticks   = round;
1fff2e7e:	b0ec      	st.w      	r7, (r0, 0x30)
1fff2e80:	b0ad      	st.w      	r5, (r0, 0x34)
    list_head->next = list_head;
1fff2e82:	b000      	st.w      	r0, (r0, 0x0)
    list_head->prev = list_head;
1fff2e84:	b001      	st.w      	r0, (r0, 0x4)
    timer->obj_type = RHINO_TIMER_OBJ_TYPE;
1fff2e86:	b06f      	st.w      	r3, (r0, 0x3c)
    if (auto_run > 0u) {
1fff2e88:	0c10      	bf      	0x1fff2ea8	// 1fff2ea8 <krhino_timer_create+0x86>
        err = krhino_timer_start(timer);
1fff2e8a:	e3ffff53 	bsr      	0x1fff2d30	// 1fff2d30 <krhino_timer_start>
}
1fff2e8e:	1401      	addi      	r14, r14, 4
1fff2e90:	d9ee2004 	ld.w      	r15, (r14, 0x10)
1fff2e94:	98e3      	ld.w      	r7, (r14, 0xc)
1fff2e96:	98c2      	ld.w      	r6, (r14, 0x8)
1fff2e98:	98a1      	ld.w      	r5, (r14, 0x4)
1fff2e9a:	9880      	ld.w      	r4, (r14, 0x0)
1fff2e9c:	1406      	addi      	r14, r14, 24
1fff2e9e:	783c      	jmp      	r15
    NULL_PARA_CHK(timer);
1fff2ea0:	3006      	movi      	r0, 6
1fff2ea2:	07f6      	br      	0x1fff2e8e	// 1fff2e8e <krhino_timer_create+0x6c>
        return RHINO_INV_PARAM;
1fff2ea4:	3005      	movi      	r0, 5
1fff2ea6:	07f4      	br      	0x1fff2e8e	// 1fff2e8e <krhino_timer_create+0x6c>
    kstat_t err = RHINO_SUCCESS;
1fff2ea8:	3000      	movi      	r0, 0
    return timer_create(timer, name, cb, first, round, arg, auto_run, K_OBJ_STATIC_ALLOC);
1fff2eaa:	07f2      	br      	0x1fff2e8e	// 1fff2e8e <krhino_timer_create+0x6c>

1fff2eac <krhino_timer_stop>:
{
1fff2eac:	14d0      	push      	r15
1fff2eae:	1426      	subi      	r14, r14, 24
    NULL_PARA_CHK(timer);
1fff2eb0:	3840      	cmpnei      	r0, 0
1fff2eb2:	0c0c      	bf      	0x1fff2eca	// 1fff2eca <krhino_timer_stop+0x1e>
    cb.timer  = timer;
1fff2eb4:	b800      	st.w      	r0, (r14, 0x0)
    cb.cb_num = TIMER_CMD_STOP;
1fff2eb6:	3302      	movi      	r3, 2
    return krhino_buf_queue_send(&g_timer_queue, &cb, sizeof(k_timer_queue_cb));
1fff2eb8:	3218      	movi      	r2, 24
1fff2eba:	6c7b      	mov      	r1, r14
1fff2ebc:	1005      	lrw      	r0, 0x1fffd728	// 1fff2ed0 <krhino_timer_stop+0x24>
    cb.cb_num = TIMER_CMD_STOP;
1fff2ebe:	dc6e0004 	st.b      	r3, (r14, 0x4)
    return krhino_buf_queue_send(&g_timer_queue, &cb, sizeof(k_timer_queue_cb));
1fff2ec2:	e3fffb9c 	bsr      	0x1fff25fa	// 1fff25fa <krhino_buf_queue_send>
}
1fff2ec6:	1406      	addi      	r14, r14, 24
1fff2ec8:	1490      	pop      	r15
    NULL_PARA_CHK(timer);
1fff2eca:	3006      	movi      	r0, 6
1fff2ecc:	07fd      	br      	0x1fff2ec6	// 1fff2ec6 <krhino_timer_stop+0x1a>
1fff2ece:	0000      	bkpt
1fff2ed0:	1fffd728 	.long	0x1fffd728

1fff2ed4 <krhino_timer_change>:
{
1fff2ed4:	1421      	subi      	r14, r14, 4
1fff2ed6:	14d1      	push      	r4, r15
1fff2ed8:	1426      	subi      	r14, r14, 24
    NULL_PARA_CHK(timer);
1fff2eda:	3840      	cmpnei      	r0, 0
{
1fff2edc:	b868      	st.w      	r3, (r14, 0x20)
1fff2ede:	9889      	ld.w      	r4, (r14, 0x24)
    NULL_PARA_CHK(timer);
1fff2ee0:	0c1c      	bf      	0x1fff2f18	// 1fff2f18 <krhino_timer_change+0x44>
    if (first == 0u) {
1fff2ee2:	3a20      	cmplti      	r2, 1
1fff2ee4:	0c05      	bf      	0x1fff2eee	// 1fff2eee <krhino_timer_change+0x1a>
1fff2ee6:	3a40      	cmpnei      	r2, 0
1fff2ee8:	081a      	bt      	0x1fff2f1c	// 1fff2f1c <krhino_timer_change+0x48>
1fff2eea:	3940      	cmpnei      	r1, 0
1fff2eec:	0c18      	bf      	0x1fff2f1c	// 1fff2f1c <krhino_timer_change+0x48>
    if (round > MAX_TIMER_TICKS) {
1fff2eee:	3cdf      	btsti      	r4, 31
1fff2ef0:	0816      	bt      	0x1fff2f1c	// 1fff2f1c <krhino_timer_change+0x48>
    cb.timer   = timer;
1fff2ef2:	b800      	st.w      	r0, (r14, 0x0)
    cb.first   = first;
1fff2ef4:	b822      	st.w      	r1, (r14, 0x8)
1fff2ef6:	b843      	st.w      	r2, (r14, 0xc)
    cb.u.round = round;
1fff2ef8:	b864      	st.w      	r3, (r14, 0x10)
    return krhino_buf_queue_send(&g_timer_queue, &cb, sizeof(k_timer_queue_cb));
1fff2efa:	3218      	movi      	r2, 24
    cb.cb_num  = TIMER_CMD_CHG;
1fff2efc:	3303      	movi      	r3, 3
    return krhino_buf_queue_send(&g_timer_queue, &cb, sizeof(k_timer_queue_cb));
1fff2efe:	6c7b      	mov      	r1, r14
1fff2f00:	1008      	lrw      	r0, 0x1fffd728	// 1fff2f20 <krhino_timer_change+0x4c>
    cb.u.round = round;
1fff2f02:	b885      	st.w      	r4, (r14, 0x14)
    cb.cb_num  = TIMER_CMD_CHG;
1fff2f04:	dc6e0004 	st.b      	r3, (r14, 0x4)
    return krhino_buf_queue_send(&g_timer_queue, &cb, sizeof(k_timer_queue_cb));
1fff2f08:	e3fffb79 	bsr      	0x1fff25fa	// 1fff25fa <krhino_buf_queue_send>
}
1fff2f0c:	1406      	addi      	r14, r14, 24
1fff2f0e:	d9ee2001 	ld.w      	r15, (r14, 0x4)
1fff2f12:	9880      	ld.w      	r4, (r14, 0x0)
1fff2f14:	1403      	addi      	r14, r14, 12
1fff2f16:	783c      	jmp      	r15
    NULL_PARA_CHK(timer);
1fff2f18:	3006      	movi      	r0, 6
1fff2f1a:	07f9      	br      	0x1fff2f0c	// 1fff2f0c <krhino_timer_change+0x38>
        return RHINO_INV_PARAM;
1fff2f1c:	3005      	movi      	r0, 5
1fff2f1e:	07f7      	br      	0x1fff2f0c	// 1fff2f0c <krhino_timer_change+0x38>
1fff2f20:	1fffd728 	.long	0x1fffd728

1fff2f24 <ktimer_init>:
        }
    }
}

void ktimer_init(void)
{
1fff2f24:	14d0      	push      	r15
1fff2f26:	1426      	subi      	r14, r14, 24
    list_head->next = list_head;
1fff2f28:	1070      	lrw      	r3, 0x1fffd9c0	// 1fff2f68 <ktimer_init+0x44>
    klist_init(&g_timer_head);

    krhino_fix_buf_queue_create(&g_timer_queue, "timer_queue", timer_queue_cb,
1fff2f2a:	1051      	lrw      	r2, 0x1fffd094	// 1fff2f6c <ktimer_init+0x48>
1fff2f2c:	1031      	lrw      	r1, 0x11012277	// 1fff2f70 <ktimer_init+0x4c>
1fff2f2e:	1012      	lrw      	r0, 0x1fffd728	// 1fff2f74 <ktimer_init+0x50>
    list_head->prev = list_head;
1fff2f30:	b361      	st.w      	r3, (r3, 0x4)
    list_head->next = list_head;
1fff2f32:	b360      	st.w      	r3, (r3, 0x0)
1fff2f34:	3314      	movi      	r3, 20
1fff2f36:	b860      	st.w      	r3, (r14, 0x0)
1fff2f38:	3318      	movi      	r3, 24
1fff2f3a:	e3fffb52 	bsr      	0x1fff25de	// 1fff25de <krhino_fix_buf_queue_create>
                                sizeof(k_timer_queue_cb), RHINO_CONFIG_TIMER_MSG_NUM);

    krhino_task_create(&g_timer_task, "timer_task", NULL,
1fff2f3e:	3301      	movi      	r3, 1
1fff2f40:	3200      	movi      	r2, 0
1fff2f42:	b865      	st.w      	r3, (r14, 0x14)
1fff2f44:	102d      	lrw      	r1, 0x11012283	// 1fff2f78 <ktimer_init+0x54>
1fff2f46:	106e      	lrw      	r3, 0x1fff2c50	// 1fff2f7c <ktimer_init+0x58>
1fff2f48:	100e      	lrw      	r0, 0x1fffd77c	// 1fff2f80 <ktimer_init+0x5c>
1fff2f4a:	b864      	st.w      	r3, (r14, 0x10)
1fff2f4c:	3380      	movi      	r3, 128
1fff2f4e:	4361      	lsli      	r3, r3, 1
1fff2f50:	b863      	st.w      	r3, (r14, 0xc)
1fff2f52:	106d      	lrw      	r3, 0x1fffd328	// 1fff2f84 <ktimer_init+0x60>
1fff2f54:	b862      	st.w      	r3, (r14, 0x8)
1fff2f56:	3300      	movi      	r3, 0
1fff2f58:	b840      	st.w      	r2, (r14, 0x0)
1fff2f5a:	b861      	st.w      	r3, (r14, 0x4)
1fff2f5c:	3305      	movi      	r3, 5
1fff2f5e:	e0003df5 	bsr      	0x1fffab48	// 1fffab48 <check_before_startup+0x470>
                       RHINO_CONFIG_TIMER_TASK_PRI, 0u, g_timer_task_stack,
                       RHINO_CONFIG_TIMER_TASK_STACK_SIZE, timer_task, 1u);
}
1fff2f62:	1406      	addi      	r14, r14, 24
1fff2f64:	1490      	pop      	r15
1fff2f66:	0000      	bkpt
1fff2f68:	1fffd9c0 	.long	0x1fffd9c0
1fff2f6c:	1fffd094 	.long	0x1fffd094
1fff2f70:	11012277 	.long	0x11012277
1fff2f74:	1fffd728 	.long	0x1fffd728
1fff2f78:	11012283 	.long	0x11012283
1fff2f7c:	1fff2c50 	.long	0x1fff2c50
1fff2f80:	1fffd77c 	.long	0x1fffd77c
1fff2f84:	1fffd328 	.long	0x1fffd328

1fff2f88 <size_to_level>:
    if (x == 0) {
1fff2f88:	3840      	cmpnei      	r0, 0
1fff2f8a:	0c26      	bf      	0x1fff2fd6	// 1fff2fd6 <size_to_level+0x4e>
    if ((x & 0XFFFF0000) == 0) {
1fff2f8c:	4870      	lsri      	r3, r0, 16
1fff2f8e:	3b40      	cmpnei      	r3, 0
1fff2f90:	0821      	bt      	0x1fff2fd2	// 1fff2fd2 <size_to_level+0x4a>
        x <<= 16;
1fff2f92:	4010      	lsli      	r0, r0, 16
        n += 16;
1fff2f94:	3310      	movi      	r3, 16
    if ((x & 0XFF000000) == 0) {
1fff2f96:	4858      	lsri      	r2, r0, 24
1fff2f98:	3a40      	cmpnei      	r2, 0
1fff2f9a:	0804      	bt      	0x1fff2fa2	// 1fff2fa2 <size_to_level+0x1a>
        n += 8;
1fff2f9c:	2307      	addi      	r3, 8
        x <<= 8;
1fff2f9e:	4008      	lsli      	r0, r0, 8
        n += 8;
1fff2fa0:	74cc      	zextb      	r3, r3
    if ((x & 0XF0000000) == 0) {
1fff2fa2:	485c      	lsri      	r2, r0, 28
1fff2fa4:	3a40      	cmpnei      	r2, 0
1fff2fa6:	0804      	bt      	0x1fff2fae	// 1fff2fae <size_to_level+0x26>
        n += 4;
1fff2fa8:	2303      	addi      	r3, 4
        x <<= 4;
1fff2faa:	4004      	lsli      	r0, r0, 4
        n += 4;
1fff2fac:	74cc      	zextb      	r3, r3
    if ((x & 0XC0000000) == 0) {
1fff2fae:	485e      	lsri      	r2, r0, 30
1fff2fb0:	3a40      	cmpnei      	r2, 0
1fff2fb2:	0804      	bt      	0x1fff2fba	// 1fff2fba <size_to_level+0x32>
        n += 2;
1fff2fb4:	2301      	addi      	r3, 2
        x <<= 2;
1fff2fb6:	4002      	lsli      	r0, r0, 2
        n += 2;
1fff2fb8:	74cc      	zextb      	r3, r3
    if ((x & 0X80000000) == 0) {
1fff2fba:	38df      	btsti      	r0, 31
1fff2fbc:	0803      	bt      	0x1fff2fc2	// 1fff2fc2 <size_to_level+0x3a>
        n += 1;
1fff2fbe:	2300      	addi      	r3, 1
1fff2fc0:	74cc      	zextb      	r3, r3
}

/* 2^(N + MM_MIN_BIT) <= size < 2^(1 + N + MM_MIN_BIT) */
static int32_t size_to_level(size_t size)
{
    size_t cnt = 32 - krhino_clz32(size);
1fff2fc2:	3020      	movi      	r0, 32
1fff2fc4:	600e      	subu      	r0, r3

    if ( cnt < MM_MIN_BIT ) {
1fff2fc6:	3825      	cmplti      	r0, 6
1fff2fc8:	0809      	bt      	0x1fff2fda	// 1fff2fda <size_to_level+0x52>
        return 0;
    }

    if ( cnt > MM_MAX_BIT) {
1fff2fca:	3834      	cmplti      	r0, 21
1fff2fcc:	0c09      	bf      	0x1fff2fde	// 1fff2fde <size_to_level+0x56>
        return -1;
    }

    return cnt - MM_MIN_BIT;
1fff2fce:	2805      	subi      	r0, 6
}
1fff2fd0:	783c      	jmp      	r15
    uint8_t n = 0;
1fff2fd2:	3300      	movi      	r3, 0
1fff2fd4:	07e1      	br      	0x1fff2f96	// 1fff2f96 <size_to_level+0xe>
        return BITMAP_UNIT_SIZE;
1fff2fd6:	3320      	movi      	r3, 32
1fff2fd8:	07f5      	br      	0x1fff2fc2	// 1fff2fc2 <size_to_level+0x3a>
        return 0;
1fff2fda:	3000      	movi      	r0, 0
1fff2fdc:	07fa      	br      	0x1fff2fd0	// 1fff2fd0 <size_to_level+0x48>
        return -1;
1fff2fde:	3000      	movi      	r0, 0
1fff2fe0:	2800      	subi      	r0, 1
1fff2fe2:	07f7      	br      	0x1fff2fd0	// 1fff2fd0 <size_to_level+0x48>

1fff2fe4 <removesize>:
    }
}

static void removesize(k_mm_head *mmhead, size_t size)
{
    if (mmhead->used_size > size ) {
1fff2fe4:	9063      	ld.w      	r3, (r0, 0xc)
1fff2fe6:	64c4      	cmphs      	r1, r3
1fff2fe8:	0807      	bt      	0x1fff2ff6	// 1fff2ff6 <removesize+0x12>
        mmhead->used_size -= size;
1fff2fea:	60c6      	subu      	r3, r1
    } else {
        mmhead->used_size = 0;
1fff2fec:	b063      	st.w      	r3, (r0, 0xc)
    }
    mmhead->free_size += size;
1fff2fee:	9065      	ld.w      	r3, (r0, 0x14)
1fff2ff0:	604c      	addu      	r1, r3
1fff2ff2:	b025      	st.w      	r1, (r0, 0x14)
}
1fff2ff4:	783c      	jmp      	r15
        mmhead->used_size = 0;
1fff2ff6:	3300      	movi      	r3, 0
1fff2ff8:	07fa      	br      	0x1fff2fec	// 1fff2fec <removesize+0x8>

1fff2ffa <k_mm_freelist_insert>:
}
#endif

/* insert blk to freelist[level], and set freebitmap */
static void k_mm_freelist_insert(k_mm_head *mmhead, k_mm_list_t *blk)
{
1fff2ffa:	14d2      	push      	r4-r5, r15
1fff2ffc:	6d43      	mov      	r5, r0
    int32_t level;

    level = size_to_level(MM_GET_BUF_SIZE(blk));
1fff2ffe:	9101      	ld.w      	r0, (r1, 0x4)
1fff3000:	3300      	movi      	r3, 0
1fff3002:	2b07      	subi      	r3, 8
1fff3004:	680c      	and      	r0, r3
{
1fff3006:	6d07      	mov      	r4, r1
    level = size_to_level(MM_GET_BUF_SIZE(blk));
1fff3008:	e3ffffc0 	bsr      	0x1fff2f88	// 1fff2f88 <size_to_level>
    if ( level < 0 || level >= MM_BIT_LEVEL ) {
1fff300c:	380f      	cmphsi      	r0, 16
1fff300e:	0811      	bt      	0x1fff3030	// 1fff3030 <k_mm_freelist_insert+0x36>
        return;
    }

    blk->mbinfo.free_ptr.prev = NULL;
1fff3010:	3300      	movi      	r3, 0
1fff3012:	b462      	st.w      	r3, (r4, 0x8)
1fff3014:	4062      	lsli      	r3, r0, 2
1fff3016:	60d4      	addu      	r3, r5
    blk->mbinfo.free_ptr.next = mmhead->freelist[level];
1fff3018:	9357      	ld.w      	r2, (r3, 0x5c)
1fff301a:	b443      	st.w      	r2, (r4, 0xc)

    if (mmhead->freelist[level] != NULL) {
1fff301c:	9357      	ld.w      	r2, (r3, 0x5c)
1fff301e:	3a40      	cmpnei      	r2, 0
1fff3020:	0c02      	bf      	0x1fff3024	// 1fff3024 <k_mm_freelist_insert+0x2a>
        mmhead->freelist[level]->mbinfo.free_ptr.prev = blk;
1fff3022:	b282      	st.w      	r4, (r2, 0x8)
    }

    mmhead->freelist[level] = blk;
1fff3024:	b397      	st.w      	r4, (r3, 0x5c)

    /* freelist not null, so set the bit  */
    mmhead->free_bitmap |= (1 << level);
1fff3026:	3301      	movi      	r3, 1
1fff3028:	70c0      	lsl      	r3, r0
1fff302a:	9516      	ld.w      	r0, (r5, 0x58)
1fff302c:	6c0c      	or      	r0, r3
1fff302e:	b516      	st.w      	r0, (r5, 0x58)
}
1fff3030:	1492      	pop      	r4-r5, r15

1fff3032 <k_mm_freelist_delete>:

static void k_mm_freelist_delete(k_mm_head *mmhead, k_mm_list_t *blk)
{
1fff3032:	14d2      	push      	r4-r5, r15
1fff3034:	6d43      	mov      	r5, r0
    int32_t level;

    level = size_to_level(MM_GET_BUF_SIZE(blk));
1fff3036:	9101      	ld.w      	r0, (r1, 0x4)
1fff3038:	3300      	movi      	r3, 0
1fff303a:	2b07      	subi      	r3, 8
1fff303c:	680c      	and      	r0, r3
{
1fff303e:	6d07      	mov      	r4, r1
    level = size_to_level(MM_GET_BUF_SIZE(blk));
1fff3040:	e3ffffa4 	bsr      	0x1fff2f88	// 1fff2f88 <size_to_level>
    if ( level < 0 || level >= MM_BIT_LEVEL ) {
1fff3044:	380f      	cmphsi      	r0, 16
1fff3046:	081c      	bt      	0x1fff307e	// 1fff307e <k_mm_freelist_delete+0x4c>
        return;
    }

    if (blk->mbinfo.free_ptr.next != NULL) {
1fff3048:	9463      	ld.w      	r3, (r4, 0xc)
1fff304a:	3b40      	cmpnei      	r3, 0
1fff304c:	0c03      	bf      	0x1fff3052	// 1fff3052 <k_mm_freelist_delete+0x20>
        blk->mbinfo.free_ptr.next->mbinfo.free_ptr.prev = blk->mbinfo.free_ptr.prev;
1fff304e:	9442      	ld.w      	r2, (r4, 0x8)
1fff3050:	b342      	st.w      	r2, (r3, 0x8)
    }
    if (blk->mbinfo.free_ptr.prev != NULL) {
1fff3052:	9462      	ld.w      	r3, (r4, 0x8)
1fff3054:	3b40      	cmpnei      	r3, 0
1fff3056:	0c03      	bf      	0x1fff305c	// 1fff305c <k_mm_freelist_delete+0x2a>
        blk->mbinfo.free_ptr.prev->mbinfo.free_ptr.next = blk->mbinfo.free_ptr.next;
1fff3058:	9443      	ld.w      	r2, (r4, 0xc)
1fff305a:	b343      	st.w      	r2, (r3, 0xc)
1fff305c:	4042      	lsli      	r2, r0, 2
1fff305e:	6094      	addu      	r2, r5
    }

    if (mmhead->freelist[level] == blk) {
1fff3060:	9277      	ld.w      	r3, (r2, 0x5c)
1fff3062:	64d2      	cmpne      	r4, r3
1fff3064:	080a      	bt      	0x1fff3078	// 1fff3078 <k_mm_freelist_delete+0x46>
        /* first blk in this freelist */
        mmhead->freelist[level] = blk->mbinfo.free_ptr.next;
1fff3066:	9463      	ld.w      	r3, (r4, 0xc)
        if (mmhead->freelist[level] == NULL) {
1fff3068:	3b40      	cmpnei      	r3, 0
        mmhead->freelist[level] = blk->mbinfo.free_ptr.next;
1fff306a:	b277      	st.w      	r3, (r2, 0x5c)
        if (mmhead->freelist[level] == NULL) {
1fff306c:	0806      	bt      	0x1fff3078	// 1fff3078 <k_mm_freelist_delete+0x46>
            /* freelist null, so clear the bit  */
            mmhead->free_bitmap &= (~(1 << level));
1fff306e:	2b01      	subi      	r3, 2
1fff3070:	70c3      	rotl      	r3, r0
1fff3072:	9516      	ld.w      	r0, (r5, 0x58)
1fff3074:	68c0      	and      	r3, r0
1fff3076:	b576      	st.w      	r3, (r5, 0x58)
        }
    }

    blk->mbinfo.free_ptr.prev = NULL;
1fff3078:	3300      	movi      	r3, 0
1fff307a:	b462      	st.w      	r3, (r4, 0x8)
    blk->mbinfo.free_ptr.next = NULL;
1fff307c:	b463      	st.w      	r3, (r4, 0xc)
}
1fff307e:	1492      	pop      	r4-r5, r15

1fff3080 <k_mm_smallblk_free>:
{
1fff3080:	14d1      	push      	r4, r15
1fff3082:	6d03      	mov      	r4, r0
    if (!mmhead || !ptr) {
1fff3084:	3840      	cmpnei      	r0, 0
1fff3086:	0c12      	bf      	0x1fff30aa	// 1fff30aa <k_mm_smallblk_free+0x2a>
1fff3088:	3940      	cmpnei      	r1, 0
1fff308a:	0c10      	bf      	0x1fff30aa	// 1fff30aa <k_mm_smallblk_free+0x2a>
    sta = krhino_mblk_free((mblk_pool_t *)mmhead->fix_pool, ptr);
1fff308c:	9002      	ld.w      	r0, (r0, 0x8)
1fff308e:	e000029c 	bsr      	0x1fff35c6	// 1fff35c6 <krhino_mblk_free>
    if (sta != RHINO_SUCCESS) {
1fff3092:	3840      	cmpnei      	r0, 0
1fff3094:	0c07      	bf      	0x1fff30a2	// 1fff30a2 <k_mm_smallblk_free+0x22>
        k_err_proc(RHINO_SYS_FATAL_ERR);
1fff3096:	32a1      	movi      	r2, 161
1fff3098:	4241      	lsli      	r2, r2, 1
1fff309a:	1025      	lrw      	r1, 0x1101215c	// 1fff30ac <k_mm_smallblk_free+0x2c>
1fff309c:	3001      	movi      	r0, 1
1fff309e:	e3fff8c5 	bsr      	0x1fff2228	// 1fff2228 <k_err_proc_debug>
    stats_removesize(mmhead, RHINO_CONFIG_MM_BLK_SIZE);
1fff30a2:	3140      	movi      	r1, 64
1fff30a4:	6c13      	mov      	r0, r4
1fff30a6:	e3ffff9f 	bsr      	0x1fff2fe4	// 1fff2fe4 <removesize>
}
1fff30aa:	1491      	pop      	r4, r15
1fff30ac:	1101215c 	.long	0x1101215c

1fff30b0 <addsize>:
{
1fff30b0:	14d1      	push      	r4, r15
1fff30b2:	6d03      	mov      	r4, r0
    if (mmhead->free_size > size) {
1fff30b4:	9065      	ld.w      	r3, (r0, 0x14)
1fff30b6:	64c4      	cmphs      	r1, r3
1fff30b8:	0819      	bt      	0x1fff30ea	// 1fff30ea <addsize+0x3a>
        mmhead->free_size -= size;
1fff30ba:	60c6      	subu      	r3, r1
        mmhead->free_size = 0;
1fff30bc:	b465      	st.w      	r3, (r4, 0x14)
    mmhead->used_size += size;
1fff30be:	9463      	ld.w      	r3, (r4, 0xc)
1fff30c0:	604c      	addu      	r1, r3
    if (mmhead->used_size > mmhead->maxused_size) {
1fff30c2:	9464      	ld.w      	r3, (r4, 0x10)
    mmhead->used_size += size;
1fff30c4:	b423      	st.w      	r1, (r4, 0xc)
    if (mmhead->used_size > mmhead->maxused_size) {
1fff30c6:	644c      	cmphs      	r3, r1
1fff30c8:	0802      	bt      	0x1fff30cc	// 1fff30cc <addsize+0x1c>
        mmhead->maxused_size = mmhead->used_size;
1fff30ca:	b424      	st.w      	r1, (r4, 0x10)
    if ( req_size > 0 ) {
1fff30cc:	3a40      	cmpnei      	r2, 0
1fff30ce:	0c0d      	bf      	0x1fff30e8	// 1fff30e8 <addsize+0x38>
        level = size_to_level(req_size);
1fff30d0:	6c0b      	mov      	r0, r2
1fff30d2:	e3ffff5b 	bsr      	0x1fff2f88	// 1fff2f88 <size_to_level>
        if (level != -1) {
1fff30d6:	3300      	movi      	r3, 0
1fff30d8:	2b00      	subi      	r3, 1
1fff30da:	64c2      	cmpne      	r0, r3
1fff30dc:	0c06      	bf      	0x1fff30e8	// 1fff30e8 <addsize+0x38>
1fff30de:	4002      	lsli      	r0, r0, 2
1fff30e0:	6100      	addu      	r4, r0
            mmhead->alloc_times[level]++;
1fff30e2:	9466      	ld.w      	r3, (r4, 0x18)
1fff30e4:	2300      	addi      	r3, 1
1fff30e6:	b466      	st.w      	r3, (r4, 0x18)
}
1fff30e8:	1491      	pop      	r4, r15
        mmhead->free_size = 0;
1fff30ea:	3300      	movi      	r3, 0
1fff30ec:	07e8      	br      	0x1fff30bc	// 1fff30bc <addsize+0xc>

1fff30ee <k_mm_alloc>:

    return NULL;
}

void *k_mm_alloc(k_mm_head *mmhead, size_t size)
{
1fff30ee:	14d4      	push      	r4-r7, r15
1fff30f0:	1423      	subi      	r14, r14, 12
1fff30f2:	6d03      	mov      	r4, r0
    cpu_cpsr_t flags_cpsr;
    (void)flags_cpsr;

    (void)req_size;

    if (!mmhead) {
1fff30f4:	3840      	cmpnei      	r0, 0
{
1fff30f6:	6d47      	mov      	r5, r1
    if (!mmhead) {
1fff30f8:	0ca9      	bf      	0x1fff324a	// 1fff324a <k_mm_alloc+0x15c>
        return NULL;
    }

    if (size == 0) {
1fff30fa:	3940      	cmpnei      	r1, 0
1fff30fc:	0ca7      	bf      	0x1fff324a	// 1fff324a <k_mm_alloc+0x15c>
        return NULL;
    }

    MM_CRITICAL_ENTER(mmhead, flags_cpsr);
1fff30fe:	e0000279 	bsr      	0x1fff35f0	// 1fff35f0 <cpu_intrpt_save>
1fff3102:	b800      	st.w      	r0, (r14, 0x0)

#if (RHINO_CONFIG_MM_BLK > 0)
    /* little blk, try to get from mm_pool */
    if (mmhead->fix_pool != NULL) {
1fff3104:	9402      	ld.w      	r0, (r4, 0x8)
1fff3106:	3840      	cmpnei      	r0, 0
1fff3108:	0c1a      	bf      	0x1fff313c	// 1fff313c <k_mm_alloc+0x4e>
        mm_pool = (mblk_pool_t *)mmhead->fix_pool;
        if (size <= RHINO_CONFIG_MM_BLK_SIZE && mm_pool->blk_avail > 0) {
1fff310a:	eb050040 	cmphsi      	r5, 65
1fff310e:	0817      	bt      	0x1fff313c	// 1fff313c <k_mm_alloc+0x4e>
1fff3110:	9064      	ld.w      	r3, (r0, 0x10)
1fff3112:	3b40      	cmpnei      	r3, 0
1fff3114:	0c14      	bf      	0x1fff313c	// 1fff313c <k_mm_alloc+0x4e>
    sta = krhino_mblk_alloc((mblk_pool_t *)mmhead->fix_pool, &tmp);
1fff3116:	1902      	addi      	r1, r14, 8
1fff3118:	e0000239 	bsr      	0x1fff358a	// 1fff358a <krhino_mblk_alloc>
    if (sta != RHINO_SUCCESS) {
1fff311c:	3840      	cmpnei      	r0, 0
1fff311e:	080f      	bt      	0x1fff313c	// 1fff313c <k_mm_alloc+0x4e>
    stats_addsize(mmhead, RHINO_CONFIG_MM_BLK_SIZE, 0);
1fff3120:	3200      	movi      	r2, 0
1fff3122:	3140      	movi      	r1, 64
1fff3124:	6c13      	mov      	r0, r4
1fff3126:	e3ffffc5 	bsr      	0x1fff30b0	// 1fff30b0 <addsize>
    return tmp;
1fff312a:	98e2      	ld.w      	r7, (r14, 0x8)
            retptr =  k_mm_smallblk_alloc(mmhead, size);
            if (retptr) {
1fff312c:	3f40      	cmpnei      	r7, 0
1fff312e:	0c07      	bf      	0x1fff313c	// 1fff313c <k_mm_alloc+0x4e>
        stats_addsize(mmhead, MM_GET_BLK_SIZE(get_b), req_size);
    }

ALLOCEXIT:

    MM_CRITICAL_EXIT(mmhead, flags_cpsr);
1fff3130:	9800      	ld.w      	r0, (r14, 0x0)
1fff3132:	e0000264 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>

    return retptr ;
}
1fff3136:	6c1f      	mov      	r0, r7
1fff3138:	1403      	addi      	r14, r14, 12
1fff313a:	1494      	pop      	r4-r7, r15
    size = MM_ALIGN_UP(size);
1fff313c:	5d5a      	addi      	r2, r5, 7
1fff313e:	3300      	movi      	r3, 0
1fff3140:	2b07      	subi      	r3, 8
1fff3142:	688c      	and      	r2, r3
    size = size < MM_MIN_SIZE ? MM_MIN_SIZE : size;
1fff3144:	3320      	movi      	r3, 32
1fff3146:	3a1f      	cmphsi      	r2, 32
1fff3148:	c4620c40 	inct      	r3, r2, 0
    if ((level = size_to_level(size)) == -1) {
1fff314c:	6c0f      	mov      	r0, r3
    size = size < MM_MIN_SIZE ? MM_MIN_SIZE : size;
1fff314e:	6d8f      	mov      	r6, r3
    if ((level = size_to_level(size)) == -1) {
1fff3150:	e3ffff1c 	bsr      	0x1fff2f88	// 1fff2f88 <size_to_level>
1fff3154:	3300      	movi      	r3, 0
1fff3156:	2b00      	subi      	r3, 1
1fff3158:	64c2      	cmpne      	r0, r3
1fff315a:	0c76      	bf      	0x1fff3246	// 1fff3246 <k_mm_alloc+0x158>
    get_b = mmhead->freelist[level];
1fff315c:	e4600016 	addi      	r3, r0, 23
1fff3160:	4362      	lsli      	r3, r3, 2
1fff3162:	60d0      	addu      	r3, r4
1fff3164:	93e0      	ld.w      	r7, (r3, 0x0)
    while ( get_b != NULL ) {
1fff3166:	3f40      	cmpnei      	r7, 0
1fff3168:	0861      	bt      	0x1fff322a	// 1fff322a <k_mm_alloc+0x13c>
    bitmap = mmhead->free_bitmap & (0xfffffffful << (level + 1));
1fff316a:	2000      	addi      	r0, 1
1fff316c:	3300      	movi      	r3, 0
1fff316e:	9436      	ld.w      	r1, (r4, 0x58)
1fff3170:	2b00      	subi      	r3, 1
1fff3172:	70c0      	lsl      	r3, r0
1fff3174:	684c      	and      	r1, r3
    if (x == 0) {
1fff3176:	3940      	cmpnei      	r1, 0
1fff3178:	0c67      	bf      	0x1fff3246	// 1fff3246 <k_mm_alloc+0x158>
    if ((x & 0X0000FFFF) == 0) {
1fff317a:	74c5      	zexth      	r3, r1
1fff317c:	3b40      	cmpnei      	r3, 0
1fff317e:	085e      	bt      	0x1fff323a	// 1fff323a <k_mm_alloc+0x14c>
        x >>= 16;
1fff3180:	4930      	lsri      	r1, r1, 16
        n += 16;
1fff3182:	3310      	movi      	r3, 16
    if ((x & 0X000000FF) == 0) {
1fff3184:	7404      	zextb      	r0, r1
1fff3186:	3840      	cmpnei      	r0, 0
1fff3188:	0804      	bt      	0x1fff3190	// 1fff3190 <k_mm_alloc+0xa2>
        n += 8;
1fff318a:	2307      	addi      	r3, 8
        x >>= 8;
1fff318c:	4928      	lsri      	r1, r1, 8
        n += 8;
1fff318e:	74cc      	zextb      	r3, r3
    if ((x & 0X0000000F) == 0) {
1fff3190:	e401200f 	andi      	r0, r1, 15
1fff3194:	3840      	cmpnei      	r0, 0
1fff3196:	0804      	bt      	0x1fff319e	// 1fff319e <k_mm_alloc+0xb0>
        n += 4;
1fff3198:	2303      	addi      	r3, 4
        x >>= 4;
1fff319a:	4924      	lsri      	r1, r1, 4
        n += 4;
1fff319c:	74cc      	zextb      	r3, r3
    if ((x & 0X00000003) == 0) {
1fff319e:	e4012003 	andi      	r0, r1, 3
1fff31a2:	3840      	cmpnei      	r0, 0
1fff31a4:	0804      	bt      	0x1fff31ac	// 1fff31ac <k_mm_alloc+0xbe>
        n += 2;
1fff31a6:	5be6      	addi      	r7, r3, 2
        x >>= 2;
1fff31a8:	4922      	lsri      	r1, r1, 2
        n += 2;
1fff31aa:	74dc      	zextb      	r3, r7
    if ((x & 0X00000001) == 0) {
1fff31ac:	e4212001 	andi      	r1, r1, 1
1fff31b0:	3940      	cmpnei      	r1, 0
1fff31b2:	0803      	bt      	0x1fff31b8	// 1fff31b8 <k_mm_alloc+0xca>
        n += 1;
1fff31b4:	2300      	addi      	r3, 1
1fff31b6:	74cc      	zextb      	r3, r3
    if ( level < MM_BIT_LEVEL ) {
1fff31b8:	3b0f      	cmphsi      	r3, 16
1fff31ba:	0846      	bt      	0x1fff3246	// 1fff3246 <k_mm_alloc+0x158>
        return mmhead->freelist[level];
1fff31bc:	2316      	addi      	r3, 23
1fff31be:	4362      	lsli      	r3, r3, 2
1fff31c0:	60d0      	addu      	r3, r4
1fff31c2:	93e0      	ld.w      	r7, (r3, 0x0)
        if ( get_b == NULL ) {
1fff31c4:	3f40      	cmpnei      	r7, 0
1fff31c6:	0c40      	bf      	0x1fff3246	// 1fff3246 <k_mm_alloc+0x158>
    k_mm_freelist_delete(mmhead, get_b);
1fff31c8:	6c5f      	mov      	r1, r7
1fff31ca:	6c13      	mov      	r0, r4
1fff31cc:	e3ffff33 	bsr      	0x1fff3032	// 1fff3032 <k_mm_freelist_delete>
    next_b = MM_GET_NEXT_BLK(get_b);
1fff31d0:	5f7e      	addi      	r3, r7, 8
1fff31d2:	b861      	st.w      	r3, (r14, 0x4)
1fff31d4:	9761      	ld.w      	r3, (r7, 0x4)
1fff31d6:	3200      	movi      	r2, 0
1fff31d8:	2a07      	subi      	r2, 8
1fff31da:	688c      	and      	r2, r3
    if (MM_GET_BUF_SIZE(get_b) >= size + MMLIST_HEAD_SIZE + MM_MIN_SIZE) {
1fff31dc:	e4260027 	addi      	r1, r6, 40
1fff31e0:	6448      	cmphs      	r2, r1
    next_b = MM_GET_NEXT_BLK(get_b);
1fff31e2:	5f1e      	addi      	r0, r7, 8
1fff31e4:	6008      	addu      	r0, r2
    if (MM_GET_BUF_SIZE(get_b) >= size + MMLIST_HEAD_SIZE + MM_MIN_SIZE) {
1fff31e6:	0c2c      	bf      	0x1fff323e	// 1fff323e <k_mm_alloc+0x150>
        get_b->buf_size = size | (get_b->buf_size & RHINO_MM_PRESTAT_MASK);
1fff31e8:	e4232002 	andi      	r1, r3, 2
1fff31ec:	6c58      	or      	r1, r6
1fff31ee:	b721      	st.w      	r1, (r7, 0x4)
        new_b = MM_GET_NEXT_BLK(get_b);
1fff31f0:	3300      	movi      	r3, 0
1fff31f2:	2b07      	subi      	r3, 8
1fff31f4:	684c      	and      	r1, r3
1fff31f6:	5f7e      	addi      	r3, r7, 8
1fff31f8:	604c      	addu      	r1, r3
        left_size = MM_GET_BUF_SIZE(get_b) - size - MMLIST_HEAD_SIZE;
1fff31fa:	5a79      	subu      	r3, r2, r6
1fff31fc:	2b07      	subi      	r3, 8
        new_b->buf_size = left_size | RHINO_MM_FREE | RHINO_MM_PREVALLOCED;
1fff31fe:	ec630001 	ori      	r3, r3, 1
        new_b->prev = get_b;
1fff3202:	b1e0      	st.w      	r7, (r1, 0x0)
        new_b->buf_size = left_size | RHINO_MM_FREE | RHINO_MM_PREVALLOCED;
1fff3204:	b161      	st.w      	r3, (r1, 0x4)
        next_b->prev = new_b;
1fff3206:	b020      	st.w      	r1, (r0, 0x0)
        k_mm_freelist_insert(mmhead, new_b);
1fff3208:	6c13      	mov      	r0, r4
1fff320a:	e3fffef8 	bsr      	0x1fff2ffa	// 1fff2ffa <k_mm_freelist_insert>
    get_b->buf_size &= (~RHINO_MM_FREE);       /* Now it's used */
1fff320e:	9721      	ld.w      	r1, (r7, 0x4)
1fff3210:	c4012823 	bclri      	r3, r1, 0
        stats_addsize(mmhead, MM_GET_BLK_SIZE(get_b), req_size);
1fff3214:	6c97      	mov      	r2, r5
    get_b->buf_size &= (~RHINO_MM_FREE);       /* Now it's used */
1fff3216:	b761      	st.w      	r3, (r7, 0x4)
        stats_addsize(mmhead, MM_GET_BLK_SIZE(get_b), req_size);
1fff3218:	6c13      	mov      	r0, r4
1fff321a:	3300      	movi      	r3, 0
1fff321c:	2b07      	subi      	r3, 8
1fff321e:	684c      	and      	r1, r3
1fff3220:	2107      	addi      	r1, 8
1fff3222:	e3ffff47 	bsr      	0x1fff30b0	// 1fff30b0 <addsize>
1fff3226:	98e1      	ld.w      	r7, (r14, 0x4)
1fff3228:	0784      	br      	0x1fff3130	// 1fff3130 <k_mm_alloc+0x42>
        if ( MM_GET_BUF_SIZE(get_b) >= size ) {
1fff322a:	9761      	ld.w      	r3, (r7, 0x4)
1fff322c:	3200      	movi      	r2, 0
1fff322e:	2a07      	subi      	r2, 8
1fff3230:	68c8      	and      	r3, r2
1fff3232:	658c      	cmphs      	r3, r6
1fff3234:	0bca      	bt      	0x1fff31c8	// 1fff31c8 <k_mm_alloc+0xda>
        get_b = get_b->mbinfo.free_ptr.next;
1fff3236:	97e3      	ld.w      	r7, (r7, 0xc)
1fff3238:	0797      	br      	0x1fff3166	// 1fff3166 <k_mm_alloc+0x78>
    uint8_t n = 0;
1fff323a:	3300      	movi      	r3, 0
1fff323c:	07a4      	br      	0x1fff3184	// 1fff3184 <k_mm_alloc+0x96>
        next_b->buf_size &= (~RHINO_MM_PREVFREE);
1fff323e:	9061      	ld.w      	r3, (r0, 0x4)
1fff3240:	3b81      	bclri      	r3, 1
1fff3242:	b061      	st.w      	r3, (r0, 0x4)
1fff3244:	07e5      	br      	0x1fff320e	// 1fff320e <k_mm_alloc+0x120>
    retptr = NULL;
1fff3246:	3700      	movi      	r7, 0
1fff3248:	0774      	br      	0x1fff3130	// 1fff3130 <k_mm_alloc+0x42>
        return NULL;
1fff324a:	3700      	movi      	r7, 0
1fff324c:	0775      	br      	0x1fff3136	// 1fff3136 <k_mm_alloc+0x48>

1fff324e <k_mm_free>:

void  k_mm_free(k_mm_head *mmhead, void *ptr)
{
1fff324e:	14d4      	push      	r4-r7, r15
1fff3250:	1421      	subi      	r14, r14, 4
1fff3252:	6d43      	mov      	r5, r0
    k_mm_list_t *free_b, *next_b, *prev_b;
    cpu_cpsr_t flags_cpsr;
    (void)flags_cpsr;

    if (!ptr || !mmhead) {
1fff3254:	3940      	cmpnei      	r1, 0
{
1fff3256:	6dc7      	mov      	r7, r1
    if (!ptr || !mmhead) {
1fff3258:	0c16      	bf      	0x1fff3284	// 1fff3284 <k_mm_free+0x36>
1fff325a:	3840      	cmpnei      	r0, 0
1fff325c:	0c14      	bf      	0x1fff3284	// 1fff3284 <k_mm_free+0x36>
        return;
    }

    MM_CRITICAL_ENTER(mmhead, flags_cpsr);
1fff325e:	e00001c9 	bsr      	0x1fff35f0	// 1fff35f0 <cpu_intrpt_save>

#if (RHINO_CONFIG_MM_BLK > 0)
    /* fix blk, free to mm_pool */
    if (krhino_mblk_check(mmhead->fix_pool, ptr)) {
1fff3262:	9562      	ld.w      	r3, (r5, 0x8)
    MM_CRITICAL_ENTER(mmhead, flags_cpsr);
1fff3264:	6d83      	mov      	r6, r0
    if (krhino_mblk_check(mmhead->fix_pool, ptr)) {
1fff3266:	3b40      	cmpnei      	r3, 0
1fff3268:	0c10      	bf      	0x1fff3288	// 1fff3288 <k_mm_free+0x3a>
1fff326a:	9342      	ld.w      	r2, (r3, 0x8)
1fff326c:	649c      	cmphs      	r7, r2
1fff326e:	0c0d      	bf      	0x1fff3288	// 1fff3288 <k_mm_free+0x3a>
1fff3270:	9361      	ld.w      	r3, (r3, 0x4)
1fff3272:	64dc      	cmphs      	r7, r3
1fff3274:	080a      	bt      	0x1fff3288	// 1fff3288 <k_mm_free+0x3a>
        /*it's fixed size memory block*/
        k_mm_smallblk_free(mmhead, ptr);
1fff3276:	6c5f      	mov      	r1, r7
1fff3278:	6c17      	mov      	r0, r5
1fff327a:	e3ffff03 	bsr      	0x1fff3080	// 1fff3080 <k_mm_smallblk_free>
    }
#endif
    next_b->prev = free_b;
    next_b->buf_size |= RHINO_MM_PREVFREE;

    MM_CRITICAL_EXIT(mmhead, flags_cpsr);
1fff327e:	6c1b      	mov      	r0, r6
1fff3280:	e00001bd 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
}
1fff3284:	1401      	addi      	r14, r14, 4
1fff3286:	1494      	pop      	r4-r7, r15
    free_b = MM_GET_THIS_BLK(ptr);
1fff3288:	5f9f      	subi      	r4, r7, 8
    free_b->buf_size |= RHINO_MM_FREE;
1fff328a:	3201      	movi      	r2, 1
1fff328c:	9461      	ld.w      	r3, (r4, 0x4)
1fff328e:	6cc8      	or      	r3, r2
1fff3290:	b461      	st.w      	r3, (r4, 0x4)
    stats_removesize(mmhead, MM_GET_BLK_SIZE(free_b));
1fff3292:	6c17      	mov      	r0, r5
    free_b->buf_size |= RHINO_MM_FREE;
1fff3294:	b840      	st.w      	r2, (r14, 0x0)
    stats_removesize(mmhead, MM_GET_BLK_SIZE(free_b));
1fff3296:	3200      	movi      	r2, 0
1fff3298:	2a07      	subi      	r2, 8
1fff329a:	c4432021 	and      	r1, r3, r2
1fff329e:	2107      	addi      	r1, 8
1fff32a0:	e3fffea2 	bsr      	0x1fff2fe4	// 1fff2fe4 <removesize>
    next_b = MM_GET_NEXT_BLK(free_b);
1fff32a4:	9461      	ld.w      	r3, (r4, 0x4)
1fff32a6:	3200      	movi      	r2, 0
1fff32a8:	2a07      	subi      	r2, 8
1fff32aa:	68c8      	and      	r3, r2
1fff32ac:	61cc      	addu      	r7, r3
    if (next_b->buf_size & RHINO_MM_FREE) {
1fff32ae:	9761      	ld.w      	r3, (r7, 0x4)
1fff32b0:	9840      	ld.w      	r2, (r14, 0x0)
1fff32b2:	688c      	and      	r2, r3
1fff32b4:	3a40      	cmpnei      	r2, 0
1fff32b6:	0c0d      	bf      	0x1fff32d0	// 1fff32d0 <k_mm_free+0x82>
        k_mm_freelist_delete(mmhead, next_b);
1fff32b8:	6c5f      	mov      	r1, r7
1fff32ba:	6c17      	mov      	r0, r5
1fff32bc:	e3fffebb 	bsr      	0x1fff3032	// 1fff3032 <k_mm_freelist_delete>
        free_b->buf_size += MM_GET_BLK_SIZE(next_b);
1fff32c0:	9761      	ld.w      	r3, (r7, 0x4)
1fff32c2:	3200      	movi      	r2, 0
1fff32c4:	2a07      	subi      	r2, 8
1fff32c6:	68c8      	and      	r3, r2
1fff32c8:	9441      	ld.w      	r2, (r4, 0x4)
1fff32ca:	2207      	addi      	r2, 8
1fff32cc:	60c8      	addu      	r3, r2
1fff32ce:	b461      	st.w      	r3, (r4, 0x4)
    if (free_b->buf_size & RHINO_MM_PREVFREE) {
1fff32d0:	9461      	ld.w      	r3, (r4, 0x4)
1fff32d2:	e4632002 	andi      	r3, r3, 2
1fff32d6:	3b40      	cmpnei      	r3, 0
1fff32d8:	0c0f      	bf      	0x1fff32f6	// 1fff32f6 <k_mm_free+0xa8>
        prev_b = free_b->prev;
1fff32da:	94e0      	ld.w      	r7, (r4, 0x0)
        k_mm_freelist_delete(mmhead, prev_b);
1fff32dc:	6c5f      	mov      	r1, r7
1fff32de:	6c17      	mov      	r0, r5
1fff32e0:	e3fffea9 	bsr      	0x1fff3032	// 1fff3032 <k_mm_freelist_delete>
        prev_b->buf_size += MM_GET_BLK_SIZE(free_b);
1fff32e4:	9461      	ld.w      	r3, (r4, 0x4)
1fff32e6:	3200      	movi      	r2, 0
1fff32e8:	2a07      	subi      	r2, 8
1fff32ea:	68c8      	and      	r3, r2
1fff32ec:	9741      	ld.w      	r2, (r7, 0x4)
1fff32ee:	60c8      	addu      	r3, r2
1fff32f0:	2307      	addi      	r3, 8
1fff32f2:	b761      	st.w      	r3, (r7, 0x4)
1fff32f4:	6d1f      	mov      	r4, r7
    k_mm_freelist_insert(mmhead, free_b);
1fff32f6:	6c53      	mov      	r1, r4
1fff32f8:	6c17      	mov      	r0, r5
1fff32fa:	e3fffe80 	bsr      	0x1fff2ffa	// 1fff2ffa <k_mm_freelist_insert>
    next_b = MM_GET_NEXT_BLK(free_b);
1fff32fe:	9441      	ld.w      	r2, (r4, 0x4)
1fff3300:	5c7e      	addi      	r3, r4, 8
1fff3302:	3100      	movi      	r1, 0
1fff3304:	2907      	subi      	r1, 8
1fff3306:	6884      	and      	r2, r1
1fff3308:	60c8      	addu      	r3, r2
    next_b->buf_size |= RHINO_MM_PREVFREE;
1fff330a:	9341      	ld.w      	r2, (r3, 0x4)
1fff330c:	ec420002 	ori      	r2, r2, 2
    next_b->prev = free_b;
1fff3310:	b380      	st.w      	r4, (r3, 0x0)
    next_b->buf_size |= RHINO_MM_PREVFREE;
1fff3312:	b341      	st.w      	r2, (r3, 0x4)
1fff3314:	07b5      	br      	0x1fff327e	// 1fff327e <k_mm_free+0x30>
	...

1fff3318 <krhino_init_mm_head>:
{
1fff3318:	14d4      	push      	r4-r7, r15
1fff331a:	1421      	subi      	r14, r14, 4
1fff331c:	6dc3      	mov      	r7, r0
    NULL_PARA_CHK(ppmmhead);
1fff331e:	3840      	cmpnei      	r0, 0
1fff3320:	0c6a      	bf      	0x1fff33f4	// 1fff33f4 <krhino_init_mm_head+0xdc>
    NULL_PARA_CHK(addr);
1fff3322:	3940      	cmpnei      	r1, 0
1fff3324:	0c68      	bf      	0x1fff33f4	// 1fff33f4 <krhino_init_mm_head+0xdc>
    len -= (size_t)addr - (size_t)orig_addr;
1fff3326:	5aa4      	addu      	r5, r2, r1
    addr = (void *) MM_ALIGN_UP((size_t)addr);
1fff3328:	599a      	addi      	r4, r1, 7
1fff332a:	3300      	movi      	r3, 0
1fff332c:	2b07      	subi      	r3, 8
1fff332e:	690c      	and      	r4, r3
    len -= (size_t)addr - (size_t)orig_addr;
1fff3330:	6152      	subu      	r5, r4
    len  = MM_ALIGN_DOWN(len);
1fff3332:	694c      	and      	r5, r3
    if ( len == 0
1fff3334:	1173      	lrw      	r3, 0xffa00	// 1fff3400 <krhino_init_mm_head+0xe8>
         || len > MM_MAX_SIZE) {
1fff3336:	e44515ff 	subi      	r2, r5, 1536
    if ( len == 0
1fff333a:	648c      	cmphs      	r3, r2
1fff333c:	0c5f      	bf      	0x1fff33fa	// 1fff33fa <krhino_init_mm_head+0xe2>
    memset(pmmhead, 0, sizeof(k_mm_head));
1fff333e:	329c      	movi      	r2, 156
1fff3340:	3100      	movi      	r1, 0
1fff3342:	6c13      	mov      	r0, r4
1fff3344:	e0003a2e 	bsr      	0x1fffa7a0	// 1fffa7a0 <check_before_startup+0xc8>
    firstblk->prev     = NULL;
1fff3348:	3200      	movi      	r2, 0
    firstblk = init_mm_region((void *)((size_t)addr + MM_ALIGN_UP(sizeof(k_mm_head))),
1fff334a:	e464009f 	addi      	r3, r4, 160
    firstblk->prev     = NULL;
1fff334e:	dc442028 	st.w      	r2, (r4, 0xa0)
    firstblk->buf_size = MM_ALIGN_UP(sizeof(k_mm_region_info_t))
1fff3352:	3208      	movi      	r2, 8
    midblk->buf_size = ((char *)lastblk - (char *)midblk->mbinfo.buffer)
1fff3354:	e42400af 	addi      	r1, r4, 176
    firstblk->buf_size = MM_ALIGN_UP(sizeof(k_mm_region_info_t))
1fff3358:	dc442029 	st.w      	r2, (r4, 0xa4)
    midblk->buf_size = ((char *)lastblk - (char *)midblk->mbinfo.buffer)
1fff335c:	591e      	addi      	r0, r1, 8
    lastblk = (k_mm_list_t *)((char *)regionaddr + len - MMLIST_HEAD_SIZE);
1fff335e:	e44510a7 	subi      	r2, r5, 168
1fff3362:	608c      	addu      	r2, r3
                       | RHINO_MM_ALLOCED | RHINO_MM_PREVALLOCED;
1fff3364:	5a01      	subu      	r0, r2, r0
    midblk->buf_size = ((char *)lastblk - (char *)midblk->mbinfo.buffer)
1fff3366:	dc04202d 	st.w      	r0, (r4, 0xb4)
    midblk->mbinfo.free_ptr.prev = midblk->mbinfo.free_ptr.next = 0;
1fff336a:	3000      	movi      	r0, 0
    pmmhead->regioninfo = (k_mm_region_info_t *)firstblk->mbinfo.buffer;
1fff336c:	5bde      	addi      	r6, r3, 8
    midblk->mbinfo.free_ptr.prev = midblk->mbinfo.free_ptr.next = 0;
1fff336e:	dc04202f 	st.w      	r0, (r4, 0xbc)
1fff3372:	dc04202e 	st.w      	r0, (r4, 0xb8)
    lastblk->prev = midblk;
1fff3376:	b220      	st.w      	r1, (r2, 0x0)
    lastblk->buf_size = 0 | RHINO_MM_ALLOCED | RHINO_MM_PREVFREE;
1fff3378:	3102      	movi      	r1, 2
    k_mm_free(pmmhead, nextblk->mbinfo.buffer);
1fff337a:	6c13      	mov      	r0, r4
    lastblk->buf_size = 0 | RHINO_MM_ALLOCED | RHINO_MM_PREVFREE;
1fff337c:	b221      	st.w      	r1, (r2, 0x4)
    region->next = 0;
1fff337e:	3100      	movi      	r1, 0
    region->end  = lastblk;
1fff3380:	dc44202a 	st.w      	r2, (r4, 0xa8)
    region->next = 0;
1fff3384:	dc24202b 	st.w      	r1, (r4, 0xac)
    pmmhead->regioninfo = (k_mm_region_info_t *)firstblk->mbinfo.buffer;
1fff3388:	b4c1      	st.w      	r6, (r4, 0x4)
    nextblk = MM_GET_NEXT_BLK(firstblk);
1fff338a:	d8642029 	ld.w      	r3, (r4, 0xa4)
    *ppmmhead = pmmhead;
1fff338e:	b780      	st.w      	r4, (r7, 0x0)
    nextblk = MM_GET_NEXT_BLK(firstblk);
1fff3390:	3200      	movi      	r2, 0
1fff3392:	2a07      	subi      	r2, 8
1fff3394:	68c8      	and      	r3, r2
1fff3396:	618c      	addu      	r6, r3
    k_mm_free(pmmhead, nextblk->mbinfo.buffer);
1fff3398:	5e3e      	addi      	r1, r6, 8
1fff339a:	e3ffff5a 	bsr      	0x1fff324e	// 1fff324e <k_mm_free>
    pmmhead->free_size    = MM_GET_BUF_SIZE(nextblk);
1fff339e:	9661      	ld.w      	r3, (r6, 0x4)
1fff33a0:	3200      	movi      	r2, 0
1fff33a2:	2a07      	subi      	r2, 8
1fff33a4:	68c8      	and      	r3, r2
1fff33a6:	b465      	st.w      	r3, (r4, 0x14)
    mmblk_pool = k_mm_alloc(pmmhead, RHINO_CONFIG_MM_TLF_BLK_SIZE + MM_ALIGN_UP(sizeof(mblk_pool_t)));
1fff33a8:	3188      	movi      	r1, 136
    pmmhead->used_size    = len - MM_GET_BUF_SIZE(nextblk);
1fff33aa:	9661      	ld.w      	r3, (r6, 0x4)
1fff33ac:	68c8      	and      	r3, r2
1fff33ae:	614e      	subu      	r5, r3
1fff33b0:	b4a3      	st.w      	r5, (r4, 0xc)
    pmmhead->maxused_size = pmmhead->used_size;
1fff33b2:	b4a4      	st.w      	r5, (r4, 0x10)
    mmblk_pool = k_mm_alloc(pmmhead, RHINO_CONFIG_MM_TLF_BLK_SIZE + MM_ALIGN_UP(sizeof(mblk_pool_t)));
1fff33b4:	4122      	lsli      	r1, r1, 2
1fff33b6:	6c13      	mov      	r0, r4
1fff33b8:	e3fffe9b 	bsr      	0x1fff30ee	// 1fff30ee <k_mm_alloc>
1fff33bc:	6d43      	mov      	r5, r0
    if (mmblk_pool) {
1fff33be:	3840      	cmpnei      	r0, 0
1fff33c0:	0c13      	bf      	0x1fff33e6	// 1fff33e6 <krhino_init_mm_head+0xce>
        stat = krhino_mblk_pool_init(mmblk_pool, "fixed_mm_blk",
1fff33c2:	3680      	movi      	r6, 128
1fff33c4:	46c2      	lsli      	r6, r6, 2
1fff33c6:	b8c0      	st.w      	r6, (r14, 0x0)
1fff33c8:	3340      	movi      	r3, 64
1fff33ca:	102f      	lrw      	r1, 0x1101217a	// 1fff3404 <krhino_init_mm_head+0xec>
                                     (void *)((size_t)mmblk_pool + MM_ALIGN_UP(sizeof(mblk_pool_t))),
1fff33cc:	e440001f 	addi      	r2, r0, 32
        stat = krhino_mblk_pool_init(mmblk_pool, "fixed_mm_blk",
1fff33d0:	e00000a4 	bsr      	0x1fff3518	// 1fff3518 <krhino_mblk_pool_init>
        if (stat == RHINO_SUCCESS) {
1fff33d4:	3840      	cmpnei      	r0, 0
1fff33d6:	080a      	bt      	0x1fff33ea	// 1fff33ea <krhino_init_mm_head+0xd2>
            pmmhead->fix_pool = mmblk_pool;
1fff33d8:	b4a2      	st.w      	r5, (r4, 0x8)
            stats_removesize(pmmhead, RHINO_CONFIG_MM_TLF_BLK_SIZE);
1fff33da:	6c5b      	mov      	r1, r6
1fff33dc:	6c13      	mov      	r0, r4
1fff33de:	e3fffe03 	bsr      	0x1fff2fe4	// 1fff2fe4 <removesize>
        pmmhead->maxused_size = pmmhead->used_size;
1fff33e2:	9463      	ld.w      	r3, (r4, 0xc)
1fff33e4:	b464      	st.w      	r3, (r4, 0x10)
    return RHINO_SUCCESS;
1fff33e6:	3000      	movi      	r0, 0
1fff33e8:	0407      	br      	0x1fff33f6	// 1fff33f6 <krhino_init_mm_head+0xde>
            k_mm_free(pmmhead, mmblk_pool);
1fff33ea:	6c57      	mov      	r1, r5
1fff33ec:	6c13      	mov      	r0, r4
1fff33ee:	e3ffff30 	bsr      	0x1fff324e	// 1fff324e <k_mm_free>
1fff33f2:	07f8      	br      	0x1fff33e2	// 1fff33e2 <krhino_init_mm_head+0xca>
    NULL_PARA_CHK(ppmmhead);
1fff33f4:	3006      	movi      	r0, 6
}
1fff33f6:	1401      	addi      	r14, r14, 4
1fff33f8:	1494      	pop      	r4-r7, r15
        return RHINO_MM_POOL_SIZE_ERR;
1fff33fa:	3064      	movi      	r0, 100
1fff33fc:	07fd      	br      	0x1fff33f6	// 1fff33f6 <krhino_init_mm_head+0xde>
1fff33fe:	0000      	bkpt
1fff3400:	000ffa00 	.long	0x000ffa00
1fff3404:	1101217a 	.long	0x1101217a

1fff3408 <krhino_add_mm_region>:
{
1fff3408:	14d3      	push      	r4-r6, r15
1fff340a:	6d83      	mov      	r6, r0
    NULL_PARA_CHK(mmhead);
1fff340c:	3840      	cmpnei      	r0, 0
1fff340e:	0c42      	bf      	0x1fff3492	// 1fff3492 <krhino_add_mm_region+0x8a>
    NULL_PARA_CHK(addr);
1fff3410:	3940      	cmpnei      	r1, 0
1fff3412:	0c40      	bf      	0x1fff3492	// 1fff3492 <krhino_add_mm_region+0x8a>
    addr = (void *) MM_ALIGN_UP((size_t)addr);
1fff3414:	59ba      	addi      	r5, r1, 7
1fff3416:	3300      	movi      	r3, 0
    len -= (size_t)addr - (size_t)orig_addr;
1fff3418:	6084      	addu      	r2, r1
    addr = (void *) MM_ALIGN_UP((size_t)addr);
1fff341a:	2b07      	subi      	r3, 8
1fff341c:	694c      	and      	r5, r3
    len -= (size_t)addr - (size_t)orig_addr;
1fff341e:	6096      	subu      	r2, r5
    len  = MM_ALIGN_DOWN(len);
1fff3420:	c4622024 	and      	r4, r2, r3
    if ( !len || len < sizeof(k_mm_region_info_t) + MMLIST_HEAD_SIZE * 3 + MM_MIN_SIZE) {
1fff3424:	eb04003f 	cmphsi      	r4, 64
1fff3428:	0c37      	bf      	0x1fff3496	// 1fff3496 <krhino_add_mm_region+0x8e>
    memset(addr, 0, len);
1fff342a:	6c93      	mov      	r2, r4
1fff342c:	3100      	movi      	r1, 0
1fff342e:	6c17      	mov      	r0, r5
1fff3430:	e00039b8 	bsr      	0x1fffa7a0	// 1fffa7a0 <check_before_startup+0xc8>
    MM_CRITICAL_ENTER(mmhead, flags_cpsr);
1fff3434:	e00000de 	bsr      	0x1fff35f0	// 1fff35f0 <cpu_intrpt_save>
    firstblk->prev     = NULL;
1fff3438:	3300      	movi      	r3, 0
    lastblk = (k_mm_list_t *)((char *)regionaddr + len - MMLIST_HEAD_SIZE);
1fff343a:	5c5f      	subi      	r2, r4, 8
    firstblk->prev     = NULL;
1fff343c:	b560      	st.w      	r3, (r5, 0x0)
    firstblk->buf_size = MM_ALIGN_UP(sizeof(k_mm_region_info_t))
1fff343e:	3308      	movi      	r3, 8
    lastblk = (k_mm_list_t *)((char *)regionaddr + len - MMLIST_HEAD_SIZE);
1fff3440:	6094      	addu      	r2, r5
    firstblk->buf_size = MM_ALIGN_UP(sizeof(k_mm_region_info_t))
1fff3442:	b561      	st.w      	r3, (r5, 0x4)
    midblk->buf_size = ((char *)lastblk - (char *)midblk->mbinfo.buffer)
1fff3444:	e465000f 	addi      	r3, r5, 16
1fff3448:	5b3e      	addi      	r1, r3, 8
                       | RHINO_MM_ALLOCED | RHINO_MM_PREVALLOCED;
1fff344a:	5a25      	subu      	r1, r2, r1
    midblk->buf_size = ((char *)lastblk - (char *)midblk->mbinfo.buffer)
1fff344c:	b525      	st.w      	r1, (r5, 0x14)
    midblk->mbinfo.free_ptr.prev = midblk->mbinfo.free_ptr.next = 0;
1fff344e:	3100      	movi      	r1, 0
1fff3450:	b527      	st.w      	r1, (r5, 0x1c)
1fff3452:	b526      	st.w      	r1, (r5, 0x18)
    lastblk->prev = midblk;
1fff3454:	b260      	st.w      	r3, (r2, 0x0)
    lastblk->buf_size = 0 | RHINO_MM_ALLOCED | RHINO_MM_PREVFREE;
1fff3456:	3302      	movi      	r3, 2
    mmhead->used_size += MM_GET_BLK_SIZE(nextblk);
1fff3458:	3100      	movi      	r1, 0
    lastblk->buf_size = 0 | RHINO_MM_ALLOCED | RHINO_MM_PREVFREE;
1fff345a:	b261      	st.w      	r3, (r2, 0x4)
    region->next = 0;
1fff345c:	3300      	movi      	r3, 0
    region->end  = lastblk;
1fff345e:	b542      	st.w      	r2, (r5, 0x8)
    region->next = 0;
1fff3460:	b563      	st.w      	r3, (r5, 0xc)
    nextblk  = MM_GET_NEXT_BLK(firstblk);
1fff3462:	9581      	ld.w      	r4, (r5, 0x4)
1fff3464:	3200      	movi      	r2, 0
1fff3466:	2a07      	subi      	r2, 8
1fff3468:	6908      	and      	r4, r2
    region->next       = mmhead->regioninfo;
1fff346a:	9641      	ld.w      	r2, (r6, 0x4)
    nextblk  = MM_GET_NEXT_BLK(firstblk);
1fff346c:	5d7e      	addi      	r3, r5, 8
    region->next       = mmhead->regioninfo;
1fff346e:	b543      	st.w      	r2, (r5, 0xc)
    mmhead->regioninfo = region;
1fff3470:	b661      	st.w      	r3, (r6, 0x4)
    nextblk  = MM_GET_NEXT_BLK(firstblk);
1fff3472:	610c      	addu      	r4, r3
    mmhead->used_size += MM_GET_BLK_SIZE(nextblk);
1fff3474:	9441      	ld.w      	r2, (r4, 0x4)
1fff3476:	9663      	ld.w      	r3, (r6, 0xc)
1fff3478:	2907      	subi      	r1, 8
1fff347a:	2307      	addi      	r3, 8
1fff347c:	6884      	and      	r2, r1
1fff347e:	60c8      	addu      	r3, r2
1fff3480:	b663      	st.w      	r3, (r6, 0xc)
    MM_CRITICAL_EXIT(mmhead, flags_cpsr);
1fff3482:	e00000bc 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
    k_mm_free(mmhead, nextblk->mbinfo.buffer);
1fff3486:	6c1b      	mov      	r0, r6
1fff3488:	5c3e      	addi      	r1, r4, 8
1fff348a:	e3fffee2 	bsr      	0x1fff324e	// 1fff324e <k_mm_free>
    return RHINO_SUCCESS;
1fff348e:	3000      	movi      	r0, 0
}
1fff3490:	1493      	pop      	r4-r6, r15
    NULL_PARA_CHK(mmhead);
1fff3492:	3006      	movi      	r0, 6
1fff3494:	07fe      	br      	0x1fff3490	// 1fff3490 <krhino_add_mm_region+0x88>
        return RHINO_MM_POOL_SIZE_ERR;
1fff3496:	3064      	movi      	r0, 100
1fff3498:	07fc      	br      	0x1fff3490	// 1fff3490 <krhino_add_mm_region+0x88>
	...

1fff349c <k_mm_init>:
{
1fff349c:	14d4      	push      	r4-r7, r15
    (void)krhino_init_mm_head(&g_kmm_head, g_mm_region[0].start, g_mm_region[0].len);
1fff349e:	108b      	lrw      	r4, 0x1fffa544	// 1fff34c8 <k_mm_init+0x2c>
1fff34a0:	100b      	lrw      	r0, 0x1fffd9bc	// 1fff34cc <k_mm_init+0x30>
    for (e = 1 ; e < g_region_num ; e++) {
1fff34a2:	3501      	movi      	r5, 1
    (void)krhino_init_mm_head(&g_kmm_head, g_mm_region[0].start, g_mm_region[0].len);
1fff34a4:	9441      	ld.w      	r2, (r4, 0x4)
1fff34a6:	9420      	ld.w      	r1, (r4, 0x0)
        krhino_add_mm_region(g_kmm_head, g_mm_region[e].start, g_mm_region[e].len);
1fff34a8:	10e9      	lrw      	r7, 0x1fffd9bc	// 1fff34cc <k_mm_init+0x30>
    (void)krhino_init_mm_head(&g_kmm_head, g_mm_region[0].start, g_mm_region[0].len);
1fff34aa:	e3ffff37 	bsr      	0x1fff3318	// 1fff3318 <krhino_init_mm_head>
    for (e = 1 ; e < g_region_num ; e++) {
1fff34ae:	10c9      	lrw      	r6, 0x1fffa54c	// 1fff34d0 <k_mm_init+0x34>
1fff34b0:	9660      	ld.w      	r3, (r6, 0x0)
1fff34b2:	2407      	addi      	r4, 8
1fff34b4:	64d4      	cmphs      	r5, r3
1fff34b6:	0c02      	bf      	0x1fff34ba	// 1fff34ba <k_mm_init+0x1e>
}
1fff34b8:	1494      	pop      	r4-r7, r15
        krhino_add_mm_region(g_kmm_head, g_mm_region[e].start, g_mm_region[e].len);
1fff34ba:	9441      	ld.w      	r2, (r4, 0x4)
1fff34bc:	9420      	ld.w      	r1, (r4, 0x0)
1fff34be:	9700      	ld.w      	r0, (r7, 0x0)
    for (e = 1 ; e < g_region_num ; e++) {
1fff34c0:	2500      	addi      	r5, 1
        krhino_add_mm_region(g_kmm_head, g_mm_region[e].start, g_mm_region[e].len);
1fff34c2:	e3ffffa3 	bsr      	0x1fff3408	// 1fff3408 <krhino_add_mm_region>
1fff34c6:	07f5      	br      	0x1fff34b0	// 1fff34b0 <k_mm_init+0x14>
1fff34c8:	1fffa544 	.long	0x1fffa544
1fff34cc:	1fffd9bc 	.long	0x1fffd9bc
1fff34d0:	1fffa54c 	.long	0x1fffa54c

1fff34d4 <krhino_mm_alloc>:
    MM_CRITICAL_EXIT(g_kmm_head, flags_cpsr);
}
#endif

void *krhino_mm_alloc(size_t size)
{
1fff34d4:	14d2      	push      	r4-r5, r15
1fff34d6:	6d43      	mov      	r5, r0
#if (RHINO_CONFIG_MM_DEBUG > 0u)
    uint32_t app_malloc = size & AOS_UNSIGNED_INT_MSB;
    size = size & (~AOS_UNSIGNED_INT_MSB);
#endif

    if (size == 0) {
1fff34d8:	3840      	cmpnei      	r0, 0
1fff34da:	0807      	bt      	0x1fff34e8	// 1fff34e8 <krhino_mm_alloc+0x14>
        printf("WARNING, malloc size = 0\r\n");
1fff34dc:	1008      	lrw      	r0, 0x11012187	// 1fff34fc <krhino_mm_alloc+0x28>
        return NULL;
1fff34de:	3400      	movi      	r4, 0
        printf("WARNING, malloc size = 0\r\n");
1fff34e0:	e0003c84 	bsr      	0x1fffade8	// 1fffade8 <check_before_startup+0x710>
        krhino_owner_return_addr(tmp);
    }
#endif

    return tmp;
}
1fff34e4:	6c13      	mov      	r0, r4
1fff34e6:	1492      	pop      	r4-r5, r15
    tmp = k_mm_alloc(g_kmm_head, size);
1fff34e8:	1066      	lrw      	r3, 0x1fffd9bc	// 1fff3500 <krhino_mm_alloc+0x2c>
1fff34ea:	6c57      	mov      	r1, r5
1fff34ec:	9300      	ld.w      	r0, (r3, 0x0)
1fff34ee:	e3fffe00 	bsr      	0x1fff30ee	// 1fff30ee <k_mm_alloc>
    krhino_mm_alloc_hook(tmp, size);
1fff34f2:	6c57      	mov      	r1, r5
    tmp = k_mm_alloc(g_kmm_head, size);
1fff34f4:	6d03      	mov      	r4, r0
    krhino_mm_alloc_hook(tmp, size);
1fff34f6:	e00000c2 	bsr      	0x1fff367a	// 1fff367a <krhino_mm_alloc_hook>
    return tmp;
1fff34fa:	07f5      	br      	0x1fff34e4	// 1fff34e4 <krhino_mm_alloc+0x10>
1fff34fc:	11012187 	.long	0x11012187
1fff3500:	1fffd9bc 	.long	0x1fffd9bc

1fff3504 <krhino_mm_free>:

void krhino_mm_free(void *ptr)
{
1fff3504:	14d0      	push      	r15
    k_mm_free(g_kmm_head, ptr);
1fff3506:	1064      	lrw      	r3, 0x1fffd9bc	// 1fff3514 <krhino_mm_free+0x10>
{
1fff3508:	6c43      	mov      	r1, r0
    k_mm_free(g_kmm_head, ptr);
1fff350a:	9300      	ld.w      	r0, (r3, 0x0)
1fff350c:	e3fffea1 	bsr      	0x1fff324e	// 1fff324e <k_mm_free>
}
1fff3510:	1490      	pop      	r15
1fff3512:	0000      	bkpt
1fff3514:	1fffd9bc 	.long	0x1fffd9bc

1fff3518 <krhino_mblk_pool_init>:

#if (RHINO_CONFIG_MM_BLK > 0)
kstat_t krhino_mblk_pool_init(mblk_pool_t *pool, const name_t *name,
                              void *pool_start,
                              size_t blk_size, size_t pool_size)
{
1fff3518:	14c4      	push      	r4-r7
1fff351a:	1421      	subi      	r14, r14, 4
    uint8_t  *blk_cur;         /* block pointer for traversing */
    uint8_t  *blk_next;        /* next block pointe for traversing */
    uint8_t  *pool_end;        /* mem pool end */
    uint8_t   addr_align_mask; /* address alignment */

    NULL_PARA_CHK(pool);
1fff351c:	3840      	cmpnei      	r0, 0
{
1fff351e:	b820      	st.w      	r1, (r14, 0x0)
1fff3520:	9885      	ld.w      	r4, (r14, 0x14)
    NULL_PARA_CHK(pool);
1fff3522:	0c2d      	bf      	0x1fff357c	// 1fff357c <krhino_mblk_pool_init+0x64>
    NULL_PARA_CHK(name);
1fff3524:	9820      	ld.w      	r1, (r14, 0x0)
1fff3526:	3940      	cmpnei      	r1, 0
1fff3528:	0c2a      	bf      	0x1fff357c	// 1fff357c <krhino_mblk_pool_init+0x64>
    NULL_PARA_CHK(pool_start);
1fff352a:	3a40      	cmpnei      	r2, 0
1fff352c:	0c28      	bf      	0x1fff357c	// 1fff357c <krhino_mblk_pool_init+0x64>

    /* over one block at least */
    if (pool_size < (blk_size << 1u)) {
1fff352e:	4321      	lsli      	r1, r3, 1
1fff3530:	6450      	cmphs      	r4, r1
1fff3532:	0c27      	bf      	0x1fff3580	// 1fff3580 <krhino_mblk_pool_init+0x68>
1fff3534:	c4432421 	or      	r1, r3, r2
1fff3538:	3503      	movi      	r5, 3
1fff353a:	6854      	and      	r1, r5

    if (((size_t)pool_start & addr_align_mask) > 0u) {
        return RHINO_INV_ALIGN;
    }

    if ((blk_size & addr_align_mask) > 0u) {
1fff353c:	3940      	cmpnei      	r1, 0
1fff353e:	0824      	bt      	0x1fff3586	// 1fff3586 <krhino_mblk_pool_init+0x6e>
        return RHINO_INV_ALIGN;
    }

    if ((pool_size & addr_align_mask) > 0u) {
1fff3540:	6950      	and      	r5, r4
1fff3542:	3d40      	cmpnei      	r5, 0
1fff3544:	0821      	bt      	0x1fff3586	// 1fff3586 <krhino_mblk_pool_init+0x6e>
    pool_end = (uint8_t *)pool_start + pool_size;
    blks     = 0u;
    blk_cur  = (uint8_t *)pool_start;
    blk_next = blk_cur + blk_size;

    while (blk_next < pool_end) {
1fff3546:	6d8b      	mov      	r6, r2
    pool_end = (uint8_t *)pool_start + pool_size;
1fff3548:	6108      	addu      	r4, r2
    blk_next = blk_cur + blk_size;
1fff354a:	5aac      	addu      	r5, r2, r3
    while (blk_next < pool_end) {
1fff354c:	6514      	cmphs      	r5, r4
1fff354e:	6ddb      	mov      	r7, r6
1fff3550:	618c      	addu      	r6, r3
1fff3552:	0c11      	bf      	0x1fff3574	// 1fff3574 <krhino_mblk_pool_init+0x5c>
        blk_cur              = blk_next;
        blk_next             = blk_cur + blk_size;
    }

    if (blk_next == pool_end) {
        blks++;
1fff3554:	6516      	cmpne      	r5, r4
    }

    /* the last one */
    *((uint8_t **)blk_cur) = NULL;
1fff3556:	3500      	movi      	r5, 0
        blks++;
1fff3558:	c4210c21 	incf      	r1, r1, 1
    *((uint8_t **)blk_cur) = NULL;
1fff355c:	b7a0      	st.w      	r5, (r7, 0x0)

    pool->pool_name  = name;
1fff355e:	98a0      	ld.w      	r5, (r14, 0x0)
    pool->pool_start = pool_start;
1fff3560:	b042      	st.w      	r2, (r0, 0x8)
    pool->pool_name  = name;
1fff3562:	b0a0      	st.w      	r5, (r0, 0x0)
    pool->pool_end   = pool_end;
1fff3564:	b081      	st.w      	r4, (r0, 0x4)
    pool->blk_whole  = blks;
1fff3566:	b025      	st.w      	r1, (r0, 0x14)
    pool->blk_avail  = blks;
1fff3568:	b024      	st.w      	r1, (r0, 0x10)
    pool->blk_size   = blk_size;
1fff356a:	b063      	st.w      	r3, (r0, 0xc)
    pool->avail_list = (uint8_t *)pool_start;
1fff356c:	b046      	st.w      	r2, (r0, 0x18)

    TRACE_MBLK_POOL_CREATE(krhino_cur_task_get(), pool);

    return RHINO_SUCCESS;
1fff356e:	3000      	movi      	r0, 0
}
1fff3570:	1401      	addi      	r14, r14, 4
1fff3572:	1484      	pop      	r4-r7
        *(uint8_t **)blk_cur = blk_next;
1fff3574:	b7a0      	st.w      	r5, (r7, 0x0)
        blks++;
1fff3576:	2100      	addi      	r1, 1
        blk_next             = blk_cur + blk_size;
1fff3578:	614c      	addu      	r5, r3
1fff357a:	07e9      	br      	0x1fff354c	// 1fff354c <krhino_mblk_pool_init+0x34>
    NULL_PARA_CHK(pool);
1fff357c:	3006      	movi      	r0, 6
1fff357e:	07f9      	br      	0x1fff3570	// 1fff3570 <krhino_mblk_pool_init+0x58>
        return RHINO_BLK_POOL_SIZE_ERR;
1fff3580:	ea000195 	movi      	r0, 405
1fff3584:	07f6      	br      	0x1fff3570	// 1fff3570 <krhino_mblk_pool_init+0x58>
        return RHINO_INV_ALIGN;
1fff3586:	3007      	movi      	r0, 7
1fff3588:	07f4      	br      	0x1fff3570	// 1fff3570 <krhino_mblk_pool_init+0x58>

1fff358a <krhino_mblk_alloc>:

kstat_t krhino_mblk_alloc(mblk_pool_t *pool, void **blk)
{
1fff358a:	14d2      	push      	r4-r5, r15
1fff358c:	6d03      	mov      	r4, r0
    kstat_t  status;
    uint8_t *avail_blk;
    cpu_cpsr_t flags_cpsr;

    NULL_PARA_CHK(pool);
1fff358e:	3840      	cmpnei      	r0, 0
{
1fff3590:	6d47      	mov      	r5, r1
    NULL_PARA_CHK(pool);
1fff3592:	0c18      	bf      	0x1fff35c2	// 1fff35c2 <krhino_mblk_alloc+0x38>
    NULL_PARA_CHK(blk);
1fff3594:	3940      	cmpnei      	r1, 0
1fff3596:	0c16      	bf      	0x1fff35c2	// 1fff35c2 <krhino_mblk_alloc+0x38>

    krhino_spin_lock_irq_save(&pool->blk_lock, flags_cpsr);
1fff3598:	e000002c 	bsr      	0x1fff35f0	// 1fff35f0 <cpu_intrpt_save>

    if (pool->blk_avail > 0u) {
1fff359c:	9464      	ld.w      	r3, (r4, 0x10)
1fff359e:	3b40      	cmpnei      	r3, 0
1fff35a0:	0c0d      	bf      	0x1fff35ba	// 1fff35ba <krhino_mblk_alloc+0x30>
        avail_blk          = pool->avail_list;
1fff35a2:	9466      	ld.w      	r3, (r4, 0x18)
        *((uint8_t **)blk) = avail_blk;
1fff35a4:	b560      	st.w      	r3, (r5, 0x0)
        /* the first 4 byte is the pointer for next block */
        pool->avail_list   = *(uint8_t **)(avail_blk);
1fff35a6:	9360      	ld.w      	r3, (r3, 0x0)
1fff35a8:	b466      	st.w      	r3, (r4, 0x18)
        pool->blk_avail--;
1fff35aa:	9464      	ld.w      	r3, (r4, 0x10)
1fff35ac:	2b00      	subi      	r3, 1
1fff35ae:	b464      	st.w      	r3, (r4, 0x10)
        status = RHINO_SUCCESS;
1fff35b0:	3400      	movi      	r4, 0
    } else {
        *((uint8_t **)blk) = NULL;
        status = RHINO_NO_MEM;
    }

    krhino_spin_unlock_irq_restore(&pool->blk_lock, flags_cpsr);
1fff35b2:	e0000024 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>

    return status;
}
1fff35b6:	6c13      	mov      	r0, r4
1fff35b8:	1492      	pop      	r4-r5, r15
        *((uint8_t **)blk) = NULL;
1fff35ba:	3300      	movi      	r3, 0
        status = RHINO_NO_MEM;
1fff35bc:	3469      	movi      	r4, 105
        *((uint8_t **)blk) = NULL;
1fff35be:	b560      	st.w      	r3, (r5, 0x0)
1fff35c0:	07f9      	br      	0x1fff35b2	// 1fff35b2 <krhino_mblk_alloc+0x28>
    NULL_PARA_CHK(pool);
1fff35c2:	3406      	movi      	r4, 6
1fff35c4:	07f9      	br      	0x1fff35b6	// 1fff35b6 <krhino_mblk_alloc+0x2c>

1fff35c6 <krhino_mblk_free>:

kstat_t krhino_mblk_free(mblk_pool_t *pool, void *blk)
{
1fff35c6:	14d2      	push      	r4-r5, r15
1fff35c8:	6d03      	mov      	r4, r0
    cpu_cpsr_t flags_cpsr;
    NULL_PARA_CHK(pool);
1fff35ca:	3840      	cmpnei      	r0, 0
{
1fff35cc:	6d47      	mov      	r5, r1
    NULL_PARA_CHK(pool);
1fff35ce:	0c0f      	bf      	0x1fff35ec	// 1fff35ec <krhino_mblk_free+0x26>
    NULL_PARA_CHK(blk);
1fff35d0:	3940      	cmpnei      	r1, 0
1fff35d2:	0c0d      	bf      	0x1fff35ec	// 1fff35ec <krhino_mblk_free+0x26>

    krhino_spin_lock_irq_save(&pool->blk_lock, flags_cpsr);
1fff35d4:	e000000e 	bsr      	0x1fff35f0	// 1fff35f0 <cpu_intrpt_save>

    /* use the first 4 byte of the free block point to head of avail list */
    *((uint8_t **)blk) = pool->avail_list;
1fff35d8:	9466      	ld.w      	r3, (r4, 0x18)
1fff35da:	b560      	st.w      	r3, (r5, 0x0)
    pool->avail_list   = blk;
1fff35dc:	b4a6      	st.w      	r5, (r4, 0x18)
    pool->blk_avail++;
1fff35de:	9464      	ld.w      	r3, (r4, 0x10)
1fff35e0:	2300      	addi      	r3, 1
1fff35e2:	b464      	st.w      	r3, (r4, 0x10)

    krhino_spin_unlock_irq_restore(&pool->blk_lock, flags_cpsr);
1fff35e4:	e000000b 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>

    return RHINO_SUCCESS;
1fff35e8:	3000      	movi      	r0, 0
}
1fff35ea:	1492      	pop      	r4-r5, r15
    NULL_PARA_CHK(pool);
1fff35ec:	3006      	movi      	r0, 6
1fff35ee:	07fe      	br      	0x1fff35ea	// 1fff35ea <krhino_mblk_free+0x24>

1fff35f0 <cpu_intrpt_save>:
1fff35f0:	c0006020 	mfcr      	r0, cr<0, 0>
1fff35f4:	c0807020 	psrclr      	ie
1fff35f8:	783c      	jmp      	r15

1fff35fa <cpu_intrpt_restore>:
1fff35fa:	c0006420 	mtcr      	r0, cr<0, 0>
1fff35fe:	38c6      	btsti      	r0, 6
1fff3600:	0c0a      	bf      	0x1fff3614	// 1fff3614 <cpu_intrpt_restore+0x1a>
1fff3602:	ea2100ff 	movih      	r1, 255
1fff3606:	6840      	and      	r1, r0
1fff3608:	3940      	cmpnei      	r1, 0
1fff360a:	0805      	bt      	0x1fff3614	// 1fff3614 <cpu_intrpt_restore+0x1a>
1fff360c:	1023      	lrw      	r1, 0xe000e200	// 1fff3618 <cpu_intrpt_restore+0x1e>
1fff360e:	9140      	ld.w      	r2, (r1, 0x0)
1fff3610:	3ac0      	btsti      	r2, 0
1fff3612:	0bfe      	bt      	0x1fff360e	// 1fff360e <cpu_intrpt_restore+0x14>
1fff3614:	783c      	jmp      	r15
1fff3616:	0000      	.short	0x0000
1fff3618:	e000e200 	.long	0xe000e200
1fff361c:	00001f41 	.long	0x00001f41
1fff3620:	6b736300 	.long	0x6b736300
1fff3624:	16010079 	.long	0x16010079
1fff3628:	04000000 	.long	0x04000000
1fff362c:	30386b63 	.long	0x30386b63
1fff3630:	63050032 	.long	0x63050032
1fff3634:	3230386b 	.long	0x3230386b
1fff3638:	50860600 	.long	0x50860600

1fff363c <krhino_init_hook>:

extern void soc_hw_timer_init(void);

#if (RHINO_CONFIG_USER_HOOK > 0)
void krhino_init_hook(void)
{
1fff363c:	14d2      	push      	r4-r5, r15
#if (RHINO_CONFIG_HW_COUNT > 0)
    soc_hw_timer_init();
#endif

    uint32_t h_end = (uint32_t)(&__heap_end);
1fff363e:	1087      	lrw      	r4, 0x20000000	// 1fff3658 <krhino_init_hook+0x1c>
    uint32_t h_start = (uint32_t)(&__heap_start);
1fff3640:	10a7      	lrw      	r5, 0x1fffdae0	// 1fff365c <krhino_init_hook+0x20>

    if (h_start >= h_end) {
1fff3642:	6514      	cmphs      	r5, r4
1fff3644:	0c06      	bf      	0x1fff3650	// 1fff3650 <krhino_init_hook+0x14>
        k_err_proc(RHINO_MM_POOL_SIZE_ERR);
1fff3646:	3225      	movi      	r2, 37
1fff3648:	1026      	lrw      	r1, 0x110115df	// 1fff3660 <krhino_init_hook+0x24>
1fff364a:	3064      	movi      	r0, 100
1fff364c:	e3fff5ee 	bsr      	0x1fff2228	// 1fff2228 <k_err_proc_debug>
    }
    /* auto define heap size */
    g_mm_region[0].len = (uint32_t)(&__heap_end) - (uint32_t)(&__heap_start);
1fff3650:	1065      	lrw      	r3, 0x1fffa544	// 1fff3664 <krhino_init_hook+0x28>
1fff3652:	6116      	subu      	r4, r5
1fff3654:	b381      	st.w      	r4, (r3, 0x4)
}
1fff3656:	1492      	pop      	r4-r5, r15
1fff3658:	20000000 	.long	0x20000000
1fff365c:	1fffdae0 	.long	0x1fffdae0
1fff3660:	110115df 	.long	0x110115df
1fff3664:	1fffa544 	.long	0x1fffa544

1fff3668 <krhino_start_hook>:
1fff3668:	783c      	jmp      	r15

1fff366a <krhino_task_create_hook>:
1fff366a:	783c      	jmp      	r15

1fff366c <krhino_task_del_hook>:
1fff366c:	783c      	jmp      	r15

1fff366e <krhino_task_switch_hook>:
}

__attribute__((weak)) void krhino_task_switch_hook(ktask_t *orgin, ktask_t *dest)
{

}
1fff366e:	783c      	jmp      	r15

1fff3670 <krhino_tick_hook>:


__attribute__((weak)) void krhino_tick_hook(void)
{

}
1fff3670:	783c      	jmp      	r15

1fff3672 <krhino_idle_pre_hook>:

__attribute__((weak)) void krhino_idle_pre_hook(void)
{
1fff3672:	14d0      	push      	r15
    extern void lpm_idle_pre_hook(void);
    lpm_idle_pre_hook();
1fff3674:	e0003bc0 	bsr      	0x1fffadf4	// 1fffadf4 <check_before_startup+0x71c>
}
1fff3678:	1490      	pop      	r15

1fff367a <krhino_mm_alloc_hook>:
}

__attribute__((weak)) void krhino_mm_alloc_hook(void *mem, size_t size)
{

}
1fff367a:	783c      	jmp      	r15

1fff367c <___gnu_csky_case_uqi>:
1fff367c:	1421      	subi      	r14, r14, 4
1fff367e:	b820      	st.w      	r1, (r14, 0x0)
1fff3680:	6c7f      	mov      	r1, r15
1fff3682:	6040      	addu      	r1, r0
1fff3684:	8120      	ld.b      	r1, (r1, 0x0)
1fff3686:	4121      	lsli      	r1, r1, 1
1fff3688:	63c4      	addu      	r15, r1
1fff368a:	9820      	ld.w      	r1, (r14, 0x0)
1fff368c:	1401      	addi      	r14, r14, 4
1fff368e:	783c      	jmp      	r15
1fff3690:	1f41      	addi      	r7, r14, 260
1fff3692:	0000      	bkpt
1fff3694:	6300      	addu      	r12, r0
1fff3696:	6b73      	.long: 0x00006b73
1fff3698:	0079      	lrw      	r3, 0x64900c40	// 1fff3a30 <check_16MXtal_by_rcTracking+0x88>
1fff369a:	1601      	addi      	r14, r14, 260
1fff369c:	0000      	bkpt
1fff369e:	0400      	br      	0x1fff369e	// 1fff369e <___gnu_csky_case_uqi+0x22>
1fff36a0:	6b63      	.long: 0x00006b63
1fff36a2:	3038      	movi      	r0, 56
1fff36a4:	0032      	lrw      	r1, 0x68849351	// 1fff3a58 <check_16MXtal_by_rcTracking+0xb0>
1fff36a6:	6305      	addc      	r12, r1
1fff36a8:	386b      	.long: 0x0000386b
1fff36aa:	3230      	movi      	r2, 48
1fff36ac:	0600      	br      	0x1fff32ac	// 1fff32ac <k_mm_free+0x5e>
1fff36ae:	5086      	asri      	r4, r0, 6

1fff36b0 <CORET_IRQHandler>:
#endif

static uint32_t _coret_to_osal_tick = 0;
extern uint32_t osal_sys_tick;
void CORET_IRQHandler(void)
{
1fff36b0:	14d1      	push      	r4, r15
    static uint32_t count = 0;
#ifndef CONFIG_KERNEL_FREERTOS
    CSI_INTRPT_ENTER();
1fff36b2:	e3fff3e1 	bsr      	0x1fff1e74	// 1fff1e74 <krhino_intrpt_enter>
 */
__ALWAYS_STATIC_INLINE uint32_t __get_PSR(void)
{
    uint32_t result;

    __ASM volatile("mfcr %0, psr" : "=r"(result));
1fff36b6:	c0006023 	mfcr      	r3, cr<0, 0>
    __ASM volatile("psrclr ie");
1fff36ba:	c0807020 	psrclr      	ie
#endif
    uint32_t cs = csi_irq_save();
    readl(0xE000E010);
1fff36be:	1055      	lrw      	r2, 0xe000e000	// 1fff3710 <CORET_IRQHandler+0x60>
1fff36c0:	9224      	ld.w      	r1, (r2, 0x10)
    readl(0xE000E010);
1fff36c2:	9244      	ld.w      	r2, (r2, 0x10)
  \details Writes the given value to the PSR Register.
  \param [in]    psr  PSR Register value to set
 */
__ALWAYS_STATIC_INLINE void __set_PSR(uint32_t psr)
{
    __ASM volatile("mtcr %0, psr" : : "r"(psr));
1fff36c4:	c0036420 	mtcr      	r3, cr<0, 0>
    csi_irq_restore(cs);

#if defined(CONFIG_KERNEL_RHINO)
    krhino_tick_proc();
1fff36c8:	e3fff418 	bsr      	0x1fff1ef8	// 1fff1ef8 <krhino_tick_proc>
#elif defined(CONFIG_KERNEL_FREERTOS)
    xPortSysTickHandler();
#elif defined(CONFIG_KERNEL_UCOS)
    OSTimeTick();
#endif
    _coret_to_osal_tick += 1000;
1fff36cc:	1012      	lrw      	r0, 0x1fffb708	// 1fff3714 <CORET_IRQHandler+0x64>
1fff36ce:	1033      	lrw      	r1, 0x1fff0d98	// 1fff3718 <CORET_IRQHandler+0x68>
1fff36d0:	9060      	ld.w      	r3, (r0, 0x0)
1fff36d2:	9140      	ld.w      	r2, (r1, 0x0)
1fff36d4:	e46303e7 	addi      	r3, r3, 1000
1fff36d8:	2200      	addi      	r2, 1
    do {
         _coret_to_osal_tick -= 625;
1fff36da:	e4631270 	subi      	r3, r3, 625
         osal_sys_tick += 1;
    } while(_coret_to_osal_tick > 625);
1fff36de:	eb030271 	cmphsi      	r3, 626
1fff36e2:	5a82      	addi      	r4, r2, 1
1fff36e4:	080e      	bt      	0x1fff3700	// 1fff3700 <CORET_IRQHandler+0x50>
1fff36e6:	b140      	st.w      	r2, (r1, 0x0)
1fff36e8:	b060      	st.w      	r3, (r0, 0x0)

#ifndef CONFIG_KERNEL_FREERTOS
    CSI_INTRPT_EXIT();
1fff36ea:	e3fff3d3 	bsr      	0x1fff1e90	// 1fff1e90 <krhino_intrpt_exit>
#endif

   unsigned int v = *((volatile unsigned int *) (0xE000E010));
1fff36ee:	1049      	lrw      	r2, 0xe000e000	// 1fff3710 <CORET_IRQHandler+0x60>
    while((v & 0x10000) > 0)
1fff36f0:	3180      	movi      	r1, 128
   unsigned int v = *((volatile unsigned int *) (0xE000E010));
1fff36f2:	9264      	ld.w      	r3, (r2, 0x10)
    while((v & 0x10000) > 0)
1fff36f4:	4129      	lsli      	r1, r1, 9
    {
        v = *((volatile unsigned int *) (0xE000E010));
        count++;
1fff36f6:	108a      	lrw      	r4, 0x1fffb70c	// 1fff371c <CORET_IRQHandler+0x6c>
    while((v & 0x10000) > 0)
1fff36f8:	68c4      	and      	r3, r1
1fff36fa:	3b40      	cmpnei      	r3, 0
1fff36fc:	0804      	bt      	0x1fff3704	// 1fff3704 <CORET_IRQHandler+0x54>
    }
}
1fff36fe:	1491      	pop      	r4, r15
1fff3700:	6c93      	mov      	r2, r4
1fff3702:	07ec      	br      	0x1fff36da	// 1fff36da <CORET_IRQHandler+0x2a>
        count++;
1fff3704:	9400      	ld.w      	r0, (r4, 0x0)
1fff3706:	2000      	addi      	r0, 1
        v = *((volatile unsigned int *) (0xE000E010));
1fff3708:	9264      	ld.w      	r3, (r2, 0x10)
        count++;
1fff370a:	b400      	st.w      	r0, (r4, 0x0)
1fff370c:	07f6      	br      	0x1fff36f8	// 1fff36f8 <CORET_IRQHandler+0x48>
1fff370e:	0000      	bkpt
1fff3710:	e000e000 	.long	0xe000e000
1fff3714:	1fffb708 	.long	0x1fffb708
1fff3718:	1fff0d98 	.long	0x1fff0d98
1fff371c:	1fffb70c 	.long	0x1fffb70c

1fff3720 <UART0_IRQHandler>:

extern void dw_usart_irqhandler(int32_t idx);
extern void dw_gpio_irqhandler(int32_t idx);

void UART0_IRQHandler(void)
{
1fff3720:	14d0      	push      	r15
    CSI_INTRPT_ENTER();
1fff3722:	e3fff3a9 	bsr      	0x1fff1e74	// 1fff1e74 <krhino_intrpt_enter>
    dw_usart_irqhandler(0);
1fff3726:	3000      	movi      	r0, 0
1fff3728:	e0000dce 	bsr      	0x1fff52c4	// 1fff52c4 <dw_usart_irqhandler>
    CSI_INTRPT_EXIT();
1fff372c:	e3fff3b2 	bsr      	0x1fff1e90	// 1fff1e90 <krhino_intrpt_exit>
}
1fff3730:	1490      	pop      	r15

1fff3732 <UART1_IRQHandler>:
void UART1_IRQHandler(void)
{
1fff3732:	14d0      	push      	r15
    CSI_INTRPT_ENTER();
1fff3734:	e3fff3a0 	bsr      	0x1fff1e74	// 1fff1e74 <krhino_intrpt_enter>
    dw_usart_irqhandler(1);
1fff3738:	3001      	movi      	r0, 1
1fff373a:	e0000dc5 	bsr      	0x1fff52c4	// 1fff52c4 <dw_usart_irqhandler>
    CSI_INTRPT_EXIT();
1fff373e:	e3fff3a9 	bsr      	0x1fff1e90	// 1fff1e90 <krhino_intrpt_exit>
}
1fff3742:	1490      	pop      	r15

1fff3744 <CSI_GPIO_IRQHandler>:

void CSI_GPIO_IRQHandler(void)
{
1fff3744:	14d0      	push      	r15
    CSI_INTRPT_ENTER();
1fff3746:	e3fff397 	bsr      	0x1fff1e74	// 1fff1e74 <krhino_intrpt_enter>
    dw_gpio_irqhandler(0);
1fff374a:	3000      	movi      	r0, 0
1fff374c:	e0000c66 	bsr      	0x1fff5018	// 1fff5018 <dw_gpio_irqhandler>
    CSI_INTRPT_EXIT();
1fff3750:	e3fff3a0 	bsr      	0x1fff1e90	// 1fff1e90 <krhino_intrpt_exit>
}
1fff3754:	1490      	pop      	r15

1fff3756 <CSI_DMAC_IRQHandler>:
    dw_iic_irqhandler(1);
    CSI_INTRPT_EXIT();
}

void CSI_DMAC_IRQHandler(void)
{
1fff3756:	14d0      	push      	r15
    CSI_INTRPT_ENTER();
1fff3758:	e3fff38e 	bsr      	0x1fff1e74	// 1fff1e74 <krhino_intrpt_enter>
    dw_dmac_irqhandler(0);
1fff375c:	3000      	movi      	r0, 0
1fff375e:	e0000b99 	bsr      	0x1fff4e90	// 1fff4e90 <dw_dmac_irqhandler>
    CSI_INTRPT_EXIT();
1fff3762:	e3fff397 	bsr      	0x1fff1e90	// 1fff1e90 <krhino_intrpt_exit>
}
1fff3766:	1490      	pop      	r15

1fff3768 <Default_IRQHandler_phy6220>:
1fff3768:	1422      	subi      	r14, r14, 8
1fff376a:	b800      	st.w      	r0, (r14, 0x0)
1fff376c:	b821      	st.w      	r1, (r14, 0x4)
1fff376e:	1111      	lrw      	r0, 0x1fff3840	// 1fff3830 <Default_IRQHandler_phy6220+0xc8>
1fff3770:	9020      	ld.w      	r1, (r0, 0x0)
1fff3772:	2100      	addi      	r1, 1
1fff3774:	b020      	st.w      	r1, (r0, 0x0)
1fff3776:	3941      	cmpnei      	r1, 1
1fff3778:	9800      	ld.w      	r0, (r14, 0x0)
1fff377a:	9821      	ld.w      	r1, (r14, 0x4)
1fff377c:	1402      	addi      	r14, r14, 8
1fff377e:	0814      	bt      	0x1fff37a6	// 1fff37a6 <Default_IRQHandler_phy6220+0x3e>
1fff3780:	1431      	subi      	r14, r14, 68
1fff3782:	d40e1c2d 	stm      	r0-r13, (r14)
1fff3786:	ddee200e 	st.w      	r15, (r14, 0x38)
1fff378a:	c0026020 	mfcr      	r0, cr<2, 0>
1fff378e:	b80f      	st.w      	r0, (r14, 0x3c)
1fff3790:	c0046020 	mfcr      	r0, cr<4, 0>
1fff3794:	b810      	st.w      	r0, (r14, 0x40)
1fff3796:	1108      	lrw      	r0, 0x1fff3844	// 1fff3834 <Default_IRQHandler_phy6220+0xcc>
1fff3798:	ddc02000 	st.w      	r14, (r0, 0x0)
1fff379c:	ea8e0027 	lrw      	r14, 0x1fff0d88	// 1fff3838 <Default_IRQHandler_phy6220+0xd0>
1fff37a0:	c1807420 	psrset      	ee, ie
1fff37a4:	0412      	br      	0x1fff37c8	// 1fff37c8 <Default_IRQHandler_phy6220+0x60>
1fff37a6:	1429      	subi      	r14, r14, 36
1fff37a8:	d40e1c23 	stm      	r0-r3, (r14)
1fff37ac:	c0026020 	mfcr      	r0, cr<2, 0>
1fff37b0:	c0046021 	mfcr      	r1, cr<4, 0>
1fff37b4:	c1807420 	psrset      	ee, ie
1fff37b8:	dd8e2004 	st.w      	r12, (r14, 0x10)
1fff37bc:	ddae2005 	st.w      	r13, (r14, 0x14)
1fff37c0:	ddee2006 	st.w      	r15, (r14, 0x18)
1fff37c4:	b807      	st.w      	r0, (r14, 0x1c)
1fff37c6:	b828      	st.w      	r1, (r14, 0x20)
1fff37c8:	103d      	lrw      	r1, 0x1fffce78	// 1fff383c <Default_IRQHandler_phy6220+0xd4>
1fff37ca:	c0006020 	mfcr      	r0, cr<0, 0>
1fff37ce:	4810      	lsri      	r0, r0, 16
1fff37d0:	7402      	sextb      	r0, r0
1fff37d2:	281f      	subi      	r0, 32
1fff37d4:	4002      	lsli      	r0, r0, 2
1fff37d6:	6040      	addu      	r1, r0
1fff37d8:	d9a12000 	ld.w      	r13, (r1, 0x0)
1fff37dc:	7bf5      	jsr      	r13
1fff37de:	c0807020 	psrclr      	ie
1fff37e2:	1014      	lrw      	r0, 0x1fff3840	// 1fff3830 <Default_IRQHandler_phy6220+0xc8>
1fff37e4:	9020      	ld.w      	r1, (r0, 0x0)
1fff37e6:	2900      	subi      	r1, 1
1fff37e8:	b020      	st.w      	r1, (r0, 0x0)
1fff37ea:	3940      	cmpnei      	r1, 0
1fff37ec:	0811      	bt      	0x1fff380e	// 1fff380e <Default_IRQHandler_phy6220+0xa6>
1fff37ee:	1012      	lrw      	r0, 0x1fff3844	// 1fff3834 <Default_IRQHandler_phy6220+0xcc>
1fff37f0:	d9c02000 	ld.w      	r14, (r0, 0x0)
1fff37f4:	9810      	ld.w      	r0, (r14, 0x40)
1fff37f6:	c0006424 	mtcr      	r0, cr<4, 0>
1fff37fa:	980f      	ld.w      	r0, (r14, 0x3c)
1fff37fc:	c0006422 	mtcr      	r0, cr<2, 0>
1fff3800:	d00e1c2d 	ldm      	r0-r13, (r14)
1fff3804:	d9ee200e 	ld.w      	r15, (r14, 0x38)
1fff3808:	1411      	addi      	r14, r14, 68
1fff380a:	c0004020 	rte
1fff380e:	9807      	ld.w      	r0, (r14, 0x1c)
1fff3810:	9828      	ld.w      	r1, (r14, 0x20)
1fff3812:	c0006422 	mtcr      	r0, cr<2, 0>
1fff3816:	c0016424 	mtcr      	r1, cr<4, 0>
1fff381a:	d00e1c23 	ldm      	r0-r3, (r14)
1fff381e:	d98e2004 	ld.w      	r12, (r14, 0x10)
1fff3822:	d9ae2005 	ld.w      	r13, (r14, 0x14)
1fff3826:	d9ee2006 	ld.w      	r15, (r14, 0x18)
1fff382a:	1409      	addi      	r14, r14, 36
1fff382c:	c0004020 	rte
1fff3830:	1fff3840 	.long	0x1fff3840
1fff3834:	1fff3844 	.long	0x1fff3844
1fff3838:	1fff0d88 	.long	0x1fff0d88
1fff383c:	1fffce78 	.long	0x1fffce78

1fff3840 <irq_nested_level>:
1fff3840:	00000000 	.long	0x00000000

1fff3844 <task_sp>:
1fff3844:	00000000 	.long	0x00000000

1fff3848 <cpu_task_switch>:
1fff3848:	1003      	lrw      	r0, 0xe000e200	// 1fff3854 <cpu_task_switch+0xc>
1fff384a:	9020      	ld.w      	r1, (r0, 0x0)
1fff384c:	ec210001 	ori      	r1, r1, 1
1fff3850:	b020      	st.w      	r1, (r0, 0x0)
1fff3852:	783c      	jmp      	r15
1fff3854:	e000e200 	.long	0xe000e200

1fff3858 <cpu_intrpt_switch>:
1fff3858:	1003      	lrw      	r0, 0xe000e200	// 1fff3864 <cpu_intrpt_switch+0xc>
1fff385a:	9020      	ld.w      	r1, (r0, 0x0)
1fff385c:	ec210001 	ori      	r1, r1, 1
1fff3860:	b020      	st.w      	r1, (r0, 0x0)
1fff3862:	783c      	jmp      	r15
1fff3864:	e000e200 	.long	0xe000e200

1fff3868 <cpu_first_task_start>:
1fff3868:	c0807020 	psrclr      	ie
1fff386c:	e8000015 	br      	0x1fff3896	// 1fff3896 <__tspend_handler_nosave>

1fff3870 <tspend_handler>:
1fff3870:	1431      	subi      	r14, r14, 68
1fff3872:	d40e1c2d 	stm      	r0-r13, (r14)
1fff3876:	ddee200e 	st.w      	r15, (r14, 0x38)
1fff387a:	c0026020 	mfcr      	r0, cr<2, 0>
1fff387e:	b80f      	st.w      	r0, (r14, 0x3c)
1fff3880:	c0046020 	mfcr      	r0, cr<4, 0>
1fff3884:	b810      	st.w      	r0, (r14, 0x40)
1fff3886:	102e      	lrw      	r1, 0x1fffdad4	// 1fff38bc <__tspend_handler_nosave+0x26>
1fff3888:	9120      	ld.w      	r1, (r1, 0x0)
1fff388a:	ddc12000 	st.w      	r14, (r1, 0x0)
1fff388e:	100d      	lrw      	r0, 0x1fffd2b4	// 1fff38c0 <__tspend_handler_nosave+0x2a>
1fff3890:	9020      	ld.w      	r1, (r0, 0x0)
1fff3892:	3940      	cmpnei      	r1, 0
1fff3894:	0807      	bt      	0x1fff38a2	// 1fff38a2 <__tspend_handler_nosave+0xc>

1fff3896 <__tspend_handler_nosave>:
1fff3896:	108a      	lrw      	r4, 0x1fffdad4	// 1fff38bc <__tspend_handler_nosave+0x26>
1fff3898:	10ab      	lrw      	r5, 0x1fffd858	// 1fff38c4 <__tspend_handler_nosave+0x2e>
1fff389a:	95c0      	ld.w      	r6, (r5, 0x0)
1fff389c:	b4c0      	st.w      	r6, (r4, 0x0)
1fff389e:	d9c62000 	ld.w      	r14, (r6, 0x0)
1fff38a2:	9810      	ld.w      	r0, (r14, 0x40)
1fff38a4:	c0006424 	mtcr      	r0, cr<4, 0>
1fff38a8:	980f      	ld.w      	r0, (r14, 0x3c)
1fff38aa:	c0006422 	mtcr      	r0, cr<2, 0>
1fff38ae:	d9ee200e 	ld.w      	r15, (r14, 0x38)
1fff38b2:	d00e1c2d 	ldm      	r0-r13, (r14)
1fff38b6:	1411      	addi      	r14, r14, 68
1fff38b8:	c0004020 	rte
1fff38bc:	1fffdad4 	.long	0x1fffdad4
1fff38c0:	1fffd2b4 	.long	0x1fffd2b4
1fff38c4:	1fffd858 	.long	0x1fffd858
1fff38c8:	00001f41 	.long	0x00001f41
1fff38cc:	6b736300 	.long	0x6b736300
1fff38d0:	16010079 	.long	0x16010079
1fff38d4:	04000000 	.long	0x04000000
1fff38d8:	30386b63 	.long	0x30386b63
1fff38dc:	63050032 	.long	0x63050032
1fff38e0:	3230386b 	.long	0x3230386b
1fff38e4:	50860600 	.long	0x50860600

1fff38e8 <_symrom_set_sleep_flag.part.0>:
}

void set_sleep_flag(int flag)
{
    if (flag) {
        *(volatile uint32_t *) 0x4000f0a8 |= 1 ;
1fff38e8:	1045      	lrw      	r2, 0x4000f080	// 1fff38fc <_symrom_set_sleep_flag.part.0+0x14>
1fff38ea:	926a      	ld.w      	r3, (r2, 0x28)
1fff38ec:	ec630001 	ori      	r3, r3, 1
1fff38f0:	b26a      	st.w      	r3, (r2, 0x28)
        sleep_flag = SLEEP_MAGIC ;
1fff38f2:	1044      	lrw      	r2, 0x32141b6	// 1fff3900 <_symrom_set_sleep_flag.part.0+0x18>
1fff38f4:	1064      	lrw      	r3, 0x1fff0e58	// 1fff3904 <_symrom_set_sleep_flag.part.0+0x1c>
1fff38f6:	b340      	st.w      	r2, (r3, 0x0)
    } else {
        *(volatile uint32_t *) 0x4000f0a8 &= ~1;
        sleep_flag = 0 ;
    }
}
1fff38f8:	783c      	jmp      	r15
1fff38fa:	0000      	bkpt
1fff38fc:	4000f080 	.long	0x4000f080
1fff3900:	032141b6 	.long	0x032141b6
1fff3904:	1fff0e58 	.long	0x1fff0e58

1fff3908 <boot_wdt_close>:
{
1fff3908:	14d0      	push      	r15
1fff390a:	1423      	subi      	r14, r14, 12
    int32_t real_idx = target_get_wdt(0, &base, &irq, &handler);
1fff390c:	6c7b      	mov      	r1, r14
    uint32_t base = 0u;
1fff390e:	3300      	movi      	r3, 0
    int32_t real_idx = target_get_wdt(0, &base, &irq, &handler);
1fff3910:	3000      	movi      	r0, 0
    uint32_t base = 0u;
1fff3912:	b860      	st.w      	r3, (r14, 0x0)
    uint32_t irq = 0u;
1fff3914:	b861      	st.w      	r3, (r14, 0x4)
    int32_t real_idx = target_get_wdt(0, &base, &irq, &handler);
1fff3916:	1a01      	addi      	r2, r14, 4
1fff3918:	1b02      	addi      	r3, r14, 8
1fff391a:	e000388d 	bsr      	0x1fffaa34	// 1fffaa34 <check_before_startup+0x35c>
    if (real_idx != 0) {
1fff391e:	3840      	cmpnei      	r0, 0
1fff3920:	0808      	bt      	0x1fff3930	// 1fff3930 <boot_wdt_close+0x28>
    drv_irq_disable(irq);
1fff3922:	9861      	ld.w      	r3, (r14, 0x4)
1fff3924:	6c0f      	mov      	r0, r3
1fff3926:	e0000aa5 	bsr      	0x1fff4e70	// 1fff4e70 <drv_irq_disable>
    drv_irq_unregister(irq);
1fff392a:	9801      	ld.w      	r0, (r14, 0x4)
1fff392c:	e0003956 	bsr      	0x1fffabd8	// 1fffabd8 <check_before_startup+0x500>
}
1fff3930:	3000      	movi      	r0, 0
1fff3932:	1403      	addi      	r14, r14, 12
1fff3934:	1490      	pop      	r15

1fff3936 <wdt_init>:
{
1fff3936:	14d0      	push      	r15
    boot_wdt_close();
1fff3938:	e3ffffe8 	bsr      	0x1fff3908	// 1fff3908 <boot_wdt_close>
}
1fff393c:	1490      	pop      	r15
	...

1fff3940 <enableSleepInPM>:
    bSleepDisable &= ~ flag;
1fff3940:	1063      	lrw      	r3, 0x1fffb735	// 1fff394c <enableSleepInPM+0xc>
1fff3942:	8340      	ld.b      	r2, (r3, 0x0)
1fff3944:	c4022040 	andn      	r0, r2, r0
1fff3948:	a300      	st.b      	r0, (r3, 0x0)
}
1fff394a:	783c      	jmp      	r15
1fff394c:	1fffb735 	.long	0x1fffb735

1fff3950 <disableSleepInPM>:
    bSleepDisable |= flag;
1fff3950:	1063      	lrw      	r3, 0x1fffb735	// 1fff395c <disableSleepInPM+0xc>
1fff3952:	8340      	ld.b      	r2, (r3, 0x0)
1fff3954:	6c08      	or      	r0, r2
1fff3956:	a300      	st.b      	r0, (r3, 0x0)
}
1fff3958:	783c      	jmp      	r15
1fff395a:	0000      	bkpt
1fff395c:	1fffb735 	.long	0x1fffb735

1fff3960 <just_enter_sleep>:
uint32_t g_xtal96M_temp=0;
uint32_t DLL_enable_num=1;
uint32_t tracking_16M_num = 0;
extern void Reset_Handler();
void just_enter_sleep(uint32 time)
{
1fff3960:	14d3      	push      	r4-r6, r15
//    while (!(*(volatile uint32_t *)0x4000f0cc)) {
//        ;
//    }

    JUMP_FUNCTION(WAKEUP_PROCESS) = (uint32_t)Reset_Handler;
1fff3962:	106f      	lrw      	r3, 0x1fff0080	// 1fff399c <just_enter_sleep+0x3c>
1fff3964:	104f      	lrw      	r2, 0x1101b90c	// 1fff39a0 <just_enter_sleep+0x40>

    /* set sleep flag , rom boot will check the flag and
    set reset path from WAKEUP_PROCESS */
    set_sleep_flag(1);

    subWriteReg(&(AP_AON->PMCTL2_0),6,6,0x00);   //disable software control
1fff3966:	1090      	lrw      	r4, 0x4000f000	// 1fff39a4 <just_enter_sleep+0x44>
    JUMP_FUNCTION(WAKEUP_PROCESS) = (uint32_t)Reset_Handler;
1fff3968:	b35e      	st.w      	r2, (r3, 0x78)
{
1fff396a:	6d83      	mov      	r6, r0
1fff396c:	e3ffffbe 	bsr      	0x1fff38e8	// 1fff38e8 <_symrom_set_sleep_flag.part.0>
    subWriteReg(&(AP_AON->PMCTL2_0),6,6,0x00);   //disable software control
1fff3970:	9467      	ld.w      	r3, (r4, 0x1c)
1fff3972:	3b86      	bclri      	r3, 6
1fff3974:	b467      	st.w      	r3, (r4, 0x1c)
1fff3976:	6c03      	mov      	r0, r0
    //  config wakeup timer
    uint32_t sleep_tick_now = *(volatile uint32_t *) 0x4000f028;
    WaitRTCCount(1);
1fff3978:	3001      	movi      	r0, 1
    uint32_t sleep_tick_now = *(volatile uint32_t *) 0x4000f028;
1fff397a:	94aa      	ld.w      	r5, (r4, 0x28)
    AP_AON->RTCCC0 = sleep_tick_now + time;
1fff397c:	6158      	addu      	r5, r6
    WaitRTCCount(1);
1fff397e:	e000398d 	bsr      	0x1fffac98	// 1fffac98 <check_before_startup+0x5c0>
    AP_AON->RTCCC0 = sleep_tick_now + time;
1fff3982:	b4ab      	st.w      	r5, (r4, 0x2c)
    AP_AON->RTCCTL |= BIT(15)|BIT(18)|BIT(20);
1fff3984:	32a4      	movi      	r2, 164
1fff3986:	9469      	ld.w      	r3, (r4, 0x24)
1fff3988:	424d      	lsli      	r2, r2, 13
1fff398a:	6cc8      	or      	r3, r2
1fff398c:	b469      	st.w      	r3, (r4, 0x24)
   
    /**
        config reset casue as RSTC_WARM_NDWC
        reset path walkaround dwc
    */
    AP_AON->SLEEP_R[0]=4;
1fff398e:	3304      	movi      	r3, 4

    //  trigger system sleep
    enter_sleep_off_mode(SYSTEM_SLEEP_MODE);
1fff3990:	3001      	movi      	r0, 1
    AP_AON->SLEEP_R[0]=4;
1fff3992:	dc642030 	st.w      	r3, (r4, 0xc0)
    enter_sleep_off_mode(SYSTEM_SLEEP_MODE);
1fff3996:	e0003717 	bsr      	0x1fffa7c4	// 1fffa7c4 <check_before_startup+0xec>
}
1fff399a:	1493      	pop      	r4-r6, r15
1fff399c:	1fff0080 	.long	0x1fff0080
1fff39a0:	1101b90c 	.long	0x1101b90c
1fff39a4:	4000f000 	.long	0x4000f000

1fff39a8 <check_16MXtal_by_rcTracking>:

void check_16MXtal_by_rcTracking(void)
{
1fff39a8:	14d4      	push      	r4-r7, r15
1fff39aa:	1423      	subi      	r14, r14, 12
    /*

        for fiset wakeupini, not do rcCal, just skip the rcTacking
    */

    if(((*(volatile uint32_t*)0x4000f0c4) & 0x80) == 0)
1fff39ac:	126f      	lrw      	r3, 0x4000f080	// 1fff3ae8 <check_16MXtal_by_rcTracking+0x140>
1fff39ae:	9351      	ld.w      	r2, (r3, 0x44)
1fff39b0:	e4422080 	andi      	r2, r2, 128
1fff39b4:	3a40      	cmpnei      	r2, 0
1fff39b6:	0806      	bt      	0x1fff39c2	// 1fff39c2 <check_16MXtal_by_rcTracking+0x1a>
    {
        WaitRTCCount(60);
1fff39b8:	303c      	movi      	r0, 60
1fff39ba:	e000396f 	bsr      	0x1fffac98	// 1fffac98 <check_before_startup+0x5c0>
    temp1 = (*(volatile uint32_t *)0x4000f064 & 0x1ffff);

    subWriteReg(0x4000f05C,3,3,0);

    g_xtal16M_tmp = temp1;
}
1fff39be:	1403      	addi      	r14, r14, 12
1fff39c0:	1494      	pop      	r4-r7, r15
    temp = *(volatile uint32_t *)0x4000f040;
1fff39c2:	12cb      	lrw      	r6, 0x4000f000	// 1fff3aec <check_16MXtal_by_rcTracking+0x144>
1fff39c4:	b862      	st.w      	r3, (r14, 0x8)
    uint32_t tracking_start = rtc_get_counter();
1fff39c6:	e000398d 	bsr      	0x1ffface0	// 1ffface0 <check_before_startup+0x608>
    temp = *(volatile uint32_t *)0x4000f040;
1fff39ca:	9650      	ld.w      	r2, (r6, 0x40)
    *(volatile uint32_t *)0x4000f040 = temp | BIT(18);
1fff39cc:	3ab2      	bseti      	r2, 18
1fff39ce:	b650      	st.w      	r2, (r6, 0x40)
    *(volatile uint32_t *)0x4000f05C = (temp & 0xfffefe00) | 0x0028;
1fff39d0:	1268      	lrw      	r3, 0xfffefe00	// 1fff3af0 <check_16MXtal_by_rcTracking+0x148>
    temp = *(volatile uint32_t *)0x4000f05C;
1fff39d2:	9657      	ld.w      	r2, (r6, 0x5c)
    *(volatile uint32_t *)0x4000f05C = (temp & 0xfffefe00) | 0x0028;
1fff39d4:	688c      	and      	r2, r3
1fff39d6:	ec420028 	ori      	r2, r2, 40
1fff39da:	b657      	st.w      	r2, (r6, 0x5c)
    uint32_t tracking_start = rtc_get_counter();
1fff39dc:	6dc3      	mov      	r7, r0
    WaitRTCCount(3);
1fff39de:	3003      	movi      	r0, 3
1fff39e0:	e000395c 	bsr      	0x1fffac98	// 1fffac98 <check_before_startup+0x5c0>
    temp31 = (*(volatile uint32_t *)0x4000f064 & 0x1ffff);
1fff39e4:	9659      	ld.w      	r2, (r6, 0x64)
    WaitRTCCount(3);
1fff39e6:	3003      	movi      	r0, 3
    temp31 = (*(volatile uint32_t *)0x4000f064 & 0x1ffff);
1fff39e8:	424f      	lsli      	r2, r2, 15
1fff39ea:	4a4f      	lsri      	r2, r2, 15
1fff39ec:	b840      	st.w      	r2, (r14, 0x0)
    WaitRTCCount(3);
1fff39ee:	e0003955 	bsr      	0x1fffac98	// 1fffac98 <check_before_startup+0x5c0>
    WaitRTCCount(3);
1fff39f2:	3003      	movi      	r0, 3
    temp32 = (*(volatile uint32_t *)0x4000f064 & 0x1ffff);
1fff39f4:	9699      	ld.w      	r4, (r6, 0x64)
    WaitRTCCount(3);
1fff39f6:	e0003951 	bsr      	0x1fffac98	// 1fffac98 <check_before_startup+0x5c0>
    temp33 = (*(volatile uint32_t *)0x4000f064 & 0x1ffff);
1fff39fa:	96b9      	ld.w      	r5, (r6, 0x64)
    temp32 = (*(volatile uint32_t *)0x4000f064 & 0x1ffff);
1fff39fc:	448f      	lsli      	r4, r4, 15
    temp33 = (*(volatile uint32_t *)0x4000f064 & 0x1ffff);
1fff39fe:	45af      	lsli      	r5, r5, 15
                uint32_t tracking_sleep_num = (*(volatile uint32_t*)0x4000f0c4 & 0xFF00) >>8;
1fff3a00:	9862      	ld.w      	r3, (r14, 0x8)
        temp33 = (*(volatile uint32_t *)0x4000f064 & 0x1ffff);
1fff3a02:	b8c1      	st.w      	r6, (r14, 0x4)
    temp32 = (*(volatile uint32_t *)0x4000f064 & 0x1ffff);
1fff3a04:	4c8f      	lsri      	r4, r4, 15
    temp33 = (*(volatile uint32_t *)0x4000f064 & 0x1ffff);
1fff3a06:	4daf      	lsri      	r5, r5, 15
                uint32_t tracking_sleep_num = (*(volatile uint32_t*)0x4000f0c4 & 0xFF00) >>8;
1fff3a08:	6d8f      	mov      	r6, r3
1fff3a0a:	9840      	ld.w      	r2, (r14, 0x0)
        if( temp31>CRY32_2_CYCLE_16MHZ_CYCLE_MIN  && 
1fff3a0c:	e422136e 	subi      	r1, r2, 879
1fff3a10:	eb0100c2 	cmphsi      	r1, 195
1fff3a14:	0834      	bt      	0x1fff3a7c	// 1fff3a7c <check_16MXtal_by_rcTracking+0xd4>
            temp31<CRY32_2_CYCLE_16MHZ_CYCLE_MAX  &&
1fff3a16:	e424136e 	subi      	r1, r4, 879
1fff3a1a:	eb0100c2 	cmphsi      	r1, 195
1fff3a1e:	082f      	bt      	0x1fff3a7c	// 1fff3a7c <check_16MXtal_by_rcTracking+0xd4>
            temp32 <CRY32_2_CYCLE_16MHZ_CYCLE_MAX  &&
1fff3a20:	e425136e 	subi      	r1, r5, 879
1fff3a24:	eb0100c2 	cmphsi      	r1, 195
1fff3a28:	082a      	bt      	0x1fff3a7c	// 1fff3a7c <check_16MXtal_by_rcTracking+0xd4>
        temp_max = (temp31 >=temp32) ? (temp31):(temp32);
1fff3a2a:	6508      	cmphs      	r2, r4
1fff3a2c:	6c53      	mov      	r1, r4
1fff3a2e:	c4220c40 	inct      	r1, r2, 0
        temp_min = (temp31 >=temp32) ? (temp32):(temp31);
1fff3a32:	6490      	cmphs      	r4, r2
1fff3a34:	c4440c20 	incf      	r2, r4, 0
        temp_max = (temp_max >=temp33) ? (temp_max):(temp33);
1fff3a38:	6454      	cmphs      	r5, r1
1fff3a3a:	c4250c40 	inct      	r1, r5, 0
        temp_min = (temp_min >=temp33) ? (temp33):(temp_min);
1fff3a3e:	6494      	cmphs      	r5, r2
1fff3a40:	c4450c20 	incf      	r2, r5, 0
            (temp_max-temp_min)<CRY32_2_CYCLE_DELTA_LMT
1fff3a44:	604a      	subu      	r1, r2
            temp33 <CRY32_2_CYCLE_16MHZ_CYCLE_MAX  &&
1fff3a46:	3912      	cmphsi      	r1, 19
1fff3a48:	081a      	bt      	0x1fff3a7c	// 1fff3a7c <check_16MXtal_by_rcTracking+0xd4>
            subWriteReg(0x4000f0c4,3,2,0); 
1fff3a4a:	1168      	lrw      	r3, 0x4000f080	// 1fff3ae8 <check_16MXtal_by_rcTracking+0x140>
1fff3a4c:	9351      	ld.w      	r2, (r3, 0x44)
1fff3a4e:	3a82      	bclri      	r2, 2
1fff3a50:	3a83      	bclri      	r2, 3
1fff3a52:	b351      	st.w      	r2, (r3, 0x44)
1fff3a54:	6c03      	mov      	r0, r0
            subWriteReg(0x4000f0c4,15,8,0);
1fff3a56:	1128      	lrw      	r1, 0xffff00ff	// 1fff3af4 <check_16MXtal_by_rcTracking+0x14c>
1fff3a58:	9351      	ld.w      	r2, (r3, 0x44)
1fff3a5a:	6884      	and      	r2, r1
1fff3a5c:	b351      	st.w      	r2, (r3, 0x44)
1fff3a5e:	6c03      	mov      	r0, r0
    WaitRTCCount(20);
1fff3a60:	3014      	movi      	r0, 20
1fff3a62:	e000391b 	bsr      	0x1fffac98	// 1fffac98 <check_before_startup+0x5c0>
    temp1 = (*(volatile uint32_t *)0x4000f064 & 0x1ffff);
1fff3a66:	1142      	lrw      	r2, 0x4000f000	// 1fff3aec <check_16MXtal_by_rcTracking+0x144>
1fff3a68:	9279      	ld.w      	r3, (r2, 0x64)
    subWriteReg(0x4000f05C,3,3,0);
1fff3a6a:	9237      	ld.w      	r1, (r2, 0x5c)
1fff3a6c:	3983      	bclri      	r1, 3
1fff3a6e:	b237      	st.w      	r1, (r2, 0x5c)
1fff3a70:	6c03      	mov      	r0, r0
    g_xtal16M_tmp = temp1;
1fff3a72:	1142      	lrw      	r2, 0x1fffb738	// 1fff3af8 <check_16MXtal_by_rcTracking+0x150>
    temp1 = (*(volatile uint32_t *)0x4000f064 & 0x1ffff);
1fff3a74:	436f      	lsli      	r3, r3, 15
1fff3a76:	4b6f      	lsri      	r3, r3, 15
    g_xtal16M_tmp = temp1;
1fff3a78:	b260      	st.w      	r3, (r2, 0x0)
1fff3a7a:	07a2      	br      	0x1fff39be	// 1fff39be <check_16MXtal_by_rcTracking+0x16>
        WaitRTCCount(3);
1fff3a7c:	3003      	movi      	r0, 3
1fff3a7e:	e000390d 	bsr      	0x1fffac98	// 1fffac98 <check_before_startup+0x5c0>
        temp33 = (*(volatile uint32_t *)0x4000f064 & 0x1ffff);
1fff3a82:	9861      	ld.w      	r3, (r14, 0x4)
1fff3a84:	9359      	ld.w      	r2, (r3, 0x64)
1fff3a86:	424f      	lsli      	r2, r2, 15
1fff3a88:	4a6f      	lsri      	r3, r2, 15
1fff3a8a:	b860      	st.w      	r3, (r14, 0x0)
        uint32_t tracking_end = rtc_get_counter();
1fff3a8c:	e000392a 	bsr      	0x1ffface0	// 1ffface0 <check_before_startup+0x608>
        uint32_t tracking_16M_tick = (tracking_end>=tracking_start) ? (tracking_end-tracking_start) : (0xffffffff-tracking_start+tracking_end);
1fff3a90:	65c0      	cmphs      	r0, r7
1fff3a92:	0c24      	bf      	0x1fff3ada	// 1fff3ada <check_16MXtal_by_rcTracking+0x132>
1fff3a94:	601e      	subu      	r0, r7
        if(tracking_16M_tick >= TRACKING_16M_TICK_MAX)
1fff3a96:	eb000ce3 	cmphsi      	r0, 3300
1fff3a9a:	0c1c      	bf      	0x1fff3ad2	// 1fff3ad2 <check_16MXtal_by_rcTracking+0x12a>
                uint32_t tracking_sleep_num = (*(volatile uint32_t*)0x4000f0c4 & 0xFF00) >>8;
1fff3a9c:	9611      	ld.w      	r0, (r6, 0x44)
                subWriteReg(0x4000f0c4,15,8,tracking_sleep_num+1);
1fff3a9e:	1076      	lrw      	r3, 0xffff00ff	// 1fff3af4 <check_16MXtal_by_rcTracking+0x14c>
1fff3aa0:	9631      	ld.w      	r1, (r6, 0x44)
                uint32_t tracking_sleep_num = (*(volatile uint32_t*)0x4000f0c4 & 0xFF00) >>8;
1fff3aa2:	c4007080 	xtrb2      	r0, r0
                subWriteReg(0x4000f0c4,15,8,tracking_sleep_num+1);
1fff3aa6:	684c      	and      	r1, r3
1fff3aa8:	5842      	addi      	r2, r0, 1
1fff3aaa:	4248      	lsli      	r2, r2, 8
1fff3aac:	6c84      	or      	r2, r1
1fff3aae:	b651      	st.w      	r2, (r6, 0x44)
1fff3ab0:	6c03      	mov      	r0, r0
                subWriteReg(0x4000f0c4,3,2,1); 
1fff3ab2:	9651      	ld.w      	r2, (r6, 0x44)
1fff3ab4:	3a82      	bclri      	r2, 2
1fff3ab6:	3a83      	bclri      	r2, 3
1fff3ab8:	ec420004 	ori      	r2, r2, 4
1fff3abc:	b651      	st.w      	r2, (r6, 0x44)
1fff3abe:	6c03      	mov      	r0, r0
                if ((1 << tracking_sleep_num)*33000< TRACKING_MAX_SLEEPTIME)
1fff3ac0:	ea0280e8 	movi      	r2, 33000
1fff3ac4:	c4024020 	lsl      	r0, r2, r0
1fff3ac8:	104d      	lrw      	r2, 0x1e365f	// 1fff3afc <check_16MXtal_by_rcTracking+0x154>
1fff3aca:	6409      	cmplt      	r2, r0
1fff3acc:	080b      	bt      	0x1fff3ae2	// 1fff3ae2 <check_16MXtal_by_rcTracking+0x13a>
                    just_enter_sleep(TRACKING_MAX_SLEEPTIME);
1fff3ace:	e3ffff49 	bsr      	0x1fff3960	// 1fff3960 <just_enter_sleep>
{
1fff3ad2:	6c93      	mov      	r2, r4
1fff3ad4:	6d17      	mov      	r4, r5
1fff3ad6:	98a0      	ld.w      	r5, (r14, 0x0)
1fff3ad8:	079a      	br      	0x1fff3a0c	// 1fff3a0c <check_16MXtal_by_rcTracking+0x64>
        uint32_t tracking_16M_tick = (tracking_end>=tracking_start) ? (tracking_end-tracking_start) : (0xffffffff-tracking_start+tracking_end);
1fff3ada:	c4e72482 	nor      	r2, r7, r7
1fff3ade:	6008      	addu      	r0, r2
1fff3ae0:	07db      	br      	0x1fff3a96	// 1fff3a96 <check_16MXtal_by_rcTracking+0xee>
                    just_enter_sleep(TRACKING_MAX_SLEEPTIME);
1fff3ae2:	1008      	lrw      	r0, 0x1e3660	// 1fff3b00 <check_16MXtal_by_rcTracking+0x158>
1fff3ae4:	07f5      	br      	0x1fff3ace	// 1fff3ace <check_16MXtal_by_rcTracking+0x126>
1fff3ae6:	0000      	bkpt
1fff3ae8:	4000f080 	.long	0x4000f080
1fff3aec:	4000f000 	.long	0x4000f000
1fff3af0:	fffefe00 	.long	0xfffefe00
1fff3af4:	ffff00ff 	.long	0xffff00ff
1fff3af8:	1fffb738 	.long	0x1fffb738
1fff3afc:	001e365f 	.long	0x001e365f
1fff3b00:	001e3660 	.long	0x001e3660

1fff3b04 <check_96MXtal_by_rcTracking>:

void check_96MXtal_by_rcTracking(void)
{
1fff3b04:	14d4      	push      	r4-r7, r15
    uint32_t temp,temp1;
    //for first wakeupinit

    if(((*(volatile uint32_t*)0x4000f0c4) & 0x80) == 0)
1fff3b06:	1263      	lrw      	r3, 0x4000f080	// 1fff3c10 <check_96MXtal_by_rcTracking+0x10c>
1fff3b08:	3180      	movi      	r1, 128
1fff3b0a:	9351      	ld.w      	r2, (r3, 0x44)
1fff3b0c:	6884      	and      	r2, r1
1fff3b0e:	1282      	lrw      	r4, 0x4000f000	// 1fff3c14 <check_96MXtal_by_rcTracking+0x110>
1fff3b10:	3a40      	cmpnei      	r2, 0
1fff3b12:	0808      	bt      	0x1fff3b22	// 1fff3b22 <check_96MXtal_by_rcTracking+0x1e>
    {
        //enable DLL
        temp = *(volatile uint32_t *)0x4000f044;
1fff3b14:	9471      	ld.w      	r3, (r4, 0x44)
        *(volatile uint32_t *)0x4000f044 = temp | BIT(7);
1fff3b16:	6cc4      	or      	r3, r1
1fff3b18:	b471      	st.w      	r3, (r4, 0x44)
        WaitRTCCount(3);
1fff3b1a:	3003      	movi      	r0, 3
1fff3b1c:	e00038be 	bsr      	0x1fffac98	// 1fffac98 <check_before_startup+0x5c0>
        g_xtal16M_tmp = (*(volatile uint32_t *)0x4000f064 & 0x1ffff);

        subWriteReg(0x4000f05C,3,3,0);
    }

}
1fff3b20:	1494      	pop      	r4-r7, r15
    DLL_enable_num=0;
1fff3b22:	3300      	movi      	r3, 0
1fff3b24:	11bd      	lrw      	r5, 0x1fffa598	// 1fff3c18 <check_96MXtal_by_rcTracking+0x114>
            if( (g_xtal16M_tmp*6 >=temp1 ? (g_xtal16M_tmp*6 -temp1):(temp1-g_xtal16M_tmp*6))<TRACKING_96M_16M_MULTI6_DELTA_LIMIT)
1fff3b26:	11de      	lrw      	r6, 0x1fffb738	// 1fff3c1c <check_96MXtal_by_rcTracking+0x118>
    DLL_enable_num=0;
1fff3b28:	b560      	st.w      	r3, (r5, 0x0)
    temp = *(volatile uint32_t *)0x4000f040;
1fff3b2a:	9470      	ld.w      	r3, (r4, 0x40)
    *(volatile uint32_t *)0x4000f040 = temp | BIT(18);
1fff3b2c:	3bb2      	bseti      	r3, 18
1fff3b2e:	b470      	st.w      	r3, (r4, 0x40)
        temp = *(volatile uint32_t *)0x4000f044;
1fff3b30:	9471      	ld.w      	r3, (r4, 0x44)
        *(volatile uint32_t *)0x4000f044 = temp | BIT(7);
1fff3b32:	ec630080 	ori      	r3, r3, 128
1fff3b36:	b471      	st.w      	r3, (r4, 0x44)
        WaitRTCCount(3);
1fff3b38:	3003      	movi      	r0, 3
        *(volatile uint32_t *)0x4000f044 = temp | BIT(16);
1fff3b3a:	3705      	movi      	r7, 5
        WaitRTCCount(3);
1fff3b3c:	e00038ae 	bsr      	0x1fffac98	// 1fffac98 <check_before_startup+0x5c0>
        DLL_enable_num++;
1fff3b40:	9560      	ld.w      	r3, (r5, 0x0)
1fff3b42:	2300      	addi      	r3, 1
1fff3b44:	b560      	st.w      	r3, (r5, 0x0)
        temp = *(volatile uint32_t *)0x4000f044;
1fff3b46:	9471      	ld.w      	r3, (r4, 0x44)
        *(volatile uint32_t *)0x4000f044 = temp | BIT(16);
1fff3b48:	3bb0      	bseti      	r3, 16
1fff3b4a:	b471      	st.w      	r3, (r4, 0x44)
            temp = *(volatile uint32_t *)0x4000f05C;
1fff3b4c:	9477      	ld.w      	r3, (r4, 0x5c)
            *(volatile uint32_t *)0x4000f05C = (temp & 0xfffefe00) | 0x0028 | BIT(16);
1fff3b4e:	1155      	lrw      	r2, 0xfffefe00	// 1fff3c20 <check_96MXtal_by_rcTracking+0x11c>
1fff3b50:	68c8      	and      	r3, r2
1fff3b52:	1155      	lrw      	r2, 0x10028	// 1fff3c24 <check_96MXtal_by_rcTracking+0x120>
1fff3b54:	6cc8      	or      	r3, r2
1fff3b56:	b477      	st.w      	r3, (r4, 0x5c)
            WaitRTCCount(3);
1fff3b58:	3003      	movi      	r0, 3
1fff3b5a:	e000389f 	bsr      	0x1fffac98	// 1fffac98 <check_before_startup+0x5c0>
            temp1 = (*(volatile uint32_t *)0x4000f064 & 0x1ffff);
1fff3b5e:	9479      	ld.w      	r3, (r4, 0x64)
            subWriteReg(0x4000f05C,3,3,0);
1fff3b60:	9457      	ld.w      	r2, (r4, 0x5c)
1fff3b62:	3a83      	bclri      	r2, 3
            temp1 = (*(volatile uint32_t *)0x4000f064 & 0x1ffff);
1fff3b64:	436f      	lsli      	r3, r3, 15
1fff3b66:	4b6f      	lsri      	r3, r3, 15
            subWriteReg(0x4000f05C,3,3,0);
1fff3b68:	b457      	st.w      	r2, (r4, 0x5c)
1fff3b6a:	6c03      	mov      	r0, r0
            if( (g_xtal16M_tmp*6 >=temp1 ? (g_xtal16M_tmp*6 -temp1):(temp1-g_xtal16M_tmp*6))<TRACKING_96M_16M_MULTI6_DELTA_LIMIT)
1fff3b6c:	3206      	movi      	r2, 6
1fff3b6e:	9620      	ld.w      	r1, (r6, 0x0)
1fff3b70:	7c84      	mult      	r2, r1
1fff3b72:	64c8      	cmphs      	r2, r3
1fff3b74:	0c19      	bf      	0x1fff3ba6	// 1fff3ba6 <check_96MXtal_by_rcTracking+0xa2>
1fff3b76:	608e      	subu      	r2, r3
1fff3b78:	eb02003b 	cmphsi      	r2, 60
1fff3b7c:	6483      	mvcv      	r2
1fff3b7e:	7488      	zextb      	r2, r2
1fff3b80:	3a40      	cmpnei      	r2, 0
1fff3b82:	0c14      	bf      	0x1fff3baa	// 1fff3baa <check_96MXtal_by_rcTracking+0xa6>
                subWriteReg(0x4000f05C,16,16,0);
1fff3b84:	9457      	ld.w      	r2, (r4, 0x5c)
1fff3b86:	3a90      	bclri      	r2, 16
1fff3b88:	b457      	st.w      	r2, (r4, 0x5c)
1fff3b8a:	6c03      	mov      	r0, r0
                subWriteReg(0x4000f044,16,16,0);
1fff3b8c:	9451      	ld.w      	r2, (r4, 0x44)
1fff3b8e:	3a90      	bclri      	r2, 16
1fff3b90:	b451      	st.w      	r2, (r4, 0x44)
1fff3b92:	6c03      	mov      	r0, r0
                g_xtal96M_temp = temp1;
1fff3b94:	1145      	lrw      	r2, 0x1fffb73c	// 1fff3c28 <check_96MXtal_by_rcTracking+0x124>
1fff3b96:	b260      	st.w      	r3, (r2, 0x0)
                subWriteReg(0x4000f0c4,5,4,0); 
1fff3b98:	105e      	lrw      	r2, 0x4000f080	// 1fff3c10 <check_96MXtal_by_rcTracking+0x10c>
1fff3b9a:	9271      	ld.w      	r3, (r2, 0x44)
1fff3b9c:	3b84      	bclri      	r3, 4
1fff3b9e:	3b85      	bclri      	r3, 5
1fff3ba0:	b271      	st.w      	r3, (r2, 0x44)
1fff3ba2:	6c03      	mov      	r0, r0
1fff3ba4:	07be      	br      	0x1fff3b20	// 1fff3b20 <check_96MXtal_by_rcTracking+0x1c>
            if( (g_xtal16M_tmp*6 >=temp1 ? (g_xtal16M_tmp*6 -temp1):(temp1-g_xtal16M_tmp*6))<TRACKING_96M_16M_MULTI6_DELTA_LIMIT)
1fff3ba6:	5b49      	subu      	r2, r3, r2
1fff3ba8:	07e8      	br      	0x1fff3b78	// 1fff3b78 <check_96MXtal_by_rcTracking+0x74>
1fff3baa:	2f00      	subi      	r7, 1
1fff3bac:	75dc      	zextb      	r7, r7
        for(uint8 index=0;index<5;index++)
1fff3bae:	3f40      	cmpnei      	r7, 0
1fff3bb0:	0bce      	bt      	0x1fff3b4c	// 1fff3b4c <check_96MXtal_by_rcTracking+0x48>
        subWriteReg(0x4000f05C,16,16,0);
1fff3bb2:	9477      	ld.w      	r3, (r4, 0x5c)
1fff3bb4:	3b90      	bclri      	r3, 16
1fff3bb6:	b477      	st.w      	r3, (r4, 0x5c)
1fff3bb8:	6c03      	mov      	r0, r0
        subWriteReg(0x4000f044,16,16,0);
1fff3bba:	9471      	ld.w      	r3, (r4, 0x44)
1fff3bbc:	3b90      	bclri      	r3, 16
1fff3bbe:	b471      	st.w      	r3, (r4, 0x44)
1fff3bc0:	6c03      	mov      	r0, r0
        if(DLL_enable_num>= DLL_ENABLE_MAX)
1fff3bc2:	9560      	ld.w      	r3, (r5, 0x0)
1fff3bc4:	3b04      	cmphsi      	r3, 5
1fff3bc6:	0c0c      	bf      	0x1fff3bde	// 1fff3bde <check_96MXtal_by_rcTracking+0xda>
                subWriteReg(0x4000f0c4,5,4,1); 
1fff3bc8:	1052      	lrw      	r2, 0x4000f080	// 1fff3c10 <check_96MXtal_by_rcTracking+0x10c>
1fff3bca:	9271      	ld.w      	r3, (r2, 0x44)
1fff3bcc:	3b84      	bclri      	r3, 4
1fff3bce:	3b85      	bclri      	r3, 5
1fff3bd0:	ec630010 	ori      	r3, r3, 16
1fff3bd4:	b271      	st.w      	r3, (r2, 0x44)
1fff3bd6:	6c03      	mov      	r0, r0
                just_enter_sleep(60);
1fff3bd8:	303c      	movi      	r0, 60
1fff3bda:	e3fffec3 	bsr      	0x1fff3960	// 1fff3960 <just_enter_sleep>
        subWriteReg(0x4000f044,7,7,0);
1fff3bde:	9471      	ld.w      	r3, (r4, 0x44)
1fff3be0:	3b87      	bclri      	r3, 7
1fff3be2:	b471      	st.w      	r3, (r4, 0x44)
1fff3be4:	6c03      	mov      	r0, r0
        WaitRTCCount(3);
1fff3be6:	3003      	movi      	r0, 3
1fff3be8:	e0003858 	bsr      	0x1fffac98	// 1fffac98 <check_before_startup+0x5c0>
        temp = *(volatile uint32_t *)0x4000f05C;
1fff3bec:	9477      	ld.w      	r3, (r4, 0x5c)
        *(volatile uint32_t *)0x4000f05C = (temp & 0xfffefe00) | 0x0028 ;
1fff3bee:	104d      	lrw      	r2, 0xfffefe00	// 1fff3c20 <check_96MXtal_by_rcTracking+0x11c>
1fff3bf0:	68c8      	and      	r3, r2
1fff3bf2:	ec630028 	ori      	r3, r3, 40
1fff3bf6:	b477      	st.w      	r3, (r4, 0x5c)
        WaitRTCCount(3);
1fff3bf8:	3003      	movi      	r0, 3
1fff3bfa:	e000384f 	bsr      	0x1fffac98	// 1fffac98 <check_before_startup+0x5c0>
        g_xtal16M_tmp = (*(volatile uint32_t *)0x4000f064 & 0x1ffff);
1fff3bfe:	9479      	ld.w      	r3, (r4, 0x64)
1fff3c00:	436f      	lsli      	r3, r3, 15
1fff3c02:	4b6f      	lsri      	r3, r3, 15
1fff3c04:	b660      	st.w      	r3, (r6, 0x0)
        subWriteReg(0x4000f05C,3,3,0);
1fff3c06:	9477      	ld.w      	r3, (r4, 0x5c)
1fff3c08:	3b83      	bclri      	r3, 3
1fff3c0a:	b477      	st.w      	r3, (r4, 0x5c)
1fff3c0c:	6c03      	mov      	r0, r0
1fff3c0e:	0791      	br      	0x1fff3b30	// 1fff3b30 <check_96MXtal_by_rcTracking+0x2c>
1fff3c10:	4000f080 	.long	0x4000f080
1fff3c14:	4000f000 	.long	0x4000f000
1fff3c18:	1fffa598 	.long	0x1fffa598
1fff3c1c:	1fffb738 	.long	0x1fffb738
1fff3c20:	fffefe00 	.long	0xfffefe00
1fff3c24:	00010028 	.long	0x00010028
1fff3c28:	1fffb73c 	.long	0x1fffb73c

1fff3c2c <wakeup_init1>:

uint32_t tracking_cnt=0;
void wakeup_init1() {
1fff3c2c:	14d4      	push      	r4-r7, r15
    uint8_t pktFmt = 1;    // packet format 1: BLE 1M
    uint32_t  temp;
    //int int_state;

    *(volatile uint32_t *)0x40000008 = 0x001961f1;  //
1fff3c2e:	1243      	lrw      	r2, 0x1961f1	// 1fff3d38 <wakeup_init1+0x10c>
1fff3c30:	3380      	movi      	r3, 128
1fff3c32:	4377      	lsli      	r3, r3, 23
1fff3c34:	b342      	st.w      	r2, (r3, 0x8)
    *(volatile uint32_t *)0x40000014 = 0x01e00278;  //
1fff3c36:	1242      	lrw      	r2, 0x1e00278	// 1fff3d3c <wakeup_init1+0x110>

    //each rtc count is about 30.5us
    //after 15count , xtal will be feedout to dll and doubler
    //WaitRTCCount(pGlobal_config[WAKEUP_DELAY]);
    if(g_system_clk == SYS_CLK_XTAL_16M)
1fff3c38:	1282      	lrw      	r4, 0x1fff08a8	// 1fff3d40 <wakeup_init1+0x114>
1fff3c3a:	12c3      	lrw      	r6, 0x1fffa670	// 1fff3d44 <wakeup_init1+0x118>
    *(volatile uint32_t *)0x40000014 = 0x01e00278;  //
1fff3c3c:	b345      	st.w      	r2, (r3, 0x14)
    if(g_system_clk == SYS_CLK_XTAL_16M)
1fff3c3e:	9460      	ld.w      	r3, (r4, 0x0)
1fff3c40:	3b42      	cmpnei      	r3, 2
1fff3c42:	084a      	bt      	0x1fff3cd6	// 1fff3cd6 <wakeup_init1+0xaa>
    {
        WaitRTCCount(pGlobal_config[WAKEUP_DELAY]);
1fff3c44:	9660      	ld.w      	r3, (r6, 0x0)
1fff3c46:	9308      	ld.w      	r0, (r3, 0x20)
1fff3c48:	e0003828 	bsr      	0x1fffac98	// 1fffac98 <check_before_startup+0x5c0>

        pGlobal_config[WAKEUP_ADVANCE] =1500+30*tracking_cnt;
    }

    // ============ config BB Top
    *(volatile uint32_t *) 0x40030000 = 0x3d068001; // set tx pkt =2
1fff3c4c:	115f      	lrw      	r2, 0x3d068001	// 1fff3d48 <wakeup_init1+0x11c>
1fff3c4e:	ea234003 	movih      	r3, 16387
1fff3c52:	b340      	st.w      	r2, (r3, 0x0)
    *(volatile uint32_t *) 0x400300bc = 0x834;      //[7:0] pll_tm [11:8] rxafe settle
1fff3c54:	115e      	lrw      	r2, 0x40030080	// 1fff3d4c <wakeup_init1+0x120>
1fff3c56:	ea030834 	movi      	r3, 2100
1fff3c5a:	b26f      	st.w      	r3, (r2, 0x3c)
    *(volatile uint32_t *) 0x400300a4 = 0x140;      //[6] for tpm_en
1fff3c5c:	33a0      	movi      	r3, 160
1fff3c5e:	4361      	lsli      	r3, r3, 1
1fff3c60:	b269      	st.w      	r3, (r2, 0x24)

    clk_init(g_system_clk);
1fff3c62:	9400      	ld.w      	r0, (r4, 0x0)
1fff3c64:	7400      	zextb      	r0, r0
1fff3c66:	e000368d 	bsr      	0x1fffa980	// 1fffa980 <check_before_startup+0x2a8>
    subWriteReg(0x4000f0c4,1,0,3);
1fff3c6a:	115a      	lrw      	r2, 0x4000f080	// 1fff3d50 <wakeup_init1+0x124>
1fff3c6c:	9271      	ld.w      	r3, (r2, 0x44)
1fff3c6e:	ec630003 	ori      	r3, r3, 3
1fff3c72:	b271      	st.w      	r3, (r2, 0x44)
1fff3c74:	6c03      	mov      	r0, r0
    hal_wakeup_irq_config();
1fff3c76:	e00000cd 	bsr      	0x1fff3e10	// 1fff3e10 <hal_wakeup_irq_config>

    // ========== init timers
   // set_timer(AP_TIM2, 625);      // OSAL 625us tick
    set_timer(AP_TIM3, BASE_TIME_UNITS);   // 1s timer
1fff3c7a:	c6a05021 	bmaski      	r1, 22
1fff3c7e:	1116      	lrw      	r0, 0x40001028	// 1fff3d54 <wakeup_init1+0x128>
1fff3c80:	e00038cc 	bsr      	0x1fffae18	// 1fffae18 <check_before_startup+0x740>
 */
__STATIC_INLINE void csi_vic_enable_irq(int32_t IRQn)
{
    IRQn &= 0x7FUL;

    VIC->ISER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1fff3c84:	1175      	lrw      	r3, 0xe000e100	// 1fff3d58 <wakeup_init1+0x12c>
1fff3c86:	3210      	movi      	r2, 16
    NVIC_EnableIRQ(BB_IRQn);
    NVIC_EnableIRQ(TIM1_IRQn);
    NVIC_DisableIRQ(TIM2_IRQn);
    NVIC_EnableIRQ(TIM4_IRQn);

    ll_hw_set_empty_head(0x0001);
1fff3c88:	3001      	movi      	r0, 1
1fff3c8a:	b340      	st.w      	r2, (r3, 0x0)
1fff3c8c:	3280      	movi      	r2, 128
1fff3c8e:	424d      	lsli      	r2, r2, 13
1fff3c90:	b340      	st.w      	r2, (r3, 0x0)
 */
__STATIC_INLINE void csi_vic_disable_irq(int32_t IRQn)
{
    IRQn &= 0x7FUL;

    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1fff3c92:	3280      	movi      	r2, 128
1fff3c94:	424e      	lsli      	r2, r2, 14
1fff3c96:	dc432020 	st.w      	r2, (r3, 0x80)
    VIC->ISER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1fff3c9a:	3280      	movi      	r2, 128
1fff3c9c:	4250      	lsli      	r2, r2, 16
1fff3c9e:	b340      	st.w      	r2, (r3, 0x0)
1fff3ca0:	e00037c6 	bsr      	0x1fffac2c	// 1fffac2c <check_before_startup+0x554>

    //time related setting
    ll_hw_set_rx_timeout_1st(500);
1fff3ca4:	30fa      	movi      	r0, 250
1fff3ca6:	4001      	lsli      	r0, r0, 1
1fff3ca8:	e0003624 	bsr      	0x1fffa8f0	// 1fffa8f0 <check_before_startup+0x218>
    ll_hw_set_rx_timeout(88);               //ZQ 20180606, reduce rx timeout for power saving
1fff3cac:	3058      	movi      	r0, 88
1fff3cae:	e00035c7 	bsr      	0x1fffa83c	// 1fffa83c <check_before_startup+0x164>
    ll_hw_set_loop_timeout(30000);
1fff3cb2:	ea007530 	movi      	r0, 30000
1fff3cb6:	e0003707 	bsr      	0x1fffaac4	// 1fffaac4 <check_before_startup+0x3ec>

    ll_hw_set_timing(pktFmt);
1fff3cba:	3001      	movi      	r0, 1
1fff3cbc:	e0003530 	bsr      	0x1fffa71c	// 1fffa71c <check_before_startup+0x44>

    ll_hw_ign_rfifo(LL_HW_IGN_SSN | LL_HW_IGN_CRC | LL_HW_IGN_EMP);
1fff3cc0:	3007      	movi      	r0, 7
1fff3cc2:	e00037a9 	bsr      	0x1fffac14	// 1fffac14 <check_before_startup+0x53c>

    // ======== enable tracking 32KHz RC timer with 16MHz crystal clock
    temp = *(volatile uint32_t *)0x4000f05C;
1fff3cc6:	1146      	lrw      	r2, 0x4000f000	// 1fff3d5c <wakeup_init1+0x130>
    *(volatile uint32_t *)0x4000f05C = (temp & 0xfffefe00) | 0x0108; //[16] 16M [8:4] cnt [3] track_en_rc32k
1fff3cc8:	1126      	lrw      	r1, 0xfffefe00	// 1fff3d60 <wakeup_init1+0x134>
    temp = *(volatile uint32_t *)0x4000f05C;
1fff3cca:	9277      	ld.w      	r3, (r2, 0x5c)
    *(volatile uint32_t *)0x4000f05C = (temp & 0xfffefe00) | 0x0108; //[16] 16M [8:4] cnt [3] track_en_rc32k
1fff3ccc:	68c4      	and      	r3, r1
1fff3cce:	ec630108 	ori      	r3, r3, 264
1fff3cd2:	b277      	st.w      	r3, (r2, 0x5c)
}
1fff3cd4:	1494      	pop      	r4-r7, r15
        tracking_c1 = rtc_get_counter();
1fff3cd6:	e0003805 	bsr      	0x1ffface0	// 1ffface0 <check_before_startup+0x608>
        subWriteReg(0x4000f0c4,1,0,0); 
1fff3cda:	10be      	lrw      	r5, 0x4000f080	// 1fff3d50 <wakeup_init1+0x124>
        tracking_c1 = rtc_get_counter();
1fff3cdc:	6dc3      	mov      	r7, r0
        WaitRTCCount(50);
1fff3cde:	3032      	movi      	r0, 50
1fff3ce0:	e00037dc 	bsr      	0x1fffac98	// 1fffac98 <check_before_startup+0x5c0>
        subWriteReg(0x4000f0c4,1,0,0); 
1fff3ce4:	9571      	ld.w      	r3, (r5, 0x44)
1fff3ce6:	3b80      	bclri      	r3, 0
1fff3ce8:	3b81      	bclri      	r3, 1
1fff3cea:	b571      	st.w      	r3, (r5, 0x44)
1fff3cec:	6c03      	mov      	r0, r0
        check_16MXtal_by_rcTracking();
1fff3cee:	e3fffe5d 	bsr      	0x1fff39a8	// 1fff39a8 <check_16MXtal_by_rcTracking>
        WaitRTCCount(16);
1fff3cf2:	3010      	movi      	r0, 16
1fff3cf4:	e00037d2 	bsr      	0x1fffac98	// 1fffac98 <check_before_startup+0x5c0>
        subWriteReg(0x4000f0c4,1,0,1);
1fff3cf8:	9571      	ld.w      	r3, (r5, 0x44)
1fff3cfa:	3b80      	bclri      	r3, 0
1fff3cfc:	3b81      	bclri      	r3, 1
1fff3cfe:	ec630001 	ori      	r3, r3, 1
1fff3d02:	b571      	st.w      	r3, (r5, 0x44)
1fff3d04:	6c03      	mov      	r0, r0
        check_96MXtal_by_rcTracking();
1fff3d06:	e3fffeff 	bsr      	0x1fff3b04	// 1fff3b04 <check_96MXtal_by_rcTracking>
        subWriteReg(0x4000f0c4,1,0,2);
1fff3d0a:	9571      	ld.w      	r3, (r5, 0x44)
1fff3d0c:	3b80      	bclri      	r3, 0
1fff3d0e:	3b81      	bclri      	r3, 1
1fff3d10:	ec630002 	ori      	r3, r3, 2
1fff3d14:	b571      	st.w      	r3, (r5, 0x44)
1fff3d16:	6c03      	mov      	r0, r0
        tracking_c2 = rtc_get_counter();
1fff3d18:	e00037e4 	bsr      	0x1ffface0	// 1ffface0 <check_before_startup+0x608>
        tracking_cnt = (tracking_c2>=tracking_c1) ? (tracking_c2-tracking_c1) : (0xffffffff-tracking_c1+tracking_c2);
1fff3d1c:	65c0      	cmphs      	r0, r7
1fff3d1e:	0c0b      	bf      	0x1fff3d34	// 1fff3d34 <wakeup_init1+0x108>
1fff3d20:	1071      	lrw      	r3, 0x1fffb740	// 1fff3d64 <wakeup_init1+0x138>
1fff3d22:	601e      	subu      	r0, r7
1fff3d24:	b300      	st.w      	r0, (r3, 0x0)
        pGlobal_config[WAKEUP_ADVANCE] =1500+30*tracking_cnt;
1fff3d26:	321e      	movi      	r2, 30
1fff3d28:	9660      	ld.w      	r3, (r6, 0x0)
1fff3d2a:	7c08      	mult      	r0, r2
1fff3d2c:	e40005db 	addi      	r0, r0, 1500
1fff3d30:	b307      	st.w      	r0, (r3, 0x1c)
1fff3d32:	078d      	br      	0x1fff3c4c	// 1fff3c4c <wakeup_init1+0x20>
        tracking_cnt = (tracking_c2>=tracking_c1) ? (tracking_c2-tracking_c1) : (0xffffffff-tracking_c1+tracking_c2);
1fff3d34:	2800      	subi      	r0, 1
1fff3d36:	07f5      	br      	0x1fff3d20	// 1fff3d20 <wakeup_init1+0xf4>
1fff3d38:	001961f1 	.long	0x001961f1
1fff3d3c:	01e00278 	.long	0x01e00278
1fff3d40:	1fff08a8 	.long	0x1fff08a8
1fff3d44:	1fffa670 	.long	0x1fffa670
1fff3d48:	3d068001 	.long	0x3d068001
1fff3d4c:	40030080 	.long	0x40030080
1fff3d50:	4000f080 	.long	0x4000f080
1fff3d54:	40001028 	.long	0x40001028
1fff3d58:	e000e100 	.long	0xe000e100
1fff3d5c:	4000f000 	.long	0x4000f000
1fff3d60:	fffefe00 	.long	0xfffefe00
1fff3d64:	1fffb740 	.long	0x1fffb740

1fff3d68 <drv_pm_sleep_enable>:
    uint64_t sleep_total_us = sleep_total + g_osal_tick_trim;
    sleep_total_us = ((sleep_total_us << 7) + (sleep_total_us << 1) + sleep_total_us) >> 17; //sleep_total_us/1000
    return (uint32_t)(sleep_total_us & 0xFFFFFFFF);
}

void drv_pm_sleep_enable() {
1fff3d68:	14d0      	push      	r15
    enableSleepInPM(0xFF);
1fff3d6a:	30ff      	movi      	r0, 255
1fff3d6c:	e3fffdea 	bsr      	0x1fff3940	// 1fff3940 <enableSleepInPM>
}
1fff3d70:	1490      	pop      	r15

1fff3d72 <drv_pm_sleep_disable>:

void drv_pm_sleep_disable() {
1fff3d72:	14d0      	push      	r15
    disableSleepInPM(0xFF);
1fff3d74:	30ff      	movi      	r0, 255
1fff3d76:	e3fffded 	bsr      	0x1fff3950	// 1fff3950 <disableSleepInPM>
}
1fff3d7a:	1490      	pop      	r15

1fff3d7c <drv_pm_ram_retention>:

int  drv_pm_enter_standby() {
    return csi_pmu_enter_sleep(pmu_handle, PMU_MODE_STANDBY);
}

int drv_pm_ram_retention(uint32_t sram) {
1fff3d7c:	14d0      	push      	r15
    return hal_pwrmgr_RAM_retention(sram);
1fff3d7e:	e0003691 	bsr      	0x1fffaaa0	// 1fffaaa0 <check_before_startup+0x3c8>
}
1fff3d82:	1490      	pop      	r15

1fff3d84 <hal_mpu_config>:

    AP_SPIF->wr_protection = 0x2;
}

void hal_mpu_config(void)
{
1fff3d84:	14c1      	push      	r4
    register uint32_t result;

#ifdef __CK610
    __ASM volatile("mfcr %0, cr19\n" : "=r"(result));
#else
    __ASM volatile("mfcr %0, cr<19, 0>\n" : "=r"(result));
1fff3d86:	c0136023 	mfcr      	r3, cr<19, 0>
    uint32_t result;

#ifdef __CK610
    __ASM volatile("mfcr %0, cr20" : "=r"(result));
#else
    __ASM volatile("mfcr %0, cr<20, 0>" : "=r"(result));
1fff3d8a:	c0146022 	mfcr      	r2, cr<20, 0>
    uint32_t result;

#ifdef __CK610
    __ASM volatile("mfcr %0, cr21" : "=r"(result));
#else
    __ASM volatile("mfcr %0, cr<21, 0>" : "=r"(result));
1fff3d8e:	c0156021 	mfcr      	r1, cr<21, 0>

    capr.w = __get_CAPR();
    pacr.w = __get_PACR();
    prsr.w = __get_PRSR();

    pacr.b.base_addr = (base_addr >> PACR_BASE_ADDR_Pos) & (0x3FFFFFF);
1fff3d92:	347f      	movi      	r4, 127
1fff3d94:	6890      	and      	r2, r4

    prsr.b.RID = idx;
1fff3d96:	3000      	movi      	r0, 0
1fff3d98:	2807      	subi      	r0, 8
1fff3d9a:	6840      	and      	r1, r0
    __ASM volatile("mtcr %0, cr<21, 0>\n" : : "r"(prsr));
1fff3d9c:	c0016435 	mtcr      	r1, cr<21, 0>
        pacr.w &= ~(((1u << (size -6)) - 1) << 7);
    }

    pacr.b.size = size;

    capr.w &= ~((0x1 << idx) | (0x3 << (idx * 2 + 8)) | (0x1 << (idx + 24)));
1fff3da0:	1038      	lrw      	r1, 0xfefffcfe	// 1fff3e00 <hal_mpu_config+0x7c>
1fff3da2:	68c4      	and      	r3, r1
    pacr.b.size = size;
1fff3da4:	ec42003e 	ori      	r2, r2, 62
    capr.w = (capr.w | (attr.nx << idx) | (attr.ap << (idx * 2 + 8)) | (attr.s << (idx + 24)));
1fff3da8:	ec630300 	ori      	r3, r3, 768
    __ASM volatile("mtcr %0, cr<19, 0>\n" : : "r"(capr));
1fff3dac:	c0036433 	mtcr      	r3, cr<19, 0>
    __set_CAPR(capr.w);

    pacr.b.E = enable;
1fff3db0:	3101      	movi      	r1, 1
1fff3db2:	6c84      	or      	r2, r1
    __ASM volatile("mtcr %0, cr<20, 0>\n" : : "r"(pacr));
1fff3db4:	c0026434 	mtcr      	r2, cr<20, 0>
    __ASM volatile("mfcr %0, cr<19, 0>\n" : "=r"(result));
1fff3db8:	c0136022 	mfcr      	r2, cr<19, 0>
    __ASM volatile("mfcr %0, cr<20, 0>" : "=r"(result));
1fff3dbc:	c0146023 	mfcr      	r3, cr<20, 0>
    __ASM volatile("mfcr %0, cr<21, 0>" : "=r"(result));
1fff3dc0:	c0156020 	mfcr      	r0, cr<21, 0>
    pacr.b.base_addr = (base_addr >> PACR_BASE_ADDR_Pos) & (0x3FFFFFF);
1fff3dc4:	68d0      	and      	r3, r4
    prsr.b.RID = idx;
1fff3dc6:	3400      	movi      	r4, 0
1fff3dc8:	2c07      	subi      	r4, 8
1fff3dca:	6810      	and      	r0, r4
    pacr.b.base_addr = (base_addr >> PACR_BASE_ADDR_Pos) & (0x3FFFFFF);
1fff3dcc:	3bb8      	bseti      	r3, 24
1fff3dce:	3bbc      	bseti      	r3, 28
    prsr.b.RID = idx;
1fff3dd0:	6c04      	or      	r0, r1
    __ASM volatile("mtcr %0, cr<21, 0>\n" : : "r"(prsr));
1fff3dd2:	c0006435 	mtcr      	r0, cr<21, 0>
    pacr.b.size = size;
1fff3dd6:	100c      	lrw      	r0, 0x11000041	// 1fff3e04 <hal_mpu_config+0x80>
1fff3dd8:	68c0      	and      	r3, r0
    capr.w &= ~((0x1 << idx) | (0x3 << (idx * 2 + 8)) | (0x1 << (idx + 24)));
1fff3dda:	100c      	lrw      	r0, 0xfdfff3fd	// 1fff3e08 <hal_mpu_config+0x84>
1fff3ddc:	6880      	and      	r2, r0
    capr.w = (capr.w | (attr.nx << idx) | (attr.ap << (idx * 2 + 8)) | (attr.s << (idx + 24)));
1fff3dde:	100c      	lrw      	r0, 0x2000c00	// 1fff3e0c <hal_mpu_config+0x88>
    pacr.b.size = size;
1fff3de0:	ec630024 	ori      	r3, r3, 36
    capr.w = (capr.w | (attr.nx << idx) | (attr.ap << (idx * 2 + 8)) | (attr.s << (idx + 24)));
1fff3de4:	6c80      	or      	r2, r0
    __ASM volatile("mtcr %0, cr<19, 0>\n" : : "r"(capr));
1fff3de6:	c0026433 	mtcr      	r2, cr<19, 0>
    pacr.b.E = enable;
1fff3dea:	6cc4      	or      	r3, r1
    __ASM volatile("mtcr %0, cr<20, 0>\n" : : "r"(pacr));
1fff3dec:	c0036434 	mtcr      	r3, cr<20, 0>
    __ASM volatile("mfcr %0, cr<18, 0>\n"  : "=r"(result));
1fff3df0:	c0126023 	mfcr      	r3, cr<18, 0>
    __set_CCR(__get_CCR() | CCR_MP_Msk);
1fff3df4:	ec630003 	ori      	r3, r3, 3
    __ASM volatile("mtcr %0, cr<18, 0>\n" : : "r"(ccr));
1fff3df8:	c0036432 	mtcr      	r3, cr<18, 0>
    };

    csi_mpu_config_region(0, 0,          REGION_SIZE_4GB, attr0, 1);
    csi_mpu_config_region(1, 0x11000000, REGION_SIZE_512KB, attr1, 1);
    csi_mpu_enable();
}
1fff3dfc:	1481      	pop      	r4
1fff3dfe:	0000      	bkpt
1fff3e00:	fefffcfe 	.long	0xfefffcfe
1fff3e04:	11000041 	.long	0x11000041
1fff3e08:	fdfff3fd 	.long	0xfdfff3fd
1fff3e0c:	02000c00 	.long	0x02000c00

1fff3e10 <hal_wakeup_irq_config>:

void hal_wakeup_irq_config(void)
{
    subWriteReg(0x40003030, 4, 4, 1); //ck802 WFI enable
1fff3e10:	104b      	lrw      	r2, 0x40003000	// 1fff3e3c <hal_wakeup_irq_config+0x2c>
1fff3e12:	926c      	ld.w      	r3, (r2, 0x30)
1fff3e14:	ec630010 	ori      	r3, r3, 16
1fff3e18:	b26c      	st.w      	r3, (r2, 0x30)
1fff3e1a:	6c03      	mov      	r0, r0
    VIC->IWER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1fff3e1c:	1069      	lrw      	r3, 0xe000e100	// 1fff3e40 <hal_wakeup_irq_config+0x30>
1fff3e1e:	3202      	movi      	r2, 2
1fff3e20:	b350      	st.w      	r2, (r3, 0x40)
1fff3e22:	3280      	movi      	r2, 128
1fff3e24:	424d      	lsli      	r2, r2, 13
1fff3e26:	b350      	st.w      	r2, (r3, 0x40)
1fff3e28:	3280      	movi      	r2, 128
1fff3e2a:	424e      	lsli      	r2, r2, 14
1fff3e2c:	b350      	st.w      	r2, (r3, 0x40)
1fff3e2e:	3280      	movi      	r2, 128
1fff3e30:	4250      	lsli      	r2, r2, 16
1fff3e32:	b350      	st.w      	r2, (r3, 0x40)
1fff3e34:	3210      	movi      	r2, 16
1fff3e36:	b350      	st.w      	r2, (r3, 0x40)
    NVIC_SetWakeupIRQ(TIM1_IRQn);
    NVIC_SetWakeupIRQ(TIM2_IRQn);
    //NVIC_SetWakeupIRQ(TIM3_IRQn);
    NVIC_SetWakeupIRQ(TIM4_IRQn);
    NVIC_SetWakeupIRQ(BB_IRQn);
}
1fff3e38:	783c      	jmp      	r15
1fff3e3a:	0000      	bkpt
1fff3e3c:	40003000 	.long	0x40003000
1fff3e40:	e000e100 	.long	0xe000e100

1fff3e44 <ringbuffer_available_read_space>:
    ringbuffer->buffer = NULL;
    ringbuffer->length = ringbuffer->ridx = ringbuffer->widx = 0;
}

int ringbuffer_available_read_space(dev_ringbuf_t *ringbuffer)
{
1fff3e44:	14d1      	push      	r4, r15
1fff3e46:	1421      	subi      	r14, r14, 4
1fff3e48:	6d03      	mov      	r4, r0
    aos_check_param(ringbuffer);
1fff3e4a:	3840      	cmpnei      	r0, 0
1fff3e4c:	080a      	bt      	0x1fff3e60	// 1fff3e60 <ringbuffer_available_read_space+0x1c>
1fff3e4e:	106d      	lrw      	r3, 0x1fffdad8	// 1fff3e80 <ringbuffer_available_read_space+0x3c>
1fff3e50:	3200      	movi      	r2, 0
1fff3e52:	9300      	ld.w      	r0, (r3, 0x0)
1fff3e54:	3100      	movi      	r1, 0
1fff3e56:	ddee2000 	st.w      	r15, (r14, 0x0)
1fff3e5a:	3300      	movi      	r3, 0
1fff3e5c:	e0003604 	bsr      	0x1fffaa64	// 1fffaa64 <check_before_startup+0x38c>

    uint32_t ridx = ringbuffer->ridx;
1fff3e60:	9462      	ld.w      	r3, (r4, 0x8)
    uint32_t widx = ringbuffer->widx;
1fff3e62:	9403      	ld.w      	r0, (r4, 0xc)

    if (ridx == widx) {
1fff3e64:	640e      	cmpne      	r3, r0
1fff3e66:	0c0a      	bf      	0x1fff3e7a	// 1fff3e7a <ringbuffer_available_read_space+0x36>
        return 0;
    } else if (ridx < widx) {
1fff3e68:	640c      	cmphs      	r3, r0
1fff3e6a:	0804      	bt      	0x1fff3e72	// 1fff3e72 <ringbuffer_available_read_space+0x2e>
        return widx - ridx;
    } else {
        return ringbuffer->length - (ridx - widx - 1);
1fff3e6c:	600e      	subu      	r0, r3
    }
}
1fff3e6e:	1401      	addi      	r14, r14, 4
1fff3e70:	1491      	pop      	r4, r15
        return ringbuffer->length - (ridx - widx - 1);
1fff3e72:	9441      	ld.w      	r2, (r4, 0x4)
1fff3e74:	6008      	addu      	r0, r2
1fff3e76:	2000      	addi      	r0, 1
1fff3e78:	07fa      	br      	0x1fff3e6c	// 1fff3e6c <ringbuffer_available_read_space+0x28>
        return 0;
1fff3e7a:	3000      	movi      	r0, 0
1fff3e7c:	07f9      	br      	0x1fff3e6e	// 1fff3e6e <ringbuffer_available_read_space+0x2a>
1fff3e7e:	0000      	bkpt
1fff3e80:	1fffdad8 	.long	0x1fffdad8

1fff3e84 <ringbuffer_write>:

int ringbuffer_write(dev_ringbuf_t *ringbuffer, uint8_t *data, uint32_t length)
{
1fff3e84:	14d4      	push      	r4-r7, r15
1fff3e86:	1421      	subi      	r14, r14, 4
1fff3e88:	6cff      	mov      	r3, r15
    aos_check_param(ringbuffer && data);
1fff3e8a:	3840      	cmpnei      	r0, 0
{
1fff3e8c:	6d03      	mov      	r4, r0
1fff3e8e:	6dc7      	mov      	r7, r1
1fff3e90:	6d4b      	mov      	r5, r2
    aos_check_param(ringbuffer && data);
1fff3e92:	0c03      	bf      	0x1fff3e98	// 1fff3e98 <ringbuffer_write+0x14>
1fff3e94:	3940      	cmpnei      	r1, 0
1fff3e96:	0809      	bt      	0x1fff3ea8	// 1fff3ea8 <ringbuffer_write+0x24>
1fff3e98:	1056      	lrw      	r2, 0x1fffdad8	// 1fff3ef0 <ringbuffer_write+0x6c>
1fff3e9a:	3100      	movi      	r1, 0
1fff3e9c:	9200      	ld.w      	r0, (r2, 0x0)
1fff3e9e:	b860      	st.w      	r3, (r14, 0x0)
1fff3ea0:	3200      	movi      	r2, 0
1fff3ea2:	3300      	movi      	r3, 0
1fff3ea4:	e00035e0 	bsr      	0x1fffaa64	// 1fffaa64 <check_before_startup+0x38c>

    int i = 0;

    if (ringbuffer_available_write_space(ringbuffer) < length) {
1fff3ea8:	6c13      	mov      	r0, r4
1fff3eaa:	94c1      	ld.w      	r6, (r4, 0x4)
1fff3eac:	e3ffffcc 	bsr      	0x1fff3e44	// 1fff3e44 <ringbuffer_available_read_space>
1fff3eb0:	6182      	subu      	r6, r0
1fff3eb2:	6558      	cmphs      	r6, r5
1fff3eb4:	0806      	bt      	0x1fff3ec0	// 1fff3ec0 <ringbuffer_write+0x3c>
        length = ringbuffer_available_write_space(ringbuffer);
1fff3eb6:	6c13      	mov      	r0, r4
1fff3eb8:	94a1      	ld.w      	r5, (r4, 0x4)
1fff3eba:	e3ffffc5 	bsr      	0x1fff3e44	// 1fff3e44 <ringbuffer_available_read_space>
1fff3ebe:	6142      	subu      	r5, r0
1fff3ec0:	6c5f      	mov      	r1, r7
1fff3ec2:	5f14      	addu      	r0, r7, r5
    }

    for (i = 0; i < length; i++) {
1fff3ec4:	6442      	cmpne      	r0, r1
1fff3ec6:	0804      	bt      	0x1fff3ece	// 1fff3ece <ringbuffer_write+0x4a>
        }
    }

    /* return real write len */
    return i;
}
1fff3ec8:	6c17      	mov      	r0, r5
1fff3eca:	1401      	addi      	r14, r14, 4
1fff3ecc:	1494      	pop      	r4-r7, r15
        ringbuffer->buffer[ringbuffer->widx] = data[i];
1fff3ece:	9443      	ld.w      	r2, (r4, 0xc)
1fff3ed0:	9460      	ld.w      	r3, (r4, 0x0)
1fff3ed2:	60c8      	addu      	r3, r2
1fff3ed4:	8140      	ld.b      	r2, (r1, 0x0)
1fff3ed6:	a340      	st.b      	r2, (r3, 0x0)
        ringbuffer->widx++;
1fff3ed8:	9463      	ld.w      	r3, (r4, 0xc)
        if (ringbuffer->widx >= ringbuffer->length + 1) {
1fff3eda:	9441      	ld.w      	r2, (r4, 0x4)
        ringbuffer->widx++;
1fff3edc:	2300      	addi      	r3, 1
        if (ringbuffer->widx >= ringbuffer->length + 1) {
1fff3ede:	2200      	addi      	r2, 1
1fff3ee0:	648c      	cmphs      	r3, r2
        ringbuffer->widx++;
1fff3ee2:	b463      	st.w      	r3, (r4, 0xc)
        if (ringbuffer->widx >= ringbuffer->length + 1) {
1fff3ee4:	0c03      	bf      	0x1fff3eea	// 1fff3eea <ringbuffer_write+0x66>
            ringbuffer->widx = 0;
1fff3ee6:	3300      	movi      	r3, 0
1fff3ee8:	b463      	st.w      	r3, (r4, 0xc)
1fff3eea:	2100      	addi      	r1, 1
1fff3eec:	07ec      	br      	0x1fff3ec4	// 1fff3ec4 <ringbuffer_write+0x40>
1fff3eee:	0000      	bkpt
1fff3ef0:	1fffdad8 	.long	0x1fffdad8

1fff3ef4 <ringbuffer_read>:

int ringbuffer_read(dev_ringbuf_t *ringbuffer, uint8_t *target, uint32_t amount)
{
1fff3ef4:	14d3      	push      	r4-r6, r15
1fff3ef6:	1421      	subi      	r14, r14, 4
1fff3ef8:	6cff      	mov      	r3, r15
    aos_check_param(ringbuffer && target);
1fff3efa:	3840      	cmpnei      	r0, 0
{
1fff3efc:	6d03      	mov      	r4, r0
1fff3efe:	6d47      	mov      	r5, r1
1fff3f00:	6d8b      	mov      	r6, r2
    aos_check_param(ringbuffer && target);
1fff3f02:	0c03      	bf      	0x1fff3f08	// 1fff3f08 <ringbuffer_read+0x14>
1fff3f04:	3940      	cmpnei      	r1, 0
1fff3f06:	0809      	bt      	0x1fff3f18	// 1fff3f18 <ringbuffer_read+0x24>
1fff3f08:	1057      	lrw      	r2, 0x1fffdad8	// 1fff3f64 <ringbuffer_read+0x70>
1fff3f0a:	3100      	movi      	r1, 0
1fff3f0c:	9200      	ld.w      	r0, (r2, 0x0)
1fff3f0e:	b860      	st.w      	r3, (r14, 0x0)
1fff3f10:	3200      	movi      	r2, 0
1fff3f12:	3300      	movi      	r3, 0
1fff3f14:	e00035a8 	bsr      	0x1fffaa64	// 1fffaa64 <check_before_startup+0x38c>

    int copy_sz = 0;
    int i;

    if (amount == 0) {
1fff3f18:	3e40      	cmpnei      	r6, 0
1fff3f1a:	0c22      	bf      	0x1fff3f5e	// 1fff3f5e <ringbuffer_read+0x6a>
        return -1;
    }

    if (ringbuffer_empty(ringbuffer)) {
1fff3f1c:	6c13      	mov      	r0, r4
1fff3f1e:	e3ffff93 	bsr      	0x1fff3e44	// 1fff3e44 <ringbuffer_available_read_space>
1fff3f22:	3840      	cmpnei      	r0, 0
1fff3f24:	0c0b      	bf      	0x1fff3f3a	// 1fff3f3a <ringbuffer_read+0x46>
        return 0;
    }

    /* get real read size */
    int buffer_size = ringbuffer_available_read_space(ringbuffer);
1fff3f26:	6c13      	mov      	r0, r4
1fff3f28:	e3ffff8e 	bsr      	0x1fff3e44	// 1fff3e44 <ringbuffer_available_read_space>
    copy_sz = MIN(amount, buffer_size);

    /* cp data to user buffer */
    for (i = 0; i < copy_sz; i++) {
1fff3f2c:	6cd7      	mov      	r3, r5
    copy_sz = MIN(amount, buffer_size);
1fff3f2e:	6418      	cmphs      	r6, r0
1fff3f30:	c4060c20 	incf      	r0, r6, 0
    for (i = 0; i < copy_sz; i++) {
1fff3f34:	5b55      	subu      	r2, r3, r5
1fff3f36:	6409      	cmplt      	r2, r0
1fff3f38:	0803      	bt      	0x1fff3f3e	// 1fff3f3e <ringbuffer_read+0x4a>
            ringbuffer->ridx = 0;
        }
    }

    return copy_sz;
}
1fff3f3a:	1401      	addi      	r14, r14, 4
1fff3f3c:	1493      	pop      	r4-r6, r15
        target[i] = ringbuffer->buffer[ringbuffer->ridx];
1fff3f3e:	9422      	ld.w      	r1, (r4, 0x8)
1fff3f40:	9440      	ld.w      	r2, (r4, 0x0)
1fff3f42:	6084      	addu      	r2, r1
1fff3f44:	8240      	ld.b      	r2, (r2, 0x0)
1fff3f46:	a340      	st.b      	r2, (r3, 0x0)
        ringbuffer->ridx++;
1fff3f48:	9442      	ld.w      	r2, (r4, 0x8)
        if (ringbuffer->ridx >= ringbuffer->length + 1) {
1fff3f4a:	9421      	ld.w      	r1, (r4, 0x4)
        ringbuffer->ridx++;
1fff3f4c:	2200      	addi      	r2, 1
        if (ringbuffer->ridx >= ringbuffer->length + 1) {
1fff3f4e:	2100      	addi      	r1, 1
1fff3f50:	6448      	cmphs      	r2, r1
        ringbuffer->ridx++;
1fff3f52:	b442      	st.w      	r2, (r4, 0x8)
        if (ringbuffer->ridx >= ringbuffer->length + 1) {
1fff3f54:	0c03      	bf      	0x1fff3f5a	// 1fff3f5a <ringbuffer_read+0x66>
            ringbuffer->ridx = 0;
1fff3f56:	3200      	movi      	r2, 0
1fff3f58:	b442      	st.w      	r2, (r4, 0x8)
1fff3f5a:	2300      	addi      	r3, 1
1fff3f5c:	07ec      	br      	0x1fff3f34	// 1fff3f34 <ringbuffer_read+0x40>
        return -1;
1fff3f5e:	3000      	movi      	r0, 0
1fff3f60:	2800      	subi      	r0, 1
1fff3f62:	07ec      	br      	0x1fff3f3a	// 1fff3f3a <ringbuffer_read+0x46>
1fff3f64:	1fffdad8 	.long	0x1fffdad8

1fff3f68 <aos_kernel_sched_suspend>:
}

/// Suspend the scheduler.
/// \return time in ticks, for how long the system can sleep or power-down.
void aos_kernel_sched_suspend(void)
{
1fff3f68:	14d0      	push      	r15
    if (g_sys_stat == RHINO_RUNNING)
1fff3f6a:	1064      	lrw      	r3, 0x1fffd7e4	// 1fff3f78 <aos_kernel_sched_suspend+0x10>
1fff3f6c:	9360      	ld.w      	r3, (r3, 0x0)
1fff3f6e:	3b43      	cmpnei      	r3, 3
1fff3f70:	0803      	bt      	0x1fff3f76	// 1fff3f76 <aos_kernel_sched_suspend+0xe>
        krhino_sched_disable();
1fff3f72:	e3fff1c1 	bsr      	0x1fff22f4	// 1fff22f4 <krhino_sched_disable>
}
1fff3f76:	1490      	pop      	r15
1fff3f78:	1fffd7e4 	.long	0x1fffd7e4

1fff3f7c <aos_kernel_sched_resume>:

/// Resume the scheduler.
/// \param[in]     sleep_ticks   time in ticks for how long the system was in sleep or power-down mode.
void aos_kernel_sched_resume()
{
1fff3f7c:	14d0      	push      	r15
    if (g_sys_stat == RHINO_RUNNING)
1fff3f7e:	1064      	lrw      	r3, 0x1fffd7e4	// 1fff3f8c <aos_kernel_sched_resume+0x10>
1fff3f80:	9360      	ld.w      	r3, (r3, 0x0)
1fff3f82:	3b43      	cmpnei      	r3, 3
1fff3f84:	0803      	bt      	0x1fff3f8a	// 1fff3f8a <aos_kernel_sched_resume+0xe>
        krhino_sched_enable();
1fff3f86:	e3fff1fd 	bsr      	0x1fff2380	// 1fff2380 <krhino_sched_enable>
}
1fff3f8a:	1490      	pop      	r15
1fff3f8c:	1fffd7e4 	.long	0x1fffd7e4

1fff3f90 <LL_SetExtendedScanEnable>:
extern uint8  g_llScanMode;
llStatus_t LL_SetExtendedScanEnable(uint8 enable,
                                    uint8 filter_duplicates,
                                    uint16 duration,
                                    uint16 period)
{
1fff3f90:	14d2      	push      	r4-r5, r15
    // TODO: sanity checking
    if (g_llScanMode == LL_MODE_LEGACY) {
1fff3f92:	1097      	lrw      	r4, 0x1fff088c	// 1fff3fec <LL_SetExtendedScanEnable+0x5c>
1fff3f94:	84a0      	ld.b      	r5, (r4, 0x0)
1fff3f96:	3d40      	cmpnei      	r5, 0
1fff3f98:	0c28      	bf      	0x1fff3fe8	// 1fff3fe8 <LL_SetExtendedScanEnable+0x58>
        return LL_STATUS_ERROR_COMMAND_DISALLOWED;
    }

    g_llScanMode = LL_MODE_EXTENDED;
1fff3f9a:	3501      	movi      	r5, 1
    extScanInfo.filterDuplicate = filter_duplicates;
    extScanInfo.duration = duration;
    extScanInfo.period   = period;

    // trigger scan task
    if (enable == TRUE) {
1fff3f9c:	3841      	cmpnei      	r0, 1
    g_llScanMode = LL_MODE_EXTENDED;
1fff3f9e:	a4a0      	st.b      	r5, (r4, 0x0)
    extScanInfo.enable = enable;
1fff3fa0:	1094      	lrw      	r4, 0x1fff1500	// 1fff3ff0 <LL_SetExtendedScanEnable+0x60>
    extScanInfo.period   = period;
1fff3fa2:	ac6d      	st.h      	r3, (r4, 0x1a)
    extScanInfo.enable = enable;
1fff3fa4:	a400      	st.b      	r0, (r4, 0x0)
    extScanInfo.filterDuplicate = filter_duplicates;
1fff3fa6:	a436      	st.b      	r1, (r4, 0x16)
    extScanInfo.duration = duration;
1fff3fa8:	ac4c      	st.h      	r2, (r4, 0x18)
    if (enable == TRUE) {
1fff3faa:	080e      	bt      	0x1fff3fc6	// 1fff3fc6 <LL_SetExtendedScanEnable+0x36>
        extScanInfo.current_index = 0;
1fff3fac:	3300      	movi      	r3, 0
        extScanInfo.current_chn = LL_ADV_CHAN_FIRST;
        extScanInfo.current_scan_PHY = extScanInfo.scanPHYs[extScanInfo.current_index];

        extScanInfo.adv_data_offset = 0;

        llSetupExtScan1(extScanInfo.current_chn);
1fff3fae:	3025      	movi      	r0, 37
        extScanInfo.current_index = 0;
1fff3fb0:	a47c      	st.b      	r3, (r4, 0x1c)
        extScanInfo.current_chn = LL_ADV_CHAN_FIRST;
1fff3fb2:	3325      	movi      	r3, 37
1fff3fb4:	a47e      	st.b      	r3, (r4, 0x1e)
        extScanInfo.current_scan_PHY = extScanInfo.scanPHYs[extScanInfo.current_index];
1fff3fb6:	846a      	ld.b      	r3, (r4, 0xa)
1fff3fb8:	a47d      	st.b      	r3, (r4, 0x1d)
        extScanInfo.adv_data_offset = 0;
1fff3fba:	3300      	movi      	r3, 0
1fff3fbc:	ac70      	st.h      	r3, (r4, 0x20)
        llSetupExtScan1(extScanInfo.current_chn);
1fff3fbe:	e0002489 	bsr      	0x1fff88d0	// 1fff88d0 <llSetupExtScan1>
            }
        }
        patch_scanMode = PATCH_SCAN_NONE;
    }

    return LL_STATUS_SUCCESS;
1fff3fc2:	3000      	movi      	r0, 0
}
1fff3fc4:	1492      	pop      	r4-r5, r15
        patch_extScan_deleteAllNode();
1fff3fc6:	e000210f 	bsr      	0x1fff81e4	// 1fff81e4 <patch_extScan_deleteAllNode>
        ll_hw_set_rx_timeout(88);
1fff3fca:	3058      	movi      	r0, 88
1fff3fcc:	e0003438 	bsr      	0x1fffa83c	// 1fffa83c <check_before_startup+0x164>
        while (read_reg(&llWaitingIrq) == TRUE)
1fff3fd0:	1069      	lrw      	r3, 0x10000001	// 1fff3ff4 <LL_SetExtendedScanEnable+0x64>
1fff3fd2:	102a      	lrw      	r1, 0x1fff0df8	// 1fff3ff8 <LL_SetExtendedScanEnable+0x68>
1fff3fd4:	9140      	ld.w      	r2, (r1, 0x0)
1fff3fd6:	3a41      	cmpnei      	r2, 1
1fff3fd8:	0804      	bt      	0x1fff3fe0	// 1fff3fe0 <LL_SetExtendedScanEnable+0x50>
1fff3fda:	2b00      	subi      	r3, 1
            if (count++ > 0xfffffff)
1fff3fdc:	3b40      	cmpnei      	r3, 0
1fff3fde:	0bfb      	bt      	0x1fff3fd4	// 1fff3fd4 <LL_SetExtendedScanEnable+0x44>
        patch_scanMode = PATCH_SCAN_NONE;
1fff3fe0:	1067      	lrw      	r3, 0x1fffb8d4	// 1fff3ffc <LL_SetExtendedScanEnable+0x6c>
1fff3fe2:	3200      	movi      	r2, 0
1fff3fe4:	a340      	st.b      	r2, (r3, 0x0)
1fff3fe6:	07ee      	br      	0x1fff3fc2	// 1fff3fc2 <LL_SetExtendedScanEnable+0x32>
        return LL_STATUS_ERROR_COMMAND_DISALLOWED;
1fff3fe8:	300c      	movi      	r0, 12
1fff3fea:	07ed      	br      	0x1fff3fc4	// 1fff3fc4 <LL_SetExtendedScanEnable+0x34>
1fff3fec:	1fff088c 	.long	0x1fff088c
1fff3ff0:	1fff1500 	.long	0x1fff1500
1fff3ff4:	10000001 	.long	0x10000001
1fff3ff8:	1fff0df8 	.long	0x1fff0df8
1fff3ffc:	1fffb8d4 	.long	0x1fffb8d4

1fff4000 <rf_phy_ana_cfg>:
 * @param       None.
 *
 * @return      None.
 */
void rf_phy_ana_cfg(void)
{
1fff4000:	14c1      	push      	r4
    //-------------------------------------------------------------------
    //               RF_PHY RX ADC CLOCK Config
    subWriteReg(0x4000f040, 18, 18, 0x01); // xtal output to digital enable : ALWAYS Set 1
1fff4002:	117b      	lrw      	r3, 0x4000f000	// 1fff40ec <rf_phy_ana_cfg+0xec>
1fff4004:	9350      	ld.w      	r2, (r3, 0x40)
1fff4006:	3ab2      	bseti      	r2, 18
1fff4008:	b350      	st.w      	r2, (r3, 0x40)
1fff400a:	6c03      	mov      	r0, r0

    subWriteReg(0x4000f044, 25, 24, g_rxAdcClkSel);
1fff400c:	1139      	lrw      	r1, 0x1fff08a4	// 1fff40f0 <rf_phy_ana_cfg+0xf0>
1fff400e:	9351      	ld.w      	r2, (r3, 0x44)
1fff4010:	9100      	ld.w      	r0, (r1, 0x0)
1fff4012:	4018      	lsli      	r0, r0, 24
1fff4014:	3a98      	bclri      	r2, 24
1fff4016:	3a99      	bclri      	r2, 25
1fff4018:	6c80      	or      	r2, r0
1fff401a:	b351      	st.w      	r2, (r3, 0x44)
1fff401c:	6c03      	mov      	r0, r0
    subWriteReg(0x4000f044, 23, 22, g_rfPhyClkSel);
1fff401e:	1156      	lrw      	r2, 0x1fff0e7c	// 1fff40f4 <rf_phy_ana_cfg+0xf4>
1fff4020:	9311      	ld.w      	r0, (r3, 0x44)
1fff4022:	9280      	ld.w      	r4, (r2, 0x0)
1fff4024:	4496      	lsli      	r4, r4, 22
1fff4026:	3896      	bclri      	r0, 22
1fff4028:	3897      	bclri      	r0, 23
1fff402a:	6c10      	or      	r0, r4
1fff402c:	b311      	st.w      	r0, (r3, 0x44)
1fff402e:	6c03      	mov      	r0, r0

    subWriteReg(0x4000f044, 6,   5, 0x03);    // trim dll/dbl ldo vout
1fff4030:	9311      	ld.w      	r0, (r3, 0x44)
1fff4032:	ec000060 	ori      	r0, r0, 96
1fff4036:	b311      	st.w      	r0, (r3, 0x44)
1fff4038:	6c03      	mov      	r0, r0

    if ((g_rxAdcClkSel == RX_ADC_CLK_SEL_32M_DBL)
1fff403a:	9100      	ld.w      	r0, (r1, 0x0)
1fff403c:	3842      	cmpnei      	r0, 2
1fff403e:	0c0a      	bf      	0x1fff4052	// 1fff4052 <rf_phy_ana_cfg+0x52>
        || (g_rxAdcClkSel == RX_ADC_CLK_SEL_32M_DBL_B)
1fff4040:	9100      	ld.w      	r0, (r1, 0x0)
1fff4042:	3841      	cmpnei      	r0, 1
1fff4044:	0c07      	bf      	0x1fff4052	// 1fff4052 <rf_phy_ana_cfg+0x52>
        || (g_rfPhyClkSel == RF_PHY_CLK_SEL_32M_DBL)
1fff4046:	9200      	ld.w      	r0, (r2, 0x0)
1fff4048:	3842      	cmpnei      	r0, 2
1fff404a:	0c04      	bf      	0x1fff4052	// 1fff4052 <rf_phy_ana_cfg+0x52>
        || (g_rfPhyClkSel == RF_PHY_CLK_SEL_32M_DBL_B)) {
1fff404c:	9200      	ld.w      	r0, (r2, 0x0)
1fff404e:	3841      	cmpnei      	r0, 1
1fff4050:	0806      	bt      	0x1fff405c	// 1fff405c <rf_phy_ana_cfg+0x5c>
        // enable dbl for rf
        subWriteReg(0x4000f044, 8, 8, 0x01);  // DBL EN,DLL EN,DLL LDO EN
1fff4052:	9311      	ld.w      	r0, (r3, 0x44)
1fff4054:	ec000100 	ori      	r0, r0, 256
1fff4058:	b311      	st.w      	r0, (r3, 0x44)
1fff405a:	6c03      	mov      	r0, r0
    }

    if ((g_rxAdcClkSel == RX_ADC_CLK_SEL_32M_DLL)
1fff405c:	9160      	ld.w      	r3, (r1, 0x0)
1fff405e:	3b43      	cmpnei      	r3, 3
1fff4060:	1163      	lrw      	r3, 0x4000f000	// 1fff40ec <rf_phy_ana_cfg+0xec>
1fff4062:	0c04      	bf      	0x1fff406a	// 1fff406a <rf_phy_ana_cfg+0x6a>
        || (g_rfPhyClkSel == RF_PHY_CLK_SEL_32M_DLL)
1fff4064:	9220      	ld.w      	r1, (r2, 0x0)
1fff4066:	3943      	cmpnei      	r1, 3
1fff4068:	0806      	bt      	0x1fff4074	// 1fff4074 <rf_phy_ana_cfg+0x74>
       ) {
        // enable dll for rf
        subWriteReg(0x4000f044, 7, 7, 0x01);  // DLL ensable
1fff406a:	9331      	ld.w      	r1, (r3, 0x44)
1fff406c:	ec210080 	ori      	r1, r1, 128
1fff4070:	b331      	st.w      	r1, (r3, 0x44)
1fff4072:	6c03      	mov      	r0, r0
    }

    subWriteReg(0x4000f044, 19, 18, 0x03);    // Rx adc clk en, rf phy clk en
1fff4074:	9331      	ld.w      	r1, (r3, 0x44)
1fff4076:	39b2      	bseti      	r1, 18
1fff4078:	39b3      	bseti      	r1, 19
1fff407a:	b331      	st.w      	r1, (r3, 0x44)
1fff407c:	6c03      	mov      	r0, r0
        subWriteReg(0x4000f044, 26, 25, 0x00);
    }

#endif

    if (g_rfPhyClkSel == RF_PHY_CLK_SEL_16M_XTAL && g_system_clk == SYS_CLK_DLL_48M) {
1fff407e:	9260      	ld.w      	r3, (r2, 0x0)
1fff4080:	3b40      	cmpnei      	r3, 0
1fff4082:	107e      	lrw      	r3, 0x40030080	// 1fff40f8 <rf_phy_ana_cfg+0xf8>
1fff4084:	0831      	bt      	0x1fff40e6	// 1fff40e6 <rf_phy_ana_cfg+0xe6>
1fff4086:	103e      	lrw      	r1, 0x1fff08a8	// 1fff40fc <rf_phy_ana_cfg+0xfc>
1fff4088:	9120      	ld.w      	r1, (r1, 0x0)
1fff408a:	3943      	cmpnei      	r1, 3
1fff408c:	082d      	bt      	0x1fff40e6	// 1fff40e6 <rf_phy_ana_cfg+0xe6>
        subWriteReg(0x4003008c, 23, 23, 0x01);
1fff408e:	9323      	ld.w      	r1, (r3, 0xc)
1fff4090:	39b7      	bseti      	r1, 23
    } else {
        subWriteReg(0x4003008c, 23, 23, 0x00);
1fff4092:	b323      	st.w      	r1, (r3, 0xc)
1fff4094:	6c03      	mov      	r0, r0
    }

    //-------------------------------------------------------------------
    //               PLL
    PHY_REG_WT(0x400300cc, 0x20000bc0); // i_pll_ctrl0 :
1fff4096:	1079      	lrw      	r3, 0x40030080	// 1fff40f8 <rf_phy_ana_cfg+0xf8>
1fff4098:	103a      	lrw      	r1, 0x20000bc0	// 1fff4100 <rf_phy_ana_cfg+0x100>
    //PHY_REG_WT(0x400300cc,0x20000fc0);  // i_pll_ctrl0 :
    //-------------------------------------------------------------------
    //TX PLL BW
    PHY_REG_WT(0x400300d0, 0x00000180); // i_pll_ctrl1//cp:1e0->f,180->c
    PHY_REG_WT(0x400300d4, 0x076a3e7a); // i_pll_ctrl2 pll lpf, boost vco current[7:4]
1fff409a:	109b      	lrw      	r4, 0x76a3e7a	// 1fff4104 <rf_phy_ana_cfg+0x104>
    PHY_REG_WT(0x400300cc, 0x20000bc0); // i_pll_ctrl0 :
1fff409c:	b333      	st.w      	r1, (r3, 0x4c)
    PHY_REG_WT(0x400300d8, 0x04890000); // i_pll_ctrl3 vco/tp varactor
1fff409e:	ea200489 	movih      	r0, 1161
    PHY_REG_WT(0x400300d0, 0x00000180); // i_pll_ctrl1//cp:1e0->f,180->c
1fff40a2:	31c0      	movi      	r1, 192
1fff40a4:	4121      	lsli      	r1, r1, 1
1fff40a6:	b334      	st.w      	r1, (r3, 0x50)
    PHY_REG_WT(0x400300d4, 0x076a3e7a); // i_pll_ctrl2 pll lpf, boost vco current[7:4]
1fff40a8:	b395      	st.w      	r4, (r3, 0x54)
    PHY_REG_WT(0x400300d8, 0x04890000); // i_pll_ctrl3 vco/tp varactor
1fff40aa:	b316      	st.w      	r0, (r3, 0x58)

    //-------------------------------------------------------------------
    //RX PLL BW active when rx_en
    PHY_REG_WT(0x40030104, 0x00000180); // i_pll_ctrl5
1fff40ac:	1017      	lrw      	r0, 0x40030100	// 1fff4108 <rf_phy_ana_cfg+0x108>
1fff40ae:	b021      	st.w      	r1, (r0, 0x4)
    PHY_REG_WT(0x40030108, 0x076a3e7a); // i_pll_ctrl6 pll lpf, boost vco current[7:4]
    PHY_REG_WT(0x4003010c, 0x04898000); // i_pll_ctrl7 vco/tp varactor
1fff40b0:	1037      	lrw      	r1, 0x4898000	// 1fff410c <rf_phy_ana_cfg+0x10c>
    PHY_REG_WT(0x40030108, 0x076a3e7a); // i_pll_ctrl6 pll lpf, boost vco current[7:4]
1fff40b2:	b082      	st.w      	r4, (r0, 0x8)
    PHY_REG_WT(0x4003010c, 0x04898000); // i_pll_ctrl7 vco/tp varactor
1fff40b4:	b023      	st.w      	r1, (r0, 0xc)


    //-------------------------------------------------------------------
    //VCO Coarse Tuning Setting
    PHY_REG_WT(0x40030080, 0x000024cc); //[11:10] vco coarse tune slot time
1fff40b6:	ea0124cc 	movi      	r1, 9420
1fff40ba:	b320      	st.w      	r1, (r3, 0x0)
    //[9:7] delay from pll reset ends to start vco coarse tune

    //-------------------------------------------------------------------
    //PLL config for rfPhyClk=16M
    if (g_rfPhyClkSel == RF_PHY_CLK_SEL_16M_XTAL) {
1fff40bc:	9240      	ld.w      	r2, (r2, 0x0)
1fff40be:	3a40      	cmpnei      	r2, 0
1fff40c0:	0806      	bt      	0x1fff40cc	// 1fff40cc <rf_phy_ana_cfg+0xcc>
        subWriteReg(0x40030080, 0, 0, 1);//indicate 16M reference clk to rfpll
1fff40c2:	9340      	ld.w      	r2, (r3, 0x0)
1fff40c4:	ec420001 	ori      	r2, r2, 1
1fff40c8:	b340      	st.w      	r2, (r3, 0x0)
1fff40ca:	6c03      	mov      	r0, r0
    }

    //-------------------------------------------------------------------
    //               Tx PA
    //PHY_REG_WT(0x400300b8,0x0000f825);  // pa ramp reg, txPower for 0dBm
    PHY_REG_WT(0x400300b8, 0x0825 | (((g_rfPhyTxPower) & 0x1f) << 12)); // pa ramp reg, txPower for g_rfPhyTxPower
1fff40cc:	1071      	lrw      	r3, 0x1fff08ac	// 1fff4110 <rf_phy_ana_cfg+0x110>
1fff40ce:	32f8      	movi      	r2, 248
1fff40d0:	8360      	ld.b      	r3, (r3, 0x0)
1fff40d2:	4249      	lsli      	r2, r2, 9
1fff40d4:	436c      	lsli      	r3, r3, 12
1fff40d6:	68c8      	and      	r3, r2
1fff40d8:	1048      	lrw      	r2, 0x40030080	// 1fff40f8 <rf_phy_ana_cfg+0xf8>
1fff40da:	ec630825 	ori      	r3, r3, 2085
1fff40de:	b26e      	st.w      	r3, (r2, 0x38)
    //PHY_REG_WT(0x400300b0,0x01000003);  // dac dly

    //-------------------------------------------------------------------
    //               Rx FrontEnd
    //PHY_REG_WT(0x400300dc,0x01be7f2f);      //
    PHY_REG_WT(0x400300dc, 0x01a6fc2f);     // boost TIA current
1fff40e0:	106d      	lrw      	r3, 0x1a6fc2f	// 1fff4114 <rf_phy_ana_cfg+0x114>
1fff40e2:	b277      	st.w      	r3, (r2, 0x5c)
    //-------------------------------------------------------------------
    //PA override
    //subWriteReg(0x400300a0,0,0,1);       //pa override
    //subWriteReg(0x400300a4,0,0,1);       //pa on
    //subWriteReg(0x400300a4,8,8,0);       //pa set b
}
1fff40e4:	1481      	pop      	r4
        subWriteReg(0x4003008c, 23, 23, 0x00);
1fff40e6:	9323      	ld.w      	r1, (r3, 0xc)
1fff40e8:	3997      	bclri      	r1, 23
1fff40ea:	07d4      	br      	0x1fff4092	// 1fff4092 <rf_phy_ana_cfg+0x92>
1fff40ec:	4000f000 	.long	0x4000f000
1fff40f0:	1fff08a4 	.long	0x1fff08a4
1fff40f4:	1fff0e7c 	.long	0x1fff0e7c
1fff40f8:	40030080 	.long	0x40030080
1fff40fc:	1fff08a8 	.long	0x1fff08a8
1fff4100:	20000bc0 	.long	0x20000bc0
1fff4104:	076a3e7a 	.long	0x076a3e7a
1fff4108:	40030100 	.long	0x40030100
1fff410c:	04898000 	.long	0x04898000
1fff4110:	1fff08ac 	.long	0x1fff08ac
1fff4114:	01a6fc2f 	.long	0x01a6fc2f

1fff4118 <rf_phy_bb_cfg>:
 * @param       None.
 *
 * @return      None.
 */
void rf_phy_bb_cfg(uint8_t pktFmt)
{
1fff4118:	14d2      	push      	r4-r5, r15
    //BW Sel and Gauss sel
    if (pktFmt == 0 || pktFmt == 2) {
1fff411a:	e46020fd 	andi      	r3, r0, 253
{
1fff411e:	6d43      	mov      	r5, r0
    if (pktFmt == 0 || pktFmt == 2) {
1fff4120:	3b40      	cmpnei      	r3, 0
1fff4122:	33e0      	movi      	r3, 224
1fff4124:	1251      	lrw      	r2, 0x40030080	// 1fff4268 <rf_phy_bb_cfg+0x150>
1fff4126:	436d      	lsli      	r3, r3, 13
1fff4128:	1231      	lrw      	r1, 0x1fff0e7c	// 1fff426c <rf_phy_bb_cfg+0x154>
1fff412a:	084d      	bt      	0x1fff41c4	// 1fff41c4 <rf_phy_bb_cfg+0xac>
        PHY_REG_WT(0x400300e0, 0x00000080);   // set pga bw use small bw for zigbee and BLE2M
1fff412c:	3080      	movi      	r0, 128
1fff412e:	b218      	st.w      	r0, (r2, 0x60)
        subWriteReg(0x400300d8, 20, 18, 0x02); // tpm dac var
1fff4130:	9216      	ld.w      	r0, (r2, 0x58)
1fff4132:	c4602043 	andn      	r3, r0, r3
1fff4136:	3bb3      	bseti      	r3, 19
1fff4138:	b276      	st.w      	r3, (r2, 0x58)
1fff413a:	6c03      	mov      	r0, r0

        if (g_rfPhyClkSel == RF_PHY_CLK_SEL_16M_XTAL) {
1fff413c:	9160      	ld.w      	r3, (r1, 0x0)
1fff413e:	3b40      	cmpnei      	r3, 0
            PHY_REG_WT(0x40030090, 0x00080000);    // set reg_dc
1fff4140:	3380      	movi      	r3, 128
        if (g_rfPhyClkSel == RF_PHY_CLK_SEL_16M_XTAL) {
1fff4142:	084e      	bt      	0x1fff41de	// 1fff41de <rf_phy_bb_cfg+0xc6>
            PHY_REG_WT(0x40030090, 0x00080000);    // set reg_dc
1fff4144:	436c      	lsli      	r3, r3, 12
        subWriteReg(0x400300d8, 20, 18, 0x01); // tpm dac var

        if (g_rfPhyClkSel == RF_PHY_CLK_SEL_16M_XTAL) {
            PHY_REG_WT(0x40030090, 0x00040000);    // set reg_dc
        } else { 
            PHY_REG_WT(0x40030090, 0x00020000);    // set reg_dc
1fff4146:	b264      	st.w      	r3, (r2, 0x10)
        }
    }


    PHY_REG_WT(0x400300b0, 0x01000003);                 // dac dly
1fff4148:	1248      	lrw      	r2, 0x40030080	// 1fff4268 <rf_phy_bb_cfg+0x150>
1fff414a:	126a      	lrw      	r3, 0x1000003	// 1fff4270 <rf_phy_bb_cfg+0x158>
    PHY_REG_WT(0x40030094, 0x00001000 + g_rfPhyTpCal0); // tp_cal val

    //pktFmt Setting and syncThd
    if (pktFmt == 0) {
1fff414c:	3d40      	cmpnei      	r5, 0
    PHY_REG_WT(0x400300b0, 0x01000003);                 // dac dly
1fff414e:	b26c      	st.w      	r3, (r2, 0x30)
1fff4150:	ea244003 	movih      	r4, 16387
    PHY_REG_WT(0x40030094, 0x00001000 + g_rfPhyTpCal0); // tp_cal val
1fff4154:	1268      	lrw      	r3, 0x1fff08ad	// 1fff4274 <rf_phy_bb_cfg+0x15c>
1fff4156:	8360      	ld.b      	r3, (r3, 0x0)
1fff4158:	e4630fff 	addi      	r3, r3, 4096
1fff415c:	b265      	st.w      	r3, (r2, 0x14)
    if (pktFmt == 0) {
1fff415e:	0844      	bt      	0x1fff41e6	// 1fff41e6 <rf_phy_bb_cfg+0xce>
        PHY_REG_WT(0x40030000, 0x78068000);
1fff4160:	1266      	lrw      	r3, 0x78068000	// 1fff4278 <rf_phy_bb_cfg+0x160>
        PHY_REG_WT(0x40030048, 0x00000000);   //clr crc and wtSeed
        PHY_REG_WT(0x40030040, 0x000b2800);   // disable gauss
        PHY_REG_WT(0x4003004c, 0x3675ee07);

        ll_hw_set_crc_fmt(LL_HW_CRC_ZB_FMT, LL_HW_CRC_ZB_FMT);
1fff4162:	3103      	movi      	r1, 3
        PHY_REG_WT(0x40030000, 0x78068000);
1fff4164:	b460      	st.w      	r3, (r4, 0x0)
        PHY_REG_WT(0x40030048, 0x00000000);   //clr crc and wtSeed
1fff4166:	3300      	movi      	r3, 0
        ll_hw_set_crc_fmt(LL_HW_CRC_ZB_FMT, LL_HW_CRC_ZB_FMT);
1fff4168:	3003      	movi      	r0, 3
        PHY_REG_WT(0x40030048, 0x00000000);   //clr crc and wtSeed
1fff416a:	b472      	st.w      	r3, (r4, 0x48)
        PHY_REG_WT(0x40030040, 0x000b2800);   // disable gauss
1fff416c:	1264      	lrw      	r3, 0xb2800	// 1fff427c <rf_phy_bb_cfg+0x164>
1fff416e:	b470      	st.w      	r3, (r4, 0x40)
        PHY_REG_WT(0x4003004c, 0x3675ee07);
1fff4170:	1264      	lrw      	r3, 0x3675ee07	// 1fff4280 <rf_phy_bb_cfg+0x168>
1fff4172:	b473      	st.w      	r3, (r4, 0x4c)
        ll_hw_set_crc_fmt(LL_HW_CRC_ZB_FMT, LL_HW_CRC_ZB_FMT);
1fff4174:	e00035b0 	bsr      	0x1fffacd4	// 1fffacd4 <check_before_startup+0x5fc>
    }


    //Agc Control Setting
    if (pktFmt == 0) {
        PHY_REG_WT(0x40030050, 0x22086680);
1fff4178:	1263      	lrw      	r3, 0x22086680	// 1fff4284 <rf_phy_bb_cfg+0x16c>
    } else if (pktFmt == 2) {
        PHY_REG_WT(0x40030050, 0x22084580);
1fff417a:	b474      	st.w      	r3, (r4, 0x50)
    }

    // add by ZQ 20181030 for DLE feature
    // set to 255
    // need considering the ADV PDU in BLE 5.0
    subWriteReg(0x4003000c, 7, 0, 0xff);
1fff417c:	ea234003 	movih      	r3, 16387
1fff4180:	9343      	ld.w      	r2, (r3, 0xc)
1fff4182:	ec4200ff 	ori      	r2, r2, 255
1fff4186:	b343      	st.w      	r2, (r3, 0xc)
1fff4188:	6c03      	mov      	r0, r0


    //AGC TAB with LNA two gain step,no bypass lna mode
    //20200721 for tsop 6252
	#if 1
    PHY_REG_WT(0x40030054, 0x545c9ca4);
1fff418a:	1240      	lrw      	r2, 0x545c9ca4	// 1fff4288 <rf_phy_bb_cfg+0x170>
    PHY_REG_WT(0x40030074, 0x191f252b);

#endif
	#if(RF_PHY_EXT_PREAMBLE_US)
    //ext preamble for BLE 1M/2M, nByte
    if(pktFmt==PKT_FMT_BLE1M)
1fff418c:	3d41      	cmpnei      	r5, 1
    PHY_REG_WT(0x40030054, 0x545c9ca4);
1fff418e:	b355      	st.w      	r2, (r3, 0x54)
    PHY_REG_WT(0x40030058, 0x4243444c);
1fff4190:	115f      	lrw      	r2, 0x4243444c	// 1fff428c <rf_phy_bb_cfg+0x174>
    {
        subWriteReg(0x40030040, 7, 5, (RF_PHY_EXT_PREAMBLE_US>>3) ); // 1byte -> 8us
1fff4192:	3100      	movi      	r1, 0
    PHY_REG_WT(0x40030058, 0x4243444c);
1fff4194:	b356      	st.w      	r2, (r3, 0x58)
    PHY_REG_WT(0x4003005c, 0x464c5241);
1fff4196:	115f      	lrw      	r2, 0x464c5241	// 1fff4290 <rf_phy_bb_cfg+0x178>
        subWriteReg(0x40030040, 7, 5, (RF_PHY_EXT_PREAMBLE_US>>3) ); // 1byte -> 8us
1fff4198:	29e0      	subi      	r1, 225
    PHY_REG_WT(0x4003005c, 0x464c5241);
1fff419a:	b357      	st.w      	r2, (r3, 0x5c)
    PHY_REG_WT(0x40030060, 0x2e343a40);
1fff419c:	115e      	lrw      	r2, 0x2e343a40	// 1fff4294 <rf_phy_bb_cfg+0x17c>
1fff419e:	b358      	st.w      	r2, (r3, 0x60)
    PHY_REG_WT(0x40030064, 0x557f0028);
1fff41a0:	115e      	lrw      	r2, 0x557f0028	// 1fff4298 <rf_phy_bb_cfg+0x180>
1fff41a2:	b359      	st.w      	r2, (r3, 0x64)
    PHY_REG_WT(0x40030068, 0x3d43494f);
1fff41a4:	115e      	lrw      	r2, 0x3d43494f	// 1fff429c <rf_phy_bb_cfg+0x184>
1fff41a6:	b35a      	st.w      	r2, (r3, 0x68)
    PHY_REG_WT(0x4003006c, 0x4c2b3137);
1fff41a8:	115e      	lrw      	r2, 0x4c2b3137	// 1fff42a0 <rf_phy_bb_cfg+0x188>
1fff41aa:	b35b      	st.w      	r2, (r3, 0x6c)
    PHY_REG_WT(0x40030070, 0x343a4046);
1fff41ac:	115e      	lrw      	r2, 0x343a4046	// 1fff42a4 <rf_phy_bb_cfg+0x18c>
1fff41ae:	b35c      	st.w      	r2, (r3, 0x70)
    PHY_REG_WT(0x40030074, 0x1c22282e);
1fff41b0:	115e      	lrw      	r2, 0x1c22282e	// 1fff42a8 <rf_phy_bb_cfg+0x190>
1fff41b2:	b35d      	st.w      	r2, (r3, 0x74)
        subWriteReg(0x40030040, 7, 5, (RF_PHY_EXT_PREAMBLE_US>>3) ); // 1byte -> 8us
1fff41b4:	9350      	ld.w      	r2, (r3, 0x40)
1fff41b6:	6884      	and      	r2, r1
    if(pktFmt==PKT_FMT_BLE1M)
1fff41b8:	0852      	bt      	0x1fff425c	// 1fff425c <rf_phy_bb_cfg+0x144>
        subWriteReg(0x40030040, 7, 5, (RF_PHY_EXT_PREAMBLE_US>>3) ); // 1byte -> 8us
1fff41ba:	ec420020 	ori      	r2, r2, 32
    {
        subWriteReg(0x40030040, 7, 5, (RF_PHY_EXT_PREAMBLE_US>>2) );//2 byte -> 8us
    }
	else
    {
        subWriteReg(0x40030040, 7, 5, (0) );
1fff41be:	b350      	st.w      	r2, (r3, 0x40)
1fff41c0:	6c03      	mov      	r0, r0
    }
#endif
}
1fff41c2:	1492      	pop      	r4-r5, r15
1fff41c4:	3080      	movi      	r0, 128
1fff41c6:	4001      	lsli      	r0, r0, 1
        PHY_REG_WT(0x400300e0, 0x00000100);   // set pga bw
1fff41c8:	b218      	st.w      	r0, (r2, 0x60)
        subWriteReg(0x400300d8, 20, 18, 0x01); // tpm dac var,default value->1
1fff41ca:	9216      	ld.w      	r0, (r2, 0x58)
1fff41cc:	c4602043 	andn      	r3, r0, r3
1fff41d0:	3bb2      	bseti      	r3, 18
1fff41d2:	b276      	st.w      	r3, (r2, 0x58)
        subWriteReg(0x400300d8, 20, 18, 0x01); // tpm dac var
1fff41d4:	6c03      	mov      	r0, r0
        if (g_rfPhyClkSel == RF_PHY_CLK_SEL_16M_XTAL) {
1fff41d6:	9160      	ld.w      	r3, (r1, 0x0)
1fff41d8:	3b40      	cmpnei      	r3, 0
            PHY_REG_WT(0x40030090, 0x00040000);    // set reg_dc
1fff41da:	3380      	movi      	r3, 128
        if (g_rfPhyClkSel == RF_PHY_CLK_SEL_16M_XTAL) {
1fff41dc:	0803      	bt      	0x1fff41e2	// 1fff41e2 <rf_phy_bb_cfg+0xca>
            PHY_REG_WT(0x40030090, 0x00040000);    // set reg_dc
1fff41de:	436b      	lsli      	r3, r3, 11
1fff41e0:	07b3      	br      	0x1fff4146	// 1fff4146 <rf_phy_bb_cfg+0x2e>
            PHY_REG_WT(0x40030090, 0x00020000);    // set reg_dc
1fff41e2:	436a      	lsli      	r3, r3, 10
1fff41e4:	07b1      	br      	0x1fff4146	// 1fff4146 <rf_phy_bb_cfg+0x2e>
    } else if (pktFmt == 1) {
1fff41e6:	3d41      	cmpnei      	r5, 1
1fff41e8:	0809      	bt      	0x1fff41fa	// 1fff41fa <rf_phy_bb_cfg+0xe2>
        PHY_REG_WT(0x40030000, 0x3d068001);
1fff41ea:	1171      	lrw      	r3, 0x3d068001	// 1fff42ac <rf_phy_bb_cfg+0x194>
1fff41ec:	b460      	st.w      	r3, (r4, 0x0)
        PHY_REG_WT(0x40030048, 0x37555555);
1fff41ee:	1171      	lrw      	r3, 0x37555555	// 1fff42b0 <rf_phy_bb_cfg+0x198>
1fff41f0:	b472      	st.w      	r3, (r4, 0x48)
        PHY_REG_WT(0x40030040, 0x00032800);   // enable gauss
1fff41f2:	33ca      	movi      	r3, 202
1fff41f4:	436a      	lsli      	r3, r3, 10
        PHY_REG_WT(0x40030040, 0x000b2800);   // enable gauss
1fff41f6:	b470      	st.w      	r3, (r4, 0x40)
1fff41f8:	0420      	br      	0x1fff4238	// 1fff4238 <rf_phy_bb_cfg+0x120>
    } else if (pktFmt == 2) {
1fff41fa:	3d42      	cmpnei      	r5, 2
1fff41fc:	0810      	bt      	0x1fff421c	// 1fff421c <rf_phy_bb_cfg+0x104>
        PHY_REG_WT(0x40030000, 0x3d068002);
1fff41fe:	116e      	lrw      	r3, 0x3d068002	// 1fff42b4 <rf_phy_bb_cfg+0x19c>
        ll_hw_set_crc_fmt(LL_HW_CRC_BLE_FMT, LL_HW_CRC_BLE_FMT);
1fff4200:	3102      	movi      	r1, 2
        PHY_REG_WT(0x40030000, 0x3d068002);
1fff4202:	b460      	st.w      	r3, (r4, 0x0)
        PHY_REG_WT(0x40030048, 0x37555555);
1fff4204:	116b      	lrw      	r3, 0x37555555	// 1fff42b0 <rf_phy_bb_cfg+0x198>
        ll_hw_set_crc_fmt(LL_HW_CRC_BLE_FMT, LL_HW_CRC_BLE_FMT);
1fff4206:	3002      	movi      	r0, 2
        PHY_REG_WT(0x40030048, 0x37555555);
1fff4208:	b472      	st.w      	r3, (r4, 0x48)
        PHY_REG_WT(0x40030040, 0x00032800);   // enable gauss
1fff420a:	33ca      	movi      	r3, 202
1fff420c:	436a      	lsli      	r3, r3, 10
1fff420e:	b470      	st.w      	r3, (r4, 0x40)
        PHY_REG_WT(0x4003004c, 0x8e89bed6);
1fff4210:	116a      	lrw      	r3, 0x8e89bed6	// 1fff42b8 <rf_phy_bb_cfg+0x1a0>
1fff4212:	b473      	st.w      	r3, (r4, 0x4c)
        ll_hw_set_crc_fmt(LL_HW_CRC_BLE_FMT, LL_HW_CRC_BLE_FMT);
1fff4214:	e0003560 	bsr      	0x1fffacd4	// 1fffacd4 <check_before_startup+0x5fc>
        PHY_REG_WT(0x40030050, 0x22084580);
1fff4218:	1169      	lrw      	r3, 0x22084580	// 1fff42bc <rf_phy_bb_cfg+0x1a4>
1fff421a:	07b0      	br      	0x1fff417a	// 1fff417a <rf_phy_bb_cfg+0x62>
    } else if (pktFmt == 3 || pktFmt == 4) {
1fff421c:	5d6b      	subi      	r3, r5, 3
1fff421e:	74cc      	zextb      	r3, r3
1fff4220:	3b01      	cmphsi      	r3, 2
1fff4222:	0816      	bt      	0x1fff424e	// 1fff424e <rf_phy_bb_cfg+0x136>
        PHY_REG_WT(0x40030000, 0x98068000 | pktFmt); //for tx set differnt phy
1fff4224:	1167      	lrw      	r3, 0x98068000	// 1fff42c0 <rf_phy_bb_cfg+0x1a8>
1fff4226:	6cd4      	or      	r3, r5
1fff4228:	b460      	st.w      	r3, (r4, 0x0)
        PHY_REG_WT(0x40030004, 0x50985a54);         //for RSSI >-90 set higher syncThd=0x98
1fff422a:	1167      	lrw      	r3, 0x50985a54	// 1fff42c4 <rf_phy_bb_cfg+0x1ac>
1fff422c:	b461      	st.w      	r3, (r4, 0x4)
        PHY_REG_WT(0x40030040, 0x00032800);   // enable gauss
1fff422e:	33ca      	movi      	r3, 202
1fff4230:	436a      	lsli      	r3, r3, 10
1fff4232:	b470      	st.w      	r3, (r4, 0x40)
        PHY_REG_WT(0x40030048, 0x37555555);
1fff4234:	107f      	lrw      	r3, 0x37555555	// 1fff42b0 <rf_phy_bb_cfg+0x198>
1fff4236:	b472      	st.w      	r3, (r4, 0x48)
        PHY_REG_WT(0x4003004c, 0x8e89bed6);
1fff4238:	1160      	lrw      	r3, 0x8e89bed6	// 1fff42b8 <rf_phy_bb_cfg+0x1a0>
        ll_hw_set_crc_fmt(LL_HW_CRC_BLE_FMT, LL_HW_CRC_BLE_FMT);
1fff423a:	3102      	movi      	r1, 2
        PHY_REG_WT(0x4003004c, 0x8e89bed6);
1fff423c:	b473      	st.w      	r3, (r4, 0x4c)
        ll_hw_set_crc_fmt(LL_HW_CRC_BLE_FMT, LL_HW_CRC_BLE_FMT);
1fff423e:	3002      	movi      	r0, 2
1fff4240:	e000354a 	bsr      	0x1fffacd4	// 1fffacd4 <check_before_startup+0x5fc>
        PHY_REG_WT(0x40030050, 0x22085580);
1fff4244:	1141      	lrw      	r2, 0x22085580	// 1fff42c8 <rf_phy_bb_cfg+0x1b0>
1fff4246:	ea234003 	movih      	r3, 16387
1fff424a:	b354      	st.w      	r2, (r3, 0x50)
1fff424c:	0798      	br      	0x1fff417c	// 1fff417c <rf_phy_bb_cfg+0x64>
        PHY_REG_WT(0x40030000, 0x42068000 | pktFmt);
1fff424e:	1160      	lrw      	r3, 0x42068000	// 1fff42cc <rf_phy_bb_cfg+0x1b4>
1fff4250:	6cd4      	or      	r3, r5
1fff4252:	b460      	st.w      	r3, (r4, 0x0)
        PHY_REG_WT(0x40030048, 0x00555555);
1fff4254:	107f      	lrw      	r3, 0x555555	// 1fff42d0 <rf_phy_bb_cfg+0x1b8>
1fff4256:	b472      	st.w      	r3, (r4, 0x48)
        PHY_REG_WT(0x40030040, 0x000b2800);   // enable gauss
1fff4258:	1069      	lrw      	r3, 0xb2800	// 1fff427c <rf_phy_bb_cfg+0x164>
1fff425a:	07ce      	br      	0x1fff41f6	// 1fff41f6 <rf_phy_bb_cfg+0xde>
    else if(pktFmt == PKT_FMT_BLE2M)
1fff425c:	3d42      	cmpnei      	r5, 2
1fff425e:	0bb0      	bt      	0x1fff41be	// 1fff41be <rf_phy_bb_cfg+0xa6>
        subWriteReg(0x40030040, 7, 5, (RF_PHY_EXT_PREAMBLE_US>>2) );//2 byte -> 8us
1fff4260:	ec420040 	ori      	r2, r2, 64
1fff4264:	07ad      	br      	0x1fff41be	// 1fff41be <rf_phy_bb_cfg+0xa6>
1fff4266:	0000      	bkpt
1fff4268:	40030080 	.long	0x40030080
1fff426c:	1fff0e7c 	.long	0x1fff0e7c
1fff4270:	01000003 	.long	0x01000003
1fff4274:	1fff08ad 	.long	0x1fff08ad
1fff4278:	78068000 	.long	0x78068000
1fff427c:	000b2800 	.long	0x000b2800
1fff4280:	3675ee07 	.long	0x3675ee07
1fff4284:	22086680 	.long	0x22086680
1fff4288:	545c9ca4 	.long	0x545c9ca4
1fff428c:	4243444c 	.long	0x4243444c
1fff4290:	464c5241 	.long	0x464c5241
1fff4294:	2e343a40 	.long	0x2e343a40
1fff4298:	557f0028 	.long	0x557f0028
1fff429c:	3d43494f 	.long	0x3d43494f
1fff42a0:	4c2b3137 	.long	0x4c2b3137
1fff42a4:	343a4046 	.long	0x343a4046
1fff42a8:	1c22282e 	.long	0x1c22282e
1fff42ac:	3d068001 	.long	0x3d068001
1fff42b0:	37555555 	.long	0x37555555
1fff42b4:	3d068002 	.long	0x3d068002
1fff42b8:	8e89bed6 	.long	0x8e89bed6
1fff42bc:	22084580 	.long	0x22084580
1fff42c0:	98068000 	.long	0x98068000
1fff42c4:	50985a54 	.long	0x50985a54
1fff42c8:	22085580 	.long	0x22085580
1fff42cc:	42068000 	.long	0x42068000
1fff42d0:	00555555 	.long	0x00555555

1fff42d4 <rf_phy_change_cfg0>:


void rf_phy_change_cfg0(uint8_t pktFmt)
{
1fff42d4:	14c1      	push      	r4
1fff42d6:	33e0      	movi      	r3, 224
    //BW Sel and Gauss sel
    if (pktFmt == PKT_FMT_BLE2M) {
1fff42d8:	3842      	cmpnei      	r0, 2
1fff42da:	1147      	lrw      	r2, 0x40030080	// 1fff4374 <rf_phy_change_cfg0+0xa0>
1fff42dc:	436d      	lsli      	r3, r3, 13
1fff42de:	1127      	lrw      	r1, 0x1fff0e7c	// 1fff4378 <rf_phy_change_cfg0+0xa4>
1fff42e0:	0820      	bt      	0x1fff4320	// 1fff4320 <rf_phy_change_cfg0+0x4c>
        PHY_REG_WT(0x400300e0, 0x00000080);   // set pga bw use small bw for zigbee and BLE2M
1fff42e2:	3080      	movi      	r0, 128
1fff42e4:	b218      	st.w      	r0, (r2, 0x60)
        subWriteReg(0x400300d8, 20, 18, 0x02); // tpm dac var
1fff42e6:	9216      	ld.w      	r0, (r2, 0x58)
1fff42e8:	c4602043 	andn      	r3, r0, r3
1fff42ec:	3bb3      	bseti      	r3, 19
1fff42ee:	b276      	st.w      	r3, (r2, 0x58)
1fff42f0:	6c03      	mov      	r0, r0

        if (g_rfPhyClkSel == RF_PHY_CLK_SEL_16M_XTAL) {
1fff42f2:	9160      	ld.w      	r3, (r1, 0x0)
1fff42f4:	3b40      	cmpnei      	r3, 0
            PHY_REG_WT(0x40030090, 0x00080000);    // set reg_dc
1fff42f6:	3380      	movi      	r3, 128
        if (g_rfPhyClkSel == RF_PHY_CLK_SEL_16M_XTAL) {
1fff42f8:	0812      	bt      	0x1fff431c	// 1fff431c <rf_phy_change_cfg0+0x48>
            PHY_REG_WT(0x40030090, 0x00080000);    // set reg_dc
1fff42fa:	436c      	lsli      	r3, r3, 12
        } else {
            PHY_REG_WT(0x40030090, 0x00040000);    // set reg_dc
1fff42fc:	b264      	st.w      	r3, (r2, 0x10)

    //pktFmt Setting and syncThd
    if (pktFmt == PKT_FMT_BLE1M) {
        PHY_REG_WT(0x40030000, 0x3d068001);
    } else if (pktFmt == PKT_FMT_BLE2M) {
        PHY_REG_WT(0x40030000, 0x3d068002);
1fff42fe:	1160      	lrw      	r3, 0x3d068002	// 1fff437c <rf_phy_change_cfg0+0xa8>
1fff4300:	ea224003 	movih      	r2, 16387
1fff4304:	b260      	st.w      	r3, (r2, 0x0)

    //Agc Control Setting
    if (pktFmt == PKT_FMT_BLE1M) {
        PHY_REG_WT(0x40030050, 0x22086680);
    } else if (pktFmt == PKT_FMT_BLE2M) {
        PHY_REG_WT(0x40030050, 0x22084580);
1fff4306:	107f      	lrw      	r3, 0x22084580	// 1fff4380 <rf_phy_change_cfg0+0xac>
		{
			subWriteReg(0x40030040, 7, 5, (RF_PHY_EXT_PREAMBLE_US>>3) ); // 1byte -> 8us
		}
		else if(pktFmt == PKT_FMT_BLE2M)
		{
			subWriteReg(0x40030040, 7, 5, (RF_PHY_EXT_PREAMBLE_US>>2) );//2 byte -> 8us
1fff4308:	3100      	movi      	r1, 0
        PHY_REG_WT(0x40030050, 0x22084580);
1fff430a:	b274      	st.w      	r3, (r2, 0x50)
			subWriteReg(0x40030040, 7, 5, (RF_PHY_EXT_PREAMBLE_US>>2) );//2 byte -> 8us
1fff430c:	29e0      	subi      	r1, 225
1fff430e:	9270      	ld.w      	r3, (r2, 0x40)
1fff4310:	68c4      	and      	r3, r1
1fff4312:	ec630040 	ori      	r3, r3, 64
1fff4316:	b270      	st.w      	r3, (r2, 0x40)
		}
		else
		{
			subWriteReg(0x40030040, 7, 5, (0) );
1fff4318:	6c03      	mov      	r0, r0
		}
#endif

    //gpio_write(P34, 0);

}
1fff431a:	1481      	pop      	r4
            PHY_REG_WT(0x40030090, 0x00040000);    // set reg_dc
1fff431c:	436b      	lsli      	r3, r3, 11
1fff431e:	07ef      	br      	0x1fff42fc	// 1fff42fc <rf_phy_change_cfg0+0x28>
        PHY_REG_WT(0x400300e0, 0x00000080);   // set pga bw
1fff4320:	3480      	movi      	r4, 128
1fff4322:	b298      	st.w      	r4, (r2, 0x60)
        subWriteReg(0x400300d8, 20, 18, 0x01); // tpm dac var
1fff4324:	9296      	ld.w      	r4, (r2, 0x58)
1fff4326:	c4642043 	andn      	r3, r4, r3
1fff432a:	3bb2      	bseti      	r3, 18
1fff432c:	b276      	st.w      	r3, (r2, 0x58)
1fff432e:	6c03      	mov      	r0, r0
        if (g_rfPhyClkSel == RF_PHY_CLK_SEL_16M_XTAL) {
1fff4330:	9160      	ld.w      	r3, (r1, 0x0)
1fff4332:	3b40      	cmpnei      	r3, 0
            PHY_REG_WT(0x40030090, 0x00040000);    // set reg_dc
1fff4334:	3380      	movi      	r3, 128
        if (g_rfPhyClkSel == RF_PHY_CLK_SEL_16M_XTAL) {
1fff4336:	0813      	bt      	0x1fff435c	// 1fff435c <rf_phy_change_cfg0+0x88>
            PHY_REG_WT(0x40030090, 0x00040000);    // set reg_dc
1fff4338:	436b      	lsli      	r3, r3, 11
    if (pktFmt == PKT_FMT_BLE1M) {
1fff433a:	3841      	cmpnei      	r0, 1
            PHY_REG_WT(0x40030090, 0x00020000);    // set reg_dc
1fff433c:	b264      	st.w      	r3, (r2, 0x10)
1fff433e:	ea234003 	movih      	r3, 16387
    if (pktFmt == PKT_FMT_BLE1M) {
1fff4342:	080f      	bt      	0x1fff4360	// 1fff4360 <rf_phy_change_cfg0+0x8c>
        PHY_REG_WT(0x40030000, 0x3d068001);
1fff4344:	1050      	lrw      	r2, 0x3d068001	// 1fff4384 <rf_phy_change_cfg0+0xb0>
			subWriteReg(0x40030040, 7, 5, (RF_PHY_EXT_PREAMBLE_US>>3) ); // 1byte -> 8us
1fff4346:	3100      	movi      	r1, 0
        PHY_REG_WT(0x40030000, 0x3d068001);
1fff4348:	b340      	st.w      	r2, (r3, 0x0)
        PHY_REG_WT(0x40030050, 0x22086680);
1fff434a:	1050      	lrw      	r2, 0x22086680	// 1fff4388 <rf_phy_change_cfg0+0xb4>
			subWriteReg(0x40030040, 7, 5, (RF_PHY_EXT_PREAMBLE_US>>3) ); // 1byte -> 8us
1fff434c:	29e0      	subi      	r1, 225
        PHY_REG_WT(0x40030050, 0x22086680);
1fff434e:	b354      	st.w      	r2, (r3, 0x50)
			subWriteReg(0x40030040, 7, 5, (RF_PHY_EXT_PREAMBLE_US>>3) ); // 1byte -> 8us
1fff4350:	9350      	ld.w      	r2, (r3, 0x40)
1fff4352:	6884      	and      	r2, r1
1fff4354:	ec420020 	ori      	r2, r2, 32
			subWriteReg(0x40030040, 7, 5, (0) );
1fff4358:	b350      	st.w      	r2, (r3, 0x40)
1fff435a:	07df      	br      	0x1fff4318	// 1fff4318 <rf_phy_change_cfg0+0x44>
            PHY_REG_WT(0x40030090, 0x00020000);    // set reg_dc
1fff435c:	436a      	lsli      	r3, r3, 10
1fff435e:	07ee      	br      	0x1fff433a	// 1fff433a <rf_phy_change_cfg0+0x66>
        PHY_REG_WT(0x40030000, 0x98068000 | pktFmt); //for tx set differnt phy
1fff4360:	104b      	lrw      	r2, 0x98068000	// 1fff438c <rf_phy_change_cfg0+0xb8>
1fff4362:	6c08      	or      	r0, r2
        PHY_REG_WT(0x40030050, 0x22085580);
1fff4364:	104b      	lrw      	r2, 0x22085580	// 1fff4390 <rf_phy_change_cfg0+0xbc>
        PHY_REG_WT(0x40030000, 0x98068000 | pktFmt); //for tx set differnt phy
1fff4366:	b300      	st.w      	r0, (r3, 0x0)
        PHY_REG_WT(0x40030050, 0x22085580);
1fff4368:	b354      	st.w      	r2, (r3, 0x50)
			subWriteReg(0x40030040, 7, 5, (0) );
1fff436a:	3100      	movi      	r1, 0
1fff436c:	9350      	ld.w      	r2, (r3, 0x40)
1fff436e:	29e0      	subi      	r1, 225
1fff4370:	6884      	and      	r2, r1
1fff4372:	07f3      	br      	0x1fff4358	// 1fff4358 <rf_phy_change_cfg0+0x84>
1fff4374:	40030080 	.long	0x40030080
1fff4378:	1fff0e7c 	.long	0x1fff0e7c
1fff437c:	3d068002 	.long	0x3d068002
1fff4380:	22084580 	.long	0x22084580
1fff4384:	3d068001 	.long	0x3d068001
1fff4388:	22086680 	.long	0x22086680
1fff438c:	98068000 	.long	0x98068000
1fff4390:	22085580 	.long	0x22085580

1fff4394 <rf_tp_cal>:
 * @param       none
 *
 * @return      kCal    : cal result for rfChn.
 */
uint8_t rf_tp_cal(uint8_t rfChn, uint8_t fDev)
{
1fff4394:	14d2      	push      	r4-r5, r15
1fff4396:	1421      	subi      	r14, r14, 4

    PHY_REG_WT(0x40030040, 0x00030010);         // enable test mode not to generate txdone
1fff4398:	1242      	lrw      	r2, 0x30010	// 1fff44a0 <rf_tp_cal+0x10c>
1fff439a:	ea234003 	movih      	r3, 16387
1fff439e:	b350      	st.w      	r2, (r3, 0x40)
1fff43a0:	1241      	lrw      	r2, 0x40030080	// 1fff44a4 <rf_tp_cal+0x110>

    if (fDev == 1) {
1fff43a2:	3941      	cmpnei      	r1, 1
1fff43a4:	33e0      	movi      	r3, 224
1fff43a6:	436d      	lsli      	r3, r3, 13
        subWriteReg(0x400300d8, 20, 18, 0x02); // tpm dac var
1fff43a8:	9236      	ld.w      	r1, (r2, 0x58)
1fff43aa:	c4612043 	andn      	r3, r1, r3
    if (fDev == 1) {
1fff43ae:	0828      	bt      	0x1fff43fe	// 1fff43fe <rf_tp_cal+0x6a>
        subWriteReg(0x400300d8, 20, 18, 0x02); // tpm dac var
1fff43b0:	3bb3      	bseti      	r3, 19
1fff43b2:	b276      	st.w      	r3, (r2, 0x58)
1fff43b4:	6c03      	mov      	r0, r0
        PHY_REG_WT(0x4003008c, 0x0053407f);
1fff43b6:	117d      	lrw      	r3, 0x53407f	// 1fff44a8 <rf_tp_cal+0x114>
    } else {
        subWriteReg(0x400300d8, 20, 18, 0x01); // tpm dac var
        PHY_REG_WT(0x4003008c, 0x0073407f);
1fff43b8:	b263      	st.w      	r3, (r2, 0xc)
    }

    if (g_rfPhyClkSel == RF_PHY_CLK_SEL_16M_XTAL && g_system_clk == SYS_CLK_DLL_48M) {
1fff43ba:	113d      	lrw      	r1, 0x1fff0e7c	// 1fff44ac <rf_tp_cal+0x118>
1fff43bc:	119d      	lrw      	r4, 0x1fff08a8	// 1fff44b0 <rf_tp_cal+0x11c>
1fff43be:	9160      	ld.w      	r3, (r1, 0x0)
1fff43c0:	3b40      	cmpnei      	r3, 0
1fff43c2:	1179      	lrw      	r3, 0x40030080	// 1fff44a4 <rf_tp_cal+0x110>
1fff43c4:	0822      	bt      	0x1fff4408	// 1fff4408 <rf_tp_cal+0x74>
1fff43c6:	9440      	ld.w      	r2, (r4, 0x0)
1fff43c8:	3a43      	cmpnei      	r2, 3
1fff43ca:	081f      	bt      	0x1fff4408	// 1fff4408 <rf_tp_cal+0x74>
        subWriteReg(0x4003008c, 23, 23, 0x01);
1fff43cc:	9343      	ld.w      	r2, (r3, 0xc)
1fff43ce:	3ab7      	bseti      	r2, 23
    } else {
        subWriteReg(0x4003008c, 23, 23, 0x00);
1fff43d0:	b343      	st.w      	r2, (r3, 0xc)
1fff43d2:	6c03      	mov      	r0, r0
    }

    PHY_REG_WT(0x400300b4, 0xff & rfChn);   // set rfFreq=2400+rfChn
1fff43d4:	1174      	lrw      	r3, 0x40030080	// 1fff44a4 <rf_tp_cal+0x110>
    PHY_REG_WT(0x400300a0, 0x0000000e);     // set pll_auto override
1fff43d6:	320e      	movi      	r2, 14
    PHY_REG_WT(0x400300b4, 0xff & rfChn);   // set rfFreq=2400+rfChn
1fff43d8:	b30d      	st.w      	r0, (r3, 0x34)
    PHY_REG_WT(0x400300a0, 0x0000000e);     // set pll_auto override
1fff43da:	b348      	st.w      	r2, (r3, 0x20)

    //-------------------------------------------------------------------------
    // Cal Trig
    //

    PHY_REG_WT(0x400300a4, 0x00000000);     // clr tx_auto
1fff43dc:	3200      	movi      	r2, 0
1fff43de:	b349      	st.w      	r2, (r3, 0x24)
    PHY_REG_WT(0x400300a4, 0x00000114);     // set tx_auto
1fff43e0:	328a      	movi      	r2, 138
1fff43e2:	4241      	lsli      	r2, r2, 1
1fff43e4:	b349      	st.w      	r2, (r3, 0x24)

    //-------------------------------------------------------------------------
    // Wait to Read Reslut
    // When HCLK 16M --> 10000*3/16 around 2ms
    volatile int timeOut = 10000;
1fff43e6:	ea032710 	movi      	r3, 10000
1fff43ea:	b860      	st.w      	r3, (r14, 0x0)

    switch (g_system_clk) {
1fff43ec:	9400      	ld.w      	r0, (r4, 0x0)
1fff43ee:	3807      	cmphsi      	r0, 8
1fff43f0:	0848      	bt      	0x1fff4480	// 1fff4480 <rf_tp_cal+0xec>
1fff43f2:	e3fff945 	bsr      	0x1fff367c	// 1fff367c <___gnu_csky_case_uqi>
1fff43f6:	0c0c      	.short	0x0c0c
1fff43f8:	45423e45 	.long	0x45423e45
1fff43fc:	0f0f      	.short	0x0f0f
        subWriteReg(0x400300d8, 20, 18, 0x01); // tpm dac var
1fff43fe:	3bb2      	bseti      	r3, 18
1fff4400:	b276      	st.w      	r3, (r2, 0x58)
1fff4402:	6c03      	mov      	r0, r0
        PHY_REG_WT(0x4003008c, 0x0073407f);
1fff4404:	116c      	lrw      	r3, 0x73407f	// 1fff44b4 <rf_tp_cal+0x120>
1fff4406:	07d9      	br      	0x1fff43b8	// 1fff43b8 <rf_tp_cal+0x24>
        subWriteReg(0x4003008c, 23, 23, 0x00);
1fff4408:	9343      	ld.w      	r2, (r3, 0xc)
1fff440a:	3a97      	bclri      	r2, 23
1fff440c:	07e2      	br      	0x1fff43d0	// 1fff43d0 <rf_tp_cal+0x3c>
            timeOut = timeOut;
            break;

        case SYS_CLK_RC_32M:
        case SYS_CLK_DLL_32M:
            timeOut = timeOut * 2;
1fff440e:	9860      	ld.w      	r3, (r14, 0x0)
1fff4410:	4361      	lsli      	r3, r3, 1
        case SYS_CLK_DLL_64M:
            timeOut = timeOut * 4;
            break;

        default:
            timeOut = timeOut;
1fff4412:	b860      	st.w      	r3, (r14, 0x0)
            break;
    }

    while (timeOut--) {};
1fff4414:	9860      	ld.w      	r3, (r14, 0x0)
1fff4416:	5b43      	subi      	r2, r3, 1
1fff4418:	3b40      	cmpnei      	r3, 0
1fff441a:	b840      	st.w      	r2, (r14, 0x0)
1fff441c:	0bfc      	bt      	0x1fff4414	// 1fff4414 <rf_tp_cal+0x80>

    uint8_t kCal = (0xff0000 & PHY_REG_RD(0x400300f4)) >> 16;
1fff441e:	1162      	lrw      	r3, 0x40030080	// 1fff44a4 <rf_tp_cal+0x110>

    PHY_REG_WT(0x400300a4, 0x00000000);     // clr tx_auto
1fff4420:	3200      	movi      	r2, 0
    uint8_t kCal = (0xff0000 & PHY_REG_RD(0x400300f4)) >> 16;
1fff4422:	931d      	ld.w      	r0, (r3, 0x74)
    PHY_REG_WT(0x400300a4, 0x00000000);     // clr tx_auto
1fff4424:	b349      	st.w      	r2, (r3, 0x24)

    PHY_REG_WT(0x400300a0, 0x00000000);     // clr pll_auto override
1fff4426:	b348      	st.w      	r2, (r3, 0x20)

    PHY_REG_WT(0x4003008c, 0x00104040);     // clr tp_cal_en
1fff4428:	1144      	lrw      	r2, 0x104040	// 1fff44b8 <rf_tp_cal+0x124>
    uint8_t kCal = (0xff0000 & PHY_REG_RD(0x400300f4)) >> 16;
1fff442a:	c4007040 	xtrb1      	r0, r0
    PHY_REG_WT(0x4003008c, 0x00104040);     // clr tp_cal_en
1fff442e:	b343      	st.w      	r2, (r3, 0xc)

    PHY_REG_WT(0x400300a4, 0x00000140);     // clr tx_auto
1fff4430:	32a0      	movi      	r2, 160
1fff4432:	4241      	lsli      	r2, r2, 1
1fff4434:	b349      	st.w      	r2, (r3, 0x24)

    PHY_REG_WT(0x40030040, 0x00032800);
1fff4436:	32ca      	movi      	r2, 202
1fff4438:	424a      	lsli      	r2, r2, 10
1fff443a:	ea234003 	movih      	r3, 16387
1fff443e:	b350      	st.w      	r2, (r3, 0x40)

#if(RF_PHY_EXT_PREAMBLE_US)
		//ext preamble for BLE 1M/2M, nByte
		if(g_rfPhyPktFmt==PKT_FMT_BLE1M)
1fff4440:	105f      	lrw      	r2, 0x1fff08ae	// 1fff44bc <rf_tp_cal+0x128>
1fff4442:	82a0      	ld.b      	r5, (r2, 0x0)
1fff4444:	3d41      	cmpnei      	r5, 1
1fff4446:	081f      	bt      	0x1fff4484	// 1fff4484 <rf_tp_cal+0xf0>
		{
			subWriteReg(0x40030040, 7, 5, (RF_PHY_EXT_PREAMBLE_US>>3) ); // 1byte -> 8us
1fff4448:	9350      	ld.w      	r2, (r3, 0x40)
1fff444a:	3500      	movi      	r5, 0
1fff444c:	2de0      	subi      	r5, 225
1fff444e:	6894      	and      	r2, r5
1fff4450:	ec420020 	ori      	r2, r2, 32
		{
			subWriteReg(0x40030040, 7, 5, (RF_PHY_EXT_PREAMBLE_US>>2) );//2 byte -> 8us
		}
		else
		{
			subWriteReg(0x40030040, 7, 5, (0) );
1fff4454:	b350      	st.w      	r2, (r3, 0x40)
1fff4456:	6c03      	mov      	r0, r0
		}
#endif

    if (g_rfPhyClkSel == RF_PHY_CLK_SEL_16M_XTAL && g_system_clk == SYS_CLK_DLL_48M) {
1fff4458:	9160      	ld.w      	r3, (r1, 0x0)
1fff445a:	3b40      	cmpnei      	r3, 0
1fff445c:	1072      	lrw      	r3, 0x40030080	// 1fff44a4 <rf_tp_cal+0x110>
1fff445e:	081d      	bt      	0x1fff4498	// 1fff4498 <rf_tp_cal+0x104>
1fff4460:	9440      	ld.w      	r2, (r4, 0x0)
1fff4462:	3a43      	cmpnei      	r2, 3
1fff4464:	081a      	bt      	0x1fff4498	// 1fff4498 <rf_tp_cal+0x104>
        subWriteReg(0x4003008c, 23, 23, 0x01);
1fff4466:	9343      	ld.w      	r2, (r3, 0xc)
1fff4468:	3ab7      	bseti      	r2, 23
    } else {
        subWriteReg(0x4003008c, 23, 23, 0x00);
1fff446a:	b343      	st.w      	r2, (r3, 0xc)
1fff446c:	6c03      	mov      	r0, r0
    }

    return kCal;
}
1fff446e:	1401      	addi      	r14, r14, 4
1fff4470:	1492      	pop      	r4-r5, r15
            timeOut = timeOut * 3;
1fff4472:	9840      	ld.w      	r2, (r14, 0x0)
1fff4474:	4261      	lsli      	r3, r2, 1
1fff4476:	60c8      	addu      	r3, r2
1fff4478:	07cd      	br      	0x1fff4412	// 1fff4412 <rf_tp_cal+0x7e>
            timeOut = timeOut * 4;
1fff447a:	9860      	ld.w      	r3, (r14, 0x0)
1fff447c:	4362      	lsli      	r3, r3, 2
1fff447e:	07ca      	br      	0x1fff4412	// 1fff4412 <rf_tp_cal+0x7e>
            timeOut = timeOut;
1fff4480:	9860      	ld.w      	r3, (r14, 0x0)
1fff4482:	07c8      	br      	0x1fff4412	// 1fff4412 <rf_tp_cal+0x7e>
		else if(g_rfPhyPktFmt == PKT_FMT_BLE2M)
1fff4484:	8240      	ld.b      	r2, (r2, 0x0)
			subWriteReg(0x40030040, 7, 5, (RF_PHY_EXT_PREAMBLE_US>>2) );//2 byte -> 8us
1fff4486:	3500      	movi      	r5, 0
		else if(g_rfPhyPktFmt == PKT_FMT_BLE2M)
1fff4488:	3a42      	cmpnei      	r2, 2
			subWriteReg(0x40030040, 7, 5, (RF_PHY_EXT_PREAMBLE_US>>2) );//2 byte -> 8us
1fff448a:	9350      	ld.w      	r2, (r3, 0x40)
1fff448c:	2de0      	subi      	r5, 225
1fff448e:	6894      	and      	r2, r5
		else if(g_rfPhyPktFmt == PKT_FMT_BLE2M)
1fff4490:	0be2      	bt      	0x1fff4454	// 1fff4454 <rf_tp_cal+0xc0>
			subWriteReg(0x40030040, 7, 5, (RF_PHY_EXT_PREAMBLE_US>>2) );//2 byte -> 8us
1fff4492:	ec420040 	ori      	r2, r2, 64
1fff4496:	07df      	br      	0x1fff4454	// 1fff4454 <rf_tp_cal+0xc0>
        subWriteReg(0x4003008c, 23, 23, 0x00);
1fff4498:	9343      	ld.w      	r2, (r3, 0xc)
1fff449a:	3a97      	bclri      	r2, 23
1fff449c:	07e7      	br      	0x1fff446a	// 1fff446a <rf_tp_cal+0xd6>
1fff449e:	0000      	bkpt
1fff44a0:	00030010 	.long	0x00030010
1fff44a4:	40030080 	.long	0x40030080
1fff44a8:	0053407f 	.long	0x0053407f
1fff44ac:	1fff0e7c 	.long	0x1fff0e7c
1fff44b0:	1fff08a8 	.long	0x1fff08a8
1fff44b4:	0073407f 	.long	0x0073407f
1fff44b8:	00104040 	.long	0x00104040
1fff44bc:	1fff08ae 	.long	0x1fff08ae

1fff44c0 <rf_tpCal_gen_cap_arrary>:
{
1fff44c0:	14d0      	push      	r15
    g_rfPhyTpCal0 = rf_tp_cal(/*/rfChn*/2, 0) + 2;
1fff44c2:	3100      	movi      	r1, 0
1fff44c4:	3002      	movi      	r0, 2
1fff44c6:	e3ffff67 	bsr      	0x1fff4394	// 1fff4394 <rf_tp_cal>
1fff44ca:	106f      	lrw      	r3, 0x1fff08ad	// 1fff4504 <rf_tpCal_gen_cap_arrary+0x44>
1fff44cc:	2001      	addi      	r0, 2
1fff44ce:	7400      	zextb      	r0, r0
1fff44d0:	a300      	st.b      	r0, (r3, 0x0)
    g_rfPhyTpCal1 = rf_tp_cal(/*/rfChn*/66, 0) + 2;
1fff44d2:	3100      	movi      	r1, 0
1fff44d4:	3042      	movi      	r0, 66
1fff44d6:	e3ffff5f 	bsr      	0x1fff4394	// 1fff4394 <rf_tp_cal>
1fff44da:	106c      	lrw      	r3, 0x1fff08af	// 1fff4508 <rf_tpCal_gen_cap_arrary+0x48>
1fff44dc:	2001      	addi      	r0, 2
1fff44de:	7400      	zextb      	r0, r0
1fff44e0:	a300      	st.b      	r0, (r3, 0x0)
    g_rfPhyTpCal0_2Mbps = rf_tp_cal(/*/rfChn*/2, 1) + 2;
1fff44e2:	3101      	movi      	r1, 1
1fff44e4:	3002      	movi      	r0, 2
1fff44e6:	e3ffff57 	bsr      	0x1fff4394	// 1fff4394 <rf_tp_cal>
1fff44ea:	1069      	lrw      	r3, 0x1fff08b0	// 1fff450c <rf_tpCal_gen_cap_arrary+0x4c>
1fff44ec:	2001      	addi      	r0, 2
1fff44ee:	7400      	zextb      	r0, r0
1fff44f0:	a300      	st.b      	r0, (r3, 0x0)
    g_rfPhyTpCal1_2Mbps = rf_tp_cal(/*/rfChn*/66, 1) + 2;
1fff44f2:	3101      	movi      	r1, 1
1fff44f4:	3042      	movi      	r0, 66
1fff44f6:	e3ffff4f 	bsr      	0x1fff4394	// 1fff4394 <rf_tp_cal>
1fff44fa:	1066      	lrw      	r3, 0x1fff08b1	// 1fff4510 <rf_tpCal_gen_cap_arrary+0x50>
1fff44fc:	2001      	addi      	r0, 2
1fff44fe:	7400      	zextb      	r0, r0
1fff4500:	a300      	st.b      	r0, (r3, 0x0)
}
1fff4502:	1490      	pop      	r15
1fff4504:	1fff08ad 	.long	0x1fff08ad
1fff4508:	1fff08af 	.long	0x1fff08af
1fff450c:	1fff08b0 	.long	0x1fff08b0
1fff4510:	1fff08b1 	.long	0x1fff08b1

1fff4514 <rf_rxDcoc_cfg>:
 * @param       dcCal   : cal result for rxdc, dcQ[13:8],dcI[5:0]
 *
 * @return      none
 */
void rf_rxDcoc_cfg(uint8_t rfChn, uint8_t bwSet, volatile uint32 *dcCal)
{
1fff4514:	14d3      	push      	r4-r6, r15
1fff4516:	1421      	subi      	r14, r14, 4

    //--------------------------------------------------------------
    //  restore the rxTimeOut setting, and set rxto to zero, not to generate rx_done
    //
    //
    int rxTimeOut1st = PHY_REG_RD(0x40031024);
1fff4518:	1262      	lrw      	r3, 0x40031000	// 1fff4620 <rf_rxDcoc_cfg+0x10c>
    int rxTimeOut    = PHY_REG_RD(0x40031028);

    PHY_REG_WT(0x40031024, 0x00000000);
1fff451a:	3600      	movi      	r6, 0
    int rxTimeOut1st = PHY_REG_RD(0x40031024);
1fff451c:	93a9      	ld.w      	r5, (r3, 0x24)
    int rxTimeOut    = PHY_REG_RD(0x40031028);
1fff451e:	938a      	ld.w      	r4, (r3, 0x28)
    PHY_REG_WT(0x40031024, 0x00000000);
1fff4520:	b3c9      	st.w      	r6, (r3, 0x24)
    PHY_REG_WT(0x40031028, 0x00000000);
1fff4522:	b3ca      	st.w      	r6, (r3, 0x28)
    //--------------------------------------------------------------
    //rx close
    //

    PHY_REG_WT(0x400300b4, 0xff & rfChn);          // set rfFreq=2400+rfChn
1fff4524:	1260      	lrw      	r3, 0x40030080	// 1fff4624 <rf_rxDcoc_cfg+0x110>
    PHY_REG_WT(0x400300a0, 0x0000000e);            // set pll_auto override

    PHY_REG_WT(0x400300a4, 0x00000100);            // clr trx_auto
    PHY_REG_WT(0x400300a8, 0x00000040);            // set lo override
1fff4526:	3640      	movi      	r6, 64
    PHY_REG_WT(0x400300b4, 0xff & rfChn);          // set rfFreq=2400+rfChn
1fff4528:	b30d      	st.w      	r0, (r3, 0x34)
    PHY_REG_WT(0x400300a0, 0x0000000e);            // set pll_auto override
1fff452a:	300e      	movi      	r0, 14
    //--------------------------------------------------------------
    //set filter bw and rx gain,dcoc cal control
    //
    uint16 fltPhy = 0;

    if (bwSet == 1) {
1fff452c:	3941      	cmpnei      	r1, 1
    PHY_REG_WT(0x400300a0, 0x0000000e);            // set pll_auto override
1fff452e:	b308      	st.w      	r0, (r3, 0x20)
    PHY_REG_WT(0x400300a4, 0x00000100);            // clr trx_auto
1fff4530:	3080      	movi      	r0, 128
1fff4532:	4001      	lsli      	r0, r0, 1
1fff4534:	b309      	st.w      	r0, (r3, 0x24)
    PHY_REG_WT(0x400300a8, 0x00000040);            // set lo override
1fff4536:	b3ca      	st.w      	r6, (r3, 0x28)
    PHY_REG_WT(0x400300ac, 0x00000050);            // set rx lo and pll buff
1fff4538:	3650      	movi      	r6, 80
1fff453a:	b3cb      	st.w      	r6, (r3, 0x2c)
    PHY_REG_WT(0x400300a4, 0x0000012a);            // rx close
1fff453c:	3695      	movi      	r6, 149
1fff453e:	46c1      	lsli      	r6, r6, 1
1fff4540:	b3c9      	st.w      	r6, (r3, 0x24)
    if (bwSet == 1) {
1fff4542:	082c      	bt      	0x1fff459a	// 1fff459a <rf_rxDcoc_cfg+0x86>
        PHY_REG_WT(0x400300e0, 0x00000100);         // set pga bw(0100:1M,1100:2M)
1fff4544:	b318      	st.w      	r0, (r3, 0x60)
        fltPhy  =   0x034d;
1fff4546:	ea01034d 	movi      	r1, 845
    } else {
        PHY_REG_WT(0x400300e0, 0x00000080);         // set pga bw(0100:1M,1100:2M)
        fltPhy  =   0x02ca;
    }

    PHY_REG_WT(0x400300c8, 0x000001a4);             // set to rx max gain
1fff454a:	30d2      	movi      	r0, 210
1fff454c:	4001      	lsli      	r0, r0, 1
1fff454e:	b312      	st.w      	r0, (r3, 0x48)
    PHY_REG_WT(0x400300c4, 0x00002020);             // dcoc dac controled by mix_sig_top for cal
1fff4550:	ea002020 	movi      	r0, 8224
1fff4554:	b311      	st.w      	r0, (r3, 0x44)

    PHY_REG_WT(0x40030050, 0x200c5680);             // enlarge dcoc cal average time
1fff4556:	1115      	lrw      	r0, 0x200c5680	// 1fff4628 <rf_rxDcoc_cfg+0x114>
1fff4558:	ea234003 	movih      	r3, 16387
1fff455c:	b314      	st.w      	r0, (r3, 0x50)
    // enlarge pga settle time

    //--------------------------------------------------------------
    //wait for rf settle
    //
    volatile int cnt = 1000;
1fff455e:	33fa      	movi      	r3, 250
1fff4560:	4362      	lsli      	r3, r3, 2
1fff4562:	b860      	st.w      	r3, (r14, 0x0)

    while (cnt--) {};
1fff4564:	9860      	ld.w      	r3, (r14, 0x0)
1fff4566:	5b03      	subi      	r0, r3, 1
1fff4568:	3b40      	cmpnei      	r3, 0
1fff456a:	b800      	st.w      	r0, (r14, 0x0)
1fff456c:	0bfc      	bt      	0x1fff4564	// 1fff4564 <rf_rxDcoc_cfg+0x50>

    PHY_REG_WT(0x40030078, (fltPhy << 22) | 0x216564); // clr dcoc_en[0] , set to phase search mode[1]
1fff456e:	4176      	lsli      	r3, r1, 22

    PHY_REG_WT(0x40030078, (fltPhy << 22) | 0x216565); // set dcoc_en[0], dcoc start
1fff4570:	11cf      	lrw      	r6, 0x216565	// 1fff462c <rf_rxDcoc_cfg+0x118>
    PHY_REG_WT(0x40030078, (fltPhy << 22) | 0x216564); // clr dcoc_en[0] , set to phase search mode[1]
1fff4572:	1130      	lrw      	r1, 0x216564	// 1fff4630 <rf_rxDcoc_cfg+0x11c>
1fff4574:	ea204003 	movih      	r0, 16387
1fff4578:	6c4c      	or      	r1, r3
    PHY_REG_WT(0x40030078, (fltPhy << 22) | 0x216565); // set dcoc_en[0], dcoc start
1fff457a:	6cd8      	or      	r3, r6
    PHY_REG_WT(0x40030078, (fltPhy << 22) | 0x216564); // clr dcoc_en[0] , set to phase search mode[1]
1fff457c:	b03e      	st.w      	r1, (r0, 0x78)
    PHY_REG_WT(0x40030078, (fltPhy << 22) | 0x216565); // set dcoc_en[0], dcoc start
1fff457e:	b07e      	st.w      	r3, (r0, 0x78)

    //--------------------------------------------------------------
    //wait to read the cal result
    //
    cnt = 10000;
1fff4580:	ea032710 	movi      	r3, 10000
1fff4584:	b860      	st.w      	r3, (r14, 0x0)

    switch (g_system_clk) {
1fff4586:	116c      	lrw      	r3, 0x1fff08a8	// 1fff4634 <rf_rxDcoc_cfg+0x120>
1fff4588:	9300      	ld.w      	r0, (r3, 0x0)
1fff458a:	3807      	cmphsi      	r0, 8
1fff458c:	0848      	bt      	0x1fff461c	// 1fff461c <rf_rxDcoc_cfg+0x108>
1fff458e:	e3fff877 	bsr      	0x1fff367c	// 1fff367c <___gnu_csky_case_uqi>
1fff4592:	0909      	.short	0x0909
1fff4594:	45423e45 	.long	0x45423e45
1fff4598:	0c0c      	.short	0x0c0c
        PHY_REG_WT(0x400300e0, 0x00000080);         // set pga bw(0100:1M,1100:2M)
1fff459a:	3180      	movi      	r1, 128
1fff459c:	b338      	st.w      	r1, (r3, 0x60)
        fltPhy  =   0x02ca;
1fff459e:	ea0102ca 	movi      	r1, 714
1fff45a2:	07d4      	br      	0x1fff454a	// 1fff454a <rf_rxDcoc_cfg+0x36>
            cnt = cnt;
            break;

        case SYS_CLK_RC_32M:
        case SYS_CLK_DLL_32M:
            cnt = cnt * 2;
1fff45a4:	9860      	ld.w      	r3, (r14, 0x0)
1fff45a6:	4361      	lsli      	r3, r3, 1
        case SYS_CLK_DLL_64M:
            cnt = cnt * 4;
            break;

        default:
            cnt = cnt;
1fff45a8:	b860      	st.w      	r3, (r14, 0x0)
            break;
    }

    *dcCal = 0x20200000;        // set the dc cal to default val
1fff45aa:	ea232020 	movih      	r3, 8224

    while (cnt--) {
        if (3 == (0x03 & (PHY_REG_RD(0x400300ec) >> 30))) {
1fff45ae:	101e      	lrw      	r0, 0x40030080	// 1fff4624 <rf_rxDcoc_cfg+0x110>
    *dcCal = 0x20200000;        // set the dc cal to default val
1fff45b0:	b260      	st.w      	r3, (r2, 0x0)
    while (cnt--) {
1fff45b2:	9860      	ld.w      	r3, (r14, 0x0)
1fff45b4:	5bc3      	subi      	r6, r3, 1
1fff45b6:	3b40      	cmpnei      	r3, 0
1fff45b8:	b8c0      	st.w      	r6, (r14, 0x0)
1fff45ba:	0c0f      	bf      	0x1fff45d8	// 1fff45d8 <rf_rxDcoc_cfg+0xc4>
        if (3 == (0x03 & (PHY_REG_RD(0x400300ec) >> 30))) {
1fff45bc:	907b      	ld.w      	r3, (r0, 0x6c)
1fff45be:	4b7e      	lsri      	r3, r3, 30
1fff45c0:	3b43      	cmpnei      	r3, 3
1fff45c2:	0bf8      	bt      	0x1fff45b2	// 1fff45b2 <rf_rxDcoc_cfg+0x9e>

            *dcCal = PHY_REG_RD(0x400300ec) & 0x3f3fffff;               // get the dc cal result
1fff45c4:	907b      	ld.w      	r3, (r0, 0x6c)
1fff45c6:	36fd      	movi      	r6, 253
1fff45c8:	46d6      	lsli      	r6, r6, 22
1fff45ca:	2e00      	subi      	r6, 1
1fff45cc:	68d8      	and      	r3, r6
1fff45ce:	b260      	st.w      	r3, (r2, 0x0)
            PHY_REG_WT(0x400300c4, 0x00010000 | ((*dcCal) >> 16));       // set to dcoc dac code
1fff45d0:	9260      	ld.w      	r3, (r2, 0x0)
1fff45d2:	4b70      	lsri      	r3, r3, 16
1fff45d4:	3bb0      	bseti      	r3, 16
1fff45d6:	b071      	st.w      	r3, (r0, 0x44)
    //--------------------------------------------------------------
    //end of cfg
    //
    PHY_REG_WT(0x40030078, (fltPhy << 22) | 0x216564); // clr dcoc_en[0] , set to phase search mode[1]

    PHY_REG_WT(0x400300a8, 0x00000000);             // clr lo override
1fff45d8:	3200      	movi      	r2, 0
    PHY_REG_WT(0x40030078, (fltPhy << 22) | 0x216564); // clr dcoc_en[0] , set to phase search mode[1]
1fff45da:	ea234003 	movih      	r3, 16387
1fff45de:	b33e      	st.w      	r1, (r3, 0x78)
    PHY_REG_WT(0x400300a8, 0x00000000);             // clr lo override
1fff45e0:	dc43202a 	st.w      	r2, (r3, 0xa8)
    PHY_REG_WT(0x400300ac, 0x00000000);             // clr rx lo and pll buff
1fff45e4:	dc43202b 	st.w      	r2, (r3, 0xac)
    PHY_REG_WT(0x400300c8, 0x00000000);             // set to rx max gain
1fff45e8:	dc432032 	st.w      	r2, (r3, 0xc8)
    PHY_REG_WT(0x400300a4, 0x00000100);             // clr tx_auto
1fff45ec:	3280      	movi      	r2, 128
1fff45ee:	4241      	lsli      	r2, r2, 1
1fff45f0:	dc432029 	st.w      	r2, (r3, 0xa4)
    PHY_REG_WT(0x400300a0, 0x00000000);             // clr pll_auto override
1fff45f4:	3200      	movi      	r2, 0
1fff45f6:	dc432028 	st.w      	r2, (r3, 0xa0)
    PHY_REG_WT(0x400300a4, 0x00000140);             // clr tx_auto
1fff45fa:	32a0      	movi      	r2, 160
1fff45fc:	4241      	lsli      	r2, r2, 1
1fff45fe:	dc432029 	st.w      	r2, (r3, 0xa4)

    PHY_REG_WT(0x40031024, rxTimeOut1st);
1fff4602:	dca32409 	st.w      	r5, (r3, 0x1024)
    PHY_REG_WT(0x40031028, rxTimeOut);
1fff4606:	dc83240a 	st.w      	r4, (r3, 0x1028)
}
1fff460a:	1401      	addi      	r14, r14, 4
1fff460c:	1493      	pop      	r4-r6, r15
            cnt = cnt * 3;
1fff460e:	9800      	ld.w      	r0, (r14, 0x0)
1fff4610:	4061      	lsli      	r3, r0, 1
1fff4612:	60c0      	addu      	r3, r0
1fff4614:	07ca      	br      	0x1fff45a8	// 1fff45a8 <rf_rxDcoc_cfg+0x94>
            cnt = cnt * 4;
1fff4616:	9860      	ld.w      	r3, (r14, 0x0)
1fff4618:	4362      	lsli      	r3, r3, 2
1fff461a:	07c7      	br      	0x1fff45a8	// 1fff45a8 <rf_rxDcoc_cfg+0x94>
            cnt = cnt;
1fff461c:	9860      	ld.w      	r3, (r14, 0x0)
1fff461e:	07c5      	br      	0x1fff45a8	// 1fff45a8 <rf_rxDcoc_cfg+0x94>
1fff4620:	40031000 	.long	0x40031000
1fff4624:	40030080 	.long	0x40030080
1fff4628:	200c5680 	.long	0x200c5680
1fff462c:	00216565 	.long	0x00216565
1fff4630:	00216564 	.long	0x00216564
1fff4634:	1fff08a8 	.long	0x1fff08a8

1fff4638 <rf_phy_set_txPower>:
 * @param       none
 *
 * @return      none
 */
void rf_phy_set_txPower(uint8 txPower)
{
1fff4638:	14c1      	push      	r4
1fff463a:	1120      	lrw      	r1, 0x4000f000	// 1fff46b8 <rf_phy_set_txPower+0x80>
1fff463c:	32f0      	movi      	r2, 240
    if (RF_PHY_TX_POWER_EXTRA_MAX == txPower) {
1fff463e:	eb40003f 	cmpnei      	r0, 63
1fff4642:	424b      	lsli      	r2, r2, 11
        DCDC_CONFIG_SETTING(0x08);//set dcdc to highest
1fff4644:	9185      	ld.w      	r4, (r1, 0x14)
1fff4646:	107e      	lrw      	r3, 0x40030080	// 1fff46bc <rf_phy_set_txPower+0x84>
1fff4648:	c4442042 	andn      	r2, r4, r2
    if (RF_PHY_TX_POWER_EXTRA_MAX == txPower) {
1fff464c:	0820      	bt      	0x1fff468c	// 1fff468c <rf_phy_set_txPower+0x54>
        DCDC_CONFIG_SETTING(0x08);//set dcdc to highest
1fff464e:	3ab2      	bseti      	r2, 18
1fff4650:	b145      	st.w      	r2, (r1, 0x14)
1fff4652:	6c03      	mov      	r0, r0
        RF_PHY_LO_LDO_SETTING(0);
1fff4654:	9353      	ld.w      	r2, (r3, 0x4c)
1fff4656:	3a8a      	bclri      	r2, 10
1fff4658:	3a8b      	bclri      	r2, 11
1fff465a:	b353      	st.w      	r2, (r3, 0x4c)
1fff465c:	6c03      	mov      	r0, r0
        RF_PHY_LNA_LDO_SETTING(0);
1fff465e:	9357      	ld.w      	r2, (r3, 0x5c)
1fff4660:	3a85      	bclri      	r2, 5
1fff4662:	3a86      	bclri      	r2, 6
1fff4664:	b357      	st.w      	r2, (r3, 0x5c)
1fff4666:	6c03      	mov      	r0, r0
        RF_PHY_PA_VTRIM_SETTING(1);
1fff4668:	1036      	lrw      	r1, 0xfffffc7f	// 1fff46c0 <rf_phy_set_txPower+0x88>
1fff466a:	9357      	ld.w      	r2, (r3, 0x5c)
1fff466c:	6884      	and      	r2, r1
1fff466e:	ec420080 	ori      	r2, r2, 128
//        RF_PHY_PA_VTRIM_SETTING(1);
		
        DCDC_CONFIG_SETTING(0x0a);
        RF_PHY_LO_LDO_SETTING(2);
        RF_PHY_LNA_LDO_SETTING(1);
        RF_PHY_PA_VTRIM_SETTING(0);
1fff4672:	b357      	st.w      	r2, (r3, 0x5c)
1fff4674:	6c03      	mov      	r0, r0
    }

    PHY_REG_WT(0x400300b8, (PHY_REG_RD(0x400300b8) & 0x0fff) | ((txPower & 0x1f) << 12));
1fff4676:	1052      	lrw      	r2, 0x40030080	// 1fff46bc <rf_phy_set_txPower+0x84>
1fff4678:	31f8      	movi      	r1, 248
1fff467a:	926e      	ld.w      	r3, (r2, 0x38)
1fff467c:	4129      	lsli      	r1, r1, 9
1fff467e:	400c      	lsli      	r0, r0, 12
1fff4680:	6804      	and      	r0, r1
1fff4682:	e4632fff 	andi      	r3, r3, 4095
1fff4686:	6c0c      	or      	r0, r3
1fff4688:	b20e      	st.w      	r0, (r2, 0x38)
}
1fff468a:	1481      	pop      	r4
        DCDC_CONFIG_SETTING(0x0a);
1fff468c:	3ab0      	bseti      	r2, 16
1fff468e:	3ab2      	bseti      	r2, 18
1fff4690:	b145      	st.w      	r2, (r1, 0x14)
1fff4692:	6c03      	mov      	r0, r0
        RF_PHY_LO_LDO_SETTING(2);
1fff4694:	9353      	ld.w      	r2, (r3, 0x4c)
1fff4696:	3a8a      	bclri      	r2, 10
1fff4698:	3a8b      	bclri      	r2, 11
1fff469a:	ec420800 	ori      	r2, r2, 2048
1fff469e:	b353      	st.w      	r2, (r3, 0x4c)
1fff46a0:	6c03      	mov      	r0, r0
        RF_PHY_LNA_LDO_SETTING(1);
1fff46a2:	9357      	ld.w      	r2, (r3, 0x5c)
1fff46a4:	3a85      	bclri      	r2, 5
1fff46a6:	3a86      	bclri      	r2, 6
1fff46a8:	ec420020 	ori      	r2, r2, 32
1fff46ac:	b357      	st.w      	r2, (r3, 0x5c)
1fff46ae:	6c03      	mov      	r0, r0
        RF_PHY_PA_VTRIM_SETTING(0);
1fff46b0:	1024      	lrw      	r1, 0xfffffc7f	// 1fff46c0 <rf_phy_set_txPower+0x88>
1fff46b2:	9357      	ld.w      	r2, (r3, 0x5c)
1fff46b4:	6884      	and      	r2, r1
1fff46b6:	07de      	br      	0x1fff4672	// 1fff4672 <rf_phy_set_txPower+0x3a>
1fff46b8:	4000f000 	.long	0x4000f000
1fff46bc:	40030080 	.long	0x40030080
1fff46c0:	fffffc7f 	.long	0xfffffc7f

1fff46c4 <rf_phy_ini>:
{
1fff46c4:	14d1      	push      	r4, r15
    g_rfPhyClkSel  = RF_PHY_CLK_SEL_16M_XTAL;
1fff46c6:	106c      	lrw      	r3, 0x1fff0e7c	// 1fff46f4 <rf_phy_ini+0x30>
1fff46c8:	3200      	movi      	r2, 0
    rf_phy_bb_cfg(g_rfPhyPktFmt);
1fff46ca:	108c      	lrw      	r4, 0x1fff08ae	// 1fff46f8 <rf_phy_ini+0x34>
    g_rfPhyClkSel  = RF_PHY_CLK_SEL_16M_XTAL;
1fff46cc:	b340      	st.w      	r2, (r3, 0x0)
    g_rxAdcClkSel  = RX_ADC_CLK_SEL_32M_DBL;
1fff46ce:	3202      	movi      	r2, 2
1fff46d0:	106b      	lrw      	r3, 0x1fff08a4	// 1fff46fc <rf_phy_ini+0x38>
1fff46d2:	b340      	st.w      	r2, (r3, 0x0)
    rf_phy_ana_cfg();
1fff46d4:	e3fffc96 	bsr      	0x1fff4000	// 1fff4000 <rf_phy_ana_cfg>
    rf_phy_set_txPower(g_rfPhyTxPower);//set to max power
1fff46d8:	106a      	lrw      	r3, 0x1fff08ac	// 1fff4700 <rf_phy_ini+0x3c>
1fff46da:	8300      	ld.b      	r0, (r3, 0x0)
1fff46dc:	7400      	zextb      	r0, r0
1fff46de:	e3ffffad 	bsr      	0x1fff4638	// 1fff4638 <rf_phy_set_txPower>
    rf_phy_bb_cfg(g_rfPhyPktFmt);
1fff46e2:	8400      	ld.b      	r0, (r4, 0x0)
1fff46e4:	7400      	zextb      	r0, r0
1fff46e6:	e3fffd19 	bsr      	0x1fff4118	// 1fff4118 <rf_phy_bb_cfg>
    ll_hw_tx2rx_timing_config(g_rfPhyPktFmt);
1fff46ea:	8400      	ld.b      	r0, (r4, 0x0)
1fff46ec:	7400      	zextb      	r0, r0
1fff46ee:	e0003173 	bsr      	0x1fffa9d4	// 1fffa9d4 <check_before_startup+0x2fc>
}
1fff46f2:	1491      	pop      	r4, r15
1fff46f4:	1fff0e7c 	.long	0x1fff0e7c
1fff46f8:	1fff08ae 	.long	0x1fff08ae
1fff46fc:	1fff08a4 	.long	0x1fff08a4
1fff4700:	1fff08ac 	.long	0x1fff08ac

1fff4704 <rf_phy_dtm_stop>:
    //======================================================================
    //stop RF_PHY_DTM_MODE
    //PHY_REG_WT( 0x400300a4,0x00000100);     // clr tx_auto
    //PHY_REG_WT( 0x400300a0,0x0000000e);     // pll_auto override 

    subWriteReg(AP_PCR_BASE+0x0c,10,10,0);//reset bbll
1fff4704:	3380      	movi      	r3, 128
1fff4706:	4377      	lsli      	r3, r3, 23
1fff4708:	9343      	ld.w      	r2, (r3, 0xc)
1fff470a:	3a8a      	bclri      	r2, 10
1fff470c:	b343      	st.w      	r2, (r3, 0xc)
1fff470e:	6c03      	mov      	r0, r0

    PHY_REG_WT( 0x400300a4,0x00000140);     // clr tx_auto
1fff4710:	1047      	lrw      	r2, 0x40030080	// 1fff472c <rf_phy_dtm_stop+0x28>
1fff4712:	31a0      	movi      	r1, 160
1fff4714:	4121      	lsli      	r1, r1, 1
1fff4716:	b229      	st.w      	r1, (r2, 0x24)
    PHY_REG_WT( 0x400300a0,0x0000000e);     // clr pll_auto override
1fff4718:	310e      	movi      	r1, 14
1fff471a:	b228      	st.w      	r1, (r2, 0x20)
    PHY_REG_WT( 0x400300a0,0x00000000);     // clr pll_auto override
1fff471c:	3100      	movi      	r1, 0
1fff471e:	b228      	st.w      	r1, (r2, 0x20)

    subWriteReg(AP_PCR_BASE+0x0c,10,10,1);//release bbll reset
1fff4720:	9343      	ld.w      	r2, (r3, 0xc)
1fff4722:	ec420400 	ori      	r2, r2, 1024
1fff4726:	b343      	st.w      	r2, (r3, 0xc)
1fff4728:	6c03      	mov      	r0, r0



}
1fff472a:	783c      	jmp      	r15
1fff472c:	40030080 	.long	0x40030080

1fff4730 <__memcpy_fast>:
1fff4730:	14c1      	push      	r4
1fff4732:	6f03      	mov      	r12, r0
1fff4734:	c401242d 	or      	r13, r1, r0
1fff4738:	e48d2003 	andi      	r4, r13, 3
1fff473c:	3c40      	cmpnei      	r4, 0
1fff473e:	0c0d      	bf      	0x1fff4758	// 1fff4758 <__memcpy_fast+0x28>
1fff4740:	3a40      	cmpnei      	r2, 0
1fff4742:	0c0a      	bf      	0x1fff4756	// 1fff4756 <__memcpy_fast+0x26>
1fff4744:	8160      	ld.b      	r3, (r1, 0x0)
1fff4746:	2100      	addi      	r1, 1
1fff4748:	2a00      	subi      	r2, 1
1fff474a:	dc6c0000 	st.b      	r3, (r12, 0x0)
1fff474e:	e58c0000 	addi      	r12, r12, 1
1fff4752:	3a40      	cmpnei      	r2, 0
1fff4754:	0bf8      	bt      	0x1fff4744	// 1fff4744 <__memcpy_fast+0x14>
1fff4756:	1481      	pop      	r4
1fff4758:	3a2f      	cmplti      	r2, 16
1fff475a:	0815      	bt      	0x1fff4784	// 1fff4784 <__memcpy_fast+0x54>
1fff475c:	d9a12000 	ld.w      	r13, (r1, 0x0)
1fff4760:	9161      	ld.w      	r3, (r1, 0x4)
1fff4762:	9182      	ld.w      	r4, (r1, 0x8)
1fff4764:	ddac2000 	st.w      	r13, (r12, 0x0)
1fff4768:	d9a12003 	ld.w      	r13, (r1, 0xc)
1fff476c:	dc6c2001 	st.w      	r3, (r12, 0x4)
1fff4770:	dc8c2002 	st.w      	r4, (r12, 0x8)
1fff4774:	ddac2003 	st.w      	r13, (r12, 0xc)
1fff4778:	2a0f      	subi      	r2, 16
1fff477a:	210f      	addi      	r1, 16
1fff477c:	e58c000f 	addi      	r12, r12, 16
1fff4780:	3a2f      	cmplti      	r2, 16
1fff4782:	0fed      	bf      	0x1fff475c	// 1fff475c <__memcpy_fast+0x2c>
1fff4784:	3a23      	cmplti      	r2, 4
1fff4786:	080a      	bt      	0x1fff479a	// 1fff479a <__memcpy_fast+0x6a>
1fff4788:	9160      	ld.w      	r3, (r1, 0x0)
1fff478a:	2a03      	subi      	r2, 4
1fff478c:	2103      	addi      	r1, 4
1fff478e:	dc6c2000 	st.w      	r3, (r12, 0x0)
1fff4792:	e58c0003 	addi      	r12, r12, 4
1fff4796:	3a23      	cmplti      	r2, 4
1fff4798:	0ff8      	bf      	0x1fff4788	// 1fff4788 <__memcpy_fast+0x58>
1fff479a:	3a40      	cmpnei      	r2, 0
1fff479c:	0fdd      	bf      	0x1fff4756	// 1fff4756 <__memcpy_fast+0x26>
1fff479e:	8160      	ld.b      	r3, (r1, 0x0)
1fff47a0:	2100      	addi      	r1, 1
1fff47a2:	2a00      	subi      	r2, 1
1fff47a4:	dc6c0000 	st.b      	r3, (r12, 0x0)
1fff47a8:	e58c0000 	addi      	r12, r12, 1
1fff47ac:	07f7      	br      	0x1fff479a	// 1fff479a <__memcpy_fast+0x6a>
1fff47ae:	0000      	bkpt
1fff47b0:	0001      	lrw      	r0, 0x6d0314d3	// 1fff4ba8 <RtbQueueHead>
1fff47b2:	0000      	bkpt
1fff47b4:	4730      	lsli      	r1, r7, 16
1fff47b6:	1fff      	addi      	r7, r14, 1020
1fff47b8:	0004      	lrw      	r0, 0x14932f13	// 1fff4ba4 <RtbQueueTail+0x26>
1fff47ba:	0000      	bkpt
1fff47bc:	1f41      	addi      	r7, r14, 260
1fff47be:	0000      	bkpt
1fff47c0:	6300      	addu      	r12, r0
1fff47c2:	6b73      	.long: 0x00006b73
1fff47c4:	0079      	lrw      	r3, 0x305014d1	// 1fff4b5c <RtbQueueInit>
1fff47c6:	1601      	addi      	r14, r14, 260
1fff47c8:	0000      	bkpt
1fff47ca:	0400      	br      	0x1fff47ca	// 1fff47ca <__memcpy_fast+0x9a>
1fff47cc:	6b63      	.long: 0x00006b63
1fff47ce:	3038      	movi      	r0, 56
1fff47d0:	0032      	lrw      	r1, 0x6c17000b	// 1fff4b84 <RtbQueueTail+0x6>
1fff47d2:	6305      	addc      	r12, r1
1fff47d4:	386b      	.long: 0x0000386b
1fff47d6:	3230      	movi      	r2, 48
1fff47d8:	0600      	br      	0x1fff43d8	// 1fff43d8 <rf_tp_cal+0x44>
1fff47da:	5086      	asri      	r4, r0, 6

1fff47dc <h5_crc_update>:
*
* @param crc crc data
* @param d one byte data
*/
static void h5_crc_update(uint16_t *crc, uint8_t d)
{
1fff47dc:	14c3      	push      	r4-r6
    uint16_t reg = *crc;

    reg = (reg >> 4) ^ crc_table[(reg ^ d) & 0x000f];
1fff47de:	350f      	movi      	r5, 15
    uint16_t reg = *crc;
1fff47e0:	8840      	ld.h      	r2, (r0, 0x0)
    reg = (reg >> 4) ^ crc_table[(reg ^ d) & 0x000f];
1fff47e2:	4a64      	lsri      	r3, r2, 4
1fff47e4:	6c85      	xor      	r2, r1
1fff47e6:	6894      	and      	r2, r5
1fff47e8:	1088      	lrw      	r4, 0x11011c10	// 1fff4808 <h5_crc_update+0x2c>
1fff47ea:	4241      	lsli      	r2, r2, 1
1fff47ec:	6090      	addu      	r2, r4
1fff47ee:	8ac0      	ld.h      	r6, (r2, 0x0)
1fff47f0:	6d8d      	xor      	r6, r3
    reg = (reg >> 4) ^ crc_table[(reg ^ (d >> 4)) & 0x000f];
1fff47f2:	4964      	lsri      	r3, r1, 4
1fff47f4:	6cd9      	xor      	r3, r6
1fff47f6:	68d4      	and      	r3, r5
1fff47f8:	4321      	lsli      	r1, r3, 1
1fff47fa:	6050      	addu      	r1, r4
1fff47fc:	4e44      	lsri      	r2, r6, 4
1fff47fe:	8960      	ld.h      	r3, (r1, 0x0)
1fff4800:	6c8d      	xor      	r2, r3

    *crc = reg;
1fff4802:	a840      	st.h      	r2, (r0, 0x0)
}
1fff4804:	1483      	pop      	r4-r6
1fff4806:	0000      	bkpt
1fff4808:	11011c10 	.long	0x11011c10

1fff480c <h5_slip_one_byte>:
*
* @param skb socket buffer
* @c pure data in the one byte
*/
static void h5_slip_one_byte(sk_buff *skb, uint8_t unencode_form)
{
1fff480c:	14d0      	push      	r15
1fff480e:	1425      	subi      	r14, r14, 20
    const signed char esc_c0[2] = { 0xdb, 0xdc };
1fff4810:	3200      	movi      	r2, 0
1fff4812:	2a23      	subi      	r2, 36
1fff4814:	3300      	movi      	r3, 0
1fff4816:	dc4e0005 	st.b      	r2, (r14, 0x5)
1fff481a:	2b24      	subi      	r3, 37
    const signed char esc_db[2] = { 0xdb, 0xdd };
1fff481c:	3200      	movi      	r2, 0
    const signed char esc_11[2] = { 0xdb, 0xde };
    const signed char esc_13[2] = { 0xdb, 0xdf };

    switch (unencode_form) {
1fff481e:	3953      	cmpnei      	r1, 19
    const signed char esc_db[2] = { 0xdb, 0xdd };
1fff4820:	2a22      	subi      	r2, 35
    const signed char esc_c0[2] = { 0xdb, 0xdc };
1fff4822:	dc6e0004 	st.b      	r3, (r14, 0x4)
    const signed char esc_db[2] = { 0xdb, 0xdd };
1fff4826:	dc6e0008 	st.b      	r3, (r14, 0x8)
1fff482a:	dc4e0009 	st.b      	r2, (r14, 0x9)
    const signed char esc_11[2] = { 0xdb, 0xde };
1fff482e:	dc6e000c 	st.b      	r3, (r14, 0xc)
1fff4832:	3200      	movi      	r2, 0
    const signed char esc_13[2] = { 0xdb, 0xdf };
1fff4834:	dc6e0010 	st.b      	r3, (r14, 0x10)
    const signed char esc_11[2] = { 0xdb, 0xde };
1fff4838:	2a21      	subi      	r2, 34
    const signed char esc_13[2] = { 0xdb, 0xdf };
1fff483a:	3300      	movi      	r3, 0
1fff483c:	2b20      	subi      	r3, 33
{
1fff483e:	dc2e0003 	st.b      	r1, (r14, 0x3)
    const signed char esc_11[2] = { 0xdb, 0xde };
1fff4842:	dc4e000d 	st.b      	r2, (r14, 0xd)
    const signed char esc_13[2] = { 0xdb, 0xdf };
1fff4846:	dc6e0011 	st.b      	r3, (r14, 0x11)
    switch (unencode_form) {
1fff484a:	0c2b      	bf      	0x1fff48a0	// 1fff48a0 <h5_slip_one_byte+0x94>
1fff484c:	3913      	cmphsi      	r1, 20
1fff484e:	080a      	bt      	0x1fff4862	// 1fff4862 <h5_slip_one_byte+0x56>
1fff4850:	3951      	cmpnei      	r1, 17
1fff4852:	0c1d      	bf      	0x1fff488c	// 1fff488c <h5_slip_one_byte+0x80>
            }
        }
        break;

        default:
            memcpy(hci_skb_put(skb, 1), &unencode_form, 1);
1fff4854:	3101      	movi      	r1, 1
1fff4856:	e000023d 	bsr      	0x1fff4cd0	// 1fff4cd0 <hci_skb_put>
1fff485a:	3201      	movi      	r2, 1
1fff485c:	e42e0002 	addi      	r1, r14, 3
1fff4860:	0412      	br      	0x1fff4884	// 1fff4884 <h5_slip_one_byte+0x78>
    switch (unencode_form) {
1fff4862:	eb4100c0 	cmpnei      	r1, 192
1fff4866:	0c0a      	bf      	0x1fff487a	// 1fff487a <h5_slip_one_byte+0x6e>
1fff4868:	eb4100db 	cmpnei      	r1, 219
1fff486c:	0bf4      	bt      	0x1fff4854	// 1fff4854 <h5_slip_one_byte+0x48>
            memcpy(hci_skb_put(skb, 2), &esc_db, 2);
1fff486e:	3102      	movi      	r1, 2
1fff4870:	e0000230 	bsr      	0x1fff4cd0	// 1fff4cd0 <hci_skb_put>
1fff4874:	3202      	movi      	r2, 2
1fff4876:	1902      	addi      	r1, r14, 8
1fff4878:	0406      	br      	0x1fff4884	// 1fff4884 <h5_slip_one_byte+0x78>
            memcpy(hci_skb_put(skb, 2), &esc_c0, 2);
1fff487a:	3102      	movi      	r1, 2
1fff487c:	e000022a 	bsr      	0x1fff4cd0	// 1fff4cd0 <hci_skb_put>
1fff4880:	3202      	movi      	r2, 2
1fff4882:	1901      	addi      	r1, r14, 4
            memcpy(hci_skb_put(skb, 1), &unencode_form, 1);
1fff4884:	e3ffff56 	bsr      	0x1fff4730	// 1fff4730 <__memcpy_fast>
    }
}
1fff4888:	1405      	addi      	r14, r14, 20
1fff488a:	1490      	pop      	r15
            if (rtk_h5.oof_flow_control) {
1fff488c:	106a      	lrw      	r3, 0x1fffb908	// 1fff48b4 <h5_slip_one_byte+0xa8>
1fff488e:	8365      	ld.b      	r3, (r3, 0x5)
1fff4890:	3b40      	cmpnei      	r3, 0
1fff4892:	0fe1      	bf      	0x1fff4854	// 1fff4854 <h5_slip_one_byte+0x48>
                memcpy(hci_skb_put(skb, 2), &esc_11, 2);
1fff4894:	3102      	movi      	r1, 2
1fff4896:	e000021d 	bsr      	0x1fff4cd0	// 1fff4cd0 <hci_skb_put>
1fff489a:	3202      	movi      	r2, 2
1fff489c:	1903      	addi      	r1, r14, 12
1fff489e:	07f3      	br      	0x1fff4884	// 1fff4884 <h5_slip_one_byte+0x78>
            if (rtk_h5.oof_flow_control) {
1fff48a0:	1065      	lrw      	r3, 0x1fffb908	// 1fff48b4 <h5_slip_one_byte+0xa8>
1fff48a2:	8365      	ld.b      	r3, (r3, 0x5)
1fff48a4:	3b40      	cmpnei      	r3, 0
1fff48a6:	0fd7      	bf      	0x1fff4854	// 1fff4854 <h5_slip_one_byte+0x48>
                memcpy(hci_skb_put(skb, 2), &esc_13, 2);
1fff48a8:	3102      	movi      	r1, 2
1fff48aa:	e0000213 	bsr      	0x1fff4cd0	// 1fff4cd0 <hci_skb_put>
1fff48ae:	3202      	movi      	r2, 2
1fff48b0:	1904      	addi      	r1, r14, 16
1fff48b2:	07e9      	br      	0x1fff4884	// 1fff4884 <h5_slip_one_byte+0x78>
1fff48b4:	1fffb908 	.long	0x1fffb908

1fff48b8 <h5_slip_msgdelim>:
{
1fff48b8:	14d0      	push      	r15
1fff48ba:	1421      	subi      	r14, r14, 4
    memcpy(hci_skb_put(skb, 1), &pkt_delim, 1);
1fff48bc:	3101      	movi      	r1, 1
    const char pkt_delim = 0xc0;
1fff48be:	3300      	movi      	r3, 0
1fff48c0:	2b3f      	subi      	r3, 64
1fff48c2:	dc6e0003 	st.b      	r3, (r14, 0x3)
    memcpy(hci_skb_put(skb, 1), &pkt_delim, 1);
1fff48c6:	e0000205 	bsr      	0x1fff4cd0	// 1fff4cd0 <hci_skb_put>
1fff48ca:	3201      	movi      	r2, 1
1fff48cc:	e42e0002 	addi      	r1, r14, 3
1fff48d0:	e3ffff30 	bsr      	0x1fff4730	// 1fff4730 <__memcpy_fast>
}
1fff48d4:	1401      	addi      	r14, r14, 4
1fff48d6:	1490      	pop      	r15

1fff48d8 <h5_wake_up>:
    return 0;
}


static uint16_t h5_wake_up()
{
1fff48d8:	14d4      	push      	r4-r7, r15
1fff48da:	1423      	subi      	r14, r14, 12
    uint16_t bytes_sent = 0;
    sk_buff *skb = NULL;
1fff48dc:	3300      	movi      	r3, 0
    uint8_t *data = NULL;
    uint32_t data_len = 0;

    aos_mutex_lock(&h5_wakeup_mutex, AOS_WAIT_FOREVER);
1fff48de:	1302      	lrw      	r0, 0x1fffb904	// 1fff4a64 <h5_wake_up+0x18c>
1fff48e0:	3100      	movi      	r1, 0
    sk_buff *skb = NULL;
1fff48e2:	b861      	st.w      	r3, (r14, 0x4)
    aos_mutex_lock(&h5_wakeup_mutex, AOS_WAIT_FOREVER);
1fff48e4:	2900      	subi      	r1, 1
    uint16_t bytes_sent = 0;
1fff48e6:	3600      	movi      	r6, 0
    aos_mutex_lock(&h5_wakeup_mutex, AOS_WAIT_FOREVER);
1fff48e8:	e000310c 	bsr      	0x1fffab00	// 1fffab00 <check_before_startup+0x428>
    aos_mutex_lock(&rtk_h5.data_mutex, AOS_WAIT_FOREVER);
1fff48ec:	129f      	lrw      	r4, 0x1fffb908	// 1fff4a68 <h5_wake_up+0x190>
1fff48ee:	e4e4006f 	addi      	r7, r4, 112
    sk_buff *skb = NULL;
1fff48f2:	3300      	movi      	r3, 0
    aos_mutex_lock(&rtk_h5.data_mutex, AOS_WAIT_FOREVER);
1fff48f4:	6c1f      	mov      	r0, r7
    sk_buff *skb = NULL;
1fff48f6:	b862      	st.w      	r3, (r14, 0x8)
    aos_mutex_lock(&rtk_h5.data_mutex, AOS_WAIT_FOREVER);
1fff48f8:	3100      	movi      	r1, 0
1fff48fa:	2900      	subi      	r1, 1
1fff48fc:	e0003102 	bsr      	0x1fffab00	// 1fffab00 <check_before_startup+0x428>
    if ((skb = (sk_buff *)hci_skb_dequeue_head(rtk_h5.unrel)) != NULL) {
1fff4900:	9404      	ld.w      	r0, (r4, 0x10)
1fff4902:	e0000218 	bsr      	0x1fff4d32	// 1fff4d32 <hci_skb_dequeue_head>
1fff4906:	3840      	cmpnei      	r0, 0
1fff4908:	b802      	st.w      	r0, (r14, 0x8)
1fff490a:	0c34      	bf      	0x1fff4972	// 1fff4972 <h5_wake_up+0x9a>
        sk_buff *nskb = h5_prepare_pkt(&rtk_h5,
1fff490c:	e00001ca 	bsr      	0x1fff4ca0	// 1fff4ca0 <hci_skb_get_data>
                                       hci_skb_get_data_length(skb),
1fff4910:	9862      	ld.w      	r3, (r14, 0x8)
        sk_buff *nskb = h5_prepare_pkt(&rtk_h5,
1fff4912:	6d43      	mov      	r5, r0
                                       hci_skb_get_data_length(skb),
1fff4914:	6c0f      	mov      	r0, r3
1fff4916:	e00001c7 	bsr      	0x1fff4ca4	// 1fff4ca4 <hci_skb_get_data_length>
                                       hci_skb_get_pkt_type(skb));
1fff491a:	9862      	ld.w      	r3, (r14, 0x8)
                                       hci_skb_get_data_length(skb),
1fff491c:	b800      	st.w      	r0, (r14, 0x0)
                                       hci_skb_get_pkt_type(skb));
1fff491e:	6c0f      	mov      	r0, r3
1fff4920:	e00001e2 	bsr      	0x1fff4ce4	// 1fff4ce4 <hci_skb_get_pkt_type>
1fff4924:	6c83      	mov      	r2, r0
        sk_buff *nskb = h5_prepare_pkt(&rtk_h5,
1fff4926:	9820      	ld.w      	r1, (r14, 0x0)
1fff4928:	6c17      	mov      	r0, r5
1fff492a:	e0003229 	bsr      	0x1fffad7c	// 1fffad7c <check_before_startup+0x6a4>
1fff492e:	6d43      	mov      	r5, r0
        if (nskb) {
1fff4930:	3840      	cmpnei      	r0, 0
1fff4932:	0c1b      	bf      	0x1fff4968	// 1fff4968 <h5_wake_up+0x90>
            aos_mutex_unlock(&rtk_h5.data_mutex);
1fff4934:	120e      	lrw      	r0, 0x1fffb978	// 1fff4a6c <h5_wake_up+0x194>
1fff4936:	e0003049 	bsr      	0x1fffa9c8	// 1fffa9c8 <check_before_startup+0x2f0>
            hci_skb_free(&skb);
1fff493a:	1802      	addi      	r0, r14, 8
1fff493c:	e00001bb 	bsr      	0x1fff4cb2	// 1fff4cb2 <hci_skb_free>
1fff4940:	0451      	br      	0x1fff49e2	// 1fff49e2 <h5_wake_up+0x10a>

    //BT_DBG("h5_wake_up");
    while (NULL != (skb = h5_dequeue())) {
        data = hci_skb_get_data(skb);
1fff4942:	6c17      	mov      	r0, r5
1fff4944:	e00001ae 	bsr      	0x1fff4ca0	// 1fff4ca0 <hci_skb_get_data>
        data_len = hci_skb_get_data_length(skb);
1fff4948:	9861      	ld.w      	r3, (r14, 0x4)
        data = hci_skb_get_data(skb);
1fff494a:	6d43      	mov      	r5, r0
        data_len = hci_skb_get_data_length(skb);
1fff494c:	6c0f      	mov      	r0, r3
1fff494e:	e00001ab 	bsr      	0x1fff4ca4	// 1fff4ca4 <hci_skb_get_data_length>
1fff4952:	6c83      	mov      	r2, r0

            printf("\n");
        }
#endif
        //we adopt the hci_drv interface to send data
        bytes_sent = hci_send(rtk_h5.hci_dev, data, data_len);
1fff4954:	6c57      	mov      	r1, r5
1fff4956:	d8042020 	ld.w      	r0, (r4, 0x80)
1fff495a:	e0002ecf 	bsr      	0x1fffa6f8	// 1fffa6f8 <check_before_startup+0x20>
1fff495e:	7581      	zexth      	r6, r0

        hci_skb_free(&skb);
1fff4960:	1801      	addi      	r0, r14, 4
1fff4962:	e00001a8 	bsr      	0x1fff4cb2	// 1fff4cb2 <hci_skb_free>
1fff4966:	07c6      	br      	0x1fff48f2	// 1fff48f2 <h5_wake_up+0x1a>
            hci_skb_queue_head(rtk_h5.unrel, skb);
1fff4968:	9862      	ld.w      	r3, (r14, 0x8)
1fff496a:	6c4f      	mov      	r1, r3
1fff496c:	9404      	ld.w      	r0, (r4, 0x10)
1fff496e:	e00001da 	bsr      	0x1fff4d22	// 1fff4d22 <hci_skb_queue_head>
    aos_mutex_unlock(&rtk_h5.data_mutex);
1fff4972:	111f      	lrw      	r0, 0x1fffb978	// 1fff4a6c <h5_wake_up+0x194>
1fff4974:	e000302a 	bsr      	0x1fffa9c8	// 1fffa9c8 <check_before_startup+0x2f0>
    aos_mutex_lock(&rtk_h5.data_mutex, AOS_WAIT_FOREVER);
1fff4978:	111d      	lrw      	r0, 0x1fffb978	// 1fff4a6c <h5_wake_up+0x194>
1fff497a:	3100      	movi      	r1, 0
1fff497c:	2900      	subi      	r1, 1
1fff497e:	e00030c1 	bsr      	0x1fffab00	// 1fffab00 <check_before_startup+0x428>
    if (RtbGetQueueLen(rtk_h5.unack) < rtk_h5.sliding_window_size &&
1fff4982:	9402      	ld.w      	r0, (r4, 0x8)
1fff4984:	e0000165 	bsr      	0x1fff4c4e	// 1fff4c4e <RtbGetQueueLen>
1fff4988:	8464      	ld.b      	r3, (r4, 0x4)
1fff498a:	64c1      	cmplt      	r0, r3
1fff498c:	0c37      	bf      	0x1fff49fa	// 1fff49fa <h5_wake_up+0x122>
        (skb = (sk_buff *)hci_skb_dequeue_head(rtk_h5.rel)) != NULL) {
1fff498e:	9403      	ld.w      	r0, (r4, 0xc)
1fff4990:	e00001d1 	bsr      	0x1fff4d32	// 1fff4d32 <hci_skb_dequeue_head>
    if (RtbGetQueueLen(rtk_h5.unack) < rtk_h5.sliding_window_size &&
1fff4994:	3840      	cmpnei      	r0, 0
        (skb = (sk_buff *)hci_skb_dequeue_head(rtk_h5.rel)) != NULL) {
1fff4996:	b802      	st.w      	r0, (r14, 0x8)
    if (RtbGetQueueLen(rtk_h5.unack) < rtk_h5.sliding_window_size &&
1fff4998:	0c31      	bf      	0x1fff49fa	// 1fff49fa <h5_wake_up+0x122>
        sk_buff *nskb = h5_prepare_pkt(&rtk_h5,
1fff499a:	e0000183 	bsr      	0x1fff4ca0	// 1fff4ca0 <hci_skb_get_data>
                                       hci_skb_get_data_length(skb),
1fff499e:	9862      	ld.w      	r3, (r14, 0x8)
        sk_buff *nskb = h5_prepare_pkt(&rtk_h5,
1fff49a0:	6d43      	mov      	r5, r0
                                       hci_skb_get_data_length(skb),
1fff49a2:	6c0f      	mov      	r0, r3
1fff49a4:	e0000180 	bsr      	0x1fff4ca4	// 1fff4ca4 <hci_skb_get_data_length>
                                       hci_skb_get_pkt_type(skb));
1fff49a8:	9862      	ld.w      	r3, (r14, 0x8)
                                       hci_skb_get_data_length(skb),
1fff49aa:	b800      	st.w      	r0, (r14, 0x0)
                                       hci_skb_get_pkt_type(skb));
1fff49ac:	6c0f      	mov      	r0, r3
1fff49ae:	e000019b 	bsr      	0x1fff4ce4	// 1fff4ce4 <hci_skb_get_pkt_type>
1fff49b2:	6c83      	mov      	r2, r0
        sk_buff *nskb = h5_prepare_pkt(&rtk_h5,
1fff49b4:	9820      	ld.w      	r1, (r14, 0x0)
1fff49b6:	6c17      	mov      	r0, r5
1fff49b8:	e00031e2 	bsr      	0x1fffad7c	// 1fffad7c <check_before_startup+0x6a4>
1fff49bc:	6d43      	mov      	r5, r0
        if (nskb) {
1fff49be:	3840      	cmpnei      	r0, 0
1fff49c0:	9822      	ld.w      	r1, (r14, 0x8)
1fff49c2:	0c19      	bf      	0x1fff49f4	// 1fff49f4 <h5_wake_up+0x11c>
            hci_skb_queue_tail(rtk_h5.unack, skb);
1fff49c4:	9402      	ld.w      	r0, (r4, 0x8)
1fff49c6:	e00001b2 	bsr      	0x1fff4d2a	// 1fff4d2a <hci_skb_queue_tail>
            aos_mutex_unlock(&rtk_h5.data_mutex);
1fff49ca:	1109      	lrw      	r0, 0x1fffb978	// 1fff4a6c <h5_wake_up+0x194>
1fff49cc:	e0002ffe 	bsr      	0x1fffa9c8	// 1fffa9c8 <check_before_startup+0x2f0>
}

static int h5_start_data_retrans_timer()
{
    rtk_h5.timer_data_retrans_start = 1;
    return OsStartTimer(rtk_h5.timer_data_retrans, DATA_RETRANS_TIMEOUT_VALUE, 0);
1fff49d0:	31fa      	movi      	r1, 250
    rtk_h5.timer_data_retrans_start = 1;
1fff49d2:	3301      	movi      	r3, 1
    return OsStartTimer(rtk_h5.timer_data_retrans, DATA_RETRANS_TIMEOUT_VALUE, 0);
1fff49d4:	3200      	movi      	r2, 0
1fff49d6:	4122      	lsli      	r1, r1, 2
1fff49d8:	9410      	ld.w      	r0, (r4, 0x40)
    rtk_h5.timer_data_retrans_start = 1;
1fff49da:	dc640044 	st.b      	r3, (r4, 0x44)
    return OsStartTimer(rtk_h5.timer_data_retrans, DATA_RETRANS_TIMEOUT_VALUE, 0);
1fff49de:	e0002f7d 	bsr      	0x1fffa8d8	// 1fffa8d8 <check_before_startup+0x200>
    while (NULL != (skb = h5_dequeue())) {
1fff49e2:	3d40      	cmpnei      	r5, 0
1fff49e4:	b8a1      	st.w      	r5, (r14, 0x4)
1fff49e6:	0bae      	bt      	0x1fff4942	// 1fff4942 <h5_wake_up+0x6a>
    aos_mutex_unlock(&h5_wakeup_mutex);
1fff49e8:	101f      	lrw      	r0, 0x1fffb904	// 1fff4a64 <h5_wake_up+0x18c>
1fff49ea:	e0002fef 	bsr      	0x1fffa9c8	// 1fffa9c8 <check_before_startup+0x2f0>
}
1fff49ee:	6c1b      	mov      	r0, r6
1fff49f0:	1403      	addi      	r14, r14, 12
1fff49f2:	1494      	pop      	r4-r7, r15
            hci_skb_queue_head(rtk_h5.rel, skb);
1fff49f4:	9403      	ld.w      	r0, (r4, 0xc)
1fff49f6:	e0000196 	bsr      	0x1fff4d22	// 1fff4d22 <hci_skb_queue_head>
    aos_mutex_unlock(&rtk_h5.data_mutex);
1fff49fa:	101d      	lrw      	r0, 0x1fffb978	// 1fff4a6c <h5_wake_up+0x194>
1fff49fc:	e0002fe6 	bsr      	0x1fffa9c8	// 1fffa9c8 <check_before_startup+0x2f0>
    if (rtk_h5.is_txack_req) {
1fff4a00:	847f      	ld.b      	r3, (r4, 0x1f)
1fff4a02:	3b40      	cmpnei      	r3, 0
1fff4a04:	0c08      	bf      	0x1fff4a14	// 1fff4a14 <h5_wake_up+0x13c>
        sk_buff *nskb = h5_prepare_pkt(&rtk_h5, NULL, 0, H5_ACK_PKT);
1fff4a06:	3200      	movi      	r2, 0
1fff4a08:	3100      	movi      	r1, 0
1fff4a0a:	3000      	movi      	r0, 0
1fff4a0c:	e00031b8 	bsr      	0x1fffad7c	// 1fffad7c <check_before_startup+0x6a4>
1fff4a10:	6d43      	mov      	r5, r0
1fff4a12:	07e8      	br      	0x1fff49e2	// 1fff49e2 <h5_wake_up+0x10a>
    aos_mutex_lock(&rtk_h5.data_mutex, AOS_WAIT_FOREVER);
1fff4a14:	1016      	lrw      	r0, 0x1fffb978	// 1fff4a6c <h5_wake_up+0x194>
1fff4a16:	3100      	movi      	r1, 0
1fff4a18:	2900      	subi      	r1, 1
1fff4a1a:	e0003073 	bsr      	0x1fffab00	// 1fffab00 <check_before_startup+0x428>
    if ((skb = (sk_buff *)hci_skb_dequeue_head(rtk_h5.adv_unref)) != NULL) {
1fff4a1e:	9406      	ld.w      	r0, (r4, 0x18)
1fff4a20:	e0000189 	bsr      	0x1fff4d32	// 1fff4d32 <hci_skb_dequeue_head>
1fff4a24:	3840      	cmpnei      	r0, 0
1fff4a26:	b802      	st.w      	r0, (r14, 0x8)
1fff4a28:	0c19      	bf      	0x1fff4a5a	// 1fff4a5a <h5_wake_up+0x182>
        sk_buff *nskb = h5_prepare_pkt(&rtk_h5,
1fff4a2a:	e000013b 	bsr      	0x1fff4ca0	// 1fff4ca0 <hci_skb_get_data>
                                       hci_skb_get_data_length(skb),
1fff4a2e:	9862      	ld.w      	r3, (r14, 0x8)
        sk_buff *nskb = h5_prepare_pkt(&rtk_h5,
1fff4a30:	6d43      	mov      	r5, r0
                                       hci_skb_get_data_length(skb),
1fff4a32:	6c0f      	mov      	r0, r3
1fff4a34:	e0000138 	bsr      	0x1fff4ca4	// 1fff4ca4 <hci_skb_get_data_length>
                                       hci_skb_get_pkt_type(skb));
1fff4a38:	9862      	ld.w      	r3, (r14, 0x8)
                                       hci_skb_get_data_length(skb),
1fff4a3a:	b800      	st.w      	r0, (r14, 0x0)
                                       hci_skb_get_pkt_type(skb));
1fff4a3c:	6c0f      	mov      	r0, r3
1fff4a3e:	e0000153 	bsr      	0x1fff4ce4	// 1fff4ce4 <hci_skb_get_pkt_type>
1fff4a42:	6c83      	mov      	r2, r0
        sk_buff *nskb = h5_prepare_pkt(&rtk_h5,
1fff4a44:	9820      	ld.w      	r1, (r14, 0x0)
1fff4a46:	6c17      	mov      	r0, r5
1fff4a48:	e000319a 	bsr      	0x1fffad7c	// 1fffad7c <check_before_startup+0x6a4>
1fff4a4c:	6d43      	mov      	r5, r0
        if (nskb) {
1fff4a4e:	3840      	cmpnei      	r0, 0
1fff4a50:	0b72      	bt      	0x1fff4934	// 1fff4934 <h5_wake_up+0x5c>
            hci_skb_queue_head(rtk_h5.adv_unref, skb);
1fff4a52:	9822      	ld.w      	r1, (r14, 0x8)
1fff4a54:	9406      	ld.w      	r0, (r4, 0x18)
1fff4a56:	e0000166 	bsr      	0x1fff4d22	// 1fff4d22 <hci_skb_queue_head>
    aos_mutex_unlock(&rtk_h5.data_mutex);
1fff4a5a:	1005      	lrw      	r0, 0x1fffb978	// 1fff4a6c <h5_wake_up+0x194>
    return NULL;
1fff4a5c:	3500      	movi      	r5, 0
    aos_mutex_unlock(&rtk_h5.data_mutex);
1fff4a5e:	e0002fb5 	bsr      	0x1fffa9c8	// 1fffa9c8 <check_before_startup+0x2f0>
1fff4a62:	07c0      	br      	0x1fff49e2	// 1fff49e2 <h5_wake_up+0x10a>
1fff4a64:	1fffb904 	.long	0x1fffb904
1fff4a68:	1fffb908 	.long	0x1fffb908
1fff4a6c:	1fffb978 	.long	0x1fffb978

1fff4a70 <hci_h5_send_acl_data>:
{
1fff4a70:	14d1      	push      	r4, r15
    skb = hci_skb_alloc_and_init(type, data, length);
1fff4a72:	7400      	zextb      	r0, r0
{
1fff4a74:	6d0b      	mov      	r4, r2
    skb = hci_skb_alloc_and_init(type, data, length);
1fff4a76:	e0000141 	bsr      	0x1fff4cf8	// 1fff4cf8 <hci_skb_alloc_and_init>
    if (!skb) {
1fff4a7a:	3840      	cmpnei      	r0, 0
1fff4a7c:	0c07      	bf      	0x1fff4a8a	// 1fff4a8a <hci_h5_send_acl_data+0x1a>
    h5_enqueue(skb);
1fff4a7e:	e000318b 	bsr      	0x1fffad94	// 1fffad94 <check_before_startup+0x6bc>
    h5_wake_up();
1fff4a82:	e3ffff2b 	bsr      	0x1fff48d8	// 1fff48d8 <h5_wake_up>
}
1fff4a86:	6c13      	mov      	r0, r4
1fff4a88:	1491      	pop      	r4, r15
        return -1;
1fff4a8a:	ea04ffff 	movi      	r4, 65535
1fff4a8e:	07fc      	br      	0x1fff4a86	// 1fff4a86 <hci_h5_send_acl_data+0x16>

1fff4a90 <RtbAllocate>:
RTK_BUFFER*
RtbAllocate(
    uint32_t Length,
    uint32_t HeadRoom
    )
{
1fff4a90:	14d3      	push      	r4-r6, r15
1fff4a92:	6d83      	mov      	r6, r0
    ///     RTK_BUFFER   48
    ///     HeadRoom      HeadRomm or 12
    ///     Length
    ///memory size: 48 + Length + 12(default) + 8*2(header for each memory) ---> a multiple of 8
    ///example:       (48 + 8)+ (300 + 12 + 8) = 372
    Rtb = malloc( sizeof(RTK_BUFFER) );
1fff4a94:	3034      	movi      	r0, 52
{
1fff4a96:	6d47      	mov      	r5, r1
    Rtb = malloc( sizeof(RTK_BUFFER) );
1fff4a98:	e0002e78 	bsr      	0x1fffa788	// 1fffa788 <check_before_startup+0xb0>
1fff4a9c:	6d03      	mov      	r4, r0
    if(Rtb)
1fff4a9e:	3840      	cmpnei      	r0, 0
1fff4aa0:	0c1e      	bf      	0x1fff4adc	// 1fff4adc <RtbAllocate+0x4c>
    {
        uint32_t BufferLen = HeadRoom ? (Length + HeadRoom) : (Length + DEFAULT_HEADER_SIZE);
1fff4aa2:	3d40      	cmpnei      	r5, 0
1fff4aa4:	0c1e      	bf      	0x1fff4ae0	// 1fff4ae0 <RtbAllocate+0x50>
1fff4aa6:	5d18      	addu      	r0, r5, r6
        BufferLen = RTB_DATA_ALIGN(BufferLen);
1fff4aa8:	2002      	addi      	r0, 3
1fff4aaa:	3880      	bclri      	r0, 0
1fff4aac:	3881      	bclri      	r0, 1
        Rtb->Head = malloc(BufferLen);
1fff4aae:	e0002e6d 	bsr      	0x1fffa788	// 1fffa788 <check_before_startup+0xb0>
        if(Rtb->Head)
1fff4ab2:	3840      	cmpnei      	r0, 0
        Rtb->Head = malloc(BufferLen);
1fff4ab4:	b402      	st.w      	r0, (r4, 0x8)
        if(Rtb->Head)
1fff4ab6:	0c18      	bf      	0x1fff4ae6	// 1fff4ae6 <RtbAllocate+0x56>
        {
            Rtb->HeadRoom = HeadRoom ? HeadRoom : DEFAULT_HEADER_SIZE;
1fff4ab8:	3d40      	cmpnei      	r5, 0
1fff4aba:	330c      	movi      	r3, 12
1fff4abc:	c4a30c20 	incf      	r5, r3, 0
            Rtb->Data = Rtb->Head + Rtb->HeadRoom;
            Rtb->End = Rtb->Data;
            Rtb->Tail = Rtb->End + Length;
            Rtb->Length = 0;
1fff4ac0:	3300      	movi      	r3, 0
            Rtb->Data = Rtb->Head + Rtb->HeadRoom;
1fff4ac2:	6014      	addu      	r0, r5
1fff4ac4:	b403      	st.w      	r0, (r4, 0xc)
            Rtb->End = Rtb->Data;
1fff4ac6:	b405      	st.w      	r0, (r4, 0x14)
            Rtb->Tail = Rtb->End + Length;
1fff4ac8:	6018      	addu      	r0, r6
1fff4aca:	b404      	st.w      	r0, (r4, 0x10)
            Rtb->Length = 0;
1fff4acc:	b466      	st.w      	r3, (r4, 0x18)
            Rtb->HeadRoom = HeadRoom ? HeadRoom : DEFAULT_HEADER_SIZE;
1fff4ace:	b4a7      	st.w      	r5, (r4, 0x1c)
            ListInitializeHeader(&Rtb->List);
1fff4ad0:	6c13      	mov      	r0, r4
1fff4ad2:	e000013a 	bsr      	0x1fff4d46	// 1fff4d46 <ListInitializeHeader>
            Rtb->RefCount = 1;
1fff4ad6:	3301      	movi      	r3, 1
1fff4ad8:	dc640020 	st.b      	r3, (r4, 0x20)
        }

        free(Rtb);
    }
    return NULL;
}
1fff4adc:	6c13      	mov      	r0, r4
1fff4ade:	1493      	pop      	r4-r6, r15
        uint32_t BufferLen = HeadRoom ? (Length + HeadRoom) : (Length + DEFAULT_HEADER_SIZE);
1fff4ae0:	e406000b 	addi      	r0, r6, 12
1fff4ae4:	07e2      	br      	0x1fff4aa8	// 1fff4aa8 <RtbAllocate+0x18>
        free(Rtb);
1fff4ae6:	6c13      	mov      	r0, r4
    return NULL;
1fff4ae8:	3400      	movi      	r4, 0
        free(Rtb);
1fff4aea:	e0003023 	bsr      	0x1fffab30	// 1fffab30 <check_before_startup+0x458>
1fff4aee:	07f7      	br      	0x1fff4adc	// 1fff4adc <RtbAllocate+0x4c>

1fff4af0 <RtbFree>:
*/
void
RtbFree(
    RTK_BUFFER* RtkBuffer
)
{
1fff4af0:	14d1      	push      	r4, r15
1fff4af2:	6d03      	mov      	r4, r0
    if(RtkBuffer)
1fff4af4:	3840      	cmpnei      	r0, 0
1fff4af6:	0c07      	bf      	0x1fff4b04	// 1fff4b04 <RtbFree+0x14>
    {
        free(RtkBuffer->Head);
1fff4af8:	9002      	ld.w      	r0, (r0, 0x8)
1fff4afa:	e000301b 	bsr      	0x1fffab30	// 1fffab30 <check_before_startup+0x458>
        free(RtkBuffer);
1fff4afe:	6c13      	mov      	r0, r4
1fff4b00:	e0003018 	bsr      	0x1fffab30	// 1fffab30 <check_before_startup+0x458>
    }
    return;
}
1fff4b04:	1491      	pop      	r4, r15

1fff4b06 <RtbRemoveHead>:
    RTK_BUFFER* RtkBuffer,
    uint32_t                 Length
    )
{

    if (RtkBuffer->Length >= Length)
1fff4b06:	9066      	ld.w      	r3, (r0, 0x18)
1fff4b08:	644c      	cmphs      	r3, r1
1fff4b0a:	0c0b      	bf      	0x1fff4b20	// 1fff4b20 <RtbRemoveHead+0x1a>
    {
        RtkBuffer->Data += Length;
        RtkBuffer->Length -= Length;
1fff4b0c:	60c6      	subu      	r3, r1
        RtkBuffer->Data += Length;
1fff4b0e:	9043      	ld.w      	r2, (r0, 0xc)
        RtkBuffer->Length -= Length;
1fff4b10:	b066      	st.w      	r3, (r0, 0x18)
        RtkBuffer->Data += Length;
1fff4b12:	6084      	addu      	r2, r1
        RtkBuffer->HeadRoom += Length;
1fff4b14:	9067      	ld.w      	r3, (r0, 0x1c)
1fff4b16:	604c      	addu      	r1, r3
        RtkBuffer->Data += Length;
1fff4b18:	b043      	st.w      	r2, (r0, 0xc)
        RtkBuffer->HeadRoom += Length;
1fff4b1a:	b027      	st.w      	r1, (r0, 0x1c)
        return  true;
1fff4b1c:	3001      	movi      	r0, 1
    }

    return false;
}
1fff4b1e:	783c      	jmp      	r15
    return false;
1fff4b20:	3000      	movi      	r0, 0
1fff4b22:	07fe      	br      	0x1fff4b1e	// 1fff4b1e <RtbRemoveHead+0x18>

1fff4b24 <RtbAddTail>:
uint8_t*
RtbAddTail(
    RTK_BUFFER* RtkBuffer,
    uint32_t                 Length
    )
{
1fff4b24:	6cc3      	mov      	r3, r0

    if ((uint32_t)(RtkBuffer->Tail - RtkBuffer->End) >= Length)
1fff4b26:	9344      	ld.w      	r2, (r3, 0x10)
1fff4b28:	9005      	ld.w      	r0, (r0, 0x14)
1fff4b2a:	6082      	subu      	r2, r0
1fff4b2c:	6448      	cmphs      	r2, r1
1fff4b2e:	0c07      	bf      	0x1fff4b3c	// 1fff4b3c <RtbAddTail+0x18>
    {
        uint8_t* Tmp = RtkBuffer->End;
        RtkBuffer->End += Length;
1fff4b30:	5844      	addu      	r2, r0, r1
1fff4b32:	b345      	st.w      	r2, (r3, 0x14)
        RtkBuffer->Length += Length;
1fff4b34:	9346      	ld.w      	r2, (r3, 0x18)
1fff4b36:	6048      	addu      	r1, r2
1fff4b38:	b326      	st.w      	r1, (r3, 0x18)
        return Tmp;
    }

    return NULL;
}
1fff4b3a:	783c      	jmp      	r15
    return NULL;
1fff4b3c:	3000      	movi      	r0, 0
1fff4b3e:	07fe      	br      	0x1fff4b3a	// 1fff4b3a <RtbAddTail+0x16>

1fff4b40 <RtbRemoveTail>:
    IN OUT RTK_BUFFER * RtkBuffer,
    IN     uint32_t       Length
)
{

    if ((uint32_t)(RtkBuffer->End - RtkBuffer->Data) >= Length)
1fff4b40:	9065      	ld.w      	r3, (r0, 0x14)
1fff4b42:	9043      	ld.w      	r2, (r0, 0xc)
1fff4b44:	5b49      	subu      	r2, r3, r2
1fff4b46:	6448      	cmphs      	r2, r1
1fff4b48:	0c08      	bf      	0x1fff4b58	// 1fff4b58 <RtbRemoveTail+0x18>
    {
        RtkBuffer->End -= Length;
1fff4b4a:	60c6      	subu      	r3, r1
1fff4b4c:	b065      	st.w      	r3, (r0, 0x14)
        RtkBuffer->Length -= Length;
1fff4b4e:	9066      	ld.w      	r3, (r0, 0x18)
1fff4b50:	60c6      	subu      	r3, r1
1fff4b52:	b066      	st.w      	r3, (r0, 0x18)
        return true;
1fff4b54:	3001      	movi      	r0, 1
    }

    return false;
}
1fff4b56:	783c      	jmp      	r15
    return false;
1fff4b58:	3000      	movi      	r0, 0
1fff4b5a:	07fe      	br      	0x1fff4b56	// 1fff4b56 <RtbRemoveTail+0x16>

1fff4b5c <RtbQueueInit>:
    \return  Initilized rtb queue if succeed, otherwise NULL
*/
RTB_QUEUE_HEAD*
RtbQueueInit(
)
{
1fff4b5c:	14d1      	push      	r4, r15
    RTB_QUEUE_HEAD* RtbQueue = NULL;

    RtbQueue = malloc(sizeof(RTB_QUEUE_HEAD));
1fff4b5e:	3050      	movi      	r0, 80
1fff4b60:	e0002e14 	bsr      	0x1fffa788	// 1fffa788 <check_before_startup+0xb0>
1fff4b64:	6d03      	mov      	r4, r0
    if(RtbQueue)
1fff4b66:	3840      	cmpnei      	r0, 0
1fff4b68:	0c09      	bf      	0x1fff4b7a	// 1fff4b7a <RtbQueueInit+0x1e>
    {
        aos_mutex_new(&RtbQueue->Lock);
1fff4b6a:	200b      	addi      	r0, 12
1fff4b6c:	e0002f70 	bsr      	0x1fffaa4c	// 1fffaa4c <check_before_startup+0x374>
        ListInitializeHeader(&RtbQueue->List);
1fff4b70:	6c13      	mov      	r0, r4
1fff4b72:	e00000ea 	bsr      	0x1fff4d46	// 1fff4d46 <ListInitializeHeader>
        RtbQueue->QueueLen = 0;
1fff4b76:	3300      	movi      	r3, 0
1fff4b78:	b462      	st.w      	r3, (r4, 0x8)
    {
        free(RtbQueue);
    }
    return NULL;

}
1fff4b7a:	6c13      	mov      	r0, r4
1fff4b7c:	1491      	pop      	r4, r15

1fff4b7e <RtbQueueTail>:
void
RtbQueueTail(
    IN OUT RTB_QUEUE_HEAD* RtkQueueHead,
    IN RTK_BUFFER*                 RtkBuffer
    )
{
1fff4b7e:	14d3      	push      	r4-r6, r15
1fff4b80:	6d03      	mov      	r4, r0
    aos_mutex_lock(&RtkQueueHead->Lock, AOS_WAIT_FOREVER);
1fff4b82:	e4a0000b 	addi      	r5, r0, 12
1fff4b86:	6c17      	mov      	r0, r5
{
1fff4b88:	6d87      	mov      	r6, r1
    aos_mutex_lock(&RtkQueueHead->Lock, AOS_WAIT_FOREVER);
1fff4b8a:	3100      	movi      	r1, 0
1fff4b8c:	2900      	subi      	r1, 1
1fff4b8e:	e0002fb9 	bsr      	0x1fffab00	// 1fffab00 <check_before_startup+0x428>
    ListAddToTail(&RtkBuffer->List, &RtkQueueHead->List);
1fff4b92:	6c53      	mov      	r1, r4
1fff4b94:	6c1b      	mov      	r0, r6
1fff4b96:	e00000e1 	bsr      	0x1fff4d58	// 1fff4d58 <ListAddToTail>
    RtkQueueHead->QueueLen++;
1fff4b9a:	9462      	ld.w      	r3, (r4, 0x8)
1fff4b9c:	2300      	addi      	r3, 1
1fff4b9e:	b462      	st.w      	r3, (r4, 0x8)
    aos_mutex_unlock(&RtkQueueHead->Lock);
1fff4ba0:	6c17      	mov      	r0, r5
1fff4ba2:	e0002f13 	bsr      	0x1fffa9c8	// 1fffa9c8 <check_before_startup+0x2f0>
}
1fff4ba6:	1493      	pop      	r4-r6, r15

1fff4ba8 <RtbQueueHead>:
void
RtbQueueHead(
    IN OUT RTB_QUEUE_HEAD* RtkQueueHead,
    IN RTK_BUFFER*                 RtkBuffer
    )
{
1fff4ba8:	14d3      	push      	r4-r6, r15
1fff4baa:	6d03      	mov      	r4, r0
    aos_mutex_lock(&RtkQueueHead->Lock, AOS_WAIT_FOREVER);
1fff4bac:	e4a0000b 	addi      	r5, r0, 12
1fff4bb0:	6c17      	mov      	r0, r5
{
1fff4bb2:	6d87      	mov      	r6, r1
    aos_mutex_lock(&RtkQueueHead->Lock, AOS_WAIT_FOREVER);
1fff4bb4:	3100      	movi      	r1, 0
1fff4bb6:	2900      	subi      	r1, 1
1fff4bb8:	e0002fa4 	bsr      	0x1fffab00	// 1fffab00 <check_before_startup+0x428>
    ListAddToHead(&RtkBuffer->List, &RtkQueueHead->List);
1fff4bbc:	6c53      	mov      	r1, r4
1fff4bbe:	6c1b      	mov      	r0, r6
1fff4bc0:	e00000c6 	bsr      	0x1fff4d4c	// 1fff4d4c <ListAddToHead>
    RtkQueueHead->QueueLen++;
1fff4bc4:	9462      	ld.w      	r3, (r4, 0x8)
1fff4bc6:	2300      	addi      	r3, 1
1fff4bc8:	b462      	st.w      	r3, (r4, 0x8)
    aos_mutex_unlock(&RtkQueueHead->Lock);
1fff4bca:	6c17      	mov      	r0, r5
1fff4bcc:	e0002efe 	bsr      	0x1fffa9c8	// 1fffa9c8 <check_before_startup+0x2f0>
}
1fff4bd0:	1493      	pop      	r4-r6, r15

1fff4bd2 <RtbRemoveNode>:
void
RtbRemoveNode(
    IN OUT RTB_QUEUE_HEAD* RtkQueueHead,
    IN RTK_BUFFER*                 RtkBuffer
)
{
1fff4bd2:	14d0      	push      	r15
    RtkQueueHead->QueueLen--;
1fff4bd4:	9062      	ld.w      	r3, (r0, 0x8)
1fff4bd6:	2b00      	subi      	r3, 1
1fff4bd8:	b062      	st.w      	r3, (r0, 0x8)
    ListDeleteNode(&RtkBuffer->List);
1fff4bda:	6c07      	mov      	r0, r1
1fff4bdc:	e00000c4 	bsr      	0x1fff4d64	// 1fff4d64 <ListDeleteNode>
}
1fff4be0:	1490      	pop      	r15

1fff4be2 <RtbDequeueTail>:
*/
RTK_BUFFER*
RtbDequeueTail(
    IN OUT RTB_QUEUE_HEAD* RtkQueueHead
)
{
1fff4be2:	14d3      	push      	r4-r6, r15
1fff4be4:	6d03      	mov      	r4, r0
    RTK_BUFFER* Rtb = NULL;

    aos_mutex_lock(&RtkQueueHead->Lock, AOS_WAIT_FOREVER);
1fff4be6:	e4c0000b 	addi      	r6, r0, 12
1fff4bea:	6c1b      	mov      	r0, r6
1fff4bec:	3100      	movi      	r1, 0
1fff4bee:	2900      	subi      	r1, 1
1fff4bf0:	e0002f88 	bsr      	0x1fffab00	// 1fffab00 <check_before_startup+0x428>
    if (RtbQueueIsEmpty(RtkQueueHead))
1fff4bf4:	9462      	ld.w      	r3, (r4, 0x8)
1fff4bf6:	3b40      	cmpnei      	r3, 0
1fff4bf8:	0807      	bt      	0x1fff4c06	// 1fff4c06 <RtbDequeueTail+0x24>
    {
         aos_mutex_unlock(&RtkQueueHead->Lock);
1fff4bfa:	6c1b      	mov      	r0, r6
         return NULL;
1fff4bfc:	3500      	movi      	r5, 0
         aos_mutex_unlock(&RtkQueueHead->Lock);
1fff4bfe:	e0002ee5 	bsr      	0x1fffa9c8	// 1fffa9c8 <check_before_startup+0x2f0>
    Rtb = (RTK_BUFFER*)RtkQueueHead->List.Prev;
    RtbRemoveNode(RtkQueueHead, Rtb);
    aos_mutex_unlock(&RtkQueueHead->Lock);

    return Rtb;
}
1fff4c02:	6c17      	mov      	r0, r5
1fff4c04:	1493      	pop      	r4-r6, r15
    Rtb = (RTK_BUFFER*)RtkQueueHead->List.Prev;
1fff4c06:	94a1      	ld.w      	r5, (r4, 0x4)
    RtbRemoveNode(RtkQueueHead, Rtb);
1fff4c08:	6c13      	mov      	r0, r4
1fff4c0a:	6c57      	mov      	r1, r5
1fff4c0c:	e3ffffe3 	bsr      	0x1fff4bd2	// 1fff4bd2 <RtbRemoveNode>
    aos_mutex_unlock(&RtkQueueHead->Lock);
1fff4c10:	6c1b      	mov      	r0, r6
1fff4c12:	e0002edb 	bsr      	0x1fffa9c8	// 1fffa9c8 <check_before_startup+0x2f0>
    return Rtb;
1fff4c16:	07f6      	br      	0x1fff4c02	// 1fff4c02 <RtbDequeueTail+0x20>

1fff4c18 <RtbDequeueHead>:
*/
RTK_BUFFER*
RtbDequeueHead(
    IN OUT RTB_QUEUE_HEAD* RtkQueueHead
    )
{
1fff4c18:	14d3      	push      	r4-r6, r15
1fff4c1a:	6d03      	mov      	r4, r0
    RTK_BUFFER* Rtb = NULL;
    aos_mutex_lock(&RtkQueueHead->Lock, AOS_WAIT_FOREVER);
1fff4c1c:	e4c0000b 	addi      	r6, r0, 12
1fff4c20:	6c1b      	mov      	r0, r6
1fff4c22:	3100      	movi      	r1, 0
1fff4c24:	2900      	subi      	r1, 1
1fff4c26:	e0002f6d 	bsr      	0x1fffab00	// 1fffab00 <check_before_startup+0x428>

     if (RtbQueueIsEmpty(RtkQueueHead))
1fff4c2a:	9462      	ld.w      	r3, (r4, 0x8)
1fff4c2c:	3b40      	cmpnei      	r3, 0
1fff4c2e:	0807      	bt      	0x1fff4c3c	// 1fff4c3c <RtbDequeueHead+0x24>
     {
         aos_mutex_unlock(&RtkQueueHead->Lock);
1fff4c30:	6c1b      	mov      	r0, r6
         return NULL;
1fff4c32:	3500      	movi      	r5, 0
         aos_mutex_unlock(&RtkQueueHead->Lock);
1fff4c34:	e0002eca 	bsr      	0x1fffa9c8	// 1fffa9c8 <check_before_startup+0x2f0>
     }
    Rtb = (RTK_BUFFER*)RtkQueueHead->List.Next;
    RtbRemoveNode(RtkQueueHead, Rtb);
    aos_mutex_unlock(&RtkQueueHead->Lock);
    return Rtb;
}
1fff4c38:	6c17      	mov      	r0, r5
1fff4c3a:	1493      	pop      	r4-r6, r15
    Rtb = (RTK_BUFFER*)RtkQueueHead->List.Next;
1fff4c3c:	94a0      	ld.w      	r5, (r4, 0x0)
    RtbRemoveNode(RtkQueueHead, Rtb);
1fff4c3e:	6c13      	mov      	r0, r4
1fff4c40:	6c57      	mov      	r1, r5
1fff4c42:	e3ffffc8 	bsr      	0x1fff4bd2	// 1fff4bd2 <RtbRemoveNode>
    aos_mutex_unlock(&RtkQueueHead->Lock);
1fff4c46:	6c1b      	mov      	r0, r6
1fff4c48:	e0002ec0 	bsr      	0x1fffa9c8	// 1fffa9c8 <check_before_startup+0x2f0>
    return Rtb;
1fff4c4c:	07f6      	br      	0x1fff4c38	// 1fff4c38 <RtbDequeueHead+0x20>

1fff4c4e <RtbGetQueueLen>:
*/
signed long RtbGetQueueLen(
    IN RTB_QUEUE_HEAD* RtkQueueHead
    )
{
    return RtkQueueHead->QueueLen;
1fff4c4e:	9002      	ld.w      	r0, (r0, 0x8)
}
1fff4c50:	783c      	jmp      	r15

1fff4c52 <RtbEmptyQueue>:
*/
void
RtbEmptyQueue(
    IN OUT RTB_QUEUE_HEAD* RtkQueueHead
    )
{
1fff4c52:	14d3      	push      	r4-r6, r15
1fff4c54:	6d03      	mov      	r4, r0
    RTK_BUFFER* Rtb = NULL;
    aos_mutex_lock(&RtkQueueHead->Lock, AOS_WAIT_FOREVER);
1fff4c56:	e4a0000b 	addi      	r5, r0, 12
1fff4c5a:	6c17      	mov      	r0, r5
1fff4c5c:	3100      	movi      	r1, 0
1fff4c5e:	2900      	subi      	r1, 1
1fff4c60:	e0002f50 	bsr      	0x1fffab00	// 1fffab00 <check_before_startup+0x428>

    while( !RtbQueueIsEmpty(RtkQueueHead))
1fff4c64:	9462      	ld.w      	r3, (r4, 0x8)
1fff4c66:	3b40      	cmpnei      	r3, 0
1fff4c68:	0805      	bt      	0x1fff4c72	// 1fff4c72 <RtbEmptyQueue+0x20>
        Rtb = (RTK_BUFFER*)RtkQueueHead->List.Next;
        RtbRemoveNode(RtkQueueHead, Rtb);
        RtbFree(Rtb);
    }

    aos_mutex_unlock(&RtkQueueHead->Lock);
1fff4c6a:	6c17      	mov      	r0, r5
1fff4c6c:	e0002eae 	bsr      	0x1fffa9c8	// 1fffa9c8 <check_before_startup+0x2f0>
    return;
}
1fff4c70:	1493      	pop      	r4-r6, r15
        Rtb = (RTK_BUFFER*)RtkQueueHead->List.Next;
1fff4c72:	94c0      	ld.w      	r6, (r4, 0x0)
        RtbRemoveNode(RtkQueueHead, Rtb);
1fff4c74:	6c13      	mov      	r0, r4
1fff4c76:	6c5b      	mov      	r1, r6
1fff4c78:	e3ffffad 	bsr      	0x1fff4bd2	// 1fff4bd2 <RtbRemoveNode>
        RtbFree(Rtb);
1fff4c7c:	6c1b      	mov      	r0, r6
1fff4c7e:	e3ffff39 	bsr      	0x1fff4af0	// 1fff4af0 <RtbFree>
1fff4c82:	07f1      	br      	0x1fff4c64	// 1fff4c64 <RtbEmptyQueue+0x12>

1fff4c84 <RtbQueueFree>:
{
1fff4c84:	14d1      	push      	r4, r15
1fff4c86:	6d03      	mov      	r4, r0
    if (RtkQueueHead)
1fff4c88:	3840      	cmpnei      	r0, 0
1fff4c8a:	0c0a      	bf      	0x1fff4c9e	// 1fff4c9e <RtbQueueFree+0x1a>
        RtbEmptyQueue(RtkQueueHead);
1fff4c8c:	e3ffffe3 	bsr      	0x1fff4c52	// 1fff4c52 <RtbEmptyQueue>
        aos_mutex_free(&RtkQueueHead->Lock);
1fff4c90:	e404000b 	addi      	r0, r4, 12
1fff4c94:	e0002ebe 	bsr      	0x1fffaa10	// 1fffaa10 <check_before_startup+0x338>
        free(RtkQueueHead);
1fff4c98:	6c13      	mov      	r0, r4
1fff4c9a:	e0002f4b 	bsr      	0x1fffab30	// 1fffab30 <check_before_startup+0x458>
}
1fff4c9e:	1491      	pop      	r4, r15

1fff4ca0 <hci_skb_get_data>:
//
//
***********************************************/
uint8_t *hci_skb_get_data(IN sk_buff *skb)
{
    return skb->Data;
1fff4ca0:	9003      	ld.w      	r0, (r0, 0xc)
}
1fff4ca2:	783c      	jmp      	r15

1fff4ca4 <hci_skb_get_data_length>:

uint32_t hci_skb_get_data_length(IN sk_buff *skb)
{
    return skb->Length;
1fff4ca4:	9006      	ld.w      	r0, (r0, 0x18)
}
1fff4ca6:	783c      	jmp      	r15

1fff4ca8 <hci_skb_alloc>:

sk_buff *hci_skb_alloc(IN unsigned int len)
{
1fff4ca8:	14d0      	push      	r15
    sk_buff *skb = (sk_buff *)RtbAllocate(len, 0);
1fff4caa:	3100      	movi      	r1, 0
1fff4cac:	e3fffef2 	bsr      	0x1fff4a90	// 1fff4a90 <RtbAllocate>
    return skb;
}
1fff4cb0:	1490      	pop      	r15

1fff4cb2 <hci_skb_free>:

void hci_skb_free(IN OUT sk_buff **skb)
{
1fff4cb2:	14d1      	push      	r4, r15
1fff4cb4:	6d03      	mov      	r4, r0
    RtbFree(*skb);
1fff4cb6:	9000      	ld.w      	r0, (r0, 0x0)
1fff4cb8:	e3ffff1c 	bsr      	0x1fff4af0	// 1fff4af0 <RtbFree>
    *skb = NULL;
1fff4cbc:	3300      	movi      	r3, 0
1fff4cbe:	b460      	st.w      	r3, (r4, 0x0)
    return;
}
1fff4cc0:	1491      	pop      	r4, r15

1fff4cc2 <hci_skb_unlink>:

void hci_skb_unlink(sk_buff *skb, struct _RTB_QUEUE_HEAD *list)
{
1fff4cc2:	14d0      	push      	r15
1fff4cc4:	6cc7      	mov      	r3, r1
    RtbRemoveNode(list, skb);
1fff4cc6:	6c43      	mov      	r1, r0
1fff4cc8:	6c0f      	mov      	r0, r3
1fff4cca:	e3ffff84 	bsr      	0x1fff4bd2	// 1fff4bd2 <RtbRemoveNode>
}
1fff4cce:	1490      	pop      	r15

1fff4cd0 <hci_skb_put>:

// increase the date length in sk_buffer by len,
// and return the increased header pointer
uint8_t *hci_skb_put(OUT sk_buff *skb, IN uint32_t len)
{
1fff4cd0:	14d0      	push      	r15
    RTK_BUFFER *rtb = (RTK_BUFFER *)skb;

    return RtbAddTail(rtb, len);
1fff4cd2:	e3ffff29 	bsr      	0x1fff4b24	// 1fff4b24 <RtbAddTail>
}
1fff4cd6:	1490      	pop      	r15

1fff4cd8 <hci_skb_trim>:

// change skb->len to len
// !!! len should less than skb->len
void hci_skb_trim(sk_buff *skb, unsigned int len)
{
1fff4cd8:	14d0      	push      	r15
    RTK_BUFFER *rtb = (RTK_BUFFER *)skb;
    uint32_t skb_len = hci_skb_get_data_length(skb);

    RtbRemoveTail(rtb, (skb_len - len));
1fff4cda:	9066      	ld.w      	r3, (r0, 0x18)
1fff4cdc:	5b25      	subu      	r1, r3, r1
1fff4cde:	e3ffff31 	bsr      	0x1fff4b40	// 1fff4b40 <RtbRemoveTail>
    return;
}
1fff4ce2:	1490      	pop      	r15

1fff4ce4 <hci_skb_get_pkt_type>:

uint8_t hci_skb_get_pkt_type(sk_buff *skb)
{
    return BT_CONTEXT(skb)->PacketType;
1fff4ce4:	d8000028 	ld.b      	r0, (r0, 0x28)
}
1fff4ce8:	783c      	jmp      	r15

1fff4cea <hci_skb_set_pkt_type>:

void hci_skb_set_pkt_type(sk_buff *skb, uint8_t pkt_type)
{
    BT_CONTEXT(skb)->PacketType = pkt_type;
1fff4cea:	dc200028 	st.b      	r1, (r0, 0x28)
}
1fff4cee:	783c      	jmp      	r15

1fff4cf0 <hci_skb_pull>:

// decrease the data length in sk_buffer by len,
// and move the content forward to the header.
// the data in header will be removed.
void hci_skb_pull(OUT  sk_buff *skb, IN uint32_t len)
{
1fff4cf0:	14d0      	push      	r15
    RTK_BUFFER *rtb = (RTK_BUFFER *)skb;
    RtbRemoveHead(rtb, len);
1fff4cf2:	e3ffff0a 	bsr      	0x1fff4b06	// 1fff4b06 <RtbRemoveHead>
    return;
}
1fff4cf6:	1490      	pop      	r15

1fff4cf8 <hci_skb_alloc_and_init>:

sk_buff *hci_skb_alloc_and_init(IN uint8_t PktType, IN uint8_t *Data, IN uint32_t  DataLen)
{
1fff4cf8:	14d4      	push      	r4-r7, r15
1fff4cfa:	6d83      	mov      	r6, r0
    sk_buff *skb = hci_skb_alloc(DataLen);
1fff4cfc:	6c0b      	mov      	r0, r2
{
1fff4cfe:	6dc7      	mov      	r7, r1
1fff4d00:	6d4b      	mov      	r5, r2
    sk_buff *skb = hci_skb_alloc(DataLen);
1fff4d02:	e3ffffd3 	bsr      	0x1fff4ca8	// 1fff4ca8 <hci_skb_alloc>
1fff4d06:	6d03      	mov      	r4, r0

    if (NULL == skb) {
1fff4d08:	3840      	cmpnei      	r0, 0
1fff4d0a:	0c0a      	bf      	0x1fff4d1e	// 1fff4d1e <hci_skb_alloc_and_init+0x26>
    return RtbAddTail(rtb, len);
1fff4d0c:	6c57      	mov      	r1, r5
1fff4d0e:	e3ffff0b 	bsr      	0x1fff4b24	// 1fff4b24 <RtbAddTail>
        return NULL;
    }

    memcpy(hci_skb_put(skb, DataLen), Data, DataLen);
1fff4d12:	6c97      	mov      	r2, r5
1fff4d14:	6c5f      	mov      	r1, r7
1fff4d16:	e3fffd0d 	bsr      	0x1fff4730	// 1fff4730 <__memcpy_fast>
    BT_CONTEXT(skb)->PacketType = pkt_type;
1fff4d1a:	dcc40028 	st.b      	r6, (r4, 0x28)
    hci_skb_set_pkt_type(skb, PktType);

    return skb;
}
1fff4d1e:	6c13      	mov      	r0, r4
1fff4d20:	1494      	pop      	r4-r7, r15

1fff4d22 <hci_skb_queue_head>:

void hci_skb_queue_head(IN RTB_QUEUE_HEAD *skb_head, IN RTK_BUFFER *skb)
{
1fff4d22:	14d0      	push      	r15
    RtbQueueHead(skb_head, skb);
1fff4d24:	e3ffff42 	bsr      	0x1fff4ba8	// 1fff4ba8 <RtbQueueHead>
}
1fff4d28:	1490      	pop      	r15

1fff4d2a <hci_skb_queue_tail>:

void hci_skb_queue_tail(IN RTB_QUEUE_HEAD *skb_head, IN RTK_BUFFER *skb)
{
1fff4d2a:	14d0      	push      	r15
    RtbQueueTail(skb_head, skb);
1fff4d2c:	e3ffff29 	bsr      	0x1fff4b7e	// 1fff4b7e <RtbQueueTail>
}
1fff4d30:	1490      	pop      	r15

1fff4d32 <hci_skb_dequeue_head>:

RTK_BUFFER *hci_skb_dequeue_head(IN RTB_QUEUE_HEAD *skb_head)
{
1fff4d32:	14d0      	push      	r15
    return RtbDequeueHead(skb_head);
1fff4d34:	e3ffff72 	bsr      	0x1fff4c18	// 1fff4c18 <RtbDequeueHead>
}
1fff4d38:	1490      	pop      	r15

1fff4d3a <hci_skb_dequeue_tail>:

RTK_BUFFER *hci_skb_dequeue_tail(IN RTB_QUEUE_HEAD *skb_head)
{
1fff4d3a:	14d0      	push      	r15
    return RtbDequeueTail(skb_head);
1fff4d3c:	e3ffff53 	bsr      	0x1fff4be2	// 1fff4be2 <RtbDequeueTail>
}
1fff4d40:	1490      	pop      	r15

1fff4d42 <hci_skb_queue_get_length>:

uint32_t hci_skb_queue_get_length(IN RTB_QUEUE_HEAD *skb_head)
{
    return RtbGetQueueLen(skb_head);
1fff4d42:	9002      	ld.w      	r0, (r0, 0x8)
}
1fff4d44:	783c      	jmp      	r15

1fff4d46 <ListInitializeHeader>:
// FUNCTION
//****************************************************************************
//Initialize a list with its header
void ListInitializeHeader(PRT_LIST_HEAD ListHead)
{
    ListHead->Next = ListHead;
1fff4d46:	b000      	st.w      	r0, (r0, 0x0)
    ListHead->Prev = ListHead;
1fff4d48:	b001      	st.w      	r0, (r0, 0x4)
}
1fff4d4a:	783c      	jmp      	r15

1fff4d4c <ListAddToHead>:
ListAddToHead(
    PRT_LIST_ENTRY ListNew,
    PRT_LIST_HEAD ListHead
    )
{
    ListAdd(ListNew, ListHead, ListHead->Next);
1fff4d4c:	9160      	ld.w      	r3, (r1, 0x0)
    Next->Prev = New;
1fff4d4e:	b301      	st.w      	r0, (r3, 0x4)
    New->Next = Next;
1fff4d50:	b060      	st.w      	r3, (r0, 0x0)
    New->Prev = Prev;
1fff4d52:	b021      	st.w      	r1, (r0, 0x4)
    Prev->Next = New;
1fff4d54:	b100      	st.w      	r0, (r1, 0x0)
}
1fff4d56:	783c      	jmp      	r15

1fff4d58 <ListAddToTail>:
ListAddToTail(
    PRT_LIST_ENTRY ListNew,
    PRT_LIST_HEAD ListHead
    )
{
    ListAdd(ListNew, ListHead->Prev, ListHead);
1fff4d58:	9161      	ld.w      	r3, (r1, 0x4)
    Next->Prev = New;
1fff4d5a:	b101      	st.w      	r0, (r1, 0x4)
    New->Next = Next;
1fff4d5c:	b020      	st.w      	r1, (r0, 0x0)
    New->Prev = Prev;
1fff4d5e:	b061      	st.w      	r3, (r0, 0x4)
    Prev->Next = New;
1fff4d60:	b300      	st.w      	r0, (r3, 0x0)
}
1fff4d62:	783c      	jmp      	r15

1fff4d64 <ListDeleteNode>:
*/
void ListDeleteNode(PRT_LIST_ENTRY ListToDelete)
{
//    if (ListToDelete->Next != NULL && ListToDelete->Prev != NULL)
    {
        ListToDelete->Next->Prev = ListToDelete->Prev;
1fff4d64:	9060      	ld.w      	r3, (r0, 0x0)
1fff4d66:	9041      	ld.w      	r2, (r0, 0x4)
1fff4d68:	b341      	st.w      	r2, (r3, 0x4)
        ListToDelete->Prev->Next = ListToDelete->Next;
1fff4d6a:	9061      	ld.w      	r3, (r0, 0x4)
1fff4d6c:	9040      	ld.w      	r2, (r0, 0x0)
1fff4d6e:	b340      	st.w      	r2, (r3, 0x0)
        ListToDelete->Next = ListToDelete->Prev = ListToDelete;
1fff4d70:	b001      	st.w      	r0, (r0, 0x4)
1fff4d72:	b000      	st.w      	r0, (r0, 0x0)
    }
}
1fff4d74:	783c      	jmp      	r15

1fff4d76 <hal_clk_gate_enable>:
extern uint32_t hclk, pclk;
extern uint32_t osal_sys_tick;

__attribute__((section(".__sram.code.hal_clk_gate_enable"))) void hal_clk_gate_enable(MODULE_e module)
{
    if (module < MOD_CP_CPU) {
1fff4d76:	381f      	cmphsi      	r0, 32
1fff4d78:	080a      	bt      	0x1fff4d8c	// 1fff4d8c <hal_clk_gate_enable+0x16>
        AP_PCR->SW_CLK |= BIT(module);
1fff4d7a:	3280      	movi      	r2, 128
1fff4d7c:	4257      	lsli      	r2, r2, 23
1fff4d7e:	3301      	movi      	r3, 1
1fff4d80:	9222      	ld.w      	r1, (r2, 0x8)
1fff4d82:	c4034020 	lsl      	r0, r3, r0
1fff4d86:	6c04      	or      	r0, r1
1fff4d88:	b202      	st.w      	r0, (r2, 0x8)
    } else if (module < MOD_PCLK_CACHE) {
        AP_PCR->SW_CLK1 |= BIT(module - MOD_CP_CPU);
    } else if (module < MOD_USR0) {
        AP_PCR->CACHE_CLOCK_GATE |= BIT(module - MOD_PCLK_CACHE);
    }
}
1fff4d8a:	783c      	jmp      	r15
    } else if (module < MOD_PCLK_CACHE) {
1fff4d8c:	eb00003f 	cmphsi      	r0, 64
1fff4d90:	080b      	bt      	0x1fff4da6	// 1fff4da6 <hal_clk_gate_enable+0x30>
        AP_PCR->SW_CLK1 |= BIT(module - MOD_CP_CPU);
1fff4d92:	3280      	movi      	r2, 128
1fff4d94:	4257      	lsli      	r2, r2, 23
1fff4d96:	3301      	movi      	r3, 1
1fff4d98:	9225      	ld.w      	r1, (r2, 0x14)
1fff4d9a:	281f      	subi      	r0, 32
1fff4d9c:	c4034020 	lsl      	r0, r3, r0
1fff4da0:	6c04      	or      	r0, r1
1fff4da2:	b205      	st.w      	r0, (r2, 0x14)
1fff4da4:	07f3      	br      	0x1fff4d8a	// 1fff4d8a <hal_clk_gate_enable+0x14>
    } else if (module < MOD_USR0) {
1fff4da6:	eb00005f 	cmphsi      	r0, 96
1fff4daa:	0bf0      	bt      	0x1fff4d8a	// 1fff4d8a <hal_clk_gate_enable+0x14>
        AP_PCR->CACHE_CLOCK_GATE |= BIT(module - MOD_PCLK_CACHE);
1fff4dac:	3280      	movi      	r2, 128
1fff4dae:	4257      	lsli      	r2, r2, 23
1fff4db0:	3301      	movi      	r3, 1
1fff4db2:	9228      	ld.w      	r1, (r2, 0x20)
1fff4db4:	283f      	subi      	r0, 64
1fff4db6:	c4034020 	lsl      	r0, r3, r0
1fff4dba:	6c04      	or      	r0, r1
1fff4dbc:	b208      	st.w      	r0, (r2, 0x20)
}
1fff4dbe:	07e6      	br      	0x1fff4d8a	// 1fff4d8a <hal_clk_gate_enable+0x14>

1fff4dc0 <hal_clk_reset>:
    *(buff + 2) = AP_PCR->CACHE_CLOCK_GATE;
}

__attribute__((section(".__sram.code.hal_clk_reset"))) void hal_clk_reset(MODULE_e module)
{
    if (module < MOD_CP_CPU) {
1fff4dc0:	381f      	cmphsi      	r0, 32
1fff4dc2:	081a      	bt      	0x1fff4df6	// 1fff4df6 <hal_clk_reset+0x36>
        if ((module >= MOD_TIMER5) && (module <= MOD_TIMER6)) {
1fff4dc4:	e4601014 	subi      	r3, r0, 21
1fff4dc8:	3b01      	cmphsi      	r3, 2
1fff4dca:	3380      	movi      	r3, 128
1fff4dcc:	4377      	lsli      	r3, r3, 23
1fff4dce:	0809      	bt      	0x1fff4de0	// 1fff4de0 <hal_clk_reset+0x20>
            AP_PCR->SW_RESET0 &= ~BIT(5);
1fff4dd0:	9340      	ld.w      	r2, (r3, 0x0)
1fff4dd2:	3a85      	bclri      	r2, 5
1fff4dd4:	b340      	st.w      	r2, (r3, 0x0)
            AP_PCR->SW_RESET0 |= BIT(5);
1fff4dd6:	9340      	ld.w      	r2, (r3, 0x0)
1fff4dd8:	ec420020 	ori      	r2, r2, 32
1fff4ddc:	b340      	st.w      	r2, (r3, 0x0)
        }
    } else if (module < MOD_USR0) {
        AP_PCR->CACHE_RST &= ~BIT(1 - (module - MOD_PCLK_CACHE));
        AP_PCR->CACHE_RST |= BIT(1 - (module - MOD_PCLK_CACHE));
    }
}
1fff4dde:	783c      	jmp      	r15
            AP_PCR->SW_RESET0 &= ~BIT(module);
1fff4de0:	3201      	movi      	r2, 1
1fff4de2:	9320      	ld.w      	r1, (r3, 0x0)
1fff4de4:	c4024020 	lsl      	r0, r2, r0
1fff4de8:	c4012042 	andn      	r2, r1, r0
1fff4dec:	b340      	st.w      	r2, (r3, 0x0)
            AP_PCR->SW_RESET0 |= BIT(module);
1fff4dee:	9340      	ld.w      	r2, (r3, 0x0)
1fff4df0:	6c08      	or      	r0, r2
1fff4df2:	b300      	st.w      	r0, (r3, 0x0)
1fff4df4:	07f5      	br      	0x1fff4dde	// 1fff4dde <hal_clk_reset+0x1e>
    } else if (module < MOD_PCLK_CACHE) {
1fff4df6:	eb00003f 	cmphsi      	r0, 64
1fff4dfa:	081b      	bt      	0x1fff4e30	// 1fff4e30 <hal_clk_reset+0x70>
        if ((module >= MOD_TIMER1) && (module <= MOD_TIMER4)) {
1fff4dfc:	e4601034 	subi      	r3, r0, 53
1fff4e00:	3b03      	cmphsi      	r3, 4
1fff4e02:	3380      	movi      	r3, 128
1fff4e04:	4377      	lsli      	r3, r3, 23
1fff4e06:	0809      	bt      	0x1fff4e18	// 1fff4e18 <hal_clk_reset+0x58>
            AP_PCR->SW_RESET2 &= ~BIT(4);
1fff4e08:	9343      	ld.w      	r2, (r3, 0xc)
1fff4e0a:	3a84      	bclri      	r2, 4
1fff4e0c:	b343      	st.w      	r2, (r3, 0xc)
            AP_PCR->SW_RESET2 |= BIT(4);
1fff4e0e:	9343      	ld.w      	r2, (r3, 0xc)
1fff4e10:	ec420010 	ori      	r2, r2, 16
1fff4e14:	b343      	st.w      	r2, (r3, 0xc)
1fff4e16:	07e4      	br      	0x1fff4dde	// 1fff4dde <hal_clk_reset+0x1e>
            AP_PCR->SW_RESET2 &= ~BIT(module - MOD_CP_CPU);
1fff4e18:	3201      	movi      	r2, 1
1fff4e1a:	9323      	ld.w      	r1, (r3, 0xc)
1fff4e1c:	281f      	subi      	r0, 32
1fff4e1e:	c4024020 	lsl      	r0, r2, r0
1fff4e22:	c4012042 	andn      	r2, r1, r0
1fff4e26:	b343      	st.w      	r2, (r3, 0xc)
            AP_PCR->SW_RESET2 |= BIT(module - MOD_CP_CPU);
1fff4e28:	9343      	ld.w      	r2, (r3, 0xc)
1fff4e2a:	6c08      	or      	r0, r2
1fff4e2c:	b303      	st.w      	r0, (r3, 0xc)
1fff4e2e:	07d8      	br      	0x1fff4dde	// 1fff4dde <hal_clk_reset+0x1e>
    } else if (module < MOD_USR0) {
1fff4e30:	eb00005f 	cmphsi      	r0, 96
1fff4e34:	0bd5      	bt      	0x1fff4dde	// 1fff4dde <hal_clk_reset+0x1e>
        AP_PCR->CACHE_RST &= ~BIT(1 - (module - MOD_PCLK_CACHE));
1fff4e36:	3380      	movi      	r3, 128
1fff4e38:	4377      	lsli      	r3, r3, 23
1fff4e3a:	3241      	movi      	r2, 65
1fff4e3c:	5a01      	subu      	r0, r2, r0
1fff4e3e:	3201      	movi      	r2, 1
1fff4e40:	9329      	ld.w      	r1, (r3, 0x24)
1fff4e42:	7080      	lsl      	r2, r0
1fff4e44:	6849      	andn      	r1, r2
1fff4e46:	b329      	st.w      	r1, (r3, 0x24)
        AP_PCR->CACHE_RST |= BIT(1 - (module - MOD_PCLK_CACHE));
1fff4e48:	9329      	ld.w      	r1, (r3, 0x24)
1fff4e4a:	6c84      	or      	r2, r1
1fff4e4c:	b349      	st.w      	r2, (r3, 0x24)
}
1fff4e4e:	07c8      	br      	0x1fff4dde	// 1fff4dde <hal_clk_reset+0x1e>

1fff4e50 <drv_irq_enable>:
    IRQn &= 0x7FUL;
1fff4e50:	e400207f 	andi      	r0, r0, 127
    VIC->ISER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1fff4e54:	4865      	lsri      	r3, r0, 5
1fff4e56:	3201      	movi      	r2, 1
1fff4e58:	e400201f 	andi      	r0, r0, 31
1fff4e5c:	c4024020 	lsl      	r0, r2, r0
1fff4e60:	4362      	lsli      	r3, r3, 2
1fff4e62:	1043      	lrw      	r2, 0xe000e100	// 1fff4e6c <drv_irq_enable+0x1c>
1fff4e64:	60c8      	addu      	r3, r2
1fff4e66:	b300      	st.w      	r0, (r3, 0x0)
//#ifdef CONFIG_SYSTEM_SECURE
    //csi_vic_enable_sirq(irq_num);
//#else
    csi_vic_enable_irq(irq_num);
//#endif
}
1fff4e68:	783c      	jmp      	r15
1fff4e6a:	0000      	bkpt
1fff4e6c:	e000e100 	.long	0xe000e100

1fff4e70 <drv_irq_disable>:
    IRQn &= 0x7FUL;
1fff4e70:	e400207f 	andi      	r0, r0, 127
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
1fff4e74:	4865      	lsri      	r3, r0, 5
1fff4e76:	3201      	movi      	r2, 1
1fff4e78:	e400201f 	andi      	r0, r0, 31
1fff4e7c:	c4024020 	lsl      	r0, r2, r0
1fff4e80:	4362      	lsli      	r3, r3, 2
1fff4e82:	1043      	lrw      	r2, 0xe000e180	// 1fff4e8c <drv_irq_disable+0x1c>
1fff4e84:	60c8      	addu      	r3, r2
1fff4e86:	b300      	st.w      	r0, (r3, 0x0)
//#ifdef CONFIG_SYSTEM_SECURE
    //csi_vic_disable_sirq(irq_num);
//#else
    csi_vic_disable_irq(irq_num);
//#endif
}
1fff4e88:	783c      	jmp      	r15
1fff4e8a:	0000      	bkpt
1fff4e8c:	e000e180 	.long	0xe000e180

1fff4e90 <dw_dmac_irqhandler>:
        dma_priv->cb_event(idx, DMA_EVENT_TRANSFER_DONE, NULL);
    }
}

void dw_dmac_irqhandler(int32_t idx)
{
1fff4e90:	14d4      	push      	r4-r7, r15
1fff4e92:	1421      	subi      	r14, r14, 4
1fff4e94:	1185      	lrw      	r4, 0x1fffb498	// 1fff4f28 <dw_dmac_irqhandler+0x98>
1fff4e96:	6c93      	mov      	r2, r4
1fff4e98:	3300      	movi      	r3, 0
1fff4e9a:	6c53      	mov      	r1, r4
1fff4e9c:	3020      	movi      	r0, 32
    uint32_t status;
    uint8_t ch_num;
    uint32_t addr = 0;

    for (ch_num = 0; ch_num < CONFIG_DMA_CHANNEL_NUM; ch_num++) {
        if (dma_instance[ch_num].ch_opened == 1) {
1fff4e9e:	82b1      	ld.b      	r5, (r2, 0x11)
1fff4ea0:	3d41      	cmpnei      	r5, 1
1fff4ea2:	083d      	bt      	0x1fff4f1c	// 1fff4f1c <dw_dmac_irqhandler+0x8c>
            addr = dma_instance[ch_num].base;
1fff4ea4:	4365      	lsli      	r3, r3, 5
1fff4ea6:	60c4      	addu      	r3, r1
1fff4ea8:	93e0      	ld.w      	r7, (r3, 0x0)
            break;
        }
    }

    status = readl(addr + DMA_REG_StatusTfr);
1fff4eaa:	d86720ba 	ld.w      	r3, (r7, 0x2e8)
1fff4eae:	3500      	movi      	r5, 0
1fff4eb0:	b860      	st.w      	r3, (r14, 0x0)
1fff4eb2:	10de      	lrw      	r6, 0x1fffb498	// 1fff4f28 <dw_dmac_irqhandler+0x98>

    for (ch_num = 0; ch_num < CONFIG_DMA_CHANNEL_NUM; ch_num++) {
        if (status & (1ul << ch_num)) {
1fff4eb4:	9860      	ld.w      	r3, (r14, 0x0)
1fff4eb6:	c4a34042 	lsr      	r2, r3, r5
1fff4eba:	3301      	movi      	r3, 1
1fff4ebc:	688c      	and      	r2, r3
1fff4ebe:	3a40      	cmpnei      	r2, 0
1fff4ec0:	0c0e      	bf      	0x1fff4edc	// 1fff4edc <dw_dmac_irqhandler+0x4c>
    writel(1U << idx, addr + DMA_REG_ClearTfr);
1fff4ec2:	9640      	ld.w      	r2, (r6, 0x0)
1fff4ec4:	70d4      	lsl      	r3, r5
1fff4ec6:	dc6220ce 	st.w      	r3, (r2, 0x338)
    dma_priv->status = DMA_STATE_DONE;
1fff4eca:	3303      	movi      	r3, 3
1fff4ecc:	b665      	st.w      	r3, (r6, 0x14)
    if (dma_priv->cb_event) {
1fff4ece:	9663      	ld.w      	r3, (r6, 0xc)
1fff4ed0:	3b40      	cmpnei      	r3, 0
1fff4ed2:	0c05      	bf      	0x1fff4edc	// 1fff4edc <dw_dmac_irqhandler+0x4c>
        dma_priv->cb_event(idx, DMA_EVENT_TRANSFER_DONE, NULL);
1fff4ed4:	3200      	movi      	r2, 0
1fff4ed6:	3100      	movi      	r1, 0
1fff4ed8:	6c17      	mov      	r0, r5
1fff4eda:	7bcd      	jsr      	r3
1fff4edc:	2500      	addi      	r5, 1
    for (ch_num = 0; ch_num < CONFIG_DMA_CHANNEL_NUM; ch_num++) {
1fff4ede:	3d44      	cmpnei      	r5, 4
1fff4ee0:	261f      	addi      	r6, 32
1fff4ee2:	0be9      	bt      	0x1fff4eb4	// 1fff4eb4 <dw_dmac_irqhandler+0x24>
            dw_dmac_intr_ch_complete(ch_num);
        }
    }


    status = readl(addr + DMA_REG_StatusErr);
1fff4ee4:	d8c720c2 	ld.w      	r6, (r7, 0x308)
1fff4ee8:	3500      	movi      	r5, 0

    for (ch_num = 0; ch_num < CONFIG_DMA_CHANNEL_NUM; ch_num++) {
        if (status & (1ul << ch_num)) {
1fff4eea:	c4a64042 	lsr      	r2, r6, r5
1fff4eee:	3301      	movi      	r3, 1
1fff4ef0:	688c      	and      	r2, r3
1fff4ef2:	3a40      	cmpnei      	r2, 0
1fff4ef4:	0c0e      	bf      	0x1fff4f10	// 1fff4f10 <dw_dmac_irqhandler+0x80>
    writel(1U << idx, addr + DMA_REG_ClearTfr);
1fff4ef6:	9440      	ld.w      	r2, (r4, 0x0)
1fff4ef8:	70d4      	lsl      	r3, r5
1fff4efa:	dc6220ce 	st.w      	r3, (r2, 0x338)
    dma_priv->status = DMA_STATE_DONE;
1fff4efe:	3303      	movi      	r3, 3
1fff4f00:	b465      	st.w      	r3, (r4, 0x14)
    if (dma_priv->cb_event) {
1fff4f02:	9463      	ld.w      	r3, (r4, 0xc)
1fff4f04:	3b40      	cmpnei      	r3, 0
1fff4f06:	0c05      	bf      	0x1fff4f10	// 1fff4f10 <dw_dmac_irqhandler+0x80>
        dma_priv->cb_event(idx, DMA_EVENT_TRANSFER_ERROR, NULL);
1fff4f08:	3200      	movi      	r2, 0
1fff4f0a:	3104      	movi      	r1, 4
1fff4f0c:	6c17      	mov      	r0, r5
1fff4f0e:	7bcd      	jsr      	r3
1fff4f10:	2500      	addi      	r5, 1
    for (ch_num = 0; ch_num < CONFIG_DMA_CHANNEL_NUM; ch_num++) {
1fff4f12:	3d44      	cmpnei      	r5, 4
1fff4f14:	241f      	addi      	r4, 32
1fff4f16:	0bea      	bt      	0x1fff4eea	// 1fff4eea <dw_dmac_irqhandler+0x5a>
            dw_dmac_intr_ch_error(ch_num);
        }
    }

}
1fff4f18:	1401      	addi      	r14, r14, 4
1fff4f1a:	1494      	pop      	r4-r7, r15
1fff4f1c:	2300      	addi      	r3, 1
    for (ch_num = 0; ch_num < CONFIG_DMA_CHANNEL_NUM; ch_num++) {
1fff4f1e:	3b44      	cmpnei      	r3, 4
1fff4f20:	6080      	addu      	r2, r0
1fff4f22:	0bbe      	bt      	0x1fff4e9e	// 1fff4e9e <dw_dmac_irqhandler+0xe>
    uint32_t addr = 0;
1fff4f24:	3700      	movi      	r7, 0
1fff4f26:	07c2      	br      	0x1fff4eaa	// 1fff4eaa <dw_dmac_irqhandler+0x1a>
1fff4f28:	1fffb498 	.long	0x1fffb498

1fff4f2c <csi_dma_start>:
  \param[in]   pdstaddr    dma transfer destination address
  \param[in]   length      dma transfer length (unit: bytes).
*/
void csi_dma_start(int32_t ch, void *psrcaddr,
                   void *pdstaddr, uint32_t length)
{
1fff4f2c:	14d4      	push      	r4-r7, r15
1fff4f2e:	1423      	subi      	r14, r14, 12
1fff4f30:	6d07      	mov      	r4, r1
    if (ch >= CONFIG_DMA_CHANNEL_NUM || ch < 0 || psrcaddr == NULL || pdstaddr == NULL) {
1fff4f32:	3803      	cmphsi      	r0, 4
{
1fff4f34:	b841      	st.w      	r2, (r14, 0x4)
1fff4f36:	b862      	st.w      	r3, (r14, 0x8)
    if (ch >= CONFIG_DMA_CHANNEL_NUM || ch < 0 || psrcaddr == NULL || pdstaddr == NULL) {
1fff4f38:	0844      	bt      	0x1fff4fc0	// 1fff4fc0 <csi_dma_start+0x94>
1fff4f3a:	3940      	cmpnei      	r1, 0
1fff4f3c:	0c42      	bf      	0x1fff4fc0	// 1fff4fc0 <csi_dma_start+0x94>
1fff4f3e:	3a40      	cmpnei      	r2, 0
1fff4f40:	0c40      	bf      	0x1fff4fc0	// 1fff4fc0 <csi_dma_start+0x94>
        return;
    }

    dw_dma_priv_t *dma_priv = &dma_instance[ch];

    dma_priv->status = DMA_STATE_BUSY;
1fff4f42:	3302      	movi      	r3, 2
1fff4f44:	4005      	lsli      	r0, r0, 5
1fff4f46:	11e0      	lrw      	r7, 0x1fffb498	// 1fff4fc4 <csi_dma_start+0x98>
1fff4f48:	61c0      	addu      	r7, r0
1fff4f4a:	b765      	st.w      	r3, (r7, 0x14)
    uint32_t addr = dma_priv->base;

    if ((length * dma_priv->src_tw) % dma_priv->dst_tw != 0) {
1fff4f4c:	3618      	movi      	r6, 24
1fff4f4e:	5f78      	addu      	r3, r7, r6
1fff4f50:	9300      	ld.w      	r0, (r3, 0x0)
1fff4f52:	9862      	ld.w      	r3, (r14, 0x8)
1fff4f54:	7c0c      	mult      	r0, r3
1fff4f56:	9727      	ld.w      	r1, (r7, 0x1c)
1fff4f58:	e0002d32 	bsr      	0x1fffa9bc	// 1fffa9bc <check_before_startup+0x2e4>
1fff4f5c:	3840      	cmpnei      	r0, 0
1fff4f5e:	0831      	bt      	0x1fff4fc0	// 1fff4fc0 <csi_dma_start+0x94>
    uint32_t addr = dma_priv->base;
1fff4f60:	9740      	ld.w      	r2, (r7, 0x0)
1fff4f62:	6188      	addu      	r6, r2
    uint32_t value = readl(addr + (ch % 4) * 0x58 + DMA_REG_CTRLax);
1fff4f64:	8770      	ld.b      	r3, (r7, 0x10)
1fff4f66:	3103      	movi      	r1, 3
1fff4f68:	b8c0      	st.w      	r6, (r14, 0x0)
1fff4f6a:	68c4      	and      	r3, r1
1fff4f6c:	3658      	movi      	r6, 88

    if (i == 0) {
        grouplen = 0;
    }

    dw_dma_set_burstlength(addr, dma_priv->ch_num, grouplen);
1fff4f6e:	e407000f 	addi      	r0, r7, 16
    uint32_t value = readl(addr + (ch % 4) * 0x58 + DMA_REG_CTRLax);
1fff4f72:	7cd8      	mult      	r3, r6
1fff4f74:	98e0      	ld.w      	r7, (r14, 0x0)
1fff4f76:	60dc      	addu      	r3, r7
1fff4f78:	93e0      	ld.w      	r7, (r3, 0x0)
    value &= ~(0x1f800);
1fff4f7a:	10b4      	lrw      	r5, 0xfffe07ff	// 1fff4fc8 <csi_dma_start+0x9c>
1fff4f7c:	69d4      	and      	r7, r5
    writel(value, addr + (ch % 4) * 0x58 + DMA_REG_CTRLax);
1fff4f7e:	b3e0      	st.w      	r7, (r3, 0x0)
    writel(size, addr + (ch % 4) * 0x58 + DMA_REG_CTRLbx);
1fff4f80:	98e2      	ld.w      	r7, (r14, 0x8)
1fff4f82:	8060      	ld.b      	r3, (r0, 0x0)
1fff4f84:	68c4      	and      	r3, r1
1fff4f86:	7cd8      	mult      	r3, r6
1fff4f88:	60c8      	addu      	r3, r2
1fff4f8a:	b3e7      	st.w      	r7, (r3, 0x1c)
    writel(source, addr + (ch % 4) * 0x58 + DMA_REG_SARx);
1fff4f8c:	b380      	st.w      	r4, (r3, 0x0)
    writel(dest, addr + (ch % 4) * 0x58 + DMA_REG_DARx);
1fff4f8e:	9881      	ld.w      	r4, (r14, 0x4)
    writel(size, addr + (ch % 4) * 0x58 + DMA_REG_CTRLbx);
1fff4f90:	e4a3001b 	addi      	r5, r3, 28
    writel(dest, addr + (ch % 4) * 0x58 + DMA_REG_DARx);
1fff4f94:	b382      	st.w      	r4, (r3, 0x8)
    dw_dma_set_channel(addr, dma_priv->ch_num, (uint32_t)psrcaddr, (uint32_t)pdstaddr, length);

    // interrupt enable
    uint32_t value = readl(addr + (dma_priv->ch_num % 4) * 0x58 + DMA_REG_CTRLax);
1fff4f96:	8060      	ld.b      	r3, (r0, 0x0)
1fff4f98:	68c4      	and      	r3, r1
1fff4f9a:	7d8c      	mult      	r6, r3
1fff4f9c:	9860      	ld.w      	r3, (r14, 0x0)
1fff4f9e:	618c      	addu      	r6, r3
1fff4fa0:	9680      	ld.w      	r4, (r6, 0x0)
    value |= CK_DMA_INT_EN;
1fff4fa2:	3301      	movi      	r3, 1
1fff4fa4:	6d0c      	or      	r4, r3
    writel(value, addr + (dma_priv->ch_num % 4) * 0x58 + DMA_REG_CTRLax);
1fff4fa6:	b680      	st.w      	r4, (r6, 0x0)

    value = readl(addr + DMA_REG_ChEn);
    value |= (CK_DMA_CH_EN << (8 + (dma_priv->ch_num % 4))) | (CK_DMA_CH_EN << (dma_priv->ch_num % 4));
1fff4fa8:	8000      	ld.b      	r0, (r0, 0x0)
1fff4faa:	6804      	and      	r0, r1
1fff4fac:	583e      	addi      	r1, r0, 8
1fff4fae:	c4234021 	lsl      	r1, r3, r1
1fff4fb2:	70c0      	lsl      	r3, r0
    value = readl(addr + DMA_REG_ChEn);
1fff4fb4:	d88220e8 	ld.w      	r4, (r2, 0x3a0)
    value |= (CK_DMA_CH_EN << (8 + (dma_priv->ch_num % 4))) | (CK_DMA_CH_EN << (dma_priv->ch_num % 4));
1fff4fb8:	6c4c      	or      	r1, r3
1fff4fba:	6c50      	or      	r1, r4
    writel(value, addr + DMA_REG_ChEn);
1fff4fbc:	dc2220e8 	st.w      	r1, (r2, 0x3a0)
}
1fff4fc0:	1403      	addi      	r14, r14, 12
1fff4fc2:	1494      	pop      	r4-r7, r15
1fff4fc4:	1fffb498 	.long	0x1fffb498
1fff4fc8:	fffe07ff 	.long	0xfffe07ff

1fff4fcc <csi_dma_stop>:
/**
  \brief       Stop generate dma channel signal.
  \param[in]   ch     dma channel num
*/
void csi_dma_stop(int32_t ch)
{
1fff4fcc:	14c3      	push      	r4-r6
    if (ch >= CONFIG_DMA_CHANNEL_NUM || ch < 0) {
1fff4fce:	3803      	cmphsi      	r0, 4
1fff4fd0:	0820      	bt      	0x1fff5010	// 1fff5010 <csi_dma_stop+0x44>
        return;
    }

    dw_dma_priv_t *dma_priv = &dma_instance[ch];

    dma_priv->status = DMA_STATE_DONE;
1fff4fd2:	1071      	lrw      	r3, 0x1fffb498	// 1fff5014 <csi_dma_stop+0x48>
1fff4fd4:	4005      	lsli      	r0, r0, 5
1fff4fd6:	600c      	addu      	r0, r3
1fff4fd8:	3303      	movi      	r3, 3

    uint32_t addr = dma_priv->base;
1fff4fda:	9020      	ld.w      	r1, (r0, 0x0)
    dma_priv->status = DMA_STATE_DONE;
1fff4fdc:	b065      	st.w      	r3, (r0, 0x14)

    uint32_t value = readl(addr + DMA_REG_ChEn);
    value |= (CK_DMA_CH_EN << (8 + (dma_priv->ch_num % 4)));
1fff4fde:	8050      	ld.b      	r2, (r0, 0x10)
1fff4fe0:	3503      	movi      	r5, 3
1fff4fe2:	c4a22023 	and      	r3, r2, r5
1fff4fe6:	3201      	movi      	r2, 1
    uint32_t value = readl(addr + DMA_REG_ChEn);
1fff4fe8:	d8c120e8 	ld.w      	r6, (r1, 0x3a0)
    value |= (CK_DMA_CH_EN << (8 + (dma_priv->ch_num % 4)));
1fff4fec:	5b9e      	addi      	r4, r3, 8
1fff4fee:	c4824024 	lsl      	r4, r2, r4
1fff4ff2:	6d18      	or      	r4, r6
    value &= ~(CK_DMA_CH_EN << (dma_priv->ch_num % 4));
1fff4ff4:	708c      	lsl      	r2, r3
1fff4ff6:	c4442042 	andn      	r2, r4, r2
    writel(value, addr + DMA_REG_ChEn);
1fff4ffa:	dc4120e8 	st.w      	r2, (r1, 0x3a0)
    // interrupt disable
    value = readl(addr + (dma_priv->ch_num % 4) * 0x58 + DMA_REG_CTRLax);
1fff4ffe:	3258      	movi      	r2, 88
1fff5000:	8070      	ld.b      	r3, (r0, 0x10)
1fff5002:	68d4      	and      	r3, r5
1fff5004:	7cc8      	mult      	r3, r2
1fff5006:	2117      	addi      	r1, 24
1fff5008:	60c4      	addu      	r3, r1
1fff500a:	9340      	ld.w      	r2, (r3, 0x0)
    value &= ~CK_DMA_INT_EN;
1fff500c:	3a80      	bclri      	r2, 0
    writel(value, addr + (dma_priv->ch_num % 4) * 0x58 + DMA_REG_CTRLax);
1fff500e:	b340      	st.w      	r2, (r3, 0x0)
}
1fff5010:	1483      	pop      	r4-r6
1fff5012:	0000      	bkpt
1fff5014:	1fffb498 	.long	0x1fffb498

1fff5018 <dw_gpio_irqhandler>:
    val &= ~(1 << offset);
    gpio_control_reg->INTEN = val;
}

void dw_gpio_irqhandler(int idx)
{
1fff5018:	14d4      	push      	r4-r7, r15
    if (idx >= CONFIG_GPIO_NUM) {
1fff501a:	3820      	cmplti      	r0, 1
1fff501c:	0c21      	bf      	0x1fff505e	// 1fff505e <dw_gpio_irqhandler+0x46>
        return;
    }

    dw_gpio_control_reg_t *gpio_control_reg = (dw_gpio_control_reg_t *)(gpio_handle[idx].base + 0x30);
1fff501e:	331c      	movi      	r3, 28
1fff5020:	7c0c      	mult      	r0, r3
1fff5022:	10d0      	lrw      	r6, 0x1fffb518	// 1fff5060 <dw_gpio_irqhandler+0x48>
1fff5024:	6018      	addu      	r0, r6
1fff5026:	9060      	ld.w      	r3, (r0, 0x0)

    uint32_t value = gpio_control_reg->INTSTATUS;
1fff5028:	3400      	movi      	r4, 0
1fff502a:	93f0      	ld.w      	r7, (r3, 0x40)
1fff502c:	10ae      	lrw      	r5, 0x1fffb534	// 1fff5064 <dw_gpio_irqhandler+0x4c>
    uint8_t i;

    /* find the interrput pin */
    for (i = 0; i < 32; i++) {
        if (value & (1U << i)) {
1fff502e:	3201      	movi      	r2, 1
1fff5030:	7090      	lsl      	r2, r4
1fff5032:	c4e22023 	and      	r3, r2, r7
1fff5036:	3b40      	cmpnei      	r3, 0
1fff5038:	0c0e      	bf      	0x1fff5054	// 1fff5054 <dw_gpio_irqhandler+0x3c>
                for (j = 0; j < idx; j++) {
                    pin_idx += gpio_handle[j].pin_num;
                }
            }

            if (pin_idx >= CONFIG_GPIO_PIN_NUM) {
1fff503a:	3c16      	cmphsi      	r4, 23
1fff503c:	0811      	bt      	0x1fff505e	// 1fff505e <dw_gpio_irqhandler+0x46>
    dw_gpio_priv_t *port_handle = &gpio_handle[gpio_pin_priv->portidx];
1fff503e:	8560      	ld.b      	r3, (r5, 0x0)
    dw_gpio_control_reg_t *gpio_control_reg = (dw_gpio_control_reg_t *)(port_handle->base + 0x30);
1fff5040:	311c      	movi      	r1, 28
1fff5042:	7cc4      	mult      	r3, r1
1fff5044:	60d8      	addu      	r3, r6
1fff5046:	9360      	ld.w      	r3, (r3, 0x0)
    gpio_control_reg->PORTA_EOI = idx;
1fff5048:	b353      	st.w      	r2, (r3, 0x4c)
            dw_gpio_pin_priv_t *gpio_pin_priv = (dw_gpio_pin_priv_t *)&gpio_pin_handle[pin_idx];

            dw_gpio_irq_clear(gpio_pin_priv, (1 << i));  //clear the gpio interrupt

            /* execute the callback function */
            if ((gpio_event_cb_t)(gpio_pin_priv->cb)) {
1fff504a:	9561      	ld.w      	r3, (r5, 0x4)
1fff504c:	3b40      	cmpnei      	r3, 0
1fff504e:	0c03      	bf      	0x1fff5054	// 1fff5054 <dw_gpio_irqhandler+0x3c>
                ((gpio_event_cb_t)(gpio_pin_priv->cb))(gpio_pin_priv->offset);
1fff5050:	8502      	ld.b      	r0, (r5, 0x2)
1fff5052:	7bcd      	jsr      	r3
1fff5054:	2400      	addi      	r4, 1
    for (i = 0; i < 32; i++) {
1fff5056:	eb440020 	cmpnei      	r4, 32
1fff505a:	2507      	addi      	r5, 8
1fff505c:	0be9      	bt      	0x1fff502e	// 1fff502e <dw_gpio_irqhandler+0x16>
            }
        }
    }
}
1fff505e:	1494      	pop      	r4-r7, r15
1fff5060:	1fffb518 	.long	0x1fffb518
1fff5064:	1fffb534 	.long	0x1fffb534

1fff5068 <dw_usart_dma_event_cb>:
    .event_rx_timeout = 0,      /* Signal receive character timeout event */
};

#if defined  CONFIG_DW_UART_DMAC
static void dw_usart_dma_event_cb(int32_t ch, dma_event_e event, void *arg)
{
1fff5068:	14d4      	push      	r4-r7, r15
1fff506a:	1422      	subi      	r14, r14, 8
1fff506c:	134a      	lrw      	r2, 0x1fffb5ec	// 1fff5214 <dw_usart_dma_event_cb+0x1ac>
1fff506e:	3400      	movi      	r4, 0
1fff5070:	b841      	st.w      	r2, (r14, 0x4)
1fff5072:	3788      	movi      	r7, 136
    int8_t priv_num  = 0;

    for (priv_num = 0; priv_num < CONFIG_USART_NUM; priv_num++) {
        usart_priv = &usart_instance[priv_num];

        if ((usart_priv->dma_tx_ch == ch && usart_priv->dma_tx_mode == 1) || (usart_priv->dma_rx_ch == ch && usart_priv->dma_rx_mode == 1)) {
1fff5074:	92af      	ld.w      	r5, (r2, 0x3c)
1fff5076:	74d2      	sextb      	r3, r4
1fff5078:	6416      	cmpne      	r5, r0
1fff507a:	b860      	st.w      	r3, (r14, 0x0)
        usart_priv = &usart_instance[priv_num];
1fff507c:	6cd3      	mov      	r3, r4
        if ((usart_priv->dma_tx_ch == ch && usart_priv->dma_tx_mode == 1) || (usart_priv->dma_rx_ch == ch && usart_priv->dma_rx_mode == 1)) {
1fff507e:	0805      	bt      	0x1fff5088	// 1fff5088 <dw_usart_dma_event_cb+0x20>
1fff5080:	d8c20044 	ld.b      	r6, (r2, 0x44)
1fff5084:	3e41      	cmpnei      	r6, 1
1fff5086:	0c0e      	bf      	0x1fff50a2	// 1fff50a2 <dw_usart_dma_event_cb+0x3a>
1fff5088:	92d0      	ld.w      	r6, (r2, 0x40)
1fff508a:	6582      	cmpne      	r0, r6
1fff508c:	0805      	bt      	0x1fff5096	// 1fff5096 <dw_usart_dma_event_cb+0x2e>
1fff508e:	d8c20045 	ld.b      	r6, (r2, 0x45)
1fff5092:	3e41      	cmpnei      	r6, 1
1fff5094:	0c07      	bf      	0x1fff50a2	// 1fff50a2 <dw_usart_dma_event_cb+0x3a>
1fff5096:	2400      	addi      	r4, 1
    for (priv_num = 0; priv_num < CONFIG_USART_NUM; priv_num++) {
1fff5098:	3c42      	cmpnei      	r4, 2
1fff509a:	609c      	addu      	r2, r7
1fff509c:	0bec      	bt      	0x1fff5074	// 1fff5074 <dw_usart_dma_event_cb+0xc>
1fff509e:	3202      	movi      	r2, 2
1fff50a0:	b840      	st.w      	r2, (r14, 0x0)
            break;
        }
    }

    dw_usart_reg_t *addr = (dw_usart_reg_t *)(usart_priv->base);
1fff50a2:	3488      	movi      	r4, 136

    if (event == DMA_EVENT_TRANSFER_ERROR) {           /* DMA transfer ERROR */
1fff50a4:	3944      	cmpnei      	r1, 4
    dw_usart_reg_t *addr = (dw_usart_reg_t *)(usart_priv->base);
1fff50a6:	7d0c      	mult      	r4, r3
1fff50a8:	9841      	ld.w      	r2, (r14, 0x4)
1fff50aa:	6108      	addu      	r4, r2
1fff50ac:	94c0      	ld.w      	r6, (r4, 0x0)
    if (event == DMA_EVENT_TRANSFER_ERROR) {           /* DMA transfer ERROR */
1fff50ae:	084a      	bt      	0x1fff5142	// 1fff5142 <dw_usart_dma_event_cb+0xda>
        if (usart_priv->dma_tx_ch == ch && usart_priv->dma_tx_mode == 1) {
1fff50b0:	6416      	cmpne      	r5, r0
1fff50b2:	0824      	bt      	0x1fff50fa	// 1fff50fa <dw_usart_dma_event_cb+0x92>
1fff50b4:	d8440044 	ld.b      	r2, (r4, 0x44)
1fff50b8:	e4e40043 	addi      	r7, r4, 68
1fff50bc:	3a41      	cmpnei      	r2, 1
1fff50be:	081e      	bt      	0x1fff50fa	// 1fff50fa <dw_usart_dma_event_cb+0x92>
            csi_dma_stop(usart_priv->dma_tx_ch);
1fff50c0:	6c17      	mov      	r0, r5
            csi_dma_release_channel(usart_priv->dma_tx_ch);
1fff50c2:	e4a4003b 	addi      	r5, r4, 60
            csi_dma_stop(usart_priv->dma_tx_ch);
1fff50c6:	e3ffff83 	bsr      	0x1fff4fcc	// 1fff4fcc <csi_dma_stop>
            csi_dma_release_channel(usart_priv->dma_tx_ch);
1fff50ca:	940f      	ld.w      	r0, (r4, 0x3c)
1fff50cc:	e0002b4c 	bsr      	0x1fffa764	// 1fffa764 <check_before_startup+0x8c>
            usart_priv->tx_busy = 0;
            usart_priv->dma_tx_mode = 0;
1fff50d0:	3300      	movi      	r3, 0
            usart_priv->dma_tx_ch = -1;
            usart_priv->fcr_reg &= ~DW_FCR_TET_FIFO_HALF;
1fff50d2:	3100      	movi      	r1, 0
            usart_priv->dma_tx_mode = 0;
1fff50d4:	dc640044 	st.b      	r3, (r4, 0x44)
            usart_priv->dma_tx_ch = -1;
1fff50d8:	3300      	movi      	r3, 0
1fff50da:	2b00      	subi      	r3, 1
1fff50dc:	b46f      	st.w      	r3, (r4, 0x3c)
            usart_priv->fcr_reg &= ~DW_FCR_TET_FIFO_HALF;
1fff50de:	946e      	ld.w      	r3, (r4, 0x38)
1fff50e0:	293f      	subi      	r1, 64
1fff50e2:	68c4      	and      	r3, r1
1fff50e4:	b46e      	st.w      	r3, (r4, 0x38)
            //addr->FCR = usart_priv->fcr_reg;

            if (usart_priv->cb_event) {
1fff50e6:	9462      	ld.w      	r3, (r4, 0x8)
            usart_priv->tx_busy = 0;
1fff50e8:	3200      	movi      	r2, 0
            if (usart_priv->cb_event) {
1fff50ea:	3b40      	cmpnei      	r3, 0
            usart_priv->tx_busy = 0;
1fff50ec:	b449      	st.w      	r2, (r4, 0x24)
            if (usart_priv->cb_event) {
1fff50ee:	0c04      	bf      	0x1fff50f6	// 1fff50f6 <dw_usart_dma_event_cb+0x8e>
                usart_priv->cb_event(priv_num, USART_EVENT_TX_UNDERFLOW);
1fff50f0:	3104      	movi      	r1, 4
                //uint32_t max_block_size = DMA_MAX_TRANSPORT_SIZE(usart_priv->dma_rx_ch);
                //usart_priv->rx_block_num = (usart_priv->rx_total_num > max_block_size) ? max_block_size : usart_priv->rx_total_num;
                //usart_priv->rx_num = 0;
                //csi_dma_start(usart_priv->dma_rx_ch, (uint8_t *) & (addr->THR), usart_priv->rx_buf,  usart_priv->rx_block_num);
                if (usart_priv->cb_event) {
                    usart_priv->cb_event(priv_num, USART_EVENT_RECEIVE_COMPLETE);
1fff50f2:	9800      	ld.w      	r0, (r14, 0x0)
1fff50f4:	7bcd      	jsr      	r3
                csi_dma_start(usart_priv->dma_rx_ch, (uint8_t *) & (addr->THR), usart_priv->rx_buf + usart_priv->rx_num,  usart_priv->rx_block_num);
            }

        }
    }
}
1fff50f6:	1402      	addi      	r14, r14, 8
1fff50f8:	1494      	pop      	r4-r7, r15
            csi_dma_stop(usart_priv->dma_rx_ch);
1fff50fa:	3488      	movi      	r4, 136
1fff50fc:	7d0c      	mult      	r4, r3
1fff50fe:	9861      	ld.w      	r3, (r14, 0x4)
1fff5100:	60d0      	addu      	r3, r4
1fff5102:	9310      	ld.w      	r0, (r3, 0x40)
1fff5104:	6d0f      	mov      	r4, r3
1fff5106:	e4a3003f 	addi      	r5, r3, 64
1fff510a:	e3ffff61 	bsr      	0x1fff4fcc	// 1fff4fcc <csi_dma_stop>
            csi_dma_release_channel(usart_priv->dma_rx_ch);
1fff510e:	9410      	ld.w      	r0, (r4, 0x40)
1fff5110:	e0002b2a 	bsr      	0x1fffa764	// 1fffa764 <check_before_startup+0x8c>
            usart_priv->dma_rx_mode = 0;
1fff5114:	3300      	movi      	r3, 0
            usart_priv->rx_busy = 0;
1fff5116:	3200      	movi      	r2, 0
            usart_priv->dma_rx_mode = 0;
1fff5118:	dc640045 	st.b      	r3, (r4, 0x45)
            usart_priv->dma_rx_ch = -1;
1fff511c:	3300      	movi      	r3, 0
1fff511e:	2b00      	subi      	r3, 1
1fff5120:	b470      	st.w      	r3, (r4, 0x40)
            usart_priv->fcr_reg &= ~(DW_FCR_RT_FIFO_LESSTWO);
1fff5122:	946e      	ld.w      	r3, (r4, 0x38)
1fff5124:	3b86      	bclri      	r3, 6
1fff5126:	3b87      	bclri      	r3, 7
            usart_priv->fcr_reg |= DW_FCR_RT_FIFO_HALF;
1fff5128:	ec630080 	ori      	r3, r3, 128
            usart_priv->rx_busy = 0;
1fff512c:	b44a      	st.w      	r2, (r4, 0x28)
            usart_priv->fcr_reg |= DW_FCR_RT_FIFO_HALF;
1fff512e:	b46e      	st.w      	r3, (r4, 0x38)
            addr->IER |= IER_RDA_INT_ENABLE | IIR_RECV_LINE_ENABLE;
1fff5130:	9661      	ld.w      	r3, (r6, 0x4)
1fff5132:	ec630005 	ori      	r3, r3, 5
1fff5136:	b661      	st.w      	r3, (r6, 0x4)
            if (usart_priv->cb_event) {
1fff5138:	9462      	ld.w      	r3, (r4, 0x8)
1fff513a:	3b40      	cmpnei      	r3, 0
1fff513c:	0fdd      	bf      	0x1fff50f6	// 1fff50f6 <dw_usart_dma_event_cb+0x8e>
                usart_priv->cb_event(priv_num, USART_EVENT_RX_FRAMING_ERROR);
1fff513e:	3108      	movi      	r1, 8
1fff5140:	07d9      	br      	0x1fff50f2	// 1fff50f2 <dw_usart_dma_event_cb+0x8a>
    } else if (event == DMA_EVENT_TRANSFER_DONE) {  /* DMA transfer complete */
1fff5142:	3940      	cmpnei      	r1, 0
1fff5144:	0bd9      	bt      	0x1fff50f6	// 1fff50f6 <dw_usart_dma_event_cb+0x8e>
        if (usart_priv->dma_tx_ch == ch && usart_priv->dma_tx_mode == 1) {
1fff5146:	6416      	cmpne      	r5, r0
1fff5148:	083b      	bt      	0x1fff51be	// 1fff51be <dw_usart_dma_event_cb+0x156>
1fff514a:	d8440044 	ld.b      	r2, (r4, 0x44)
1fff514e:	e4e40043 	addi      	r7, r4, 68
1fff5152:	3a41      	cmpnei      	r2, 1
1fff5154:	0835      	bt      	0x1fff51be	// 1fff51be <dw_usart_dma_event_cb+0x156>
            usart_priv->tx_num += usart_priv->tx_block_num;
1fff5156:	e444004b 	addi      	r2, r4, 76
1fff515a:	9435      	ld.w      	r1, (r4, 0x54)
1fff515c:	9260      	ld.w      	r3, (r2, 0x0)
1fff515e:	604c      	addu      	r1, r3
            if (usart_priv->tx_num >= usart_priv->tx_total_num) {
1fff5160:	9464      	ld.w      	r3, (r4, 0x10)
            usart_priv->tx_num += usart_priv->tx_block_num;
1fff5162:	b435      	st.w      	r1, (r4, 0x54)
            if (usart_priv->tx_num >= usart_priv->tx_total_num) {
1fff5164:	64c4      	cmphs      	r1, r3
1fff5166:	0c1a      	bf      	0x1fff519a	// 1fff519a <dw_usart_dma_event_cb+0x132>
                csi_dma_stop(usart_priv->dma_tx_ch);
1fff5168:	6c17      	mov      	r0, r5
                csi_dma_release_channel(usart_priv->dma_tx_ch);
1fff516a:	e4a4003b 	addi      	r5, r4, 60
                csi_dma_stop(usart_priv->dma_tx_ch);
1fff516e:	e3ffff2f 	bsr      	0x1fff4fcc	// 1fff4fcc <csi_dma_stop>
                csi_dma_release_channel(usart_priv->dma_tx_ch);
1fff5172:	940f      	ld.w      	r0, (r4, 0x3c)
1fff5174:	e0002af8 	bsr      	0x1fffa764	// 1fffa764 <check_before_startup+0x8c>
                usart_priv->dma_tx_mode = 0;
1fff5178:	3300      	movi      	r3, 0
                usart_priv->tx_busy = 0;
1fff517a:	3200      	movi      	r2, 0
                usart_priv->dma_tx_mode = 0;
1fff517c:	dc640044 	st.b      	r3, (r4, 0x44)
                usart_priv->dma_tx_ch = -1;
1fff5180:	3300      	movi      	r3, 0
1fff5182:	2b00      	subi      	r3, 1
1fff5184:	b46f      	st.w      	r3, (r4, 0x3c)
                usart_priv->fcr_reg &= ~(DW_FCR_TET_FIFO_HALF);
1fff5186:	946e      	ld.w      	r3, (r4, 0x38)
1fff5188:	3b84      	bclri      	r3, 4
1fff518a:	3b85      	bclri      	r3, 5
1fff518c:	b46e      	st.w      	r3, (r4, 0x38)
                if (usart_priv->cb_event) {
1fff518e:	9462      	ld.w      	r3, (r4, 0x8)
                usart_priv->tx_busy = 0;
1fff5190:	b449      	st.w      	r2, (r4, 0x24)
                if (usart_priv->cb_event) {
1fff5192:	3b40      	cmpnei      	r3, 0
1fff5194:	0fb1      	bf      	0x1fff50f6	// 1fff50f6 <dw_usart_dma_event_cb+0x8e>
                    usart_priv->cb_event(priv_num, USART_EVENT_SEND_COMPLETE);
1fff5196:	3100      	movi      	r1, 0
1fff5198:	07ad      	br      	0x1fff50f2	// 1fff50f2 <dw_usart_dma_event_cb+0x8a>
                uint32_t max_block_size = DMA_MAX_TRANSPORT_SIZE(usart_priv->dma_tx_ch);
1fff519a:	3d40      	cmpnei      	r5, 0
1fff519c:	ea0707ff 	movi      	r7, 2047
1fff51a0:	301f      	movi      	r0, 31
1fff51a2:	c4070c20 	incf      	r0, r7, 0
                uint32_t next_tx_size = usart_priv->tx_total_num - usart_priv->tx_num;
1fff51a6:	60c6      	subu      	r3, r1
                usart_priv->tx_block_num = (next_tx_size > max_block_size) ? max_block_size : next_tx_size;
1fff51a8:	64c0      	cmphs      	r0, r3
1fff51aa:	c4600c20 	incf      	r3, r0, 0
1fff51ae:	b260      	st.w      	r3, (r2, 0x0)
                csi_dma_start(usart_priv->dma_tx_ch, usart_priv->tx_buf + usart_priv->tx_num, (uint8_t *) & (addr->THR), usart_priv->tx_block_num);
1fff51b0:	6c17      	mov      	r0, r5
1fff51b2:	9446      	ld.w      	r2, (r4, 0x18)
1fff51b4:	6048      	addu      	r1, r2
1fff51b6:	6c9b      	mov      	r2, r6
                csi_dma_start(usart_priv->dma_rx_ch, (uint8_t *) & (addr->THR), usart_priv->rx_buf + usart_priv->rx_num,  usart_priv->rx_block_num);
1fff51b8:	e3fffeba 	bsr      	0x1fff4f2c	// 1fff4f2c <csi_dma_start>
}
1fff51bc:	079d      	br      	0x1fff50f6	// 1fff50f6 <dw_usart_dma_event_cb+0x8e>
        } else if (usart_priv->dma_rx_ch == ch && usart_priv->dma_rx_mode == 1) {
1fff51be:	3488      	movi      	r4, 136
1fff51c0:	7d0c      	mult      	r4, r3
1fff51c2:	9861      	ld.w      	r3, (r14, 0x4)
1fff51c4:	60d0      	addu      	r3, r4
1fff51c6:	6d0f      	mov      	r4, r3
1fff51c8:	9370      	ld.w      	r3, (r3, 0x40)
1fff51ca:	64c2      	cmpne      	r0, r3
1fff51cc:	0b95      	bt      	0x1fff50f6	// 1fff50f6 <dw_usart_dma_event_cb+0x8e>
1fff51ce:	d8640045 	ld.b      	r3, (r4, 0x45)
1fff51d2:	3b41      	cmpnei      	r3, 1
1fff51d4:	0b91      	bt      	0x1fff50f6	// 1fff50f6 <dw_usart_dma_event_cb+0x8e>
            if (usart_priv->rx_num >= usart_priv->rx_total_num) {
1fff51d6:	9463      	ld.w      	r3, (r4, 0xc)
            usart_priv->rx_num += usart_priv->rx_block_num;
1fff51d8:	e4240047 	addi      	r1, r4, 72
1fff51dc:	94b4      	ld.w      	r5, (r4, 0x50)
1fff51de:	9140      	ld.w      	r2, (r1, 0x0)
1fff51e0:	6094      	addu      	r2, r5
            if (usart_priv->rx_num >= usart_priv->rx_total_num) {
1fff51e2:	64c8      	cmphs      	r2, r3
            usart_priv->rx_num += usart_priv->rx_block_num;
1fff51e4:	b454      	st.w      	r2, (r4, 0x50)
            if (usart_priv->rx_num >= usart_priv->rx_total_num) {
1fff51e6:	0c08      	bf      	0x1fff51f6	// 1fff51f6 <dw_usart_dma_event_cb+0x18e>
                csi_dma_stop(usart_priv->dma_rx_ch);
1fff51e8:	e3fffef2 	bsr      	0x1fff4fcc	// 1fff4fcc <csi_dma_stop>
                if (usart_priv->cb_event) {
1fff51ec:	9462      	ld.w      	r3, (r4, 0x8)
1fff51ee:	3b40      	cmpnei      	r3, 0
1fff51f0:	0f83      	bf      	0x1fff50f6	// 1fff50f6 <dw_usart_dma_event_cb+0x8e>
                    usart_priv->cb_event(priv_num, USART_EVENT_RECEIVE_COMPLETE);
1fff51f2:	3101      	movi      	r1, 1
1fff51f4:	077f      	br      	0x1fff50f2	// 1fff50f2 <dw_usart_dma_event_cb+0x8a>
                uint32_t max_block_size = DMA_MAX_TRANSPORT_SIZE(usart_priv->dma_rx_ch);
1fff51f6:	3840      	cmpnei      	r0, 0
1fff51f8:	ea0707ff 	movi      	r7, 2047
1fff51fc:	351f      	movi      	r5, 31
1fff51fe:	c4a70c20 	incf      	r5, r7, 0
                uint32_t next_rx_size = usart_priv->rx_total_num - usart_priv->rx_num;
1fff5202:	60ca      	subu      	r3, r2
                usart_priv->rx_block_num = (next_rx_size > max_block_size) ? max_block_size : next_rx_size;
1fff5204:	64d4      	cmphs      	r5, r3
1fff5206:	c4650c20 	incf      	r3, r5, 0
1fff520a:	b160      	st.w      	r3, (r1, 0x0)
                csi_dma_start(usart_priv->dma_rx_ch, (uint8_t *) & (addr->THR), usart_priv->rx_buf + usart_priv->rx_num,  usart_priv->rx_block_num);
1fff520c:	9425      	ld.w      	r1, (r4, 0x14)
1fff520e:	6084      	addu      	r2, r1
1fff5210:	6c5b      	mov      	r1, r6
1fff5212:	07d3      	br      	0x1fff51b8	// 1fff51b8 <dw_usart_dma_event_cb+0x150>
1fff5214:	1fffb5ec 	.long	0x1fffb5ec

1fff5218 <csi_usart_restart_receive_dma>:
    return ret;

}

int32_t csi_usart_restart_receive_dma(usart_handle_t handle)
{
1fff5218:	14d2      	push      	r4-r5, r15
1fff521a:	6d03      	mov      	r4, r0
    dw_usart_priv_t *usart_priv = handle;
    dw_usart_reg_t *addr = (dw_usart_reg_t *)(usart_priv->base);
1fff521c:	90a0      	ld.w      	r5, (r0, 0x0)

    uint32_t max_block_size = DMA_MAX_TRANSPORT_SIZE(usart_priv->dma_rx_ch);
1fff521e:	9010      	ld.w      	r0, (r0, 0x40)
1fff5220:	ea0307ff 	movi      	r3, 2047
1fff5224:	3840      	cmpnei      	r0, 0
1fff5226:	321f      	movi      	r2, 31
1fff5228:	c4430c20 	incf      	r2, r3, 0
    usart_priv->rx_block_num = (usart_priv->rx_total_num > max_block_size) ? max_block_size : usart_priv->rx_total_num;
1fff522c:	9463      	ld.w      	r3, (r4, 0xc)
1fff522e:	64c8      	cmphs      	r2, r3
1fff5230:	c4620c20 	incf      	r3, r2, 0
1fff5234:	b472      	st.w      	r3, (r4, 0x48)
    usart_priv->rx_num = 0;
1fff5236:	3300      	movi      	r3, 0
1fff5238:	b474      	st.w      	r3, (r4, 0x50)
    csi_dma_stop(usart_priv->dma_rx_ch);
1fff523a:	e3fffec9 	bsr      	0x1fff4fcc	// 1fff4fcc <csi_dma_stop>
    csi_dma_start(usart_priv->dma_rx_ch, (uint8_t *) & (addr->THR), usart_priv->rx_buf,  usart_priv->rx_block_num);
1fff523e:	9410      	ld.w      	r0, (r4, 0x40)
1fff5240:	9472      	ld.w      	r3, (r4, 0x48)
1fff5242:	9445      	ld.w      	r2, (r4, 0x14)
1fff5244:	6c57      	mov      	r1, r5
1fff5246:	e3fffe73 	bsr      	0x1fff4f2c	// 1fff4f2c <csi_dma_start>

    return 0;
}
1fff524a:	3000      	movi      	r0, 0
1fff524c:	1492      	pop      	r4-r5, r15

1fff524e <dw_usart_intr_recv_data>:
{
1fff524e:	14d3      	push      	r4-r6, r15
1fff5250:	1421      	subi      	r14, r14, 4
1fff5252:	6cc7      	mov      	r3, r1
    if ((usart_priv->rx_total_num == 0) || (usart_priv->rx_buf == NULL)) {
1fff5254:	9143      	ld.w      	r2, (r1, 0xc)
1fff5256:	3a40      	cmpnei      	r2, 0
1fff5258:	0c04      	bf      	0x1fff5260	// 1fff5260 <dw_usart_intr_recv_data+0x12>
1fff525a:	9125      	ld.w      	r1, (r1, 0x14)
1fff525c:	3940      	cmpnei      	r1, 0
1fff525e:	080f      	bt      	0x1fff527c	// 1fff527c <dw_usart_intr_recv_data+0x2e>
        if (usart_priv->cb_event) {
1fff5260:	9342      	ld.w      	r2, (r3, 0x8)
1fff5262:	3a40      	cmpnei      	r2, 0
1fff5264:	0c05      	bf      	0x1fff526e	// 1fff526e <dw_usart_intr_recv_data+0x20>
            usart_priv->cb_event(idx, USART_EVENT_RECEIVED);
1fff5266:	310e      	movi      	r1, 14
1fff5268:	7bc9      	jsr      	r2
}
1fff526a:	1401      	addi      	r14, r14, 4
1fff526c:	1493      	pop      	r4-r6, r15
            csi_usart_receive_query(usart_priv, &data, 1);
1fff526e:	3201      	movi      	r2, 1
1fff5270:	6c0f      	mov      	r0, r3
1fff5272:	e42e0002 	addi      	r1, r14, 3
1fff5276:	e0002b9d 	bsr      	0x1fffa9b0	// 1fffa9b0 <check_before_startup+0x2d8>
1fff527a:	07f8      	br      	0x1fff526a	// 1fff526a <dw_usart_intr_recv_data+0x1c>
    dw_usart_reg_t *addr = (dw_usart_reg_t *)(usart_priv->base);
1fff527c:	93a0      	ld.w      	r5, (r3, 0x0)
    uint32_t rxfifo_num = addr->RFL; //chenlf: hardware bug?
1fff527e:	d8252021 	ld.w      	r1, (r5, 0x84)
    uint32_t rxdata_num = (rxfifo_num > usart_priv->rx_total_num) ? usart_priv->rx_total_num : rxfifo_num;
1fff5282:	6484      	cmphs      	r1, r2
1fff5284:	c4410c20 	incf      	r2, r1, 0
    for (i = 0; i < rxdata_num; i++) {
1fff5288:	3100      	movi      	r1, 0
1fff528a:	6486      	cmpne      	r1, r2
1fff528c:	0811      	bt      	0x1fff52ae	// 1fff52ae <dw_usart_intr_recv_data+0x60>
    if (usart_priv->rx_cnt >= usart_priv->rx_total_num) {
1fff528e:	9327      	ld.w      	r1, (r3, 0x1c)
1fff5290:	9343      	ld.w      	r2, (r3, 0xc)
1fff5292:	6484      	cmphs      	r1, r2
1fff5294:	0feb      	bf      	0x1fff526a	// 1fff526a <dw_usart_intr_recv_data+0x1c>
        usart_priv->last_rx_num = usart_priv->rx_total_num;
1fff5296:	b34c      	st.w      	r2, (r3, 0x30)
        usart_priv->rx_cnt = 0;
1fff5298:	3200      	movi      	r2, 0
1fff529a:	b347      	st.w      	r2, (r3, 0x1c)
        usart_priv->rx_buf = NULL;
1fff529c:	b345      	st.w      	r2, (r3, 0x14)
        usart_priv->rx_busy = 0;
1fff529e:	b34a      	st.w      	r2, (r3, 0x28)
        usart_priv->rx_total_num = 0;
1fff52a0:	b343      	st.w      	r2, (r3, 0xc)
        if (usart_priv->cb_event) {
1fff52a2:	9362      	ld.w      	r3, (r3, 0x8)
1fff52a4:	3b40      	cmpnei      	r3, 0
1fff52a6:	0fe2      	bf      	0x1fff526a	// 1fff526a <dw_usart_intr_recv_data+0x1c>
            usart_priv->cb_event(idx, USART_EVENT_RECEIVE_COMPLETE);
1fff52a8:	3101      	movi      	r1, 1
1fff52aa:	7bcd      	jsr      	r3
1fff52ac:	07df      	br      	0x1fff526a	// 1fff526a <dw_usart_intr_recv_data+0x1c>
        *((uint8_t *)usart_priv->rx_buf) = addr->RBR;;
1fff52ae:	95c0      	ld.w      	r6, (r5, 0x0)
1fff52b0:	9385      	ld.w      	r4, (r3, 0x14)
    for (i = 0; i < rxdata_num; i++) {
1fff52b2:	2100      	addi      	r1, 1
        *((uint8_t *)usart_priv->rx_buf) = addr->RBR;;
1fff52b4:	a4c0      	st.b      	r6, (r4, 0x0)
        usart_priv->rx_cnt++;
1fff52b6:	9387      	ld.w      	r4, (r3, 0x1c)
1fff52b8:	2400      	addi      	r4, 1
1fff52ba:	b387      	st.w      	r4, (r3, 0x1c)
        usart_priv->rx_buf++;
1fff52bc:	9385      	ld.w      	r4, (r3, 0x14)
1fff52be:	2400      	addi      	r4, 1
1fff52c0:	b385      	st.w      	r4, (r3, 0x14)
1fff52c2:	07e4      	br      	0x1fff528a	// 1fff528a <dw_usart_intr_recv_data+0x3c>

1fff52c4 <dw_usart_irqhandler>:
{
1fff52c4:	14d3      	push      	r4-r6, r15
    if (usart_priv->dma_rx_mode) {
1fff52c6:	3188      	movi      	r1, 136
1fff52c8:	1258      	lrw      	r2, 0x1fffb5ec	// 1fff5428 <dw_usart_irqhandler+0x164>
1fff52ca:	7c40      	mult      	r1, r0
1fff52cc:	6048      	addu      	r1, r2
{
1fff52ce:	6cc3      	mov      	r3, r0
    if (usart_priv->dma_rx_mode) {
1fff52d0:	d8010045 	ld.b      	r0, (r1, 0x45)
1fff52d4:	6d0b      	mov      	r4, r2
1fff52d6:	3840      	cmpnei      	r0, 0
1fff52d8:	0836      	bt      	0x1fff5344	// 1fff5344 <dw_usart_irqhandler+0x80>
    dw_usart_reg_t *addr = (dw_usart_reg_t *)(usart_priv->base);
1fff52da:	91a0      	ld.w      	r5, (r1, 0x0)
    uint8_t intr_state = addr->IIR & 0xf;
1fff52dc:	9502      	ld.w      	r0, (r5, 0x8)
    switch (intr_state) {
1fff52de:	e400200f 	andi      	r0, r0, 15
1fff52e2:	2801      	subi      	r0, 2
1fff52e4:	380a      	cmphsi      	r0, 11
1fff52e6:	082f      	bt      	0x1fff5344	// 1fff5344 <dw_usart_irqhandler+0x80>
1fff52e8:	e3fff1ca 	bsr      	0x1fff367c	// 1fff367c <___gnu_csky_case_uqi>
1fff52ec:	2c862c06 	.long	0x2c862c06
1fff52f0:	2c2c2c3a 	.long	0x2c2c2c3a
1fff52f4:	007d2c2c 	.long	0x007d2c2c
    if (usart_priv->tx_total_num == 0) {
1fff52f8:	3288      	movi      	r2, 136
1fff52fa:	7c8c      	mult      	r2, r3
1fff52fc:	6090      	addu      	r2, r4
1fff52fe:	9224      	ld.w      	r1, (r2, 0x10)
1fff5300:	3940      	cmpnei      	r1, 0
1fff5302:	0c21      	bf      	0x1fff5344	// 1fff5344 <dw_usart_irqhandler+0x80>
    if (usart_priv->tx_cnt >= usart_priv->tx_total_num) {
1fff5304:	e402001f 	addi      	r0, r2, 32
1fff5308:	90c0      	ld.w      	r6, (r0, 0x0)
1fff530a:	6458      	cmphs      	r6, r1
1fff530c:	0c13      	bf      	0x1fff5332	// 1fff5332 <dw_usart_irqhandler+0x6e>
        addr->IER &= (~IER_THRE_INT_ENABLE);
1fff530e:	9521      	ld.w      	r1, (r5, 0x4)
1fff5310:	3981      	bclri      	r1, 1
1fff5312:	b521      	st.w      	r1, (r5, 0x4)
        usart_priv->last_tx_num = usart_priv->tx_total_num;
1fff5314:	9224      	ld.w      	r1, (r2, 0x10)
1fff5316:	b22b      	st.w      	r1, (r2, 0x2c)
        usart_priv->tx_cnt = 0;
1fff5318:	3100      	movi      	r1, 0
1fff531a:	b020      	st.w      	r1, (r0, 0x0)
        usart_priv->tx_buf = NULL;
1fff531c:	3100      	movi      	r1, 0
        usart_priv->tx_busy = 0;
1fff531e:	3000      	movi      	r0, 0
        usart_priv->tx_buf = NULL;
1fff5320:	b226      	st.w      	r1, (r2, 0x18)
        usart_priv->tx_busy = 0;
1fff5322:	b209      	st.w      	r0, (r2, 0x24)
        usart_priv->tx_total_num = 0;
1fff5324:	b224      	st.w      	r1, (r2, 0x10)
        if (usart_priv->cb_event) {
1fff5326:	9242      	ld.w      	r2, (r2, 0x8)
1fff5328:	3a40      	cmpnei      	r2, 0
1fff532a:	0c0d      	bf      	0x1fff5344	// 1fff5344 <dw_usart_irqhandler+0x80>
        usart_priv->cb_event(idx, USART_EVENT_RECEIVED);
1fff532c:	6c0f      	mov      	r0, r3
1fff532e:	7bc9      	jsr      	r2
1fff5330:	040a      	br      	0x1fff5344	// 1fff5344 <dw_usart_irqhandler+0x80>
        uint32_t remain_txdata  = usart_priv->tx_total_num - usart_priv->tx_cnt;
1fff5332:	9060      	ld.w      	r3, (r0, 0x0)
1fff5334:	596d      	subu      	r3, r1, r3
        uint32_t txdata_num = (remain_txdata > (UART_MAX_FIFO - 1)) ? (UART_MAX_FIFO - 1) : remain_txdata;
1fff5336:	310f      	movi      	r1, 15
1fff5338:	3b0f      	cmphsi      	r3, 16
1fff533a:	c4610c40 	inct      	r3, r1, 0
        for (i = 0; i < txdata_num; i++) {
1fff533e:	3100      	movi      	r1, 0
1fff5340:	644e      	cmpne      	r3, r1
1fff5342:	0802      	bt      	0x1fff5346	// 1fff5346 <dw_usart_irqhandler+0x82>
}
1fff5344:	1493      	pop      	r4-r6, r15
            addr->THR = *((uint8_t *)usart_priv->tx_buf);
1fff5346:	9286      	ld.w      	r4, (r2, 0x18)
            usart_priv->tx_cnt++;
1fff5348:	e4c2001f 	addi      	r6, r2, 32
            addr->THR = *((uint8_t *)usart_priv->tx_buf);
1fff534c:	8480      	ld.b      	r4, (r4, 0x0)
1fff534e:	b580      	st.w      	r4, (r5, 0x0)
        for (i = 0; i < txdata_num; i++) {
1fff5350:	2100      	addi      	r1, 1
            usart_priv->tx_cnt++;
1fff5352:	9288      	ld.w      	r4, (r2, 0x20)
1fff5354:	2400      	addi      	r4, 1
1fff5356:	b288      	st.w      	r4, (r2, 0x20)
            usart_priv->tx_buf++;
1fff5358:	9286      	ld.w      	r4, (r2, 0x18)
1fff535a:	2400      	addi      	r4, 1
1fff535c:	b286      	st.w      	r4, (r2, 0x18)
1fff535e:	07f1      	br      	0x1fff5340	// 1fff5340 <dw_usart_irqhandler+0x7c>
    uint32_t lsr_stat = addr->LSR;
1fff5360:	9545      	ld.w      	r2, (r5, 0x14)
1fff5362:	1113      	lrw      	r0, 0xf4240	// 1fff542c <dw_usart_irqhandler+0x168>
    while (addr->LSR & 0x1) {
1fff5364:	3601      	movi      	r6, 1
1fff5366:	9525      	ld.w      	r1, (r5, 0x14)
1fff5368:	6858      	and      	r1, r6
1fff536a:	3940      	cmpnei      	r1, 0
1fff536c:	080d      	bt      	0x1fff5386	// 1fff5386 <dw_usart_irqhandler+0xc2>
    if (lsr_stat & DW_LSR_BI) {
1fff536e:	e4222010 	andi      	r1, r2, 16
1fff5372:	3940      	cmpnei      	r1, 0
1fff5374:	0c15      	bf      	0x1fff539e	// 1fff539e <dw_usart_irqhandler+0xda>
        if (usart_priv->cb_event) {
1fff5376:	3288      	movi      	r2, 136
1fff5378:	7c8c      	mult      	r2, r3
1fff537a:	6090      	addu      	r2, r4
1fff537c:	9242      	ld.w      	r2, (r2, 0x8)
1fff537e:	3a40      	cmpnei      	r2, 0
1fff5380:	0fe2      	bf      	0x1fff5344	// 1fff5344 <dw_usart_irqhandler+0x80>
            usart_priv->cb_event(idx, USART_EVENT_RX_BREAK);
1fff5382:	3107      	movi      	r1, 7
1fff5384:	07d4      	br      	0x1fff532c	// 1fff532c <dw_usart_irqhandler+0x68>
1fff5386:	2800      	subi      	r0, 1
        if (timecount >= UART_BUSY_TIMEOUT) {
1fff5388:	3840      	cmpnei      	r0, 0
        addr->RBR;
1fff538a:	9520      	ld.w      	r1, (r5, 0x0)
        if (timecount >= UART_BUSY_TIMEOUT) {
1fff538c:	0bed      	bt      	0x1fff5366	// 1fff5366 <dw_usart_irqhandler+0xa2>
            if (usart_priv->cb_event) {
1fff538e:	3288      	movi      	r2, 136
1fff5390:	7c8c      	mult      	r2, r3
1fff5392:	6090      	addu      	r2, r4
1fff5394:	9242      	ld.w      	r2, (r2, 0x8)
1fff5396:	3a40      	cmpnei      	r2, 0
1fff5398:	0fd6      	bf      	0x1fff5344	// 1fff5344 <dw_usart_irqhandler+0x80>
                usart_priv->cb_event(idx, USART_EVENT_RX_TIMEOUT);
1fff539a:	3106      	movi      	r1, 6
1fff539c:	07c8      	br      	0x1fff532c	// 1fff532c <dw_usart_irqhandler+0x68>
    if (lsr_stat & DW_LSR_FE) {
1fff539e:	e4222008 	andi      	r1, r2, 8
1fff53a2:	3940      	cmpnei      	r1, 0
1fff53a4:	0c09      	bf      	0x1fff53b6	// 1fff53b6 <dw_usart_irqhandler+0xf2>
        if (usart_priv->cb_event) {
1fff53a6:	3288      	movi      	r2, 136
1fff53a8:	7c8c      	mult      	r2, r3
1fff53aa:	6090      	addu      	r2, r4
1fff53ac:	9242      	ld.w      	r2, (r2, 0x8)
1fff53ae:	3a40      	cmpnei      	r2, 0
1fff53b0:	0fca      	bf      	0x1fff5344	// 1fff5344 <dw_usart_irqhandler+0x80>
            usart_priv->cb_event(idx, USART_EVENT_RX_FRAMING_ERROR);
1fff53b2:	3108      	movi      	r1, 8
1fff53b4:	07bc      	br      	0x1fff532c	// 1fff532c <dw_usart_irqhandler+0x68>
    if (lsr_stat & DW_LSR_PE) {
1fff53b6:	e4222004 	andi      	r1, r2, 4
1fff53ba:	3940      	cmpnei      	r1, 0
1fff53bc:	0c09      	bf      	0x1fff53ce	// 1fff53ce <dw_usart_irqhandler+0x10a>
        if (usart_priv->cb_event) {
1fff53be:	3288      	movi      	r2, 136
1fff53c0:	7c8c      	mult      	r2, r3
1fff53c2:	6090      	addu      	r2, r4
1fff53c4:	9242      	ld.w      	r2, (r2, 0x8)
1fff53c6:	3a40      	cmpnei      	r2, 0
1fff53c8:	0fbe      	bf      	0x1fff5344	// 1fff5344 <dw_usart_irqhandler+0x80>
            usart_priv->cb_event(idx, USART_EVENT_RX_PARITY_ERROR);
1fff53ca:	3109      	movi      	r1, 9
1fff53cc:	07b0      	br      	0x1fff532c	// 1fff532c <dw_usart_irqhandler+0x68>
    if (lsr_stat & DW_LSR_OE) {
1fff53ce:	e4422002 	andi      	r2, r2, 2
1fff53d2:	3a40      	cmpnei      	r2, 0
1fff53d4:	0fb8      	bf      	0x1fff5344	// 1fff5344 <dw_usart_irqhandler+0x80>
        if (usart_priv->cb_event) {
1fff53d6:	3288      	movi      	r2, 136
1fff53d8:	7c8c      	mult      	r2, r3
1fff53da:	6090      	addu      	r2, r4
1fff53dc:	9242      	ld.w      	r2, (r2, 0x8)
1fff53de:	3a40      	cmpnei      	r2, 0
1fff53e0:	0fb2      	bf      	0x1fff5344	// 1fff5344 <dw_usart_irqhandler+0x80>
            usart_priv->cb_event(idx, USART_EVENT_RX_OVERFLOW);
1fff53e2:	3105      	movi      	r1, 5
1fff53e4:	07a4      	br      	0x1fff532c	// 1fff532c <dw_usart_irqhandler+0x68>
    if ((usart_priv->rx_total_num != 0) && (usart_priv->rx_buf != NULL)) {
1fff53e6:	3288      	movi      	r2, 136
1fff53e8:	7c8c      	mult      	r2, r3
1fff53ea:	6090      	addu      	r2, r4
1fff53ec:	9203      	ld.w      	r0, (r2, 0xc)
1fff53ee:	3840      	cmpnei      	r0, 0
1fff53f0:	0c08      	bf      	0x1fff5400	// 1fff5400 <dw_usart_irqhandler+0x13c>
1fff53f2:	9245      	ld.w      	r2, (r2, 0x14)
1fff53f4:	3a40      	cmpnei      	r2, 0
1fff53f6:	0c05      	bf      	0x1fff5400	// 1fff5400 <dw_usart_irqhandler+0x13c>
        dw_usart_intr_recv_data(idx, usart_priv);
1fff53f8:	6c0f      	mov      	r0, r3
1fff53fa:	e3ffff2a 	bsr      	0x1fff524e	// 1fff524e <dw_usart_intr_recv_data>
1fff53fe:	07a3      	br      	0x1fff5344	// 1fff5344 <dw_usart_irqhandler+0x80>
    if (usart_priv->cb_event) {
1fff5400:	3288      	movi      	r2, 136
1fff5402:	7c8c      	mult      	r2, r3
1fff5404:	6090      	addu      	r2, r4
1fff5406:	9242      	ld.w      	r2, (r2, 0x8)
1fff5408:	3a40      	cmpnei      	r2, 0
1fff540a:	0c0c      	bf      	0x1fff5422	// 1fff5422 <dw_usart_irqhandler+0x15e>
        usart_priv->cb_event(idx, USART_EVENT_RECEIVED);
1fff540c:	310e      	movi      	r1, 14
1fff540e:	078f      	br      	0x1fff532c	// 1fff532c <dw_usart_irqhandler+0x68>
1fff5410:	2a00      	subi      	r2, 1
            if (timecount >= UART_BUSY_TIMEOUT) {
1fff5412:	3a40      	cmpnei      	r2, 0
            addr->RBR;
1fff5414:	9560      	ld.w      	r3, (r5, 0x0)
            if (timecount >= UART_BUSY_TIMEOUT) {
1fff5416:	0f97      	bf      	0x1fff5344	// 1fff5344 <dw_usart_irqhandler+0x80>
        while (addr->LSR & 0x1) {
1fff5418:	9565      	ld.w      	r3, (r5, 0x14)
1fff541a:	68c4      	and      	r3, r1
1fff541c:	3b40      	cmpnei      	r3, 0
1fff541e:	0bf9      	bt      	0x1fff5410	// 1fff5410 <dw_usart_irqhandler+0x14c>
1fff5420:	0792      	br      	0x1fff5344	// 1fff5344 <dw_usart_irqhandler+0x80>
    if (usart_priv->cb_event) {
1fff5422:	1043      	lrw      	r2, 0xf4240	// 1fff542c <dw_usart_irqhandler+0x168>
        while (addr->LSR & 0x1) {
1fff5424:	3101      	movi      	r1, 1
1fff5426:	07f9      	br      	0x1fff5418	// 1fff5418 <dw_usart_irqhandler+0x154>
1fff5428:	1fffb5ec 	.long	0x1fffb5ec
1fff542c:	000f4240 	.long	0x000f4240

1fff5430 <dw_wdt_irqhandler>:
{
    addr->WDT_CR = 0;
}

void dw_wdt_irqhandler(int32_t idx)
{
1fff5430:	14d0      	push      	r15
    dw_wdt_priv_t *wdt_priv = &wdt_instance[idx];
    //dw_wdt_reg_t *addr = (dw_wdt_reg_t *)(wdt_priv->base);

    //addr->WDT_EOI;

    if (wdt_priv->cb_event) {
1fff5432:	330c      	movi      	r3, 12
1fff5434:	7cc0      	mult      	r3, r0
1fff5436:	1045      	lrw      	r2, 0x1fffb6fc	// 1fff5448 <dw_wdt_irqhandler+0x18>
1fff5438:	60c8      	addu      	r3, r2
1fff543a:	9362      	ld.w      	r3, (r3, 0x8)
1fff543c:	3b40      	cmpnei      	r3, 0
1fff543e:	0c03      	bf      	0x1fff5444	// 1fff5444 <dw_wdt_irqhandler+0x14>
        wdt_priv->cb_event(idx, WDT_EVENT_TIMEOUT);
1fff5440:	3100      	movi      	r1, 0
1fff5442:	7bcd      	jsr      	r3
    }
}
1fff5444:	1490      	pop      	r15
1fff5446:	0000      	bkpt
1fff5448:	1fffb6fc 	.long	0x1fffb6fc

1fff544c <csi_wdt_restart>:
  \param[in]   handle wdt handle to operate.
  \return      \ref execution_status
*/
int32_t csi_wdt_restart(wdt_handle_t handle)
{
    WDT_NULL_PARAM_CHK(handle);
1fff544c:	3840      	cmpnei      	r0, 0
1fff544e:	0c06      	bf      	0x1fff545a	// 1fff545a <csi_wdt_restart+0xe>

    dw_wdt_priv_t *wdt_priv = handle;
    dw_wdt_reg_t *addr = (dw_wdt_reg_t *)(wdt_priv->base);
1fff5450:	9060      	ld.w      	r3, (r0, 0x0)

    addr->WDT_CRR = DW_WDT_CRR_RESET;
1fff5452:	3276      	movi      	r2, 118

    return 0;
1fff5454:	3000      	movi      	r0, 0
    addr->WDT_CRR = DW_WDT_CRR_RESET;
1fff5456:	a34c      	st.b      	r2, (r3, 0xc)
}
1fff5458:	783c      	jmp      	r15
    WDT_NULL_PARAM_CHK(handle);
1fff545a:	1002      	lrw      	r0, 0x81080084	// 1fff5460 <csi_wdt_restart+0x14>
1fff545c:	07fe      	br      	0x1fff5458	// 1fff5458 <csi_wdt_restart+0xc>
1fff545e:	0000      	bkpt
1fff5460:	81080084 	.long	0x81080084

1fff5464 <csi_wdt_set_timeout>:
{
1fff5464:	14d4      	push      	r4-r7, r15
1fff5466:	6dc3      	mov      	r7, r0
    WDT_NULL_PARAM_CHK(handle);
1fff5468:	3840      	cmpnei      	r0, 0
1fff546a:	0c2e      	bf      	0x1fff54c6	// 1fff54c6 <csi_wdt_set_timeout+0x62>
1fff546c:	3400      	movi      	r4, 0
        if (timeout_ms[i] >= value) {
1fff546e:	1058      	lrw      	r2, 0x1fffa574	// 1fff54cc <csi_wdt_set_timeout+0x68>
1fff5470:	4462      	lsli      	r3, r4, 2
1fff5472:	60c8      	addu      	r3, r2
1fff5474:	9360      	ld.w      	r3, (r3, 0x0)
1fff5476:	644c      	cmphs      	r3, r1
1fff5478:	0c23      	bf      	0x1fff54be	// 1fff54be <csi_wdt_set_timeout+0x5a>
    dw_wdt_reg_t *addr = (dw_wdt_reg_t *)(wdt_priv->base);
1fff547a:	97a0      	ld.w      	r5, (r7, 0x0)
    addr->WDT_CR = config;
1fff547c:	3200      	movi      	r2, 0
    uint32_t config = addr->WDT_CR;
1fff547e:	95c0      	ld.w      	r6, (r5, 0x0)
    addr->WDT_CR = config;
1fff5480:	8560      	ld.b      	r3, (r5, 0x0)
1fff5482:	2a1f      	subi      	r2, 32
1fff5484:	68c8      	and      	r3, r2
1fff5486:	a560      	st.b      	r3, (r5, 0x0)
    uint32_t config = addr->WDT_CR;
1fff5488:	e4c6201f 	andi      	r6, r6, 31
    hal_clk_reset(MOD_WDT);
1fff548c:	3025      	movi      	r0, 37
    if (en_stat == 1) {
1fff548e:	e4c62001 	andi      	r6, r6, 1
    hal_clk_reset(MOD_WDT);
1fff5492:	e3fffc97 	bsr      	0x1fff4dc0	// 1fff4dc0 <hal_clk_reset>
    addr->WDT_CR = 0;
1fff5496:	8560      	ld.b      	r3, (r5, 0x0)
1fff5498:	3200      	movi      	r2, 0
    if (en_stat == 1) {
1fff549a:	3e40      	cmpnei      	r6, 0
    addr->WDT_CR = 0;
1fff549c:	2a1f      	subi      	r2, 32
1fff549e:	68c8      	and      	r3, r2
1fff54a0:	a560      	st.b      	r3, (r5, 0x0)
    i += i << 4;
1fff54a2:	4464      	lsli      	r3, r4, 4
1fff54a4:	610c      	addu      	r4, r3
    addr->WDT_TORR = i;
1fff54a6:	7510      	zextb      	r4, r4
1fff54a8:	a584      	st.b      	r4, (r5, 0x4)
    if (en_stat == 1) {
1fff54aa:	0c08      	bf      	0x1fff54ba	// 1fff54ba <csi_wdt_set_timeout+0x56>
    addr->WDT_CR = 0x1F;
1fff54ac:	8560      	ld.b      	r3, (r5, 0x0)
1fff54ae:	ec63001f 	ori      	r3, r3, 31
1fff54b2:	a560      	st.b      	r3, (r5, 0x0)
        csi_wdt_restart(handle);
1fff54b4:	6c1f      	mov      	r0, r7
1fff54b6:	e3ffffcb 	bsr      	0x1fff544c	// 1fff544c <csi_wdt_restart>
    return 0;
1fff54ba:	3000      	movi      	r0, 0
1fff54bc:	0406      	br      	0x1fff54c8	// 1fff54c8 <csi_wdt_set_timeout+0x64>
        if (i == 7) {
1fff54be:	3c47      	cmpnei      	r4, 7
1fff54c0:	0c03      	bf      	0x1fff54c6	// 1fff54c6 <csi_wdt_set_timeout+0x62>
    for (i = 0; i <= 7 ; i++) {
1fff54c2:	2400      	addi      	r4, 1
1fff54c4:	07d6      	br      	0x1fff5470	// 1fff5470 <csi_wdt_set_timeout+0xc>
    WDT_NULL_PARAM_CHK(handle);
1fff54c6:	1003      	lrw      	r0, 0x81080084	// 1fff54d0 <csi_wdt_set_timeout+0x6c>
}
1fff54c8:	1494      	pop      	r4-r7, r15
1fff54ca:	0000      	bkpt
1fff54cc:	1fffa574 	.long	0x1fffa574
1fff54d0:	81080084 	.long	0x81080084

1fff54d4 <spif_lock>:
    __ASM volatile("mfcr %0, psr" : "=r"(result));
1fff54d4:	c0006023 	mfcr      	r3, cr<0, 0>
    __ASM volatile("psrclr ie");
1fff54d8:	c0807020 	psrclr      	ie

static inline uint32_t spif_lock()
{
    _HAL_CS_ALLOC_();
    HAL_ENTER_CRITICAL_SECTION();
    uint32_t vic_iser = VIC->ISER[0];
1fff54dc:	1046      	lrw      	r2, 0xe000e100	// 1fff54f4 <spif_lock+0x20>
    //mask all irq
    VIC->ICER[0] = 0xFFFFFFFF;
1fff54de:	3100      	movi      	r1, 0
1fff54e0:	2900      	subi      	r1, 1
    uint32_t vic_iser = VIC->ISER[0];
1fff54e2:	9200      	ld.w      	r0, (r2, 0x0)
    VIC->ICER[0] = 0xFFFFFFFF;
1fff54e4:	dc222020 	st.w      	r1, (r2, 0x80)
    //enable ll irq and tim1 irq
    VIC->ISER[0] = 0x100010;
1fff54e8:	1024      	lrw      	r1, 0x100010	// 1fff54f8 <spif_lock+0x24>
1fff54ea:	b220      	st.w      	r1, (r2, 0x0)
    __ASM volatile("mtcr %0, psr" : : "r"(psr));
1fff54ec:	c0036420 	mtcr      	r3, cr<0, 0>
    HAL_EXIT_CRITICAL_SECTION();
    return vic_iser;
}
1fff54f0:	783c      	jmp      	r15
1fff54f2:	0000      	bkpt
1fff54f4:	e000e100 	.long	0xe000e100
1fff54f8:	00100010 	.long	0x00100010

1fff54fc <spif_unlock>:
    __ASM volatile("mfcr %0, psr" : "=r"(result));
1fff54fc:	c0006023 	mfcr      	r3, cr<0, 0>
    __ASM volatile("psrclr ie");
1fff5500:	c0807020 	psrclr      	ie

static inline void spif_unlock(uint32_t vic_iser)
{
    _HAL_CS_ALLOC_();
    HAL_ENTER_CRITICAL_SECTION();
    VIC->ISER[0] = vic_iser;
1fff5504:	1043      	lrw      	r2, 0xe000e100	// 1fff5510 <spif_unlock+0x14>
1fff5506:	b200      	st.w      	r0, (r2, 0x0)
    __ASM volatile("mtcr %0, psr" : : "r"(psr));
1fff5508:	c0036420 	mtcr      	r3, cr<0, 0>
    HAL_EXIT_CRITICAL_SECTION();
}
1fff550c:	783c      	jmp      	r15
1fff550e:	0000      	bkpt
1fff5510:	e000e100 	.long	0xe000e100

1fff5514 <hal_cache_tag_flush>:
    }while(0);

#define spif_wait_nobusy(flg, tout_ns, return_val)   {if(_spif_wait_nobusy_x(flg, tout_ns)){if(return_val){ return return_val;}}}

static void hal_cache_tag_flush(void)
{
1fff5514:	14c1      	push      	r4
1fff5516:	1421      	subi      	r14, r14, 4
    __ASM volatile("mfcr %0, psr" : "=r"(result));
1fff5518:	c0006021 	mfcr      	r1, cr<0, 0>
    __ASM volatile("psrclr ie");
1fff551c:	c0807020 	psrclr      	ie
    _HAL_CS_ALLOC_();
    HAL_ENTER_CRITICAL_SECTION();
    uint32_t cb = AP_PCR->CACHE_BYPASS;
1fff5520:	3380      	movi      	r3, 128
1fff5522:	4377      	lsli      	r3, r3, 23
1fff5524:	934a      	ld.w      	r2, (r3, 0x28)
    volatile int dly = 8;
1fff5526:	3008      	movi      	r0, 8

    if (cb == 0) {
1fff5528:	3a40      	cmpnei      	r2, 0
    volatile int dly = 8;
1fff552a:	b800      	st.w      	r0, (r14, 0x0)
    if (cb == 0) {
1fff552c:	0806      	bt      	0x1fff5538	// 1fff5538 <hal_cache_tag_flush+0x24>
        AP_CACHE->CTRL0 = 0x02;
1fff552e:	1010      	lrw      	r0, 0x4000c000	// 1fff556c <hal_cache_tag_flush+0x58>
1fff5530:	3402      	movi      	r4, 2
1fff5532:	b080      	st.w      	r4, (r0, 0x0)
        AP_PCR->CACHE_BYPASS = 1;
1fff5534:	3001      	movi      	r0, 1
1fff5536:	b30a      	st.w      	r0, (r3, 0x28)
    }

    while (dly--) {
1fff5538:	9860      	ld.w      	r3, (r14, 0x0)
1fff553a:	5b03      	subi      	r0, r3, 1
1fff553c:	3b40      	cmpnei      	r3, 0
1fff553e:	b800      	st.w      	r0, (r14, 0x0)
1fff5540:	0bfc      	bt      	0x1fff5538	// 1fff5538 <hal_cache_tag_flush+0x24>
        ;
    };

    AP_CACHE->CTRL0 = 0x03;
1fff5542:	106b      	lrw      	r3, 0x4000c000	// 1fff556c <hal_cache_tag_flush+0x58>
1fff5544:	3003      	movi      	r0, 3
1fff5546:	b300      	st.w      	r0, (r3, 0x0)

    dly = 8;
1fff5548:	3308      	movi      	r3, 8
1fff554a:	b860      	st.w      	r3, (r14, 0x0)

    while (dly--) {
1fff554c:	9860      	ld.w      	r3, (r14, 0x0)
1fff554e:	5b03      	subi      	r0, r3, 1
1fff5550:	3b40      	cmpnei      	r3, 0
1fff5552:	b800      	st.w      	r0, (r14, 0x0)
1fff5554:	0bfc      	bt      	0x1fff554c	// 1fff554c <hal_cache_tag_flush+0x38>
        ;
    };

    if (cb == 0) {
1fff5556:	3a40      	cmpnei      	r2, 0
1fff5558:	0806      	bt      	0x1fff5564	// 1fff5564 <hal_cache_tag_flush+0x50>
        AP_PCR->CACHE_BYPASS = 0;
1fff555a:	3380      	movi      	r3, 128
1fff555c:	4377      	lsli      	r3, r3, 23
1fff555e:	b34a      	st.w      	r2, (r3, 0x28)
        AP_CACHE->CTRL0 = 0;
1fff5560:	1063      	lrw      	r3, 0x4000c000	// 1fff556c <hal_cache_tag_flush+0x58>
1fff5562:	b340      	st.w      	r2, (r3, 0x0)
    __ASM volatile("mtcr %0, psr" : : "r"(psr));
1fff5564:	c0016420 	mtcr      	r1, cr<0, 0>
    }

    HAL_EXIT_CRITICAL_SECTION();
}
1fff5568:	1401      	addi      	r14, r14, 4
1fff556a:	1481      	pop      	r4
1fff556c:	4000c000 	.long	0x4000c000

1fff5570 <_spif_read_status_reg_x>:

static uint8_t _spif_read_status_reg_x(void)
{
1fff5570:	14d0      	push      	r15
1fff5572:	1424      	subi      	r14, r14, 16
    uint8_t status;
    spif_cmd(FCMD_RDST, 0, 2, 0, 0, 0);
1fff5574:	3300      	movi      	r3, 0
1fff5576:	3202      	movi      	r2, 2
1fff5578:	3100      	movi      	r1, 0
1fff557a:	b861      	st.w      	r3, (r14, 0x4)
1fff557c:	b860      	st.w      	r3, (r14, 0x0)
1fff557e:	3005      	movi      	r0, 5
1fff5580:	e0002aae 	bsr      	0x1fffaadc	// 1fffaadc <check_before_startup+0x404>
    SPIF_STATUS_WAIT_IDLE(SPIF_WAIT_IDLE_CYC);
1fff5584:	102e      	lrw      	r1, 0x4000c800	// 1fff55bc <_spif_read_status_reg_x+0x4c>
1fff5586:	3202      	movi      	r2, 2
1fff5588:	d8612024 	ld.w      	r3, (r1, 0x90)
1fff558c:	68c8      	and      	r3, r2
1fff558e:	3b40      	cmpnei      	r3, 0
1fff5590:	0bfc      	bt      	0x1fff5588	// 1fff5588 <_spif_read_status_reg_x+0x18>
1fff5592:	3320      	movi      	r3, 32
1fff5594:	b863      	st.w      	r3, (r14, 0xc)
1fff5596:	9863      	ld.w      	r3, (r14, 0xc)
1fff5598:	5b43      	subi      	r2, r3, 1
1fff559a:	3b40      	cmpnei      	r3, 0
1fff559c:	b843      	st.w      	r2, (r14, 0xc)
1fff559e:	0bfc      	bt      	0x1fff5596	// 1fff5596 <_spif_read_status_reg_x+0x26>
1fff55a0:	1047      	lrw      	r2, 0x4000c800	// 1fff55bc <_spif_read_status_reg_x+0x4c>
1fff55a2:	9260      	ld.w      	r3, (r2, 0x0)
1fff55a4:	3bdf      	btsti      	r3, 31
1fff55a6:	0ffe      	bf      	0x1fff55a2	// 1fff55a2 <_spif_read_status_reg_x+0x32>
    spif_rddata(&status, 1);
1fff55a8:	3101      	movi      	r1, 1
1fff55aa:	e40e000a 	addi      	r0, r14, 11
1fff55ae:	e0002b4b 	bsr      	0x1fffac44	// 1fffac44 <check_before_startup+0x56c>
    return status;
1fff55b2:	d80e000b 	ld.b      	r0, (r14, 0xb)
}
1fff55b6:	1404      	addi      	r14, r14, 16
1fff55b8:	1490      	pop      	r15
1fff55ba:	0000      	bkpt
1fff55bc:	4000c800 	.long	0x4000c800

1fff55c0 <_spif_wait_nobusy_x.constprop.1>:

static int _spif_wait_nobusy_x(uint8_t flg, uint32_t tout_ns)
1fff55c0:	14d1      	push      	r4, r15
1fff55c2:	1421      	subi      	r14, r14, 4
1fff55c4:	6d03      	mov      	r4, r0
{
    uint8_t status;
    volatile int tout = (int)(tout_ns);
1fff55c6:	106a      	lrw      	r3, 0xf4240	// 1fff55ec <_spif_wait_nobusy_x.constprop.1+0x2c>

    for (; tout ; tout --) {
1fff55c8:	b860      	st.w      	r3, (r14, 0x0)
1fff55ca:	9860      	ld.w      	r3, (r14, 0x0)
1fff55cc:	3b40      	cmpnei      	r3, 0
1fff55ce:	0804      	bt      	0x1fff55d6	// 1fff55d6 <_spif_wait_nobusy_x.constprop.1+0x16>
        if ((status & flg) == 0) {
            return PPlus_SUCCESS;
        }
    }

    return PPlus_ERR_BUSY;
1fff55d0:	3011      	movi      	r0, 17
}
1fff55d2:	1401      	addi      	r14, r14, 4
1fff55d4:	1491      	pop      	r4, r15
        status = _spif_read_status_reg_x();
1fff55d6:	e3ffffcd 	bsr      	0x1fff5570	// 1fff5570 <_spif_read_status_reg_x>
        if ((status & flg) == 0) {
1fff55da:	6810      	and      	r0, r4
1fff55dc:	3840      	cmpnei      	r0, 0
1fff55de:	0c04      	bf      	0x1fff55e6	// 1fff55e6 <_spif_wait_nobusy_x.constprop.1+0x26>
    for (; tout ; tout --) {
1fff55e0:	9860      	ld.w      	r3, (r14, 0x0)
1fff55e2:	2b00      	subi      	r3, 1
1fff55e4:	07f2      	br      	0x1fff55c8	// 1fff55c8 <_spif_wait_nobusy_x.constprop.1+0x8>
            return PPlus_SUCCESS;
1fff55e6:	3000      	movi      	r0, 0
1fff55e8:	07f5      	br      	0x1fff55d2	// 1fff55d2 <_spif_wait_nobusy_x.constprop.1+0x12>
1fff55ea:	0000      	bkpt
1fff55ec:	000f4240 	.long	0x000f4240

1fff55f0 <hal_flash_write>:

static int hal_flash_write(uint32_t addr, uint8_t *data, uint32_t size)
{
1fff55f0:	14d4      	push      	r4-r7, r15
1fff55f2:	1422      	subi      	r14, r14, 8
1fff55f4:	6d03      	mov      	r4, r0
1fff55f6:	6d87      	mov      	r6, r1
1fff55f8:	6dcb      	mov      	r7, r2
    uint8_t retval;
    uint32_t cs = spif_lock();
1fff55fa:	e3ffff6d 	bsr      	0x1fff54d4	// 1fff54d4 <spif_lock>
1fff55fe:	6d43      	mov      	r5, r0
    __ASM volatile("mfcr %0, psr" : "=r"(result));
1fff5600:	c0006022 	mfcr      	r2, cr<0, 0>
    __ASM volatile("psrclr ie");
1fff5604:	c0807020 	psrclr      	ie
    HAL_CACHE_ENTER_BYPASS_SECTION();
1fff5608:	3102      	movi      	r1, 2
1fff560a:	116b      	lrw      	r3, 0x4000c000	// 1fff56b4 <hal_flash_write+0xc4>
1fff560c:	b320      	st.w      	r1, (r3, 0x0)
1fff560e:	3380      	movi      	r3, 128
1fff5610:	4377      	lsli      	r3, r3, 23
1fff5612:	b329      	st.w      	r1, (r3, 0x24)
1fff5614:	3101      	movi      	r1, 1
1fff5616:	b32a      	st.w      	r1, (r3, 0x28)
    __ASM volatile("mtcr %0, psr" : : "r"(psr));
1fff5618:	c0026420 	mtcr      	r2, cr<0, 0>
    SPIF_STATUS_WAIT_IDLE(SPIF_WAIT_IDLE_CYC);
1fff561c:	1127      	lrw      	r1, 0x4000c800	// 1fff56b8 <hal_flash_write+0xc8>
1fff561e:	3202      	movi      	r2, 2
1fff5620:	d8612024 	ld.w      	r3, (r1, 0x90)
1fff5624:	68c8      	and      	r3, r2
1fff5626:	3b40      	cmpnei      	r3, 0
1fff5628:	0bfc      	bt      	0x1fff5620	// 1fff5620 <hal_flash_write+0x30>
1fff562a:	3320      	movi      	r3, 32
1fff562c:	b860      	st.w      	r3, (r14, 0x0)
1fff562e:	9860      	ld.w      	r3, (r14, 0x0)
1fff5630:	5b43      	subi      	r2, r3, 1
1fff5632:	3b40      	cmpnei      	r3, 0
1fff5634:	b840      	st.w      	r2, (r14, 0x0)
1fff5636:	0bfc      	bt      	0x1fff562e	// 1fff562e <hal_flash_write+0x3e>
1fff5638:	1140      	lrw      	r2, 0x4000c800	// 1fff56b8 <hal_flash_write+0xc8>
1fff563a:	9260      	ld.w      	r3, (r2, 0x0)
1fff563c:	3bdf      	btsti      	r3, 31
1fff563e:	0ffe      	bf      	0x1fff563a	// 1fff563a <hal_flash_write+0x4a>
    spif_wait_nobusy(SFLG_WIP, SPIF_TIMEOUT, PPlus_ERR_BUSY);
1fff5640:	3001      	movi      	r0, 1
1fff5642:	e3ffffbf 	bsr      	0x1fff55c0	// 1fff55c0 <_spif_wait_nobusy_x.constprop.1>
1fff5646:	3840      	cmpnei      	r0, 0
1fff5648:	0c04      	bf      	0x1fff5650	// 1fff5650 <hal_flash_write+0x60>
1fff564a:	3011      	movi      	r0, 17
    SPIF_STATUS_WAIT_IDLE(SPIF_WAIT_IDLE_CYC);
    spif_wait_nobusy(SFLG_WIP, SPIF_TIMEOUT, PPlus_ERR_BUSY);
    HAL_CACHE_EXIT_BYPASS_SECTION();
    spif_unlock(cs);
    return retval;
}
1fff564c:	1402      	addi      	r14, r14, 8
1fff564e:	1494      	pop      	r4-r7, r15
    retval = spif_write(addr, data, size);
1fff5650:	6c9f      	mov      	r2, r7
1fff5652:	6c5b      	mov      	r1, r6
1fff5654:	6c13      	mov      	r0, r4
1fff5656:	e0002b15 	bsr      	0x1fffac80	// 1fffac80 <check_before_startup+0x5a8>
1fff565a:	6d03      	mov      	r4, r0
    SPIF_STATUS_WAIT_IDLE(SPIF_WAIT_IDLE_CYC);
1fff565c:	1037      	lrw      	r1, 0x4000c800	// 1fff56b8 <hal_flash_write+0xc8>
1fff565e:	3202      	movi      	r2, 2
1fff5660:	d8612024 	ld.w      	r3, (r1, 0x90)
1fff5664:	68c8      	and      	r3, r2
1fff5666:	3b40      	cmpnei      	r3, 0
1fff5668:	0bfc      	bt      	0x1fff5660	// 1fff5660 <hal_flash_write+0x70>
1fff566a:	3320      	movi      	r3, 32
1fff566c:	b861      	st.w      	r3, (r14, 0x4)
1fff566e:	9861      	ld.w      	r3, (r14, 0x4)
1fff5670:	5b43      	subi      	r2, r3, 1
1fff5672:	3b40      	cmpnei      	r3, 0
1fff5674:	b841      	st.w      	r2, (r14, 0x4)
1fff5676:	0bfc      	bt      	0x1fff566e	// 1fff566e <hal_flash_write+0x7e>
1fff5678:	1050      	lrw      	r2, 0x4000c800	// 1fff56b8 <hal_flash_write+0xc8>
1fff567a:	9260      	ld.w      	r3, (r2, 0x0)
1fff567c:	3bdf      	btsti      	r3, 31
1fff567e:	0ffe      	bf      	0x1fff567a	// 1fff567a <hal_flash_write+0x8a>
    spif_wait_nobusy(SFLG_WIP, SPIF_TIMEOUT, PPlus_ERR_BUSY);
1fff5680:	3001      	movi      	r0, 1
1fff5682:	e3ffff9f 	bsr      	0x1fff55c0	// 1fff55c0 <_spif_wait_nobusy_x.constprop.1>
1fff5686:	3840      	cmpnei      	r0, 0
1fff5688:	0be1      	bt      	0x1fff564a	// 1fff564a <hal_flash_write+0x5a>
    __ASM volatile("mfcr %0, psr" : "=r"(result));
1fff568a:	c0006022 	mfcr      	r2, cr<0, 0>
    __ASM volatile("psrclr ie");
1fff568e:	c0807020 	psrclr      	ie
    HAL_CACHE_EXIT_BYPASS_SECTION();
1fff5692:	1069      	lrw      	r3, 0x4000c000	// 1fff56b4 <hal_flash_write+0xc4>
1fff5694:	3100      	movi      	r1, 0
1fff5696:	b320      	st.w      	r1, (r3, 0x0)
1fff5698:	3103      	movi      	r1, 3
1fff569a:	3380      	movi      	r3, 128
1fff569c:	4377      	lsli      	r3, r3, 23
1fff569e:	b329      	st.w      	r1, (r3, 0x24)
1fff56a0:	3100      	movi      	r1, 0
1fff56a2:	b32a      	st.w      	r1, (r3, 0x28)
    __ASM volatile("mtcr %0, psr" : : "r"(psr));
1fff56a4:	c0026420 	mtcr      	r2, cr<0, 0>
    spif_unlock(cs);
1fff56a8:	6c17      	mov      	r0, r5
1fff56aa:	e3ffff29 	bsr      	0x1fff54fc	// 1fff54fc <spif_unlock>
1fff56ae:	7410      	zextb      	r0, r4
    return retval;
1fff56b0:	07ce      	br      	0x1fff564c	// 1fff564c <hal_flash_write+0x5c>
1fff56b2:	0000      	bkpt
1fff56b4:	4000c000 	.long	0x4000c000
1fff56b8:	4000c800 	.long	0x4000c800

1fff56bc <hal_flash_erase_sector>:

    return PPlus_SUCCESS;
}

int hal_flash_erase_sector(unsigned int addr)
{
1fff56bc:	14d3      	push      	r4-r6, r15
1fff56be:	1421      	subi      	r14, r14, 4
1fff56c0:	6d03      	mov      	r4, r0
    uint8_t retval;
    uint32_t cs = spif_lock();
1fff56c2:	e3ffff09 	bsr      	0x1fff54d4	// 1fff54d4 <spif_lock>

    uint32_t cb = AP_PCR->CACHE_BYPASS;
1fff56c6:	3380      	movi      	r3, 128
1fff56c8:	4377      	lsli      	r3, r3, 23
    uint32_t cs = spif_lock();
1fff56ca:	6d43      	mov      	r5, r0
    uint32_t cb = AP_PCR->CACHE_BYPASS;
1fff56cc:	93ca      	ld.w      	r6, (r3, 0x28)

    SPIF_STATUS_WAIT_IDLE(SPIF_WAIT_IDLE_CYC);
1fff56ce:	1037      	lrw      	r1, 0x4000c800	// 1fff5728 <hal_flash_erase_sector+0x6c>
1fff56d0:	3202      	movi      	r2, 2
1fff56d2:	d8612024 	ld.w      	r3, (r1, 0x90)
1fff56d6:	68c8      	and      	r3, r2
1fff56d8:	3b40      	cmpnei      	r3, 0
1fff56da:	0bfc      	bt      	0x1fff56d2	// 1fff56d2 <hal_flash_erase_sector+0x16>
1fff56dc:	3320      	movi      	r3, 32
1fff56de:	b860      	st.w      	r3, (r14, 0x0)
1fff56e0:	9860      	ld.w      	r3, (r14, 0x0)
1fff56e2:	5b43      	subi      	r2, r3, 1
1fff56e4:	3b40      	cmpnei      	r3, 0
1fff56e6:	b840      	st.w      	r2, (r14, 0x0)
1fff56e8:	0bfc      	bt      	0x1fff56e0	// 1fff56e0 <hal_flash_erase_sector+0x24>
1fff56ea:	1050      	lrw      	r2, 0x4000c800	// 1fff5728 <hal_flash_erase_sector+0x6c>
1fff56ec:	9260      	ld.w      	r3, (r2, 0x0)
1fff56ee:	3bdf      	btsti      	r3, 31
1fff56f0:	0ffe      	bf      	0x1fff56ec	// 1fff56ec <hal_flash_erase_sector+0x30>
    spif_wait_nobusy(SFLG_WIP, SPIF_TIMEOUT, PPlus_ERR_BUSY);
1fff56f2:	3001      	movi      	r0, 1
1fff56f4:	e3ffff66 	bsr      	0x1fff55c0	// 1fff55c0 <_spif_wait_nobusy_x.constprop.1>
1fff56f8:	3840      	cmpnei      	r0, 0
1fff56fa:	0c04      	bf      	0x1fff5702	// 1fff5702 <hal_flash_erase_sector+0x46>
1fff56fc:	3011      	movi      	r0, 17
    }

    spif_unlock(cs);

    return retval;
}
1fff56fe:	1401      	addi      	r14, r14, 4
1fff5700:	1493      	pop      	r4-r6, r15
    retval = spif_erase_sector(addr);
1fff5702:	6c13      	mov      	r0, r4
1fff5704:	e000296e 	bsr      	0x1fffa9e0	// 1fffa9e0 <check_before_startup+0x308>
1fff5708:	6d03      	mov      	r4, r0
    spif_wait_nobusy(SFLG_WELWIP, SPIF_TIMEOUT, PPlus_ERR_BUSY);
1fff570a:	3003      	movi      	r0, 3
1fff570c:	e3ffff5a 	bsr      	0x1fff55c0	// 1fff55c0 <_spif_wait_nobusy_x.constprop.1>
1fff5710:	3840      	cmpnei      	r0, 0
1fff5712:	0bf5      	bt      	0x1fff56fc	// 1fff56fc <hal_flash_erase_sector+0x40>
    if (cb == 0) {
1fff5714:	3e40      	cmpnei      	r6, 0
1fff5716:	0803      	bt      	0x1fff571c	// 1fff571c <hal_flash_erase_sector+0x60>
        hal_cache_tag_flush();
1fff5718:	e3fffefe 	bsr      	0x1fff5514	// 1fff5514 <hal_cache_tag_flush>
    spif_unlock(cs);
1fff571c:	6c17      	mov      	r0, r5
1fff571e:	e3fffeef 	bsr      	0x1fff54fc	// 1fff54fc <spif_unlock>
1fff5722:	7410      	zextb      	r0, r4
    return retval;
1fff5724:	07ed      	br      	0x1fff56fe	// 1fff56fe <hal_flash_erase_sector+0x42>
1fff5726:	0000      	bkpt
1fff5728:	4000c800 	.long	0x4000c800

1fff572c <phy_ProgramPage64>:

}

// program 64 bytes into flash
int phy_ProgramPage64(unsigned long offset, const unsigned char *buf,  int size)    // size must be <=256
{
1fff572c:	14d0      	push      	r15
    offset &= 0x00ffffff;
1fff572e:	4008      	lsli      	r0, r0, 8
1fff5730:	4808      	lsri      	r0, r0, 8

    return hal_flash_write(offset, (uint8_t *)buf, size);
1fff5732:	e3ffff5f 	bsr      	0x1fff55f0	// 1fff55f0 <hal_flash_write>
}
1fff5736:	1490      	pop      	r15

1fff5738 <phy_ReadFlash>:
    spif_release_deep_sleep();
}

// read one byte from flash
uint32_t phy_ReadFlash(unsigned int addr, uint32_t *value)
{
1fff5738:	14d4      	push      	r4-r7, r15
1fff573a:	1421      	subi      	r14, r14, 4
1fff573c:	6d03      	mov      	r4, r0
1fff573e:	6d47      	mov      	r5, r1
    uint32_t cs = spif_lock();
1fff5740:	e3fffeca 	bsr      	0x1fff54d4	// 1fff54d4 <spif_lock>
    uint32_t cb = AP_PCR->CACHE_BYPASS;
1fff5744:	3380      	movi      	r3, 128
1fff5746:	4377      	lsli      	r3, r3, 23
1fff5748:	932a      	ld.w      	r1, (r3, 0x28)
    volatile uint8_t *u8_spif_addr = (volatile uint8_t *)((addr & 0x7ffff) | SPIF_ADDR_START);
1fff574a:	448d      	lsli      	r4, r4, 13
    if (cb == 0) {
1fff574c:	3940      	cmpnei      	r1, 0
    volatile uint8_t *u8_spif_addr = (volatile uint8_t *)((addr & 0x7ffff) | SPIF_ADDR_START);
1fff574e:	4c8d      	lsri      	r4, r4, 13
1fff5750:	3cb8      	bseti      	r4, 24
1fff5752:	3cbc      	bseti      	r4, 28
    if (cb == 0) {
1fff5754:	080e      	bt      	0x1fff5770	// 1fff5770 <phy_ReadFlash+0x38>
    __ASM volatile("mfcr %0, psr" : "=r"(result));
1fff5756:	c0006022 	mfcr      	r2, cr<0, 0>
    __ASM volatile("psrclr ie");
1fff575a:	c0807020 	psrclr      	ie
        HAL_CACHE_ENTER_BYPASS_SECTION();
1fff575e:	10d5      	lrw      	r6, 0x4000c000	// 1fff57b0 <phy_ReadFlash+0x78>
1fff5760:	3702      	movi      	r7, 2
1fff5762:	b6e0      	st.w      	r7, (r6, 0x0)
1fff5764:	3602      	movi      	r6, 2
1fff5766:	b3c9      	st.w      	r6, (r3, 0x24)
1fff5768:	3601      	movi      	r6, 1
1fff576a:	b3ca      	st.w      	r6, (r3, 0x28)
    __ASM volatile("mtcr %0, psr" : : "r"(psr));
1fff576c:	c0026420 	mtcr      	r2, cr<0, 0>
{
1fff5770:	3300      	movi      	r3, 0
1fff5772:	5b50      	addu      	r2, r3, r4
        data[i] = u8_spif_addr[i];
1fff5774:	82c0      	ld.b      	r6, (r2, 0x0)
1fff5776:	6c8f      	mov      	r2, r3
    for (int i = 0; i < size; i++) {
1fff5778:	2300      	addi      	r3, 1
1fff577a:	3b44      	cmpnei      	r3, 4
        data[i] = u8_spif_addr[i];
1fff577c:	60b8      	addu      	r2, r14
1fff577e:	a2c0      	st.b      	r6, (r2, 0x0)
    for (int i = 0; i < size; i++) {
1fff5780:	0bf9      	bt      	0x1fff5772	// 1fff5772 <phy_ReadFlash+0x3a>
    if (cb == 0) {
1fff5782:	3940      	cmpnei      	r1, 0
1fff5784:	080f      	bt      	0x1fff57a2	// 1fff57a2 <phy_ReadFlash+0x6a>
    __ASM volatile("mfcr %0, psr" : "=r"(result));
1fff5786:	c0006022 	mfcr      	r2, cr<0, 0>
    __ASM volatile("psrclr ie");
1fff578a:	c0807020 	psrclr      	ie
        HAL_CACHE_EXIT_BYPASS_SECTION();
1fff578e:	1069      	lrw      	r3, 0x4000c000	// 1fff57b0 <phy_ReadFlash+0x78>
1fff5790:	b320      	st.w      	r1, (r3, 0x0)
1fff5792:	3103      	movi      	r1, 3
1fff5794:	3380      	movi      	r3, 128
1fff5796:	4377      	lsli      	r3, r3, 23
1fff5798:	b329      	st.w      	r1, (r3, 0x24)
1fff579a:	3100      	movi      	r1, 0
1fff579c:	b32a      	st.w      	r1, (r3, 0x28)
    __ASM volatile("mtcr %0, psr" : : "r"(psr));
1fff579e:	c0026420 	mtcr      	r2, cr<0, 0>
    spif_unlock(cs);
1fff57a2:	e3fffead 	bsr      	0x1fff54fc	// 1fff54fc <spif_unlock>
    uint32_t temp;
    uint32_t ret;
    addr &= 0x00ffffff;

    ret = hal_flash_read(addr, (uint8_t *)&temp, 4);
    *value = temp;
1fff57a6:	9860      	ld.w      	r3, (r14, 0x0)

    return ret;
}
1fff57a8:	3000      	movi      	r0, 0
    *value = temp;
1fff57aa:	b560      	st.w      	r3, (r5, 0x0)
}
1fff57ac:	1401      	addi      	r14, r14, 4
1fff57ae:	1494      	pop      	r4-r7, r15
1fff57b0:	4000c000 	.long	0x4000c000

1fff57b4 <drv_reboot>:
#include <drv/wdt.h>
#include <mcu_phy_bumbee.h>
extern size_t cpu_intrpt_save(void);

__attribute__((section(".__sram.code.drv_reboot"))) void drv_reboot(int cmd)
{
1fff57b4:	1421      	subi      	r14, r14, 4
    __ASM volatile("mfcr %0, psr" : "=r"(result));
1fff57b6:	c0006023 	mfcr      	r3, cr<0, 0>
    __ASM volatile("psrclr ie");
1fff57ba:	c0807020 	psrclr      	ie
    csi_irq_save();


    volatile int dly = 100;
1fff57be:	3364      	movi      	r3, 100

    //cache rst
    AP_PCR->CACHE_RST = 0;
1fff57c0:	3200      	movi      	r2, 0
    volatile int dly = 100;
1fff57c2:	b860      	st.w      	r3, (r14, 0x0)
    AP_PCR->CACHE_RST = 0;
1fff57c4:	3380      	movi      	r3, 128
1fff57c6:	4377      	lsli      	r3, r3, 23
1fff57c8:	b349      	st.w      	r2, (r3, 0x24)

    while (dly--) {};
1fff57ca:	9840      	ld.w      	r2, (r14, 0x0)
1fff57cc:	5a23      	subi      	r1, r2, 1
1fff57ce:	3a40      	cmpnei      	r2, 0
1fff57d0:	b820      	st.w      	r1, (r14, 0x0)
1fff57d2:	0bfc      	bt      	0x1fff57ca	// 1fff57ca <drv_reboot+0x16>

    AP_PCR->CACHE_RST = 0x03;
1fff57d4:	3203      	movi      	r2, 3

    //cache flush tag
    AP_CACHE->CTRL0 = 0x03;
1fff57d6:	3103      	movi      	r1, 3
    AP_PCR->CACHE_RST = 0x03;
1fff57d8:	b349      	st.w      	r2, (r3, 0x24)
    AP_CACHE->CTRL0 = 0x03;
1fff57da:	1044      	lrw      	r2, 0x4000c000	// 1fff57e8 <drv_reboot+0x34>
1fff57dc:	b220      	st.w      	r1, (r2, 0x0)

    //cache enable
    AP_PCR->CACHE_BYPASS = 1;
1fff57de:	3201      	movi      	r2, 1
1fff57e0:	b34a      	st.w      	r2, (r3, 0x28)

    *(volatile uint32_t *) 0x40000004 = 0x00;
1fff57e2:	3200      	movi      	r2, 0
1fff57e4:	b341      	st.w      	r2, (r3, 0x4)
1fff57e6:	0400      	br      	0x1fff57e6	// 1fff57e6 <drv_reboot+0x32>
1fff57e8:	4000c000 	.long	0x4000c000

1fff57ec <hal_cache_init>:
{
1fff57ec:	14d0      	push      	r15
1fff57ee:	1422      	subi      	r14, r14, 8
    volatile int dly = 100;
1fff57f0:	3364      	movi      	r3, 100
    hal_clk_gate_enable(MOD_HCLK_CACHE);
1fff57f2:	3041      	movi      	r0, 65
    volatile int dly = 100;
1fff57f4:	b861      	st.w      	r3, (r14, 0x4)
    hal_clk_gate_enable(MOD_HCLK_CACHE);
1fff57f6:	e3fffac0 	bsr      	0x1fff4d76	// 1fff4d76 <hal_clk_gate_enable>
    hal_clk_gate_enable(MOD_PCLK_CACHE);
1fff57fa:	3040      	movi      	r0, 64
1fff57fc:	e3fffabd 	bsr      	0x1fff4d76	// 1fff4d76 <hal_clk_gate_enable>
    AP_PCR->CACHE_RST = 0x00;
1fff5800:	3380      	movi      	r3, 128
1fff5802:	3200      	movi      	r2, 0
1fff5804:	4377      	lsli      	r3, r3, 23
1fff5806:	b349      	st.w      	r2, (r3, 0x24)
    while (dly--) {};
1fff5808:	9841      	ld.w      	r2, (r14, 0x4)
1fff580a:	5a23      	subi      	r1, r2, 1
1fff580c:	3a40      	cmpnei      	r2, 0
1fff580e:	b821      	st.w      	r1, (r14, 0x4)
1fff5810:	0bfc      	bt      	0x1fff5808	// 1fff5808 <hal_cache_init+0x1c>
    AP_PCR->CACHE_RST = 0x03;
1fff5812:	3203      	movi      	r2, 3
    AP_CACHE->CTRL0 = 0x01;
1fff5814:	3101      	movi      	r1, 1
    AP_PCR->CACHE_RST = 0x03;
1fff5816:	b349      	st.w      	r2, (r3, 0x24)
    AP_CACHE->CTRL0 = 0x01;
1fff5818:	104a      	lrw      	r2, 0x4000c000	// 1fff5840 <hal_cache_init+0x54>
1fff581a:	b220      	st.w      	r1, (r2, 0x0)
    AP_PCR->CACHE_BYPASS = 0;
1fff581c:	3200      	movi      	r2, 0
1fff581e:	b34a      	st.w      	r2, (r3, 0x28)
    spif_config(g_spif_ref_clk, 0x1, 0x801003b, 0, 0);
1fff5820:	1049      	lrw      	r2, 0x801003b	// 1fff5844 <hal_cache_init+0x58>
1fff5822:	106a      	lrw      	r3, 0x1fffa59c	// 1fff5848 <hal_cache_init+0x5c>
1fff5824:	9300      	ld.w      	r0, (r3, 0x0)
1fff5826:	3300      	movi      	r3, 0
1fff5828:	b860      	st.w      	r3, (r14, 0x0)
1fff582a:	e000281b 	bsr      	0x1fffa860	// 1fffa860 <check_before_startup+0x188>
    AP_SPIF->low_wr_protection = 0;
1fff582e:	1068      	lrw      	r3, 0x4000c800	// 1fff584c <hal_cache_init+0x60>
1fff5830:	3200      	movi      	r2, 0
1fff5832:	b354      	st.w      	r2, (r3, 0x50)
    AP_SPIF->up_wr_protection = 0x10;
1fff5834:	3210      	movi      	r2, 16
1fff5836:	b355      	st.w      	r2, (r3, 0x54)
    AP_SPIF->wr_protection = 0x2;
1fff5838:	3202      	movi      	r2, 2
1fff583a:	b356      	st.w      	r2, (r3, 0x58)
}
1fff583c:	1402      	addi      	r14, r14, 8
1fff583e:	1490      	pop      	r15
1fff5840:	4000c000 	.long	0x4000c000
1fff5844:	0801003b 	.long	0x0801003b
1fff5848:	1fffa59c 	.long	0x1fffa59c
1fff584c:	4000c800 	.long	0x4000c800

1fff5850 <read_LL_remainder_time1>:
    currentCount = AP_TIM1->CurrentCount;
1fff5850:	1069      	lrw      	r3, 0x40001000	// 1fff5874 <read_LL_remainder_time1+0x24>
1fff5852:	9301      	ld.w      	r0, (r3, 0x4)
    if ((currentCount < 6) || NVIC_GetPendingIRQ(TIM1_IRQn)) {
1fff5854:	3805      	cmphsi      	r0, 6
1fff5856:	0c0d      	bf      	0x1fff5870	// 1fff5870 <read_LL_remainder_time1+0x20>
    return ((uint32_t)(((VIC->ISPR[_IR_IDX(IRQn)] & (1UL << (((uint32_t)(int32_t)IRQn % 32) & 0x7FUL))) != 0UL) ? 1UL : 0UL));
1fff5858:	1068      	lrw      	r3, 0xe000e100	// 1fff5878 <read_LL_remainder_time1+0x28>
        return (currentCount >> 2);
1fff585a:	4802      	lsri      	r0, r0, 2
1fff585c:	d8632040 	ld.w      	r3, (r3, 0x100)
1fff5860:	4b74      	lsri      	r3, r3, 20
1fff5862:	e4632001 	andi      	r3, r3, 1
1fff5866:	3b40      	cmpnei      	r3, 0
1fff5868:	3300      	movi      	r3, 0
1fff586a:	c4030c40 	inct      	r0, r3, 0
}
1fff586e:	783c      	jmp      	r15
        return 0;
1fff5870:	3000      	movi      	r0, 0
1fff5872:	07fe      	br      	0x1fff586e	// 1fff586e <read_LL_remainder_time1+0x1e>
1fff5874:	40001000 	.long	0x40001000
1fff5878:	e000e100 	.long	0xe000e100

1fff587c <ll_hw_read_rfifo1>:
{
1fff587c:	14d4      	push      	r4-r7, r15
1fff587e:	1424      	subi      	r14, r14, 16
1fff5880:	6d03      	mov      	r4, r0
1fff5882:	6d47      	mov      	r5, r1
1fff5884:	6d8b      	mov      	r6, r2
1fff5886:	6dcf      	mov      	r7, r3
    ll_hw_get_rfifo_info(&rdPtr, &wrPtr, &rdDepth);
1fff5888:	1a03      	addi      	r2, r14, 12
1fff588a:	1902      	addi      	r1, r14, 8
1fff588c:	1801      	addi      	r0, r14, 4
1fff588e:	e0002903 	bsr      	0x1fffaa94	// 1fffaa94 <check_before_startup+0x3bc>
    if (rdDepth > 0) {
1fff5892:	9843      	ld.w      	r2, (r14, 0xc)
1fff5894:	3a20      	cmplti      	r2, 1
1fff5896:	0820      	bt      	0x1fff58d6	// 1fff58d6 <ll_hw_read_rfifo1+0x5a>
        *p_rxPkt++ = *(volatile uint32_t *)(LL_HW_RFIFO);
1fff5898:	1075      	lrw      	r3, 0x40031c00	// 1fff58ec <ll_hw_read_rfifo1+0x70>
1fff589a:	9320      	ld.w      	r1, (r3, 0x0)
1fff589c:	b420      	st.w      	r1, (r4, 0x0)
        blen    = rxPkt[1] + sp;                    //get the byte length for header
1fff589e:	c4017081 	xtrb2      	r1, r1
1fff58a2:	b820      	st.w      	r1, (r14, 0x0)
        wlen    = 1 + ((blen + 2 + 3 - 1) >> 2); //+2 for Header, +3 for crc
1fff58a4:	590e      	addi      	r0, r1, 4
1fff58a6:	5002      	asri      	r0, r0, 2
        if ((wlen + 2) > rdDepth) {
1fff58a8:	5826      	addi      	r1, r0, 2
1fff58aa:	6485      	cmplt      	r1, r2
1fff58ac:	0c11      	bf      	0x1fff58ce	// 1fff58ce <ll_hw_read_rfifo1+0x52>
        wlen    = 1 + ((blen + 2 + 3 - 1) >> 2); //+2 for Header, +3 for crc
1fff58ae:	2000      	addi      	r0, 1
        while (p_rxPkt < (uint32_t *)rxPkt + wlen) {
1fff58b0:	4042      	lsli      	r2, r0, 2
1fff58b2:	6090      	addu      	r2, r4
1fff58b4:	2403      	addi      	r4, 4
1fff58b6:	6490      	cmphs      	r4, r2
1fff58b8:	0c17      	bf      	0x1fff58e6	// 1fff58e6 <ll_hw_read_rfifo1+0x6a>
        *pktFoot0   = *(volatile uint32_t *)(LL_HW_RFIFO);
1fff58ba:	9340      	ld.w      	r2, (r3, 0x0)
        return wlen;
1fff58bc:	7400      	zextb      	r0, r0
        *pktFoot0   = *(volatile uint32_t *)(LL_HW_RFIFO);
1fff58be:	b640      	st.w      	r2, (r6, 0x0)
        *pktFoot1   = *(volatile uint32_t *)(LL_HW_RFIFO);
1fff58c0:	9360      	ld.w      	r3, (r3, 0x0)
1fff58c2:	b760      	st.w      	r3, (r7, 0x0)
        *pktLen     = blen + 2;
1fff58c4:	9860      	ld.w      	r3, (r14, 0x0)
1fff58c6:	2301      	addi      	r3, 2
1fff58c8:	ad60      	st.h      	r3, (r5, 0x0)
}
1fff58ca:	1404      	addi      	r14, r14, 16
1fff58cc:	1494      	pop      	r4-r7, r15
            g_pmCounters.ll_rfifo_read_err++;
1fff58ce:	1049      	lrw      	r2, 0x1fff12e0	// 1fff58f0 <ll_hw_read_rfifo1+0x74>
1fff58d0:	9279      	ld.w      	r3, (r2, 0x64)
1fff58d2:	2300      	addi      	r3, 1
1fff58d4:	b279      	st.w      	r3, (r2, 0x64)
        rxPkt[0]  = 0;
1fff58d6:	3300      	movi      	r3, 0
        return 0;
1fff58d8:	3000      	movi      	r0, 0
        rxPkt[0]  = 0;
1fff58da:	a460      	st.b      	r3, (r4, 0x0)
        *pktFoot0 = 0;
1fff58dc:	3300      	movi      	r3, 0
1fff58de:	b660      	st.w      	r3, (r6, 0x0)
        *pktFoot1 = 0;
1fff58e0:	b760      	st.w      	r3, (r7, 0x0)
        *pktLen   = 0;
1fff58e2:	ad60      	st.h      	r3, (r5, 0x0)
        return 0;
1fff58e4:	07f3      	br      	0x1fff58ca	// 1fff58ca <ll_hw_read_rfifo1+0x4e>
            *p_rxPkt++ = *(volatile uint32_t *)(LL_HW_RFIFO);
1fff58e6:	9320      	ld.w      	r1, (r3, 0x0)
1fff58e8:	b420      	st.w      	r1, (r4, 0x0)
1fff58ea:	07e5      	br      	0x1fff58b4	// 1fff58b4 <ll_hw_read_rfifo1+0x38>
1fff58ec:	40031c00 	.long	0x40031c00
1fff58f0:	1fff12e0 	.long	0x1fff12e0

1fff58f4 <ll_hw_go1>:
{
1fff58f4:	14d4      	push      	r4-r7, r15
    if (llWaitingIrq == TRUE) {
1fff58f6:	1363      	lrw      	r3, 0x1fff0df8	// 1fff5a80 <ll_hw_go1+0x18c>
1fff58f8:	9360      	ld.w      	r3, (r3, 0x0)
1fff58fa:	3b41      	cmpnei      	r3, 1
1fff58fc:	0805      	bt      	0x1fff5906	// 1fff5906 <ll_hw_go1+0x12>
        g_pmCounters.ll_trigger_err++;
1fff58fe:	1342      	lrw      	r2, 0x1fff12e0	// 1fff5a84 <ll_hw_go1+0x190>
1fff5900:	9276      	ld.w      	r3, (r2, 0x58)
1fff5902:	2300      	addi      	r3, 1
1fff5904:	b276      	st.w      	r3, (r2, 0x58)
    if (llTaskState == LL_TASK_EXTENDED_SCAN) {
1fff5906:	1361      	lrw      	r3, 0x1fff15d0	// 1fff5a88 <ll_hw_go1+0x194>
1fff5908:	8360      	ld.b      	r3, (r3, 0x0)
1fff590a:	3b43      	cmpnei      	r3, 3
1fff590c:	080a      	bt      	0x1fff5920	// 1fff5920 <ll_hw_go1+0x2c>
        if ((extScanInfo.current_chn < LL_SCAN_ADV_CHAN_37)) {
1fff590e:	1360      	lrw      	r3, 0x1fff1500	// 1fff5a8c <ll_hw_go1+0x198>
1fff5910:	837e      	ld.b      	r3, (r3, 0x1e)
1fff5912:	eb030024 	cmphsi      	r3, 37
1fff5916:	088c      	bt      	0x1fff5a2e	// 1fff5a2e <ll_hw_go1+0x13a>
            ll_hw_set_rx_timeout(5000);
1fff5918:	ea001388 	movi      	r0, 5000
            ll_hw_set_rx_timeout(1000);
1fff591c:	e0002790 	bsr      	0x1fffa83c	// 1fffa83c <check_before_startup+0x164>
    g_t_llhwgo = read_current_fine_time();
1fff5920:	e00028fc 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
1fff5924:	127b      	lrw      	r3, 0x1fffb8c0	// 1fff5a90 <ll_hw_go1+0x19c>
    *(volatile uint32_t *)(LL_HW_BASE + 0x14) = LL_HW_IRQ_MASK; //clr  irq status
1fff5926:	ea023fff 	movi      	r2, 16383
    g_t_llhwgo = read_current_fine_time();
1fff592a:	b300      	st.w      	r0, (r3, 0x0)
    *(volatile uint32_t *)(LL_HW_BASE + 0x14) = LL_HW_IRQ_MASK; //clr  irq status
1fff592c:	127a      	lrw      	r3, 0x40031000	// 1fff5a94 <ll_hw_go1+0x1a0>
    if (!g_same_rf_channel_flag) {
1fff592e:	121b      	lrw      	r0, 0x1fff0e2c	// 1fff5a98 <ll_hw_go1+0x1a4>
    *(volatile uint32_t *)(LL_HW_BASE + 0x14) = LL_HW_IRQ_MASK; //clr  irq status
1fff5930:	b345      	st.w      	r2, (r3, 0x14)
    *(volatile uint32_t *)(LL_HW_BASE + 0x0c) = 0x0001;         //mask irq :only use mode done
1fff5932:	3201      	movi      	r2, 1
1fff5934:	b343      	st.w      	r2, (r3, 0xc)
    *(volatile uint32_t *)(LL_HW_BASE + 0x00) = 0x0001;         //trig
1fff5936:	b340      	st.w      	r2, (r3, 0x0)
    uint8_t rfChnIdx = PHY_REG_RD(0x400300b4) & 0xff;
1fff5938:	1259      	lrw      	r2, 0x40030080	// 1fff5a9c <ll_hw_go1+0x1a8>
1fff593a:	926d      	ld.w      	r3, (r2, 0x34)
    if (!g_same_rf_channel_flag) {
1fff593c:	8000      	ld.b      	r0, (r0, 0x0)
    uint8_t rfChnIdx = PHY_REG_RD(0x400300b4) & 0xff;
1fff593e:	744c      	zextb      	r1, r3
    if (!g_same_rf_channel_flag) {
1fff5940:	3840      	cmpnei      	r0, 0
1fff5942:	0811      	bt      	0x1fff5964	// 1fff5964 <ll_hw_go1+0x70>
        if (g_rfPhyFreqOffSet >= 0) {
1fff5944:	1297      	lrw      	r4, 0x1fff0ea6	// 1fff5aa0 <ll_hw_go1+0x1ac>
1fff5946:	e40320ff 	andi      	r0, r3, 255
1fff594a:	84a0      	ld.b      	r5, (r4, 0x0)
1fff594c:	7556      	sextb      	r5, r5
            PHY_REG_WT(0x400300b4, (g_rfPhyFreqOffSet << 16) + (g_rfPhyFreqOffSet << 8) + rfChnIdx);
1fff594e:	8460      	ld.b      	r3, (r4, 0x0)
        if (g_rfPhyFreqOffSet >= 0) {
1fff5950:	3ddf      	btsti      	r5, 31
            PHY_REG_WT(0x400300b4, (g_rfPhyFreqOffSet << 16) + (g_rfPhyFreqOffSet << 8) + rfChnIdx);
1fff5952:	8480      	ld.b      	r4, (r4, 0x0)
1fff5954:	74ce      	sextb      	r3, r3
1fff5956:	7512      	sextb      	r4, r4
        if (g_rfPhyFreqOffSet >= 0) {
1fff5958:	086e      	bt      	0x1fff5a34	// 1fff5a34 <ll_hw_go1+0x140>
            PHY_REG_WT(0x400300b4, (g_rfPhyFreqOffSet << 16) + (g_rfPhyFreqOffSet << 8) + rfChnIdx);
1fff595a:	4370      	lsli      	r3, r3, 16
1fff595c:	4488      	lsli      	r4, r4, 8
1fff595e:	60d0      	addu      	r3, r4
            PHY_REG_WT(0x400300b4, ((255 + g_rfPhyFreqOffSet) << 16) + ((255 + g_rfPhyFreqOffSet) << 8) + (rfChnIdx - 1));
1fff5960:	60c0      	addu      	r3, r0
1fff5962:	b26d      	st.w      	r3, (r2, 0x34)
1fff5964:	eb010050 	cmphsi      	r1, 81
1fff5968:	6c07      	mov      	r0, r1
1fff596a:	0c02      	bf      	0x1fff596e	// 1fff596e <ll_hw_go1+0x7a>
1fff596c:	3050      	movi      	r0, 80
1fff596e:	74c0      	zextb      	r3, r0
1fff5970:	3b01      	cmphsi      	r3, 2
1fff5972:	0802      	bt      	0x1fff5976	// 1fff5976 <ll_hw_go1+0x82>
1fff5974:	3002      	movi      	r0, 2
    if (g_rfPhyPktFmt == PKT_FMT_BLE2M) {
1fff5976:	128c      	lrw      	r4, 0x1fff08ae	// 1fff5aa4 <ll_hw_go1+0x1b0>
        subWriteReg(0x40030094, 7, 0, RF_PHY_TPCAL_CALC(g_rfPhyTpCal0_2Mbps, g_rfPhyTpCal1_2Mbps, (rfChnIdx - 2) >> 1));
1fff5978:	3200      	movi      	r2, 0
    if (g_rfPhyPktFmt == PKT_FMT_BLE2M) {
1fff597a:	8460      	ld.b      	r3, (r4, 0x0)
        subWriteReg(0x40030094, 7, 0, RF_PHY_TPCAL_CALC(g_rfPhyTpCal0_2Mbps, g_rfPhyTpCal1_2Mbps, (rfChnIdx - 2) >> 1));
1fff597c:	2aff      	subi      	r2, 256
    if (g_rfPhyPktFmt == PKT_FMT_BLE2M) {
1fff597e:	3b42      	cmpnei      	r3, 2
1fff5980:	1267      	lrw      	r3, 0x40030080	// 1fff5a9c <ll_hw_go1+0x1a8>
1fff5982:	7400      	zextb      	r0, r0
        subWriteReg(0x40030094, 7, 0, RF_PHY_TPCAL_CALC(g_rfPhyTpCal0_2Mbps, g_rfPhyTpCal1_2Mbps, (rfChnIdx - 2) >> 1));
1fff5984:	9365      	ld.w      	r3, (r3, 0x14)
1fff5986:	c4432021 	and      	r1, r3, r2
    if (g_rfPhyPktFmt == PKT_FMT_BLE2M) {
1fff598a:	085d      	bt      	0x1fff5a44	// 1fff5a44 <ll_hw_go1+0x150>
        subWriteReg(0x40030094, 7, 0, RF_PHY_TPCAL_CALC(g_rfPhyTpCal0_2Mbps, g_rfPhyTpCal1_2Mbps, (rfChnIdx - 2) >> 1));
1fff598c:	1247      	lrw      	r2, 0x1fff08b0	// 1fff5aa8 <ll_hw_go1+0x1b4>
1fff598e:	12c8      	lrw      	r6, 0x1fff08b1	// 1fff5aac <ll_hw_go1+0x1b8>
1fff5990:	82a0      	ld.b      	r5, (r2, 0x0)
1fff5992:	8660      	ld.b      	r3, (r6, 0x0)
1fff5994:	654c      	cmphs      	r3, r5
1fff5996:	8260      	ld.b      	r3, (r2, 0x0)
1fff5998:	0866      	bt      	0x1fff5a64	// 1fff5a64 <ll_hw_go1+0x170>
1fff599a:	82a0      	ld.b      	r5, (r2, 0x0)
1fff599c:	2801      	subi      	r0, 2
1fff599e:	5041      	asri      	r2, r0, 1
1fff59a0:	86c0      	ld.b      	r6, (r6, 0x0)
1fff59a2:	4365      	lsli      	r3, r3, 5
1fff59a4:	5d19      	subu      	r0, r5, r6
1fff59a6:	7c08      	mult      	r0, r2
1fff59a8:	60c2      	subu      	r3, r0
        subWriteReg(0x40030094, 7, 0, RF_PHY_TPCAL_CALC(g_rfPhyTpCal0, g_rfPhyTpCal1, (rfChnIdx - 2) >> 1));
1fff59aa:	230f      	addi      	r3, 16
1fff59ac:	5365      	asri      	r3, r3, 5
1fff59ae:	115c      	lrw      	r2, 0x40030080	// 1fff5a9c <ll_hw_go1+0x1a8>
1fff59b0:	6cc4      	or      	r3, r1
1fff59b2:	b265      	st.w      	r3, (r2, 0x14)
1fff59b4:	6c03      	mov      	r0, r0
    llModeLast = ll_hw_get_tr_mode();
1fff59b6:	e0002923 	bsr      	0x1fffabfc	// 1fffabfc <check_before_startup+0x524>
    if (llModeLast == LL_HW_MODE_RTLP || llModeLast == LL_HW_MODE_TRLP) {
1fff59ba:	586f      	subi      	r3, r0, 4
1fff59bc:	3b01      	cmphsi      	r3, 2
    llModeLast = ll_hw_get_tr_mode();
1fff59be:	6dc3      	mov      	r7, r0
    if (llModeLast == LL_HW_MODE_RTLP || llModeLast == LL_HW_MODE_TRLP) {
1fff59c0:	082c      	bt      	0x1fff5a18	// 1fff5a18 <ll_hw_go1+0x124>
        connPtr = &conn_param[g_ll_conn_ctx.currentConn];
1fff59c2:	11bc      	lrw      	r5, 0x1fff11c4	// 1fff5ab0 <ll_hw_go1+0x1bc>
1fff59c4:	33a1      	movi      	r3, 161
1fff59c6:	115c      	lrw      	r2, 0x1fff0dd4	// 1fff5ab4 <ll_hw_go1+0x1c0>
1fff59c8:	85c2      	ld.b      	r6, (r5, 0x2)
1fff59ca:	4362      	lsli      	r3, r3, 2
1fff59cc:	7cd8      	mult      	r3, r6
1fff59ce:	92c0      	ld.w      	r6, (r2, 0x0)
1fff59d0:	618c      	addu      	r6, r3
        if (connPtr->llRfPhyPktFmt == PKT_FMT_BLR125K || connPtr->llRfPhyPktFmt == PKT_FMT_BLR500K) {
1fff59d2:	d866020c 	ld.b      	r3, (r6, 0x20c)
1fff59d6:	2b02      	subi      	r3, 3
1fff59d8:	74cc      	zextb      	r3, r3
1fff59da:	3b01      	cmphsi      	r3, 2
1fff59dc:	0846      	bt      	0x1fff5a68	// 1fff5a68 <ll_hw_go1+0x174>
            ll_hw_set_rx_timeout(350);
1fff59de:	30af      	movi      	r0, 175
1fff59e0:	4001      	lsli      	r0, r0, 1
            ll_hw_set_rx_timeout(188);
1fff59e2:	e000272d 	bsr      	0x1fffa83c	// 1fffa83c <check_before_startup+0x164>
        if (llModeLast == LL_HW_MODE_TRLP) {
1fff59e6:	3f44      	cmpnei      	r7, 4
1fff59e8:	0818      	bt      	0x1fff5a18	// 1fff5a18 <ll_hw_go1+0x124>
            uint32_t temp = connPtr->curParam.connInterval * 625 - connPtr->llPduLen.local.MaxRxTime - pGlobal_config[LL_HW_TRLP_TO_GAP];       // 500us: margin for timer1 IRQ
1fff59ea:	1174      	lrw      	r3, 0x1fffa670	// 1fff5ab8 <ll_hw_go1+0x1c4>
1fff59ec:	ea020271 	movi      	r2, 625
1fff59f0:	9360      	ld.w      	r3, (r3, 0x0)
1fff59f2:	8e1b      	ld.h      	r0, (r6, 0x36)
1fff59f4:	7c08      	mult      	r0, r2
1fff59f6:	d84610ef 	ld.h      	r2, (r6, 0x1de)
1fff59fa:	600a      	subu      	r0, r2
1fff59fc:	d843203e 	ld.w      	r2, (r3, 0xf8)
1fff5a00:	600a      	subu      	r0, r2
            if (g_ll_conn_ctx.numLLMasterConns > 4) {
1fff5a02:	8541      	ld.b      	r2, (r5, 0x1)
1fff5a04:	3a04      	cmphsi      	r2, 5
1fff5a06:	0c33      	bf      	0x1fff5a6c	// 1fff5a6c <ll_hw_go1+0x178>
                temp = temp >> 3;
1fff5a08:	4803      	lsri      	r0, r0, 3
                                   pGlobal_config[LL_HW_TRLP_LOOP_TIMEOUT] : temp);
1fff5a0a:	d863202a 	ld.w      	r3, (r3, 0xa8)
1fff5a0e:	64c0      	cmphs      	r0, r3
1fff5a10:	c4030c40 	inct      	r0, r3, 0
            ll_hw_set_loop_timeout(temp > pGlobal_config[LL_HW_TRLP_LOOP_TIMEOUT] ?
1fff5a14:	e0002858 	bsr      	0x1fffaac4	// 1fffaac4 <check_before_startup+0x3ec>
    if (g_rfPhyPktFmt == PKT_FMT_BLE1M) {
1fff5a18:	8460      	ld.b      	r3, (r4, 0x0)
1fff5a1a:	3b41      	cmpnei      	r3, 1
1fff5a1c:	0805      	bt      	0x1fff5a26	// 1fff5a26 <ll_hw_go1+0x132>
        PHY_REG_WT(0x40030000, 0x44068001);
1fff5a1e:	1148      	lrw      	r2, 0x44068001	// 1fff5abc <ll_hw_go1+0x1c8>
1fff5a20:	ea234003 	movih      	r3, 16387
1fff5a24:	b340      	st.w      	r2, (r3, 0x0)
    scanInfo.currentBackoff = 1;
1fff5a26:	1167      	lrw      	r3, 0x1fff1494	// 1fff5ac0 <ll_hw_go1+0x1cc>
1fff5a28:	3201      	movi      	r2, 1
1fff5a2a:	ab4b      	st.h      	r2, (r3, 0x16)
}
1fff5a2c:	1494      	pop      	r4-r7, r15
            ll_hw_set_rx_timeout(1000);
1fff5a2e:	30fa      	movi      	r0, 250
1fff5a30:	4002      	lsli      	r0, r0, 2
1fff5a32:	0775      	br      	0x1fff591c	// 1fff591c <ll_hw_go1+0x28>
            PHY_REG_WT(0x400300b4, ((255 + g_rfPhyFreqOffSet) << 16) + ((255 + g_rfPhyFreqOffSet) << 8) + (rfChnIdx - 1));
1fff5a34:	35ff      	movi      	r5, 255
1fff5a36:	2800      	subi      	r0, 1
1fff5a38:	60d4      	addu      	r3, r5
1fff5a3a:	6114      	addu      	r4, r5
1fff5a3c:	4370      	lsli      	r3, r3, 16
1fff5a3e:	4488      	lsli      	r4, r4, 8
1fff5a40:	60d0      	addu      	r3, r4
1fff5a42:	078f      	br      	0x1fff5960	// 1fff5960 <ll_hw_go1+0x6c>
        subWriteReg(0x40030094, 7, 0, RF_PHY_TPCAL_CALC(g_rfPhyTpCal0, g_rfPhyTpCal1, (rfChnIdx - 2) >> 1));
1fff5a44:	1140      	lrw      	r2, 0x1fff08ad	// 1fff5ac4 <ll_hw_go1+0x1d0>
1fff5a46:	11a1      	lrw      	r5, 0x1fff08af	// 1fff5ac8 <ll_hw_go1+0x1d4>
1fff5a48:	82c0      	ld.b      	r6, (r2, 0x0)
1fff5a4a:	8560      	ld.b      	r3, (r5, 0x0)
1fff5a4c:	658c      	cmphs      	r3, r6
1fff5a4e:	8260      	ld.b      	r3, (r2, 0x0)
1fff5a50:	080a      	bt      	0x1fff5a64	// 1fff5a64 <ll_hw_go1+0x170>
1fff5a52:	2801      	subi      	r0, 2
1fff5a54:	5001      	asri      	r0, r0, 1
1fff5a56:	8240      	ld.b      	r2, (r2, 0x0)
1fff5a58:	4365      	lsli      	r3, r3, 5
1fff5a5a:	85a0      	ld.b      	r5, (r5, 0x0)
1fff5a5c:	6096      	subu      	r2, r5
1fff5a5e:	7c80      	mult      	r2, r0
1fff5a60:	60ca      	subu      	r3, r2
1fff5a62:	07a4      	br      	0x1fff59aa	// 1fff59aa <ll_hw_go1+0xb6>
1fff5a64:	74cc      	zextb      	r3, r3
1fff5a66:	07a4      	br      	0x1fff59ae	// 1fff59ae <ll_hw_go1+0xba>
            ll_hw_set_rx_timeout(188);
1fff5a68:	30bc      	movi      	r0, 188
1fff5a6a:	07bc      	br      	0x1fff59e2	// 1fff59e2 <ll_hw_go1+0xee>
            } else if (g_ll_conn_ctx.numLLMasterConns > 2) {
1fff5a6c:	3a02      	cmphsi      	r2, 3
1fff5a6e:	0c03      	bf      	0x1fff5a74	// 1fff5a74 <ll_hw_go1+0x180>
                temp = temp >> 2;
1fff5a70:	4802      	lsri      	r0, r0, 2
1fff5a72:	07cc      	br      	0x1fff5a0a	// 1fff5a0a <ll_hw_go1+0x116>
                temp = temp >> 1;
1fff5a74:	4821      	lsri      	r1, r0, 1
1fff5a76:	3a42      	cmpnei      	r2, 2
1fff5a78:	c4010c20 	incf      	r0, r1, 0
1fff5a7c:	07c7      	br      	0x1fff5a0a	// 1fff5a0a <ll_hw_go1+0x116>
1fff5a7e:	0000      	bkpt
1fff5a80:	1fff0df8 	.long	0x1fff0df8
1fff5a84:	1fff12e0 	.long	0x1fff12e0
1fff5a88:	1fff15d0 	.long	0x1fff15d0
1fff5a8c:	1fff1500 	.long	0x1fff1500
1fff5a90:	1fffb8c0 	.long	0x1fffb8c0
1fff5a94:	40031000 	.long	0x40031000
1fff5a98:	1fff0e2c 	.long	0x1fff0e2c
1fff5a9c:	40030080 	.long	0x40030080
1fff5aa0:	1fff0ea6 	.long	0x1fff0ea6
1fff5aa4:	1fff08ae 	.long	0x1fff08ae
1fff5aa8:	1fff08b0 	.long	0x1fff08b0
1fff5aac:	1fff08b1 	.long	0x1fff08b1
1fff5ab0:	1fff11c4 	.long	0x1fff11c4
1fff5ab4:	1fff0dd4 	.long	0x1fff0dd4
1fff5ab8:	1fffa670 	.long	0x1fffa670
1fff5abc:	44068001 	.long	0x44068001
1fff5ac0:	1fff1494 	.long	0x1fff1494
1fff5ac4:	1fff08ad 	.long	0x1fff08ad
1fff5ac8:	1fff08af 	.long	0x1fff08af

1fff5acc <ll_adptive_adj_next_time1>:
{
1fff5acc:	14d2      	push      	r4-r5, r15
    if (hclk_per_us_shift != 0) {
1fff5ace:	118e      	lrw      	r4, 0x1fff0818	// 1fff5b84 <ll_adptive_adj_next_time1+0xb8>
    irq_status = ll_hw_get_irq_status();
1fff5ad0:	e0002650 	bsr      	0x1fffa770	// 1fffa770 <check_before_startup+0x98>
        loop_time = ll_hw_get_loop_cycle() >> hclk_per_us_shift;      // convert to us
1fff5ad4:	e0002948 	bsr      	0x1fffad64	// 1fffad64 <check_before_startup+0x68c>
    if (hclk_per_us_shift != 0) {
1fff5ad8:	9460      	ld.w      	r3, (r4, 0x0)
1fff5ada:	3b40      	cmpnei      	r3, 0
1fff5adc:	0c3b      	bf      	0x1fff5b52	// 1fff5b52 <ll_adptive_adj_next_time1+0x86>
        anchor_point = ll_hw_get_anchor() >> hclk_per_us_shift;      // convert to us
1fff5ade:	e0002871 	bsr      	0x1fffabc0	// 1fffabc0 <check_before_startup+0x4e8>
1fff5ae2:	9460      	ld.w      	r3, (r4, 0x0)
1fff5ae4:	700d      	lsr      	r0, r3
    connPtr = &conn_param[g_ll_conn_ctx.currentConn];
1fff5ae6:	1169      	lrw      	r3, 0x1fff11c4	// 1fff5b88 <ll_adptive_adj_next_time1+0xbc>
1fff5ae8:	11a9      	lrw      	r5, 0x1fff0e1c	// 1fff5b8c <ll_adptive_adj_next_time1+0xc0>
1fff5aea:	8342      	ld.b      	r2, (r3, 0x2)
1fff5aec:	33a1      	movi      	r3, 161
1fff5aee:	4362      	lsli      	r3, r3, 2
1fff5af0:	7cc8      	mult      	r3, r2
1fff5af2:	1148      	lrw      	r2, 0x1fff0dd4	// 1fff5b90 <ll_adptive_adj_next_time1+0xc4>
1fff5af4:	1188      	lrw      	r4, 0x1fffb8c0	// 1fff5b94 <ll_adptive_adj_next_time1+0xc8>
1fff5af6:	1129      	lrw      	r1, 0x1fff0e10	// 1fff5b98 <ll_adptive_adj_next_time1+0xcc>
1fff5af8:	9240      	ld.w      	r2, (r2, 0x0)
1fff5afa:	608c      	addu      	r2, r3
    if (connPtr->rx_timeout) {
1fff5afc:	8260      	ld.b      	r3, (r2, 0x0)
1fff5afe:	3b40      	cmpnei      	r3, 0
1fff5b00:	0c33      	bf      	0x1fff5b66	// 1fff5b66 <ll_adptive_adj_next_time1+0x9a>
        connPtr->pmCounter.ll_tbd_cnt1++;
1fff5b02:	d8622091 	ld.w      	r3, (r2, 0x244)
1fff5b06:	2300      	addi      	r3, 1
        slave_conn_event_recv_delay = LL_TIME_DELTA(g_t_llhwgo, ISR_entry_time) - 270;
1fff5b08:	9400      	ld.w      	r0, (r4, 0x0)
        connPtr->pmCounter.ll_tbd_cnt1++;
1fff5b0a:	dc622091 	st.w      	r3, (r2, 0x244)
        slave_conn_event_recv_delay = LL_TIME_DELTA(g_t_llhwgo, ISR_entry_time) - 270;
1fff5b0e:	9560      	ld.w      	r3, (r5, 0x0)
1fff5b10:	640c      	cmphs      	r3, r0
1fff5b12:	9400      	ld.w      	r0, (r4, 0x0)
1fff5b14:	0c26      	bf      	0x1fff5b60	// 1fff5b60 <ll_adptive_adj_next_time1+0x94>
1fff5b16:	e463110d 	subi      	r3, r3, 270
        slave_conn_event_recv_delay = LL_TIME_DELTA(g_t_llhwgo, ISR_entry_time) - anchor_point;
1fff5b1a:	60c2      	subu      	r3, r0
1fff5b1c:	b160      	st.w      	r3, (r1, 0x0)
    slave_conn_event_recv_delay += (connPtr->curParam.connInterval >> 2);
1fff5b1e:	8a1b      	ld.h      	r0, (r2, 0x36)
    slave_conn_event_recv_delay -= 370;
1fff5b20:	9160      	ld.w      	r3, (r1, 0x0)
    slave_conn_event_recv_delay += (connPtr->curParam.connInterval >> 2);
1fff5b22:	4802      	lsri      	r0, r0, 2
    slave_conn_event_recv_delay -= 370;
1fff5b24:	e4631171 	subi      	r3, r3, 370
    slave_conn_event_recv_delay += (connPtr->curParam.connInterval >> 2);
1fff5b28:	60c0      	addu      	r3, r0
    slave_conn_event_recv_delay += pGlobal_config[SLAVE_CONN_DELAY];
1fff5b2a:	101d      	lrw      	r0, 0x1fffa670	// 1fff5b9c <ll_adptive_adj_next_time1+0xd0>
1fff5b2c:	9000      	ld.w      	r0, (r0, 0x0)
1fff5b2e:	9003      	ld.w      	r0, (r0, 0xc)
1fff5b30:	60c0      	addu      	r3, r0
    if (connPtr->firstPacket) {
1fff5b32:	8205      	ld.b      	r0, (r2, 0x5)
    slave_conn_event_recv_delay += pGlobal_config[SLAVE_CONN_DELAY];
1fff5b34:	b160      	st.w      	r3, (r1, 0x0)
    if (connPtr->firstPacket) {
1fff5b36:	3840      	cmpnei      	r0, 0
1fff5b38:	0c04      	bf      	0x1fff5b40	// 1fff5b40 <ll_adptive_adj_next_time1+0x74>
        slave_conn_event_recv_delay += 500;
1fff5b3a:	e46301f3 	addi      	r3, r3, 500
1fff5b3e:	b160      	st.w      	r3, (r1, 0x0)
    if (1 == connPtr->pmCounter.ll_tbd_cnt1) {
1fff5b40:	d8622091 	ld.w      	r3, (r2, 0x244)
1fff5b44:	3b41      	cmpnei      	r3, 1
1fff5b46:	0805      	bt      	0x1fff5b50	// 1fff5b50 <ll_adptive_adj_next_time1+0x84>
        slave_conn_event_recv_delay += 1150;
1fff5b48:	9160      	ld.w      	r3, (r1, 0x0)
1fff5b4a:	e463047d 	addi      	r3, r3, 1150
1fff5b4e:	b160      	st.w      	r3, (r1, 0x0)
}
1fff5b50:	1492      	pop      	r4-r5, r15
        anchor_point = ll_hw_get_anchor() / hclk_per_us;      // convert to us
1fff5b52:	e0002837 	bsr      	0x1fffabc0	// 1fffabc0 <check_before_startup+0x4e8>
1fff5b56:	1073      	lrw      	r3, 0x1fff0814	// 1fff5ba0 <ll_adptive_adj_next_time1+0xd4>
1fff5b58:	9320      	ld.w      	r1, (r3, 0x0)
1fff5b5a:	e0002797 	bsr      	0x1fffaa88	// 1fffaa88 <check_before_startup+0x3b0>
1fff5b5e:	07c4      	br      	0x1fff5ae6	// 1fff5ae6 <ll_adptive_adj_next_time1+0x1a>
        slave_conn_event_recv_delay = LL_TIME_DELTA(g_t_llhwgo, ISR_entry_time) - 270;
1fff5b60:	1091      	lrw      	r4, 0x3ffef1	// 1fff5ba4 <ll_adptive_adj_next_time1+0xd8>
1fff5b62:	60d0      	addu      	r3, r4
1fff5b64:	07db      	br      	0x1fff5b1a	// 1fff5b1a <ll_adptive_adj_next_time1+0x4e>
        connPtr->pmCounter.ll_tbd_cnt1 = 0;
1fff5b66:	3300      	movi      	r3, 0
1fff5b68:	dc622091 	st.w      	r3, (r2, 0x244)
        slave_conn_event_recv_delay = LL_TIME_DELTA(g_t_llhwgo, ISR_entry_time) - anchor_point;
1fff5b6c:	9560      	ld.w      	r3, (r5, 0x0)
1fff5b6e:	94a0      	ld.w      	r5, (r4, 0x0)
1fff5b70:	9480      	ld.w      	r4, (r4, 0x0)
1fff5b72:	654c      	cmphs      	r3, r5
1fff5b74:	0c03      	bf      	0x1fff5b7a	// 1fff5b7a <ll_adptive_adj_next_time1+0xae>
1fff5b76:	60d2      	subu      	r3, r4
1fff5b78:	07d1      	br      	0x1fff5b1a	// 1fff5b1a <ll_adptive_adj_next_time1+0x4e>
1fff5b7a:	c6a05025 	bmaski      	r5, 22
1fff5b7e:	60d4      	addu      	r3, r5
1fff5b80:	07fb      	br      	0x1fff5b76	// 1fff5b76 <ll_adptive_adj_next_time1+0xaa>
1fff5b82:	0000      	bkpt
1fff5b84:	1fff0818 	.long	0x1fff0818
1fff5b88:	1fff11c4 	.long	0x1fff11c4
1fff5b8c:	1fff0e1c 	.long	0x1fff0e1c
1fff5b90:	1fff0dd4 	.long	0x1fff0dd4
1fff5b94:	1fffb8c0 	.long	0x1fffb8c0
1fff5b98:	1fff0e10 	.long	0x1fff0e10
1fff5b9c:	1fffa670 	.long	0x1fffa670
1fff5ba0:	1fff0814 	.long	0x1fff0814
1fff5ba4:	003ffef1 	.long	0x003ffef1

1fff5ba8 <osal_pwrmgr_powerconserve1>:
}
1fff5ba8:	783c      	jmp      	r15
	...

1fff5bac <LL_TxData1>:
{
1fff5bac:	14d2      	push      	r4-r5, r15
1fff5bae:	6d03      	mov      	r4, r0
    if ((pBuf == NULL) || (pktLen > connPtr->llPduLen.local.MaxTxOctets/*LL_MAX_LINK_DATA_LEN*/) ||
1fff5bb0:	3940      	cmpnei      	r1, 0
1fff5bb2:	0c2d      	bf      	0x1fff5c0c	// 1fff5c0c <LL_TxData1+0x60>
    connPtr = &conn_param[connId];
1fff5bb4:	1018      	lrw      	r0, 0x1fff0dd4	// 1fff5c14 <LL_TxData1+0x68>
1fff5bb6:	90a0      	ld.w      	r5, (r0, 0x0)
    if ((pBuf == NULL) || (pktLen > connPtr->llPduLen.local.MaxTxOctets/*LL_MAX_LINK_DATA_LEN*/) ||
1fff5bb8:	30a1      	movi      	r0, 161
1fff5bba:	4002      	lsli      	r0, r0, 2
1fff5bbc:	7c10      	mult      	r0, r4
1fff5bbe:	6014      	addu      	r0, r5
1fff5bc0:	d80010ec 	ld.h      	r0, (r0, 0x1d8)
1fff5bc4:	6480      	cmphs      	r0, r2
1fff5bc6:	0c23      	bf      	0x1fff5c0c	// 1fff5c0c <LL_TxData1+0x60>
1fff5bc8:	3b01      	cmphsi      	r3, 2
1fff5bca:	0821      	bt      	0x1fff5c0c	// 1fff5c0c <LL_TxData1+0x60>
    if (!conn_param [0].active) {
1fff5bcc:	8503      	ld.b      	r0, (r5, 0x3)
1fff5bce:	3840      	cmpnei      	r0, 0
1fff5bd0:	0c20      	bf      	0x1fff5c10	// 1fff5c10 <LL_TxData1+0x64>
    pBuf[0] = pktLen;
1fff5bd2:	5907      	subi      	r0, r1, 2
    pBuf[1] = (fragFlag == LL_DATA_FIRST_PKT_HOST_TO_CTRL) ?
1fff5bd4:	3b40      	cmpnei      	r3, 0
    pBuf[0] = pktLen;
1fff5bd6:	a040      	st.b      	r2, (r0, 0x0)
    pBuf[1] = (fragFlag == LL_DATA_FIRST_PKT_HOST_TO_CTRL) ?
1fff5bd8:	64c3      	mvcv      	r3
1fff5bda:	5943      	subi      	r2, r1, 1
1fff5bdc:	2300      	addi      	r3, 1
1fff5bde:	a260      	st.b      	r3, (r2, 0x0)
    pTxData = (txData_t *)(pBuf - sizeof(txData_t));
1fff5be0:	2905      	subi      	r1, 6
    llEnqueueDataQ(&connPtr->txDataQ, pTxData);
1fff5be2:	e405007b 	addi      	r0, r5, 124
1fff5be6:	e000286b 	bsr      	0x1fffacbc	// 1fffacbc <check_before_startup+0x5e4>
    if (!(((llState == LL_STATE_CONN_MASTER) || (llState == LL_STATE_CONN_SLAVE)) &&
1fff5bea:	106c      	lrw      	r3, 0x1fff117d	// 1fff5c18 <LL_TxData1+0x6c>
1fff5bec:	8360      	ld.b      	r3, (r3, 0x0)
1fff5bee:	2b06      	subi      	r3, 7
1fff5bf0:	74cc      	zextb      	r3, r3
1fff5bf2:	3b01      	cmphsi      	r3, 2
1fff5bf4:	080a      	bt      	0x1fff5c08	// 1fff5c08 <LL_TxData1+0x5c>
1fff5bf6:	3c40      	cmpnei      	r4, 0
1fff5bf8:	0808      	bt      	0x1fff5c08	// 1fff5c08 <LL_TxData1+0x5c>
    llProcessTxData(connPtr, LL_TX_DATA_CONTEXT_SEND_DATA);
1fff5bfa:	6c17      	mov      	r0, r5
1fff5bfc:	3100      	movi      	r1, 0
1fff5bfe:	e00027f3 	bsr      	0x1fffabe4	// 1fffabe4 <check_before_startup+0x50c>
    if (getTxBufferSize(connPtr) > 0) {
1fff5c02:	6c17      	mov      	r0, r5
1fff5c04:	e0002778 	bsr      	0x1fffaaf4	// 1fffaaf4 <check_before_startup+0x41c>
        return (LL_STATUS_SUCCESS);
1fff5c08:	3000      	movi      	r0, 0
1fff5c0a:	0402      	br      	0x1fff5c0e	// 1fff5c0e <LL_TxData1+0x62>
        return (LL_STATUS_ERROR_BAD_PARAMETER);
1fff5c0c:	3012      	movi      	r0, 18
}
1fff5c0e:	1492      	pop      	r4-r5, r15
        return (LL_STATUS_ERROR_INACTIVE_CONNECTION);
1fff5c10:	3002      	movi      	r0, 2
1fff5c12:	07fe      	br      	0x1fff5c0e	// 1fff5c0e <LL_TxData1+0x62>
1fff5c14:	1fff0dd4 	.long	0x1fff0dd4
1fff5c18:	1fff117d 	.long	0x1fff117d

1fff5c1c <llConnTerminate1>:
{
1fff5c1c:	14d1      	push      	r4, r15
1fff5c1e:	6d03      	mov      	r4, r0
    LL_DisconnectCback((uint16)connPtr->connId, reason);
1fff5c20:	8004      	ld.b      	r0, (r0, 0x4)
1fff5c22:	e00027d5 	bsr      	0x1fffabcc	// 1fffabcc <check_before_startup+0x4f4>
    if (g_ll_conn_ctx.scheduleInfo[connPtr->connId].linkRole == LL_ROLE_MASTER) {
1fff5c26:	8464      	ld.b      	r3, (r4, 0x4)
1fff5c28:	1050      	lrw      	r2, 0x1fff11c4	// 1fff5c68 <llConnTerminate1+0x4c>
1fff5c2a:	4364      	lsli      	r3, r3, 4
1fff5c2c:	60c8      	addu      	r3, r2
1fff5c2e:	8366      	ld.b      	r3, (r3, 0x6)
1fff5c30:	3b42      	cmpnei      	r3, 2
1fff5c32:	0804      	bt      	0x1fff5c3a	// 1fff5c3a <llConnTerminate1+0x1e>
        g_ll_conn_ctx.numLLMasterConns --;
1fff5c34:	8261      	ld.b      	r3, (r2, 0x1)
1fff5c36:	2b00      	subi      	r3, 1
1fff5c38:	a261      	st.b      	r3, (r2, 0x1)
    llConnCleanup(connPtr);
1fff5c3a:	6c13      	mov      	r0, r4
1fff5c3c:	e00027fe 	bsr      	0x1fffac38	// 1fffac38 <check_before_startup+0x560>
    rxFifoFlowCtrl = 0;
1fff5c40:	106b      	lrw      	r3, 0x1fff154e	// 1fff5c6c <llConnTerminate1+0x50>
1fff5c42:	3200      	movi      	r2, 0
1fff5c44:	a340      	st.b      	r2, (r3, 0x0)
    if (llSecondaryState != LL_SEC_STATE_IDLE) {
1fff5c46:	106b      	lrw      	r3, 0x1fff1184	// 1fff5c70 <llConnTerminate1+0x54>
1fff5c48:	8340      	ld.b      	r2, (r3, 0x0)
1fff5c4a:	3a40      	cmpnei      	r2, 0
1fff5c4c:	0c0c      	bf      	0x1fff5c64	// 1fff5c64 <llConnTerminate1+0x48>
        llSecondaryState = LL_SEC_STATE_IDLE;
1fff5c4e:	3200      	movi      	r2, 0
        osal_stop_timerEx(LL_TaskID, LL_EVT_SECONDARY_ADV);     // timer may be running, stop it
1fff5c50:	3180      	movi      	r1, 128
        llSecondaryState = LL_SEC_STATE_IDLE;
1fff5c52:	a340      	st.b      	r2, (r3, 0x0)
        adv_param.advMode = LL_ADV_MODE_OFF;
1fff5c54:	3200      	movi      	r2, 0
1fff5c56:	1068      	lrw      	r3, 0x1fff1528	// 1fff5c74 <llConnTerminate1+0x58>
        osal_stop_timerEx(LL_TaskID, LL_EVT_SECONDARY_ADV);     // timer may be running, stop it
1fff5c58:	4126      	lsli      	r1, r1, 6
        adv_param.advMode = LL_ADV_MODE_OFF;
1fff5c5a:	ab42      	st.h      	r2, (r3, 0x4)
        osal_stop_timerEx(LL_TaskID, LL_EVT_SECONDARY_ADV);     // timer may be running, stop it
1fff5c5c:	1067      	lrw      	r3, 0x1fff14ac	// 1fff5c78 <llConnTerminate1+0x5c>
1fff5c5e:	8300      	ld.b      	r0, (r3, 0x0)
1fff5c60:	e00026d2 	bsr      	0x1fffaa04	// 1fffaa04 <check_before_startup+0x32c>
}
1fff5c64:	1491      	pop      	r4, r15
1fff5c66:	0000      	bkpt
1fff5c68:	1fff11c4 	.long	0x1fff11c4
1fff5c6c:	1fff154e 	.long	0x1fff154e
1fff5c70:	1fff1184 	.long	0x1fff1184
1fff5c74:	1fff1528 	.long	0x1fff1528
1fff5c78:	1fff14ac 	.long	0x1fff14ac

1fff5c7c <llSecAdvAllow1>:
{
1fff5c7c:	14d3      	push      	r4-r6, r15
    __ASM volatile("mfcr %0, psr" : "=r"(result));
1fff5c7e:	c0006025 	mfcr      	r5, cr<0, 0>
    __ASM volatile("psrclr ie");
1fff5c82:	c0807020 	psrclr      	ie
    advTime = pGlobal_config[LL_NOCONN_ADV_EST_TIME];
1fff5c86:	106f      	lrw      	r3, 0x1fffa670	// 1fff5cc0 <llSecAdvAllow1+0x44>
1fff5c88:	9360      	ld.w      	r3, (r3, 0x0)
1fff5c8a:	d8832046 	ld.w      	r4, (r3, 0x118)
    margin = pGlobal_config[LL_NOCONN_ADV_MARGIN];
1fff5c8e:	d8c32047 	ld.w      	r6, (r3, 0x11c)
    remainTime = read_LL_remainder_time1();
1fff5c92:	e3fffddf 	bsr      	0x1fff5850	// 1fff5850 <read_LL_remainder_time1>
    if ((remainTime > advTime + margin)
1fff5c96:	6118      	addu      	r4, r6
1fff5c98:	6410      	cmphs      	r4, r0
1fff5c9a:	0805      	bt      	0x1fff5ca4	// 1fff5ca4 <llSecAdvAllow1+0x28>
        && !llWaitingIrq) {
1fff5c9c:	106a      	lrw      	r3, 0x1fff0df8	// 1fff5cc4 <llSecAdvAllow1+0x48>
1fff5c9e:	9360      	ld.w      	r3, (r3, 0x0)
1fff5ca0:	3b40      	cmpnei      	r3, 0
1fff5ca2:	0c0c      	bf      	0x1fff5cba	// 1fff5cba <llSecAdvAllow1+0x3e>
        llSecondaryState = LL_SEC_STATE_ADV_PENDING;
1fff5ca4:	1069      	lrw      	r3, 0x1fff1184	// 1fff5cc8 <llSecAdvAllow1+0x4c>
1fff5ca6:	3204      	movi      	r2, 4
    uint8 ret = FALSE;
1fff5ca8:	3000      	movi      	r0, 0
        llSecondaryState = LL_SEC_STATE_ADV_PENDING;
1fff5caa:	a340      	st.b      	r2, (r3, 0x0)
        g_pmCounters.ll_conn_adv_pending_cnt ++;
1fff5cac:	1048      	lrw      	r2, 0x1fff12e0	// 1fff5ccc <llSecAdvAllow1+0x50>
1fff5cae:	9266      	ld.w      	r3, (r2, 0x18)
1fff5cb0:	2300      	addi      	r3, 1
1fff5cb2:	b266      	st.w      	r3, (r2, 0x18)
    __ASM volatile("mtcr %0, psr" : : "r"(psr));
1fff5cb4:	c0056420 	mtcr      	r5, cr<0, 0>
}
1fff5cb8:	1493      	pop      	r4-r6, r15
        ret = TRUE;
1fff5cba:	3001      	movi      	r0, 1
1fff5cbc:	07fc      	br      	0x1fff5cb4	// 1fff5cb4 <llSecAdvAllow1+0x38>
1fff5cbe:	0000      	bkpt
1fff5cc0:	1fffa670 	.long	0x1fffa670
1fff5cc4:	1fff0df8 	.long	0x1fff0df8
1fff5cc8:	1fff1184 	.long	0x1fff1184
1fff5ccc:	1fff12e0 	.long	0x1fff12e0

1fff5cd0 <llCalcMaxScanTime1>:
{
1fff5cd0:	14d3      	push      	r4-r6, r15
    margin = pGlobal_config[LL_SEC_SCAN_MARGIN];
1fff5cd2:	10cf      	lrw      	r6, 0x1fffa670	// 1fff5d0c <llCalcMaxScanTime1+0x3c>
1fff5cd4:	9660      	ld.w      	r3, (r6, 0x0)
1fff5cd6:	d8832048 	ld.w      	r4, (r3, 0x120)
    __ASM volatile("mfcr %0, psr" : "=r"(result));
1fff5cda:	c0006025 	mfcr      	r5, cr<0, 0>
    __ASM volatile("psrclr ie");
1fff5cde:	c0807020 	psrclr      	ie
    remainTime = read_LL_remainder_time1();
1fff5ce2:	e3fffdb7 	bsr      	0x1fff5850	// 1fff5850 <read_LL_remainder_time1>
    if (remainTime > margin + pGlobal_config[LL_MIN_SCAN_TIME]
1fff5ce6:	9660      	ld.w      	r3, (r6, 0x0)
1fff5ce8:	d8632049 	ld.w      	r3, (r3, 0x124)
1fff5cec:	60d0      	addu      	r3, r4
1fff5cee:	640c      	cmphs      	r3, r0
1fff5cf0:	080b      	bt      	0x1fff5d06	// 1fff5d06 <llCalcMaxScanTime1+0x36>
        && !llWaitingIrq) {
1fff5cf2:	1068      	lrw      	r3, 0x1fff0df8	// 1fff5d10 <llCalcMaxScanTime1+0x40>
        scanTime = remainTime - margin;
1fff5cf4:	6012      	subu      	r0, r4
        && !llWaitingIrq) {
1fff5cf6:	9360      	ld.w      	r3, (r3, 0x0)
        scanTime = remainTime - margin;
1fff5cf8:	3b40      	cmpnei      	r3, 0
1fff5cfa:	3300      	movi      	r3, 0
1fff5cfc:	c4030c40 	inct      	r0, r3, 0
    __ASM volatile("mtcr %0, psr" : : "r"(psr));
1fff5d00:	c0056420 	mtcr      	r5, cr<0, 0>
}
1fff5d04:	1493      	pop      	r4-r6, r15
    scanTime = 0;
1fff5d06:	3000      	movi      	r0, 0
1fff5d08:	07fc      	br      	0x1fff5d00	// 1fff5d00 <llCalcMaxScanTime1+0x30>
1fff5d0a:	0000      	bkpt
1fff5d0c:	1fffa670 	.long	0x1fffa670
1fff5d10:	1fff0df8 	.long	0x1fff0df8

1fff5d14 <__TIM1_IRQHandler>:
{
1fff5d14:	14d2      	push      	r4-r5, r15
    g_intrpt_nested_level[0]++;
1fff5d16:	1090      	lrw      	r4, 0x1fffd9b8	// 1fff5d54 <__TIM1_IRQHandler+0x40>
    g_tim1_enter = read_current_fine_time();
1fff5d18:	e0002700 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
1fff5d1c:	106f      	lrw      	r3, 0x1fffb8c4	// 1fff5d58 <__TIM1_IRQHandler+0x44>
    g_tim1_count++;
1fff5d1e:	10b0      	lrw      	r5, 0x1fffcf00	// 1fff5d5c <__TIM1_IRQHandler+0x48>
    g_tim1_enter = read_current_fine_time();
1fff5d20:	b300      	st.w      	r0, (r3, 0x0)
    size_t psr = cpu_intrpt_save();
1fff5d22:	e3ffec67 	bsr      	0x1fff35f0	// 1fff35f0 <cpu_intrpt_save>
    g_intrpt_nested_level[0]++;
1fff5d26:	8460      	ld.b      	r3, (r4, 0x0)
1fff5d28:	2300      	addi      	r3, 1
1fff5d2a:	a460      	st.b      	r3, (r4, 0x0)
    cpu_intrpt_restore(psr);
1fff5d2c:	e3ffec67 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
    g_tim1_count++;
1fff5d30:	8560      	ld.b      	r3, (r5, 0x0)
1fff5d32:	2300      	addi      	r3, 1
1fff5d34:	74cc      	zextb      	r3, r3
1fff5d36:	a560      	st.b      	r3, (r5, 0x0)
    TIM1_IRQHandler();
1fff5d38:	e00025e8 	bsr      	0x1fffa908	// 1fffa908 <check_before_startup+0x230>
    g_tim1_count--;
1fff5d3c:	8560      	ld.b      	r3, (r5, 0x0)
1fff5d3e:	2b00      	subi      	r3, 1
1fff5d40:	74cc      	zextb      	r3, r3
1fff5d42:	a560      	st.b      	r3, (r5, 0x0)
    psr = cpu_intrpt_save();
1fff5d44:	e3ffec56 	bsr      	0x1fff35f0	// 1fff35f0 <cpu_intrpt_save>
    g_intrpt_nested_level[0]--;
1fff5d48:	8460      	ld.b      	r3, (r4, 0x0)
1fff5d4a:	2b00      	subi      	r3, 1
1fff5d4c:	a460      	st.b      	r3, (r4, 0x0)
    cpu_intrpt_restore(psr);
1fff5d4e:	e3ffec56 	bsr      	0x1fff35fa	// 1fff35fa <cpu_intrpt_restore>
}
1fff5d52:	1492      	pop      	r4-r5, r15
1fff5d54:	1fffd9b8 	.long	0x1fffd9b8
1fff5d58:	1fffb8c4 	.long	0x1fffb8c4
1fff5d5c:	1fffcf00 	.long	0x1fffcf00

1fff5d60 <TRNG_Output>:
{
1fff5d60:	14d4      	push      	r4-r7, r15
1fff5d62:	1421      	subi      	r14, r14, 4
    temp = *(volatile uint32_t *)0x4000f05c;
1fff5d64:	10d1      	lrw      	r6, 0x4000f000	// 1fff5da8 <TRNG_Output+0x48>
    *(volatile uint32_t *)0x4000f05c = (temp & 0xfffefe00) | 0x0108;
1fff5d66:	1052      	lrw      	r2, 0xfffefe00	// 1fff5dac <TRNG_Output+0x4c>
    temp = *(volatile uint32_t *)0x4000f05c;
1fff5d68:	9677      	ld.w      	r3, (r6, 0x5c)
    *(volatile uint32_t *)0x4000f05c = (temp & 0xfffefe00) | 0x0108;
1fff5d6a:	68c8      	and      	r3, r2
1fff5d6c:	ec630108 	ori      	r3, r3, 264
1fff5d70:	b677      	st.w      	r3, (r6, 0x5c)
1fff5d72:	6d03      	mov      	r4, r0
1fff5d74:	41a2      	lsli      	r5, r1, 2
1fff5d76:	6140      	addu      	r5, r0
    for (uint8_t j = 0; j < len; j++) {
1fff5d78:	6516      	cmpne      	r5, r4
1fff5d7a:	0803      	bt      	0x1fff5d80	// 1fff5d80 <TRNG_Output+0x20>
}
1fff5d7c:	1401      	addi      	r14, r14, 4
1fff5d7e:	1494      	pop      	r4-r7, r15
1fff5d80:	3700      	movi      	r7, 0
1fff5d82:	3200      	movi      	r2, 0
            WaitRTCCount(17);
1fff5d84:	3011      	movi      	r0, 17
1fff5d86:	b840      	st.w      	r2, (r14, 0x0)
1fff5d88:	e0002788 	bsr      	0x1fffac98	// 1fffac98 <check_before_startup+0x5c0>
            temp1 = *(volatile uint32_t *)0x4000f064 & 0x1ffff;
1fff5d8c:	9679      	ld.w      	r3, (r6, 0x64)
            status |= ((temp1 & 0x03) << (i << 1));
1fff5d8e:	e4632003 	andi      	r3, r3, 3
1fff5d92:	70dc      	lsl      	r3, r7
1fff5d94:	2701      	addi      	r7, 2
        for (uint8_t i = 0; i < 16; i++) {
1fff5d96:	eb470020 	cmpnei      	r7, 32
            status |= ((temp1 & 0x03) << (i << 1));
1fff5d9a:	9840      	ld.w      	r2, (r14, 0x0)
1fff5d9c:	6c8c      	or      	r2, r3
        for (uint8_t i = 0; i < 16; i++) {
1fff5d9e:	0bf3      	bt      	0x1fff5d84	// 1fff5d84 <TRNG_Output+0x24>
        *buf++ = status;
1fff5da0:	b440      	st.w      	r2, (r4, 0x0)
1fff5da2:	2403      	addi      	r4, 4
1fff5da4:	07ea      	br      	0x1fff5d78	// 1fff5d78 <TRNG_Output+0x18>
1fff5da6:	0000      	bkpt
1fff5da8:	4000f000 	.long	0x4000f000
1fff5dac:	fffefe00 	.long	0xfffefe00

1fff5db0 <TRNG_INIT>:
{
1fff5db0:	14d1      	push      	r4, r15
    if (!init_flag) {
1fff5db2:	1088      	lrw      	r4, 0x1fffb8c8	// 1fff5dd0 <TRNG_INIT+0x20>
1fff5db4:	8460      	ld.b      	r3, (r4, 0x0)
1fff5db6:	3b40      	cmpnei      	r3, 0
1fff5db8:	080b      	bt      	0x1fff5dce	// 1fff5dce <TRNG_INIT+0x1e>
        TRNG_Output((uint32_t *)(s_trng_seed), 4);
1fff5dba:	3104      	movi      	r1, 4
1fff5dbc:	1006      	lrw      	r0, 0x1fffb8e8	// 1fff5dd4 <TRNG_INIT+0x24>
1fff5dbe:	e3ffffd1 	bsr      	0x1fff5d60	// 1fff5d60 <TRNG_Output>
        TRNG_Output((uint32_t *)(s_trng_iv), 4);
1fff5dc2:	3104      	movi      	r1, 4
1fff5dc4:	1005      	lrw      	r0, 0x1fffb8d8	// 1fff5dd8 <TRNG_INIT+0x28>
1fff5dc6:	e3ffffcd 	bsr      	0x1fff5d60	// 1fff5d60 <TRNG_Output>
        init_flag = 1;
1fff5dca:	3301      	movi      	r3, 1
1fff5dcc:	a460      	st.b      	r3, (r4, 0x0)
}
1fff5dce:	1491      	pop      	r4, r15
1fff5dd0:	1fffb8c8 	.long	0x1fffb8c8
1fff5dd4:	1fffb8e8 	.long	0x1fffb8e8
1fff5dd8:	1fffb8d8 	.long	0x1fffb8d8

1fff5ddc <TRNG_Rand>:
{
1fff5ddc:	14d4      	push      	r4-r7, r15
1fff5dde:	1428      	subi      	r14, r14, 32
1fff5de0:	6d83      	mov      	r6, r0
    if (len > 16) {
1fff5de2:	3910      	cmphsi      	r1, 17
{
1fff5de4:	6d47      	mov      	r5, r1
    if (len > 16) {
1fff5de6:	083e      	bt      	0x1fff5e62	// 1fff5e62 <TRNG_Rand+0x86>
    TRNG_INIT();
1fff5de8:	e3ffffe4 	bsr      	0x1fff5db0	// 1fff5db0 <TRNG_INIT>
1fff5dec:	3300      	movi      	r3, 0
    uint32_t t0 = 0;
1fff5dee:	3200      	movi      	r2, 0
        t0 += s_trng_seed[i];
1fff5df0:	101f      	lrw      	r0, 0x1fffb8e8	// 1fff5e6c <TRNG_Rand+0x90>
1fff5df2:	582c      	addu      	r1, r0, r3
1fff5df4:	2300      	addi      	r3, 1
    for (i = 0; i < 16; i++) {
1fff5df6:	3b50      	cmpnei      	r3, 16
        t0 += s_trng_seed[i];
1fff5df8:	8120      	ld.b      	r1, (r1, 0x0)
1fff5dfa:	6084      	addu      	r2, r1
    for (i = 0; i < 16; i++) {
1fff5dfc:	0bfb      	bt      	0x1fff5df2	// 1fff5df2 <TRNG_Rand+0x16>
    if (t0 == 0) {
1fff5dfe:	3a40      	cmpnei      	r2, 0
1fff5e00:	0c33      	bf      	0x1fff5e66	// 1fff5e66 <TRNG_Rand+0x8a>
        cryIn[i] = s_trng_iv[i] ^ s_company_id[i];
1fff5e02:	107c      	lrw      	r3, 0x1fffa5d4	// 1fff5e70 <TRNG_Rand+0x94>
1fff5e04:	109c      	lrw      	r4, 0x1fffb8d8	// 1fff5e74 <TRNG_Rand+0x98>
1fff5e06:	9300      	ld.w      	r0, (r3, 0x0)
1fff5e08:	3300      	movi      	r3, 0
1fff5e0a:	5c4c      	addu      	r2, r4, r3
1fff5e0c:	58ec      	addu      	r7, r0, r3
1fff5e0e:	87e0      	ld.b      	r7, (r7, 0x0)
1fff5e10:	1904      	addi      	r1, r14, 16
1fff5e12:	8240      	ld.b      	r2, (r2, 0x0)
1fff5e14:	604c      	addu      	r1, r3
1fff5e16:	2300      	addi      	r3, 1
    for (i = 0; i < 16; i++) {
1fff5e18:	3b50      	cmpnei      	r3, 16
        cryIn[i] = s_trng_iv[i] ^ s_company_id[i];
1fff5e1a:	6c9d      	xor      	r2, r7
1fff5e1c:	a140      	st.b      	r2, (r1, 0x0)
    for (i = 0; i < 16; i++) {
1fff5e1e:	0bf6      	bt      	0x1fff5e0a	// 1fff5e0a <TRNG_Rand+0x2e>
    LL_ENC_AES128_Encrypt(s_trng_seed, cryIn, cryOut);
1fff5e20:	6cbb      	mov      	r2, r14
1fff5e22:	1013      	lrw      	r0, 0x1fffb8e8	// 1fff5e6c <TRNG_Rand+0x90>
1fff5e24:	1904      	addi      	r1, r14, 16
1fff5e26:	e0002733 	bsr      	0x1fffac8c	// 1fffac8c <check_before_startup+0x5b4>
    osal_memcpy(buf, cryOut, rand_len);
1fff5e2a:	6c97      	mov      	r2, r5
1fff5e2c:	6c7b      	mov      	r1, r14
1fff5e2e:	6c1b      	mov      	r0, r6
1fff5e30:	e00026b0 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
    *(uint32 *)(&s_trng_iv[0]) += read_current_fine_time();
1fff5e34:	e0002672 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
1fff5e38:	9460      	ld.w      	r3, (r4, 0x0)
1fff5e3a:	600c      	addu      	r0, r3
1fff5e3c:	b400      	st.w      	r0, (r4, 0x0)
    *(uint32 *)(&s_trng_iv[4]) += read_current_fine_time();
1fff5e3e:	e000266d 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
1fff5e42:	9461      	ld.w      	r3, (r4, 0x4)
1fff5e44:	600c      	addu      	r0, r3
1fff5e46:	b401      	st.w      	r0, (r4, 0x4)
    *(uint32 *)(&s_trng_iv[8]) += read_current_fine_time();
1fff5e48:	e0002668 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
1fff5e4c:	9462      	ld.w      	r3, (r4, 0x8)
1fff5e4e:	600c      	addu      	r0, r3
1fff5e50:	b402      	st.w      	r0, (r4, 0x8)
    *(uint32 *)(&s_trng_iv[12]) += read_current_fine_time();
1fff5e52:	e0002663 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
1fff5e56:	9463      	ld.w      	r3, (r4, 0xc)
1fff5e58:	600c      	addu      	r0, r3
1fff5e5a:	b403      	st.w      	r0, (r4, 0xc)
1fff5e5c:	3000      	movi      	r0, 0
}
1fff5e5e:	1408      	addi      	r14, r14, 32
1fff5e60:	1494      	pop      	r4-r7, r15
        return PPlus_ERR_FATAL;
1fff5e62:	3001      	movi      	r0, 1
1fff5e64:	07fd      	br      	0x1fff5e5e	// 1fff5e5e <TRNG_Rand+0x82>
        return PPlus_ERR_NULL;
1fff5e66:	300e      	movi      	r0, 14
1fff5e68:	07fb      	br      	0x1fff5e5e	// 1fff5e5e <TRNG_Rand+0x82>
1fff5e6a:	0000      	bkpt
1fff5e6c:	1fffb8e8 	.long	0x1fffb8e8
1fff5e70:	1fffa5d4 	.long	0x1fffa5d4
1fff5e74:	1fffb8d8 	.long	0x1fffb8d8

1fff5e78 <LL_ENC_GenerateTrueRandNum1>:
{
1fff5e78:	14d0      	push      	r15
    return (TRNG_Rand(buf, len));
1fff5e7a:	e3ffffb1 	bsr      	0x1fff5ddc	// 1fff5ddc <TRNG_Rand>
}
1fff5e7e:	1490      	pop      	r15

1fff5e80 <config_RTC1>:
{
1fff5e80:	14d3      	push      	r4-r6, r15
1fff5e82:	6d03      	mov      	r4, r0
    WaitRTCCount(1);
1fff5e84:	3001      	movi      	r0, 1
1fff5e86:	10b6      	lrw      	r5, 0x1fff0f50	// 1fff5edc <config_RTC1+0x5c>
1fff5e88:	e0002708 	bsr      	0x1fffac98	// 1fffac98 <check_before_startup+0x5c0>
    sleep_tick = *(volatile uint32_t *) 0x4000f028;         // read current RTC counter
1fff5e8c:	1075      	lrw      	r3, 0x4000f000	// 1fff5ee0 <config_RTC1+0x60>
1fff5e8e:	934a      	ld.w      	r2, (r3, 0x28)
1fff5e90:	1075      	lrw      	r3, 0x1fff1a28	// 1fff5ee4 <config_RTC1+0x64>
1fff5e92:	6d8f      	mov      	r6, r3
1fff5e94:	b340      	st.w      	r2, (r3, 0x0)
    if (llState == LL_STATE_IDLE) { // (ll_remain_time == 0 || llState == LL_STATE_IDLE)
1fff5e96:	1055      	lrw      	r2, 0x1fff117d	// 1fff5ee8 <config_RTC1+0x68>
1fff5e98:	8240      	ld.b      	r2, (r2, 0x0)
1fff5e9a:	3a40      	cmpnei      	r2, 0
1fff5e9c:	0819      	bt      	0x1fff5ece	// 1fff5ece <config_RTC1+0x4e>
        ll_remain_time = pGlobal_config[MAX_SLEEP_TIME];
1fff5e9e:	1074      	lrw      	r3, 0x1fffa670	// 1fff5eec <config_RTC1+0x6c>
1fff5ea0:	9360      	ld.w      	r3, (r3, 0x0)
1fff5ea2:	9365      	ld.w      	r3, (r3, 0x14)
1fff5ea4:	b560      	st.w      	r3, (r5, 0x0)
    g_TIM2_IRQ_to_Sleep_DeltTick = (g_TIM2_IRQ_TIM3_CurrCount > (AP_TIM3->CurrentCount))
1fff5ea6:	1053      	lrw      	r2, 0x40001028	// 1fff5ef0 <config_RTC1+0x70>
1fff5ea8:	1073      	lrw      	r3, 0x1fff0e5c	// 1fff5ef4 <config_RTC1+0x74>
1fff5eaa:	9221      	ld.w      	r1, (r2, 0x4)
1fff5eac:	9360      	ld.w      	r3, (r3, 0x0)
                                   ? (g_TIM2_IRQ_TIM3_CurrCount - (AP_TIM3->CurrentCount)) : 0;
1fff5eae:	64c4      	cmphs      	r1, r3
1fff5eb0:	0813      	bt      	0x1fff5ed6	// 1fff5ed6 <config_RTC1+0x56>
1fff5eb2:	9241      	ld.w      	r2, (r2, 0x4)
1fff5eb4:	60ca      	subu      	r3, r2
    g_TIM2_IRQ_to_Sleep_DeltTick = (g_TIM2_IRQ_TIM3_CurrCount > (AP_TIM3->CurrentCount))
1fff5eb6:	1051      	lrw      	r2, 0x1fff0e60	// 1fff5ef8 <config_RTC1+0x78>
    AP_AON->RTCCTL |= BIT(15) | BIT(18) | BIT(20);
1fff5eb8:	31a4      	movi      	r1, 164
    g_TIM2_IRQ_to_Sleep_DeltTick = (g_TIM2_IRQ_TIM3_CurrCount > (AP_TIM3->CurrentCount))
1fff5eba:	b260      	st.w      	r3, (r2, 0x0)
    AP_AON->RTCCC0 = sleep_tick + time;  //set RTC comparatr0 value
1fff5ebc:	9660      	ld.w      	r3, (r6, 0x0)
1fff5ebe:	610c      	addu      	r4, r3
1fff5ec0:	1068      	lrw      	r3, 0x4000f000	// 1fff5ee0 <config_RTC1+0x60>
    AP_AON->RTCCTL |= BIT(15) | BIT(18) | BIT(20);
1fff5ec2:	412d      	lsli      	r1, r1, 13
    AP_AON->RTCCC0 = sleep_tick + time;  //set RTC comparatr0 value
1fff5ec4:	b38b      	st.w      	r4, (r3, 0x2c)
    AP_AON->RTCCTL |= BIT(15) | BIT(18) | BIT(20);
1fff5ec6:	9349      	ld.w      	r2, (r3, 0x24)
1fff5ec8:	6c84      	or      	r2, r1
1fff5eca:	b349      	st.w      	r2, (r3, 0x24)
}
1fff5ecc:	1493      	pop      	r4-r6, r15
        ll_remain_time = read_LL_remainder_time1();
1fff5ece:	e3fffcc1 	bsr      	0x1fff5850	// 1fff5850 <read_LL_remainder_time1>
1fff5ed2:	b500      	st.w      	r0, (r5, 0x0)
1fff5ed4:	07e9      	br      	0x1fff5ea6	// 1fff5ea6 <config_RTC1+0x26>
                                   ? (g_TIM2_IRQ_TIM3_CurrCount - (AP_TIM3->CurrentCount)) : 0;
1fff5ed6:	3300      	movi      	r3, 0
1fff5ed8:	07ef      	br      	0x1fff5eb6	// 1fff5eb6 <config_RTC1+0x36>
1fff5eda:	0000      	bkpt
1fff5edc:	1fff0f50 	.long	0x1fff0f50
1fff5ee0:	4000f000 	.long	0x4000f000
1fff5ee4:	1fff1a28 	.long	0x1fff1a28
1fff5ee8:	1fff117d 	.long	0x1fff117d
1fff5eec:	1fffa670 	.long	0x1fffa670
1fff5ef0:	40001028 	.long	0x40001028
1fff5ef4:	1fff0e5c 	.long	0x1fff0e5c
1fff5ef8:	1fff0e60 	.long	0x1fff0e60

1fff5efc <ll_isLegacyAdv>:
    if (pExtAdv->parameter.advEventProperties & LE_ADV_PROP_LEGACY_BITMASK) {
1fff5efc:	8803      	ld.h      	r0, (r0, 0x6)
1fff5efe:	4804      	lsri      	r0, r0, 4
1fff5f00:	e4002001 	andi      	r0, r0, 1
}
1fff5f04:	783c      	jmp      	r15
	...

1fff5f08 <LL_ExtAdvReportCback>:
{
1fff5f08:	14d4      	push      	r4-r7, r15
1fff5f0a:	1430      	subi      	r14, r14, 64
1fff5f0c:	b865      	st.w      	r3, (r14, 0x14)
1fff5f0e:	987b      	ld.w      	r3, (r14, 0x6c)
1fff5f10:	b800      	st.w      	r0, (r14, 0x0)
1fff5f12:	b86b      	st.w      	r3, (r14, 0x2c)
1fff5f14:	987d      	ld.w      	r3, (r14, 0x74)
1fff5f16:	b823      	st.w      	r1, (r14, 0xc)
1fff5f18:	b86c      	st.w      	r3, (r14, 0x30)
1fff5f1a:	d86e0054 	ld.b      	r3, (r14, 0x54)
1fff5f1e:	b844      	st.w      	r2, (r14, 0x10)
1fff5f20:	b866      	st.w      	r3, (r14, 0x18)
1fff5f22:	d86e0058 	ld.b      	r3, (r14, 0x58)
1fff5f26:	d8ae0070 	ld.b      	r5, (r14, 0x70)
1fff5f2a:	b867      	st.w      	r3, (r14, 0x1c)
1fff5f2c:	d86e005c 	ld.b      	r3, (r14, 0x5c)
1fff5f30:	b868      	st.w      	r3, (r14, 0x20)
1fff5f32:	d86e4060 	ld.bs      	r3, (r14, 0x60)
1fff5f36:	b869      	st.w      	r3, (r14, 0x24)
1fff5f38:	d86e1032 	ld.h      	r3, (r14, 0x64)
1fff5f3c:	b861      	st.w      	r3, (r14, 0x4)
1fff5f3e:	d86e0068 	ld.b      	r3, (r14, 0x68)
1fff5f42:	b86a      	st.w      	r3, (r14, 0x28)
    if (hciGapTaskID != 0) {
1fff5f44:	1261      	lrw      	r3, 0x1fff0f82	// 1fff6048 <LL_ExtAdvReportCback+0x140>
1fff5f46:	83c0      	ld.b      	r6, (r3, 0x0)
1fff5f48:	3e40      	cmpnei      	r6, 0
1fff5f4a:	087d      	bt      	0x1fff6044	// 1fff6044 <LL_ExtAdvReportCback+0x13c>
1fff5f4c:	33e5      	movi      	r3, 229
1fff5f4e:	6d17      	mov      	r4, r5
1fff5f50:	654c      	cmphs      	r3, r5
1fff5f52:	0803      	bt      	0x1fff5f58	// 1fff5f58 <LL_ExtAdvReportCback+0x50>
1fff5f54:	3400      	movi      	r4, 0
1fff5f56:	2c1a      	subi      	r4, 27
            msg->pData[20]  = HI_UINT16(periodicAdvertisingInterval);
1fff5f58:	9861      	ld.w      	r3, (r14, 0x4)
1fff5f5a:	4b68      	lsri      	r3, r3, 8
1fff5f5c:	b862      	st.w      	r3, (r14, 0x8)
            msg->hdr.status = 0xFF;
1fff5f5e:	3300      	movi      	r3, 0
1fff5f60:	2b00      	subi      	r3, 1
1fff5f62:	dc6e0037 	st.b      	r3, (r14, 0x37)
1fff5f66:	7510      	zextb      	r4, r4
            (void)osal_msg_send(hciTaskID, (uint8 *)msg);
1fff5f68:	1179      	lrw      	r3, 0x1fff0f80	// 1fff604c <LL_ExtAdvReportCback+0x144>
1fff5f6a:	b86e      	st.w      	r3, (r14, 0x38)
        dataLength = 26 + t_dataLen;
1fff5f6c:	7411      	zexth      	r0, r4
1fff5f6e:	e4400019 	addi      	r2, r0, 26
        msg = (hciPacket_t *)osal_msg_allocate(totalLength);
1fff5f72:	2024      	addi      	r0, 37
        dataLength = 26 + t_dataLen;
1fff5f74:	b84f      	st.w      	r2, (r14, 0x3c)
        msg = (hciPacket_t *)osal_msg_allocate(totalLength);
1fff5f76:	e00026d3 	bsr      	0x1fffad1c	// 1fffad1c <check_before_startup+0x644>
1fff5f7a:	6dc3      	mov      	r7, r0
        if (msg) {
1fff5f7c:	3840      	cmpnei      	r0, 0
1fff5f7e:	0c63      	bf      	0x1fff6044	// 1fff6044 <LL_ExtAdvReportCback+0x13c>
            msg->hdr.event  = HCI_CTRL_TO_HOST_EVENT;
1fff5f80:	3301      	movi      	r3, 1
            msg->pData[2] = dataLength;
1fff5f82:	984f      	ld.w      	r2, (r14, 0x3c)
            msg->hdr.event  = HCI_CTRL_TO_HOST_EVENT;
1fff5f84:	a060      	st.b      	r3, (r0, 0x0)
            msg->hdr.status = 0xFF;
1fff5f86:	d86e0037 	ld.b      	r3, (r14, 0x37)
            msg->pData    = (uint8 *)(msg + 1);
1fff5f8a:	583e      	addi      	r1, r0, 8
            msg->hdr.status = 0xFF;
1fff5f8c:	a061      	st.b      	r3, (r0, 0x1)
            msg->pData[0] = HCI_EVENT_PACKET;
1fff5f8e:	3304      	movi      	r3, 4
            msg->pData    = (uint8 *)(msg + 1);
1fff5f90:	b021      	st.w      	r1, (r0, 0x4)
            msg->pData[0] = HCI_EVENT_PACKET;
1fff5f92:	a068      	st.b      	r3, (r0, 0x8)
            msg->pData[1] = HCI_LE_EVENT_CODE;
1fff5f94:	333e      	movi      	r3, 62
            msg->pData[2] = dataLength;
1fff5f96:	a04a      	st.b      	r2, (r0, 0xa)
            msg->pData[1] = HCI_LE_EVENT_CODE;
1fff5f98:	a069      	st.b      	r3, (r0, 0x9)
            msg->pData[3] = HCI_BLE_EXT_ADV_REPORT_EVENT;                // event code
1fff5f9a:	330d      	movi      	r3, 13
            (void)osal_memcpy(&msg->pData[8], advAddr, B_ADDR_LEN);  // address
1fff5f9c:	3206      	movi      	r2, 6
            msg->pData[3] = HCI_BLE_EXT_ADV_REPORT_EVENT;                // event code
1fff5f9e:	a06b      	st.b      	r3, (r0, 0xb)
            msg->pData[4] = 1;                                       // number of reports; assume 1 for now
1fff5fa0:	3301      	movi      	r3, 1
            (void)osal_memcpy(&msg->pData[8], advAddr, B_ADDR_LEN);  // address
1fff5fa2:	9824      	ld.w      	r1, (r14, 0x10)
            msg->pData[4] = 1;                                       // number of reports; assume 1 for now
1fff5fa4:	a06c      	st.b      	r3, (r0, 0xc)
            msg->pData[5] = LO_UINT16(advEvt);                                  // advertisement event type
1fff5fa6:	d86e0000 	ld.b      	r3, (r14, 0x0)
1fff5faa:	a06d      	st.b      	r3, (r0, 0xd)
            msg->pData[6] = HI_UINT16(advEvt);
1fff5fac:	3300      	movi      	r3, 0
1fff5fae:	a06e      	st.b      	r3, (r0, 0xe)
            msg->pData[7] = advAddrType;                             // address type
1fff5fb0:	d86e000c 	ld.b      	r3, (r14, 0xc)
1fff5fb4:	a06f      	st.b      	r3, (r0, 0xf)
            (void)osal_memcpy(&msg->pData[8], advAddr, B_ADDR_LEN);  // address
1fff5fb6:	200f      	addi      	r0, 16
1fff5fb8:	e00025ec 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
            msg->pData[14] = primaryPHY;
1fff5fbc:	9741      	ld.w      	r2, (r7, 0x4)
1fff5fbe:	d86e0014 	ld.b      	r3, (r14, 0x14)
1fff5fc2:	a26e      	st.b      	r3, (r2, 0xe)
            msg->pData[15] = secondaryPHY;
1fff5fc4:	d86e0018 	ld.b      	r3, (r14, 0x18)
1fff5fc8:	9741      	ld.w      	r2, (r7, 0x4)
1fff5fca:	a26f      	st.b      	r3, (r2, 0xf)
            msg->pData[16] = advertisingSID;
1fff5fcc:	d86e001c 	ld.b      	r3, (r14, 0x1c)
1fff5fd0:	9741      	ld.w      	r2, (r7, 0x4)
1fff5fd2:	a270      	st.b      	r3, (r2, 0x10)
            msg->pData[17] = txPower;
1fff5fd4:	d86e0020 	ld.b      	r3, (r14, 0x20)
1fff5fd8:	9741      	ld.w      	r2, (r7, 0x4)
1fff5fda:	a271      	st.b      	r3, (r2, 0x11)
            msg->pData[18] = rssi;
1fff5fdc:	d86e0024 	ld.b      	r3, (r14, 0x24)
1fff5fe0:	9741      	ld.w      	r2, (r7, 0x4)
1fff5fe2:	a272      	st.b      	r3, (r2, 0x12)
            msg->pData[19]  = LO_UINT16(periodicAdvertisingInterval);
1fff5fe4:	d86e0004 	ld.b      	r3, (r14, 0x4)
1fff5fe8:	9741      	ld.w      	r2, (r7, 0x4)
1fff5fea:	a273      	st.b      	r3, (r2, 0x13)
            msg->pData[20]  = HI_UINT16(periodicAdvertisingInterval);
1fff5fec:	d86e0008 	ld.b      	r3, (r14, 0x8)
1fff5ff0:	9741      	ld.w      	r2, (r7, 0x4)
1fff5ff2:	a274      	st.b      	r3, (r2, 0x14)
            msg->pData[21] = directAddrType;                             // address type
1fff5ff4:	d86e0028 	ld.b      	r3, (r14, 0x28)
1fff5ff8:	9741      	ld.w      	r2, (r7, 0x4)
1fff5ffa:	a275      	st.b      	r3, (r2, 0x15)
            if (advEvt & LE_ADV_PROP_DIRECT_BITMASK) {
1fff5ffc:	9860      	ld.w      	r3, (r14, 0x0)
1fff5ffe:	e4432004 	andi      	r2, r3, 4
1fff6002:	9701      	ld.w      	r0, (r7, 0x4)
1fff6004:	3a40      	cmpnei      	r2, 0
                (void)osal_memcpy(&msg->pData[22], directAddr, B_ADDR_LEN);    // address
1fff6006:	2015      	addi      	r0, 22
1fff6008:	3206      	movi      	r2, 6
            if (advEvt & LE_ADV_PROP_DIRECT_BITMASK) {
1fff600a:	0c19      	bf      	0x1fff603c	// 1fff603c <LL_ExtAdvReportCback+0x134>
                (void)osal_memcpy(&msg->pData[22], directAddr, B_ADDR_LEN);    // address
1fff600c:	982b      	ld.w      	r1, (r14, 0x2c)
1fff600e:	e00025c1 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
            msg->pData[28] = t_dataLen;                                // data length
1fff6012:	9741      	ld.w      	r2, (r7, 0x4)
            (void)osal_memcpy(&msg->pData[29], &rptData[rptIdx], t_dataLen);    // data
1fff6014:	982c      	ld.w      	r1, (r14, 0x30)
            msg->pData[28] = t_dataLen;                                // data length
1fff6016:	a29c      	st.b      	r4, (r2, 0x1c)
            (void)osal_memcpy(&msg->pData[29], &rptData[rptIdx], t_dataLen);    // data
1fff6018:	6c93      	mov      	r2, r4
1fff601a:	6058      	addu      	r1, r6
1fff601c:	9701      	ld.w      	r0, (r7, 0x4)
1fff601e:	201c      	addi      	r0, 29
1fff6020:	e00025b8 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
            (void)osal_msg_send(hciTaskID, (uint8 *)msg);
1fff6024:	986e      	ld.w      	r3, (r14, 0x38)
1fff6026:	6c5f      	mov      	r1, r7
1fff6028:	8300      	ld.b      	r0, (r3, 0x0)
1fff602a:	e00025bf 	bsr      	0x1fffaba8	// 1fffaba8 <check_before_startup+0x4d0>
            if (dataLen > t_dataLen) {
1fff602e:	6550      	cmphs      	r4, r5
1fff6030:	080a      	bt      	0x1fff6044	// 1fff6044 <LL_ExtAdvReportCback+0x13c>
                dataLen = t_dataLen = dataLen - t_dataLen;
1fff6032:	6152      	subu      	r5, r4
1fff6034:	7514      	zextb      	r4, r5
                rptIdx = 229;
1fff6036:	36e5      	movi      	r6, 229
                dataLen = t_dataLen = dataLen - t_dataLen;
1fff6038:	6d53      	mov      	r5, r4
1fff603a:	0799      	br      	0x1fff5f6c	// 1fff5f6c <LL_ExtAdvReportCback+0x64>
                osal_memset(&msg->pData[22], 0, B_ADDR_LEN);                // set zero
1fff603c:	3100      	movi      	r1, 0
1fff603e:	e0002381 	bsr      	0x1fffa740	// 1fffa740 <check_before_startup+0x68>
1fff6042:	07e8      	br      	0x1fff6012	// 1fff6012 <LL_ExtAdvReportCback+0x10a>
}
1fff6044:	1410      	addi      	r14, r14, 64
1fff6046:	1494      	pop      	r4-r7, r15
1fff6048:	1fff0f82 	.long	0x1fff0f82
1fff604c:	1fff0f80 	.long	0x1fff0f80

1fff6050 <ll_adv_scheduler1>:
{
1fff6050:	14d4      	push      	r4-r7, r15
1fff6052:	1423      	subi      	r14, r14, 12
    T2 = read_current_fine_time();
1fff6054:	e0002562 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
    delta = LL_TIME_DELTA(g_timerExpiryTick, T2);
1fff6058:	1275      	lrw      	r3, 0x1fff0f8c	// 1fff61ac <ll_adv_scheduler1+0x15c>
    T2 = read_current_fine_time();
1fff605a:	6d83      	mov      	r6, r0
    delta = LL_TIME_DELTA(g_timerExpiryTick, T2);
1fff605c:	9360      	ld.w      	r3, (r3, 0x0)
1fff605e:	58ad      	subu      	r5, r0, r3
1fff6060:	64c0      	cmphs      	r0, r3
1fff6062:	0c14      	bf      	0x1fff608a	// 1fff608a <ll_adv_scheduler1+0x3a>
    if (g_currentExtAdv == LL_INVALID_ADV_SET_HANDLE) {
1fff6064:	1273      	lrw      	r3, 0x1fff12dc	// 1fff61b0 <ll_adv_scheduler1+0x160>
1fff6066:	8300      	ld.b      	r0, (r3, 0x0)
1fff6068:	b860      	st.w      	r3, (r14, 0x0)
1fff606a:	eb4000ff 	cmpnei      	r0, 255
1fff606e:	0c0c      	bf      	0x1fff6086	// 1fff6086 <ll_adv_scheduler1+0x36>
    pAdvInfo = p_scheduler->pAdvInfo;
1fff6070:	12f1      	lrw      	r7, 0x1fff1198	// 1fff61b4 <ll_adv_scheduler1+0x164>
1fff6072:	4044      	lsli      	r2, r0, 4
1fff6074:	9760      	ld.w      	r3, (r7, 0x0)
1fff6076:	60c8      	addu      	r3, r2
1fff6078:	9381      	ld.w      	r4, (r3, 0x4)
    if (pAdvInfo->active == FALSE) {
1fff607a:	d8640042 	ld.b      	r3, (r4, 0x42)
1fff607e:	3b40      	cmpnei      	r3, 0
1fff6080:	0809      	bt      	0x1fff6092	// 1fff6092 <ll_adv_scheduler1+0x42>
        ll_delete_adv_task(g_currentExtAdv);
1fff6082:	e000237d 	bsr      	0x1fffa77c	// 1fffa77c <check_before_startup+0xa4>
}
1fff6086:	1403      	addi      	r14, r14, 12
1fff6088:	1494      	pop      	r4-r7, r15
    delta = LL_TIME_DELTA(g_timerExpiryTick, T2);
1fff608a:	c6a05023 	bmaski      	r3, 22
1fff608e:	614c      	addu      	r5, r3
1fff6090:	07ea      	br      	0x1fff6064	// 1fff6064 <ll_adv_scheduler1+0x14>
    if (pAdvInfo->currentChn > LL_ADV_CHAN_FIRST &&   // next channel in primary adv channel
1fff6092:	d8240052 	ld.b      	r1, (r4, 0x52)
1fff6096:	eb010025 	cmphsi      	r1, 38
1fff609a:	0c53      	bf      	0x1fff6140	// 1fff6140 <ll_adv_scheduler1+0xf0>
1fff609c:	3b41      	cmpnei      	r3, 1
1fff609e:	0851      	bt      	0x1fff6140	// 1fff6140 <ll_adv_scheduler1+0xf0>
        !ll_isFirstAdvChn(pAdvInfo->parameter.priAdvChnMap, pAdvInfo->currentChn)) {     // not the 1st primary ADV channel
1fff60a0:	8410      	ld.b      	r0, (r4, 0x10)
1fff60a2:	e00026b5 	bsr      	0x1fffae0c	// 1fffae0c <check_before_startup+0x734>
        pAdvInfo->active == TRUE                 &&   // add 04-01, legacy adv may stop when receive conn_req
1fff60a6:	3840      	cmpnei      	r0, 0
1fff60a8:	084c      	bt      	0x1fff6140	// 1fff6140 <ll_adv_scheduler1+0xf0>
        ll_ext_adv_schedule_next_event(pGlobal_config[LL_EXT_ADV_INTER_PRI_CHN_INT] - delta);
1fff60aa:	1264      	lrw      	r3, 0x1fffa670	// 1fff61b8 <ll_adv_scheduler1+0x168>
1fff60ac:	9360      	ld.w      	r3, (r3, 0x0)
1fff60ae:	d8032051 	ld.w      	r0, (r3, 0x144)
            ll_ext_adv_schedule_next_event(g_interAuxPduDuration - delta);
1fff60b2:	6016      	subu      	r0, r5
1fff60b4:	e0002622 	bsr      	0x1fffacf8	// 1fffacf8 <check_before_startup+0x620>
        extAdvTim4_schDelta = 0;
1fff60b8:	1261      	lrw      	r3, 0x1fffb8b8	// 1fff61bc <ll_adv_scheduler1+0x16c>
1fff60ba:	3200      	movi      	r2, 0
1fff60bc:	b340      	st.w      	r2, (r3, 0x0)
        done = TRUE;
1fff60be:	3301      	movi      	r3, 1
    ll_updateExtAdvRemainderTime(delta);
1fff60c0:	6c17      	mov      	r0, r5
1fff60c2:	b861      	st.w      	r3, (r14, 0x4)
1fff60c4:	e000238c 	bsr      	0x1fffa7dc	// 1fffa7dc <check_before_startup+0x104>
    if (done) {             // next task schedule done
1fff60c8:	9861      	ld.w      	r3, (r14, 0x4)
1fff60ca:	3b40      	cmpnei      	r3, 0
1fff60cc:	0bdd      	bt      	0x1fff6086	// 1fff6086 <ll_adv_scheduler1+0x36>
    minAuxPduTime = g_pAdvSchInfo[g_currentExtAdv].auxPduRemainder ;
1fff60ce:	9840      	ld.w      	r2, (r14, 0x0)
1fff60d0:	9760      	ld.w      	r3, (r7, 0x0)
1fff60d2:	82a0      	ld.b      	r5, (r2, 0x0)
    if (!ll_isLegacyAdv(pAdvInfo)) {
1fff60d4:	6c13      	mov      	r0, r4
    minAuxPduTime = g_pAdvSchInfo[g_currentExtAdv].auxPduRemainder ;
1fff60d6:	4544      	lsli      	r2, r5, 4
1fff60d8:	608c      	addu      	r2, r3
1fff60da:	b862      	st.w      	r3, (r14, 0x8)
1fff60dc:	92e3      	ld.w      	r7, (r2, 0xc)
1fff60de:	b841      	st.w      	r2, (r14, 0x4)
    if (!ll_isLegacyAdv(pAdvInfo)) {
1fff60e0:	e3ffff0e 	bsr      	0x1fff5efc	// 1fff5efc <ll_isLegacyAdv>
1fff60e4:	9841      	ld.w      	r2, (r14, 0x4)
1fff60e6:	3840      	cmpnei      	r0, 0
1fff60e8:	9862      	ld.w      	r3, (r14, 0x8)
1fff60ea:	0807      	bt      	0x1fff60f8	// 1fff60f8 <ll_adv_scheduler1+0xa8>
        minAuxPduTime -= pGlobal_config[LL_EXT_ADV_PROCESS_TARGET] - 30;
1fff60ec:	1133      	lrw      	r1, 0x1fffa670	// 1fff61b8 <ll_adv_scheduler1+0x168>
1fff60ee:	9120      	ld.w      	r1, (r1, 0x0)
1fff60f0:	d8212063 	ld.w      	r1, (r1, 0x18c)
1fff60f4:	61c6      	subu      	r7, r1
1fff60f6:	271d      	addi      	r7, 30
    minPriPduTime = g_pAdvSchInfo[g_currentExtAdv].nextEventRemainder;
1fff60f8:	9282      	ld.w      	r4, (r2, 0x8)
    minIndexPri = g_currentExtAdv;
1fff60fa:	b8a1      	st.w      	r5, (r14, 0x4)
    for (i = 0; i < g_extAdvNumber; i++) {
1fff60fc:	1151      	lrw      	r2, 0x1fff11b0	// 1fff61c0 <ll_adv_scheduler1+0x170>
1fff60fe:	8240      	ld.b      	r2, (r2, 0x0)
1fff6100:	b842      	st.w      	r2, (r14, 0x8)
1fff6102:	3200      	movi      	r2, 0
1fff6104:	9822      	ld.w      	r1, (r14, 0x8)
1fff6106:	6449      	cmplt      	r2, r1
1fff6108:	0834      	bt      	0x1fff6170	// 1fff6170 <ll_adv_scheduler1+0x120>
    T3 = read_current_fine_time();
1fff610a:	e0002507 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
    delta = LL_TIME_DELTA(T2, T3);
1fff610e:	6580      	cmphs      	r0, r6
1fff6110:	58d9      	subu      	r6, r0, r6
1fff6112:	0c41      	bf      	0x1fff6194	// 1fff6194 <ll_adv_scheduler1+0x144>
    uint32  auxPduEmphesis = pGlobal_config[LL_EXT_ADV_INTER_PRI_CHN_INT] * 3;                           // add 03-31
1fff6114:	1169      	lrw      	r3, 0x1fffa670	// 1fff61b8 <ll_adv_scheduler1+0x168>
1fff6116:	9360      	ld.w      	r3, (r3, 0x0)
1fff6118:	d8432051 	ld.w      	r2, (r3, 0x144)
1fff611c:	4261      	lsli      	r3, r2, 1
1fff611e:	60c8      	addu      	r3, r2
    if (minAuxPduTime != LL_INVALID_TIME
1fff6120:	3200      	movi      	r2, 0
1fff6122:	2a00      	subi      	r2, 1
1fff6124:	649e      	cmpne      	r7, r2
1fff6126:	0c3b      	bf      	0x1fff619c	// 1fff619c <ll_adv_scheduler1+0x14c>
        && (minAuxPduTime < minPriPduTime + auxPduEmphesis)) { // next schedule task is aux PDU
1fff6128:	60d0      	addu      	r3, r4
1fff612a:	64dc      	cmphs      	r7, r3
1fff612c:	0838      	bt      	0x1fff619c	// 1fff619c <ll_adv_scheduler1+0x14c>
        ll_ext_adv_schedule_next_event(minAuxPduTime - delta);
1fff612e:	5f19      	subu      	r0, r7, r6
1fff6130:	e00025e4 	bsr      	0x1fffacf8	// 1fffacf8 <check_before_startup+0x620>
        g_currentExtAdv   = minIndexAux;
1fff6134:	9860      	ld.w      	r3, (r14, 0x0)
1fff6136:	a3a0      	st.b      	r5, (r3, 0x0)
    ll_updateExtAdvRemainderTime(delta);
1fff6138:	6c1b      	mov      	r0, r6
1fff613a:	e0002351 	bsr      	0x1fffa7dc	// 1fffa7dc <check_before_startup+0x104>
1fff613e:	07a4      	br      	0x1fff6086	// 1fff6086 <ll_adv_scheduler1+0x36>
    } else if (pAdvInfo->currentChn < LL_ADV_CHAN_FIRST  // broadcast in aux adv chn
1fff6140:	d8640052 	ld.b      	r3, (r4, 0x52)
1fff6144:	eb030024 	cmphsi      	r3, 37
1fff6148:	0812      	bt      	0x1fff616c	// 1fff616c <ll_adv_scheduler1+0x11c>
               &&  pAdvInfo->currentAdvOffset > 0) {            // offset in adv data set greater than 0 means next PDU is AUX_CHAIN_IND PDU
1fff614a:	d864102a 	ld.h      	r3, (r4, 0x54)
1fff614e:	3b40      	cmpnei      	r3, 0
1fff6150:	0c0e      	bf      	0x1fff616c	// 1fff616c <ll_adv_scheduler1+0x11c>
        if ((extscanrsp_offset != 0) && (extscanrsp_offset < pAdvInfo->scanRspMaxLength)) {
1fff6152:	107d      	lrw      	r3, 0x1fffb8bc	// 1fff61c4 <ll_adv_scheduler1+0x174>
1fff6154:	8b40      	ld.h      	r2, (r3, 0x0)
1fff6156:	107d      	lrw      	r3, 0x1fff0894	// 1fff61c8 <ll_adv_scheduler1+0x178>
1fff6158:	3a40      	cmpnei      	r2, 0
1fff615a:	0c07      	bf      	0x1fff6168	// 1fff6168 <ll_adv_scheduler1+0x118>
1fff615c:	8c3a      	ld.h      	r1, (r4, 0x34)
1fff615e:	6448      	cmphs      	r2, r1
1fff6160:	0804      	bt      	0x1fff6168	// 1fff6168 <ll_adv_scheduler1+0x118>
            ll_ext_adv_schedule_next_event(g_interAuxPduDuration - delta - 135);
1fff6162:	9300      	ld.w      	r0, (r3, 0x0)
1fff6164:	2886      	subi      	r0, 135
1fff6166:	07a6      	br      	0x1fff60b2	// 1fff60b2 <ll_adv_scheduler1+0x62>
            ll_ext_adv_schedule_next_event(g_interAuxPduDuration - delta);
1fff6168:	9300      	ld.w      	r0, (r3, 0x0)
1fff616a:	07a4      	br      	0x1fff60b2	// 1fff60b2 <ll_adv_scheduler1+0x62>
    uint8   done = FALSE;
1fff616c:	3300      	movi      	r3, 0
1fff616e:	07a9      	br      	0x1fff60c0	// 1fff60c0 <ll_adv_scheduler1+0x70>
        if (g_pAdvSchInfo[i].adv_handler != LL_INVALID_ADV_SET_HANDLE) {
1fff6170:	8320      	ld.b      	r1, (r3, 0x0)
1fff6172:	30ff      	movi      	r0, 255
1fff6174:	6406      	cmpne      	r1, r0
1fff6176:	0c0c      	bf      	0x1fff618e	// 1fff618e <ll_adv_scheduler1+0x13e>
            if (g_pAdvSchInfo[i].auxPduRemainder < minAuxPduTime) {
1fff6178:	9323      	ld.w      	r1, (r3, 0xc)
1fff617a:	65c4      	cmphs      	r1, r7
1fff617c:	0803      	bt      	0x1fff6182	// 1fff6182 <ll_adv_scheduler1+0x132>
                minIndexAux = i;
1fff617e:	7548      	zextb      	r5, r2
1fff6180:	6dc7      	mov      	r7, r1
            if (g_pAdvSchInfo[i].nextEventRemainder < minPriPduTime) {
1fff6182:	9322      	ld.w      	r1, (r3, 0x8)
1fff6184:	6504      	cmphs      	r1, r4
1fff6186:	0804      	bt      	0x1fff618e	// 1fff618e <ll_adv_scheduler1+0x13e>
                minIndexPri = i;
1fff6188:	7408      	zextb      	r0, r2
1fff618a:	6d07      	mov      	r4, r1
1fff618c:	b801      	st.w      	r0, (r14, 0x4)
    for (i = 0; i < g_extAdvNumber; i++) {
1fff618e:	2200      	addi      	r2, 1
1fff6190:	230f      	addi      	r3, 16
1fff6192:	07b9      	br      	0x1fff6104	// 1fff6104 <ll_adv_scheduler1+0xb4>
    delta = LL_TIME_DELTA(T2, T3);
1fff6194:	c6a05023 	bmaski      	r3, 22
1fff6198:	618c      	addu      	r6, r3
1fff619a:	07bd      	br      	0x1fff6114	// 1fff6114 <ll_adv_scheduler1+0xc4>
        ll_ext_adv_schedule_next_event(minPriPduTime - delta);
1fff619c:	5c19      	subu      	r0, r4, r6
1fff619e:	e00025ad 	bsr      	0x1fffacf8	// 1fffacf8 <check_before_startup+0x620>
        g_currentExtAdv   = minIndexPri;
1fff61a2:	9860      	ld.w      	r3, (r14, 0x0)
1fff61a4:	d84e0004 	ld.b      	r2, (r14, 0x4)
1fff61a8:	a340      	st.b      	r2, (r3, 0x0)
1fff61aa:	07c7      	br      	0x1fff6138	// 1fff6138 <ll_adv_scheduler1+0xe8>
1fff61ac:	1fff0f8c 	.long	0x1fff0f8c
1fff61b0:	1fff12dc 	.long	0x1fff12dc
1fff61b4:	1fff1198 	.long	0x1fff1198
1fff61b8:	1fffa670 	.long	0x1fffa670
1fff61bc:	1fffb8b8 	.long	0x1fffb8b8
1fff61c0:	1fff11b0 	.long	0x1fff11b0
1fff61c4:	1fffb8bc 	.long	0x1fffb8bc
1fff61c8:	1fff0894 	.long	0x1fff0894

1fff61cc <ll_processExtInitIRQ>:
{
1fff61cc:	14d4      	push      	r4-r7, r15
1fff61ce:	142d      	subi      	r14, r14, 52
1fff61d0:	6d03      	mov      	r4, r0
    __ASM volatile("mfcr %0, psr" : "=r"(result));
1fff61d2:	c0006023 	mfcr      	r3, cr<0, 0>
1fff61d6:	b868      	st.w      	r3, (r14, 0x20)
    __ASM volatile("psrclr ie");
1fff61d8:	c0807020 	psrclr      	ie
    ll_mode = ll_hw_get_tr_mode();
1fff61dc:	e0002510 	bsr      	0x1fffabfc	// 1fffabfc <check_before_startup+0x524>
    if (ll_mode == LL_HW_MODE_SRX) {
1fff61e0:	3841      	cmpnei      	r0, 1
1fff61e2:	e8600467 	bt      	0x1fff6ab0	// 1fff6ab0 <ll_processExtInitIRQ+0x8e4>
        connPtr = &conn_param[extInitInfo.connId];           // connId is allocated when create conn
1fff61e6:	01ca      	lrw      	r6, 0x1fff0dd4	// 1fff6538 <ll_processExtInitIRQ+0x36c>
1fff61e8:	01aa      	lrw      	r5, 0x1fff1368	// 1fff653c <ll_processExtInitIRQ+0x370>
        osal_memset(&ext_adv_hdr, 0, sizeof(ext_adv_hdr));
1fff61ea:	322c      	movi      	r2, 44
        connPtr = &conn_param[extInitInfo.connId];           // connId is allocated when create conn
1fff61ec:	9660      	ld.w      	r3, (r6, 0x0)
        osal_memset(&ext_adv_hdr, 0, sizeof(ext_adv_hdr));
1fff61ee:	3100      	movi      	r1, 0
        connPtr = &conn_param[extInitInfo.connId];           // connId is allocated when create conn
1fff61f0:	b866      	st.w      	r3, (r14, 0x18)
        if ((irq_status & LIRQ_RD) && (irq_status & LIRQ_COK)) {
1fff61f2:	e4842600 	andi      	r4, r4, 1536
        connPtr = &conn_param[extInitInfo.connId];           // connId is allocated when create conn
1fff61f6:	d865003d 	ld.b      	r3, (r5, 0x3d)
        osal_memset(&ext_adv_hdr, 0, sizeof(ext_adv_hdr));
1fff61fa:	010d      	lrw      	r0, 0x1fff1550	// 1fff6540 <ll_processExtInitIRQ+0x374>
        connPtr = &conn_param[extInitInfo.connId];           // connId is allocated when create conn
1fff61fc:	b867      	st.w      	r3, (r14, 0x1c)
        osal_memset(&ext_adv_hdr, 0, sizeof(ext_adv_hdr));
1fff61fe:	e00022a1 	bsr      	0x1fffa740	// 1fffa740 <check_before_startup+0x68>
        if ((irq_status & LIRQ_RD) && (irq_status & LIRQ_COK)) {
1fff6202:	eb440600 	cmpnei      	r4, 1536
1fff6206:	b8c5      	st.w      	r6, (r14, 0x14)
1fff6208:	b8a0      	st.w      	r5, (r14, 0x0)
1fff620a:	0814      	bt      	0x1fff6232	// 1fff6232 <ll_processExtInitIRQ+0x66>
            packet_len = ll_hw_read_rfifo1((uint8_t *)(&(g_rx_adv_buf.rxheader)),
1fff620c:	0111      	lrw      	r0, 0x1fff17fc	// 1fff6544 <ll_processExtInitIRQ+0x378>
1fff620e:	1b0c      	addi      	r3, r14, 48
1fff6210:	1a0b      	addi      	r2, r14, 44
1fff6212:	e42e0029 	addi      	r1, r14, 42
            pdu_type = g_rx_adv_buf.rxheader & 0x0f;
1fff6216:	01d2      	lrw      	r6, 0x1fff17f8	// 1fff6548 <ll_processExtInitIRQ+0x37c>
            packet_len = ll_hw_read_rfifo1((uint8_t *)(&(g_rx_adv_buf.rxheader)),
1fff6218:	e3fffb32 	bsr      	0x1fff587c	// 1fff587c <ll_hw_read_rfifo1>
1fff621c:	6dc3      	mov      	r7, r0
            pdu_type = g_rx_adv_buf.rxheader & 0x0f;
1fff621e:	8ea2      	ld.h      	r5, (r6, 0x4)
            if (ll_hw_get_rfifo_depth() > 0) {
1fff6220:	e0002566 	bsr      	0x1fffacec	// 1fffacec <check_before_startup+0x614>
1fff6224:	6d1b      	mov      	r4, r6
1fff6226:	3820      	cmplti      	r0, 1
1fff6228:	0820      	bt      	0x1fff6268	// 1fff6268 <ll_processExtInitIRQ+0x9c>
                g_pmCounters.ll_rfifo_read_err++;
1fff622a:	0156      	lrw      	r2, 0x1fff12e0	// 1fff654c <ll_processExtInitIRQ+0x380>
1fff622c:	9279      	ld.w      	r3, (r2, 0x64)
1fff622e:	2300      	addi      	r3, 1
1fff6230:	b279      	st.w      	r3, (r2, 0x64)
            if (extInitInfo.scanMode == LL_SCAN_STOP) {
1fff6232:	9860      	ld.w      	r3, (r14, 0x0)
1fff6234:	8368      	ld.b      	r3, (r3, 0x8)
1fff6236:	3b40      	cmpnei      	r3, 0
1fff6238:	e86003a7 	bt      	0x1fff6986	// 1fff6986 <ll_processExtInitIRQ+0x7ba>
                llState = LL_STATE_IDLE;                                                 // for single connection case, set the LL state idle
1fff623c:	3200      	movi      	r2, 0
1fff623e:	017a      	lrw      	r3, 0x1fff117d	// 1fff6550 <ll_processExtInitIRQ+0x384>
        connPtr = &conn_param[extInitInfo.connId];           // connId is allocated when create conn
1fff6240:	30a1      	movi      	r0, 161
                llState = LL_STATE_IDLE;                                                 // for single connection case, set the LL state idle
1fff6242:	a340      	st.b      	r2, (r3, 0x0)
        connPtr = &conn_param[extInitInfo.connId];           // connId is allocated when create conn
1fff6244:	4002      	lsli      	r0, r0, 2
1fff6246:	9867      	ld.w      	r3, (r14, 0x1c)
1fff6248:	7cc0      	mult      	r3, r0
1fff624a:	6c0f      	mov      	r0, r3
1fff624c:	9866      	ld.w      	r3, (r14, 0x18)
1fff624e:	60c0      	addu      	r3, r0
1fff6250:	6c0f      	mov      	r0, r3
                llReleaseConnId(connPtr);                                                // new for multi-connection
1fff6252:	e000227d 	bsr      	0x1fffa74c	// 1fffa74c <check_before_startup+0x74>
                g_ll_conn_ctx.numLLMasterConns --;
1fff6256:	015f      	lrw      	r2, 0x1fff11c4	// 1fff6554 <ll_processExtInitIRQ+0x388>
                (void)osal_set_event(LL_TaskID, LL_EVT_MASTER_CONN_CANCELLED);           // inform high layer
1fff6258:	3110      	movi      	r1, 16
                g_ll_conn_ctx.numLLMasterConns --;
1fff625a:	8261      	ld.b      	r3, (r2, 0x1)
1fff625c:	2b00      	subi      	r3, 1
1fff625e:	a261      	st.b      	r3, (r2, 0x1)
                (void)osal_set_event(LL_TaskID, LL_EVT_MASTER_CONN_CANCELLED);           // inform high layer
1fff6260:	0261      	lrw      	r3, 0x1fff14ac	// 1fff6558 <ll_processExtInitIRQ+0x38c>
1fff6262:	8300      	ld.b      	r0, (r3, 0x0)
1fff6264:	e800038d 	br      	0x1fff697e	// 1fff697e <ll_processExtInitIRQ+0x7b2>
            if (packet_len   != 0
1fff6268:	3f40      	cmpnei      	r7, 0
1fff626a:	0fe4      	bf      	0x1fff6232	// 1fff6232 <ll_processExtInitIRQ+0x66>
            pdu_type = g_rx_adv_buf.rxheader & 0x0f;
1fff626c:	e465200f 	andi      	r3, r5, 15
                && (pdu_type == ADV_EXT_TYPE)) {
1fff6270:	3b47      	cmpnei      	r3, 7
1fff6272:	0932      	bt      	0x1fff64d6	// 1fff64d6 <ll_processExtInitIRQ+0x30a>
                uint8   payload_len = (g_rx_adv_buf.rxheader & 0xFF00) >> LENGTH_SHIFT;
1fff6274:	8e22      	ld.h      	r1, (r6, 0x4)
                adv_mode    = (g_rx_adv_buf.data[0] & 0xc0) >> 6;
1fff6276:	8666      	ld.b      	r3, (r6, 0x6)
                uint8   payload_len = (g_rx_adv_buf.rxheader & 0xFF00) >> LENGTH_SHIFT;
1fff6278:	4928      	lsri      	r1, r1, 8
                ll_parseExtHeader(&g_rx_adv_buf.data[1], payload_len - 1);
1fff627a:	2900      	subi      	r1, 1
1fff627c:	7445      	zexth      	r1, r1
                adv_mode    = (g_rx_adv_buf.data[0] & 0xc0) >> 6;
1fff627e:	b861      	st.w      	r3, (r14, 0x4)
                ll_parseExtHeader(&g_rx_adv_buf.data[1], payload_len - 1);
1fff6280:	5e1a      	addi      	r0, r6, 7
1fff6282:	e0002577 	bsr      	0x1fffad70	// 1fffad70 <check_before_startup+0x698>
                uint8    txAdd    = (g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT;
1fff6286:	8ea2      	ld.h      	r5, (r6, 0x4)
1fff6288:	55a6      	asri      	r5, r5, 6
1fff628a:	e4a52001 	andi      	r5, r5, 1
                if (txAdd == LL_DEV_ADDR_TYPE_RANDOM   &&
1fff628e:	3d40      	cmpnei      	r5, 0
1fff6290:	0c31      	bf      	0x1fff62f2	// 1fff62f2 <ll_processExtInitIRQ+0x126>
1fff6292:	866b      	ld.b      	r3, (r6, 0xb)
1fff6294:	e46320c0 	andi      	r3, r3, 192
1fff6298:	eb430040 	cmpnei      	r3, 64
1fff629c:	082b      	bt      	0x1fff62f2	// 1fff62f2 <ll_processExtInitIRQ+0x126>
                    if (g_llRlEnable == TRUE) {
1fff629e:	026f      	lrw      	r3, 0x1fff0ddc	// 1fff655c <ll_processExtInitIRQ+0x390>
1fff62a0:	8360      	ld.b      	r3, (r3, 0x0)
1fff62a2:	3b41      	cmpnei      	r3, 1
1fff62a4:	086f      	bt      	0x1fff6382	// 1fff6382 <ll_processExtInitIRQ+0x1b6>
                        rpaListIndex = ll_getRPAListEntry(&g_rx_adv_buf.data[0]);
1fff62a6:	5e16      	addi      	r0, r6, 6
1fff62a8:	e0002486 	bsr      	0x1fffabb4	// 1fffabb4 <check_before_startup+0x4dc>
1fff62ac:	6d03      	mov      	r4, r0
                        if (rpaListIndex < LL_RESOLVINGLIST_ENTRY_NUM) {
1fff62ae:	3807      	cmphsi      	r0, 8
1fff62b0:	086d      	bt      	0x1fff638a	// 1fff638a <ll_processExtInitIRQ+0x1be>
                            peerAddr = &g_llResolvinglist[rpaListIndex].peerAddr[0];
1fff62b2:	332e      	movi      	r3, 46
1fff62b4:	7cc0      	mult      	r3, r0
1fff62b6:	0234      	lrw      	r1, 0x1fff0ff5	// 1fff6560 <ll_processExtInitIRQ+0x394>
                            peerType = g_llResolvinglist[rpaListIndex].peerAddrType;
1fff62b8:	0254      	lrw      	r2, 0x1fff0ff4	// 1fff6564 <ll_processExtInitIRQ+0x398>
                            peerAddr = &g_llResolvinglist[rpaListIndex].peerAddr[0];
1fff62ba:	604c      	addu      	r1, r3
                            peerType = g_llResolvinglist[rpaListIndex].peerAddrType;
1fff62bc:	60c8      	addu      	r3, r2
1fff62be:	83a0      	ld.b      	r5, (r3, 0x0)
                    bWlRlCheckOk = TRUE;
1fff62c0:	3601      	movi      	r6, 1
                if ((pGlobal_config[LL_SWITCH] & LL_WHITELIST_ALLOW)
1fff62c2:	02f5      	lrw      	r7, 0x1fffa670	// 1fff6568 <ll_processExtInitIRQ+0x39c>
1fff62c4:	9760      	ld.w      	r3, (r7, 0x0)
1fff62c6:	936b      	ld.w      	r3, (r3, 0x2c)
1fff62c8:	e4632008 	andi      	r3, r3, 8
1fff62cc:	3b40      	cmpnei      	r3, 0
1fff62ce:	027f      	lrw      	r3, 0x1fff12e0	// 1fff654c <ll_processExtInitIRQ+0x380>
1fff62d0:	0c67      	bf      	0x1fff639e	// 1fff639e <ll_processExtInitIRQ+0x1d2>
                    && (llState == LL_STATE_ADV_UNDIRECTED)
1fff62d2:	025f      	lrw      	r2, 0x1fff117d	// 1fff6550 <ll_processExtInitIRQ+0x384>
1fff62d4:	8240      	ld.b      	r2, (r2, 0x0)
1fff62d6:	3a41      	cmpnei      	r2, 1
1fff62d8:	0863      	bt      	0x1fff639e	// 1fff639e <ll_processExtInitIRQ+0x1d2>
                    && (adv_param.wlPolicy   == LL_ADV_WL_POLICY_WL_CONNECT_REQ
1fff62da:	025a      	lrw      	r2, 0x1fff1528	// 1fff656c <ll_processExtInitIRQ+0x3a0>
                        || adv_param.wlPolicy  == LL_ADV_WL_POLICY_WL_ALL_REQ)
1fff62dc:	824f      	ld.b      	r2, (r2, 0xf)
1fff62de:	2a01      	subi      	r2, 2
                    && (adv_param.wlPolicy   == LL_ADV_WL_POLICY_WL_CONNECT_REQ
1fff62e0:	7488      	zextb      	r2, r2
1fff62e2:	3a01      	cmphsi      	r2, 2
1fff62e4:	085d      	bt      	0x1fff639e	// 1fff639e <ll_processExtInitIRQ+0x1d2>
                    && (bWlRlCheckOk == TRUE)) {
1fff62e6:	3e41      	cmpnei      	r6, 1
1fff62e8:	0c55      	bf      	0x1fff6392	// 1fff6392 <ll_processExtInitIRQ+0x1c6>
                    g_pmCounters.ll_filter_conn_req_cnt ++;
1fff62ea:	934d      	ld.w      	r2, (r3, 0x34)
1fff62ec:	2200      	addi      	r2, 1
1fff62ee:	b34d      	st.w      	r2, (r3, 0x34)
1fff62f0:	07a1      	br      	0x1fff6232	// 1fff6232 <ll_processExtInitIRQ+0x66>
                        if (g_llResolvinglist[i].peerAddr[0] == g_rx_adv_buf.data[0]
1fff62f2:	8466      	ld.b      	r3, (r4, 0x6)
                            && g_llResolvinglist[i].peerAddr[4] == g_rx_adv_buf.data[4]
1fff62f4:	840a      	ld.b      	r0, (r4, 0xa)
                        if (g_llResolvinglist[i].peerAddr[0] == g_rx_adv_buf.data[0]
1fff62f6:	b862      	st.w      	r3, (r14, 0x8)
                            && g_llResolvinglist[i].peerAddr[1] == g_rx_adv_buf.data[1]
1fff62f8:	8467      	ld.b      	r3, (r4, 0x7)
                            && g_llResolvinglist[i].peerAddr[5] == g_rx_adv_buf.data[5]
1fff62fa:	84cb      	ld.b      	r6, (r4, 0xb)
                            && g_llResolvinglist[i].peerAddr[1] == g_rx_adv_buf.data[1]
1fff62fc:	b863      	st.w      	r3, (r14, 0xc)
                            && g_llResolvinglist[i].peerAddr[2] == g_rx_adv_buf.data[2]
1fff62fe:	8468      	ld.b      	r3, (r4, 0x8)
1fff6300:	312e      	movi      	r1, 46
1fff6302:	b864      	st.w      	r3, (r14, 0x10)
                            && g_llResolvinglist[i].peerAddr[3] == g_rx_adv_buf.data[3]
1fff6304:	8469      	ld.b      	r3, (r4, 0x9)
                            && g_llResolvinglist[i].peerAddr[5] == g_rx_adv_buf.data[5]
1fff6306:	3400      	movi      	r4, 0
                            && g_llResolvinglist[i].peerAddr[3] == g_rx_adv_buf.data[3]
1fff6308:	b865      	st.w      	r3, (r14, 0x14)
1fff630a:	0365      	lrw      	r3, 0x1fff0fd4	// 1fff6570 <ll_processExtInitIRQ+0x3a4>
1fff630c:	b869      	st.w      	r3, (r14, 0x24)
                        if (g_llResolvinglist[i].peerAddr[0] == g_rx_adv_buf.data[0]
1fff630e:	d8e30021 	ld.b      	r7, (r3, 0x21)
1fff6312:	9842      	ld.w      	r2, (r14, 0x8)
1fff6314:	649e      	cmpne      	r7, r2
1fff6316:	0831      	bt      	0x1fff6378	// 1fff6378 <ll_processExtInitIRQ+0x1ac>
                            && g_llResolvinglist[i].peerAddr[1] == g_rx_adv_buf.data[1]
1fff6318:	d8e30022 	ld.b      	r7, (r3, 0x22)
1fff631c:	9843      	ld.w      	r2, (r14, 0xc)
1fff631e:	649e      	cmpne      	r7, r2
1fff6320:	082c      	bt      	0x1fff6378	// 1fff6378 <ll_processExtInitIRQ+0x1ac>
                            && g_llResolvinglist[i].peerAddr[2] == g_rx_adv_buf.data[2]
1fff6322:	d8e30023 	ld.b      	r7, (r3, 0x23)
1fff6326:	9844      	ld.w      	r2, (r14, 0x10)
1fff6328:	649e      	cmpne      	r7, r2
1fff632a:	0827      	bt      	0x1fff6378	// 1fff6378 <ll_processExtInitIRQ+0x1ac>
                            && g_llResolvinglist[i].peerAddr[3] == g_rx_adv_buf.data[3]
1fff632c:	d8e30024 	ld.b      	r7, (r3, 0x24)
1fff6330:	9845      	ld.w      	r2, (r14, 0x14)
1fff6332:	649e      	cmpne      	r7, r2
1fff6334:	0822      	bt      	0x1fff6378	// 1fff6378 <ll_processExtInitIRQ+0x1ac>
                            && g_llResolvinglist[i].peerAddr[4] == g_rx_adv_buf.data[4]
1fff6336:	d8e30025 	ld.b      	r7, (r3, 0x25)
1fff633a:	641e      	cmpne      	r7, r0
1fff633c:	081e      	bt      	0x1fff6378	// 1fff6378 <ll_processExtInitIRQ+0x1ac>
                            && g_llResolvinglist[i].peerAddr[5] == g_rx_adv_buf.data[5]
1fff633e:	d8e30026 	ld.b      	r7, (r3, 0x26)
1fff6342:	659e      	cmpne      	r7, r6
1fff6344:	081a      	bt      	0x1fff6378	// 1fff6378 <ll_processExtInitIRQ+0x1ac>
                            && g_llResolvinglist[i].peerAddrType == txAdd) {
1fff6346:	d8e30020 	ld.b      	r7, (r3, 0x20)
1fff634a:	655e      	cmpne      	r7, r5
1fff634c:	0816      	bt      	0x1fff6378	// 1fff6378 <ll_processExtInitIRQ+0x1ac>
                            if (g_llResolvinglist[i].privacyMode == NETWORK_PRIVACY_MODE &&
1fff634e:	302e      	movi      	r0, 46
1fff6350:	7c10      	mult      	r0, r4
1fff6352:	9849      	ld.w      	r2, (r14, 0x24)
1fff6354:	6080      	addu      	r2, r0
1fff6356:	d8620027 	ld.b      	r3, (r2, 0x27)
1fff635a:	3b40      	cmpnei      	r3, 0
1fff635c:	0c04      	bf      	0x1fff6364	// 1fff6364 <ll_processExtInitIRQ+0x198>
                                rpaListIndex = i;
1fff635e:	7510      	zextb      	r4, r4
                peerAddr = &g_rx_adv_buf.data[0];        // initA
1fff6360:	033a      	lrw      	r1, 0x1fff17fe	// 1fff6574 <ll_processExtInitIRQ+0x3a8>
1fff6362:	07af      	br      	0x1fff62c0	// 1fff62c0 <ll_processExtInitIRQ+0xf4>
                                !ll_isIrkAllZero(g_llResolvinglist[i].peerIrk)) {
1fff6364:	037a      	lrw      	r3, 0x1fff0fe4	// 1fff6578 <ll_processExtInitIRQ+0x3ac>
1fff6366:	600c      	addu      	r0, r3
1fff6368:	e00021d4 	bsr      	0x1fffa710	// 1fffa710 <check_before_startup+0x38>
1fff636c:	6d83      	mov      	r6, r0
                            if (g_llResolvinglist[i].privacyMode == NETWORK_PRIVACY_MODE &&
1fff636e:	3840      	cmpnei      	r0, 0
1fff6370:	0bf7      	bt      	0x1fff635e	// 1fff635e <ll_processExtInitIRQ+0x192>
                uint8_t  rpaListIndex = LL_RESOLVINGLIST_ENTRY_NUM;
1fff6372:	3408      	movi      	r4, 8
                peerAddr = &g_rx_adv_buf.data[0];        // initA
1fff6374:	033f      	lrw      	r1, 0x1fff17fe	// 1fff6574 <ll_processExtInitIRQ+0x3a8>
1fff6376:	07a6      	br      	0x1fff62c2	// 1fff62c2 <ll_processExtInitIRQ+0xf6>
                    for (int i = 0; i < LL_RESOLVINGLIST_ENTRY_NUM; i++) {
1fff6378:	2400      	addi      	r4, 1
1fff637a:	3c48      	cmpnei      	r4, 8
1fff637c:	60c4      	addu      	r3, r1
1fff637e:	0bc8      	bt      	0x1fff630e	// 1fff630e <ll_processExtInitIRQ+0x142>
1fff6380:	07f0      	br      	0x1fff6360	// 1fff6360 <ll_processExtInitIRQ+0x194>
1fff6382:	3501      	movi      	r5, 1
                uint8_t  rpaListIndex = LL_RESOLVINGLIST_ENTRY_NUM;
1fff6384:	3408      	movi      	r4, 8
                peerAddr = &g_rx_adv_buf.data[0];        // initA
1fff6386:	5e36      	addi      	r1, r6, 6
1fff6388:	079c      	br      	0x1fff62c0	// 1fff62c0 <ll_processExtInitIRQ+0xf4>
1fff638a:	5e36      	addi      	r1, r6, 6
1fff638c:	3501      	movi      	r5, 1
                        bWlRlCheckOk = FALSE;
1fff638e:	3600      	movi      	r6, 0
1fff6390:	0799      	br      	0x1fff62c2	// 1fff62c2 <ll_processExtInitIRQ+0xf6>
                    bWlRlCheckOk = ll_isAddrInWhiteList(peerType, peerAddr);
1fff6392:	6c17      	mov      	r0, r5
1fff6394:	b862      	st.w      	r3, (r14, 0x8)
1fff6396:	e00021cf 	bsr      	0x1fffa734	// 1fffa734 <check_before_startup+0x5c>
1fff639a:	6d83      	mov      	r6, r0
1fff639c:	9862      	ld.w      	r3, (r14, 0x8)
                if (bWlRlCheckOk == FALSE) { // if not in white list, do nothing
1fff639e:	3e40      	cmpnei      	r6, 0
1fff63a0:	0fa5      	bf      	0x1fff62ea	// 1fff62ea <ll_processExtInitIRQ+0x11e>
                    if (rpaListIndex < LL_RESOLVINGLIST_ENTRY_NUM &&
1fff63a2:	3c07      	cmphsi      	r4, 8
                    g_pmCounters.ll_rx_peer_cnt++;
1fff63a4:	9354      	ld.w      	r2, (r3, 0x50)
1fff63a6:	2200      	addi      	r2, 1
1fff63a8:	b354      	st.w      	r2, (r3, 0x50)
1fff63aa:	13b5      	lrw      	r5, 0x1fff16ec	// 1fff657c <ll_processExtInitIRQ+0x3b0>
                    if (rpaListIndex < LL_RESOLVINGLIST_ENTRY_NUM &&
1fff63ac:	087a      	bt      	0x1fff64a0	// 1fff64a0 <ll_processExtInitIRQ+0x2d4>
                        !ll_isIrkAllZero(g_llResolvinglist[rpaListIndex].localIrk) &&
1fff63ae:	332e      	movi      	r3, 46
1fff63b0:	7d0c      	mult      	r4, r3
1fff63b2:	1370      	lrw      	r3, 0x1fff0fd4	// 1fff6570 <ll_processExtInitIRQ+0x3a4>
1fff63b4:	610c      	addu      	r4, r3
1fff63b6:	6c13      	mov      	r0, r4
1fff63b8:	e00021ac 	bsr      	0x1fffa710	// 1fffa710 <check_before_startup+0x38>
                    if (rpaListIndex < LL_RESOLVINGLIST_ENTRY_NUM &&
1fff63bc:	3840      	cmpnei      	r0, 0
1fff63be:	0871      	bt      	0x1fff64a0	// 1fff64a0 <ll_processExtInitIRQ+0x2d4>
                        (initInfo.ownAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC || initInfo.ownAddrType == LL_DEV_ADDR_TYPE_RPA_RANDOM)) {
1fff63c0:	1370      	lrw      	r3, 0x1fff119e	// 1fff6580 <ll_processExtInitIRQ+0x3b4>
1fff63c2:	8360      	ld.b      	r3, (r3, 0x0)
1fff63c4:	2b01      	subi      	r3, 2
                        !ll_isIrkAllZero(g_llResolvinglist[rpaListIndex].localIrk) &&
1fff63c6:	74cc      	zextb      	r3, r3
1fff63c8:	3b01      	cmphsi      	r3, 2
1fff63ca:	086b      	bt      	0x1fff64a0	// 1fff64a0 <ll_processExtInitIRQ+0x2d4>
                        ll_CalcRandomAddr(g_llResolvinglist[rpaListIndex].localIrk, &g_tx_adv_buf.data[0]);
1fff63cc:	6c13      	mov      	r0, r4
1fff63ce:	5d36      	addi      	r1, r5, 6
1fff63d0:	e00021ac 	bsr      	0x1fffa728	// 1fffa728 <check_before_startup+0x50>
                        SET_BITS(g_tx_adv_buf.txheader, LL_DEV_ADDR_TYPE_RANDOM, TX_ADD_SHIFT, TX_ADD_MASK);
1fff63d4:	8d62      	ld.h      	r3, (r5, 0x4)
                        osal_memcpy(&g_currentLocalRpa[0],  &g_tx_adv_buf.data[0], 6);
1fff63d6:	3206      	movi      	r2, 6
1fff63d8:	130b      	lrw      	r0, 0x1fff15d1	// 1fff6584 <ll_processExtInitIRQ+0x3b8>
                        SET_BITS(g_tx_adv_buf.txheader, LL_DEV_ADDR_TYPE_RANDOM, TX_ADD_SHIFT, TX_ADD_MASK);
1fff63da:	ec630040 	ori      	r3, r3, 64
1fff63de:	ad62      	st.h      	r3, (r5, 0x4)
                        osal_memcpy(&g_currentLocalRpa[0],  &g_tx_adv_buf.data[0], 6);
1fff63e0:	5d36      	addi      	r1, r5, 6
1fff63e2:	e00023d7 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
                        g_currentLocalAddrType = LL_DEV_ADDR_TYPE_RPA_RANDOM;
1fff63e6:	1369      	lrw      	r3, 0x1fff1904	// 1fff6588 <ll_processExtInitIRQ+0x3bc>
1fff63e8:	3203      	movi      	r2, 3
1fff63ea:	a340      	st.b      	r2, (r3, 0x0)
                if (bWlRlCheckOk == TRUE
1fff63ec:	3e41      	cmpnei      	r6, 1
1fff63ee:	0b22      	bt      	0x1fff6232	// 1fff6232 <ll_processExtInitIRQ+0x66>
                    && (adv_mode == LL_EXT_ADV_MODE_CONN)            // connectable adv
1fff63f0:	9861      	ld.w      	r3, (r14, 0x4)
1fff63f2:	4b66      	lsri      	r3, r3, 6
1fff63f4:	3b41      	cmpnei      	r3, 1
1fff63f6:	0b1e      	bt      	0x1fff6232	// 1fff6232 <ll_processExtInitIRQ+0x66>
                    && !(ext_adv_hdr.header & LE_EXT_HDR_AUX_PTR_PRESENT_BITMASK)) {  // AUX_ADV_IND
1fff63f8:	1272      	lrw      	r3, 0x1fff1550	// 1fff6540 <ll_processExtInitIRQ+0x374>
1fff63fa:	8360      	ld.b      	r3, (r3, 0x0)
1fff63fc:	e4632010 	andi      	r3, r3, 16
1fff6400:	3b40      	cmpnei      	r3, 0
1fff6402:	0b18      	bt      	0x1fff6232	// 1fff6232 <ll_processExtInitIRQ+0x66>
                    g_same_rf_channel_flag = TRUE;
1fff6404:	3301      	movi      	r3, 1
1fff6406:	1382      	lrw      	r4, 0x1fff0e2c	// 1fff658c <ll_processExtInitIRQ+0x3c0>
1fff6408:	a460      	st.b      	r3, (r4, 0x0)
                    llSetupAuxConnectReqPDU();
1fff640a:	e0002237 	bsr      	0x1fffa878	// 1fffa878 <check_before_startup+0x1a0>
                    ll_hw_set_tx_rx_interval(10);
1fff640e:	300a      	movi      	r0, 10
1fff6410:	e00023a8 	bsr      	0x1fffab60	// 1fffab60 <check_before_startup+0x488>
                    ll_hw_set_rx_timeout(158);
1fff6414:	309e      	movi      	r0, 158
1fff6416:	e0002213 	bsr      	0x1fffa83c	// 1fffa83c <check_before_startup+0x164>
                    set_max_length(50);
1fff641a:	3032      	movi      	r0, 50
1fff641c:	e000234e 	bsr      	0x1fffaab8	// 1fffaab8 <check_before_startup+0x3e0>
                    T2 = read_current_fine_time();
1fff6420:	e000237c 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
                    delay = (T2 > ISR_entry_time) ? (T2 - ISR_entry_time) : (BASE_TIME_UNITS - ISR_entry_time + T2);
1fff6424:	127b      	lrw      	r3, 0x1fff0e1c	// 1fff6590 <ll_processExtInitIRQ+0x3c4>
1fff6426:	9360      	ld.w      	r3, (r3, 0x0)
1fff6428:	640c      	cmphs      	r3, r0
1fff642a:	600e      	subu      	r0, r3
1fff642c:	0851      	bt      	0x1fff64ce	// 1fff64ce <ll_processExtInitIRQ+0x302>
                    delay = 118 - delay - pGlobal_config[LL_ADV_TO_CONN_REQ_DELAY];
1fff642e:	9760      	ld.w      	r3, (r7, 0x0)
                    ll_hw_set_trx_settle(delay,                               // set BB delay, about 80us in 16MHz HCLK
1fff6430:	d8430044 	ld.b      	r2, (r3, 0x44)
1fff6434:	d8230040 	ld.b      	r1, (r3, 0x40)
                    delay = 118 - delay - pGlobal_config[LL_ADV_TO_CONN_REQ_DELAY];
1fff6438:	d8c32028 	ld.w      	r6, (r3, 0xa0)
1fff643c:	3376      	movi      	r3, 118
1fff643e:	60da      	subu      	r3, r6
1fff6440:	5b01      	subu      	r0, r3, r0
                    ll_hw_set_trx_settle(delay,                               // set BB delay, about 80us in 16MHz HCLK
1fff6442:	7400      	zextb      	r0, r0
1fff6444:	e000247e 	bsr      	0x1fffad40	// 1fffad40 <check_before_startup+0x668>
                    ll_hw_set_trx();             // set LL HW as single Tx mode
1fff6448:	e0002212 	bsr      	0x1fffa86c	// 1fffa86c <check_before_startup+0x194>
                    ll_hw_go();
1fff644c:	e0002384 	bsr      	0x1fffab54	// 1fffab54 <check_before_startup+0x47c>
                    ll_hw_rst_rfifo();
1fff6450:	e00022ec 	bsr      	0x1fffaa28	// 1fffaa28 <check_before_startup+0x350>
                    ll_hw_rst_tfifo();
1fff6454:	e0002428 	bsr      	0x1fffaca4	// 1fffaca4 <check_before_startup+0x5cc>
                    ll_hw_ign_rfifo(LL_HW_IGN_CRC | LL_HW_IGN_EMP);
1fff6458:	3003      	movi      	r0, 3
1fff645a:	e00023dd 	bsr      	0x1fffac14	// 1fffac14 <check_before_startup+0x53c>
                    llWaitingIrq = TRUE;
1fff645e:	126e      	lrw      	r3, 0x1fff0df8	// 1fff6594 <ll_processExtInitIRQ+0x3c8>
1fff6460:	3201      	movi      	r2, 1
                    osal_memcpy((uint8 *)&g_tx_adv_buf.data[6], &ext_adv_hdr.advA[0], 6);
1fff6462:	122e      	lrw      	r1, 0x1fff1551	// 1fff6598 <ll_processExtInitIRQ+0x3cc>
                    llWaitingIrq = TRUE;
1fff6464:	b340      	st.w      	r2, (r3, 0x0)
                    osal_memcpy((uint8 *)&g_tx_adv_buf.data[6], &ext_adv_hdr.advA[0], 6);
1fff6466:	120e      	lrw      	r0, 0x1fff16f8	// 1fff659c <ll_processExtInitIRQ+0x3d0>
1fff6468:	3206      	movi      	r2, 6
1fff646a:	e0002393 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
                    ll_hw_write_tfifo((uint8 *) & (g_tx_adv_buf.txheader),
1fff646e:	120d      	lrw      	r0, 0x1fff16f0	// 1fff65a0 <ll_processExtInitIRQ+0x3d4>
                                      ((g_tx_adv_buf.txheader & 0xff00) >> 8) + 2);   // payload length + header length(2)
1fff6470:	8d22      	ld.h      	r1, (r5, 0x4)
1fff6472:	4928      	lsri      	r1, r1, 8
                    ll_hw_write_tfifo((uint8 *) & (g_tx_adv_buf.txheader),
1fff6474:	2101      	addi      	r1, 2
1fff6476:	e0002135 	bsr      	0x1fffa6e0	// 1fffa6e0 <check_before_startup+0x8>
                    move_to_master_function();
1fff647a:	e0002385 	bsr      	0x1fffab84	// 1fffab84 <check_before_startup+0x4ac>
                    g_same_rf_channel_flag = FALSE;
1fff647e:	3300      	movi      	r3, 0
1fff6480:	a460      	st.b      	r3, (r4, 0x0)
    if (!llWaitingIrq) {
1fff6482:	1265      	lrw      	r3, 0x1fff0df8	// 1fff6594 <ll_processExtInitIRQ+0x3c8>
1fff6484:	9360      	ld.w      	r3, (r3, 0x0)
1fff6486:	3b40      	cmpnei      	r3, 0
1fff6488:	0806      	bt      	0x1fff6494	// 1fff6494 <ll_processExtInitIRQ+0x2c8>
        ll_hw_clr_irq();
1fff648a:	e00021c7 	bsr      	0x1fffa818	// 1fffa818 <check_before_startup+0x140>
        llTaskState = LL_TASK_OTHERS;
1fff648e:	1266      	lrw      	r3, 0x1fff15d0	// 1fff65a4 <ll_processExtInitIRQ+0x3d8>
1fff6490:	3210      	movi      	r2, 16
1fff6492:	a340      	st.b      	r2, (r3, 0x0)
    __ASM volatile("mtcr %0, psr" : : "r"(psr));
1fff6494:	9868      	ld.w      	r3, (r14, 0x20)
1fff6496:	c0036420 	mtcr      	r3, cr<0, 0>
}
1fff649a:	3001      	movi      	r0, 1
1fff649c:	140d      	addi      	r14, r14, 52
1fff649e:	1494      	pop      	r4-r7, r15
                        if (extInitInfo.ownAddrType == LL_DEV_ADDR_TYPE_PUBLIC || extInitInfo.ownAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC) {
1fff64a0:	9860      	ld.w      	r3, (r14, 0x0)
                            osal_memcpy((uint8 *)&g_tx_adv_buf.data[0], &ownPublicAddr[0], 6);
1fff64a2:	3206      	movi      	r2, 6
                        if (extInitInfo.ownAddrType == LL_DEV_ADDR_TYPE_PUBLIC || extInitInfo.ownAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC) {
1fff64a4:	8360      	ld.b      	r3, (r3, 0x0)
1fff64a6:	e46320fd 	andi      	r3, r3, 253
1fff64aa:	3b40      	cmpnei      	r3, 0
1fff64ac:	0809      	bt      	0x1fff64be	// 1fff64be <ll_processExtInitIRQ+0x2f2>
                            osal_memcpy((uint8 *)&g_tx_adv_buf.data[0], &ownPublicAddr[0], 6);
1fff64ae:	113f      	lrw      	r1, 0x1fff1185	// 1fff65a8 <ll_processExtInitIRQ+0x3dc>
1fff64b0:	111f      	lrw      	r0, 0x1fff16f2	// 1fff65ac <ll_processExtInitIRQ+0x3e0>
1fff64b2:	e000236f 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
                            SET_BITS(g_tx_adv_buf.txheader, LL_DEV_ADDR_TYPE_PUBLIC, TX_ADD_SHIFT, TX_ADD_MASK);
1fff64b6:	8d62      	ld.h      	r3, (r5, 0x4)
1fff64b8:	3b86      	bclri      	r3, 6
                            SET_BITS(g_tx_adv_buf.txheader, LL_DEV_ADDR_TYPE_RANDOM, TX_ADD_SHIFT, TX_ADD_MASK);
1fff64ba:	ad62      	st.h      	r3, (r5, 0x4)
1fff64bc:	0798      	br      	0x1fff63ec	// 1fff63ec <ll_processExtInitIRQ+0x220>
                            osal_memcpy((uint8 *)&g_tx_adv_buf.data[0], &ownRandomAddr[0], 6);
1fff64be:	113d      	lrw      	r1, 0x1fff1548	// 1fff65b0 <ll_processExtInitIRQ+0x3e4>
1fff64c0:	111b      	lrw      	r0, 0x1fff16f2	// 1fff65ac <ll_processExtInitIRQ+0x3e0>
1fff64c2:	e0002367 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
                            SET_BITS(g_tx_adv_buf.txheader, LL_DEV_ADDR_TYPE_RANDOM, TX_ADD_SHIFT, TX_ADD_MASK);
1fff64c6:	8d62      	ld.h      	r3, (r5, 0x4)
1fff64c8:	ec630040 	ori      	r3, r3, 64
1fff64cc:	07f7      	br      	0x1fff64ba	// 1fff64ba <ll_processExtInitIRQ+0x2ee>
                    delay = (T2 > ISR_entry_time) ? (T2 - ISR_entry_time) : (BASE_TIME_UNITS - ISR_entry_time + T2);
1fff64ce:	c6a05023 	bmaski      	r3, 22
1fff64d2:	600c      	addu      	r0, r3
1fff64d4:	07ad      	br      	0x1fff642e	// 1fff642e <ll_processExtInitIRQ+0x262>
                       && ((pdu_type == ADV_IND) || pdu_type == ADV_DIRECT_IND)) {
1fff64d6:	3b01      	cmphsi      	r3, 2
1fff64d8:	0aad      	bt      	0x1fff6232	// 1fff6232 <ll_processExtInitIRQ+0x66>
                uint8_t txAdd = (g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT;    // adv PDU header, bit 6: TxAdd, 0 - public, 1 - random
1fff64da:	8e42      	ld.h      	r2, (r6, 0x4)
1fff64dc:	b844      	st.w      	r2, (r14, 0x10)
1fff64de:	5246      	asri      	r2, r2, 6
1fff64e0:	e4422001 	andi      	r2, r2, 1
1fff64e4:	b842      	st.w      	r2, (r14, 0x8)
                g_currentPeerAddrType = txAdd;
1fff64e6:	1154      	lrw      	r2, 0x1fff191a	// 1fff65b4 <ll_processExtInitIRQ+0x3e8>
1fff64e8:	d82e0008 	ld.b      	r1, (r14, 0x8)
1fff64ec:	b843      	st.w      	r2, (r14, 0xc)
1fff64ee:	a220      	st.b      	r1, (r2, 0x0)
                if (txAdd == LL_DEV_ADDR_TYPE_RANDOM  &&
1fff64f0:	9822      	ld.w      	r1, (r14, 0x8)
1fff64f2:	3940      	cmpnei      	r1, 0
1fff64f4:	0cee      	bf      	0x1fff66d0	// 1fff66d0 <ll_processExtInitIRQ+0x504>
                    ((g_rx_adv_buf.data[5] & RANDOM_ADDR_HDR) == PRIVATE_RESOLVE_ADDR_HDR)) {
1fff64f6:	862b      	ld.b      	r1, (r6, 0xb)
                if (txAdd == LL_DEV_ADDR_TYPE_RANDOM  &&
1fff64f8:	e44120c0 	andi      	r2, r1, 192
1fff64fc:	eb420040 	cmpnei      	r2, 64
1fff6500:	08e8      	bt      	0x1fff66d0	// 1fff66d0 <ll_processExtInitIRQ+0x504>
                    if (g_llRlEnable == TRUE) {
1fff6502:	1057      	lrw      	r2, 0x1fff0ddc	// 1fff655c <ll_processExtInitIRQ+0x390>
1fff6504:	8240      	ld.b      	r2, (r2, 0x0)
1fff6506:	3a41      	cmpnei      	r2, 1
1fff6508:	e86002f2 	bt      	0x1fff6aec	// 1fff6aec <ll_processExtInitIRQ+0x920>
                        if (isPeerRpaStore  == TRUE  &&
1fff650c:	114b      	lrw      	r2, 0x1fff0e2d	// 1fff65b8 <ll_processExtInitIRQ+0x3ec>
1fff650e:	8240      	ld.b      	r2, (r2, 0x0)
1fff6510:	3a41      	cmpnei      	r2, 1
1fff6512:	08a7      	bt      	0x1fff6660	// 1fff6660 <ll_processExtInitIRQ+0x494>
                            currentPeerRpa[0] == g_rx_adv_buf.data[0]
1fff6514:	114a      	lrw      	r2, 0x1fff1914	// 1fff65bc <ll_processExtInitIRQ+0x3f0>
                        if (isPeerRpaStore  == TRUE  &&
1fff6516:	8606      	ld.b      	r0, (r6, 0x6)
1fff6518:	82a0      	ld.b      	r5, (r2, 0x0)
1fff651a:	6416      	cmpne      	r5, r0
1fff651c:	08a2      	bt      	0x1fff6660	// 1fff6660 <ll_processExtInitIRQ+0x494>
                            && currentPeerRpa[1] == g_rx_adv_buf.data[1]
1fff651e:	82a1      	ld.b      	r5, (r2, 0x1)
1fff6520:	8607      	ld.b      	r0, (r6, 0x7)
1fff6522:	6416      	cmpne      	r5, r0
1fff6524:	089e      	bt      	0x1fff6660	// 1fff6660 <ll_processExtInitIRQ+0x494>
                            && currentPeerRpa[2] == g_rx_adv_buf.data[2]
1fff6526:	82a2      	ld.b      	r5, (r2, 0x2)
1fff6528:	8608      	ld.b      	r0, (r6, 0x8)
1fff652a:	6416      	cmpne      	r5, r0
1fff652c:	089a      	bt      	0x1fff6660	// 1fff6660 <ll_processExtInitIRQ+0x494>
                            && currentPeerRpa[3] == g_rx_adv_buf.data[3]
1fff652e:	82a3      	ld.b      	r5, (r2, 0x3)
1fff6530:	8609      	ld.b      	r0, (r6, 0x9)
1fff6532:	6416      	cmpne      	r5, r0
1fff6534:	0896      	bt      	0x1fff6660	// 1fff6660 <ll_processExtInitIRQ+0x494>
1fff6536:	0445      	br      	0x1fff65c0	// 1fff65c0 <ll_processExtInitIRQ+0x3f4>
1fff6538:	1fff0dd4 	.long	0x1fff0dd4
1fff653c:	1fff1368 	.long	0x1fff1368
1fff6540:	1fff1550 	.long	0x1fff1550
1fff6544:	1fff17fc 	.long	0x1fff17fc
1fff6548:	1fff17f8 	.long	0x1fff17f8
1fff654c:	1fff12e0 	.long	0x1fff12e0
1fff6550:	1fff117d 	.long	0x1fff117d
1fff6554:	1fff11c4 	.long	0x1fff11c4
1fff6558:	1fff14ac 	.long	0x1fff14ac
1fff655c:	1fff0ddc 	.long	0x1fff0ddc
1fff6560:	1fff0ff5 	.long	0x1fff0ff5
1fff6564:	1fff0ff4 	.long	0x1fff0ff4
1fff6568:	1fffa670 	.long	0x1fffa670
1fff656c:	1fff1528 	.long	0x1fff1528
1fff6570:	1fff0fd4 	.long	0x1fff0fd4
1fff6574:	1fff17fe 	.long	0x1fff17fe
1fff6578:	1fff0fe4 	.long	0x1fff0fe4
1fff657c:	1fff16ec 	.long	0x1fff16ec
1fff6580:	1fff119e 	.long	0x1fff119e
1fff6584:	1fff15d1 	.long	0x1fff15d1
1fff6588:	1fff1904 	.long	0x1fff1904
1fff658c:	1fff0e2c 	.long	0x1fff0e2c
1fff6590:	1fff0e1c 	.long	0x1fff0e1c
1fff6594:	1fff0df8 	.long	0x1fff0df8
1fff6598:	1fff1551 	.long	0x1fff1551
1fff659c:	1fff16f8 	.long	0x1fff16f8
1fff65a0:	1fff16f0 	.long	0x1fff16f0
1fff65a4:	1fff15d0 	.long	0x1fff15d0
1fff65a8:	1fff1185 	.long	0x1fff1185
1fff65ac:	1fff16f2 	.long	0x1fff16f2
1fff65b0:	1fff1548 	.long	0x1fff1548
1fff65b4:	1fff191a 	.long	0x1fff191a
1fff65b8:	1fff0e2d 	.long	0x1fff0e2d
1fff65bc:	1fff1914 	.long	0x1fff1914
                            && currentPeerRpa[4] == g_rx_adv_buf.data[4]
1fff65c0:	82a4      	ld.b      	r5, (r2, 0x4)
1fff65c2:	860a      	ld.b      	r0, (r6, 0xa)
1fff65c4:	6416      	cmpne      	r5, r0
1fff65c6:	084d      	bt      	0x1fff6660	// 1fff6660 <ll_processExtInitIRQ+0x494>
                            && currentPeerRpa[5] == g_rx_adv_buf.data[5]) {
1fff65c8:	8245      	ld.b      	r2, (r2, 0x5)
1fff65ca:	644a      	cmpne      	r2, r1
1fff65cc:	084a      	bt      	0x1fff6660	// 1fff6660 <ll_processExtInitIRQ+0x494>
                            rpaListIndex = storeRpaListIndex;
1fff65ce:	0171      	lrw      	r3, 0x1fff191b	// 1fff6904 <ll_processExtInitIRQ+0x738>
                            peerAddr = &g_llResolvinglist[rpaListIndex].peerAddr[0];
1fff65d0:	01f1      	lrw      	r7, 0x1fff0ff5	// 1fff6908 <ll_processExtInitIRQ+0x73c>
                            rpaListIndex = storeRpaListIndex;
1fff65d2:	8360      	ld.b      	r3, (r3, 0x0)
1fff65d4:	b861      	st.w      	r3, (r14, 0x4)
                            peerAddr = &g_llResolvinglist[rpaListIndex].peerAddr[0];
1fff65d6:	332e      	movi      	r3, 46
1fff65d8:	9841      	ld.w      	r2, (r14, 0x4)
1fff65da:	7cc8      	mult      	r3, r2
                            g_currentPeerAddrType = g_llResolvinglist[rpaListIndex].peerAddrType + 2;
1fff65dc:	0153      	lrw      	r2, 0x1fff0ff4	// 1fff690c <ll_processExtInitIRQ+0x740>
                            peerAddr = &g_llResolvinglist[rpaListIndex].peerAddr[0];
1fff65de:	61cc      	addu      	r7, r3
                            g_currentPeerAddrType = g_llResolvinglist[rpaListIndex].peerAddrType + 2;
1fff65e0:	60c8      	addu      	r3, r2
1fff65e2:	9843      	ld.w      	r2, (r14, 0xc)
1fff65e4:	8360      	ld.b      	r3, (r3, 0x0)
1fff65e6:	2301      	addi      	r3, 2
1fff65e8:	a260      	st.b      	r3, (r2, 0x0)
                if (pdu_type == ADV_DIRECT_IND && bWlRlCheckOk == TRUE && bMatchAdv != TRUE) {
1fff65ea:	98a2      	ld.w      	r5, (r14, 0x8)
                if (initInfo.wlPolicy == LL_INIT_WL_POLICY_USE_PEER_ADDR
1fff65ec:	01d6      	lrw      	r6, 0x1fff119e	// 1fff6910 <ll_processExtInitIRQ+0x744>
1fff65ee:	866f      	ld.b      	r3, (r6, 0xf)
1fff65f0:	3b40      	cmpnei      	r3, 0
1fff65f2:	08dc      	bt      	0x1fff67aa	// 1fff67aa <ll_processExtInitIRQ+0x5de>
                    && bWlRlCheckOk == TRUE) {
1fff65f4:	3d41      	cmpnei      	r5, 1
1fff65f6:	0a1e      	bt      	0x1fff6232	// 1fff6232 <ll_processExtInitIRQ+0x66>
                    if (peerAddr[0]  != peerInfo.peerAddr[0]
1fff65f8:	0178      	lrw      	r3, 0x1fff11ba	// 1fff6914 <ll_processExtInitIRQ+0x748>
1fff65fa:	8720      	ld.b      	r1, (r7, 0x0)
1fff65fc:	8341      	ld.b      	r2, (r3, 0x1)
1fff65fe:	6486      	cmpne      	r1, r2
1fff6600:	0a19      	bt      	0x1fff6232	// 1fff6232 <ll_processExtInitIRQ+0x66>
                        || peerAddr[1]  != peerInfo.peerAddr[1]
1fff6602:	8721      	ld.b      	r1, (r7, 0x1)
1fff6604:	8342      	ld.b      	r2, (r3, 0x2)
1fff6606:	6486      	cmpne      	r1, r2
1fff6608:	0a15      	bt      	0x1fff6232	// 1fff6232 <ll_processExtInitIRQ+0x66>
                        || peerAddr[2]  != peerInfo.peerAddr[2]
1fff660a:	8722      	ld.b      	r1, (r7, 0x2)
1fff660c:	8343      	ld.b      	r2, (r3, 0x3)
1fff660e:	6486      	cmpne      	r1, r2
1fff6610:	0a11      	bt      	0x1fff6232	// 1fff6232 <ll_processExtInitIRQ+0x66>
                        || peerAddr[3]  != peerInfo.peerAddr[3]
1fff6612:	8723      	ld.b      	r1, (r7, 0x3)
1fff6614:	8344      	ld.b      	r2, (r3, 0x4)
1fff6616:	6486      	cmpne      	r1, r2
1fff6618:	0a0d      	bt      	0x1fff6232	// 1fff6232 <ll_processExtInitIRQ+0x66>
                        || peerAddr[4]  != peerInfo.peerAddr[4]
1fff661a:	8724      	ld.b      	r1, (r7, 0x4)
1fff661c:	8345      	ld.b      	r2, (r3, 0x5)
1fff661e:	6486      	cmpne      	r1, r2
1fff6620:	0a09      	bt      	0x1fff6232	// 1fff6232 <ll_processExtInitIRQ+0x66>
                        || peerAddr[5]  != peerInfo.peerAddr[5]) {
1fff6622:	8745      	ld.b      	r2, (r7, 0x5)
1fff6624:	8366      	ld.b      	r3, (r3, 0x6)
1fff6626:	64ca      	cmpne      	r2, r3
1fff6628:	0a05      	bt      	0x1fff6232	// 1fff6232 <ll_processExtInitIRQ+0x66>
                    g_same_rf_channel_flag = TRUE;
1fff662a:	3301      	movi      	r3, 1
1fff662c:	02a4      	lrw      	r5, 0x1fff0e2c	// 1fff6918 <ll_processExtInitIRQ+0x74c>
                    if ((pGlobal_config[LL_SWITCH] & CONN_CSA2_ALLOW)
1fff662e:	02e3      	lrw      	r7, 0x1fffa670	// 1fff691c <ll_processExtInitIRQ+0x750>
1fff6630:	0283      	lrw      	r4, 0x1fff16ec	// 1fff6920 <ll_processExtInitIRQ+0x754>
                    g_same_rf_channel_flag = TRUE;
1fff6632:	a560      	st.b      	r3, (r5, 0x0)
                    llSetupAuxConnectReqPDU();
1fff6634:	e0002122 	bsr      	0x1fffa878	// 1fffa878 <check_before_startup+0x1a0>
                    if ((pGlobal_config[LL_SWITCH] & CONN_CSA2_ALLOW)
1fff6638:	9760      	ld.w      	r3, (r7, 0x0)
1fff663a:	b8a2      	st.w      	r5, (r14, 0x8)
1fff663c:	936b      	ld.w      	r3, (r3, 0x2c)
1fff663e:	e4632080 	andi      	r3, r3, 128
1fff6642:	3b40      	cmpnei      	r3, 0
1fff6644:	08bf      	bt      	0x1fff67c2	// 1fff67c2 <ll_processExtInitIRQ+0x5f6>
                        conn_param[initInfo.connId].channel_selection = LL_CHN_SEL_ALGORITHM_1;
1fff6646:	9865      	ld.w      	r3, (r14, 0x14)
1fff6648:	31a1      	movi      	r1, 161
1fff664a:	8650      	ld.b      	r2, (r6, 0x10)
1fff664c:	4122      	lsli      	r1, r1, 2
1fff664e:	7c84      	mult      	r2, r1
1fff6650:	9360      	ld.w      	r3, (r3, 0x0)
1fff6652:	60c8      	addu      	r3, r2
1fff6654:	3200      	movi      	r2, 0
1fff6656:	dc43020d 	st.b      	r2, (r3, 0x20d)
                        SET_BITS(g_tx_adv_buf.txheader, LL_CHN_SEL_ALGORITHM_1, CHSEL_SHIFT, CHSEL_MASK);
1fff665a:	8c62      	ld.h      	r3, (r4, 0x4)
1fff665c:	3b85      	bclri      	r3, 5
1fff665e:	04c6      	br      	0x1fff67ea	// 1fff67ea <ll_processExtInitIRQ+0x61e>
                            rpaListIndex = ll_getRPAListEntry(&g_rx_adv_buf.data[0]);    // spend 30us(48MHz) when the 1st item match
1fff6660:	020e      	lrw      	r0, 0x1fff17fe	// 1fff6924 <ll_processExtInitIRQ+0x758>
1fff6662:	6d4f      	mov      	r5, r3
1fff6664:	e00022a8 	bsr      	0x1fffabb4	// 1fffabb4 <check_before_startup+0x4dc>
                            if (rpaListIndex < LL_RESOLVINGLIST_ENTRY_NUM) {
1fff6668:	3807      	cmphsi      	r0, 8
                            rpaListIndex = ll_getRPAListEntry(&g_rx_adv_buf.data[0]);    // spend 30us(48MHz) when the 1st item match
1fff666a:	b801      	st.w      	r0, (r14, 0x4)
                            if (rpaListIndex < LL_RESOLVINGLIST_ENTRY_NUM) {
1fff666c:	e8600242 	bt      	0x1fff6af0	// 1fff6af0 <ll_processExtInitIRQ+0x924>
                                peerAddr = &g_llResolvinglist[rpaListIndex].peerAddr[0];
1fff6670:	322e      	movi      	r2, 46
1fff6672:	7c80      	mult      	r2, r0
                                g_currentPeerAddrType = g_llResolvinglist[rpaListIndex].peerAddrType + 2;
1fff6674:	0279      	lrw      	r3, 0x1fff0ff4	// 1fff690c <ll_processExtInitIRQ+0x740>
                                peerAddr = &g_llResolvinglist[rpaListIndex].peerAddr[0];
1fff6676:	02fa      	lrw      	r7, 0x1fff0ff5	// 1fff6908 <ll_processExtInitIRQ+0x73c>
                if (pdu_type == ADV_DIRECT_IND && bWlRlCheckOk == TRUE && bMatchAdv != TRUE) {
1fff6678:	3d41      	cmpnei      	r5, 1
                                peerAddr = &g_llResolvinglist[rpaListIndex].peerAddr[0];
1fff667a:	61c8      	addu      	r7, r2
                                g_currentPeerAddrType = g_llResolvinglist[rpaListIndex].peerAddrType + 2;
1fff667c:	608c      	addu      	r2, r3
1fff667e:	9863      	ld.w      	r3, (r14, 0xc)
1fff6680:	8240      	ld.b      	r2, (r2, 0x0)
1fff6682:	2201      	addi      	r2, 2
1fff6684:	a340      	st.b      	r2, (r3, 0x0)
                if (pdu_type == ADV_DIRECT_IND && bWlRlCheckOk == TRUE && bMatchAdv != TRUE) {
1fff6686:	0bb2      	bt      	0x1fff65ea	// 1fff65ea <ll_processExtInitIRQ+0x41e>
                    if ((g_rx_adv_buf.data[11] & RANDOM_ADDR_HDR) == PRIVATE_RESOLVE_ADDR_HDR) {
1fff6688:	8471      	ld.b      	r3, (r4, 0x11)
1fff668a:	e46320c0 	andi      	r3, r3, 192
1fff668e:	eb430040 	cmpnei      	r3, 64
1fff6692:	027f      	lrw      	r3, 0x1fff119e	// 1fff6910 <ll_processExtInitIRQ+0x744>
1fff6694:	0853      	bt      	0x1fff673a	// 1fff673a <ll_processExtInitIRQ+0x56e>
                        if (initInfo.ownAddrType != LL_DEV_ADDR_TYPE_RPA_PUBLIC && initInfo.ownAddrType != LL_DEV_ADDR_TYPE_RPA_RANDOM) {
1fff6696:	8360      	ld.b      	r3, (r3, 0x0)
1fff6698:	2b01      	subi      	r3, 2
1fff669a:	74cc      	zextb      	r3, r3
1fff669c:	3b01      	cmphsi      	r3, 2
                        if (rpaListIndex >= LL_RESOLVINGLIST_ENTRY_NUM
1fff669e:	9861      	ld.w      	r3, (r14, 0x4)
                        if (initInfo.ownAddrType != LL_DEV_ADDR_TYPE_RPA_PUBLIC && initInfo.ownAddrType != LL_DEV_ADDR_TYPE_RPA_RANDOM) {
1fff66a0:	6503      	mvcv      	r4
                        if (rpaListIndex >= LL_RESOLVINGLIST_ENTRY_NUM
1fff66a2:	3b48      	cmpnei      	r3, 8
                            bWlRlCheckOk = FALSE;
1fff66a4:	7510      	zextb      	r4, r4
                        if (rpaListIndex >= LL_RESOLVINGLIST_ENTRY_NUM
1fff66a6:	e8400226 	bf      	0x1fff6af2	// 1fff6af2 <ll_processExtInitIRQ+0x926>
                            || (ll_isIrkAllZero(g_llResolvinglist[rpaListIndex].localIrk))    // all-0 local IRK
1fff66aa:	362e      	movi      	r6, 46
1fff66ac:	7d8c      	mult      	r6, r3
1fff66ae:	0360      	lrw      	r3, 0x1fff0fd4	// 1fff6928 <ll_processExtInitIRQ+0x75c>
1fff66b0:	618c      	addu      	r6, r3
1fff66b2:	6c1b      	mov      	r0, r6
1fff66b4:	e000202e 	bsr      	0x1fffa710	// 1fffa710 <check_before_startup+0x38>
1fff66b8:	6d43      	mov      	r5, r0
1fff66ba:	3840      	cmpnei      	r0, 0
1fff66bc:	e860021b 	bt      	0x1fff6af2	// 1fff6af2 <ll_processExtInitIRQ+0x926>
                            || (ll_ResolveRandomAddrs(g_llResolvinglist[rpaListIndex].localIrk, &g_rx_adv_buf.data[6]) != SUCCESS)) { // resolve failed
1fff66c0:	0324      	lrw      	r1, 0x1fff1804	// 1fff692c <ll_processExtInitIRQ+0x760>
1fff66c2:	6c1b      	mov      	r0, r6
1fff66c4:	e000207a 	bsr      	0x1fffa7b8	// 1fffa7b8 <check_before_startup+0xe0>
1fff66c8:	3840      	cmpnei      	r0, 0
1fff66ca:	c4a40c20 	incf      	r5, r4, 0
1fff66ce:	078f      	br      	0x1fff65ec	// 1fff65ec <ll_processExtInitIRQ+0x420>
                peerAddr = &g_rx_adv_buf.data[0];        // initA
1fff66d0:	3208      	movi      	r2, 8
1fff66d2:	03c7      	lrw      	r6, 0x1fff0fe4	// 1fff6930 <ll_processExtInitIRQ+0x764>
1fff66d4:	3700      	movi      	r7, 0
1fff66d6:	b841      	st.w      	r2, (r14, 0x4)
1fff66d8:	3501      	movi      	r5, 1
                        if (g_llResolvinglist[i].peerAddr[0] == g_rx_adv_buf.data[0]
1fff66da:	8631      	ld.b      	r1, (r6, 0x11)
1fff66dc:	8446      	ld.b      	r2, (r4, 0x6)
1fff66de:	6486      	cmpne      	r1, r2
1fff66e0:	081a      	bt      	0x1fff6714	// 1fff6714 <ll_processExtInitIRQ+0x548>
                            && g_llResolvinglist[i].peerAddr[1] == g_rx_adv_buf.data[1]
1fff66e2:	8632      	ld.b      	r1, (r6, 0x12)
1fff66e4:	8447      	ld.b      	r2, (r4, 0x7)
1fff66e6:	6486      	cmpne      	r1, r2
1fff66e8:	0816      	bt      	0x1fff6714	// 1fff6714 <ll_processExtInitIRQ+0x548>
                            && g_llResolvinglist[i].peerAddr[2] == g_rx_adv_buf.data[2]
1fff66ea:	8633      	ld.b      	r1, (r6, 0x13)
1fff66ec:	8448      	ld.b      	r2, (r4, 0x8)
1fff66ee:	6486      	cmpne      	r1, r2
1fff66f0:	0812      	bt      	0x1fff6714	// 1fff6714 <ll_processExtInitIRQ+0x548>
                            && g_llResolvinglist[i].peerAddr[3] == g_rx_adv_buf.data[3]
1fff66f2:	8634      	ld.b      	r1, (r6, 0x14)
1fff66f4:	8449      	ld.b      	r2, (r4, 0x9)
1fff66f6:	6486      	cmpne      	r1, r2
1fff66f8:	080e      	bt      	0x1fff6714	// 1fff6714 <ll_processExtInitIRQ+0x548>
                            && g_llResolvinglist[i].peerAddr[4] == g_rx_adv_buf.data[4]
1fff66fa:	8635      	ld.b      	r1, (r6, 0x15)
1fff66fc:	844a      	ld.b      	r2, (r4, 0xa)
1fff66fe:	6486      	cmpne      	r1, r2
1fff6700:	080a      	bt      	0x1fff6714	// 1fff6714 <ll_processExtInitIRQ+0x548>
                            && g_llResolvinglist[i].peerAddr[5] == g_rx_adv_buf.data[5]) {
1fff6702:	8636      	ld.b      	r1, (r6, 0x16)
1fff6704:	844b      	ld.b      	r2, (r4, 0xb)
1fff6706:	6486      	cmpne      	r1, r2
1fff6708:	0806      	bt      	0x1fff6714	// 1fff6714 <ll_processExtInitIRQ+0x548>
                            if (g_llResolvinglist[i].privacyMode == NETWORK_PRIVACY_MODE &&
1fff670a:	8657      	ld.b      	r2, (r6, 0x17)
1fff670c:	3a40      	cmpnei      	r2, 0
1fff670e:	0c0d      	bf      	0x1fff6728	// 1fff6728 <ll_processExtInitIRQ+0x55c>
                                rpaListIndex = i;
1fff6710:	749c      	zextb      	r2, r7
1fff6712:	b841      	st.w      	r2, (r14, 0x4)
                    for (int i = 0; i < LL_RESOLVINGLIST_ENTRY_NUM; i++) {
1fff6714:	2700      	addi      	r7, 1
1fff6716:	3f48      	cmpnei      	r7, 8
1fff6718:	262d      	addi      	r6, 46
1fff671a:	0be0      	bt      	0x1fff66da	// 1fff66da <ll_processExtInitIRQ+0x50e>
                if (pdu_type == ADV_DIRECT_IND && bWlRlCheckOk == TRUE && bMatchAdv != TRUE) {
1fff671c:	3b41      	cmpnei      	r3, 1
                uint8_t *peerAddr = &g_rx_adv_buf.data[0];        // AdvA
1fff671e:	03fd      	lrw      	r7, 0x1fff17fe	// 1fff6924 <ll_processExtInitIRQ+0x758>
                if (pdu_type == ADV_DIRECT_IND && bWlRlCheckOk == TRUE && bMatchAdv != TRUE) {
1fff6720:	0b66      	bt      	0x1fff65ec	// 1fff65ec <ll_processExtInitIRQ+0x420>
1fff6722:	3d41      	cmpnei      	r5, 1
1fff6724:	0b64      	bt      	0x1fff65ec	// 1fff65ec <ll_processExtInitIRQ+0x420>
1fff6726:	07b1      	br      	0x1fff6688	// 1fff6688 <ll_processExtInitIRQ+0x4bc>
                                !ll_isIrkAllZero(g_llResolvinglist[i].peerIrk)) {
1fff6728:	6c1b      	mov      	r0, r6
1fff672a:	b869      	st.w      	r3, (r14, 0x24)
1fff672c:	e0001ff2 	bsr      	0x1fffa710	// 1fffa710 <check_before_startup+0x38>
                            if (g_llResolvinglist[i].privacyMode == NETWORK_PRIVACY_MODE &&
1fff6730:	9869      	ld.w      	r3, (r14, 0x24)
1fff6732:	3840      	cmpnei      	r0, 0
1fff6734:	0bee      	bt      	0x1fff6710	// 1fff6710 <ll_processExtInitIRQ+0x544>
                                bWlRlCheckOk = FALSE;
1fff6736:	3500      	movi      	r5, 0
1fff6738:	07ee      	br      	0x1fff6714	// 1fff6714 <ll_processExtInitIRQ+0x548>
                        if ((initInfo.ownAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC || initInfo.ownAddrType == LL_DEV_ADDR_TYPE_RPA_RANDOM)
1fff673a:	8360      	ld.b      	r3, (r3, 0x0)
1fff673c:	2b01      	subi      	r3, 2
1fff673e:	74cc      	zextb      	r3, r3
                        uint8_t rxAdd = (g_rx_adv_buf.rxheader & RX_ADD_MASK) >> RX_ADD_SHIFT;
1fff6740:	8cc2      	ld.h      	r6, (r4, 0x4)
                        if ((initInfo.ownAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC || initInfo.ownAddrType == LL_DEV_ADDR_TYPE_RPA_RANDOM)
1fff6742:	3b01      	cmphsi      	r3, 2
                        uint8_t rxAdd = (g_rx_adv_buf.rxheader & RX_ADD_MASK) >> RX_ADD_SHIFT;
1fff6744:	56c7      	asri      	r6, r6, 7
1fff6746:	e4c62001 	andi      	r6, r6, 1
                        if ((initInfo.ownAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC || initInfo.ownAddrType == LL_DEV_ADDR_TYPE_RPA_RANDOM)
1fff674a:	082c      	bt      	0x1fff67a2	// 1fff67a2 <ll_processExtInitIRQ+0x5d6>
                            && (rpaListIndex < LL_RESOLVINGLIST_ENTRY_NUM
1fff674c:	9861      	ld.w      	r3, (r14, 0x4)
1fff674e:	3b48      	cmpnei      	r3, 8
1fff6750:	0c29      	bf      	0x1fff67a2	// 1fff67a2 <ll_processExtInitIRQ+0x5d6>
                                && !ll_isIrkAllZero(g_llResolvinglist[rpaListIndex].localIrk))) {
1fff6752:	302e      	movi      	r0, 46
1fff6754:	7c0c      	mult      	r0, r3
1fff6756:	1375      	lrw      	r3, 0x1fff0fd4	// 1fff6928 <ll_processExtInitIRQ+0x75c>
1fff6758:	600c      	addu      	r0, r3
1fff675a:	e0001fdb 	bsr      	0x1fffa710	// 1fffa710 <check_before_startup+0x38>
1fff675e:	3840      	cmpnei      	r0, 0
1fff6760:	c4000505 	mvc      	r5
1fff6764:	7554      	zextb      	r5, r5
                        if (rxAdd == LL_DEV_ADDR_TYPE_RANDOM) {
1fff6766:	3e40      	cmpnei      	r6, 0
1fff6768:	0c1f      	bf      	0x1fff67a6	// 1fff67a6 <ll_processExtInitIRQ+0x5da>
                            localAddr = ownRandomAddr;
1fff676a:	1373      	lrw      	r3, 0x1fff1548	// 1fff6934 <ll_processExtInitIRQ+0x768>
                            localAddr = ownPublicAddr;
1fff676c:	8340      	ld.b      	r2, (r3, 0x0)
                        if (g_rx_adv_buf.data[6]  != localAddr[0]
1fff676e:	842c      	ld.b      	r1, (r4, 0xc)
1fff6770:	6486      	cmpne      	r1, r2
1fff6772:	09c0      	bt      	0x1fff6af2	// 1fff6af2 <ll_processExtInitIRQ+0x926>
                            || g_rx_adv_buf.data[7]  != localAddr[1]
1fff6774:	842d      	ld.b      	r1, (r4, 0xd)
1fff6776:	8341      	ld.b      	r2, (r3, 0x1)
1fff6778:	6486      	cmpne      	r1, r2
1fff677a:	09bc      	bt      	0x1fff6af2	// 1fff6af2 <ll_processExtInitIRQ+0x926>
                            || g_rx_adv_buf.data[8]  != localAddr[2]
1fff677c:	842e      	ld.b      	r1, (r4, 0xe)
1fff677e:	8342      	ld.b      	r2, (r3, 0x2)
1fff6780:	6486      	cmpne      	r1, r2
1fff6782:	09b8      	bt      	0x1fff6af2	// 1fff6af2 <ll_processExtInitIRQ+0x926>
                            || g_rx_adv_buf.data[9]  != localAddr[3]
1fff6784:	842f      	ld.b      	r1, (r4, 0xf)
1fff6786:	8343      	ld.b      	r2, (r3, 0x3)
1fff6788:	6486      	cmpne      	r1, r2
1fff678a:	09b4      	bt      	0x1fff6af2	// 1fff6af2 <ll_processExtInitIRQ+0x926>
                            || g_rx_adv_buf.data[10] != localAddr[4]
1fff678c:	8430      	ld.b      	r1, (r4, 0x10)
1fff678e:	8344      	ld.b      	r2, (r3, 0x4)
1fff6790:	6486      	cmpne      	r1, r2
1fff6792:	09b0      	bt      	0x1fff6af2	// 1fff6af2 <ll_processExtInitIRQ+0x926>
                            || g_rx_adv_buf.data[11] != localAddr[5]) {
1fff6794:	8365      	ld.b      	r3, (r3, 0x5)
1fff6796:	8451      	ld.b      	r2, (r4, 0x11)
                            bWlRlCheckOk = FALSE;
1fff6798:	64ca      	cmpne      	r2, r3
1fff679a:	3300      	movi      	r3, 0
1fff679c:	c4a30c40 	inct      	r5, r3, 0
1fff67a0:	0726      	br      	0x1fff65ec	// 1fff65ec <ll_processExtInitIRQ+0x420>
1fff67a2:	3501      	movi      	r5, 1
1fff67a4:	07e1      	br      	0x1fff6766	// 1fff6766 <ll_processExtInitIRQ+0x59a>
                            localAddr = ownPublicAddr;
1fff67a6:	1365      	lrw      	r3, 0x1fff1185	// 1fff6938 <ll_processExtInitIRQ+0x76c>
1fff67a8:	07e2      	br      	0x1fff676c	// 1fff676c <ll_processExtInitIRQ+0x5a0>
                else if (initInfo.wlPolicy == LL_INIT_WL_POLICY_USE_WHITE_LIST &&
1fff67aa:	3b41      	cmpnei      	r3, 1
1fff67ac:	0809      	bt      	0x1fff67be	// 1fff67be <ll_processExtInitIRQ+0x5f2>
1fff67ae:	3d41      	cmpnei      	r5, 1
1fff67b0:	e860fd41 	bt      	0x1fff6232	// 1fff6232 <ll_processExtInitIRQ+0x66>
                    bWlRlCheckOk = ll_isAddrInWhiteList(txAdd, peerAddr);
1fff67b4:	6c5f      	mov      	r1, r7
1fff67b6:	9802      	ld.w      	r0, (r14, 0x8)
1fff67b8:	e0001fbe 	bsr      	0x1fffa734	// 1fffa734 <check_before_startup+0x5c>
1fff67bc:	6d43      	mov      	r5, r0
                if (bWlRlCheckOk == TRUE) {
1fff67be:	3d41      	cmpnei      	r5, 1
1fff67c0:	0734      	br      	0x1fff6628	// 1fff6628 <ll_processExtInitIRQ+0x45c>
                uint8_t chSel = (g_rx_adv_buf.rxheader & CHSEL_MASK) >> CHSEL_SHIFT;
1fff67c2:	9864      	ld.w      	r3, (r14, 0x10)
1fff67c4:	5365      	asri      	r3, r3, 5
1fff67c6:	e4632001 	andi      	r3, r3, 1
                        && chSel == LL_CHN_SEL_ALGORITHM_2) {
1fff67ca:	74cc      	zextb      	r3, r3
1fff67cc:	3b40      	cmpnei      	r3, 0
1fff67ce:	0f3c      	bf      	0x1fff6646	// 1fff6646 <ll_processExtInitIRQ+0x47a>
                        conn_param[initInfo.connId].channel_selection = LL_CHN_SEL_ALGORITHM_2;
1fff67d0:	9865      	ld.w      	r3, (r14, 0x14)
1fff67d2:	31a1      	movi      	r1, 161
1fff67d4:	8650      	ld.b      	r2, (r6, 0x10)
1fff67d6:	4122      	lsli      	r1, r1, 2
1fff67d8:	7c84      	mult      	r2, r1
1fff67da:	9360      	ld.w      	r3, (r3, 0x0)
1fff67dc:	60c8      	addu      	r3, r2
1fff67de:	3201      	movi      	r2, 1
1fff67e0:	dc43020d 	st.b      	r2, (r3, 0x20d)
                        SET_BITS(g_tx_adv_buf.txheader, LL_CHN_SEL_ALGORITHM_2, CHSEL_SHIFT, CHSEL_MASK);
1fff67e4:	8c62      	ld.h      	r3, (r4, 0x4)
1fff67e6:	ec630020 	ori      	r3, r3, 32
                        SET_BITS(g_tx_adv_buf.txheader, LL_CHN_SEL_ALGORITHM_1, CHSEL_SHIFT, CHSEL_MASK);
1fff67ea:	ac62      	st.h      	r3, (r4, 0x4)
                    if (rpaListIndex < LL_RESOLVINGLIST_ENTRY_NUM &&
1fff67ec:	9861      	ld.w      	r3, (r14, 0x4)
1fff67ee:	12b4      	lrw      	r5, 0x1fff1904	// 1fff693c <ll_processExtInitIRQ+0x770>
1fff67f0:	3b07      	cmphsi      	r3, 8
1fff67f2:	083d      	bt      	0x1fff686c	// 1fff686c <ll_processExtInitIRQ+0x6a0>
                        !ll_isIrkAllZero(g_llResolvinglist[rpaListIndex].localIrk) &&
1fff67f4:	9841      	ld.w      	r2, (r14, 0x4)
1fff67f6:	332e      	movi      	r3, 46
1fff67f8:	7cc8      	mult      	r3, r2
1fff67fa:	124c      	lrw      	r2, 0x1fff0fd4	// 1fff6928 <ll_processExtInitIRQ+0x75c>
1fff67fc:	60c8      	addu      	r3, r2
1fff67fe:	6c0f      	mov      	r0, r3
1fff6800:	b864      	st.w      	r3, (r14, 0x10)
1fff6802:	e0001f87 	bsr      	0x1fffa710	// 1fffa710 <check_before_startup+0x38>
                    if (rpaListIndex < LL_RESOLVINGLIST_ENTRY_NUM &&
1fff6806:	3840      	cmpnei      	r0, 0
1fff6808:	0832      	bt      	0x1fff686c	// 1fff686c <ll_processExtInitIRQ+0x6a0>
                        (initInfo.ownAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC || initInfo.ownAddrType == LL_DEV_ADDR_TYPE_RPA_RANDOM)) {
1fff680a:	8640      	ld.b      	r2, (r6, 0x0)
1fff680c:	2a01      	subi      	r2, 2
                        !ll_isIrkAllZero(g_llResolvinglist[rpaListIndex].localIrk) &&
1fff680e:	7488      	zextb      	r2, r2
1fff6810:	9864      	ld.w      	r3, (r14, 0x10)
1fff6812:	3a01      	cmphsi      	r2, 2
1fff6814:	082c      	bt      	0x1fff686c	// 1fff686c <ll_processExtInitIRQ+0x6a0>
                        ll_CalcRandomAddr(g_llResolvinglist[rpaListIndex].localIrk, &g_tx_adv_buf.data[0]);
1fff6816:	6c0f      	mov      	r0, r3
1fff6818:	122a      	lrw      	r1, 0x1fff16f2	// 1fff6940 <ll_processExtInitIRQ+0x774>
1fff681a:	e0001f87 	bsr      	0x1fffa728	// 1fffa728 <check_before_startup+0x50>
                        SET_BITS(g_tx_adv_buf.txheader, LL_DEV_ADDR_TYPE_RANDOM, TX_ADD_SHIFT, TX_ADD_MASK);
1fff681e:	8c62      	ld.h      	r3, (r4, 0x4)
1fff6820:	ec630040 	ori      	r3, r3, 64
1fff6824:	ac62      	st.h      	r3, (r4, 0x4)
                        g_currentLocalAddrType = LL_DEV_ADDR_TYPE_RPA_RANDOM;        // not accute local type, for branch selection in enh conn complete event
1fff6826:	3303      	movi      	r3, 3
                        g_currentLocalAddrType = LL_DEV_ADDR_TYPE_RANDOM;             // not accute local type, for branch selection in enh conn complete event
1fff6828:	a560      	st.b      	r3, (r5, 0x0)
                    T2 = read_current_fine_time();
1fff682a:	e0002177 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
                    delay = (T2 > ISR_entry_time) ? (T2 - ISR_entry_time) : (BASE_TIME_UNITS - ISR_entry_time + T2);
1fff682e:	1266      	lrw      	r3, 0x1fff0e1c	// 1fff6944 <ll_processExtInitIRQ+0x778>
1fff6830:	9360      	ld.w      	r3, (r3, 0x0)
1fff6832:	640c      	cmphs      	r3, r0
1fff6834:	600e      	subu      	r0, r3
1fff6836:	0832      	bt      	0x1fff689a	// 1fff689a <ll_processExtInitIRQ+0x6ce>
                    if (delay > 118 - pGlobal_config[LL_ADV_TO_CONN_REQ_DELAY] - pGlobal_config[LL_HW_PLL_DELAY]) { // not enough time
1fff6838:	9720      	ld.w      	r1, (r7, 0x0)
1fff683a:	3376      	movi      	r3, 118
1fff683c:	d8e12028 	ld.w      	r7, (r1, 0xa0)
1fff6840:	9151      	ld.w      	r2, (r1, 0x44)
1fff6842:	5fc8      	addu      	r6, r7, r2
1fff6844:	5bd9      	subu      	r6, r3, r6
1fff6846:	6418      	cmphs      	r6, r0
1fff6848:	12c0      	lrw      	r6, 0x1fff0e2d	// 1fff6948 <ll_processExtInitIRQ+0x77c>
1fff684a:	082c      	bt      	0x1fff68a2	// 1fff68a2 <ll_processExtInitIRQ+0x6d6>
                        isPeerRpaStore = TRUE;
1fff684c:	3301      	movi      	r3, 1
                        storeRpaListIndex = rpaListIndex;
1fff684e:	d84e0004 	ld.b      	r2, (r14, 0x4)
                        isPeerRpaStore = TRUE;
1fff6852:	a660      	st.b      	r3, (r6, 0x0)
                        osal_memcpy(&currentPeerRpa[0], &g_rx_adv_buf.data[0], 6);
1fff6854:	1134      	lrw      	r1, 0x1fff17fe	// 1fff6924 <ll_processExtInitIRQ+0x758>
                        storeRpaListIndex = rpaListIndex;
1fff6856:	116c      	lrw      	r3, 0x1fff191b	// 1fff6904 <ll_processExtInitIRQ+0x738>
                        osal_memcpy(&currentPeerRpa[0], &g_rx_adv_buf.data[0], 6);
1fff6858:	111d      	lrw      	r0, 0x1fff1914	// 1fff694c <ll_processExtInitIRQ+0x780>
                        storeRpaListIndex = rpaListIndex;
1fff685a:	a340      	st.b      	r2, (r3, 0x0)
                        osal_memcpy(&currentPeerRpa[0], &g_rx_adv_buf.data[0], 6);
1fff685c:	3206      	movi      	r2, 6
1fff685e:	e0002199 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
                        g_same_rf_channel_flag = FALSE;
1fff6862:	9862      	ld.w      	r3, (r14, 0x8)
1fff6864:	3200      	movi      	r2, 0
1fff6866:	a340      	st.b      	r2, (r3, 0x0)
1fff6868:	e800fce5 	br      	0x1fff6232	// 1fff6232 <ll_processExtInitIRQ+0x66>
                        if (initInfo.ownAddrType == LL_DEV_ADDR_TYPE_PUBLIC || initInfo.ownAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC) {
1fff686c:	8660      	ld.b      	r3, (r6, 0x0)
1fff686e:	e46320fd 	andi      	r3, r3, 253
                            osal_memcpy((uint8 *)&g_tx_adv_buf.data[0], &ownPublicAddr[0], 6);
1fff6872:	3206      	movi      	r2, 6
                        if (initInfo.ownAddrType == LL_DEV_ADDR_TYPE_PUBLIC || initInfo.ownAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC) {
1fff6874:	3b40      	cmpnei      	r3, 0
1fff6876:	080a      	bt      	0x1fff688a	// 1fff688a <ll_processExtInitIRQ+0x6be>
                            osal_memcpy((uint8 *)&g_tx_adv_buf.data[0], &ownPublicAddr[0], 6);
1fff6878:	1130      	lrw      	r1, 0x1fff1185	// 1fff6938 <ll_processExtInitIRQ+0x76c>
1fff687a:	1112      	lrw      	r0, 0x1fff16f2	// 1fff6940 <ll_processExtInitIRQ+0x774>
1fff687c:	e000218a 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
                            SET_BITS(g_tx_adv_buf.txheader, LL_DEV_ADDR_TYPE_PUBLIC, TX_ADD_SHIFT, TX_ADD_MASK);
1fff6880:	8c62      	ld.h      	r3, (r4, 0x4)
1fff6882:	3b86      	bclri      	r3, 6
                            SET_BITS(g_tx_adv_buf.txheader, LL_DEV_ADDR_TYPE_RANDOM, TX_ADD_SHIFT, TX_ADD_MASK);
1fff6884:	ac62      	st.h      	r3, (r4, 0x4)
                        g_currentLocalAddrType = LL_DEV_ADDR_TYPE_RANDOM;             // not accute local type, for branch selection in enh conn complete event
1fff6886:	3301      	movi      	r3, 1
1fff6888:	07d0      	br      	0x1fff6828	// 1fff6828 <ll_processExtInitIRQ+0x65c>
                            osal_memcpy((uint8 *)&g_tx_adv_buf.data[0], &ownRandomAddr[0], 6);
1fff688a:	112b      	lrw      	r1, 0x1fff1548	// 1fff6934 <ll_processExtInitIRQ+0x768>
1fff688c:	110d      	lrw      	r0, 0x1fff16f2	// 1fff6940 <ll_processExtInitIRQ+0x774>
1fff688e:	e0002181 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
                            SET_BITS(g_tx_adv_buf.txheader, LL_DEV_ADDR_TYPE_RANDOM, TX_ADD_SHIFT, TX_ADD_MASK);
1fff6892:	8c62      	ld.h      	r3, (r4, 0x4)
1fff6894:	ec630040 	ori      	r3, r3, 64
1fff6898:	07f6      	br      	0x1fff6884	// 1fff6884 <ll_processExtInitIRQ+0x6b8>
                    delay = (T2 > ISR_entry_time) ? (T2 - ISR_entry_time) : (BASE_TIME_UNITS - ISR_entry_time + T2);
1fff689a:	c6a05023 	bmaski      	r3, 22
1fff689e:	600c      	addu      	r0, r3
1fff68a0:	07cc      	br      	0x1fff6838	// 1fff6838 <ll_processExtInitIRQ+0x66c>
                        ll_hw_set_trx_settle(delay,                               // set BB delay, about 80us in 16MHz HCLK
1fff68a2:	7488      	zextb      	r2, r2
1fff68a4:	d8210040 	ld.b      	r1, (r1, 0x40)
                        delay = 118 - delay - pGlobal_config[LL_ADV_TO_CONN_REQ_DELAY];
1fff68a8:	60de      	subu      	r3, r7
1fff68aa:	60c2      	subu      	r3, r0
                        ll_hw_set_trx_settle(delay,                               // set BB delay, about 80us in 16MHz HCLK
1fff68ac:	740c      	zextb      	r0, r3
1fff68ae:	e0002249 	bsr      	0x1fffad40	// 1fffad40 <check_before_startup+0x668>
                        ll_hw_rst_rfifo();
1fff68b2:	e00020bb 	bsr      	0x1fffaa28	// 1fffaa28 <check_before_startup+0x350>
                        ll_hw_rst_tfifo();
1fff68b6:	e00021f7 	bsr      	0x1fffaca4	// 1fffaca4 <check_before_startup+0x5cc>
                        ll_hw_set_stx();             // set LL HW as single Tx mode
1fff68ba:	e0001f25 	bsr      	0x1fffa704	// 1fffa704 <check_before_startup+0x2c>
                        ll_hw_go();
1fff68be:	e000214b 	bsr      	0x1fffab54	// 1fffab54 <check_before_startup+0x47c>
                        llWaitingIrq = TRUE;
1fff68c2:	1164      	lrw      	r3, 0x1fff0df8	// 1fff6950 <ll_processExtInitIRQ+0x784>
1fff68c4:	3201      	movi      	r2, 1
                        osal_memcpy((uint8 *)&g_tx_adv_buf.data[6], &g_rx_adv_buf.data[0], 6);
1fff68c6:	1038      	lrw      	r1, 0x1fff17fe	// 1fff6924 <ll_processExtInitIRQ+0x758>
                        llWaitingIrq = TRUE;
1fff68c8:	b340      	st.w      	r2, (r3, 0x0)
                        osal_memcpy((uint8 *)&g_tx_adv_buf.data[6], &g_rx_adv_buf.data[0], 6);
1fff68ca:	1103      	lrw      	r0, 0x1fff16f8	// 1fff6954 <ll_processExtInitIRQ+0x788>
1fff68cc:	3206      	movi      	r2, 6
1fff68ce:	e0002161 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
                        ll_hw_write_tfifo((uint8 *) & (g_tx_adv_buf.txheader),
1fff68d2:	1102      	lrw      	r0, 0x1fff16f0	// 1fff6958 <ll_processExtInitIRQ+0x78c>
                                          ((g_tx_adv_buf.txheader & 0xff00) >> 8) + 2);   // payload length + header length(2)
1fff68d4:	8c22      	ld.h      	r1, (r4, 0x4)
1fff68d6:	4928      	lsri      	r1, r1, 8
                        ll_hw_write_tfifo((uint8 *) & (g_tx_adv_buf.txheader),
1fff68d8:	2101      	addi      	r1, 2
1fff68da:	e0001f03 	bsr      	0x1fffa6e0	// 1fffa6e0 <check_before_startup+0x8>
                        if (g_currentPeerAddrType >= 0x02) {
1fff68de:	9863      	ld.w      	r3, (r14, 0xc)
1fff68e0:	8360      	ld.b      	r3, (r3, 0x0)
1fff68e2:	3b01      	cmphsi      	r3, 2
1fff68e4:	0c06      	bf      	0x1fff68f0	// 1fff68f0 <ll_processExtInitIRQ+0x724>
                            osal_memcpy(&g_currentPeerRpa[0], &g_rx_adv_buf.data[0], 6);
1fff68e6:	3206      	movi      	r2, 6
1fff68e8:	102f      	lrw      	r1, 0x1fff17fe	// 1fff6924 <ll_processExtInitIRQ+0x758>
1fff68ea:	101d      	lrw      	r0, 0x1fff15d7	// 1fff695c <ll_processExtInitIRQ+0x790>
1fff68ec:	e0002152 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
                        if (g_currentLocalAddrType == LL_DEV_ADDR_TYPE_RPA_RANDOM) {
1fff68f0:	8560      	ld.b      	r3, (r5, 0x0)
1fff68f2:	3b43      	cmpnei      	r3, 3
1fff68f4:	0838      	bt      	0x1fff6964	// 1fff6964 <ll_processExtInitIRQ+0x798>
                            osal_memcpy(&g_currentLocalRpa[0],  &g_tx_adv_buf.data[0], 6);
1fff68f6:	3206      	movi      	r2, 6
1fff68f8:	1032      	lrw      	r1, 0x1fff16f2	// 1fff6940 <ll_processExtInitIRQ+0x774>
1fff68fa:	101a      	lrw      	r0, 0x1fff15d1	// 1fff6960 <ll_processExtInitIRQ+0x794>
1fff68fc:	e000214a 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
1fff6900:	0432      	br      	0x1fff6964	// 1fff6964 <ll_processExtInitIRQ+0x798>
1fff6902:	0000      	bkpt
1fff6904:	1fff191b 	.long	0x1fff191b
1fff6908:	1fff0ff5 	.long	0x1fff0ff5
1fff690c:	1fff0ff4 	.long	0x1fff0ff4
1fff6910:	1fff119e 	.long	0x1fff119e
1fff6914:	1fff11ba 	.long	0x1fff11ba
1fff6918:	1fff0e2c 	.long	0x1fff0e2c
1fff691c:	1fffa670 	.long	0x1fffa670
1fff6920:	1fff16ec 	.long	0x1fff16ec
1fff6924:	1fff17fe 	.long	0x1fff17fe
1fff6928:	1fff0fd4 	.long	0x1fff0fd4
1fff692c:	1fff1804 	.long	0x1fff1804
1fff6930:	1fff0fe4 	.long	0x1fff0fe4
1fff6934:	1fff1548 	.long	0x1fff1548
1fff6938:	1fff1185 	.long	0x1fff1185
1fff693c:	1fff1904 	.long	0x1fff1904
1fff6940:	1fff16f2 	.long	0x1fff16f2
1fff6944:	1fff0e1c 	.long	0x1fff0e1c
1fff6948:	1fff0e2d 	.long	0x1fff0e2d
1fff694c:	1fff1914 	.long	0x1fff1914
1fff6950:	1fff0df8 	.long	0x1fff0df8
1fff6954:	1fff16f8 	.long	0x1fff16f8
1fff6958:	1fff16f0 	.long	0x1fff16f0
1fff695c:	1fff15d7 	.long	0x1fff15d7
1fff6960:	1fff15d1 	.long	0x1fff15d1
                        move_to_master_function();
1fff6964:	e0002110 	bsr      	0x1fffab84	// 1fffab84 <check_before_startup+0x4ac>
                        isPeerRpaStore = FALSE;
1fff6968:	3300      	movi      	r3, 0
                        g_same_rf_channel_flag = FALSE;
1fff696a:	3200      	movi      	r2, 0
                        isPeerRpaStore = FALSE;
1fff696c:	a660      	st.b      	r3, (r6, 0x0)
                        g_same_rf_channel_flag = FALSE;
1fff696e:	9862      	ld.w      	r3, (r14, 0x8)
                        (void)osal_set_event(LL_TaskID, LL_EVT_MASTER_CONN_CREATED);
1fff6970:	3180      	movi      	r1, 128
                        g_same_rf_channel_flag = FALSE;
1fff6972:	a340      	st.b      	r2, (r3, 0x0)
                        extInitInfo.scanMode = LL_SCAN_STOP;
1fff6974:	9860      	ld.w      	r3, (r14, 0x0)
                        (void)osal_set_event(LL_TaskID, LL_EVT_MASTER_CONN_CREATED);
1fff6976:	4124      	lsli      	r1, r1, 4
                        extInitInfo.scanMode = LL_SCAN_STOP;
1fff6978:	a348      	st.b      	r2, (r3, 0x8)
                        (void)osal_set_event(LL_TaskID, LL_EVT_MASTER_CONN_CREATED);
1fff697a:	1360      	lrw      	r3, 0x1fff14ac	// 1fff6af8 <ll_processExtInitIRQ+0x92c>
1fff697c:	8300      	ld.b      	r0, (r3, 0x0)
                (void)osal_set_event(LL_TaskID, LL_EVT_MASTER_CONN_CANCELLED);           // inform high layer
1fff697e:	e00021c3 	bsr      	0x1fffad04	// 1fffad04 <check_before_startup+0x62c>
1fff6982:	e800fd80 	br      	0x1fff6482	// 1fff6482 <ll_processExtInitIRQ+0x2b6>
                llScanTime += ((ISR_entry_time > llScanT1) ? (ISR_entry_time - llScanT1) : (BASE_TIME_UNITS - llScanT1 + ISR_entry_time));
1fff6986:	127e      	lrw      	r3, 0x1fff0e1c	// 1fff6afc <ll_processExtInitIRQ+0x930>
1fff6988:	125e      	lrw      	r2, 0x1fff190c	// 1fff6b00 <ll_processExtInitIRQ+0x934>
1fff698a:	9360      	ld.w      	r3, (r3, 0x0)
1fff698c:	9240      	ld.w      	r2, (r2, 0x0)
1fff698e:	64c8      	cmphs      	r2, r3
1fff6990:	0829      	bt      	0x1fff69e2	// 1fff69e2 <ll_processExtInitIRQ+0x816>
1fff6992:	60ca      	subu      	r3, r2
                if (ext_adv_hdr.header & LE_EXT_HDR_AUX_PTR_PRESENT_BITMASK) {  // receive aux channel information
1fff6994:	123c      	lrw      	r1, 0x1fff1550	// 1fff6b04 <ll_processExtInitIRQ+0x938>
                llScanTime += ((ISR_entry_time > llScanT1) ? (ISR_entry_time - llScanT1) : (BASE_TIME_UNITS - llScanT1 + ISR_entry_time));
1fff6996:	125d      	lrw      	r2, 0x1fff0dfc	// 1fff6b08 <ll_processExtInitIRQ+0x93c>
1fff6998:	6d0b      	mov      	r4, r2
1fff699a:	9200      	ld.w      	r0, (r2, 0x0)
1fff699c:	600c      	addu      	r0, r3
                if (ext_adv_hdr.header & LE_EXT_HDR_AUX_PTR_PRESENT_BITMASK) {  // receive aux channel information
1fff699e:	8160      	ld.b      	r3, (r1, 0x0)
1fff69a0:	e4632010 	andi      	r3, r3, 16
                llScanTime += ((ISR_entry_time > llScanT1) ? (ISR_entry_time - llScanT1) : (BASE_TIME_UNITS - llScanT1 + ISR_entry_time));
1fff69a4:	b200      	st.w      	r0, (r2, 0x0)
                if (ext_adv_hdr.header & LE_EXT_HDR_AUX_PTR_PRESENT_BITMASK) {  // receive aux channel information
1fff69a6:	3b40      	cmpnei      	r3, 0
                    extInitInfo.current_chn = ext_adv_hdr.auxPtr.chn_idx;
1fff69a8:	9860      	ld.w      	r3, (r14, 0x0)
                if (ext_adv_hdr.header & LE_EXT_HDR_AUX_PTR_PRESENT_BITMASK) {  // receive aux channel information
1fff69aa:	0c20      	bf      	0x1fff69ea	// 1fff69ea <ll_processExtInitIRQ+0x81e>
                    extInitInfo.current_chn = ext_adv_hdr.auxPtr.chn_idx;
1fff69ac:	8110      	ld.b      	r0, (r1, 0x10)
                    wait_time = ext_adv_hdr.auxPtr.aux_offset * ((ext_adv_hdr.auxPtr.offset_unit == 1) ? 300 : 30);
1fff69ae:	898a      	ld.h      	r4, (r1, 0x14)
                    extInitInfo.current_chn = ext_adv_hdr.auxPtr.chn_idx;
1fff69b0:	dc03003c 	st.b      	r0, (r3, 0x3c)
                    extInitInfo.current_scan_PHY = ext_adv_hdr.auxPtr.aux_phy;
1fff69b4:	8116      	ld.b      	r0, (r1, 0x16)
1fff69b6:	dc03003b 	st.b      	r0, (r3, 0x3b)
                    wait_time = ext_adv_hdr.auxPtr.aux_offset * ((ext_adv_hdr.auxPtr.offset_unit == 1) ? 300 : 30);
1fff69ba:	8112      	ld.b      	r0, (r1, 0x12)
1fff69bc:	3396      	movi      	r3, 150
1fff69be:	3841      	cmpnei      	r0, 1
1fff69c0:	4361      	lsli      	r3, r3, 1
1fff69c2:	301e      	movi      	r0, 30
1fff69c4:	c4030c20 	incf      	r0, r3, 0
                    wait_time -= (ext_adv_hdr.auxPtr.ca == 0) ? 500 : 499;     // temporary setting, consider clock accuracy
1fff69c8:	8171      	ld.b      	r3, (r1, 0x11)
                    llScanTime = 0;
1fff69ca:	3100      	movi      	r1, 0
                    wait_time -= (ext_adv_hdr.auxPtr.ca == 0) ? 500 : 499;     // temporary setting, consider clock accuracy
1fff69cc:	3b40      	cmpnei      	r3, 0
                    wait_time = ext_adv_hdr.auxPtr.aux_offset * ((ext_adv_hdr.auxPtr.offset_unit == 1) ? 300 : 30);
1fff69ce:	7c10      	mult      	r0, r4
                    wait_time -= (ext_adv_hdr.auxPtr.ca == 0) ? 500 : 499;     // temporary setting, consider clock accuracy
1fff69d0:	64c3      	mvcv      	r3
                    llScanTime = 0;
1fff69d2:	b220      	st.w      	r1, (r2, 0x0)
                    wait_time -= (ext_adv_hdr.auxPtr.ca == 0) ? 500 : 499;     // temporary setting, consider clock accuracy
1fff69d4:	e46301f2 	addi      	r3, r3, 499
1fff69d8:	600e      	subu      	r0, r3
                    ll_ext_init_schedule_next_event(wait_time);
1fff69da:	e00020b1 	bsr      	0x1fffab3c	// 1fffab3c <check_before_startup+0x464>
1fff69de:	e800fd52 	br      	0x1fff6482	// 1fff6482 <ll_processExtInitIRQ+0x2b6>
                llScanTime += ((ISR_entry_time > llScanT1) ? (ISR_entry_time - llScanT1) : (BASE_TIME_UNITS - llScanT1 + ISR_entry_time));
1fff69e2:	c6a05021 	bmaski      	r1, 22
1fff69e6:	60c4      	addu      	r3, r1
1fff69e8:	07d5      	br      	0x1fff6992	// 1fff6992 <ll_processExtInitIRQ+0x7c6>
                } else if (llScanTime >= extInitInfo.scanWindow[extInitInfo.current_index] * 625) {
1fff69ea:	9820      	ld.w      	r1, (r14, 0x0)
1fff69ec:	d863003a 	ld.b      	r3, (r3, 0x3a)
1fff69f0:	5b5e      	addi      	r2, r3, 8
1fff69f2:	4241      	lsli      	r2, r2, 1
1fff69f4:	6084      	addu      	r2, r1
1fff69f6:	8a40      	ld.h      	r2, (r2, 0x0)
1fff69f8:	ea010271 	movi      	r1, 625
1fff69fc:	7c84      	mult      	r2, r1
1fff69fe:	6480      	cmphs      	r0, r2
                    if (extInitInfo.numOfScanPHY > 1 && extInitInfo.current_chn == LL_SCAN_ADV_CHAN_39) {
1fff6a00:	9840      	ld.w      	r2, (r14, 0x0)
                } else if (llScanTime >= extInitInfo.scanWindow[extInitInfo.current_index] * 625) {
1fff6a02:	0c45      	bf      	0x1fff6a8c	// 1fff6a8c <ll_processExtInitIRQ+0x8c0>
                    if (extInitInfo.numOfScanPHY > 1 && extInitInfo.current_chn == LL_SCAN_ADV_CHAN_39) {
1fff6a04:	8249      	ld.b      	r2, (r2, 0x9)
1fff6a06:	3a01      	cmphsi      	r2, 2
1fff6a08:	0c11      	bf      	0x1fff6a2a	// 1fff6a2a <ll_processExtInitIRQ+0x85e>
1fff6a0a:	9840      	ld.w      	r2, (r14, 0x0)
1fff6a0c:	d842003c 	ld.b      	r2, (r2, 0x3c)
1fff6a10:	eb420027 	cmpnei      	r2, 39
1fff6a14:	080b      	bt      	0x1fff6a2a	// 1fff6a2a <ll_processExtInitIRQ+0x85e>
                        extInitInfo.current_index = (extInitInfo.current_index + 1) & 0x01;
1fff6a16:	9840      	ld.w      	r2, (r14, 0x0)
1fff6a18:	2300      	addi      	r3, 1
1fff6a1a:	e4632001 	andi      	r3, r3, 1
1fff6a1e:	dc62003a 	st.b      	r3, (r2, 0x3a)
                        extInitInfo.current_scan_PHY = extInitInfo.initPHYs[extInitInfo.current_index];
1fff6a22:	60c8      	addu      	r3, r2
1fff6a24:	836a      	ld.b      	r3, (r3, 0xa)
1fff6a26:	dc62003b 	st.b      	r3, (r2, 0x3b)
                    if (extInitInfo.current_chn < LL_SCAN_ADV_CHAN_37) {
1fff6a2a:	9860      	ld.w      	r3, (r14, 0x0)
1fff6a2c:	d863003c 	ld.b      	r3, (r3, 0x3c)
1fff6a30:	eb030024 	cmphsi      	r3, 37
1fff6a34:	0805      	bt      	0x1fff6a3e	// 1fff6a3e <ll_processExtInitIRQ+0x872>
                        extInitInfo.current_chn = LL_SCAN_ADV_CHAN_37;
1fff6a36:	9860      	ld.w      	r3, (r14, 0x0)
1fff6a38:	3225      	movi      	r2, 37
1fff6a3a:	dc43003c 	st.b      	r2, (r3, 0x3c)
                    LL_CALC_NEXT_SCAN_CHN(extInitInfo.current_chn);
1fff6a3e:	9860      	ld.w      	r3, (r14, 0x0)
1fff6a40:	3225      	movi      	r2, 37
1fff6a42:	d863003c 	ld.b      	r3, (r3, 0x3c)
1fff6a46:	2300      	addi      	r3, 1
1fff6a48:	74cc      	zextb      	r3, r3
                    if (extInitInfo.scanWindow[extInitInfo.current_index] == extInitInfo.scanInterval[extInitInfo.current_index]) {    // scanWindow == scanInterval, trigger immediately
1fff6a4a:	9820      	ld.w      	r1, (r14, 0x0)
                    LL_CALC_NEXT_SCAN_CHN(extInitInfo.current_chn);
1fff6a4c:	eb030027 	cmphsi      	r3, 40
1fff6a50:	c4620c40 	inct      	r3, r2, 0
1fff6a54:	9840      	ld.w      	r2, (r14, 0x0)
1fff6a56:	dc62003c 	st.b      	r3, (r2, 0x3c)
                    if (extInitInfo.scanWindow[extInitInfo.current_index] == extInitInfo.scanInterval[extInitInfo.current_index]) {    // scanWindow == scanInterval, trigger immediately
1fff6a5a:	d862003a 	ld.b      	r3, (r2, 0x3a)
1fff6a5e:	5b5e      	addi      	r2, r3, 8
1fff6a60:	2305      	addi      	r3, 6
1fff6a62:	4241      	lsli      	r2, r2, 1
1fff6a64:	4361      	lsli      	r3, r3, 1
1fff6a66:	6084      	addu      	r2, r1
1fff6a68:	60c4      	addu      	r3, r1
1fff6a6a:	8a40      	ld.h      	r2, (r2, 0x0)
1fff6a6c:	8b00      	ld.h      	r0, (r3, 0x0)
1fff6a6e:	640a      	cmpne      	r2, r0
1fff6a70:	0807      	bt      	0x1fff6a7e	// 1fff6a7e <ll_processExtInitIRQ+0x8b2>
                        llSetupExtInit();
1fff6a72:	e000214f 	bsr      	0x1fffad10	// 1fffad10 <check_before_startup+0x638>
                    llScanTime = 0;
1fff6a76:	3300      	movi      	r3, 0
1fff6a78:	b460      	st.w      	r3, (r4, 0x0)
1fff6a7a:	e800fd04 	br      	0x1fff6482	// 1fff6482 <ll_processExtInitIRQ+0x2b6>
                        ll_ext_init_schedule_next_event((extInitInfo.scanInterval[extInitInfo.current_index]
1fff6a7e:	ea030271 	movi      	r3, 625
                                                         - extInitInfo.scanWindow[extInitInfo.current_index]) * 625);
1fff6a82:	600a      	subu      	r0, r2
                        ll_ext_init_schedule_next_event((extInitInfo.scanInterval[extInitInfo.current_index]
1fff6a84:	7c0c      	mult      	r0, r3
1fff6a86:	e000205b 	bsr      	0x1fffab3c	// 1fffab3c <check_before_startup+0x464>
1fff6a8a:	07f6      	br      	0x1fff6a76	// 1fff6a76 <ll_processExtInitIRQ+0x8aa>
                    if (extInitInfo.current_chn < LL_SCAN_ADV_CHAN_37) {
1fff6a8c:	d842003c 	ld.b      	r2, (r2, 0x3c)
1fff6a90:	eb020024 	cmphsi      	r2, 37
1fff6a94:	0805      	bt      	0x1fff6a9e	// 1fff6a9e <ll_processExtInitIRQ+0x8d2>
                        extInitInfo.current_chn = LL_SCAN_ADV_CHAN_37;
1fff6a96:	9840      	ld.w      	r2, (r14, 0x0)
1fff6a98:	3125      	movi      	r1, 37
1fff6a9a:	dc22003c 	st.b      	r1, (r2, 0x3c)
                    extInitInfo.current_scan_PHY = extInitInfo.initPHYs[extInitInfo.current_index];
1fff6a9e:	9840      	ld.w      	r2, (r14, 0x0)
1fff6aa0:	60c8      	addu      	r3, r2
1fff6aa2:	836a      	ld.b      	r3, (r3, 0xa)
1fff6aa4:	dc62003b 	st.b      	r3, (r2, 0x3b)
                    llSetupExtInit();
1fff6aa8:	e0002134 	bsr      	0x1fffad10	// 1fffad10 <check_before_startup+0x638>
1fff6aac:	e800fceb 	br      	0x1fff6482	// 1fff6482 <ll_processExtInitIRQ+0x2b6>
    } else if (ll_mode == LL_HW_MODE_TRX) {        // init case, waiting for AUX_CONNECT_RSP
1fff6ab0:	3842      	cmpnei      	r0, 2
1fff6ab2:	e860fce8 	bt      	0x1fff6482	// 1fff6482 <ll_processExtInitIRQ+0x2b6>
        ll_debug_output(DEBUG_LL_HW_TRX);
1fff6ab6:	3007      	movi      	r0, 7
        if ((irq_status & LIRQ_RD) && (irq_status & LIRQ_COK)) {
1fff6ab8:	e4842600 	andi      	r4, r4, 1536
        ll_debug_output(DEBUG_LL_HW_TRX);
1fff6abc:	e0002016 	bsr      	0x1fffaae8	// 1fffaae8 <check_before_startup+0x410>
        if ((irq_status & LIRQ_RD) && (irq_status & LIRQ_COK)) {
1fff6ac0:	eb440600 	cmpnei      	r4, 1536
1fff6ac4:	e860fcdf 	bt      	0x1fff6482	// 1fff6482 <ll_processExtInitIRQ+0x2b6>
            packet_len = ll_hw_read_rfifo1((uint8_t *)(&(g_rx_adv_buf.rxheader)),
1fff6ac8:	1011      	lrw      	r0, 0x1fff17fc	// 1fff6b0c <ll_processExtInitIRQ+0x940>
1fff6aca:	1b0c      	addi      	r3, r14, 48
1fff6acc:	1a0b      	addi      	r2, r14, 44
1fff6ace:	e42e0029 	addi      	r1, r14, 42
1fff6ad2:	e3fff6d5 	bsr      	0x1fff587c	// 1fff587c <ll_hw_read_rfifo1>
            if (ll_hw_get_rfifo_depth() > 0) {
1fff6ad6:	e000210b 	bsr      	0x1fffacec	// 1fffacec <check_before_startup+0x614>
1fff6ada:	3820      	cmplti      	r0, 1
1fff6adc:	e860fcd3 	bt      	0x1fff6482	// 1fff6482 <ll_processExtInitIRQ+0x2b6>
                g_pmCounters.ll_rfifo_read_err++;
1fff6ae0:	104c      	lrw      	r2, 0x1fff12e0	// 1fff6b10 <ll_processExtInitIRQ+0x944>
1fff6ae2:	9279      	ld.w      	r3, (r2, 0x64)
1fff6ae4:	2300      	addi      	r3, 1
1fff6ae6:	b279      	st.w      	r3, (r2, 0x64)
1fff6ae8:	e800fccd 	br      	0x1fff6482	// 1fff6482 <ll_processExtInitIRQ+0x2b6>
                uint8_t rpaListIndex = LL_RESOLVINGLIST_ENTRY_NUM;
1fff6aec:	3308      	movi      	r3, 8
1fff6aee:	b861      	st.w      	r3, (r14, 0x4)
                            bWlRlCheckOk = FALSE;
1fff6af0:	10e9      	lrw      	r7, 0x1fff17fe	// 1fff6b14 <ll_processExtInitIRQ+0x948>
                            bWlRlCheckOk = FALSE;
1fff6af2:	3500      	movi      	r5, 0
1fff6af4:	e800fd7c 	br      	0x1fff65ec	// 1fff65ec <ll_processExtInitIRQ+0x420>
1fff6af8:	1fff14ac 	.long	0x1fff14ac
1fff6afc:	1fff0e1c 	.long	0x1fff0e1c
1fff6b00:	1fff190c 	.long	0x1fff190c
1fff6b04:	1fff1550 	.long	0x1fff1550
1fff6b08:	1fff0dfc 	.long	0x1fff0dfc
1fff6b0c:	1fff17fc 	.long	0x1fff17fc
1fff6b10:	1fff12e0 	.long	0x1fff12e0
1fff6b14:	1fff17fe 	.long	0x1fff17fe

1fff6b18 <LL_prdAdvTimerExpProcess>:
{
1fff6b18:	14d4      	push      	r4-r7, r15
1fff6b1a:	1421      	subi      	r14, r14, 4
    p_scheduler = &g_pAdvSchInfo_periodic[g_currentExtAdv_periodic];
1fff6b1c:	1261      	lrw      	r3, 0x1fff118b	// 1fff6c20 <LL_prdAdvTimerExpProcess+0x108>
1fff6b1e:	12e2      	lrw      	r7, 0x1fff1180	// 1fff6c24 <LL_prdAdvTimerExpProcess+0x10c>
1fff6b20:	8360      	ld.b      	r3, (r3, 0x0)
1fff6b22:	43c2      	lsli      	r6, r3, 2
1fff6b24:	618c      	addu      	r6, r3
1fff6b26:	4662      	lsli      	r3, r6, 2
1fff6b28:	97c0      	ld.w      	r6, (r7, 0x0)
1fff6b2a:	618c      	addu      	r6, r3
    pAdvInfo    = p_scheduler->pAdvInfo;
1fff6b2c:	9682      	ld.w      	r4, (r6, 0x8)
    if (!pAdvInfo) {
1fff6b2e:	3c40      	cmpnei      	r4, 0
1fff6b30:	0c75      	bf      	0x1fff6c1a	// 1fff6c1a <LL_prdAdvTimerExpProcess+0x102>
    pPrdAdv     = p_scheduler->pAdvInfo_prd;
1fff6b32:	96a1      	ld.w      	r5, (r6, 0x4)
    if (ll_isFirstAdvChn(pAdvInfo->parameter.priAdvChnMap, pPrdAdv->currentChn)) {
1fff6b34:	8410      	ld.b      	r0, (r4, 0x10)
1fff6b36:	d8250055 	ld.b      	r1, (r5, 0x55)
1fff6b3a:	e0002169 	bsr      	0x1fffae0c	// 1fffae0c <check_before_startup+0x734>
1fff6b3e:	3840      	cmpnei      	r0, 0
1fff6b40:	0c39      	bf      	0x1fff6bb2	// 1fff6bb2 <LL_prdAdvTimerExpProcess+0x9a>
        p_scheduler->nextEventRemainder += pAdvInfo->primary_advertising_interval;
1fff6b42:	9663      	ld.w      	r3, (r6, 0xc)
1fff6b44:	9451      	ld.w      	r2, (r4, 0x44)
1fff6b46:	60c8      	addu      	r3, r2
1fff6b48:	b663      	st.w      	r3, (r6, 0xc)
        if ((pAdvInfo->duration != 0 && pAdvInfo->adv_event_duration > pAdvInfo->duration)
1fff6b4a:	942f      	ld.w      	r1, (r4, 0x3c)
        pAdvInfo->adv_event_duration    += pAdvInfo->primary_advertising_interval;
1fff6b4c:	9453      	ld.w      	r2, (r4, 0x4c)
        if ((pAdvInfo->duration != 0 && pAdvInfo->adv_event_duration > pAdvInfo->duration)
1fff6b4e:	3940      	cmpnei      	r1, 0
        pAdvInfo->adv_event_duration    += pAdvInfo->primary_advertising_interval;
1fff6b50:	9471      	ld.w      	r3, (r4, 0x44)
1fff6b52:	608c      	addu      	r2, r3
        pAdvInfo->adv_event_counter ++;
1fff6b54:	d8641024 	ld.h      	r3, (r4, 0x48)
1fff6b58:	2300      	addi      	r3, 1
1fff6b5a:	74cd      	zexth      	r3, r3
        pAdvInfo->adv_event_duration    += pAdvInfo->primary_advertising_interval;
1fff6b5c:	b453      	st.w      	r2, (r4, 0x4c)
        pAdvInfo->adv_event_counter ++;
1fff6b5e:	dc641024 	st.h      	r3, (r4, 0x48)
        if ((pAdvInfo->duration != 0 && pAdvInfo->adv_event_duration > pAdvInfo->duration)
1fff6b62:	0c03      	bf      	0x1fff6b68	// 1fff6b68 <LL_prdAdvTimerExpProcess+0x50>
1fff6b64:	6484      	cmphs      	r1, r2
1fff6b66:	0c07      	bf      	0x1fff6b74	// 1fff6b74 <LL_prdAdvTimerExpProcess+0x5c>
            || (pAdvInfo->maxExtAdvEvents != 0 && pAdvInfo->adv_event_counter >= pAdvInfo->maxExtAdvEvents)) {
1fff6b68:	d8440040 	ld.b      	r2, (r4, 0x40)
1fff6b6c:	3a40      	cmpnei      	r2, 0
1fff6b6e:	0c09      	bf      	0x1fff6b80	// 1fff6b80 <LL_prdAdvTimerExpProcess+0x68>
1fff6b70:	648c      	cmphs      	r3, r2
1fff6b72:	0c07      	bf      	0x1fff6b80	// 1fff6b80 <LL_prdAdvTimerExpProcess+0x68>
            pAdvInfo->active = FALSE;          // mark as inactive
1fff6b74:	3300      	movi      	r3, 0
1fff6b76:	dc640042 	st.b      	r3, (r4, 0x42)
            p_scheduler->nextEventRemainder = LL_INVALID_TIME;
1fff6b7a:	3300      	movi      	r3, 0
1fff6b7c:	2b00      	subi      	r3, 1
1fff6b7e:	b663      	st.w      	r3, (r6, 0xc)
    for (i = 0; i < g_perioAdvNumber; i++) {
1fff6b80:	116a      	lrw      	r3, 0x1fff0f88	// 1fff6c28 <LL_prdAdvTimerExpProcess+0x110>
                g_pAdvSchInfo_periodic[i].nextEventRemainder -= (g_currentAdvTimer + LL_ADV_TIMING_COMPENSATE);
1fff6b82:	3200      	movi      	r2, 0
    for (i = 0; i < g_perioAdvNumber; i++) {
1fff6b84:	8360      	ld.b      	r3, (r3, 0x0)
1fff6b86:	b860      	st.w      	r3, (r14, 0x0)
        if (g_pAdvSchInfo_periodic[i].adv_handler != LL_INVALID_ADV_SET_HANDLE) {
1fff6b88:	36ff      	movi      	r6, 255
                g_pAdvSchInfo_periodic[i].nextEventRemainder -= (g_currentAdvTimer + LL_ADV_TIMING_COMPENSATE);
1fff6b8a:	1169      	lrw      	r3, 0x1fff0f98	// 1fff6c2c <LL_prdAdvTimerExpProcess+0x114>
1fff6b8c:	9300      	ld.w      	r0, (r3, 0x0)
1fff6b8e:	9760      	ld.w      	r3, (r7, 0x0)
1fff6b90:	3714      	movi      	r7, 20
    for (i = 0; i < g_perioAdvNumber; i++) {
1fff6b92:	9820      	ld.w      	r1, (r14, 0x0)
1fff6b94:	6449      	cmplt      	r2, r1
1fff6b96:	0820      	bt      	0x1fff6bd6	// 1fff6bd6 <LL_prdAdvTimerExpProcess+0xbe>
    if (llWaitingIrq ||
1fff6b98:	1166      	lrw      	r3, 0x1fff0df8	// 1fff6c30 <LL_prdAdvTimerExpProcess+0x118>
1fff6b9a:	9360      	ld.w      	r3, (r3, 0x0)
1fff6b9c:	3b40      	cmpnei      	r3, 0
1fff6b9e:	0c2d      	bf      	0x1fff6bf8	// 1fff6bf8 <LL_prdAdvTimerExpProcess+0xe0>
        ll_prd_adv_schedule_next_event(pGlobal_config[LL_EXT_ADV_TASK_DURATION]);
1fff6ba0:	1165      	lrw      	r3, 0x1fffa670	// 1fff6c34 <LL_prdAdvTimerExpProcess+0x11c>
1fff6ba2:	9360      	ld.w      	r3, (r3, 0x0)
1fff6ba4:	d8032056 	ld.w      	r0, (r3, 0x158)
1fff6ba8:	e00020c6 	bsr      	0x1fffad34	// 1fffad34 <check_before_startup+0x65c>
    return TRUE;
1fff6bac:	3001      	movi      	r0, 1
}
1fff6bae:	1401      	addi      	r14, r14, 4
1fff6bb0:	1494      	pop      	r4-r7, r15
    else if (pPrdAdv->currentChn < LL_ADV_CHAN_FIRST    // broadcast in aux adv chn
1fff6bb2:	d8650055 	ld.b      	r3, (r5, 0x55)
1fff6bb6:	eb030024 	cmphsi      	r3, 37
1fff6bba:	0be3      	bt      	0x1fff6b80	// 1fff6b80 <LL_prdAdvTimerExpProcess+0x68>
             &&  pAdvInfo->sendingAuxAdvInd == FALSE         // not sending extended aux PDU
1fff6bbc:	d8640051 	ld.b      	r3, (r4, 0x51)
1fff6bc0:	3b40      	cmpnei      	r3, 0
1fff6bc2:	0bdf      	bt      	0x1fff6b80	// 1fff6b80 <LL_prdAdvTimerExpProcess+0x68>
             &&  pPrdAdv->currentAdvOffset == 0) {           // offset in adv data set greater than 0 means next PDU is AUX_CHAIN_IND PDU
1fff6bc4:	d865102b 	ld.h      	r3, (r5, 0x56)
1fff6bc8:	3b40      	cmpnei      	r3, 0
1fff6bca:	0bdb      	bt      	0x1fff6b80	// 1fff6b80 <LL_prdAdvTimerExpProcess+0x68>
        p_scheduler->auxPduRemainder += pPrdAdv->adv_interval;
1fff6bcc:	9664      	ld.w      	r3, (r6, 0x10)
1fff6bce:	9545      	ld.w      	r2, (r5, 0x14)
1fff6bd0:	60c8      	addu      	r3, r2
1fff6bd2:	b664      	st.w      	r3, (r6, 0x10)
1fff6bd4:	07d6      	br      	0x1fff6b80	// 1fff6b80 <LL_prdAdvTimerExpProcess+0x68>
        if (g_pAdvSchInfo_periodic[i].adv_handler != LL_INVALID_ADV_SET_HANDLE) {
1fff6bd6:	8320      	ld.b      	r1, (r3, 0x0)
1fff6bd8:	6586      	cmpne      	r1, r6
1fff6bda:	0c0c      	bf      	0x1fff6bf2	// 1fff6bf2 <LL_prdAdvTimerExpProcess+0xda>
            if (g_pAdvSchInfo_periodic[i].pAdvInfo->active == TRUE) {
1fff6bdc:	9322      	ld.w      	r1, (r3, 0x8)
1fff6bde:	d8210042 	ld.b      	r1, (r1, 0x42)
1fff6be2:	3941      	cmpnei      	r1, 1
1fff6be4:	0804      	bt      	0x1fff6bec	// 1fff6bec <LL_prdAdvTimerExpProcess+0xd4>
                g_pAdvSchInfo_periodic[i].nextEventRemainder -= (g_currentAdvTimer + LL_ADV_TIMING_COMPENSATE);
1fff6be6:	9323      	ld.w      	r1, (r3, 0xc)
1fff6be8:	6042      	subu      	r1, r0
1fff6bea:	b323      	st.w      	r1, (r3, 0xc)
            g_pAdvSchInfo_periodic[i].auxPduRemainder    -= (g_currentAdvTimer + LL_ADV_TIMING_COMPENSATE);
1fff6bec:	9324      	ld.w      	r1, (r3, 0x10)
1fff6bee:	6042      	subu      	r1, r0
1fff6bf0:	b324      	st.w      	r1, (r3, 0x10)
    for (i = 0; i < g_perioAdvNumber; i++) {
1fff6bf2:	2200      	addi      	r2, 1
1fff6bf4:	60dc      	addu      	r3, r7
1fff6bf6:	07ce      	br      	0x1fff6b92	// 1fff6b92 <LL_prdAdvTimerExpProcess+0x7a>
        (isTimer1Running() && read_LL_remainder_time1() < pGlobal_config[LL_EXT_ADV_TASK_DURATION])) {
1fff6bf8:	e00020d4 	bsr      	0x1fffada0	// 1fffada0 <check_before_startup+0x6c8>
    if (llWaitingIrq ||
1fff6bfc:	3840      	cmpnei      	r0, 0
1fff6bfe:	0c09      	bf      	0x1fff6c10	// 1fff6c10 <LL_prdAdvTimerExpProcess+0xf8>
        (isTimer1Running() && read_LL_remainder_time1() < pGlobal_config[LL_EXT_ADV_TASK_DURATION])) {
1fff6c00:	e3fff628 	bsr      	0x1fff5850	// 1fff5850 <read_LL_remainder_time1>
1fff6c04:	106c      	lrw      	r3, 0x1fffa670	// 1fff6c34 <LL_prdAdvTimerExpProcess+0x11c>
1fff6c06:	9360      	ld.w      	r3, (r3, 0x0)
1fff6c08:	d8632056 	ld.w      	r3, (r3, 0x158)
1fff6c0c:	64c0      	cmphs      	r0, r3
1fff6c0e:	0fc9      	bf      	0x1fff6ba0	// 1fff6ba0 <LL_prdAdvTimerExpProcess+0x88>
        llSetupPrdAdvEvent(pPrdAdv, pAdvInfo);    // send extended advertisement
1fff6c10:	6c53      	mov      	r1, r4
1fff6c12:	6c17      	mov      	r0, r5
1fff6c14:	e0001e5c 	bsr      	0x1fffa8cc	// 1fffa8cc <check_before_startup+0x1f4>
1fff6c18:	07ca      	br      	0x1fff6bac	// 1fff6bac <LL_prdAdvTimerExpProcess+0x94>
        return FALSE;
1fff6c1a:	3000      	movi      	r0, 0
1fff6c1c:	07c9      	br      	0x1fff6bae	// 1fff6bae <LL_prdAdvTimerExpProcess+0x96>
1fff6c1e:	0000      	bkpt
1fff6c20:	1fff118b 	.long	0x1fff118b
1fff6c24:	1fff1180 	.long	0x1fff1180
1fff6c28:	1fff0f88 	.long	0x1fff0f88
1fff6c2c:	1fff0f98 	.long	0x1fff0f98
1fff6c30:	1fff0df8 	.long	0x1fff0df8
1fff6c34:	1fffa670 	.long	0x1fffa670

1fff6c38 <LL_prdScanTimerExpProcess>:
{
1fff6c38:	14d0      	push      	r15
    g_timerExpiryTick = read_current_fine_time();
1fff6c3a:	e0001f6f 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
1fff6c3e:	1064      	lrw      	r3, 0x1fff0f8c	// 1fff6c4c <LL_prdScanTimerExpProcess+0x14>
1fff6c40:	b300      	st.w      	r0, (r3, 0x0)
    llSetupPrdScan();
1fff6c42:	e0001fad 	bsr      	0x1fffab9c	// 1fffab9c <check_before_startup+0x4c4>
}
1fff6c46:	3001      	movi      	r0, 1
1fff6c48:	1490      	pop      	r15
1fff6c4a:	0000      	bkpt
1fff6c4c:	1fff0f8c 	.long	0x1fff0f8c

1fff6c50 <LL_ProcessEvent1>:
{
1fff6c50:	14d4      	push      	r4-r7, r15
1fff6c52:	142b      	subi      	r14, r14, 44
    if (events & LL_EVT_NEXT_INTERVAL) {
1fff6c54:	3508      	movi      	r5, 8
1fff6c56:	c4a12023 	and      	r3, r1, r5
{
1fff6c5a:	6d07      	mov      	r4, r1
    if (events & LL_EVT_NEXT_INTERVAL) {
1fff6c5c:	3b40      	cmpnei      	r3, 0
1fff6c5e:	0c0d      	bf      	0x1fff6c78	// 1fff6c78 <LL_ProcessEvent1+0x28>
        ll_debug_output(DEBUG_LL_TIMER_EXPIRY_ENTRY);
1fff6c60:	3032      	movi      	r0, 50
        return (events ^ LL_EVT_NEXT_INTERVAL);
1fff6c62:	6d15      	xor      	r4, r5
        ll_debug_output(DEBUG_LL_TIMER_EXPIRY_ENTRY);
1fff6c64:	e0001f42 	bsr      	0x1fffaae8	// 1fffaae8 <check_before_startup+0x410>
        LL_evt_schedule();
1fff6c68:	e0001e3e 	bsr      	0x1fffa8e4	// 1fffa8e4 <check_before_startup+0x20c>
        ll_debug_output(DEBUG_LL_TIMER_EXPIRY_EXIT);
1fff6c6c:	3033      	movi      	r0, 51
1fff6c6e:	e0001f3d 	bsr      	0x1fffaae8	// 1fffaae8 <check_before_startup+0x410>
        return (events ^ LL_EVT_NEXT_INTERVAL);
1fff6c72:	7411      	zexth      	r0, r4
}
1fff6c74:	140b      	addi      	r14, r14, 44
1fff6c76:	1494      	pop      	r4-r7, r15
    if (events & LL_EVT_MASTER_CONN_CREATED) {
1fff6c78:	e4612800 	andi      	r3, r1, 2048
1fff6c7c:	3b40      	cmpnei      	r3, 0
1fff6c7e:	0c54      	bf      	0x1fff6d26	// 1fff6d26 <LL_ProcessEvent1+0xd6>
        connPtr = &conn_param[initInfo.connId];
1fff6c80:	016d      	lrw      	r3, 0x1fff119e	// 1fff6fc8 <LL_ProcessEvent1+0x378>
1fff6c82:	014c      	lrw      	r2, 0x1fff0dd4	// 1fff6fcc <LL_ProcessEvent1+0x37c>
1fff6c84:	83b0      	ld.b      	r5, (r3, 0x10)
1fff6c86:	33a1      	movi      	r3, 161
1fff6c88:	4362      	lsli      	r3, r3, 2
1fff6c8a:	7cd4      	mult      	r3, r5
1fff6c8c:	92a0      	ld.w      	r5, (r2, 0x0)
1fff6c8e:	614c      	addu      	r5, r3
        if (isEnhConnCmpEvtSupport() == TRUE) {
1fff6c90:	e0001e0c 	bsr      	0x1fffa8a8	// 1fffa8a8 <check_before_startup+0x1d0>
1fff6c94:	01d0      	lrw      	r6, 0x1fff11bb	// 1fff6fd0 <LL_ProcessEvent1+0x380>
1fff6c96:	3841      	cmpnei      	r0, 1
1fff6c98:	0834      	bt      	0x1fff6d00	// 1fff6d00 <LL_ProcessEvent1+0xb0>
            uint8  nil_addr[] = {0, 0, 0, 0, 0, 0};
1fff6c9a:	3300      	movi      	r3, 0
                peer = nil_addr;
1fff6c9c:	0111      	lrw      	r0, 0x1fff15d7	// 1fff6fd4 <LL_ProcessEvent1+0x384>
            LL_EnhConnectionCompleteCback(LL_STATUS_SUCCESS,
1fff6c9e:	3700      	movi      	r7, 0
            uint8  nil_addr[] = {0, 0, 0, 0, 0, 0};
1fff6ca0:	b869      	st.w      	r3, (r14, 0x24)
1fff6ca2:	dc6e1014 	st.h      	r3, (r14, 0x28)
                local = nil_addr;
1fff6ca6:	1909      	addi      	r1, r14, 36
            if (g_currentPeerAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC ||
1fff6ca8:	0173      	lrw      	r3, 0x1fff191a	// 1fff6fd8 <LL_ProcessEvent1+0x388>
1fff6caa:	8360      	ld.b      	r3, (r3, 0x0)
1fff6cac:	5b47      	subi      	r2, r3, 2
1fff6cae:	7488      	zextb      	r2, r2
                peer = nil_addr;
1fff6cb0:	3a01      	cmphsi      	r2, 2
1fff6cb2:	1a09      	addi      	r2, r14, 36
1fff6cb4:	c4020c40 	inct      	r0, r2, 0
            if (g_currentLocalAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC ||
1fff6cb8:	0156      	lrw      	r2, 0x1fff1904	// 1fff6fdc <LL_ProcessEvent1+0x38c>
1fff6cba:	8240      	ld.b      	r2, (r2, 0x0)
1fff6cbc:	2a01      	subi      	r2, 2
1fff6cbe:	7488      	zextb      	r2, r2
                local = nil_addr;
1fff6cc0:	3a01      	cmphsi      	r2, 2
1fff6cc2:	0157      	lrw      	r2, 0x1fff15d1	// 1fff6fe0 <LL_ProcessEvent1+0x390>
1fff6cc4:	c4410c40 	inct      	r2, r1, 0
            LL_EnhConnectionCompleteCback(LL_STATUS_SUCCESS,
1fff6cc8:	8524      	ld.b      	r1, (r5, 0x4)
1fff6cca:	b8e6      	st.w      	r7, (r14, 0x18)
1fff6ccc:	8dfd      	ld.h      	r7, (r5, 0x3a)
1fff6cce:	4fe4      	lsri      	r7, r7, 4
1fff6cd0:	b8e5      	st.w      	r7, (r14, 0x14)
1fff6cd2:	8dfc      	ld.h      	r7, (r5, 0x38)
1fff6cd4:	b8e4      	st.w      	r7, (r14, 0x10)
1fff6cd6:	8dfb      	ld.h      	r7, (r5, 0x36)
1fff6cd8:	4fe1      	lsri      	r7, r7, 1
1fff6cda:	b802      	st.w      	r0, (r14, 0x8)
1fff6cdc:	b841      	st.w      	r2, (r14, 0x4)
1fff6cde:	b8e3      	st.w      	r7, (r14, 0xc)
1fff6ce0:	b8c0      	st.w      	r6, (r14, 0x0)
1fff6ce2:	3200      	movi      	r2, 0
1fff6ce4:	3000      	movi      	r0, 0
1fff6ce6:	e0001e29 	bsr      	0x1fffa938	// 1fffa938 <check_before_startup+0x260>
        if (connPtr->channel_selection == LL_CHN_SEL_ALGORITHM_2) {
1fff6cea:	d865020d 	ld.b      	r3, (r5, 0x20d)
1fff6cee:	3b41      	cmpnei      	r3, 1
1fff6cf0:	0805      	bt      	0x1fff6cfa	// 1fff6cfa <LL_ProcessEvent1+0xaa>
            LL_ChannelSelectionAlgorithmCback((uint16)connPtr->connId, LL_CHN_SEL_ALGORITHM_2);
1fff6cf2:	8504      	ld.b      	r0, (r5, 0x4)
1fff6cf4:	3101      	movi      	r1, 1
1fff6cf6:	e0001daf 	bsr      	0x1fffa854	// 1fffa854 <check_before_startup+0x17c>
        return (events ^ LL_EVT_MASTER_CONN_CREATED);
1fff6cfa:	e4044800 	xori      	r0, r4, 2048
1fff6cfe:	07bb      	br      	0x1fff6c74	// 1fff6c74 <LL_ProcessEvent1+0x24>
            LL_ConnectionCompleteCback(LL_STATUS_SUCCESS,                        // reasonCode
1fff6d00:	3200      	movi      	r2, 0
1fff6d02:	0266      	lrw      	r3, 0x1fff11ba	// 1fff6fe4 <LL_ProcessEvent1+0x394>
1fff6d04:	8524      	ld.b      	r1, (r5, 0x4)
1fff6d06:	8360      	ld.b      	r3, (r3, 0x0)
1fff6d08:	b844      	st.w      	r2, (r14, 0x10)
1fff6d0a:	3000      	movi      	r0, 0
1fff6d0c:	8d5d      	ld.h      	r2, (r5, 0x3a)
1fff6d0e:	4a44      	lsri      	r2, r2, 4
1fff6d10:	b843      	st.w      	r2, (r14, 0xc)
1fff6d12:	8d5c      	ld.h      	r2, (r5, 0x38)
1fff6d14:	b842      	st.w      	r2, (r14, 0x8)
1fff6d16:	8d5b      	ld.h      	r2, (r5, 0x36)
1fff6d18:	4a41      	lsri      	r2, r2, 1
1fff6d1a:	b841      	st.w      	r2, (r14, 0x4)
1fff6d1c:	b8c0      	st.w      	r6, (r14, 0x0)
1fff6d1e:	3200      	movi      	r2, 0
1fff6d20:	e0001f80 	bsr      	0x1fffac20	// 1fffac20 <check_before_startup+0x548>
1fff6d24:	07e3      	br      	0x1fff6cea	// 1fff6cea <LL_ProcessEvent1+0x9a>
    if (events & LL_EVT_MASTER_CONN_CANCELLED) {
1fff6d26:	e4612010 	andi      	r3, r1, 16
1fff6d2a:	3b40      	cmpnei      	r3, 0
1fff6d2c:	0c21      	bf      	0x1fff6d6e	// 1fff6d6e <LL_ProcessEvent1+0x11e>
        if (isEnhConnCmpEvtSupport() == TRUE)
1fff6d2e:	e0001dbd 	bsr      	0x1fffa8a8	// 1fffa8a8 <check_before_startup+0x1d0>
1fff6d32:	0272      	lrw      	r3, 0x1fff11ba	// 1fff6fe4 <LL_ProcessEvent1+0x394>
1fff6d34:	3841      	cmpnei      	r0, 1
1fff6d36:	0258      	lrw      	r2, 0x1fff11bb	// 1fff6fd0 <LL_ProcessEvent1+0x380>
            LL_EnhConnectionCompleteCback(LL_STATUS_ERROR_UNKNOWN_CONN_HANDLE,
1fff6d38:	8360      	ld.b      	r3, (r3, 0x0)
1fff6d3a:	3100      	movi      	r1, 0
        if (isEnhConnCmpEvtSupport() == TRUE)
1fff6d3c:	080f      	bt      	0x1fff6d5a	// 1fff6d5a <LL_ProcessEvent1+0x10a>
            LL_EnhConnectionCompleteCback(LL_STATUS_ERROR_UNKNOWN_CONN_HANDLE,
1fff6d3e:	b840      	st.w      	r2, (r14, 0x0)
1fff6d40:	b826      	st.w      	r1, (r14, 0x18)
1fff6d42:	b825      	st.w      	r1, (r14, 0x14)
1fff6d44:	b824      	st.w      	r1, (r14, 0x10)
1fff6d46:	b823      	st.w      	r1, (r14, 0xc)
1fff6d48:	b822      	st.w      	r1, (r14, 0x8)
1fff6d4a:	b821      	st.w      	r1, (r14, 0x4)
1fff6d4c:	3200      	movi      	r2, 0
1fff6d4e:	3002      	movi      	r0, 2
1fff6d50:	e0001df4 	bsr      	0x1fffa938	// 1fffa938 <check_before_startup+0x260>
        return (events ^ LL_EVT_MASTER_CONN_CANCELLED);
1fff6d54:	e4044010 	xori      	r0, r4, 16
1fff6d58:	078e      	br      	0x1fff6c74	// 1fff6c74 <LL_ProcessEvent1+0x24>
            LL_ConnectionCompleteCback(LL_STATUS_ERROR_UNKNOWN_CONN_HANDLE,      // reasonCode
1fff6d5a:	b840      	st.w      	r2, (r14, 0x0)
1fff6d5c:	b824      	st.w      	r1, (r14, 0x10)
1fff6d5e:	b823      	st.w      	r1, (r14, 0xc)
1fff6d60:	b822      	st.w      	r1, (r14, 0x8)
1fff6d62:	b821      	st.w      	r1, (r14, 0x4)
1fff6d64:	3200      	movi      	r2, 0
1fff6d66:	3002      	movi      	r0, 2
1fff6d68:	e0001f5c 	bsr      	0x1fffac20	// 1fffac20 <check_before_startup+0x548>
1fff6d6c:	07f4      	br      	0x1fff6d54	// 1fff6d54 <LL_ProcessEvent1+0x104>
    if (events & LL_EVT_DIRECTED_ADV_FAILED) {
1fff6d6e:	e4612002 	andi      	r3, r1, 2
1fff6d72:	3b40      	cmpnei      	r3, 0
1fff6d74:	0c21      	bf      	0x1fff6db6	// 1fff6db6 <LL_ProcessEvent1+0x166>
        if (isEnhConnCmpEvtSupport() == TRUE)
1fff6d76:	e0001d99 	bsr      	0x1fffa8a8	// 1fffa8a8 <check_before_startup+0x1d0>
1fff6d7a:	0364      	lrw      	r3, 0x1fff11ba	// 1fff6fe4 <LL_ProcessEvent1+0x394>
1fff6d7c:	3841      	cmpnei      	r0, 1
1fff6d7e:	034a      	lrw      	r2, 0x1fff11bb	// 1fff6fd0 <LL_ProcessEvent1+0x380>
            LL_EnhConnectionCompleteCback(LL_STATUS_ERROR_DIRECTED_ADV_TIMEOUT,
1fff6d80:	8360      	ld.b      	r3, (r3, 0x0)
1fff6d82:	3100      	movi      	r1, 0
        if (isEnhConnCmpEvtSupport() == TRUE)
1fff6d84:	080f      	bt      	0x1fff6da2	// 1fff6da2 <LL_ProcessEvent1+0x152>
            LL_EnhConnectionCompleteCback(LL_STATUS_ERROR_DIRECTED_ADV_TIMEOUT,
1fff6d86:	b840      	st.w      	r2, (r14, 0x0)
1fff6d88:	b826      	st.w      	r1, (r14, 0x18)
1fff6d8a:	b825      	st.w      	r1, (r14, 0x14)
1fff6d8c:	b824      	st.w      	r1, (r14, 0x10)
1fff6d8e:	b823      	st.w      	r1, (r14, 0xc)
1fff6d90:	b822      	st.w      	r1, (r14, 0x8)
1fff6d92:	b821      	st.w      	r1, (r14, 0x4)
1fff6d94:	3201      	movi      	r2, 1
1fff6d96:	303c      	movi      	r0, 60
1fff6d98:	e0001dd0 	bsr      	0x1fffa938	// 1fffa938 <check_before_startup+0x260>
        return (events ^ LL_EVT_DIRECTED_ADV_FAILED);
1fff6d9c:	e4044002 	xori      	r0, r4, 2
1fff6da0:	076a      	br      	0x1fff6c74	// 1fff6c74 <LL_ProcessEvent1+0x24>
            LL_ConnectionCompleteCback(LL_STATUS_ERROR_DIRECTED_ADV_TIMEOUT,     // reasonCode
1fff6da2:	b840      	st.w      	r2, (r14, 0x0)
1fff6da4:	b824      	st.w      	r1, (r14, 0x10)
1fff6da6:	b823      	st.w      	r1, (r14, 0xc)
1fff6da8:	b822      	st.w      	r1, (r14, 0x8)
1fff6daa:	b821      	st.w      	r1, (r14, 0x4)
1fff6dac:	3201      	movi      	r2, 1
1fff6dae:	303c      	movi      	r0, 60
1fff6db0:	e0001f38 	bsr      	0x1fffac20	// 1fffac20 <check_before_startup+0x548>
1fff6db4:	07f4      	br      	0x1fff6d9c	// 1fff6d9c <LL_ProcessEvent1+0x14c>
    if (events & LL_EVT_SLAVE_CONN_CREATED) {
1fff6db6:	e4612004 	andi      	r3, r1, 4
1fff6dba:	3b40      	cmpnei      	r3, 0
1fff6dbc:	0c56      	bf      	0x1fff6e68	// 1fff6e68 <LL_ProcessEvent1+0x218>
        connPtr = &conn_param[adv_param.connId];
1fff6dbe:	0374      	lrw      	r3, 0x1fff1528	// 1fff6fe8 <LL_ProcessEvent1+0x398>
1fff6dc0:	035c      	lrw      	r2, 0x1fff0dd4	// 1fff6fcc <LL_ProcessEvent1+0x37c>
1fff6dc2:	83b5      	ld.b      	r5, (r3, 0x15)
1fff6dc4:	33a1      	movi      	r3, 161
1fff6dc6:	4362      	lsli      	r3, r3, 2
1fff6dc8:	7cd4      	mult      	r3, r5
1fff6dca:	92a0      	ld.w      	r5, (r2, 0x0)
1fff6dcc:	614c      	addu      	r5, r3
        if (isEnhConnCmpEvtSupport() == TRUE) {
1fff6dce:	e0001d6d 	bsr      	0x1fffa8a8	// 1fffa8a8 <check_before_startup+0x1d0>
1fff6dd2:	03df      	lrw      	r6, 0x1fff11bb	// 1fff6fd0 <LL_ProcessEvent1+0x380>
1fff6dd4:	3841      	cmpnei      	r0, 1
1fff6dd6:	0835      	bt      	0x1fff6e40	// 1fff6e40 <LL_ProcessEvent1+0x1f0>
            uint8  nil_addr[] = {0, 0, 0, 0, 0, 0};
1fff6dd8:	3300      	movi      	r3, 0
                peer = nil_addr;
1fff6dda:	131f      	lrw      	r0, 0x1fff15d7	// 1fff6fd4 <LL_ProcessEvent1+0x384>
                local = nil_addr;
1fff6ddc:	1909      	addi      	r1, r14, 36
            uint8  nil_addr[] = {0, 0, 0, 0, 0, 0};
1fff6dde:	b869      	st.w      	r3, (r14, 0x24)
1fff6de0:	dc6e1014 	st.h      	r3, (r14, 0x28)
            if (g_currentPeerAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC ||
1fff6de4:	137d      	lrw      	r3, 0x1fff191a	// 1fff6fd8 <LL_ProcessEvent1+0x388>
            LL_EnhConnectionCompleteCback(LL_STATUS_SUCCESS,
1fff6de6:	d8e50030 	ld.b      	r7, (r5, 0x30)
            if (g_currentPeerAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC ||
1fff6dea:	8360      	ld.b      	r3, (r3, 0x0)
1fff6dec:	5b47      	subi      	r2, r3, 2
1fff6dee:	7488      	zextb      	r2, r2
                peer = nil_addr;
1fff6df0:	3a01      	cmphsi      	r2, 2
1fff6df2:	1a09      	addi      	r2, r14, 36
1fff6df4:	c4020c40 	inct      	r0, r2, 0
            if (g_currentLocalAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC ||
1fff6df8:	1359      	lrw      	r2, 0x1fff1904	// 1fff6fdc <LL_ProcessEvent1+0x38c>
1fff6dfa:	8240      	ld.b      	r2, (r2, 0x0)
1fff6dfc:	2a01      	subi      	r2, 2
1fff6dfe:	7488      	zextb      	r2, r2
                local = nil_addr;
1fff6e00:	3a01      	cmphsi      	r2, 2
1fff6e02:	1358      	lrw      	r2, 0x1fff15d1	// 1fff6fe0 <LL_ProcessEvent1+0x390>
1fff6e04:	c4410c40 	inct      	r2, r1, 0
            LL_EnhConnectionCompleteCback(LL_STATUS_SUCCESS,
1fff6e08:	8524      	ld.b      	r1, (r5, 0x4)
1fff6e0a:	b8e6      	st.w      	r7, (r14, 0x18)
1fff6e0c:	8dfd      	ld.h      	r7, (r5, 0x3a)
1fff6e0e:	4fe4      	lsri      	r7, r7, 4
1fff6e10:	b8e5      	st.w      	r7, (r14, 0x14)
1fff6e12:	8dfc      	ld.h      	r7, (r5, 0x38)
1fff6e14:	b8e4      	st.w      	r7, (r14, 0x10)
1fff6e16:	8dfb      	ld.h      	r7, (r5, 0x36)
1fff6e18:	4fe1      	lsri      	r7, r7, 1
1fff6e1a:	b802      	st.w      	r0, (r14, 0x8)
1fff6e1c:	b841      	st.w      	r2, (r14, 0x4)
1fff6e1e:	b8e3      	st.w      	r7, (r14, 0xc)
1fff6e20:	b8c0      	st.w      	r6, (r14, 0x0)
1fff6e22:	3201      	movi      	r2, 1
1fff6e24:	3000      	movi      	r0, 0
1fff6e26:	e0001d89 	bsr      	0x1fffa938	// 1fffa938 <check_before_startup+0x260>
        if (connPtr->channel_selection == LL_CHN_SEL_ALGORITHM_2) {
1fff6e2a:	d865020d 	ld.b      	r3, (r5, 0x20d)
1fff6e2e:	3b41      	cmpnei      	r3, 1
1fff6e30:	0805      	bt      	0x1fff6e3a	// 1fff6e3a <LL_ProcessEvent1+0x1ea>
            LL_ChannelSelectionAlgorithmCback((uint16)connPtr->connId, LL_CHN_SEL_ALGORITHM_2);
1fff6e32:	8504      	ld.b      	r0, (r5, 0x4)
1fff6e34:	3101      	movi      	r1, 1
1fff6e36:	e0001d0f 	bsr      	0x1fffa854	// 1fffa854 <check_before_startup+0x17c>
        return (events ^ LL_EVT_SLAVE_CONN_CREATED);
1fff6e3a:	e4044004 	xori      	r0, r4, 4
1fff6e3e:	071b      	br      	0x1fff6c74	// 1fff6c74 <LL_ProcessEvent1+0x24>
            LL_ConnectionCompleteCback(LL_STATUS_SUCCESS,                        // reasonCode
1fff6e40:	d8450030 	ld.b      	r2, (r5, 0x30)
1fff6e44:	1368      	lrw      	r3, 0x1fff11ba	// 1fff6fe4 <LL_ProcessEvent1+0x394>
1fff6e46:	8524      	ld.b      	r1, (r5, 0x4)
1fff6e48:	8360      	ld.b      	r3, (r3, 0x0)
1fff6e4a:	b844      	st.w      	r2, (r14, 0x10)
1fff6e4c:	3000      	movi      	r0, 0
1fff6e4e:	8d5d      	ld.h      	r2, (r5, 0x3a)
1fff6e50:	4a44      	lsri      	r2, r2, 4
1fff6e52:	b843      	st.w      	r2, (r14, 0xc)
1fff6e54:	8d5c      	ld.h      	r2, (r5, 0x38)
1fff6e56:	b842      	st.w      	r2, (r14, 0x8)
1fff6e58:	8d5b      	ld.h      	r2, (r5, 0x36)
1fff6e5a:	4a41      	lsri      	r2, r2, 1
1fff6e5c:	b841      	st.w      	r2, (r14, 0x4)
1fff6e5e:	b8c0      	st.w      	r6, (r14, 0x0)
1fff6e60:	3201      	movi      	r2, 1
1fff6e62:	e0001edf 	bsr      	0x1fffac20	// 1fffac20 <check_before_startup+0x548>
1fff6e66:	07e2      	br      	0x1fff6e2a	// 1fff6e2a <LL_ProcessEvent1+0x1da>
    if (events & LL_EVT_SLAVE_CONN_CREATED_BAD_PARAM) {
1fff6e68:	e4612040 	andi      	r3, r1, 64
1fff6e6c:	3b40      	cmpnei      	r3, 0
1fff6e6e:	0c23      	bf      	0x1fff6eb4	// 1fff6eb4 <LL_ProcessEvent1+0x264>
        if (isEnhConnCmpEvtSupport() == TRUE)
1fff6e70:	e0001d1c 	bsr      	0x1fffa8a8	// 1fffa8a8 <check_before_startup+0x1d0>
1fff6e74:	3841      	cmpnei      	r0, 1
1fff6e76:	0811      	bt      	0x1fff6e98	// 1fff6e98 <LL_ProcessEvent1+0x248>
            LL_EnhConnectionCompleteCback(LL_STATUS_ERROR_UNACCEPTABLE_CONN_INTERVAL,
1fff6e78:	3300      	movi      	r3, 0
1fff6e7a:	3200      	movi      	r2, 0
1fff6e7c:	b866      	st.w      	r3, (r14, 0x18)
1fff6e7e:	b865      	st.w      	r3, (r14, 0x14)
1fff6e80:	b864      	st.w      	r3, (r14, 0x10)
1fff6e82:	b863      	st.w      	r3, (r14, 0xc)
1fff6e84:	b862      	st.w      	r3, (r14, 0x8)
1fff6e86:	b861      	st.w      	r3, (r14, 0x4)
1fff6e88:	b860      	st.w      	r3, (r14, 0x0)
1fff6e8a:	3100      	movi      	r1, 0
1fff6e8c:	303b      	movi      	r0, 59
1fff6e8e:	e0001d55 	bsr      	0x1fffa938	// 1fffa938 <check_before_startup+0x260>
        return (events ^ LL_EVT_SLAVE_CONN_CREATED_BAD_PARAM);
1fff6e92:	e4044040 	xori      	r0, r4, 64
1fff6e96:	06ef      	br      	0x1fff6c74	// 1fff6c74 <LL_ProcessEvent1+0x24>
            LL_ConnectionCompleteCback(LL_STATUS_ERROR_UNACCEPTABLE_CONN_INTERVAL,  // reasonCode
1fff6e98:	1253      	lrw      	r2, 0x1fff11ba	// 1fff6fe4 <LL_ProcessEvent1+0x394>
1fff6e9a:	3100      	movi      	r1, 0
1fff6e9c:	8260      	ld.b      	r3, (r2, 0x0)
1fff6e9e:	2200      	addi      	r2, 1
1fff6ea0:	b840      	st.w      	r2, (r14, 0x0)
1fff6ea2:	b824      	st.w      	r1, (r14, 0x10)
1fff6ea4:	b823      	st.w      	r1, (r14, 0xc)
1fff6ea6:	b822      	st.w      	r1, (r14, 0x8)
1fff6ea8:	b821      	st.w      	r1, (r14, 0x4)
1fff6eaa:	3201      	movi      	r2, 1
1fff6eac:	303b      	movi      	r0, 59
1fff6eae:	e0001eb9 	bsr      	0x1fffac20	// 1fffac20 <check_before_startup+0x548>
1fff6eb2:	07f0      	br      	0x1fff6e92	// 1fff6e92 <LL_ProcessEvent1+0x242>
    if (events & LL_EVT_START_32KHZ_XOSC_DELAY) {
1fff6eb4:	e4612080 	andi      	r3, r1, 128
1fff6eb8:	3b40      	cmpnei      	r3, 0
1fff6eba:	0c15      	bf      	0x1fff6ee4	// 1fff6ee4 <LL_ProcessEvent1+0x294>
        uint8_t sleepDelay = pGlobal_config[MIN_TIME_TO_STABLE_32KHZ_XOSC];
1fff6ebc:	126c      	lrw      	r3, 0x1fffa670	// 1fff6fec <LL_ProcessEvent1+0x39c>
1fff6ebe:	9360      	ld.w      	r3, (r3, 0x0)
1fff6ec0:	93b4      	ld.w      	r5, (r3, 0x50)
        if (sleepDelay) {
1fff6ec2:	74d4      	zextb      	r3, r5
1fff6ec4:	3b40      	cmpnei      	r3, 0
1fff6ec6:	0c0c      	bf      	0x1fff6ede	// 1fff6ede <LL_ProcessEvent1+0x28e>
            (void)osal_pwrmgr_task_state(LL_TaskID, PWRMGR_HOLD);
1fff6ec8:	12ca      	lrw      	r6, 0x1fff14ac	// 1fff6ff0 <LL_ProcessEvent1+0x3a0>
1fff6eca:	3101      	movi      	r1, 1
1fff6ecc:	8600      	ld.b      	r0, (r6, 0x0)
1fff6ece:	e0001d8f 	bsr      	0x1fffa9ec	// 1fffa9ec <check_before_startup+0x314>
            osal_start_timerEx(LL_TaskID, LL_EVT_32KHZ_XOSC_DELAY, sleepDelay);
1fff6ed2:	3180      	movi      	r1, 128
1fff6ed4:	7494      	zextb      	r2, r5
1fff6ed6:	8600      	ld.b      	r0, (r6, 0x0)
1fff6ed8:	4121      	lsli      	r1, r1, 1
1fff6eda:	e0001e4f 	bsr      	0x1fffab78	// 1fffab78 <check_before_startup+0x4a0>
        return (events ^ LL_EVT_START_32KHZ_XOSC_DELAY);
1fff6ede:	e4044080 	xori      	r0, r4, 128
1fff6ee2:	06c9      	br      	0x1fff6c74	// 1fff6c74 <LL_ProcessEvent1+0x24>
    if (events & LL_EVT_32KHZ_XOSC_DELAY) {
1fff6ee4:	e4612100 	andi      	r3, r1, 256
1fff6ee8:	3b40      	cmpnei      	r3, 0
1fff6eea:	0c09      	bf      	0x1fff6efc	// 1fff6efc <LL_ProcessEvent1+0x2ac>
        (void)osal_pwrmgr_task_state(LL_TaskID, PWRMGR_CONSERVE);
1fff6eec:	1261      	lrw      	r3, 0x1fff14ac	// 1fff6ff0 <LL_ProcessEvent1+0x3a0>
1fff6eee:	3100      	movi      	r1, 0
1fff6ef0:	8300      	ld.b      	r0, (r3, 0x0)
1fff6ef2:	e0001d7d 	bsr      	0x1fffa9ec	// 1fffa9ec <check_before_startup+0x314>
        return (events ^ LL_EVT_32KHZ_XOSC_DELAY);
1fff6ef6:	e4044100 	xori      	r0, r4, 256
1fff6efa:	06bd      	br      	0x1fff6c74	// 1fff6c74 <LL_ProcessEvent1+0x24>
    if (events & LL_EVT_RESET_SYSTEM_SOFT) {
1fff6efc:	e4612400 	andi      	r3, r1, 1024
1fff6f00:	3b40      	cmpnei      	r3, 0
1fff6f02:	0c04      	bf      	0x1fff6f0a	// 1fff6f0a <LL_ProcessEvent1+0x2ba>
        return (events ^ LL_EVT_RESET_SYSTEM_SOFT);
1fff6f04:	e4014400 	xori      	r0, r1, 1024
1fff6f08:	06b6      	br      	0x1fff6c74	// 1fff6c74 <LL_ProcessEvent1+0x24>
    if (events & LL_EVT_SECONDARY_ADV) {
1fff6f0a:	3380      	movi      	r3, 128
1fff6f0c:	4366      	lsli      	r3, r3, 6
1fff6f0e:	68c4      	and      	r3, r1
1fff6f10:	3b40      	cmpnei      	r3, 0
1fff6f12:	0c15      	bf      	0x1fff6f3c	// 1fff6f3c <LL_ProcessEvent1+0x2ec>
        if (llSecondaryState == LL_SEC_STATE_IDLE
1fff6f14:	11b8      	lrw      	r5, 0x1fff1184	// 1fff6ff4 <LL_ProcessEvent1+0x3a4>
1fff6f16:	8560      	ld.b      	r3, (r5, 0x0)
1fff6f18:	3b40      	cmpnei      	r3, 0
1fff6f1a:	0c09      	bf      	0x1fff6f2c	// 1fff6f2c <LL_ProcessEvent1+0x2dc>
            || llSecondaryState == LL_SEC_STATE_IDLE_PENDING)    // adv may be cancel during waiting period, do nothing in this case
1fff6f1c:	3b45      	cmpnei      	r3, 5
1fff6f1e:	0c07      	bf      	0x1fff6f2c	// 1fff6f2c <LL_ProcessEvent1+0x2dc>
            if (llSecAdvAllow()) {
1fff6f20:	e0001ec8 	bsr      	0x1fffacb0	// 1fffacb0 <check_before_startup+0x5d8>
1fff6f24:	3840      	cmpnei      	r0, 0
1fff6f26:	0c08      	bf      	0x1fff6f36	// 1fff6f36 <LL_ProcessEvent1+0x2e6>
                llSetupSecAdvEvt();
1fff6f28:	e0001f12 	bsr      	0x1fffad4c	// 1fffad4c <check_before_startup+0x674>
        return (events ^ LL_EVT_SECONDARY_ADV);
1fff6f2c:	3380      	movi      	r3, 128
1fff6f2e:	4366      	lsli      	r3, r3, 6
        return (events ^ LL_EVT_RPA_TIMEOUT);
1fff6f30:	c4642440 	xor      	r0, r4, r3
1fff6f34:	06a0      	br      	0x1fff6c74	// 1fff6c74 <LL_ProcessEvent1+0x24>
                llSecondaryState = LL_SEC_STATE_ADV_PENDING;
1fff6f36:	3304      	movi      	r3, 4
1fff6f38:	a560      	st.b      	r3, (r5, 0x0)
1fff6f3a:	07f9      	br      	0x1fff6f2c	// 1fff6f2c <LL_ProcessEvent1+0x2dc>
    if (events & LL_EVT_SECONDARY_SCAN) {
1fff6f3c:	3380      	movi      	r3, 128
1fff6f3e:	4365      	lsli      	r3, r3, 5
1fff6f40:	68c4      	and      	r3, r1
1fff6f42:	3b40      	cmpnei      	r3, 0
1fff6f44:	0c12      	bf      	0x1fff6f68	// 1fff6f68 <LL_ProcessEvent1+0x318>
        if (llSecondaryState == LL_SEC_STATE_IDLE || scanInfo.scanMode == LL_SCAN_STOP) { // scan may be cancel during waiting period, do nothing in this case
1fff6f46:	116c      	lrw      	r3, 0x1fff1184	// 1fff6ff4 <LL_ProcessEvent1+0x3a4>
1fff6f48:	8340      	ld.b      	r2, (r3, 0x0)
1fff6f4a:	3a40      	cmpnei      	r2, 0
1fff6f4c:	0c05      	bf      	0x1fff6f56	// 1fff6f56 <LL_ProcessEvent1+0x306>
1fff6f4e:	114b      	lrw      	r2, 0x1fff1494	// 1fff6ff8 <LL_ProcessEvent1+0x3a8>
1fff6f50:	8228      	ld.b      	r1, (r2, 0x8)
1fff6f52:	3940      	cmpnei      	r1, 0
1fff6f54:	0806      	bt      	0x1fff6f60	// 1fff6f60 <LL_ProcessEvent1+0x310>
            llSecondaryState = LL_SEC_STATE_IDLE;
1fff6f56:	3200      	movi      	r2, 0
1fff6f58:	a340      	st.b      	r2, (r3, 0x0)
        return (events ^ LL_EVT_SECONDARY_SCAN);
1fff6f5a:	3380      	movi      	r3, 128
1fff6f5c:	4365      	lsli      	r3, r3, 5
1fff6f5e:	07e9      	br      	0x1fff6f30	// 1fff6f30 <LL_ProcessEvent1+0x2e0>
            llSetupSecScan(scanInfo.nextScanChan);
1fff6f60:	8212      	ld.b      	r0, (r2, 0x12)
1fff6f62:	e0001cfd 	bsr      	0x1fffa95c	// 1fffa95c <check_before_startup+0x284>
1fff6f66:	07fa      	br      	0x1fff6f5a	// 1fff6f5a <LL_ProcessEvent1+0x30a>
    if (events & LL_EVT_SECONDARY_INIT) {
1fff6f68:	3380      	movi      	r3, 128
1fff6f6a:	4367      	lsli      	r3, r3, 7
1fff6f6c:	68c4      	and      	r3, r1
1fff6f6e:	3b40      	cmpnei      	r3, 0
1fff6f70:	0c12      	bf      	0x1fff6f94	// 1fff6f94 <LL_ProcessEvent1+0x344>
        if (llSecondaryState == LL_SEC_STATE_IDLE || initInfo.scanMode == LL_SCAN_STOP) { // scan may be cancel during waiting period, do nothing in this case
1fff6f72:	1161      	lrw      	r3, 0x1fff1184	// 1fff6ff4 <LL_ProcessEvent1+0x3a4>
1fff6f74:	8340      	ld.b      	r2, (r3, 0x0)
1fff6f76:	3a40      	cmpnei      	r2, 0
1fff6f78:	0c05      	bf      	0x1fff6f82	// 1fff6f82 <LL_ProcessEvent1+0x332>
1fff6f7a:	1054      	lrw      	r2, 0x1fff119e	// 1fff6fc8 <LL_ProcessEvent1+0x378>
1fff6f7c:	8228      	ld.b      	r1, (r2, 0x8)
1fff6f7e:	3940      	cmpnei      	r1, 0
1fff6f80:	0806      	bt      	0x1fff6f8c	// 1fff6f8c <LL_ProcessEvent1+0x33c>
            llSecondaryState = LL_SEC_STATE_IDLE;
1fff6f82:	3200      	movi      	r2, 0
1fff6f84:	a340      	st.b      	r2, (r3, 0x0)
        return (events ^ LL_EVT_SECONDARY_INIT);
1fff6f86:	3380      	movi      	r3, 128
1fff6f88:	4367      	lsli      	r3, r3, 7
1fff6f8a:	07d3      	br      	0x1fff6f30	// 1fff6f30 <LL_ProcessEvent1+0x2e0>
            llSetupSecInit(initInfo.nextScanChan);
1fff6f8c:	820e      	ld.b      	r0, (r2, 0xe)
1fff6f8e:	e0001dcb 	bsr      	0x1fffab24	// 1fffab24 <check_before_startup+0x44c>
1fff6f92:	07fa      	br      	0x1fff6f86	// 1fff6f86 <LL_ProcessEvent1+0x336>
    if (events & LL_EVT_RPA_TIMEOUT) {
1fff6f94:	74c7      	sexth      	r3, r1
1fff6f96:	3bdf      	btsti      	r3, 31
1fff6f98:	0c9e      	bf      	0x1fff70d4	// 1fff70d4 <LL_ProcessEvent1+0x484>
        if (peerInfo.peerAddrType == LL_DEV_ADDR_TYPE_PUBLIC || peerInfo.peerAddrType == LL_DEV_ADDR_TYPE_RANDOM) {
1fff6f9a:	10d3      	lrw      	r6, 0x1fff11ba	// 1fff6fe4 <LL_ProcessEvent1+0x394>
1fff6f9c:	8640      	ld.b      	r2, (r6, 0x0)
1fff6f9e:	3a01      	cmphsi      	r2, 2
1fff6fa0:	0888      	bt      	0x1fff70b0	// 1fff70b0 <LL_ProcessEvent1+0x460>
            if ((adv_param.ownAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC || adv_param.ownAddrType == LL_DEV_ADDR_TYPE_RPA_RANDOM)
1fff6fa2:	10b2      	lrw      	r5, 0x1fff1528	// 1fff6fe8 <LL_ProcessEvent1+0x398>
1fff6fa4:	8566      	ld.b      	r3, (r5, 0x6)
1fff6fa6:	2b01      	subi      	r3, 2
1fff6fa8:	74cc      	zextb      	r3, r3
1fff6faa:	3b01      	cmphsi      	r3, 2
1fff6fac:	085c      	bt      	0x1fff7064	// 1fff7064 <LL_ProcessEvent1+0x414>
                && (ll_readLocalIRK(&localIrk, peerInfo.peerAddr, peerInfo.peerAddrType) == TRUE)) {
1fff6fae:	5e22      	addi      	r1, r6, 1
1fff6fb0:	1807      	addi      	r0, r14, 28
1fff6fb2:	e0001c1b 	bsr      	0x1fffa7e8	// 1fffa7e8 <check_before_startup+0x110>
1fff6fb6:	3841      	cmpnei      	r0, 1
1fff6fb8:	0856      	bt      	0x1fff7064	// 1fff7064 <LL_ProcessEvent1+0x414>
                if (!ll_isIrkAllZero(localIrk) &&
1fff6fba:	9867      	ld.w      	r3, (r14, 0x1c)
1fff6fbc:	6c0f      	mov      	r0, r3
1fff6fbe:	e0001ba9 	bsr      	0x1fffa710	// 1fffa710 <check_before_startup+0x38>
1fff6fc2:	3840      	cmpnei      	r0, 0
1fff6fc4:	0850      	bt      	0x1fff7064	// 1fff7064 <LL_ProcessEvent1+0x414>
1fff6fc6:	041b      	br      	0x1fff6ffc	// 1fff6ffc <LL_ProcessEvent1+0x3ac>
1fff6fc8:	1fff119e 	.long	0x1fff119e
1fff6fcc:	1fff0dd4 	.long	0x1fff0dd4
1fff6fd0:	1fff11bb 	.long	0x1fff11bb
1fff6fd4:	1fff15d7 	.long	0x1fff15d7
1fff6fd8:	1fff191a 	.long	0x1fff191a
1fff6fdc:	1fff1904 	.long	0x1fff1904
1fff6fe0:	1fff15d1 	.long	0x1fff15d1
1fff6fe4:	1fff11ba 	.long	0x1fff11ba
1fff6fe8:	1fff1528 	.long	0x1fff1528
1fff6fec:	1fffa670 	.long	0x1fffa670
1fff6ff0:	1fff14ac 	.long	0x1fff14ac
1fff6ff4:	1fff1184 	.long	0x1fff1184
1fff6ff8:	1fff1494 	.long	0x1fff1494
                    ll_CalcRandomAddr(localIrk, resolve_address) == SUCCESS) {
1fff6ffc:	9807      	ld.w      	r0, (r14, 0x1c)
1fff6ffe:	1909      	addi      	r1, r14, 36
1fff7000:	e0001b94 	bsr      	0x1fffa728	// 1fffa728 <check_before_startup+0x50>
                if (!ll_isIrkAllZero(localIrk) &&
1fff7004:	3840      	cmpnei      	r0, 0
1fff7006:	082f      	bt      	0x1fff7064	// 1fff7064 <LL_ProcessEvent1+0x414>
                    LL_COPY_DEV_ADDR_LE(adv_param.ownAddr, resolve_address);
1fff7008:	d86e0024 	ld.b      	r3, (r14, 0x24)
1fff700c:	a567      	st.b      	r3, (r5, 0x7)
1fff700e:	d86e0025 	ld.b      	r3, (r14, 0x25)
1fff7012:	a568      	st.b      	r3, (r5, 0x8)
1fff7014:	d86e0026 	ld.b      	r3, (r14, 0x26)
1fff7018:	a569      	st.b      	r3, (r5, 0x9)
1fff701a:	d86e0027 	ld.b      	r3, (r14, 0x27)
1fff701e:	a56a      	st.b      	r3, (r5, 0xa)
1fff7020:	d86e0028 	ld.b      	r3, (r14, 0x28)
1fff7024:	a56b      	st.b      	r3, (r5, 0xb)
1fff7026:	d86e0029 	ld.b      	r3, (r14, 0x29)
1fff702a:	a56c      	st.b      	r3, (r5, 0xc)
                    if (g_llAdvMode == LL_MODE_LEGACY) {
1fff702c:	116c      	lrw      	r3, 0x1fff0888	// 1fff70dc <LL_ProcessEvent1+0x48c>
1fff702e:	8360      	ld.b      	r3, (r3, 0x0)
1fff7030:	3b40      	cmpnei      	r3, 0
1fff7032:	0814      	bt      	0x1fff705a	// 1fff705a <LL_ProcessEvent1+0x40a>
                        SET_BITS(g_tx_adv_buf.txheader, LL_DEV_ADDR_TYPE_RANDOM, TX_ADD_SHIFT, TX_ADD_MASK);
1fff7034:	110b      	lrw      	r0, 0x1fff16ec	// 1fff70e0 <LL_ProcessEvent1+0x490>
1fff7036:	3740      	movi      	r7, 64
1fff7038:	8862      	ld.h      	r3, (r0, 0x4)
                        osal_memcpy(&g_tx_adv_buf.data[0],  adv_param.ownAddr, 6);
1fff703a:	3206      	movi      	r2, 6
                        SET_BITS(g_tx_adv_buf.txheader, LL_DEV_ADDR_TYPE_RANDOM, TX_ADD_SHIFT, TX_ADD_MASK);
1fff703c:	6cdc      	or      	r3, r7
1fff703e:	a862      	st.h      	r3, (r0, 0x4)
                        osal_memcpy(&g_tx_adv_buf.data[0],  adv_param.ownAddr, 6);
1fff7040:	5d3a      	addi      	r1, r5, 7
1fff7042:	2005      	addi      	r0, 6
1fff7044:	e0001da6 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
                        SET_BITS(tx_scanRsp_desc.txheader, LL_DEV_ADDR_TYPE_RANDOM, TX_ADD_SHIFT, TX_ADD_MASK);
1fff7048:	1107      	lrw      	r0, 0x1fff15e0	// 1fff70e4 <LL_ProcessEvent1+0x494>
                        osal_memcpy(&tx_scanRsp_desc.data[0], adv_param.ownAddr, 6);
1fff704a:	3206      	movi      	r2, 6
                        SET_BITS(tx_scanRsp_desc.txheader, LL_DEV_ADDR_TYPE_RANDOM, TX_ADD_SHIFT, TX_ADD_MASK);
1fff704c:	8862      	ld.h      	r3, (r0, 0x4)
1fff704e:	6cdc      	or      	r3, r7
1fff7050:	a862      	st.h      	r3, (r0, 0x4)
                        osal_memcpy(&tx_scanRsp_desc.data[0], adv_param.ownAddr, 6);
1fff7052:	5d3a      	addi      	r1, r5, 7
1fff7054:	2005      	addi      	r0, 6
1fff7056:	e0001d9d 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
                    osal_memcpy(&g_currentLocalRpa[0],  resolve_address, 6);
1fff705a:	3206      	movi      	r2, 6
1fff705c:	1103      	lrw      	r0, 0x1fff15d1	// 1fff70e8 <LL_ProcessEvent1+0x498>
1fff705e:	1909      	addi      	r1, r14, 36
1fff7060:	e0001d98 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
            if (adv_param.advEvtType == LL_ADV_CONNECTABLE_LDC_DIRECTED_EVT ||
1fff7064:	856e      	ld.b      	r3, (r5, 0xe)
1fff7066:	3b44      	cmpnei      	r3, 4
1fff7068:	0c03      	bf      	0x1fff706e	// 1fff706e <LL_ProcessEvent1+0x41e>
1fff706a:	3b41      	cmpnei      	r3, 1
1fff706c:	0822      	bt      	0x1fff70b0	// 1fff70b0 <LL_ProcessEvent1+0x460>
                if (ll_readPeerIRK(&peerIrk, peerInfo.peerAddr, peerInfo.peerAddrType) == TRUE) {
1fff706e:	8640      	ld.b      	r2, (r6, 0x0)
1fff7070:	103f      	lrw      	r1, 0x1fff11bb	// 1fff70ec <LL_ProcessEvent1+0x49c>
1fff7072:	1808      	addi      	r0, r14, 32
1fff7074:	e0001c5c 	bsr      	0x1fffa92c	// 1fffa92c <check_before_startup+0x254>
1fff7078:	3841      	cmpnei      	r0, 1
1fff707a:	081b      	bt      	0x1fff70b0	// 1fff70b0 <LL_ProcessEvent1+0x460>
                    if (!ll_isIrkAllZero(peerIrk)) {          // for all-zero local IRK, not RPA used
1fff707c:	9868      	ld.w      	r3, (r14, 0x20)
1fff707e:	6c0f      	mov      	r0, r3
1fff7080:	e0001b48 	bsr      	0x1fffa710	// 1fffa710 <check_before_startup+0x38>
1fff7084:	3840      	cmpnei      	r0, 0
1fff7086:	0815      	bt      	0x1fff70b0	// 1fff70b0 <LL_ProcessEvent1+0x460>
                        if (ll_CalcRandomAddr(peerIrk, resolve_address) == SUCCESS) {
1fff7088:	9808      	ld.w      	r0, (r14, 0x20)
1fff708a:	1909      	addi      	r1, r14, 36
1fff708c:	e0001b4e 	bsr      	0x1fffa728	// 1fffa728 <check_before_startup+0x50>
1fff7090:	3840      	cmpnei      	r0, 0
1fff7092:	080f      	bt      	0x1fff70b0	// 1fff70b0 <LL_ProcessEvent1+0x460>
                            if (g_llAdvMode == LL_MODE_LEGACY) {
1fff7094:	1072      	lrw      	r3, 0x1fff0888	// 1fff70dc <LL_ProcessEvent1+0x48c>
1fff7096:	8360      	ld.b      	r3, (r3, 0x0)
1fff7098:	3b40      	cmpnei      	r3, 0
1fff709a:	0806      	bt      	0x1fff70a6	// 1fff70a6 <LL_ProcessEvent1+0x456>
                                osal_memcpy((uint8_t *) & (g_tx_adv_buf.data[6]), resolve_address, 6);
1fff709c:	3206      	movi      	r2, 6
1fff709e:	1015      	lrw      	r0, 0x1fff16f8	// 1fff70f0 <LL_ProcessEvent1+0x4a0>
1fff70a0:	1909      	addi      	r1, r14, 36
1fff70a2:	e0001d77 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
                            osal_memcpy(&g_currentPeerRpa[0],  resolve_address, 6);
1fff70a6:	3206      	movi      	r2, 6
1fff70a8:	1013      	lrw      	r0, 0x1fff15d7	// 1fff70f4 <LL_ProcessEvent1+0x4a4>
1fff70aa:	1909      	addi      	r1, r14, 36
1fff70ac:	e0001d72 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
        if (g_llRlDeviceNum > 0) {
1fff70b0:	1072      	lrw      	r3, 0x1fff119c	// 1fff70f8 <LL_ProcessEvent1+0x4a8>
1fff70b2:	8360      	ld.b      	r3, (r3, 0x0)
1fff70b4:	3b40      	cmpnei      	r3, 0
1fff70b6:	0c0c      	bf      	0x1fff70ce	// 1fff70ce <LL_ProcessEvent1+0x47e>
            osal_start_timerEx(LL_TaskID, LL_EVT_RPA_TIMEOUT, g_llRlTimeout * 1000);
1fff70b8:	1071      	lrw      	r3, 0x1fff088a	// 1fff70fc <LL_ProcessEvent1+0x4ac>
1fff70ba:	3180      	movi      	r1, 128
1fff70bc:	8b40      	ld.h      	r2, (r3, 0x0)
1fff70be:	33fa      	movi      	r3, 250
1fff70c0:	4362      	lsli      	r3, r3, 2
1fff70c2:	7c8c      	mult      	r2, r3
1fff70c4:	106f      	lrw      	r3, 0x1fff14ac	// 1fff7100 <LL_ProcessEvent1+0x4b0>
1fff70c6:	4128      	lsli      	r1, r1, 8
1fff70c8:	8300      	ld.b      	r0, (r3, 0x0)
1fff70ca:	e0001d57 	bsr      	0x1fffab78	// 1fffab78 <check_before_startup+0x4a0>
        return (events ^ LL_EVT_RPA_TIMEOUT);
1fff70ce:	3380      	movi      	r3, 128
1fff70d0:	4368      	lsli      	r3, r3, 8
1fff70d2:	072f      	br      	0x1fff6f30	// 1fff6f30 <LL_ProcessEvent1+0x2e0>
    return 0;
1fff70d4:	3000      	movi      	r0, 0
1fff70d6:	e800fdcf 	br      	0x1fff6c74	// 1fff6c74 <LL_ProcessEvent1+0x24>
1fff70da:	0000      	bkpt
1fff70dc:	1fff0888 	.long	0x1fff0888
1fff70e0:	1fff16ec 	.long	0x1fff16ec
1fff70e4:	1fff15e0 	.long	0x1fff15e0
1fff70e8:	1fff15d1 	.long	0x1fff15d1
1fff70ec:	1fff11bb 	.long	0x1fff11bb
1fff70f0:	1fff16f8 	.long	0x1fff16f8
1fff70f4:	1fff15d7 	.long	0x1fff15d7
1fff70f8:	1fff119c 	.long	0x1fff119c
1fff70fc:	1fff088a 	.long	0x1fff088a
1fff7100:	1fff14ac 	.long	0x1fff14ac

1fff7104 <llSetupSyncInfo>:
{
1fff7104:	14d4      	push      	r4-r7, r15
    p_scheduler = &g_pAdvSchInfo_periodic[g_currentExtAdv_periodic];
1fff7106:	1177      	lrw      	r3, 0x1fff118b	// 1fff71e0 <llSetupSyncInfo+0xdc>
1fff7108:	1157      	lrw      	r2, 0x1fff1180	// 1fff71e4 <llSetupSyncInfo+0xe0>
1fff710a:	8360      	ld.b      	r3, (r3, 0x0)
1fff710c:	43a2      	lsli      	r5, r3, 2
    osal_memcpy(syncInfo.chn_map, pPrdAdv->chn_map, 4);
1fff710e:	1117      	lrw      	r0, 0x1fff0fa8	// 1fff71e8 <llSetupSyncInfo+0xe4>
    p_scheduler = &g_pAdvSchInfo_periodic[g_currentExtAdv_periodic];
1fff7110:	614c      	addu      	r5, r3
1fff7112:	4562      	lsli      	r3, r5, 2
1fff7114:	92a0      	ld.w      	r5, (r2, 0x0)
    osal_memcpy(syncInfo.chn_map, pPrdAdv->chn_map, 4);
1fff7116:	3204      	movi      	r2, 4
{
1fff7118:	6dc7      	mov      	r7, r1
    p_scheduler = &g_pAdvSchInfo_periodic[g_currentExtAdv_periodic];
1fff711a:	614c      	addu      	r5, r3
    osal_memcpy(syncInfo.chn_map, pPrdAdv->chn_map, 4);
1fff711c:	2118      	addi      	r1, 25
1fff711e:	e0001d39 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
    syncInfo.chn_map4.chn_map = pPrdAdv->chn_map[4];
1fff7122:	877d      	ld.b      	r3, (r7, 0x1d)
    syncInfo.chn_map4.sca     = pPrdAdv->sca;
1fff7124:	d8470044 	ld.b      	r2, (r7, 0x44)
    syncInfo.chn_map4.chn_map = pPrdAdv->chn_map[4];
1fff7128:	1191      	lrw      	r4, 0x1fff0fa4	// 1fff71ec <llSetupSyncInfo+0xe8>
    syncInfo.chn_map4.sca     = pPrdAdv->sca;
1fff712a:	4245      	lsli      	r2, r2, 5
1fff712c:	e463201f 	andi      	r3, r3, 31
1fff7130:	6cc8      	or      	r3, r2
1fff7132:	a468      	st.b      	r3, (r4, 0x8)
    syncInfo.AA[0]            = pPrdAdv->AA & 0xff;
1fff7134:	9772      	ld.w      	r3, (r7, 0x48)
    syncInfo.AA[1]            = (pPrdAdv->AA >> 8) & 0xff;
1fff7136:	4b48      	lsri      	r2, r3, 8
    syncInfo.AA[0]            = pPrdAdv->AA & 0xff;
1fff7138:	a469      	st.b      	r3, (r4, 0x9)
    syncInfo.AA[1]            = (pPrdAdv->AA >> 8) & 0xff;
1fff713a:	a44a      	st.b      	r2, (r4, 0xa)
    syncInfo.AA[2]            = (pPrdAdv->AA >> 16) & 0xff;
1fff713c:	4b50      	lsri      	r2, r3, 16
    syncInfo.AA[3]            = (pPrdAdv->AA >> 24) & 0xff;
1fff713e:	4b78      	lsri      	r3, r3, 24
1fff7140:	a46c      	st.b      	r3, (r4, 0xc)
    syncInfo.crcInit[0]       = pPrdAdv->crcInit & 0xff;
1fff7142:	9773      	ld.w      	r3, (r7, 0x4c)
    syncInfo.AA[2]            = (pPrdAdv->AA >> 16) & 0xff;
1fff7144:	a44b      	st.b      	r2, (r4, 0xb)
    syncInfo.crcInit[0]       = pPrdAdv->crcInit & 0xff;
1fff7146:	a46d      	st.b      	r3, (r4, 0xd)
    syncInfo.crcInit[1]       = (pPrdAdv->crcInit >> 8) & 0xff;
1fff7148:	4b48      	lsri      	r2, r3, 8
    syncInfo.crcInit[2]       = (pPrdAdv->crcInit >> 16) & 0xff;
1fff714a:	4b70      	lsri      	r3, r3, 16
1fff714c:	a46f      	st.b      	r3, (r4, 0xf)
    syncInfo.offset.rfu       = 0;
1fff714e:	8461      	ld.b      	r3, (r4, 0x1)
1fff7150:	e463207f 	andi      	r3, r3, 127
    syncInfo.crcInit[1]       = (pPrdAdv->crcInit >> 8) & 0xff;
1fff7154:	a44e      	st.b      	r2, (r4, 0xe)
    syncInfo.offset.rfu       = 0;
1fff7156:	a461      	st.b      	r3, (r4, 0x1)
    syncInfo.interval         =  pPrdAdv->adv_interval / 1250;
1fff7158:	ea0104e2 	movi      	r1, 1250
1fff715c:	9705      	ld.w      	r0, (r7, 0x14)
    syncInfo.offset.rfu       = 0;
1fff715e:	6d8f      	mov      	r6, r3
    syncInfo.interval         =  pPrdAdv->adv_interval / 1250;
1fff7160:	e0001c94 	bsr      	0x1fffaa88	// 1fffaa88 <check_before_startup+0x3b0>
    syncInfo.event_counter    = pPrdAdv->periodic_adv_event_counter;
1fff7164:	d8671029 	ld.h      	r3, (r7, 0x52)
    syncInfo.interval         =  pPrdAdv->adv_interval / 1250;
1fff7168:	ac01      	st.h      	r0, (r4, 0x2)
    syncInfo.event_counter    = pPrdAdv->periodic_adv_event_counter;
1fff716a:	ac68      	st.h      	r3, (r4, 0x10)
    if (p_scheduler->auxPduRemainder >= 245700) {
1fff716c:	1161      	lrw      	r3, 0x3bfc3	// 1fff71f0 <llSetupSyncInfo+0xec>
1fff716e:	9544      	ld.w      	r2, (r5, 0x10)
1fff7170:	648c      	cmphs      	r3, r2
1fff7172:	74d8      	zextb      	r3, r6
1fff7174:	082f      	bt      	0x1fff71d2	// 1fff71d2 <llSetupSyncInfo+0xce>
        syncInfo.offset.offsetUnit = 1;    // 300us, for aux offset >= 245700us
1fff7176:	ec630020 	ori      	r3, r3, 32
        syncInfo.offset.offsetUnit = 0;    // 30us, for aux offset < 245700us
1fff717a:	a461      	st.b      	r3, (r4, 0x1)
    syncInfo.offset.offsetAdj = 0;
1fff717c:	8461      	ld.b      	r3, (r4, 0x1)
1fff717e:	3b86      	bclri      	r3, 6
1fff7180:	a461      	st.b      	r3, (r4, 0x1)
    T2 = read_current_fine_time();
1fff7182:	e0001ccb 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
    elapse_time = LL_TIME_DELTA(g_timerExpiryTick, T2);
1fff7186:	107c      	lrw      	r3, 0x1fff0f8c	// 1fff71f4 <llSetupSyncInfo+0xf0>
1fff7188:	9360      	ld.w      	r3, (r3, 0x0)
1fff718a:	64c0      	cmphs      	r0, r3
1fff718c:	600e      	subu      	r0, r3
1fff718e:	0c24      	bf      	0x1fff71d6	// 1fff71d6 <llSetupSyncInfo+0xd2>
    if (p_scheduler->auxPduRemainder > 2457600 + elapse_time) {    // if > 2.4576 second
1fff7190:	9564      	ld.w      	r3, (r5, 0x10)
1fff7192:	3296      	movi      	r2, 150
1fff7194:	424e      	lsli      	r2, r2, 14
1fff7196:	6080      	addu      	r2, r0
1fff7198:	64c8      	cmphs      	r2, r3
1fff719a:	0807      	bt      	0x1fff71a8	// 1fff71a8 <llSetupSyncInfo+0xa4>
        remainder = p_scheduler->auxPduRemainder - 2457600;
1fff719c:	1057      	lrw      	r2, 0xffda8000	// 1fff71f8 <llSetupSyncInfo+0xf4>
1fff719e:	60c8      	addu      	r3, r2
        syncInfo.offset.offsetAdj = 1;
1fff71a0:	8441      	ld.b      	r2, (r4, 0x1)
1fff71a2:	ec420040 	ori      	r2, r2, 64
1fff71a6:	a441      	st.b      	r2, (r4, 0x1)
    syncInfo.offset.syncPacketOffset = (remainder - elapse_time) / ((syncInfo.offset.offsetUnit == 1) ? 300 : 30);
1fff71a8:	5b01      	subu      	r0, r3, r0
1fff71aa:	8461      	ld.b      	r3, (r4, 0x1)
1fff71ac:	e4632020 	andi      	r3, r3, 32
1fff71b0:	3196      	movi      	r1, 150
1fff71b2:	3b40      	cmpnei      	r3, 0
1fff71b4:	4121      	lsli      	r1, r1, 1
1fff71b6:	331e      	movi      	r3, 30
1fff71b8:	c4230c20 	incf      	r1, r3, 0
1fff71bc:	e0001c66 	bsr      	0x1fffaa88	// 1fffaa88 <check_before_startup+0x3b0>
1fff71c0:	ea031fff 	movi      	r3, 8191
1fff71c4:	68c0      	and      	r3, r0
1fff71c6:	8c00      	ld.h      	r0, (r4, 0x0)
1fff71c8:	480d      	lsri      	r0, r0, 13
1fff71ca:	400d      	lsli      	r0, r0, 13
1fff71cc:	6c0c      	or      	r0, r3
1fff71ce:	ac00      	st.h      	r0, (r4, 0x0)
}
1fff71d0:	1494      	pop      	r4-r7, r15
        syncInfo.offset.offsetUnit = 0;    // 30us, for aux offset < 245700us
1fff71d2:	3b85      	bclri      	r3, 5
1fff71d4:	07d3      	br      	0x1fff717a	// 1fff717a <llSetupSyncInfo+0x76>
    elapse_time = LL_TIME_DELTA(g_timerExpiryTick, T2);
1fff71d6:	c6a05023 	bmaski      	r3, 22
1fff71da:	600c      	addu      	r0, r3
1fff71dc:	07da      	br      	0x1fff7190	// 1fff7190 <llSetupSyncInfo+0x8c>
1fff71de:	0000      	bkpt
1fff71e0:	1fff118b 	.long	0x1fff118b
1fff71e4:	1fff1180 	.long	0x1fff1180
1fff71e8:	1fff0fa8 	.long	0x1fff0fa8
1fff71ec:	1fff0fa4 	.long	0x1fff0fa4
1fff71f0:	0003bfc3 	.long	0x0003bfc3
1fff71f4:	1fff0f8c 	.long	0x1fff0f8c
1fff71f8:	ffda8000 	.long	0xffda8000

1fff71fc <llSetupAdvExtIndPDU1>:
{
1fff71fc:	14d4      	push      	r4-r7, r15
1fff71fe:	1425      	subi      	r14, r14, 20
1fff7200:	6d43      	mov      	r5, r0
1fff7202:	b822      	st.w      	r1, (r14, 0x8)
    if (pAdvInfo->parameter.advEventProperties & LE_ADV_PROP_CONN_BITMASK) {
1fff7204:	8823      	ld.h      	r1, (r0, 0x6)
1fff7206:	e4612001 	andi      	r3, r1, 1
1fff720a:	3b40      	cmpnei      	r3, 0
1fff720c:	08f0      	bt      	0x1fff73ec	// 1fff73ec <llSetupAdvExtIndPDU1+0x1f0>
    } else if (pAdvInfo->parameter.advEventProperties & LE_ADV_PROP_SCAN_BITMASK) {
1fff720e:	e4612002 	andi      	r3, r1, 2
        advMode = LL_EXT_ADV_MODE_NOCONN_NOSC;
1fff7212:	3b40      	cmpnei      	r3, 0
1fff7214:	c4000502 	mvc      	r2
1fff7218:	4241      	lsli      	r2, r2, 1
    SET_BITS(g_tx_ext_adv_buf.txheader, ADV_EXT_TYPE, PDU_TYPE_SHIFT, PDU_TYPE_MASK);
1fff721a:	3307      	movi      	r3, 7
1fff721c:	03d1      	lrw      	r6, 0x1fff191c	// 1fff7454 <llSetupAdvExtIndPDU1+0x258>
1fff721e:	3007      	movi      	r0, 7
1fff7220:	ae62      	st.h      	r3, (r6, 0x4)
    if (pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC
1fff7222:	8571      	ld.b      	r3, (r5, 0x11)
        ||  pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RPA_RANDOM) {
1fff7224:	5b87      	subi      	r4, r3, 2
    if (pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC
1fff7226:	7510      	zextb      	r4, r4
1fff7228:	3c01      	cmphsi      	r4, 2
1fff722a:	08e8      	bt      	0x1fff73fa	// 1fff73fa <llSetupAdvExtIndPDU1+0x1fe>
        if ((adv_param.ownAddr[5] & RANDOM_ADDR_HDR) == PRIVATE_RESOLVE_ADDR_HDR) {
1fff722c:	0394      	lrw      	r4, 0x1fff1528	// 1fff7458 <llSetupAdvExtIndPDU1+0x25c>
1fff722e:	848c      	ld.b      	r4, (r4, 0xc)
1fff7230:	e48420c0 	andi      	r4, r4, 192
1fff7234:	eb440040 	cmpnei      	r4, 64
1fff7238:	08dc      	bt      	0x1fff73f0	// 1fff73f0 <llSetupAdvExtIndPDU1+0x1f4>
            SET_BITS(g_tx_ext_adv_buf.txheader, LL_DEV_ADDR_TYPE_RANDOM, TX_ADD_SHIFT, TX_ADD_MASK);
1fff723a:	3347      	movi      	r3, 71
    if (pGlobal_config[LL_SWITCH] & CONN_CSA2_ALLOW) {
1fff723c:	0317      	lrw      	r0, 0x1fffa670	// 1fff745c <llSetupAdvExtIndPDU1+0x260>
        SET_BITS(g_tx_ext_adv_buf.txheader, pAdvInfo->parameter.ownAddrType, TX_ADD_SHIFT, TX_ADD_MASK);
1fff723e:	ae62      	st.h      	r3, (r6, 0x4)
    if (pGlobal_config[LL_SWITCH] & CONN_CSA2_ALLOW) {
1fff7240:	9060      	ld.w      	r3, (r0, 0x0)
1fff7242:	b803      	st.w      	r0, (r14, 0xc)
1fff7244:	936b      	ld.w      	r3, (r3, 0x2c)
1fff7246:	e4632080 	andi      	r3, r3, 128
1fff724a:	3b40      	cmpnei      	r3, 0
1fff724c:	0c05      	bf      	0x1fff7256	// 1fff7256 <llSetupAdvExtIndPDU1+0x5a>
        SET_BITS(g_tx_ext_adv_buf.txheader, 1, CHSEL_SHIFT, CHSEL_MASK);
1fff724e:	8e62      	ld.h      	r3, (r6, 0x4)
1fff7250:	ec630020 	ori      	r3, r3, 32
1fff7254:	ae62      	st.h      	r3, (r6, 0x4)
    if (pAdvInfo->isPeriodic == FALSE
1fff7256:	d8650041 	ld.b      	r3, (r5, 0x41)
1fff725a:	3b40      	cmpnei      	r3, 0
1fff725c:	08d1      	bt      	0x1fff73fe	// 1fff73fe <llSetupAdvExtIndPDU1+0x202>
        && (pAdvInfo->data.dataComplete == TRUE && pAdvInfo->data.advertisingDataLength == 0)    // no aux PDU case
1fff725e:	958a      	ld.w      	r4, (r5, 0x28)
1fff7260:	037f      	lrw      	r3, 0xffff00ff	// 1fff7460 <llSetupAdvExtIndPDU1+0x264>
1fff7262:	690c      	and      	r4, r3
1fff7264:	3c41      	cmpnei      	r4, 1
1fff7266:	08cc      	bt      	0x1fff73fe	// 1fff73fe <llSetupAdvExtIndPDU1+0x202>
        && !(pAdvInfo->parameter.advEventProperties & LE_ADV_PROP_SCAN_BITMASK)) {
1fff7268:	e4612003 	andi      	r3, r1, 3
1fff726c:	3b40      	cmpnei      	r3, 0
1fff726e:	08c8      	bt      	0x1fff73fe	// 1fff73fe <llSetupAdvExtIndPDU1+0x202>
        if (pAdvInfo->parameter.advEventProperties & LE_ADV_PROP_DIRECT_BITMASK) {
1fff7270:	e4012004 	andi      	r0, r1, 4
            extHdrLength += 6;
1fff7274:	330d      	movi      	r3, 13
1fff7276:	3840      	cmpnei      	r0, 0
1fff7278:	3707      	movi      	r7, 7
1fff727a:	c4670c20 	incf      	r3, r7, 0
1fff727e:	3840      	cmpnei      	r0, 0
1fff7280:	3003      	movi      	r0, 3
1fff7282:	c4800c40 	inct      	r4, r0, 0
    if (pAdvInfo->parameter.advEventProperties & LE_ADV_PROP_TX_POWER_BITMASK) {
1fff7286:	e4212040 	andi      	r1, r1, 64
1fff728a:	3940      	cmpnei      	r1, 0
1fff728c:	0c06      	bf      	0x1fff7298	// 1fff7298 <llSetupAdvExtIndPDU1+0x9c>
        extHeaderFlag |= LE_EXT_HDR_TX_PWR_PRESENT_BITMASK;
1fff728e:	ec840040 	ori      	r4, r4, 64
        extHdrLength ++;
1fff7292:	2300      	addi      	r3, 1
        extHeaderFlag |= LE_EXT_HDR_TX_PWR_PRESENT_BITMASK;
1fff7294:	7510      	zextb      	r4, r4
        extHdrLength ++;
1fff7296:	74cc      	zextb      	r3, r3
    g_tx_ext_adv_buf.data[offset] = ((advMode & 0x3) << 6) | (extHdrLength & 0x3F);
1fff7298:	4246      	lsli      	r2, r2, 6
    length = 1 + extHdrLength;    // 1: extended header len(6bits) + advMode(2bit)
1fff729a:	5b22      	addi      	r1, r3, 1
    g_tx_ext_adv_buf.data[offset] = ((advMode & 0x3) << 6) | (extHdrLength & 0x3F);
1fff729c:	6cc8      	or      	r3, r2
1fff729e:	a666      	st.b      	r3, (r6, 0x6)
    if (extHeaderFlag & LE_EXT_HDR_ADVA_PRESENT_BITMASK) {
1fff72a0:	e4642001 	andi      	r3, r4, 1
    SET_BITS(g_tx_ext_adv_buf.txheader, length, LENGTH_SHIFT, LENGTH_MASK);
1fff72a4:	7444      	zextb      	r1, r1
1fff72a6:	8604      	ld.b      	r0, (r6, 0x4)
1fff72a8:	4128      	lsli      	r1, r1, 8
    if (extHeaderFlag & LE_EXT_HDR_ADVA_PRESENT_BITMASK) {
1fff72aa:	3b40      	cmpnei      	r3, 0
    SET_BITS(g_tx_ext_adv_buf.txheader, length, LENGTH_SHIFT, LENGTH_MASK);
1fff72ac:	6c40      	or      	r1, r0
1fff72ae:	ae22      	st.h      	r1, (r6, 0x4)
    g_tx_ext_adv_buf.data[offset] = extHeaderFlag;
1fff72b0:	a687      	st.b      	r4, (r6, 0x7)
    if (extHeaderFlag & LE_EXT_HDR_ADVA_PRESENT_BITMASK) {
1fff72b2:	0cac      	bf      	0x1fff740a	// 1fff740a <llSetupAdvExtIndPDU1+0x20e>
        if (g_currentLocalAddrType  == LL_DEV_ADDR_TYPE_RANDOM && pAdvInfo->parameter.isOwnRandomAddressSet == TRUE) { // per adv set random address may be updated after generate adv_param.ownAddr
1fff72b4:	136c      	lrw      	r3, 0x1fff1904	// 1fff7464 <llSetupAdvExtIndPDU1+0x268>
1fff72b6:	8360      	ld.b      	r3, (r3, 0x0)
1fff72b8:	3b41      	cmpnei      	r3, 1
1fff72ba:	08a5      	bt      	0x1fff7404	// 1fff7404 <llSetupAdvExtIndPDU1+0x208>
1fff72bc:	8572      	ld.b      	r3, (r5, 0x12)
1fff72be:	3b41      	cmpnei      	r3, 1
1fff72c0:	08a2      	bt      	0x1fff7404	// 1fff7404 <llSetupAdvExtIndPDU1+0x208>
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], pAdvInfo->parameter.ownRandomAddress, LL_DEVICE_ADDR_LEN);
1fff72c2:	3206      	movi      	r2, 6
1fff72c4:	e4250012 	addi      	r1, r5, 19
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], adv_param.ownAddr, LL_DEVICE_ADDR_LEN);
1fff72c8:	1308      	lrw      	r0, 0x1fff1924	// 1fff7468 <llSetupAdvExtIndPDU1+0x26c>
        offset += LL_DEVICE_ADDR_LEN;
1fff72ca:	3708      	movi      	r7, 8
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], adv_param.ownAddr, LL_DEVICE_ADDR_LEN);
1fff72cc:	e0001c62 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
    if (extHeaderFlag & LE_EXT_HDR_TARGETA_PRESENT_BITMASK) {
1fff72d0:	e4642002 	andi      	r3, r4, 2
1fff72d4:	3b40      	cmpnei      	r3, 0
1fff72d6:	0c0d      	bf      	0x1fff72f0	// 1fff72f0 <llSetupAdvExtIndPDU1+0xf4>
        if (g_currentPeerRpa[5] != 0) {    // TODO: also check g_llRlEnable???
1fff72d8:	1325      	lrw      	r1, 0x1fff15d7	// 1fff746c <llSetupAdvExtIndPDU1+0x270>
1fff72da:	5f16      	addi      	r0, r7, 6
1fff72dc:	8165      	ld.b      	r3, (r1, 0x5)
1fff72de:	3b40      	cmpnei      	r3, 0
1fff72e0:	0c97      	bf      	0x1fff740e	// 1fff740e <llSetupAdvExtIndPDU1+0x212>
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], pAdvInfo->parameter.peerAddress, LL_DEVICE_ADDR_LEN);
1fff72e2:	3206      	movi      	r2, 6
1fff72e4:	127c      	lrw      	r3, 0x1fff191c	// 1fff7454 <llSetupAdvExtIndPDU1+0x258>
        offset += LL_DEVICE_ADDR_LEN;
1fff72e6:	2705      	addi      	r7, 6
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], pAdvInfo->parameter.peerAddress, LL_DEVICE_ADDR_LEN);
1fff72e8:	600c      	addu      	r0, r3
        offset += LL_DEVICE_ADDR_LEN;
1fff72ea:	75dc      	zextb      	r7, r7
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], pAdvInfo->parameter.peerAddress, LL_DEVICE_ADDR_LEN);
1fff72ec:	e0001c52 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
    if (extHeaderFlag & LE_EXT_HDR_ADI_PRESENT_BITMASK) {
1fff72f0:	e4642008 	andi      	r3, r4, 8
1fff72f4:	3b40      	cmpnei      	r3, 0
1fff72f6:	0c11      	bf      	0x1fff7318	// 1fff7318 <llSetupAdvExtIndPDU1+0x11c>
        adi = ((pAdvInfo->parameter.advertisingSID & 0x0F) << 12) | (pAdvInfo->data.DIDInfo & 0x0FFF);
1fff72f8:	8564      	ld.b      	r3, (r5, 0x4)
1fff72fa:	8d58      	ld.h      	r2, (r5, 0x30)
1fff72fc:	e4422fff 	andi      	r2, r2, 4095
1fff7300:	436c      	lsli      	r3, r3, 12
1fff7302:	6cc8      	or      	r3, r2
        osal_memcpy(&g_tx_ext_adv_buf.data[offset], (uint8 *)&adi, 2);
1fff7304:	3202      	movi      	r2, 2
        adi = ((pAdvInfo->parameter.advertisingSID & 0x0F) << 12) | (pAdvInfo->data.DIDInfo & 0x0FFF);
1fff7306:	dc6e1008 	st.h      	r3, (r14, 0x10)
        osal_memcpy(&g_tx_ext_adv_buf.data[offset], (uint8 *)&adi, 2);
1fff730a:	121a      	lrw      	r0, 0x1fff1922	// 1fff7470 <llSetupAdvExtIndPDU1+0x274>
1fff730c:	1904      	addi      	r1, r14, 16
1fff730e:	601c      	addu      	r0, r7
        offset += 2;
1fff7310:	2701      	addi      	r7, 2
        osal_memcpy(&g_tx_ext_adv_buf.data[offset], (uint8 *)&adi, 2);
1fff7312:	e0001c3f 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
        offset += 2;
1fff7316:	75dc      	zextb      	r7, r7
    if (extHeaderFlag & LE_EXT_HDR_AUX_PTR_PRESENT_BITMASK) {
1fff7318:	e4642010 	andi      	r3, r4, 16
1fff731c:	3b40      	cmpnei      	r3, 0
1fff731e:	0c44      	bf      	0x1fff73a6	// 1fff73a6 <llSetupAdvExtIndPDU1+0x1aa>
        chn_idx = 3 + (pAdvInfo->advHandle & 0x0F);        // temp set
1fff7320:	8560      	ld.b      	r3, (r5, 0x0)
1fff7322:	e463200f 	andi      	r3, r3, 15
1fff7326:	2302      	addi      	r3, 3
1fff7328:	b860      	st.w      	r3, (r14, 0x0)
        aux_phy = pAdvInfo->parameter.secondaryAdvPHY - 1;     // HCI & LL using different enum
1fff732a:	d8650023 	ld.b      	r3, (r5, 0x23)
1fff732e:	2b00      	subi      	r3, 1
1fff7330:	74cc      	zextb      	r3, r3
1fff7332:	b861      	st.w      	r3, (r14, 0x4)
        if (pAdvInfo->isPeriodic == FALSE) {
1fff7334:	d8650041 	ld.b      	r3, (r5, 0x41)
1fff7338:	3b40      	cmpnei      	r3, 0
1fff733a:	086d      	bt      	0x1fff7414	// 1fff7414 <llSetupAdvExtIndPDU1+0x218>
            if (g_pAdvSchInfo[g_currentExtAdv].auxPduRemainder >= 245700) {
1fff733c:	124e      	lrw      	r2, 0x1fff12dc	// 1fff7474 <llSetupAdvExtIndPDU1+0x278>
1fff733e:	8220      	ld.b      	r1, (r2, 0x0)
1fff7340:	124e      	lrw      	r2, 0x1fff1198	// 1fff7478 <llSetupAdvExtIndPDU1+0x27c>
1fff7342:	4124      	lsli      	r1, r1, 4
1fff7344:	9240      	ld.w      	r2, (r2, 0x0)
1fff7346:	6084      	addu      	r2, r1
1fff7348:	9203      	ld.w      	r0, (r2, 0xc)
1fff734a:	122d      	lrw      	r1, 0x3bfc3	// 1fff747c <llSetupAdvExtIndPDU1+0x280>
                offset_unit = 1;    // 300us, for aux offset >= 245700us
1fff734c:	3201      	movi      	r2, 1
1fff734e:	6404      	cmphs      	r1, r0
1fff7350:	c4620c20 	incf      	r3, r2, 0
1fff7354:	3296      	movi      	r2, 150
1fff7356:	6404      	cmphs      	r1, r0
1fff7358:	4241      	lsli      	r2, r2, 1
1fff735a:	311e      	movi      	r1, 30
1fff735c:	c4220c20 	incf      	r1, r2, 0
1fff7360:	b862      	st.w      	r3, (r14, 0x8)
            aux_offset = (g_pAdvSchInfo[g_currentExtAdv].auxPduRemainder + offset_adj) / ((offset_unit == 1) ? 300 : 30);
1fff7362:	200e      	addi      	r0, 15
1fff7364:	e0001b92 	bsr      	0x1fffaa88	// 1fffaa88 <check_before_startup+0x3b0>
1fff7368:	7401      	zexth      	r0, r0
1fff736a:	9862      	ld.w      	r3, (r14, 0x8)
        temp |= (aux_phy & LL_AUX_PTR_AUX_PHY_MASK) << LL_AUX_PTR_AUX_PHY_SHIFT;
1fff736c:	9841      	ld.w      	r2, (r14, 0x4)
1fff736e:	31e0      	movi      	r1, 224
1fff7370:	4130      	lsli      	r1, r1, 16
1fff7372:	4255      	lsli      	r2, r2, 21
1fff7374:	6884      	and      	r2, r1
1fff7376:	9820      	ld.w      	r1, (r14, 0x0)
1fff7378:	6c84      	or      	r2, r1
        temp |= (offset_unit & LL_AUX_PTR_OFFSET_UNIT_MASK) << LL_AUX_PTR_OFFSET_UNIT_SHIFT;
1fff737a:	4367      	lsli      	r3, r3, 7
        temp |= (aux_phy & LL_AUX_PTR_AUX_PHY_MASK) << LL_AUX_PTR_AUX_PHY_SHIFT;
1fff737c:	6cc8      	or      	r3, r2
        temp |= (aux_offset & LL_AUX_PTR_AUX_OFFSET_MASK) << LL_AUX_PTR_AUX_OFFSET_SHIFT;
1fff737e:	4008      	lsli      	r0, r0, 8
1fff7380:	1240      	lrw      	r2, 0x1fff00	// 1fff7480 <llSetupAdvExtIndPDU1+0x284>
1fff7382:	6808      	and      	r0, r2
        osal_memcpy(&g_tx_ext_adv_buf.data[offset], (uint8 *)&temp, 3);
1fff7384:	3203      	movi      	r2, 3
        temp |= (aux_phy & LL_AUX_PTR_AUX_PHY_MASK) << LL_AUX_PTR_AUX_PHY_SHIFT;
1fff7386:	6cc0      	or      	r3, r0
        temp &= 0x00FFFFFF;
1fff7388:	b864      	st.w      	r3, (r14, 0x10)
        osal_memcpy(&g_tx_ext_adv_buf.data[offset], (uint8 *)&temp, 3);
1fff738a:	111a      	lrw      	r0, 0x1fff1922	// 1fff7470 <llSetupAdvExtIndPDU1+0x274>
1fff738c:	1904      	addi      	r1, r14, 16
1fff738e:	601c      	addu      	r0, r7
1fff7390:	e0001c00 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
        pAdvInfo->auxChn = chn_idx;        // save secondary channel index
1fff7394:	d86e0000 	ld.b      	r3, (r14, 0x0)
        offset += 3;
1fff7398:	2702      	addi      	r7, 3
        pAdvInfo->auxChn = chn_idx;        // save secondary channel index
1fff739a:	dc650053 	st.b      	r3, (r5, 0x53)
        pAdvInfo->currentAdvOffset = 0;    // reset offset in adv data set
1fff739e:	3300      	movi      	r3, 0
        offset += 3;
1fff73a0:	75dc      	zextb      	r7, r7
        pAdvInfo->currentAdvOffset = 0;    // reset offset in adv data set
1fff73a2:	dc65102a 	st.h      	r3, (r5, 0x54)
    if (extHeaderFlag & LE_EXT_HDR_TX_PWR_PRESENT_BITMASK) {  // Tx power is optional, could we only filled it in AUX_ADV_IND?
1fff73a6:	e4842040 	andi      	r4, r4, 64
1fff73aa:	3c40      	cmpnei      	r4, 0
1fff73ac:	0c1b      	bf      	0x1fff73e2	// 1fff73e2 <llSetupAdvExtIndPDU1+0x1e6>
        radio_pwr = pAdvInfo->tx_power * 10 + g_rfTxPathCompensation;
1fff73ae:	d8650050 	ld.b      	r3, (r5, 0x50)
1fff73b2:	320a      	movi      	r2, 10
1fff73b4:	74ce      	sextb      	r3, r3
1fff73b6:	7cc8      	mult      	r3, r2
1fff73b8:	1153      	lrw      	r2, 0x1fff0e34	// 1fff7484 <llSetupAdvExtIndPDU1+0x288>
1fff73ba:	8a40      	ld.h      	r2, (r2, 0x0)
1fff73bc:	60c8      	addu      	r3, r2
1fff73be:	1153      	lrw      	r2, 0xfffffb0a	// 1fff7488 <llSetupAdvExtIndPDU1+0x28c>
1fff73c0:	6c0f      	mov      	r0, r3
1fff73c2:	74cf      	sexth      	r3, r3
1fff73c4:	648d      	cmplt      	r3, r2
1fff73c6:	0c02      	bf      	0x1fff73ca	// 1fff73ca <llSetupAdvExtIndPDU1+0x1ce>
1fff73c8:	6c0b      	mov      	r0, r2
        g_tx_ext_adv_buf.data[offset] = (uint8)(radio_pwr / 10);
1fff73ca:	74c3      	sexth      	r3, r0
1fff73cc:	619c      	addu      	r6, r7
1fff73ce:	eb2304f6 	cmplti      	r3, 1271
1fff73d2:	0803      	bt      	0x1fff73d8	// 1fff73d8 <llSetupAdvExtIndPDU1+0x1dc>
1fff73d4:	ea0004f6 	movi      	r0, 1270
1fff73d8:	7403      	sexth      	r0, r0
1fff73da:	310a      	movi      	r1, 10
1fff73dc:	e0001cf4 	bsr      	0x1fffadc4	// 1fffadc4 <check_before_startup+0x6ec>
1fff73e0:	a606      	st.b      	r0, (r6, 0x6)
    pAdvInfo->currentAdvOffset = 0;
1fff73e2:	3300      	movi      	r3, 0
1fff73e4:	dc65102a 	st.h      	r3, (r5, 0x54)
}
1fff73e8:	1405      	addi      	r14, r14, 20
1fff73ea:	1494      	pop      	r4-r7, r15
        advMode = LL_EXT_ADV_MODE_CONN;
1fff73ec:	3201      	movi      	r2, 1
1fff73ee:	0716      	br      	0x1fff721a	// 1fff721a <llSetupAdvExtIndPDU1+0x1e>
            SET_BITS(g_tx_ext_adv_buf.txheader, (pAdvInfo->parameter.ownAddrType & 0x01), TX_ADD_SHIFT, TX_ADD_MASK);
1fff73f0:	4366      	lsli      	r3, r3, 6
1fff73f2:	e4632040 	andi      	r3, r3, 64
        SET_BITS(g_tx_ext_adv_buf.txheader, pAdvInfo->parameter.ownAddrType, TX_ADD_SHIFT, TX_ADD_MASK);
1fff73f6:	6cc0      	or      	r3, r0
1fff73f8:	0722      	br      	0x1fff723c	// 1fff723c <llSetupAdvExtIndPDU1+0x40>
1fff73fa:	4366      	lsli      	r3, r3, 6
1fff73fc:	07fd      	br      	0x1fff73f6	// 1fff73f6 <llSetupAdvExtIndPDU1+0x1fa>
        extHdrLength += 5;
1fff73fe:	3306      	movi      	r3, 6
        extHeaderFlag |= LE_EXT_HDR_ADI_PRESENT_BITMASK | LE_EXT_HDR_AUX_PTR_PRESENT_BITMASK;
1fff7400:	3418      	movi      	r4, 24
1fff7402:	0742      	br      	0x1fff7286	// 1fff7286 <llSetupAdvExtIndPDU1+0x8a>
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], adv_param.ownAddr, LL_DEVICE_ADDR_LEN);
1fff7404:	3206      	movi      	r2, 6
1fff7406:	1122      	lrw      	r1, 0x1fff152f	// 1fff748c <llSetupAdvExtIndPDU1+0x290>
1fff7408:	0760      	br      	0x1fff72c8	// 1fff72c8 <llSetupAdvExtIndPDU1+0xcc>
    offset ++;
1fff740a:	3702      	movi      	r7, 2
1fff740c:	0762      	br      	0x1fff72d0	// 1fff72d0 <llSetupAdvExtIndPDU1+0xd4>
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], pAdvInfo->parameter.peerAddress, LL_DEVICE_ADDR_LEN);
1fff740e:	e4250019 	addi      	r1, r5, 26
1fff7412:	0768      	br      	0x1fff72e2	// 1fff72e2 <llSetupAdvExtIndPDU1+0xe6>
            temp = 1 << (pPrdAdv->currentChn - LL_ADV_CHAN_FIRST);     // current bit mask
1fff7414:	9862      	ld.w      	r3, (r14, 0x8)
                     ((temp & 0x0002) >> 1) +
1fff7416:	3101      	movi      	r1, 1
            temp = 1 << (pPrdAdv->currentChn - LL_ADV_CHAN_FIRST);     // current bit mask
1fff7418:	d8430055 	ld.b      	r2, (r3, 0x55)
1fff741c:	e4621024 	subi      	r3, r2, 37
1fff7420:	3201      	movi      	r2, 1
1fff7422:	708c      	lsl      	r2, r3
            temp = ~(temp | (temp - 1));
1fff7424:	5a63      	subi      	r3, r2, 1
1fff7426:	6c8c      	or      	r2, r3
            temp = pAdvInfo->parameter.priAdvChnMap & temp;            // channel in the chan map to be broadcast
1fff7428:	8570      	ld.b      	r3, (r5, 0x10)
1fff742a:	c4432042 	andn      	r2, r3, r2
                     ((temp & 0x0002) >> 1) +
1fff742e:	5261      	asri      	r3, r2, 1
                     ((temp & 0x0004) >> 2);
1fff7430:	5202      	asri      	r0, r2, 2
                     ((temp & 0x0002) >> 1) +
1fff7432:	68c4      	and      	r3, r1
                     ((temp & 0x0004) >> 2);
1fff7434:	6804      	and      	r0, r1
            number = (temp & 0x0001) +
1fff7436:	600c      	addu      	r0, r3
            aux_offset = ((number + 1) * pGlobal_config[LL_EXT_ADV_INTER_PRI_CHN_INT] /*LL_EXT_ADV_PRI_2_SEC_CHN_INT]*/) / 30;
1fff7438:	9863      	ld.w      	r3, (r14, 0xc)
            number = (temp & 0x0001) +
1fff743a:	6884      	and      	r2, r1
            aux_offset = ((number + 1) * pGlobal_config[LL_EXT_ADV_INTER_PRI_CHN_INT] /*LL_EXT_ADV_PRI_2_SEC_CHN_INT]*/) / 30;
1fff743c:	9360      	ld.w      	r3, (r3, 0x0)
1fff743e:	6008      	addu      	r0, r2
1fff7440:	d8632051 	ld.w      	r3, (r3, 0x144)
1fff7444:	2000      	addi      	r0, 1
1fff7446:	311e      	movi      	r1, 30
1fff7448:	7c0c      	mult      	r0, r3
1fff744a:	e0001b1f 	bsr      	0x1fffaa88	// 1fffaa88 <check_before_startup+0x3b0>
1fff744e:	7401      	zexth      	r0, r0
            offset_unit = 0;    // 30us, for aux offset < 245700us
1fff7450:	3300      	movi      	r3, 0
1fff7452:	078d      	br      	0x1fff736c	// 1fff736c <llSetupAdvExtIndPDU1+0x170>
1fff7454:	1fff191c 	.long	0x1fff191c
1fff7458:	1fff1528 	.long	0x1fff1528
1fff745c:	1fffa670 	.long	0x1fffa670
1fff7460:	ffff00ff 	.long	0xffff00ff
1fff7464:	1fff1904 	.long	0x1fff1904
1fff7468:	1fff1924 	.long	0x1fff1924
1fff746c:	1fff15d7 	.long	0x1fff15d7
1fff7470:	1fff1922 	.long	0x1fff1922
1fff7474:	1fff12dc 	.long	0x1fff12dc
1fff7478:	1fff1198 	.long	0x1fff1198
1fff747c:	0003bfc3 	.long	0x0003bfc3
1fff7480:	001fff00 	.long	0x001fff00
1fff7484:	1fff0e34 	.long	0x1fff0e34
1fff7488:	fffffb0a 	.long	0xfffffb0a
1fff748c:	1fff152f 	.long	0x1fff152f

1fff7490 <llSetupAuxAdvIndPDU1>:
{
1fff7490:	14d4      	push      	r4-r7, r15
1fff7492:	1426      	subi      	r14, r14, 24
1fff7494:	6d03      	mov      	r4, r0
1fff7496:	b822      	st.w      	r1, (r14, 0x8)
    if (pAdvInfo->parameter.advEventProperties & LE_ADV_PROP_CONN_BITMASK) {
1fff7498:	8823      	ld.h      	r1, (r0, 0x6)
1fff749a:	e4612001 	andi      	r3, r1, 1
1fff749e:	3b40      	cmpnei      	r3, 0
1fff74a0:	08f8      	bt      	0x1fff7690	// 1fff7690 <llSetupAuxAdvIndPDU1+0x200>
    } else if (pAdvInfo->parameter.advEventProperties & LE_ADV_PROP_SCAN_BITMASK) {
1fff74a2:	e4612002 	andi      	r3, r1, 2
        advMode = LL_EXT_ADV_MODE_NOCONN_NOSC;
1fff74a6:	3b40      	cmpnei      	r3, 0
1fff74a8:	c4000502 	mvc      	r2
1fff74ac:	4241      	lsli      	r2, r2, 1
    if (pGlobal_config[LL_SWITCH] & CONN_CSA2_ALLOW) {
1fff74ae:	03ab      	lrw      	r5, 0x1fffa670	// 1fff76fc <llSetupAuxAdvIndPDU1+0x26c>
    SET_BITS(g_tx_ext_adv_buf.txheader, pAdvInfo->parameter.ownAddrType, TX_ADD_SHIFT, TX_ADD_MASK);
1fff74b0:	8411      	ld.b      	r0, (r4, 0x11)
    if (pGlobal_config[LL_SWITCH] & CONN_CSA2_ALLOW) {
1fff74b2:	95a0      	ld.w      	r5, (r5, 0x0)
    SET_BITS(g_tx_ext_adv_buf.txheader, pAdvInfo->parameter.ownAddrType, TX_ADD_SHIFT, TX_ADD_MASK);
1fff74b4:	4066      	lsli      	r3, r0, 6
    if (pGlobal_config[LL_SWITCH] & CONN_CSA2_ALLOW) {
1fff74b6:	95ab      	ld.w      	r5, (r5, 0x2c)
1fff74b8:	e4a52080 	andi      	r5, r5, 128
    SET_BITS(g_tx_ext_adv_buf.txheader, pAdvInfo->parameter.ownAddrType, TX_ADD_SHIFT, TX_ADD_MASK);
1fff74bc:	03ce      	lrw      	r6, 0x1fff191c	// 1fff7700 <llSetupAuxAdvIndPDU1+0x270>
    if (pGlobal_config[LL_SWITCH] & CONN_CSA2_ALLOW) {
1fff74be:	3d40      	cmpnei      	r5, 0
    SET_BITS(g_tx_ext_adv_buf.txheader, pAdvInfo->parameter.ownAddrType, TX_ADD_SHIFT, TX_ADD_MASK);
1fff74c0:	ec630007 	ori      	r3, r3, 7
1fff74c4:	ae62      	st.h      	r3, (r6, 0x4)
1fff74c6:	b8c0      	st.w      	r6, (r14, 0x0)
    if (pGlobal_config[LL_SWITCH] & CONN_CSA2_ALLOW) {
1fff74c8:	0c04      	bf      	0x1fff74d0	// 1fff74d0 <llSetupAuxAdvIndPDU1+0x40>
        SET_BITS(g_tx_ext_adv_buf.txheader, 1, CHSEL_SHIFT, CHSEL_MASK);
1fff74ca:	ec630020 	ori      	r3, r3, 32
1fff74ce:	ae62      	st.h      	r3, (r6, 0x4)
    if (pAdvInfo->parameter.advEventProperties & LE_ADV_PROP_DIRECT_BITMASK) {
1fff74d0:	e4a12004 	andi      	r5, r1, 4
        extHdrLength += 6;
1fff74d4:	3603      	movi      	r6, 3
1fff74d6:	3d40      	cmpnei      	r5, 0
1fff74d8:	3309      	movi      	r3, 9
    if (pAdvInfo->parameter.advEventProperties & LE_ADV_PROP_TX_POWER_BITMASK) {
1fff74da:	e4212040 	andi      	r1, r1, 64
        extHdrLength += 6;
1fff74de:	c4660c20 	incf      	r3, r6, 0
1fff74e2:	3d40      	cmpnei      	r5, 0
1fff74e4:	360a      	movi      	r6, 10
1fff74e6:	3508      	movi      	r5, 8
1fff74e8:	c4c50c20 	incf      	r6, r5, 0
    if (pAdvInfo->parameter.advEventProperties & LE_ADV_PROP_TX_POWER_BITMASK) {
1fff74ec:	3940      	cmpnei      	r1, 0
1fff74ee:	08d3      	bt      	0x1fff7694	// 1fff7694 <llSetupAuxAdvIndPDU1+0x204>
    extHeaderFlag |= LE_EXT_HDR_ADVA_PRESENT_BITMASK;
1fff74f0:	ecc60001 	ori      	r6, r6, 1
    extHdrLength += 6;
1fff74f4:	2305      	addi      	r3, 6
    if (pAdvInfo->isPeriodic == TRUE) {
1fff74f6:	d8a40041 	ld.b      	r5, (r4, 0x41)
1fff74fa:	3d41      	cmpnei      	r5, 1
1fff74fc:	0805      	bt      	0x1fff7506	// 1fff7506 <llSetupAuxAdvIndPDU1+0x76>
        extHdrLength += 18;
1fff74fe:	2311      	addi      	r3, 18
        extHeaderFlag |= LE_EXT_HDR_SYNC_INFO_PRESENT_BITMASK;
1fff7500:	ecc60020 	ori      	r6, r6, 32
        extHdrLength += 18;
1fff7504:	74cc      	zextb      	r3, r3
    if (pAdvInfo->data.dataComplete == TRUE) {
1fff7506:	d8240028 	ld.b      	r1, (r4, 0x28)
1fff750a:	3941      	cmpnei      	r1, 1
1fff750c:	08d1      	bt      	0x1fff76ae	// 1fff76ae <llSetupAuxAdvIndPDU1+0x21e>
        if (advMode == LL_EXT_ADV_MODE_NOCONN_NOSC
1fff750e:	3a40      	cmpnei      	r2, 0
1fff7510:	8c35      	ld.h      	r1, (r4, 0x2a)
1fff7512:	08c5      	bt      	0x1fff769c	// 1fff769c <llSetupAuxAdvIndPDU1+0x20c>
            && (pAdvInfo->isPeriodic == FALSE)
1fff7514:	3d40      	cmpnei      	r5, 0
1fff7516:	08c3      	bt      	0x1fff769c	// 1fff769c <llSetupAuxAdvIndPDU1+0x20c>
            && (pAdvInfo->data.advertisingDataLength > 255 - 1 - extHdrLength)) {
1fff7518:	75c5      	zexth      	r7, r1
1fff751a:	35fe      	movi      	r5, 254
1fff751c:	614e      	subu      	r5, r3
1fff751e:	65d5      	cmplt      	r5, r7
1fff7520:	0cbe      	bf      	0x1fff769c	// 1fff769c <llSetupAuxAdvIndPDU1+0x20c>
            extHdrLength += 3;
1fff7522:	2302      	addi      	r3, 3
            advDataLen = 255 - 1 - extHdrLength;       // adv data length. TODO: check spec
1fff7524:	3100      	movi      	r1, 0
            extHdrLength += 3;
1fff7526:	74cc      	zextb      	r3, r3
            advDataLen = 255 - 1 - extHdrLength;       // adv data length. TODO: check spec
1fff7528:	2901      	subi      	r1, 2
            extHeaderFlag |= LE_EXT_HDR_AUX_PTR_PRESENT_BITMASK;
1fff752a:	ecc60010 	ori      	r6, r6, 16
            advDataLen = 255 - 1 - extHdrLength;       // adv data length. TODO: check spec
1fff752e:	604e      	subu      	r1, r3
1fff7530:	7444      	zextb      	r1, r1
        advDataLen = 0;
1fff7532:	b821      	st.w      	r1, (r14, 0x4)
    SET_BITS(g_tx_ext_adv_buf.txheader, length, LENGTH_SHIFT, LENGTH_MASK);
1fff7534:	98a0      	ld.w      	r5, (r14, 0x0)
    length = 1 + extHdrLength + advDataLen;    // 1: extended header len(6bits) + advMode(2bit)
1fff7536:	9821      	ld.w      	r1, (r14, 0x4)
1fff7538:	604c      	addu      	r1, r3
1fff753a:	2100      	addi      	r1, 1
    SET_BITS(g_tx_ext_adv_buf.txheader, length, LENGTH_SHIFT, LENGTH_MASK);
1fff753c:	7444      	zextb      	r1, r1
1fff753e:	85a4      	ld.b      	r5, (r5, 0x4)
1fff7540:	4128      	lsli      	r1, r1, 8
1fff7542:	6c54      	or      	r1, r5
    g_tx_ext_adv_buf.data[offset] = ((advMode & 0x3) << 6) | (extHdrLength & 0x3F);
1fff7544:	4246      	lsli      	r2, r2, 6
    SET_BITS(g_tx_ext_adv_buf.txheader, length, LENGTH_SHIFT, LENGTH_MASK);
1fff7546:	98a0      	ld.w      	r5, (r14, 0x0)
    g_tx_ext_adv_buf.data[offset] = ((advMode & 0x3) << 6) | (extHdrLength & 0x3F);
1fff7548:	6cc8      	or      	r3, r2
1fff754a:	a566      	st.b      	r3, (r5, 0x6)
    g_tx_ext_adv_buf.data[offset] = extHeaderFlag;
1fff754c:	a5c7      	st.b      	r6, (r5, 0x7)
        if (pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RANDOM && pAdvInfo->parameter.isOwnRandomAddressSet == TRUE) {
1fff754e:	134e      	lrw      	r2, 0xffff00	// 1fff7704 <llSetupAuxAdvIndPDU1+0x274>
1fff7550:	9464      	ld.w      	r3, (r4, 0x10)
1fff7552:	68c8      	and      	r3, r2
1fff7554:	134d      	lrw      	r2, 0x10100	// 1fff7708 <llSetupAuxAdvIndPDU1+0x278>
    SET_BITS(g_tx_ext_adv_buf.txheader, length, LENGTH_SHIFT, LENGTH_MASK);
1fff7556:	ad22      	st.h      	r1, (r5, 0x4)
        if (pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RANDOM && pAdvInfo->parameter.isOwnRandomAddressSet == TRUE) {
1fff7558:	648e      	cmpne      	r3, r2
1fff755a:	08ac      	bt      	0x1fff76b2	// 1fff76b2 <llSetupAuxAdvIndPDU1+0x222>
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], pAdvInfo->parameter.ownRandomAddress, LL_DEVICE_ADDR_LEN);
1fff755c:	3206      	movi      	r2, 6
1fff755e:	e4240012 	addi      	r1, r4, 19
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], ownPublicAddr, LL_DEVICE_ADDR_LEN);
1fff7562:	130b      	lrw      	r0, 0x1fff1924	// 1fff770c <llSetupAuxAdvIndPDU1+0x27c>
1fff7564:	e0001b16 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
    if (extHeaderFlag & LE_EXT_HDR_TARGETA_PRESENT_BITMASK) {
1fff7568:	e4662002 	andi      	r3, r6, 2
1fff756c:	3b40      	cmpnei      	r3, 0
1fff756e:	0cae      	bf      	0x1fff76ca	// 1fff76ca <llSetupAuxAdvIndPDU1+0x23a>
        if (g_currentPeerRpa[5] != 0) {
1fff7570:	1328      	lrw      	r1, 0x1fff15d7	// 1fff7710 <llSetupAuxAdvIndPDU1+0x280>
1fff7572:	8165      	ld.b      	r3, (r1, 0x5)
1fff7574:	3b40      	cmpnei      	r3, 0
1fff7576:	0ca7      	bf      	0x1fff76c4	// 1fff76c4 <llSetupAuxAdvIndPDU1+0x234>
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], pAdvInfo->parameter.peerAddress, LL_DEVICE_ADDR_LEN);
1fff7578:	3206      	movi      	r2, 6
1fff757a:	1307      	lrw      	r0, 0x1fff192a	// 1fff7714 <llSetupAuxAdvIndPDU1+0x284>
1fff757c:	e0001b0a 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
        offset += LL_DEVICE_ADDR_LEN;
1fff7580:	330e      	movi      	r3, 14
        adi = ((pAdvInfo->parameter.advertisingSID & 0x0F) << 12) | (pAdvInfo->data.DIDInfo & 0x0FFF);
1fff7582:	8444      	ld.b      	r2, (r4, 0x4)
1fff7584:	8c38      	ld.h      	r1, (r4, 0x30)
1fff7586:	e4212fff 	andi      	r1, r1, 4095
1fff758a:	424c      	lsli      	r2, r2, 12
1fff758c:	6c84      	or      	r2, r1
1fff758e:	dc4e100a 	st.h      	r2, (r14, 0x14)
        osal_memcpy(&g_tx_ext_adv_buf.data[offset], (uint8 *)&adi, 2);
1fff7592:	3202      	movi      	r2, 2
1fff7594:	6d4f      	mov      	r5, r3
1fff7596:	1905      	addi      	r1, r14, 20
1fff7598:	1300      	lrw      	r0, 0x1fff1922	// 1fff7718 <llSetupAuxAdvIndPDU1+0x288>
1fff759a:	600c      	addu      	r0, r3
1fff759c:	e0001afa 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
    if (extHeaderFlag & LE_EXT_HDR_AUX_PTR_PRESENT_BITMASK) {
1fff75a0:	e4462010 	andi      	r2, r6, 16
        offset += 2;
1fff75a4:	6cd7      	mov      	r3, r5
    if (extHeaderFlag & LE_EXT_HDR_AUX_PTR_PRESENT_BITMASK) {
1fff75a6:	3a40      	cmpnei      	r2, 0
        offset += 2;
1fff75a8:	2501      	addi      	r5, 2
    if (extHeaderFlag & LE_EXT_HDR_AUX_PTR_PRESENT_BITMASK) {
1fff75aa:	0c92      	bf      	0x1fff76ce	// 1fff76ce <llSetupAuxAdvIndPDU1+0x23e>
1fff75ac:	b864      	st.w      	r3, (r14, 0x10)
        chn_idx = llGetNextAuxAdvChn(pAdvInfo->currentChn);
1fff75ae:	d8040052 	ld.b      	r0, (r4, 0x52)
        uint32  temp = 0;
1fff75b2:	3300      	movi      	r3, 0
1fff75b4:	b865      	st.w      	r3, (r14, 0x14)
        chn_idx = llGetNextAuxAdvChn(pAdvInfo->currentChn);
1fff75b6:	e0001a5d 	bsr      	0x1fffaa70	// 1fffaa70 <check_before_startup+0x398>
        aux_offset = g_interAuxPduDuration / 30;
1fff75ba:	1239      	lrw      	r1, 0x1fff0894	// 1fff771c <llSetupAuxAdvIndPDU1+0x28c>
        aux_phy = pAdvInfo->parameter.secondaryAdvPHY - 1;             // HCI & LL using different enum
1fff75bc:	d8e40023 	ld.b      	r7, (r4, 0x23)
        chn_idx = llGetNextAuxAdvChn(pAdvInfo->currentChn);
1fff75c0:	b803      	st.w      	r0, (r14, 0xc)
        aux_offset = g_interAuxPduDuration / 30;
1fff75c2:	9100      	ld.w      	r0, (r1, 0x0)
1fff75c4:	311e      	movi      	r1, 30
        aux_phy = pAdvInfo->parameter.secondaryAdvPHY - 1;             // HCI & LL using different enum
1fff75c6:	2f00      	subi      	r7, 1
        aux_offset = g_interAuxPduDuration / 30;
1fff75c8:	e0001a60 	bsr      	0x1fffaa88	// 1fffaa88 <check_before_startup+0x3b0>
        temp |= (aux_offset & LL_AUX_PTR_AUX_OFFSET_MASK) << LL_AUX_PTR_AUX_OFFSET_SHIFT;
1fff75cc:	4008      	lsli      	r0, r0, 8
1fff75ce:	1275      	lrw      	r3, 0x1fff00	// 1fff7720 <llSetupAuxAdvIndPDU1+0x290>
1fff75d0:	680c      	and      	r0, r3
        aux_phy = pAdvInfo->parameter.secondaryAdvPHY - 1;             // HCI & LL using different enum
1fff75d2:	75dc      	zextb      	r7, r7
        temp |= (aux_phy & LL_AUX_PTR_AUX_PHY_MASK) << LL_AUX_PTR_AUX_PHY_SHIFT;
1fff75d4:	33e0      	movi      	r3, 224
        pAdvInfo->currentChn = chn_idx;
1fff75d6:	9843      	ld.w      	r2, (r14, 0xc)
        temp |= (aux_phy & LL_AUX_PTR_AUX_PHY_MASK) << LL_AUX_PTR_AUX_PHY_SHIFT;
1fff75d8:	9825      	ld.w      	r1, (r14, 0x14)
1fff75da:	4370      	lsli      	r3, r3, 16
1fff75dc:	47f5      	lsli      	r7, r7, 21
1fff75de:	69cc      	and      	r7, r3
1fff75e0:	6c40      	or      	r1, r0
        pAdvInfo->currentChn = chn_idx;
1fff75e2:	dc440052 	st.b      	r2, (r4, 0x52)
        temp |= (aux_phy & LL_AUX_PTR_AUX_PHY_MASK) << LL_AUX_PTR_AUX_PHY_SHIFT;
1fff75e6:	6c5c      	or      	r1, r7
        temp |= (chn_idx & LL_AUX_PTR_CHN_IDX_MASK) << LL_AUX_PTR_CHN_IDX_SHIFT;
1fff75e8:	e442203f 	andi      	r2, r2, 63
        temp |= (aux_phy & LL_AUX_PTR_AUX_PHY_MASK) << LL_AUX_PTR_AUX_PHY_SHIFT;
1fff75ec:	6c84      	or      	r2, r1
        temp &= 0x00FFFFFF;
1fff75ee:	4248      	lsli      	r2, r2, 8
1fff75f0:	4a48      	lsri      	r2, r2, 8
1fff75f2:	b845      	st.w      	r2, (r14, 0x14)
        osal_memcpy(&g_tx_ext_adv_buf.data[offset], (uint8 *)&temp, 3);
1fff75f4:	3203      	movi      	r2, 3
1fff75f6:	1209      	lrw      	r0, 0x1fff1922	// 1fff7718 <llSetupAuxAdvIndPDU1+0x288>
1fff75f8:	1905      	addi      	r1, r14, 20
1fff75fa:	6014      	addu      	r0, r5
1fff75fc:	e0001aca 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
        offset += 3;
1fff7600:	9864      	ld.w      	r3, (r14, 0x10)
1fff7602:	5bb2      	addi      	r5, r3, 5
    if (extHeaderFlag & LE_EXT_HDR_SYNC_INFO_PRESENT_BITMASK) {
1fff7604:	e4662020 	andi      	r3, r6, 32
1fff7608:	3b40      	cmpnei      	r3, 0
1fff760a:	0c0d      	bf      	0x1fff7624	// 1fff7624 <llSetupAuxAdvIndPDU1+0x194>
        llSetupSyncInfo(pAdvInfo, pPrdAdv);
1fff760c:	9822      	ld.w      	r1, (r14, 0x8)
1fff760e:	6c13      	mov      	r0, r4
1fff7610:	e3fffd7a 	bsr      	0x1fff7104	// 1fff7104 <llSetupSyncInfo>
        osal_memcpy(&g_tx_ext_adv_buf.data[offset], (uint8 *)&syncInfo, 18);
1fff7614:	3212      	movi      	r2, 18
1fff7616:	1224      	lrw      	r1, 0x1fff0fa4	// 1fff7724 <llSetupAuxAdvIndPDU1+0x294>
1fff7618:	1200      	lrw      	r0, 0x1fff1922	// 1fff7718 <llSetupAuxAdvIndPDU1+0x288>
1fff761a:	6014      	addu      	r0, r5
        offset += 18;
1fff761c:	2511      	addi      	r5, 18
        osal_memcpy(&g_tx_ext_adv_buf.data[offset], (uint8 *)&syncInfo, 18);
1fff761e:	e0001ab9 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
        offset += 18;
1fff7622:	7554      	zextb      	r5, r5
    if (extHeaderFlag & LE_EXT_HDR_TX_PWR_PRESENT_BITMASK) {  // Tx power is optional, could we only filled it in AUX_ADV_IND?
1fff7624:	e4c62040 	andi      	r6, r6, 64
1fff7628:	3e40      	cmpnei      	r6, 0
1fff762a:	0c1e      	bf      	0x1fff7666	// 1fff7666 <llSetupAuxAdvIndPDU1+0x1d6>
        radio_pwr = pAdvInfo->tx_power * 10 + g_rfTxPathCompensation;
1fff762c:	d8640050 	ld.b      	r3, (r4, 0x50)
1fff7630:	320a      	movi      	r2, 10
1fff7632:	74ce      	sextb      	r3, r3
1fff7634:	7cc8      	mult      	r3, r2
1fff7636:	115d      	lrw      	r2, 0x1fff0e34	// 1fff7728 <llSetupAuxAdvIndPDU1+0x298>
1fff7638:	8a40      	ld.h      	r2, (r2, 0x0)
1fff763a:	60c8      	addu      	r3, r2
1fff763c:	115c      	lrw      	r2, 0xfffffb0a	// 1fff772c <llSetupAuxAdvIndPDU1+0x29c>
1fff763e:	6c0f      	mov      	r0, r3
1fff7640:	74cf      	sexth      	r3, r3
1fff7642:	648d      	cmplt      	r3, r2
1fff7644:	0c02      	bf      	0x1fff7648	// 1fff7648 <llSetupAuxAdvIndPDU1+0x1b8>
1fff7646:	6c0b      	mov      	r0, r2
        g_tx_ext_adv_buf.data[offset] = (uint8)(radio_pwr / 10);
1fff7648:	74c3      	sexth      	r3, r0
1fff764a:	98c0      	ld.w      	r6, (r14, 0x0)
1fff764c:	eb2304f6 	cmplti      	r3, 1271
1fff7650:	6194      	addu      	r6, r5
1fff7652:	0803      	bt      	0x1fff7658	// 1fff7658 <llSetupAuxAdvIndPDU1+0x1c8>
1fff7654:	ea0004f6 	movi      	r0, 1270
1fff7658:	7403      	sexth      	r0, r0
1fff765a:	310a      	movi      	r1, 10
        offset += 1;
1fff765c:	2500      	addi      	r5, 1
        g_tx_ext_adv_buf.data[offset] = (uint8)(radio_pwr / 10);
1fff765e:	e0001bb3 	bsr      	0x1fffadc4	// 1fffadc4 <check_before_startup+0x6ec>
        offset += 1;
1fff7662:	7554      	zextb      	r5, r5
        g_tx_ext_adv_buf.data[offset] = (uint8)(radio_pwr / 10);
1fff7664:	a606      	st.b      	r0, (r6, 0x6)
    if (pAdvInfo->isPeriodic == FALSE) {
1fff7666:	d8640041 	ld.b      	r3, (r4, 0x41)
1fff766a:	3b40      	cmpnei      	r3, 0
1fff766c:	0810      	bt      	0x1fff768c	// 1fff768c <llSetupAuxAdvIndPDU1+0x1fc>
        osal_memcpy(&g_tx_ext_adv_buf.data[offset], (uint8 *)&pAdvInfo->data.advertisingData[pAdvInfo->currentAdvOffset], advDataLen);
1fff766e:	9841      	ld.w      	r2, (r14, 0x4)
1fff7670:	d864102a 	ld.h      	r3, (r4, 0x54)
1fff7674:	942b      	ld.w      	r1, (r4, 0x2c)
1fff7676:	1109      	lrw      	r0, 0x1fff1922	// 1fff7718 <llSetupAuxAdvIndPDU1+0x288>
1fff7678:	604c      	addu      	r1, r3
1fff767a:	6014      	addu      	r0, r5
1fff767c:	e0001a8a 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
        pAdvInfo->currentAdvOffset += advDataLen;
1fff7680:	d864102a 	ld.h      	r3, (r4, 0x54)
1fff7684:	9841      	ld.w      	r2, (r14, 0x4)
1fff7686:	608c      	addu      	r2, r3
1fff7688:	dc44102a 	st.h      	r2, (r4, 0x54)
}
1fff768c:	1406      	addi      	r14, r14, 24
1fff768e:	1494      	pop      	r4-r7, r15
        advMode = LL_EXT_ADV_MODE_CONN;
1fff7690:	3201      	movi      	r2, 1
1fff7692:	070e      	br      	0x1fff74ae	// 1fff74ae <llSetupAuxAdvIndPDU1+0x1e>
        extHeaderFlag |= LE_EXT_HDR_TX_PWR_PRESENT_BITMASK;
1fff7694:	ecc60041 	ori      	r6, r6, 65
        extHdrLength ++;
1fff7698:	2306      	addi      	r3, 7
1fff769a:	072e      	br      	0x1fff74f6	// 1fff74f6 <llSetupAuxAdvIndPDU1+0x66>
        } else if (pAdvInfo->data.advertisingDataLength <= 255 - 1 - extHdrLength) {
1fff769c:	7445      	zexth      	r1, r1
            advDataLen = pAdvInfo->data.advertisingDataLength;    // put all adv data in field "Adv Data"
1fff769e:	75c4      	zextb      	r7, r1
        } else if (pAdvInfo->data.advertisingDataLength <= 255 - 1 - extHdrLength) {
1fff76a0:	35fe      	movi      	r5, 254
1fff76a2:	614e      	subu      	r5, r3
            advDataLen = pAdvInfo->data.advertisingDataLength;    // put all adv data in field "Adv Data"
1fff76a4:	6455      	cmplt      	r5, r1
1fff76a6:	3100      	movi      	r1, 0
1fff76a8:	c4270c20 	incf      	r1, r7, 0
1fff76ac:	0743      	br      	0x1fff7532	// 1fff7532 <llSetupAuxAdvIndPDU1+0xa2>
        advDataLen = 0;
1fff76ae:	3100      	movi      	r1, 0
1fff76b0:	0741      	br      	0x1fff7532	// 1fff7532 <llSetupAuxAdvIndPDU1+0xa2>
                   ||  pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RPA_RANDOM) {
1fff76b2:	2801      	subi      	r0, 2
        } else if (pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC
1fff76b4:	7400      	zextb      	r0, r0
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], adv_param.ownAddr, LL_DEVICE_ADDR_LEN);
1fff76b6:	3206      	movi      	r2, 6
        } else if (pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC
1fff76b8:	3801      	cmphsi      	r0, 2
1fff76ba:	0803      	bt      	0x1fff76c0	// 1fff76c0 <llSetupAuxAdvIndPDU1+0x230>
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], adv_param.ownAddr, LL_DEVICE_ADDR_LEN);
1fff76bc:	103d      	lrw      	r1, 0x1fff152f	// 1fff7730 <llSetupAuxAdvIndPDU1+0x2a0>
1fff76be:	0752      	br      	0x1fff7562	// 1fff7562 <llSetupAuxAdvIndPDU1+0xd2>
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], ownPublicAddr, LL_DEVICE_ADDR_LEN);
1fff76c0:	103d      	lrw      	r1, 0x1fff1185	// 1fff7734 <llSetupAuxAdvIndPDU1+0x2a4>
1fff76c2:	0750      	br      	0x1fff7562	// 1fff7562 <llSetupAuxAdvIndPDU1+0xd2>
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], pAdvInfo->parameter.peerAddress, LL_DEVICE_ADDR_LEN);
1fff76c4:	e4240019 	addi      	r1, r4, 26
1fff76c8:	0758      	br      	0x1fff7578	// 1fff7578 <llSetupAuxAdvIndPDU1+0xe8>
1fff76ca:	3308      	movi      	r3, 8
1fff76cc:	075b      	br      	0x1fff7582	// 1fff7582 <llSetupAuxAdvIndPDU1+0xf2>
    } else if (pAdvInfo->isPeriodic == FALSE) { // only applicable to extended adv case
1fff76ce:	d8640041 	ld.b      	r3, (r4, 0x41)
1fff76d2:	3b40      	cmpnei      	r3, 0
1fff76d4:	080f      	bt      	0x1fff76f2	// 1fff76f2 <llSetupAuxAdvIndPDU1+0x262>
        while ((i < 3) && !(pAdvInfo->parameter.priAdvChnMap & (1 << i))) {
1fff76d6:	8410      	ld.b      	r0, (r4, 0x10)
1fff76d8:	3101      	movi      	r1, 1
1fff76da:	c4604082 	asr      	r2, r0, r3
1fff76de:	6884      	and      	r2, r1
1fff76e0:	3a40      	cmpnei      	r2, 0
1fff76e2:	0804      	bt      	0x1fff76ea	// 1fff76ea <llSetupAuxAdvIndPDU1+0x25a>
            i ++;
1fff76e4:	2300      	addi      	r3, 1
        while ((i < 3) && !(pAdvInfo->parameter.priAdvChnMap & (1 << i))) {
1fff76e6:	3b43      	cmpnei      	r3, 3
1fff76e8:	0bf9      	bt      	0x1fff76da	// 1fff76da <llSetupAuxAdvIndPDU1+0x24a>
        pAdvInfo->currentChn = LL_ADV_CHAN_FIRST + i;
1fff76ea:	2324      	addi      	r3, 37
1fff76ec:	dc640052 	st.b      	r3, (r4, 0x52)
1fff76f0:	078a      	br      	0x1fff7604	// 1fff7604 <llSetupAuxAdvIndPDU1+0x174>
        llPrdAdvDecideNextChn(pAdvInfo, pPrdAdv);
1fff76f2:	9822      	ld.w      	r1, (r14, 0x8)
1fff76f4:	6c13      	mov      	r0, r4
1fff76f6:	e0001915 	bsr      	0x1fffa920	// 1fffa920 <check_before_startup+0x248>
1fff76fa:	0785      	br      	0x1fff7604	// 1fff7604 <llSetupAuxAdvIndPDU1+0x174>
1fff76fc:	1fffa670 	.long	0x1fffa670
1fff7700:	1fff191c 	.long	0x1fff191c
1fff7704:	00ffff00 	.long	0x00ffff00
1fff7708:	00010100 	.long	0x00010100
1fff770c:	1fff1924 	.long	0x1fff1924
1fff7710:	1fff15d7 	.long	0x1fff15d7
1fff7714:	1fff192a 	.long	0x1fff192a
1fff7718:	1fff1922 	.long	0x1fff1922
1fff771c:	1fff0894 	.long	0x1fff0894
1fff7720:	001fff00 	.long	0x001fff00
1fff7724:	1fff0fa4 	.long	0x1fff0fa4
1fff7728:	1fff0e34 	.long	0x1fff0e34
1fff772c:	fffffb0a 	.long	0xfffffb0a
1fff7730:	1fff152f 	.long	0x1fff152f
1fff7734:	1fff1185 	.long	0x1fff1185

1fff7738 <llSetupAuxChainIndPDU1>:
{
1fff7738:	14d4      	push      	r4-r7, r15
1fff773a:	1424      	subi      	r14, r14, 16
1fff773c:	6d43      	mov      	r5, r0
    SET_BITS(g_tx_ext_adv_buf.txheader, pAdvInfo->parameter.ownAddrType, TX_ADD_SHIFT, TX_ADD_MASK);
1fff773e:	8071      	ld.b      	r3, (r0, 0x11)
{
1fff7740:	6d87      	mov      	r6, r1
    SET_BITS(g_tx_ext_adv_buf.txheader, pAdvInfo->parameter.ownAddrType, TX_ADD_SHIFT, TX_ADD_MASK);
1fff7742:	b861      	st.w      	r3, (r14, 0x4)
1fff7744:	4366      	lsli      	r3, r3, 6
1fff7746:	b862      	st.w      	r3, (r14, 0x8)
1fff7748:	0371      	lrw      	r3, 0x1fff191c	// 1fff7980 <llSetupAuxChainIndPDU1+0x248>
1fff774a:	9842      	ld.w      	r2, (r14, 0x8)
1fff774c:	ec420007 	ori      	r2, r2, 7
1fff7750:	ab42      	st.h      	r2, (r3, 0x4)
    if (pPrdAdv->PrdCTEInfo.enable == LL_CTE_ENABLE) {
1fff7752:	d8410058 	ld.b      	r2, (r1, 0x58)
1fff7756:	b860      	st.w      	r3, (r14, 0x0)
1fff7758:	3a41      	cmpnei      	r2, 1
1fff775a:	08b0      	bt      	0x1fff78ba	// 1fff78ba <llSetupAuxChainIndPDU1+0x182>
        if (pPrdAdv->PrdCTEInfo.CTE_Count > pPrdAdv->PrdCTEInfo.CTE_Count_Idx) {
1fff775c:	d861005c 	ld.b      	r3, (r1, 0x5c)
1fff7760:	d801005b 	ld.b      	r0, (r1, 0x5b)
            extHdrLength ++;
1fff7764:	3407      	movi      	r4, 7
1fff7766:	640c      	cmphs      	r3, r0
1fff7768:	3108      	movi      	r1, 8
1fff776a:	c4240c40 	inct      	r1, r4, 0
1fff776e:	640c      	cmphs      	r3, r0
1fff7770:	3305      	movi      	r3, 5
1fff7772:	c4430c20 	incf      	r2, r3, 0
    if (pAdvInfo->isPeriodic == FALSE) {
1fff7776:	d8650041 	ld.b      	r3, (r5, 0x41)
1fff777a:	3b40      	cmpnei      	r3, 0
1fff777c:	08fa      	bt      	0x1fff7970	// 1fff7970 <llSetupAuxChainIndPDU1+0x238>
        if ((extscanrsp_offset != 0) && (extscanrsp_offset < pAdvInfo->scanRspMaxLength)) {
1fff777e:	031d      	lrw      	r0, 0x1fffb8bc	// 1fff7984 <llSetupAuxChainIndPDU1+0x24c>
        extHeaderFlag |= LE_EXT_HDR_ADI_PRESENT_BITMASK;
1fff7780:	ece20008 	ori      	r7, r2, 8
        if ((extscanrsp_offset != 0) && (extscanrsp_offset < pAdvInfo->scanRspMaxLength)) {
1fff7784:	8800      	ld.h      	r0, (r0, 0x0)
        extHdrLength += 2;
1fff7786:	5966      	addi      	r3, r1, 2
        if ((extscanrsp_offset != 0) && (extscanrsp_offset < pAdvInfo->scanRspMaxLength)) {
1fff7788:	3840      	cmpnei      	r0, 0
1fff778a:	0c9b      	bf      	0x1fff78c0	// 1fff78c0 <llSetupAuxChainIndPDU1+0x188>
1fff778c:	8d9a      	ld.h      	r4, (r5, 0x34)
1fff778e:	6500      	cmphs      	r0, r4
1fff7790:	0898      	bt      	0x1fff78c0	// 1fff78c0 <llSetupAuxChainIndPDU1+0x188>
            if (pAdvInfo->scanRspMaxLength - extscanrsp_offset < 255 - 1 - extHdrLength) {
1fff7792:	6102      	subu      	r4, r0
1fff7794:	30fe      	movi      	r0, 254
1fff7796:	600e      	subu      	r0, r3
1fff7798:	6411      	cmplt      	r4, r0
1fff779a:	0c9f      	bf      	0x1fff78d8	// 1fff78d8 <llSetupAuxChainIndPDU1+0x1a0>
                advDataLen = 255 - 1 - extHdrLength;;
1fff779c:	7510      	zextb      	r4, r4
    SET_BITS(g_tx_ext_adv_buf.txheader, length, LENGTH_SHIFT, LENGTH_MASK);
1fff779e:	9822      	ld.w      	r1, (r14, 0x8)
    length = 1 + extHdrLength + advDataLen;   // 1: extended header len(6bits) + advMode(2bit)
1fff77a0:	5b50      	addu      	r2, r3, r4
    SET_BITS(g_tx_ext_adv_buf.txheader, length, LENGTH_SHIFT, LENGTH_MASK);
1fff77a2:	e42120c0 	andi      	r1, r1, 192
    length = 1 + extHdrLength + advDataLen;   // 1: extended header len(6bits) + advMode(2bit)
1fff77a6:	2200      	addi      	r2, 1
    SET_BITS(g_tx_ext_adv_buf.txheader, length, LENGTH_SHIFT, LENGTH_MASK);
1fff77a8:	7488      	zextb      	r2, r2
1fff77aa:	ec210007 	ori      	r1, r1, 7
1fff77ae:	4248      	lsli      	r2, r2, 8
1fff77b0:	6c84      	or      	r2, r1
1fff77b2:	9820      	ld.w      	r1, (r14, 0x0)
    g_tx_ext_adv_buf.data[offset] = ((advMode & 0x3) << 6) | (extHdrLength & 0x3F);
1fff77b4:	a166      	st.b      	r3, (r1, 0x6)
    g_tx_ext_adv_buf.data[offset] = extHeaderFlag;
1fff77b6:	a1e7      	st.b      	r7, (r1, 0x7)
    SET_BITS(g_tx_ext_adv_buf.txheader, length, LENGTH_SHIFT, LENGTH_MASK);
1fff77b8:	a942      	st.h      	r2, (r1, 0x4)
        if (pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RANDOM && pAdvInfo->parameter.isOwnRandomAddressSet == TRUE) {
1fff77ba:	9564      	ld.w      	r3, (r5, 0x10)
1fff77bc:	1353      	lrw      	r2, 0xffff00	// 1fff7988 <llSetupAuxChainIndPDU1+0x250>
1fff77be:	68c8      	and      	r3, r2
1fff77c0:	1353      	lrw      	r2, 0x10100	// 1fff798c <llSetupAuxChainIndPDU1+0x254>
1fff77c2:	648e      	cmpne      	r3, r2
1fff77c4:	08a1      	bt      	0x1fff7906	// 1fff7906 <llSetupAuxChainIndPDU1+0x1ce>
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], pAdvInfo->parameter.ownRandomAddress, LL_DEVICE_ADDR_LEN);
1fff77c6:	3206      	movi      	r2, 6
1fff77c8:	e4250012 	addi      	r1, r5, 19
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], ownPublicAddr, LL_DEVICE_ADDR_LEN);
1fff77cc:	1311      	lrw      	r0, 0x1fff1924	// 1fff7990 <llSetupAuxChainIndPDU1+0x258>
1fff77ce:	e00019e1 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
    if (extHeaderFlag & LE_EXT_HDR_CTE_INFO_PRESENT_BITMASK) {
1fff77d2:	e4672004 	andi      	r3, r7, 4
1fff77d6:	3b40      	cmpnei      	r3, 0
1fff77d8:	0ca1      	bf      	0x1fff791a	// 1fff791a <llSetupAuxChainIndPDU1+0x1e2>
        g_tx_ext_adv_buf.data[offset] = ((pPrdAdv->PrdCTEInfo.CTE_Type << 6) | \
1fff77da:	d866005a 	ld.b      	r3, (r6, 0x5a)
1fff77de:	d8460059 	ld.b      	r2, (r6, 0x59)
1fff77e2:	4366      	lsli      	r3, r3, 6
1fff77e4:	6cc8      	or      	r3, r2
1fff77e6:	9840      	ld.w      	r2, (r14, 0x0)
1fff77e8:	a26e      	st.b      	r3, (r2, 0xe)
        pPrdAdv->PrdCTEInfo.CTE_Count_Idx ++;
1fff77ea:	d866005c 	ld.b      	r3, (r6, 0x5c)
1fff77ee:	2300      	addi      	r3, 1
1fff77f0:	dc66005c 	st.b      	r3, (r6, 0x5c)
        offset += 1;
1fff77f4:	3309      	movi      	r3, 9
    if (extHeaderFlag & LE_EXT_HDR_ADI_PRESENT_BITMASK) {
1fff77f6:	e4472008 	andi      	r2, r7, 8
1fff77fa:	3a40      	cmpnei      	r2, 0
1fff77fc:	0c13      	bf      	0x1fff7822	// 1fff7822 <llSetupAuxChainIndPDU1+0xea>
        adi = ((pAdvInfo->parameter.advertisingSID & 0x0F) << 12) | (pAdvInfo->data.DIDInfo & 0x0FFF);
1fff77fe:	8544      	ld.b      	r2, (r5, 0x4)
1fff7800:	8d38      	ld.h      	r1, (r5, 0x30)
1fff7802:	e4212fff 	andi      	r1, r1, 4095
1fff7806:	424c      	lsli      	r2, r2, 12
1fff7808:	6c84      	or      	r2, r1
1fff780a:	dc4e1006 	st.h      	r2, (r14, 0xc)
        osal_memcpy(&g_tx_ext_adv_buf.data[offset], (uint8 *)&adi, 2);
1fff780e:	3202      	movi      	r2, 2
1fff7810:	b860      	st.w      	r3, (r14, 0x0)
1fff7812:	1301      	lrw      	r0, 0x1fff1922	// 1fff7994 <llSetupAuxChainIndPDU1+0x25c>
1fff7814:	1903      	addi      	r1, r14, 12
1fff7816:	600c      	addu      	r0, r3
1fff7818:	e00019bc 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
        offset += 2;
1fff781c:	9860      	ld.w      	r3, (r14, 0x0)
1fff781e:	2301      	addi      	r3, 2
1fff7820:	74cc      	zextb      	r3, r3
    if (extHeaderFlag & LE_EXT_HDR_AUX_PTR_PRESENT_BITMASK) {
1fff7822:	e4e72010 	andi      	r7, r7, 16
1fff7826:	3f40      	cmpnei      	r7, 0
1fff7828:	0c7b      	bf      	0x1fff791e	// 1fff791e <llSetupAuxChainIndPDU1+0x1e6>
1fff782a:	b860      	st.w      	r3, (r14, 0x0)
        chn_idx = llGetNextAuxAdvChn(pAdvInfo->currentChn);
1fff782c:	d8050052 	ld.b      	r0, (r5, 0x52)
        uint32  temp = 0;
1fff7830:	3300      	movi      	r3, 0
1fff7832:	b863      	st.w      	r3, (r14, 0xc)
        chn_idx = llGetNextAuxAdvChn(pAdvInfo->currentChn);
1fff7834:	e000191e 	bsr      	0x1fffaa70	// 1fffaa70 <check_before_startup+0x398>
        aux_offset = g_interAuxPduDuration / 30;
1fff7838:	1258      	lrw      	r2, 0x1fff0894	// 1fff7998 <llSetupAuxChainIndPDU1+0x260>
        chn_idx = llGetNextAuxAdvChn(pAdvInfo->currentChn);
1fff783a:	6dc3      	mov      	r7, r0
        aux_offset = g_interAuxPduDuration / 30;
1fff783c:	311e      	movi      	r1, 30
1fff783e:	9200      	ld.w      	r0, (r2, 0x0)
1fff7840:	e0001924 	bsr      	0x1fffaa88	// 1fffaa88 <check_before_startup+0x3b0>
        temp |= (aux_offset & LL_AUX_PTR_AUX_OFFSET_MASK) << LL_AUX_PTR_AUX_OFFSET_SHIFT;
1fff7844:	4048      	lsli      	r2, r0, 8
1fff7846:	1276      	lrw      	r3, 0x1fff00	// 1fff799c <llSetupAuxChainIndPDU1+0x264>
1fff7848:	688c      	and      	r2, r3
        temp |= (aux_phy & LL_AUX_PTR_AUX_PHY_MASK) << LL_AUX_PTR_AUX_PHY_SHIFT;
1fff784a:	33e0      	movi      	r3, 224
1fff784c:	9803      	ld.w      	r0, (r14, 0xc)
        aux_phy = pAdvInfo->parameter.secondaryAdvPHY - 1;     // HCI & LL using different enum
1fff784e:	d8250023 	ld.b      	r1, (r5, 0x23)
        temp |= (aux_phy & LL_AUX_PTR_AUX_PHY_MASK) << LL_AUX_PTR_AUX_PHY_SHIFT;
1fff7852:	4370      	lsli      	r3, r3, 16
        aux_phy = pAdvInfo->parameter.secondaryAdvPHY - 1;     // HCI & LL using different enum
1fff7854:	2900      	subi      	r1, 1
        temp |= (aux_phy & LL_AUX_PTR_AUX_PHY_MASK) << LL_AUX_PTR_AUX_PHY_SHIFT;
1fff7856:	4135      	lsli      	r1, r1, 21
1fff7858:	684c      	and      	r1, r3
1fff785a:	6c80      	or      	r2, r0
1fff785c:	6c84      	or      	r2, r1
        temp |= (chn_idx & LL_AUX_PTR_CHN_IDX_MASK) << LL_AUX_PTR_CHN_IDX_SHIFT;
1fff785e:	e427203f 	andi      	r1, r7, 63
        temp |= (aux_phy & LL_AUX_PTR_AUX_PHY_MASK) << LL_AUX_PTR_AUX_PHY_SHIFT;
1fff7862:	6c84      	or      	r2, r1
        temp &= 0x00FFFFFF;
1fff7864:	4248      	lsli      	r2, r2, 8
1fff7866:	4a48      	lsri      	r2, r2, 8
1fff7868:	b843      	st.w      	r2, (r14, 0xc)
        osal_memcpy(&g_tx_ext_adv_buf.data[offset], (uint8 *)&temp, 3);
1fff786a:	3203      	movi      	r2, 3
1fff786c:	9860      	ld.w      	r3, (r14, 0x0)
1fff786e:	120a      	lrw      	r0, 0x1fff1922	// 1fff7994 <llSetupAuxChainIndPDU1+0x25c>
1fff7870:	1903      	addi      	r1, r14, 12
1fff7872:	600c      	addu      	r0, r3
1fff7874:	e000198e 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
        pAdvInfo->currentChn = chn_idx;        // save secondary channel index
1fff7878:	dce50052 	st.b      	r7, (r5, 0x52)
        offset += 3;
1fff787c:	9860      	ld.w      	r3, (r14, 0x0)
        pPrdAdv->currentChn = chn_idx;
1fff787e:	dce60055 	st.b      	r7, (r6, 0x55)
        offset += 3;
1fff7882:	2302      	addi      	r3, 3
1fff7884:	74cc      	zextb      	r3, r3
        if ((extscanrsp_offset != 0) && (extscanrsp_offset < pAdvInfo->scanRspMaxLength)) {
1fff7886:	12c0      	lrw      	r6, 0x1fffb8bc	// 1fff7984 <llSetupAuxChainIndPDU1+0x24c>
1fff7888:	5b16      	addi      	r0, r3, 6
1fff788a:	8e40      	ld.h      	r2, (r6, 0x0)
1fff788c:	3a40      	cmpnei      	r2, 0
1fff788e:	0c62      	bf      	0x1fff7952	// 1fff7952 <llSetupAuxChainIndPDU1+0x21a>
1fff7890:	8d7a      	ld.h      	r3, (r5, 0x34)
1fff7892:	64c8      	cmphs      	r2, r3
1fff7894:	085f      	bt      	0x1fff7952	// 1fff7952 <llSetupAuxChainIndPDU1+0x21a>
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], (uint8 *)&pAdvInfo->scanRspData[extscanrsp_offset], advDataLen);
1fff7896:	952e      	ld.w      	r1, (r5, 0x38)
1fff7898:	6048      	addu      	r1, r2
1fff789a:	6c93      	mov      	r2, r4
1fff789c:	1179      	lrw      	r3, 0x1fff191c	// 1fff7980 <llSetupAuxChainIndPDU1+0x248>
1fff789e:	600c      	addu      	r0, r3
1fff78a0:	e0001978 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
            extscanrsp_offset += advDataLen;
1fff78a4:	8e60      	ld.h      	r3, (r6, 0x0)
1fff78a6:	610c      	addu      	r4, r3
            if (extscanrsp_offset == pAdvInfo->scanRspMaxLength) {
1fff78a8:	8d7a      	ld.h      	r3, (r5, 0x34)
            extscanrsp_offset += advDataLen;
1fff78aa:	7511      	zexth      	r4, r4
1fff78ac:	ae80      	st.h      	r4, (r6, 0x0)
            if (extscanrsp_offset == pAdvInfo->scanRspMaxLength) {
1fff78ae:	650e      	cmpne      	r3, r4
1fff78b0:	0803      	bt      	0x1fff78b6	// 1fff78b6 <llSetupAuxChainIndPDU1+0x17e>
                extscanrsp_offset = 0;
1fff78b2:	3300      	movi      	r3, 0
1fff78b4:	ae60      	st.h      	r3, (r6, 0x0)
}
1fff78b6:	1404      	addi      	r14, r14, 16
1fff78b8:	1494      	pop      	r4-r7, r15
    extHdrLength += 6;
1fff78ba:	3107      	movi      	r1, 7
    extHeaderFlag |= LE_EXT_HDR_ADVA_PRESENT_BITMASK;
1fff78bc:	3201      	movi      	r2, 1
1fff78be:	075c      	br      	0x1fff7776	// 1fff7776 <llSetupAuxChainIndPDU1+0x3e>
        } else if (pAdvInfo->data.dataComplete == TRUE) {
1fff78c0:	d8050028 	ld.b      	r0, (r5, 0x28)
1fff78c4:	3841      	cmpnei      	r0, 1
1fff78c6:	085a      	bt      	0x1fff797a	// 1fff797a <llSetupAuxChainIndPDU1+0x242>
            if (pAdvInfo->data.advertisingDataLength - pAdvInfo->currentAdvOffset > 255 - 1 - extHdrLength) {
1fff78c8:	d805102a 	ld.h      	r0, (r5, 0x54)
1fff78cc:	8d95      	ld.h      	r4, (r5, 0x2a)
1fff78ce:	6102      	subu      	r4, r0
1fff78d0:	30fe      	movi      	r0, 254
1fff78d2:	600e      	subu      	r0, r3
1fff78d4:	6501      	cmplt      	r0, r4
1fff78d6:	0f63      	bf      	0x1fff779c	// 1fff779c <llSetupAuxChainIndPDU1+0x64>
                extHeaderFlag |= LE_EXT_HDR_AUX_PTR_PRESENT_BITMASK;
1fff78d8:	ece20018 	ori      	r7, r2, 24
                extHdrLength += 3;
1fff78dc:	5972      	addi      	r3, r1, 5
                advDataLen = 255 - 1 - extHdrLength;;
1fff78de:	3400      	movi      	r4, 0
1fff78e0:	2c01      	subi      	r4, 2
1fff78e2:	610e      	subu      	r4, r3
1fff78e4:	075c      	br      	0x1fff779c	// 1fff779c <llSetupAuxChainIndPDU1+0x64>
            if (pPrdAdv->data.advertisingDataLength - pPrdAdv->currentAdvOffset > 255 - 1 - extHdrLength) {
1fff78e6:	d866102b 	ld.h      	r3, (r6, 0x56)
1fff78ea:	8e83      	ld.h      	r4, (r6, 0x6)
1fff78ec:	610e      	subu      	r4, r3
1fff78ee:	33fe      	movi      	r3, 254
1fff78f0:	60c6      	subu      	r3, r1
1fff78f2:	650d      	cmplt      	r3, r4
1fff78f4:	0c05      	bf      	0x1fff78fe	// 1fff78fe <llSetupAuxChainIndPDU1+0x1c6>
                extHeaderFlag |= LE_EXT_HDR_AUX_PTR_PRESENT_BITMASK;
1fff78f6:	ece20010 	ori      	r7, r2, 16
                extHdrLength += 3;
1fff78fa:	596a      	addi      	r3, r1, 3
1fff78fc:	07f1      	br      	0x1fff78de	// 1fff78de <llSetupAuxChainIndPDU1+0x1a6>
                advDataLen = pPrdAdv->data.advertisingDataLength - pPrdAdv->currentAdvOffset;    // put all remain adv data in field "Adv Data"
1fff78fe:	7510      	zextb      	r4, r4
1fff7900:	6cc7      	mov      	r3, r1
1fff7902:	6dcb      	mov      	r7, r2
1fff7904:	074d      	br      	0x1fff779e	// 1fff779e <llSetupAuxChainIndPDU1+0x66>
                   ||  pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RPA_RANDOM) {
1fff7906:	9861      	ld.w      	r3, (r14, 0x4)
1fff7908:	2b01      	subi      	r3, 2
        } else if (pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC
1fff790a:	74cc      	zextb      	r3, r3
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], adv_param.ownAddr, LL_DEVICE_ADDR_LEN);
1fff790c:	3206      	movi      	r2, 6
        } else if (pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC
1fff790e:	3b01      	cmphsi      	r3, 2
1fff7910:	0803      	bt      	0x1fff7916	// 1fff7916 <llSetupAuxChainIndPDU1+0x1de>
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], adv_param.ownAddr, LL_DEVICE_ADDR_LEN);
1fff7912:	1124      	lrw      	r1, 0x1fff152f	// 1fff79a0 <llSetupAuxChainIndPDU1+0x268>
1fff7914:	075c      	br      	0x1fff77cc	// 1fff77cc <llSetupAuxChainIndPDU1+0x94>
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], ownPublicAddr, LL_DEVICE_ADDR_LEN);
1fff7916:	1124      	lrw      	r1, 0x1fff1185	// 1fff79a4 <llSetupAuxChainIndPDU1+0x26c>
1fff7918:	075a      	br      	0x1fff77cc	// 1fff77cc <llSetupAuxChainIndPDU1+0x94>
1fff791a:	3308      	movi      	r3, 8
1fff791c:	076d      	br      	0x1fff77f6	// 1fff77f6 <llSetupAuxChainIndPDU1+0xbe>
        if (pAdvInfo->isPeriodic == FALSE) {
1fff791e:	d8450041 	ld.b      	r2, (r5, 0x41)
1fff7922:	3a40      	cmpnei      	r2, 0
1fff7924:	0c08      	bf      	0x1fff7934	// 1fff7934 <llSetupAuxChainIndPDU1+0x1fc>
            llPrdAdvDecideNextChn(pAdvInfo, pPrdAdv);
1fff7926:	6c5b      	mov      	r1, r6
1fff7928:	6c17      	mov      	r0, r5
1fff792a:	6dcf      	mov      	r7, r3
1fff792c:	e00017fa 	bsr      	0x1fffa920	// 1fffa920 <check_before_startup+0x248>
1fff7930:	6cdf      	mov      	r3, r7
1fff7932:	07aa      	br      	0x1fff7886	// 1fff7886 <llSetupAuxChainIndPDU1+0x14e>
            while ((i < 3) && !(pAdvInfo->parameter.priAdvChnMap & (1 << i))) {
1fff7934:	85d0      	ld.b      	r6, (r5, 0x10)
1fff7936:	3200      	movi      	r2, 0
1fff7938:	3001      	movi      	r0, 1
1fff793a:	c4464081 	asr      	r1, r6, r2
1fff793e:	6840      	and      	r1, r0
1fff7940:	3940      	cmpnei      	r1, 0
1fff7942:	0804      	bt      	0x1fff794a	// 1fff794a <llSetupAuxChainIndPDU1+0x212>
                i ++;
1fff7944:	2200      	addi      	r2, 1
            while ((i < 3) && !(pAdvInfo->parameter.priAdvChnMap & (1 << i))) {
1fff7946:	3a43      	cmpnei      	r2, 3
1fff7948:	0bf9      	bt      	0x1fff793a	// 1fff793a <llSetupAuxChainIndPDU1+0x202>
            pAdvInfo->currentChn = LL_ADV_CHAN_FIRST + i;
1fff794a:	2224      	addi      	r2, 37
1fff794c:	dc450052 	st.b      	r2, (r5, 0x52)
1fff7950:	079b      	br      	0x1fff7886	// 1fff7886 <llSetupAuxChainIndPDU1+0x14e>
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], (uint8 *)&pAdvInfo->data.advertisingData[pAdvInfo->currentAdvOffset], advDataLen);
1fff7952:	6c93      	mov      	r2, r4
1fff7954:	d865102a 	ld.h      	r3, (r5, 0x54)
1fff7958:	952b      	ld.w      	r1, (r5, 0x2c)
1fff795a:	604c      	addu      	r1, r3
1fff795c:	1069      	lrw      	r3, 0x1fff191c	// 1fff7980 <llSetupAuxChainIndPDU1+0x248>
1fff795e:	600c      	addu      	r0, r3
1fff7960:	e0001918 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
            pAdvInfo->currentAdvOffset += advDataLen;
1fff7964:	d865102a 	ld.h      	r3, (r5, 0x54)
1fff7968:	610c      	addu      	r4, r3
1fff796a:	dc85102a 	st.h      	r4, (r5, 0x54)
}
1fff796e:	07a4      	br      	0x1fff78b6	// 1fff78b6 <llSetupAuxChainIndPDU1+0x17e>
        if (pPrdAdv->data.dataComplete == TRUE) {
1fff7970:	8664      	ld.b      	r3, (r6, 0x4)
1fff7972:	3b41      	cmpnei      	r3, 1
1fff7974:	0fb9      	bf      	0x1fff78e6	// 1fff78e6 <llSetupAuxChainIndPDU1+0x1ae>
1fff7976:	6cc7      	mov      	r3, r1
1fff7978:	6dcb      	mov      	r7, r2
            advDataLen = 0;
1fff797a:	3400      	movi      	r4, 0
1fff797c:	0711      	br      	0x1fff779e	// 1fff779e <llSetupAuxChainIndPDU1+0x66>
1fff797e:	0000      	bkpt
1fff7980:	1fff191c 	.long	0x1fff191c
1fff7984:	1fffb8bc 	.long	0x1fffb8bc
1fff7988:	00ffff00 	.long	0x00ffff00
1fff798c:	00010100 	.long	0x00010100
1fff7990:	1fff1924 	.long	0x1fff1924
1fff7994:	1fff1922 	.long	0x1fff1922
1fff7998:	1fff0894 	.long	0x1fff0894
1fff799c:	001fff00 	.long	0x001fff00
1fff79a0:	1fff152f 	.long	0x1fff152f
1fff79a4:	1fff1185 	.long	0x1fff1185

1fff79a8 <llSetupAuxConnectRspPDU1>:
{
1fff79a8:	14d1      	push      	r4, r15
    SET_BITS(g_tx_adv_buf.txheader, ADV_AUX_CONN_RSP, PDU_TYPE_SHIFT, PDU_TYPE_MASK);
1fff79aa:	3308      	movi      	r3, 8
1fff79ac:	1180      	lrw      	r4, 0x1fff16ec	// 1fff7a2c <llSetupAuxConnectRspPDU1+0x84>
1fff79ae:	3108      	movi      	r1, 8
1fff79b0:	ac62      	st.h      	r3, (r4, 0x4)
    if (pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC
1fff79b2:	8071      	ld.b      	r3, (r0, 0x11)
        ||  pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RPA_RANDOM) {
1fff79b4:	5b47      	subi      	r2, r3, 2
    if (pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC
1fff79b6:	7488      	zextb      	r2, r2
1fff79b8:	3a01      	cmphsi      	r2, 2
1fff79ba:	0833      	bt      	0x1fff7a20	// 1fff7a20 <llSetupAuxConnectRspPDU1+0x78>
        if ((adv_param.ownAddr[5] & RANDOM_ADDR_HDR) == PRIVATE_RESOLVE_ADDR_HDR) {
1fff79bc:	105d      	lrw      	r2, 0x1fff1528	// 1fff7a30 <llSetupAuxConnectRspPDU1+0x88>
1fff79be:	824c      	ld.b      	r2, (r2, 0xc)
1fff79c0:	e44220c0 	andi      	r2, r2, 192
1fff79c4:	eb420040 	cmpnei      	r2, 64
1fff79c8:	0827      	bt      	0x1fff7a16	// 1fff7a16 <llSetupAuxConnectRspPDU1+0x6e>
            SET_BITS(g_tx_adv_buf.txheader, LL_DEV_ADDR_TYPE_RANDOM, TX_ADD_SHIFT, TX_ADD_MASK);
1fff79ca:	3348      	movi      	r3, 72
        SET_BITS(g_tx_adv_buf.txheader, pAdvInfo->parameter.ownAddrType, TX_ADD_SHIFT, TX_ADD_MASK);
1fff79cc:	ac62      	st.h      	r3, (r4, 0x4)
    SET_BITS(g_tx_adv_buf.txheader, length, LENGTH_SHIFT, LENGTH_MASK);
1fff79ce:	8464      	ld.b      	r3, (r4, 0x4)
1fff79d0:	ec630e00 	ori      	r3, r3, 3584
1fff79d4:	ac62      	st.h      	r3, (r4, 0x4)
    g_tx_adv_buf.data[offset] = ((advMode & 0x3) << 6) | (extHdrLength & 0x3F);
1fff79d6:	330d      	movi      	r3, 13
1fff79d8:	a466      	st.b      	r3, (r4, 0x6)
    g_tx_adv_buf.data[offset] = extHeaderFlag;
1fff79da:	3303      	movi      	r3, 3
1fff79dc:	a467      	st.b      	r3, (r4, 0x7)
    if (g_currentLocalAddrType  == LL_DEV_ADDR_TYPE_RANDOM && pAdvInfo->parameter.isOwnRandomAddressSet == TRUE) { // per adv set random address may be updated after generate adv_param.ownAddr
1fff79de:	1076      	lrw      	r3, 0x1fff1904	// 1fff7a34 <llSetupAuxConnectRspPDU1+0x8c>
1fff79e0:	8360      	ld.b      	r3, (r3, 0x0)
1fff79e2:	3b41      	cmpnei      	r3, 1
1fff79e4:	0820      	bt      	0x1fff7a24	// 1fff7a24 <llSetupAuxConnectRspPDU1+0x7c>
1fff79e6:	8072      	ld.b      	r3, (r0, 0x12)
1fff79e8:	3b41      	cmpnei      	r3, 1
1fff79ea:	081d      	bt      	0x1fff7a24	// 1fff7a24 <llSetupAuxConnectRspPDU1+0x7c>
        osal_memcpy(&g_tx_adv_buf.data[offset], pAdvInfo->parameter.ownRandomAddress, LL_DEVICE_ADDR_LEN);
1fff79ec:	3206      	movi      	r2, 6
1fff79ee:	e4200012 	addi      	r1, r0, 19
        osal_memcpy(&g_tx_adv_buf.data[offset], adv_param.ownAddr, LL_DEVICE_ADDR_LEN);
1fff79f2:	1012      	lrw      	r0, 0x1fff16f4	// 1fff7a38 <llSetupAuxConnectRspPDU1+0x90>
1fff79f4:	e00018ce 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
    osal_memcpy(&g_tx_adv_buf.data[offset], g_rx_adv_buf.data, 6);
1fff79f8:	3206      	movi      	r2, 6
1fff79fa:	1031      	lrw      	r1, 0x1fff17fe	// 1fff7a3c <llSetupAuxConnectRspPDU1+0x94>
1fff79fc:	1011      	lrw      	r0, 0x1fff16fa	// 1fff7a40 <llSetupAuxConnectRspPDU1+0x98>
1fff79fe:	e00018c9 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
    SET_BITS(g_tx_adv_buf.txheader, ((g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT), RX_ADD_SHIFT, RX_ADD_MASK);
1fff7a02:	1071      	lrw      	r3, 0x1fff17f8	// 1fff7a44 <llSetupAuxConnectRspPDU1+0x9c>
1fff7a04:	8c42      	ld.h      	r2, (r4, 0x4)
1fff7a06:	8b62      	ld.h      	r3, (r3, 0x4)
1fff7a08:	4361      	lsli      	r3, r3, 1
1fff7a0a:	3a87      	bclri      	r2, 7
1fff7a0c:	e4632080 	andi      	r3, r3, 128
1fff7a10:	6cc8      	or      	r3, r2
1fff7a12:	ac62      	st.h      	r3, (r4, 0x4)
}
1fff7a14:	1491      	pop      	r4, r15
            SET_BITS(g_tx_adv_buf.txheader, (pAdvInfo->parameter.ownAddrType & 0x01), TX_ADD_SHIFT, TX_ADD_MASK);
1fff7a16:	4366      	lsli      	r3, r3, 6
1fff7a18:	e4632040 	andi      	r3, r3, 64
        SET_BITS(g_tx_adv_buf.txheader, pAdvInfo->parameter.ownAddrType, TX_ADD_SHIFT, TX_ADD_MASK);
1fff7a1c:	6cc4      	or      	r3, r1
1fff7a1e:	07d7      	br      	0x1fff79cc	// 1fff79cc <llSetupAuxConnectRspPDU1+0x24>
1fff7a20:	4366      	lsli      	r3, r3, 6
1fff7a22:	07fd      	br      	0x1fff7a1c	// 1fff7a1c <llSetupAuxConnectRspPDU1+0x74>
        osal_memcpy(&g_tx_adv_buf.data[offset], adv_param.ownAddr, LL_DEVICE_ADDR_LEN);
1fff7a24:	3206      	movi      	r2, 6
1fff7a26:	1029      	lrw      	r1, 0x1fff152f	// 1fff7a48 <llSetupAuxConnectRspPDU1+0xa0>
1fff7a28:	07e5      	br      	0x1fff79f2	// 1fff79f2 <llSetupAuxConnectRspPDU1+0x4a>
1fff7a2a:	0000      	bkpt
1fff7a2c:	1fff16ec 	.long	0x1fff16ec
1fff7a30:	1fff1528 	.long	0x1fff1528
1fff7a34:	1fff1904 	.long	0x1fff1904
1fff7a38:	1fff16f4 	.long	0x1fff16f4
1fff7a3c:	1fff17fe 	.long	0x1fff17fe
1fff7a40:	1fff16fa 	.long	0x1fff16fa
1fff7a44:	1fff17f8 	.long	0x1fff17f8
1fff7a48:	1fff152f 	.long	0x1fff152f

1fff7a4c <llSetupExtAdvLegacyEvent>:
{
1fff7a4c:	14d4      	push      	r4-r7, r15
1fff7a4e:	1421      	subi      	r14, r14, 4
1fff7a50:	6dc3      	mov      	r7, r0
    ch_idx = pAdvInfo->currentChn;
1fff7a52:	d8a00052 	ld.b      	r5, (r0, 0x52)
    if (ch_idx < LL_ADV_CHAN_FIRST || ch_idx > LL_ADV_CHAN_LAST) {
1fff7a56:	e4451024 	subi      	r2, r5, 37
1fff7a5a:	7488      	zextb      	r2, r2
1fff7a5c:	3a02      	cmphsi      	r2, 3
1fff7a5e:	08fa      	bt      	0x1fff7c52	// 1fff7c52 <llSetupExtAdvLegacyEvent+0x206>
    g_tx_ext_adv_buf.txheader = 0;
1fff7a60:	3300      	movi      	r3, 0
1fff7a62:	139e      	lrw      	r4, 0x1fff191c	// 1fff7c58 <llSetupExtAdvLegacyEvent+0x20c>
    if (pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RANDOM && pAdvInfo->parameter.isOwnRandomAddressSet == TRUE) {
1fff7a64:	133e      	lrw      	r1, 0x10100	// 1fff7c5c <llSetupExtAdvLegacyEvent+0x210>
    g_tx_ext_adv_buf.txheader = 0;
1fff7a66:	ac62      	st.h      	r3, (r4, 0x4)
    if (pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RANDOM && pAdvInfo->parameter.isOwnRandomAddressSet == TRUE) {
1fff7a68:	9044      	ld.w      	r2, (r0, 0x10)
1fff7a6a:	137e      	lrw      	r3, 0xffff00	// 1fff7c60 <llSetupExtAdvLegacyEvent+0x214>
1fff7a6c:	688c      	and      	r2, r3
1fff7a6e:	644a      	cmpne      	r2, r1
1fff7a70:	0814      	bt      	0x1fff7a98	// 1fff7a98 <llSetupExtAdvLegacyEvent+0x4c>
        osal_memcpy(&g_tx_ext_adv_buf.data[0], pAdvInfo->parameter.ownRandomAddress, LL_DEVICE_ADDR_LEN);
1fff7a72:	3206      	movi      	r2, 6
1fff7a74:	e4200012 	addi      	r1, r0, 19
        osal_memcpy(&g_tx_ext_adv_buf.data[0], ownPublicAddr, LL_DEVICE_ADDR_LEN);
1fff7a78:	5c16      	addi      	r0, r4, 6
1fff7a7a:	e000188b 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
    switch (pAdvInfo->parameter.advEventProperties) {
1fff7a7e:	8f03      	ld.h      	r0, (r7, 0x6)
1fff7a80:	280f      	subi      	r0, 16
1fff7a82:	380d      	cmphsi      	r0, 14
1fff7a84:	0817      	bt      	0x1fff7ab2	// 1fff7ab2 <llSetupExtAdvLegacyEvent+0x66>
1fff7a86:	e3ffddfb 	bsr      	0x1fff367c	// 1fff367c <___gnu_csky_case_uqi>
1fff7a8a:	1445      	.short	0x1445
1fff7a8c:	51140a16 	.long	0x51140a16
1fff7a90:	14141414 	.long	0x14141414
1fff7a94:	51141414 	.long	0x51141414
        osal_memcpy(&g_tx_ext_adv_buf.data[0], ownPublicAddr, LL_DEVICE_ADDR_LEN);
1fff7a98:	3206      	movi      	r2, 6
1fff7a9a:	1333      	lrw      	r1, 0x1fff1185	// 1fff7c64 <llSetupExtAdvLegacyEvent+0x218>
1fff7a9c:	07ee      	br      	0x1fff7a78	// 1fff7a78 <llSetupExtAdvLegacyEvent+0x2c>
            SET_BITS(g_tx_ext_adv_buf.txheader, (6 + pAdvInfo->data.advertisingDataLength), LENGTH_SHIFT, LENGTH_MASK);
1fff7a9e:	8404      	ld.b      	r0, (r4, 0x4)
1fff7aa0:	8f55      	ld.h      	r2, (r7, 0x2a)
1fff7aa2:	5a36      	addi      	r1, r2, 6
1fff7aa4:	4128      	lsli      	r1, r1, 8
1fff7aa6:	6c40      	or      	r1, r0
1fff7aa8:	ac22      	st.h      	r1, (r4, 0x4)
            osal_memcpy((uint8_t *) & (g_tx_ext_adv_buf.data[6]), &pAdvInfo->data.advertisingData[0], pAdvInfo->data.advertisingDataLength);
1fff7aaa:	1310      	lrw      	r0, 0x1fff1928	// 1fff7c68 <llSetupExtAdvLegacyEvent+0x21c>
1fff7aac:	972b      	ld.w      	r1, (r7, 0x2c)
1fff7aae:	e0001871 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
    uint8 pduType = 0;
1fff7ab2:	3100      	movi      	r1, 0
1fff7ab4:	040c      	br      	0x1fff7acc	// 1fff7acc <llSetupExtAdvLegacyEvent+0x80>
            SET_BITS(g_tx_ext_adv_buf.txheader, (6 + pAdvInfo->data.advertisingDataLength), LENGTH_SHIFT, LENGTH_MASK);
1fff7ab6:	8404      	ld.b      	r0, (r4, 0x4)
1fff7ab8:	8f55      	ld.h      	r2, (r7, 0x2a)
1fff7aba:	5a36      	addi      	r1, r2, 6
1fff7abc:	4128      	lsli      	r1, r1, 8
1fff7abe:	6c40      	or      	r1, r0
1fff7ac0:	ac22      	st.h      	r1, (r4, 0x4)
            osal_memcpy((uint8_t *) & (g_tx_ext_adv_buf.data[6]), pAdvInfo->data.advertisingData, pAdvInfo->data.advertisingDataLength);
1fff7ac2:	130a      	lrw      	r0, 0x1fff1928	// 1fff7c68 <llSetupExtAdvLegacyEvent+0x21c>
1fff7ac4:	972b      	ld.w      	r1, (r7, 0x2c)
1fff7ac6:	e0001865 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
            pduType = ADV_SCAN_IND;
1fff7aca:	3106      	movi      	r1, 6
    SET_BITS(g_tx_ext_adv_buf.txheader, pduType, PDU_TYPE_SHIFT, PDU_TYPE_MASK);
1fff7acc:	8c42      	ld.h      	r2, (r4, 0x4)
1fff7ace:	3300      	movi      	r3, 0
    SET_BITS(g_tx_ext_adv_buf.txheader, pAdvInfo->parameter.ownAddrType, TX_ADD_SHIFT, TX_ADD_MASK);
1fff7ad0:	8711      	ld.b      	r0, (r7, 0x11)
    SET_BITS(g_tx_ext_adv_buf.txheader, pduType, PDU_TYPE_SHIFT, PDU_TYPE_MASK);
1fff7ad2:	2b4f      	subi      	r3, 80
1fff7ad4:	688c      	and      	r2, r3
    SET_BITS(g_tx_ext_adv_buf.txheader, pAdvInfo->parameter.ownAddrType, TX_ADD_SHIFT, TX_ADD_MASK);
1fff7ad6:	6c84      	or      	r2, r1
1fff7ad8:	4006      	lsli      	r0, r0, 6
1fff7ada:	6c80      	or      	r2, r0
    if ((pduType == ADV_IND
1fff7adc:	3901      	cmphsi      	r1, 2
    SET_BITS(g_tx_ext_adv_buf.txheader, pAdvInfo->parameter.ownAddrType, TX_ADD_SHIFT, TX_ADD_MASK);
1fff7ade:	7489      	zexth      	r2, r2
1fff7ae0:	ac42      	st.h      	r2, (r4, 0x4)
    if ((pduType == ADV_IND
1fff7ae2:	080b      	bt      	0x1fff7af8	// 1fff7af8 <llSetupExtAdvLegacyEvent+0xac>
        && pGlobal_config[LL_SWITCH] & CONN_CSA2_ALLOW) {
1fff7ae4:	1322      	lrw      	r1, 0x1fffa670	// 1fff7c6c <llSetupExtAdvLegacyEvent+0x220>
1fff7ae6:	9120      	ld.w      	r1, (r1, 0x0)
1fff7ae8:	912b      	ld.w      	r1, (r1, 0x2c)
1fff7aea:	e4212080 	andi      	r1, r1, 128
1fff7aee:	3940      	cmpnei      	r1, 0
1fff7af0:	0c04      	bf      	0x1fff7af8	// 1fff7af8 <llSetupExtAdvLegacyEvent+0xac>
        SET_BITS(g_tx_ext_adv_buf.txheader, 1, CHSEL_SHIFT, CHSEL_MASK);
1fff7af2:	ec420020 	ori      	r2, r2, 32
1fff7af6:	ac42      	st.h      	r2, (r4, 0x4)
    while ((i < 3) && !(pAdvInfo->parameter.priAdvChnMap & (1 << i))) {
1fff7af8:	3101      	movi      	r1, 1
    i = ch_idx - LL_ADV_CHAN_FIRST + 1;
1fff7afa:	e4451023 	subi      	r2, r5, 36
    while ((i < 3) && !(pAdvInfo->parameter.priAdvChnMap & (1 << i))) {
1fff7afe:	3a43      	cmpnei      	r2, 3
1fff7b00:	8710      	ld.b      	r0, (r7, 0x10)
1fff7b02:	0c98      	bf      	0x1fff7c32	// 1fff7c32 <llSetupExtAdvLegacyEvent+0x1e6>
1fff7b04:	700a      	asr      	r0, r2
1fff7b06:	6804      	and      	r0, r1
1fff7b08:	3840      	cmpnei      	r0, 0
1fff7b0a:	0c22      	bf      	0x1fff7b4e	// 1fff7b4e <llSetupExtAdvLegacyEvent+0x102>
        pAdvInfo->currentChn = LL_ADV_CHAN_FIRST + i;
1fff7b0c:	2224      	addi      	r2, 37
1fff7b0e:	dc470052 	st.b      	r2, (r7, 0x52)
1fff7b12:	0495      	br      	0x1fff7c3c	// 1fff7c3c <llSetupExtAdvLegacyEvent+0x1f0>
            SET_BITS(g_tx_ext_adv_buf.txheader, (6 + pAdvInfo->data.advertisingDataLength), LENGTH_SHIFT, LENGTH_MASK);
1fff7b14:	8404      	ld.b      	r0, (r4, 0x4)
1fff7b16:	8f55      	ld.h      	r2, (r7, 0x2a)
1fff7b18:	5a36      	addi      	r1, r2, 6
1fff7b1a:	4128      	lsli      	r1, r1, 8
1fff7b1c:	6c40      	or      	r1, r0
1fff7b1e:	ac22      	st.h      	r1, (r4, 0x4)
            osal_memcpy((uint8_t *) & (g_tx_ext_adv_buf.data[6]), pAdvInfo->data.advertisingData, pAdvInfo->data.advertisingDataLength);
1fff7b20:	1212      	lrw      	r0, 0x1fff1928	// 1fff7c68 <llSetupExtAdvLegacyEvent+0x21c>
1fff7b22:	972b      	ld.w      	r1, (r7, 0x2c)
1fff7b24:	e0001836 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
            pduType = ADV_NONCONN_IND;
1fff7b28:	3102      	movi      	r1, 2
            break;
1fff7b2a:	07d1      	br      	0x1fff7acc	// 1fff7acc <llSetupExtAdvLegacyEvent+0x80>
            SET_BITS(g_tx_ext_adv_buf.txheader, pAdvInfo->parameter.peerAddrType, RX_ADD_SHIFT, RX_ADD_MASK);
1fff7b2c:	8c42      	ld.h      	r2, (r4, 0x4)
1fff7b2e:	8739      	ld.b      	r1, (r7, 0x19)
1fff7b30:	e442207f 	andi      	r2, r2, 127
1fff7b34:	4127      	lsli      	r1, r1, 7
1fff7b36:	ec420c00 	ori      	r2, r2, 3072
1fff7b3a:	6c84      	or      	r2, r1
1fff7b3c:	ac42      	st.h      	r2, (r4, 0x4)
            osal_memcpy((uint8_t *) & (g_tx_ext_adv_buf.data[6]), &pAdvInfo->parameter.peerAddress[0], 6);
1fff7b3e:	120b      	lrw      	r0, 0x1fff1928	// 1fff7c68 <llSetupExtAdvLegacyEvent+0x21c>
1fff7b40:	3206      	movi      	r2, 6
1fff7b42:	e4270019 	addi      	r1, r7, 26
1fff7b46:	e0001825 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
            pduType = ADV_DIRECT_IND;
1fff7b4a:	3101      	movi      	r1, 1
            break;
1fff7b4c:	07c0      	br      	0x1fff7acc	// 1fff7acc <llSetupExtAdvLegacyEvent+0x80>
        i ++;    // search channel map for next adv channel number
1fff7b4e:	2200      	addi      	r2, 1
1fff7b50:	07d7      	br      	0x1fff7afe	// 1fff7afe <llSetupExtAdvLegacyEvent+0xb2>
    rf_phy_change_cfg0(pktFmt);
1fff7b52:	3001      	movi      	r0, 1
1fff7b54:	e3ffe3c0 	bsr      	0x1fff42d4	// 1fff42d4 <rf_phy_change_cfg0>
    ll_hw_tx2rx_timing_config(pktFmt);
1fff7b58:	3001      	movi      	r0, 1
1fff7b5a:	e000173d 	bsr      	0x1fffa9d4	// 1fffa9d4 <check_before_startup+0x2fc>
    set_crc_seed(ADV_CRC_INIT_VALUE);     // crc seed for adv is same for all channels
1fff7b5e:	1205      	lrw      	r0, 0x555555	// 1fff7c70 <llSetupExtAdvLegacyEvent+0x224>
1fff7b60:	e00016b0 	bsr      	0x1fffa8c0	// 1fffa8c0 <check_before_startup+0x1e8>
    set_access_address(ADV_SYNCH_WORD);   // access address
1fff7b64:	1204      	lrw      	r0, 0x8e89bed6	// 1fff7c74 <llSetupExtAdvLegacyEvent+0x228>
1fff7b66:	e000175b 	bsr      	0x1fffaa1c	// 1fffaa1c <check_before_startup+0x344>
    set_channel(ch_idx);             // channel
1fff7b6a:	6c17      	mov      	r0, r5
1fff7b6c:	e00016fe 	bsr      	0x1fffa968	// 1fffa968 <check_before_startup+0x290>
    set_whiten_seed(ch_idx);         // whiten seed
1fff7b70:	6c17      	mov      	r0, r5
1fff7b72:	e000184b 	bsr      	0x1fffac08	// 1fffac08 <check_before_startup+0x530>
    set_max_length(50);            // rx PDU max length
1fff7b76:	3032      	movi      	r0, 50
1fff7b78:	e00017a0 	bsr      	0x1fffaab8	// 1fffaab8 <check_before_startup+0x3e0>
    ll_hw_rst_rfifo();
1fff7b7c:	e0001756 	bsr      	0x1fffaa28	// 1fffaa28 <check_before_startup+0x350>
    ll_hw_rst_tfifo();
1fff7b80:	e0001892 	bsr      	0x1fffaca4	// 1fffaca4 <check_before_startup+0x5cc>
    if ((pAdvInfo->parameter.advEventProperties & LE_ADV_PROP_CONN_BITMASK) ||
1fff7b84:	8f43      	ld.h      	r2, (r7, 0x6)
1fff7b86:	e4422003 	andi      	r2, r2, 3
1fff7b8a:	3a40      	cmpnei      	r2, 0
1fff7b8c:	0c4c      	bf      	0x1fff7c24	// 1fff7c24 <llSetupExtAdvLegacyEvent+0x1d8>
        ll_hw_set_trx_settle(pGlobal_config[LL_HW_BB_DELAY_ADV],
1fff7b8e:	1158      	lrw      	r2, 0x1fffa670	// 1fff7c6c <llSetupExtAdvLegacyEvent+0x220>
1fff7b90:	9200      	ld.w      	r0, (r2, 0x0)
1fff7b92:	d8400098 	ld.b      	r2, (r0, 0x98)
1fff7b96:	d8200094 	ld.b      	r1, (r0, 0x94)
1fff7b9a:	d8000090 	ld.b      	r0, (r0, 0x90)
1fff7b9e:	e00018d1 	bsr      	0x1fffad40	// 1fffad40 <check_before_startup+0x668>
        ll_hw_set_trx();                      // set LL HW as Tx - Rx mode
1fff7ba2:	e0001665 	bsr      	0x1fffa86c	// 1fffa86c <check_before_startup+0x194>
    ll_hw_ign_rfifo(LL_HW_IGN_EMP | LL_HW_IGN_CRC);
1fff7ba6:	3003      	movi      	r0, 3
1fff7ba8:	e0001836 	bsr      	0x1fffac14	// 1fffac14 <check_before_startup+0x53c>
    ll_hw_write_tfifo((uint8 *) & (g_tx_ext_adv_buf.txheader), ((g_tx_ext_adv_buf.txheader & 0xff00) >> 8) + 2);
1fff7bac:	1113      	lrw      	r0, 0x1fff1920	// 1fff7c78 <llSetupExtAdvLegacyEvent+0x22c>
1fff7bae:	8c22      	ld.h      	r1, (r4, 0x4)
1fff7bb0:	4928      	lsri      	r1, r1, 8
1fff7bb2:	2101      	addi      	r1, 2
1fff7bb4:	e0001596 	bsr      	0x1fffa6e0	// 1fffa6e0 <check_before_startup+0x8>
    ll_hw_go();
1fff7bb8:	e00017ce 	bsr      	0x1fffab54	// 1fffab54 <check_before_startup+0x47c>
    llWaitingIrq = TRUE;
1fff7bbc:	3301      	movi      	r3, 1
    llTaskState = LL_TASK_EXTENDED_ADV;
1fff7bbe:	1150      	lrw      	r2, 0x1fff15d0	// 1fff7c7c <llSetupExtAdvLegacyEvent+0x230>
    llWaitingIrq = TRUE;
1fff7bc0:	b660      	st.w      	r3, (r6, 0x0)
    llTaskState = LL_TASK_EXTENDED_ADV;
1fff7bc2:	a260      	st.b      	r3, (r2, 0x0)
1fff7bc4:	9860      	ld.w      	r3, (r14, 0x0)
1fff7bc6:	c0036420 	mtcr      	r3, cr<0, 0>
        || pAdvInfo->parameter.advEventProperties == LL_EXT_ADV_PROP_ADV_SCAN_IND) {
1fff7bca:	8f43      	ld.h      	r2, (r7, 0x6)
1fff7bcc:	2a11      	subi      	r2, 18
    if (pAdvInfo->parameter.advEventProperties == LL_EXT_ADV_PROP_ADV_IND
1fff7bce:	7489      	zexth      	r2, r2
1fff7bd0:	3a01      	cmphsi      	r2, 2
1fff7bd2:	0827      	bt      	0x1fff7c20	// 1fff7c20 <llSetupExtAdvLegacyEvent+0x1d4>
        SET_BITS(tx_scanRsp_desc.txheader, (g_currentLocalAddrType == 0 ? 0 : 1), TX_ADD_SHIFT, TX_ADD_MASK);
1fff7bd4:	114b      	lrw      	r2, 0x1fff1904	// 1fff7c80 <llSetupExtAdvLegacyEvent+0x234>
        SET_BITS(tx_scanRsp_desc.txheader, ADV_SCAN_RSP, PDU_TYPE_SHIFT, PDU_TYPE_MASK);
1fff7bd6:	118c      	lrw      	r4, 0x1fff15e0	// 1fff7c84 <llSetupExtAdvLegacyEvent+0x238>
        SET_BITS(tx_scanRsp_desc.txheader, (g_currentLocalAddrType == 0 ? 0 : 1), TX_ADD_SHIFT, TX_ADD_MASK);
1fff7bd8:	8200      	ld.b      	r0, (r2, 0x0)
        SET_BITS(tx_scanRsp_desc.txheader, ADV_SCAN_RSP, PDU_TYPE_SHIFT, PDU_TYPE_MASK);
1fff7bda:	d8245002 	ld.hs      	r1, (r4, 0x4)
        SET_BITS(tx_scanRsp_desc.txheader, (g_currentLocalAddrType == 0 ? 0 : 1), TX_ADD_SHIFT, TX_ADD_MASK);
1fff7bde:	3840      	cmpnei      	r0, 0
1fff7be0:	c4000502 	mvc      	r2
1fff7be4:	3300      	movi      	r3, 0
1fff7be6:	2b4f      	subi      	r3, 80
1fff7be8:	684c      	and      	r1, r3
1fff7bea:	4246      	lsli      	r2, r2, 6
1fff7bec:	ec210004 	ori      	r1, r1, 4
        if (g_currentLocalAddrType  == LL_DEV_ADDR_TYPE_RANDOM && pAdvInfo->parameter.isOwnRandomAddressSet == TRUE) { // per adv set random address may be updated after generate adv_param.ownAddr
1fff7bf0:	3841      	cmpnei      	r0, 1
        SET_BITS(tx_scanRsp_desc.txheader, (g_currentLocalAddrType == 0 ? 0 : 1), TX_ADD_SHIFT, TX_ADD_MASK);
1fff7bf2:	6c84      	or      	r2, r1
1fff7bf4:	ac42      	st.h      	r2, (r4, 0x4)
        if (g_currentLocalAddrType  == LL_DEV_ADDR_TYPE_RANDOM && pAdvInfo->parameter.isOwnRandomAddressSet == TRUE) { // per adv set random address may be updated after generate adv_param.ownAddr
1fff7bf6:	081a      	bt      	0x1fff7c2a	// 1fff7c2a <llSetupExtAdvLegacyEvent+0x1de>
1fff7bf8:	8752      	ld.b      	r2, (r7, 0x12)
1fff7bfa:	3a41      	cmpnei      	r2, 1
1fff7bfc:	0817      	bt      	0x1fff7c2a	// 1fff7c2a <llSetupExtAdvLegacyEvent+0x1de>
            osal_memcpy(tx_scanRsp_desc.data, pAdvInfo->parameter.ownRandomAddress, LL_DEVICE_ADDR_LEN);
1fff7bfe:	3206      	movi      	r2, 6
1fff7c00:	e4270012 	addi      	r1, r7, 19
1fff7c04:	5c16      	addi      	r0, r4, 6
            osal_memcpy(tx_scanRsp_desc.data, adv_param.ownAddr, LL_DEVICE_ADDR_LEN);
1fff7c06:	e00017c5 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
        osal_memcpy((uint8_t *) & (tx_scanRsp_desc.data[6]), pAdvInfo->scanRspData, pAdvInfo->scanRspMaxLength);
1fff7c0a:	8f5a      	ld.h      	r2, (r7, 0x34)
1fff7c0c:	972e      	ld.w      	r1, (r7, 0x38)
1fff7c0e:	101f      	lrw      	r0, 0x1fff15ec	// 1fff7c88 <llSetupExtAdvLegacyEvent+0x23c>
1fff7c10:	e00017c0 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
        SET_BITS(tx_scanRsp_desc.txheader, (pAdvInfo->scanRspMaxLength + 6), LENGTH_SHIFT, LENGTH_MASK);
1fff7c14:	8444      	ld.b      	r2, (r4, 0x4)
1fff7c16:	8f7a      	ld.h      	r3, (r7, 0x34)
1fff7c18:	2305      	addi      	r3, 6
1fff7c1a:	4368      	lsli      	r3, r3, 8
1fff7c1c:	6cc8      	or      	r3, r2
1fff7c1e:	ac62      	st.h      	r3, (r4, 0x4)
    return TRUE;
1fff7c20:	3001      	movi      	r0, 1
1fff7c22:	0419      	br      	0x1fff7c54	// 1fff7c54 <llSetupExtAdvLegacyEvent+0x208>
        ll_hw_set_stx();                      // set LL HW as Tx - Rx mode
1fff7c24:	e0001570 	bsr      	0x1fffa704	// 1fffa704 <check_before_startup+0x2c>
1fff7c28:	07bf      	br      	0x1fff7ba6	// 1fff7ba6 <llSetupExtAdvLegacyEvent+0x15a>
            osal_memcpy(tx_scanRsp_desc.data, adv_param.ownAddr, LL_DEVICE_ADDR_LEN);
1fff7c2a:	3206      	movi      	r2, 6
1fff7c2c:	1038      	lrw      	r1, 0x1fff152f	// 1fff7c8c <llSetupExtAdvLegacyEvent+0x240>
1fff7c2e:	1019      	lrw      	r0, 0x1fff15e6	// 1fff7c90 <llSetupExtAdvLegacyEvent+0x244>
1fff7c30:	07eb      	br      	0x1fff7c06	// 1fff7c06 <llSetupExtAdvLegacyEvent+0x1ba>
        pAdvInfo->currentChn = ll_getFirstAdvChn(pAdvInfo->parameter.priAdvChnMap);
1fff7c32:	7400      	zextb      	r0, r0
1fff7c34:	e0001592 	bsr      	0x1fffa758	// 1fffa758 <check_before_startup+0x80>
1fff7c38:	dc070052 	st.b      	r0, (r7, 0x52)
    __ASM volatile("mfcr %0, psr" : "=r"(result));
1fff7c3c:	c0006023 	mfcr      	r3, cr<0, 0>
1fff7c40:	b860      	st.w      	r3, (r14, 0x0)
    __ASM volatile("psrclr ie");
1fff7c42:	c0807020 	psrclr      	ie
    if (llWaitingIrq) {
1fff7c46:	10d4      	lrw      	r6, 0x1fff0df8	// 1fff7c94 <llSetupExtAdvLegacyEvent+0x248>
1fff7c48:	9640      	ld.w      	r2, (r6, 0x0)
1fff7c4a:	3a40      	cmpnei      	r2, 0
1fff7c4c:	0f83      	bf      	0x1fff7b52	// 1fff7b52 <llSetupExtAdvLegacyEvent+0x106>
    __ASM volatile("mtcr %0, psr" : : "r"(psr));
1fff7c4e:	c0036420 	mtcr      	r3, cr<0, 0>
        return FALSE;
1fff7c52:	3000      	movi      	r0, 0
}
1fff7c54:	1401      	addi      	r14, r14, 4
1fff7c56:	1494      	pop      	r4-r7, r15
1fff7c58:	1fff191c 	.long	0x1fff191c
1fff7c5c:	00010100 	.long	0x00010100
1fff7c60:	00ffff00 	.long	0x00ffff00
1fff7c64:	1fff1185 	.long	0x1fff1185
1fff7c68:	1fff1928 	.long	0x1fff1928
1fff7c6c:	1fffa670 	.long	0x1fffa670
1fff7c70:	00555555 	.long	0x00555555
1fff7c74:	8e89bed6 	.long	0x8e89bed6
1fff7c78:	1fff1920 	.long	0x1fff1920
1fff7c7c:	1fff15d0 	.long	0x1fff15d0
1fff7c80:	1fff1904 	.long	0x1fff1904
1fff7c84:	1fff15e0 	.long	0x1fff15e0
1fff7c88:	1fff15ec 	.long	0x1fff15ec
1fff7c8c:	1fff152f 	.long	0x1fff152f
1fff7c90:	1fff15e6 	.long	0x1fff15e6
1fff7c94:	1fff0df8 	.long	0x1fff0df8

1fff7c98 <llSetupExtAdvEvent1>:
{
1fff7c98:	14d4      	push      	r4-r7, r15
1fff7c9a:	1424      	subi      	r14, r14, 16
1fff7c9c:	6dc3      	mov      	r7, r0
    if (pAdvInfo->parameter.advEventProperties & LE_ADV_PROP_LEGACY_BITMASK) {
1fff7c9e:	8843      	ld.h      	r2, (r0, 0x6)
1fff7ca0:	e4422010 	andi      	r2, r2, 16
1fff7ca4:	3a40      	cmpnei      	r2, 0
1fff7ca6:	0c05      	bf      	0x1fff7cb0	// 1fff7cb0 <llSetupExtAdvEvent1+0x18>
        return llSetupExtAdvLegacyEvent(pAdvInfo);
1fff7ca8:	e3fffed2 	bsr      	0x1fff7a4c	// 1fff7a4c <llSetupExtAdvLegacyEvent>
}
1fff7cac:	1404      	addi      	r14, r14, 16
1fff7cae:	1494      	pop      	r4-r7, r15
    ch_idx = pAdvInfo->currentChn;
1fff7cb0:	d8800052 	ld.b      	r4, (r0, 0x52)
    T1 = read_current_fine_time();
1fff7cb4:	e0001732 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
    if (ch_idx >= LL_ADV_CHAN_FIRST && ch_idx <= LL_ADV_CHAN_LAST) {  // advertise at primary channel case
1fff7cb8:	e4441024 	subi      	r2, r4, 37
1fff7cbc:	7488      	zextb      	r2, r2
    T1 = read_current_fine_time();
1fff7cbe:	6d83      	mov      	r6, r0
    if (ch_idx >= LL_ADV_CHAN_FIRST && ch_idx <= LL_ADV_CHAN_LAST) {  // advertise at primary channel case
1fff7cc0:	3a02      	cmphsi      	r2, 3
1fff7cc2:	0830      	bt      	0x1fff7d22	// 1fff7d22 <llSetupExtAdvEvent1+0x8a>
        llSetupAdvExtIndPDU(pAdvInfo, NULL);
1fff7cc4:	6c1f      	mov      	r0, r7
1fff7cc6:	3100      	movi      	r1, 0
1fff7cc8:	e00016bc 	bsr      	0x1fffaa40	// 1fffaa40 <check_before_startup+0x368>
        while ((i < 3) && !(pAdvInfo->parameter.priAdvChnMap & (1 << i))) {
1fff7ccc:	3001      	movi      	r0, 1
        i = ch_idx - LL_ADV_CHAN_FIRST + 1;
1fff7cce:	e4441023 	subi      	r2, r4, 36
        while ((i < 3) && !(pAdvInfo->parameter.priAdvChnMap & (1 << i))) {
1fff7cd2:	3a43      	cmpnei      	r2, 3
1fff7cd4:	0caf      	bf      	0x1fff7e32	// 1fff7e32 <llSetupExtAdvEvent1+0x19a>
1fff7cd6:	8730      	ld.b      	r1, (r7, 0x10)
1fff7cd8:	704a      	asr      	r1, r2
1fff7cda:	6840      	and      	r1, r0
1fff7cdc:	3940      	cmpnei      	r1, 0
1fff7cde:	0c05      	bf      	0x1fff7ce8	// 1fff7ce8 <llSetupExtAdvEvent1+0x50>
            pAdvInfo->currentChn = LL_ADV_CHAN_FIRST + i;
1fff7ce0:	2224      	addi      	r2, 37
1fff7ce2:	dc470052 	st.b      	r2, (r7, 0x52)
1fff7ce6:	040b      	br      	0x1fff7cfc	// 1fff7cfc <llSetupExtAdvEvent1+0x64>
            i ++;    // search channel map for next adv channel number
1fff7ce8:	2200      	addi      	r2, 1
1fff7cea:	07f4      	br      	0x1fff7cd2	// 1fff7cd2 <llSetupExtAdvEvent1+0x3a>
                && g_pAdvSchInfo[g_currentExtAdv].auxPduRemainder > g_pAdvSchInfo[g_currentExtAdv].nextEventRemainder) {
1fff7cec:	9242      	ld.w      	r2, (r2, 0x8)
1fff7cee:	6408      	cmphs      	r2, r0
1fff7cf0:	08ac      	bt      	0x1fff7e48	// 1fff7e48 <llSetupExtAdvEvent1+0x1b0>
                pAdvInfo->currentChn = ll_getFirstAdvChn(pAdvInfo->parameter.priAdvChnMap);
1fff7cf2:	8710      	ld.b      	r0, (r7, 0x10)
1fff7cf4:	e0001532 	bsr      	0x1fffa758	// 1fffa758 <check_before_startup+0x80>
1fff7cf8:	dc070052 	st.b      	r0, (r7, 0x52)
        if (pAdvInfo->parameter.primaryAdvPHY == LL_PHY_CODE) {
1fff7cfc:	d8470022 	ld.b      	r2, (r7, 0x22)
    uint8 ch_idx, pktFmt, auxPduIndFlag = FALSE;
1fff7d00:	3100      	movi      	r1, 0
        if (pAdvInfo->parameter.primaryAdvPHY == LL_PHY_CODE) {
1fff7d02:	3a43      	cmpnei      	r2, 3
1fff7d04:	0c2c      	bf      	0x1fff7d5c	// 1fff7d5c <llSetupExtAdvEvent1+0xc4>
    __ASM volatile("mfcr %0, psr" : "=r"(result));
1fff7d06:	c0006023 	mfcr      	r3, cr<0, 0>
1fff7d0a:	b860      	st.w      	r3, (r14, 0x0)
    __ASM volatile("psrclr ie");
1fff7d0c:	c0807020 	psrclr      	ie
    if (llWaitingIrq) {
1fff7d10:	1211      	lrw      	r0, 0x1fff0df8	// 1fff7e54 <llSetupExtAdvEvent1+0x1bc>
1fff7d12:	b801      	st.w      	r0, (r14, 0x4)
1fff7d14:	90a0      	ld.w      	r5, (r0, 0x0)
1fff7d16:	3d40      	cmpnei      	r5, 0
1fff7d18:	0c24      	bf      	0x1fff7d60	// 1fff7d60 <llSetupExtAdvEvent1+0xc8>
    __ASM volatile("mtcr %0, psr" : : "r"(psr));
1fff7d1a:	c0036420 	mtcr      	r3, cr<0, 0>
        return FALSE;
1fff7d1e:	3000      	movi      	r0, 0
1fff7d20:	07c6      	br      	0x1fff7cac	// 1fff7cac <llSetupExtAdvEvent1+0x14>
        if ((extscanrsp_offset != 0) && (extscanrsp_offset < pAdvInfo->scanRspMaxLength)) {
1fff7d22:	124e      	lrw      	r2, 0x1fffb8bc	// 1fff7e58 <llSetupExtAdvEvent1+0x1c0>
1fff7d24:	8a40      	ld.h      	r2, (r2, 0x0)
1fff7d26:	3a40      	cmpnei      	r2, 0
1fff7d28:	0c10      	bf      	0x1fff7d48	// 1fff7d48 <llSetupExtAdvEvent1+0xb0>
1fff7d2a:	8f3a      	ld.h      	r1, (r7, 0x34)
1fff7d2c:	6448      	cmphs      	r2, r1
1fff7d2e:	080d      	bt      	0x1fff7d48	// 1fff7d48 <llSetupExtAdvEvent1+0xb0>
            llSetupAuxChainIndPDU(pAdvInfo, NULL);
1fff7d30:	3100      	movi      	r1, 0
1fff7d32:	6c1f      	mov      	r0, r7
1fff7d34:	e000175e 	bsr      	0x1fffabf0	// 1fffabf0 <check_before_startup+0x518>
    uint8 ch_idx, pktFmt, auxPduIndFlag = FALSE;
1fff7d38:	3100      	movi      	r1, 0
        if (pAdvInfo->parameter.secondaryAdvPHY == LL_SECOND_ADV_PHY_CODE) {         // coded PHY
1fff7d3a:	d8470023 	ld.b      	r2, (r7, 0x23)
            pktFmt = PKT_FMT_BLR125K;    //
1fff7d3e:	3004      	movi      	r0, 4
1fff7d40:	3a43      	cmpnei      	r2, 3
1fff7d42:	c4400c20 	incf      	r2, r0, 0
1fff7d46:	07e0      	br      	0x1fff7d06	// 1fff7d06 <llSetupExtAdvEvent1+0x6e>
        } else if (pAdvInfo->currentAdvOffset == 0) { // 1st AUX PDU. AUX_ADV_IND should include advData
1fff7d48:	d847102a 	ld.h      	r2, (r7, 0x54)
1fff7d4c:	3a40      	cmpnei      	r2, 0
1fff7d4e:	0bf1      	bt      	0x1fff7d30	// 1fff7d30 <llSetupExtAdvEvent1+0x98>
            llSetupAuxAdvIndPDU(pAdvInfo, NULL);
1fff7d50:	3100      	movi      	r1, 0
1fff7d52:	6c1f      	mov      	r0, r7
1fff7d54:	e0001694 	bsr      	0x1fffaa7c	// 1fffaa7c <check_before_startup+0x3a4>
            auxPduIndFlag = TRUE;
1fff7d58:	3101      	movi      	r1, 1
1fff7d5a:	07f0      	br      	0x1fff7d3a	// 1fff7d3a <llSetupExtAdvEvent1+0xa2>
            pktFmt = PKT_FMT_BLR125K;
1fff7d5c:	3204      	movi      	r2, 4
1fff7d5e:	07d4      	br      	0x1fff7d06	// 1fff7d06 <llSetupExtAdvEvent1+0x6e>
    rf_phy_change_cfg0(pktFmt);
1fff7d60:	6c0b      	mov      	r0, r2
    g_rfPhyPktFmt = pktFmt;
1fff7d62:	11bf      	lrw      	r5, 0x1fff08ae	// 1fff7e5c <llSetupExtAdvEvent1+0x1c4>
1fff7d64:	b823      	st.w      	r1, (r14, 0xc)
1fff7d66:	a540      	st.b      	r2, (r5, 0x0)
    rf_phy_change_cfg0(pktFmt);
1fff7d68:	b842      	st.w      	r2, (r14, 0x8)
1fff7d6a:	e3ffe2b5 	bsr      	0x1fff42d4	// 1fff42d4 <rf_phy_change_cfg0>
    ll_hw_tx2rx_timing_config(pktFmt);
1fff7d6e:	9842      	ld.w      	r2, (r14, 0x8)
1fff7d70:	6c0b      	mov      	r0, r2
1fff7d72:	e0001631 	bsr      	0x1fffa9d4	// 1fffa9d4 <check_before_startup+0x2fc>
    set_crc_seed(ADV_CRC_INIT_VALUE);     // crc seed for adv is same for all channels
1fff7d76:	111b      	lrw      	r0, 0x555555	// 1fff7e60 <llSetupExtAdvEvent1+0x1c8>
1fff7d78:	e00015a4 	bsr      	0x1fffa8c0	// 1fffa8c0 <check_before_startup+0x1e8>
    set_access_address(ADV_SYNCH_WORD);   // access address
1fff7d7c:	111a      	lrw      	r0, 0x8e89bed6	// 1fff7e64 <llSetupExtAdvEvent1+0x1cc>
1fff7d7e:	e000164f 	bsr      	0x1fffaa1c	// 1fffaa1c <check_before_startup+0x344>
    set_channel(ch_idx);             // channel
1fff7d82:	6c13      	mov      	r0, r4
1fff7d84:	e00015f2 	bsr      	0x1fffa968	// 1fffa968 <check_before_startup+0x290>
    set_whiten_seed(ch_idx);         // whiten seed
1fff7d88:	6c13      	mov      	r0, r4
1fff7d8a:	e000173f 	bsr      	0x1fffac08	// 1fffac08 <check_before_startup+0x530>
    set_max_length(50);            // rx PDU max length
1fff7d8e:	3032      	movi      	r0, 50
1fff7d90:	e0001694 	bsr      	0x1fffaab8	// 1fffaab8 <check_before_startup+0x3e0>
    ll_hw_rst_rfifo();
1fff7d94:	e000164a 	bsr      	0x1fffaa28	// 1fffaa28 <check_before_startup+0x350>
    ll_hw_rst_tfifo();
1fff7d98:	e0001786 	bsr      	0x1fffaca4	// 1fffaca4 <check_before_startup+0x5cc>
    ll_hw_trx_settle_config(g_rfPhyPktFmt);
1fff7d9c:	8500      	ld.b      	r0, (r5, 0x0)
1fff7d9e:	7400      	zextb      	r0, r0
1fff7da0:	e00016e6 	bsr      	0x1fffab6c	// 1fffab6c <check_before_startup+0x494>
    if ((auxPduIndFlag == TRUE)                      &&                     // AUX_ADV_IND
1fff7da4:	9823      	ld.w      	r1, (r14, 0xc)
1fff7da6:	3941      	cmpnei      	r1, 1
1fff7da8:	083e      	bt      	0x1fff7e24	// 1fff7e24 <llSetupExtAdvEvent1+0x18c>
1fff7daa:	8f63      	ld.h      	r3, (r7, 0x6)
1fff7dac:	e4632003 	andi      	r3, r3, 3
1fff7db0:	3b40      	cmpnei      	r3, 0
1fff7db2:	0c39      	bf      	0x1fff7e24	// 1fff7e24 <llSetupExtAdvEvent1+0x18c>
        ll_hw_set_trx();                      // set LL HW as Tx - Rx mode
1fff7db4:	e000155c 	bsr      	0x1fffa86c	// 1fffa86c <check_before_startup+0x194>
        if (g_rfPhyPktFmt ==  PKT_FMT_BLE1M || g_rfPhyPktFmt ==  PKT_FMT_BLE2M) {   // 1M/2M PHY
1fff7db8:	8560      	ld.b      	r3, (r5, 0x0)
1fff7dba:	3b41      	cmpnei      	r3, 1
1fff7dbc:	0c04      	bf      	0x1fff7dc4	// 1fff7dc4 <llSetupExtAdvEvent1+0x12c>
1fff7dbe:	8560      	ld.b      	r3, (r5, 0x0)
1fff7dc0:	3b42      	cmpnei      	r3, 2
1fff7dc2:	082e      	bt      	0x1fff7e1e	// 1fff7e1e <llSetupExtAdvEvent1+0x186>
            ll_hw_set_rx_timeout(500);    //(300);
1fff7dc4:	30fa      	movi      	r0, 250
1fff7dc6:	4001      	lsli      	r0, r0, 1
            ll_hw_set_rx_timeout(3000);
1fff7dc8:	e000153a 	bsr      	0x1fffa83c	// 1fffa83c <check_before_startup+0x164>
    ll_hw_ign_rfifo(LL_HW_IGN_EMP | LL_HW_IGN_CRC);
1fff7dcc:	3003      	movi      	r0, 3
1fff7dce:	e0001723 	bsr      	0x1fffac14	// 1fffac14 <check_before_startup+0x53c>
    ll_hw_write_tfifo((uint8 *) & (g_tx_ext_adv_buf.txheader), ((g_tx_ext_adv_buf.txheader & 0xff00) >> 8) + 2);
1fff7dd2:	1106      	lrw      	r0, 0x1fff191c	// 1fff7e68 <llSetupExtAdvEvent1+0x1d0>
1fff7dd4:	2003      	addi      	r0, 4
1fff7dd6:	8820      	ld.h      	r1, (r0, 0x0)
1fff7dd8:	4928      	lsri      	r1, r1, 8
1fff7dda:	2101      	addi      	r1, 2
1fff7ddc:	e0001482 	bsr      	0x1fffa6e0	// 1fffa6e0 <check_before_startup+0x8>
    if (ch_idx < LL_ADV_CHAN_FIRST) {
1fff7de0:	eb040024 	cmphsi      	r4, 37
1fff7de4:	0811      	bt      	0x1fff7e06	// 1fff7e06 <llSetupExtAdvEvent1+0x16e>
        T2 = read_current_fine_time();
1fff7de6:	e0001699 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
        delta = LL_TIME_DELTA(T1, T2);
1fff7dea:	6580      	cmphs      	r0, r6
1fff7dec:	601a      	subu      	r0, r6
1fff7dee:	0c1e      	bf      	0x1fff7e2a	// 1fff7e2a <llSetupExtAdvEvent1+0x192>
        temp = (pGlobal_config[LL_EXT_ADV_PROCESS_TARGET] > delta) ? (pGlobal_config[LL_EXT_ADV_PROCESS_TARGET] - delta) : 0;
1fff7df0:	107f      	lrw      	r3, 0x1fffa670	// 1fff7e6c <llSetupExtAdvEvent1+0x1d4>
1fff7df2:	9360      	ld.w      	r3, (r3, 0x0)
1fff7df4:	d8432063 	ld.w      	r2, (r3, 0x18c)
1fff7df8:	5a61      	subu      	r3, r2, r0
1fff7dfa:	6480      	cmphs      	r0, r2
1fff7dfc:	3000      	movi      	r0, 0
1fff7dfe:	c4030c20 	incf      	r0, r3, 0
        llWaitUs(temp);             // insert delay to make process time equal PROCESS_TARGET
1fff7e02:	e00017ed 	bsr      	0x1fffaddc	// 1fffaddc <check_before_startup+0x704>
    ll_hw_go();
1fff7e06:	e00016a7 	bsr      	0x1fffab54	// 1fffab54 <check_before_startup+0x47c>
    llWaitingIrq = TRUE;
1fff7e0a:	9861      	ld.w      	r3, (r14, 0x4)
1fff7e0c:	3201      	movi      	r2, 1
1fff7e0e:	b340      	st.w      	r2, (r3, 0x0)
    llTaskState = LL_TASK_EXTENDED_ADV;
1fff7e10:	1078      	lrw      	r3, 0x1fff15d0	// 1fff7e70 <llSetupExtAdvEvent1+0x1d8>
1fff7e12:	a340      	st.b      	r2, (r3, 0x0)
1fff7e14:	9860      	ld.w      	r3, (r14, 0x0)
1fff7e16:	c0036420 	mtcr      	r3, cr<0, 0>
    return TRUE;
1fff7e1a:	3001      	movi      	r0, 1
1fff7e1c:	0748      	br      	0x1fff7cac	// 1fff7cac <llSetupExtAdvEvent1+0x14>
            ll_hw_set_rx_timeout(3000);
1fff7e1e:	ea000bb8 	movi      	r0, 3000
1fff7e22:	07d3      	br      	0x1fff7dc8	// 1fff7dc8 <llSetupExtAdvEvent1+0x130>
        ll_hw_set_stx();                      // set LL HW as Tx - Rx mode
1fff7e24:	e0001470 	bsr      	0x1fffa704	// 1fffa704 <check_before_startup+0x2c>
1fff7e28:	07d2      	br      	0x1fff7dcc	// 1fff7dcc <llSetupExtAdvEvent1+0x134>
        delta = LL_TIME_DELTA(T1, T2);
1fff7e2a:	c6a05023 	bmaski      	r3, 22
1fff7e2e:	600c      	addu      	r0, r3
1fff7e30:	07e0      	br      	0x1fff7df0	// 1fff7df0 <llSetupExtAdvEvent1+0x158>
            if (g_pAdvSchInfo[g_currentExtAdv].auxPduRemainder != LL_INVALID_TIME
1fff7e32:	1051      	lrw      	r2, 0x1fff12dc	// 1fff7e74 <llSetupExtAdvEvent1+0x1dc>
1fff7e34:	8240      	ld.b      	r2, (r2, 0x0)
1fff7e36:	4224      	lsli      	r1, r2, 4
1fff7e38:	1050      	lrw      	r2, 0x1fff1198	// 1fff7e78 <llSetupExtAdvEvent1+0x1e0>
1fff7e3a:	9240      	ld.w      	r2, (r2, 0x0)
1fff7e3c:	6084      	addu      	r2, r1
1fff7e3e:	9203      	ld.w      	r0, (r2, 0xc)
1fff7e40:	3100      	movi      	r1, 0
1fff7e42:	2900      	subi      	r1, 1
1fff7e44:	6442      	cmpne      	r0, r1
1fff7e46:	0b53      	bt      	0x1fff7cec	// 1fff7cec <llSetupExtAdvEvent1+0x54>
                pAdvInfo->currentChn = pAdvInfo->auxChn;
1fff7e48:	d8670053 	ld.b      	r3, (r7, 0x53)
1fff7e4c:	dc670052 	st.b      	r3, (r7, 0x52)
1fff7e50:	0756      	br      	0x1fff7cfc	// 1fff7cfc <llSetupExtAdvEvent1+0x64>
1fff7e52:	0000      	bkpt
1fff7e54:	1fff0df8 	.long	0x1fff0df8
1fff7e58:	1fffb8bc 	.long	0x1fffb8bc
1fff7e5c:	1fff08ae 	.long	0x1fff08ae
1fff7e60:	00555555 	.long	0x00555555
1fff7e64:	8e89bed6 	.long	0x8e89bed6
1fff7e68:	1fff191c 	.long	0x1fff191c
1fff7e6c:	1fffa670 	.long	0x1fffa670
1fff7e70:	1fff15d0 	.long	0x1fff15d0
1fff7e74:	1fff12dc 	.long	0x1fff12dc
1fff7e78:	1fff1198 	.long	0x1fff1198

1fff7e7c <move_to_slave_function1>:
{
1fff7e7c:	14d4      	push      	r4-r7, r15
1fff7e7e:	1424      	subi      	r14, r14, 16
    if ((connPtr = llAllocConnId()) == NULL) {
1fff7e80:	e0001586 	bsr      	0x1fffa98c	// 1fffa98c <check_before_startup+0x2b4>
1fff7e84:	6d03      	mov      	r4, r0
1fff7e86:	3840      	cmpnei      	r0, 0
1fff7e88:	0c74      	bf      	0x1fff7f70	// 1fff7f70 <move_to_slave_function1+0xf4>
    adv_param.connId = connPtr->connId;
1fff7e8a:	023c      	lrw      	r1, 0x1fff1528	// 1fff8114 <move_to_slave_function1+0x298>
1fff7e8c:	8064      	ld.b      	r3, (r0, 0x4)
    if (pGlobal_config[LL_SWITCH] & CONN_CSA2_ALLOW) {
1fff7e8e:	025c      	lrw      	r2, 0x1fffa670	// 1fff8118 <move_to_slave_function1+0x29c>
1fff7e90:	6d47      	mov      	r5, r1
    adv_param.connId = connPtr->connId;
1fff7e92:	a175      	st.b      	r3, (r1, 0x15)
    if (pGlobal_config[LL_SWITCH] & CONN_CSA2_ALLOW) {
1fff7e94:	9260      	ld.w      	r3, (r2, 0x0)
1fff7e96:	b841      	st.w      	r2, (r14, 0x4)
1fff7e98:	936b      	ld.w      	r3, (r3, 0x2c)
1fff7e9a:	e4632080 	andi      	r3, r3, 128
1fff7e9e:	3b40      	cmpnei      	r3, 0
1fff7ea0:	0c6a      	bf      	0x1fff7f74	// 1fff7f74 <move_to_slave_function1+0xf8>
    chnSel   = (g_rx_adv_buf.rxheader & CHSEL_MASK) >> CHSEL_SHIFT;
1fff7ea2:	0360      	lrw      	r3, 0x1fff17f8	// 1fff811c <move_to_slave_function1+0x2a0>
1fff7ea4:	8b62      	ld.h      	r3, (r3, 0x4)
1fff7ea6:	5365      	asri      	r3, r3, 5
1fff7ea8:	e4632001 	andi      	r3, r3, 1
        connPtr->channel_selection = LL_CHN_SEL_ALGORITHM_1;
1fff7eac:	dc64020d 	st.b      	r3, (r4, 0x20d)
    LL_set_default_conn_params(connPtr);
1fff7eb0:	6c13      	mov      	r0, r4
1fff7eb2:	e0001783 	bsr      	0x1fffadb8	// 1fffadb8 <check_before_startup+0x6e0>
    reset_conn_buf(connPtr->connId);
1fff7eb6:	8404      	ld.b      	r0, (r4, 0x4)
1fff7eb8:	e000146e 	bsr      	0x1fffa794	// 1fffa794 <check_before_startup+0xbc>
    if (llTaskState == LL_TASK_EXTENDED_ADV) {
1fff7ebc:	0366      	lrw      	r3, 0x1fff15d0	// 1fff8120 <move_to_slave_function1+0x2a4>
1fff7ebe:	8360      	ld.b      	r3, (r3, 0x0)
1fff7ec0:	3b41      	cmpnei      	r3, 1
1fff7ec2:	0c03      	bf      	0x1fff7ec8	// 1fff7ec8 <move_to_slave_function1+0x4c>
        adv_param.advMode = LL_ADV_MODE_OFF;
1fff7ec4:	3300      	movi      	r3, 0
1fff7ec6:	ad62      	st.h      	r3, (r5, 0x4)
    pBuf = llMemCopySrc((uint8 *)&connPtr->accessAddr,             pBuf, 4);
1fff7ec8:	3204      	movi      	r2, 4
1fff7eca:	0328      	lrw      	r1, 0x1fff180a	// 1fff8124 <move_to_slave_function1+0x2a8>
1fff7ecc:	e4040027 	addi      	r0, r4, 40
1fff7ed0:	e0001522 	bsr      	0x1fffa914	// 1fffa914 <check_before_startup+0x23c>
1fff7ed4:	6c43      	mov      	r1, r0
    pBuf = llMemCopySrc((uint8 *)&connPtr->initCRC,                pBuf, 3);
1fff7ed6:	e464002b 	addi      	r3, r4, 44
1fff7eda:	3203      	movi      	r2, 3
1fff7edc:	6c0f      	mov      	r0, r3
    pBuf = llMemCopySrc((uint8 *)&connPtr->curParam.winSize,       pBuf, 1);
1fff7ede:	e4c40031 	addi      	r6, r4, 50
    pBuf = llMemCopySrc((uint8 *)&connPtr->initCRC,                pBuf, 3);
1fff7ee2:	e0001519 	bsr      	0x1fffa914	// 1fffa914 <check_before_startup+0x23c>
1fff7ee6:	6c43      	mov      	r1, r0
    pBuf = llMemCopySrc((uint8 *)&connPtr->curParam.winSize,       pBuf, 1);
1fff7ee8:	3201      	movi      	r2, 1
1fff7eea:	6c1b      	mov      	r0, r6
1fff7eec:	03f0      	lrw      	r7, 0x1fff14ac	// 1fff8128 <move_to_slave_function1+0x2ac>
1fff7eee:	e0001513 	bsr      	0x1fffa914	// 1fffa914 <check_before_startup+0x23c>
1fff7ef2:	6c43      	mov      	r1, r0
    pBuf = llMemCopySrc((uint8 *)&connPtr->curParam.winOffset,     pBuf, 2);
1fff7ef4:	e4640033 	addi      	r3, r4, 52
1fff7ef8:	3202      	movi      	r2, 2
1fff7efa:	6c0f      	mov      	r0, r3
1fff7efc:	e000150c 	bsr      	0x1fffa914	// 1fffa914 <check_before_startup+0x23c>
1fff7f00:	6c43      	mov      	r1, r0
    pBuf = llMemCopySrc((uint8 *)&connPtr->curParam.connInterval,  pBuf, 2);
1fff7f02:	e4640035 	addi      	r3, r4, 54
1fff7f06:	3202      	movi      	r2, 2
1fff7f08:	6c0f      	mov      	r0, r3
1fff7f0a:	e0001505 	bsr      	0x1fffa914	// 1fffa914 <check_before_startup+0x23c>
1fff7f0e:	6c43      	mov      	r1, r0
    pBuf = llMemCopySrc((uint8 *)&connPtr->curParam.slaveLatency,  pBuf, 2);
1fff7f10:	e4640037 	addi      	r3, r4, 56
1fff7f14:	3202      	movi      	r2, 2
1fff7f16:	6c0f      	mov      	r0, r3
1fff7f18:	e00014fe 	bsr      	0x1fffa914	// 1fffa914 <check_before_startup+0x23c>
1fff7f1c:	6c43      	mov      	r1, r0
    pBuf = llMemCopySrc((uint8 *)&connPtr->curParam.connTimeout,   pBuf, 2);
1fff7f1e:	3202      	movi      	r2, 2
1fff7f20:	e4640039 	addi      	r3, r4, 58
1fff7f24:	6c0f      	mov      	r0, r3
1fff7f26:	e00014f7 	bsr      	0x1fffa914	// 1fffa914 <check_before_startup+0x23c>
    connPtr->curParam.winSize      <<= 1;
1fff7f2a:	d8640032 	ld.b      	r3, (r4, 0x32)
1fff7f2e:	4361      	lsli      	r3, r3, 1
1fff7f30:	dc640032 	st.b      	r3, (r4, 0x32)
    connPtr->curParam.winOffset    <<= 1;
1fff7f34:	8c7a      	ld.h      	r3, (r4, 0x34)
1fff7f36:	4361      	lsli      	r3, r3, 1
1fff7f38:	ac7a      	st.h      	r3, (r4, 0x34)
    connPtr->curParam.connInterval <<= 1;
1fff7f3a:	8c7b      	ld.h      	r3, (r4, 0x36)
1fff7f3c:	4361      	lsli      	r3, r3, 1
1fff7f3e:	ac7b      	st.h      	r3, (r4, 0x36)
    connPtr->curParam.connTimeout  <<= 4;
1fff7f40:	8c7d      	ld.h      	r3, (r4, 0x3a)
1fff7f42:	4364      	lsli      	r3, r3, 4
1fff7f44:	ac7d      	st.h      	r3, (r4, 0x3a)
    llConvertLstoToEvent(connPtr, &(connPtr->curParam));       // 16MHz CLK, need 56.5us
1fff7f46:	6c5b      	mov      	r1, r6
    pBuf = llMemCopySrc((uint8 *)&connPtr->curParam.connTimeout,   pBuf, 2);
1fff7f48:	6d43      	mov      	r5, r0
    llConvertLstoToEvent(connPtr, &(connPtr->curParam));       // 16MHz CLK, need 56.5us
1fff7f4a:	6c13      	mov      	r0, r4
1fff7f4c:	e000168e 	bsr      	0x1fffac68	// 1fffac68 <check_before_startup+0x590>
    llConvertCtrlProcTimeoutToEvent(connPtr);
1fff7f50:	6c13      	mov      	r0, r4
1fff7f52:	e000145d 	bsr      	0x1fffa80c	// 1fffa80c <check_before_startup+0x134>
    if (((connPtr->curParam.connTimeout <= ((connPtr->curParam.slaveLatency) * connPtr->curParam.connInterval << 1)))
1fff7f56:	8c5b      	ld.h      	r2, (r4, 0x36)
1fff7f58:	8c7c      	ld.h      	r3, (r4, 0x38)
1fff7f5a:	7cc8      	mult      	r3, r2
1fff7f5c:	8c3d      	ld.h      	r1, (r4, 0x3a)
1fff7f5e:	4361      	lsli      	r3, r3, 1
1fff7f60:	644d      	cmplt      	r3, r1
1fff7f62:	0c03      	bf      	0x1fff7f68	// 1fff7f68 <move_to_slave_function1+0xec>
        || (connPtr->curParam.connInterval == 0)) {
1fff7f64:	3a40      	cmpnei      	r2, 0
1fff7f66:	0809      	bt      	0x1fff7f78	// 1fff7f78 <move_to_slave_function1+0xfc>
        (void)osal_set_event(LL_TaskID, LL_EVT_SLAVE_CONN_CREATED_BAD_PARAM);
1fff7f68:	8700      	ld.b      	r0, (r7, 0x0)
1fff7f6a:	3140      	movi      	r1, 64
1fff7f6c:	e00016cc 	bsr      	0x1fffad04	// 1fffad04 <check_before_startup+0x62c>
}
1fff7f70:	1404      	addi      	r14, r14, 16
1fff7f72:	1494      	pop      	r4-r7, r15
        connPtr->channel_selection = LL_CHN_SEL_ALGORITHM_1;
1fff7f74:	3300      	movi      	r3, 0
1fff7f76:	079b      	br      	0x1fff7eac	// 1fff7eac <move_to_slave_function1+0x30>
    pBuf = llMemCopySrc((uint8 *)connPtr->chanMap,   pBuf, 5);
1fff7f78:	6c57      	mov      	r1, r5
1fff7f7a:	e4c40064 	addi      	r6, r4, 101
1fff7f7e:	3205      	movi      	r2, 5
1fff7f80:	6c1b      	mov      	r0, r6
    llState = LL_STATE_CONN_SLAVE;
1fff7f82:	13ab      	lrw      	r5, 0x1fff117d	// 1fff812c <move_to_slave_function1+0x2b0>
    pBuf = llMemCopySrc((uint8 *)connPtr->chanMap,   pBuf, 5);
1fff7f84:	e00014c8 	bsr      	0x1fffa914	// 1fffa914 <check_before_startup+0x23c>
1fff7f88:	6c43      	mov      	r1, r0
    pBuf = llMemCopySrc(&tempByte,   pBuf, 1);
1fff7f8a:	3201      	movi      	r2, 1
1fff7f8c:	e40e000e 	addi      	r0, r14, 15
1fff7f90:	e00014c2 	bsr      	0x1fffa914	// 1fffa914 <check_before_startup+0x23c>
    connPtr->hop  = tempByte & 0x1F;
1fff7f94:	d86e000f 	ld.b      	r3, (r14, 0xf)
1fff7f98:	e443201f 	andi      	r2, r3, 31
    connPtr->sleepClkAccuracy  = (tempByte >> 5) & 0x07;
1fff7f9c:	4b65      	lsri      	r3, r3, 5
    connPtr->hop  = tempByte & 0x1F;
1fff7f9e:	dc44007a 	st.b      	r2, (r4, 0x7a)
    llProcessChanMap(connPtr, connPtr->chanMap);    // 16MHz clk, cost 116us!
1fff7fa2:	6c5b      	mov      	r1, r6
    connPtr->sleepClkAccuracy  = (tempByte >> 5) & 0x07;
1fff7fa4:	dc640030 	st.b      	r3, (r4, 0x30)
    llProcessChanMap(connPtr, connPtr->chanMap);    // 16MHz clk, cost 116us!
1fff7fa8:	6c13      	mov      	r0, r4
1fff7faa:	e00014fd 	bsr      	0x1fffa9a4	// 1fffa9a4 <check_before_startup+0x2cc>
    connPtr->slaveLatency = 0;        //correct 05-09, no latency before connect
1fff7fae:	3300      	movi      	r3, 0
    llAdjSlaveLatencyValue(connPtr);
1fff7fb0:	6c13      	mov      	r0, r4
    connPtr->slaveLatency = 0;        //correct 05-09, no latency before connect
1fff7fb2:	ac71      	st.h      	r3, (r4, 0x22)
    connPtr->slaveLatencyValue = connPtr->curParam.slaveLatency;
1fff7fb4:	8c7c      	ld.h      	r3, (r4, 0x38)
1fff7fb6:	ac73      	st.h      	r3, (r4, 0x26)
    connPtr->accuTimerDrift = 0;
1fff7fb8:	3300      	movi      	r3, 0
1fff7fba:	b466      	st.w      	r3, (r4, 0x18)
    llAdjSlaveLatencyValue(connPtr);
1fff7fbc:	e00014a0 	bsr      	0x1fffa8fc	// 1fffa8fc <check_before_startup+0x224>
    connPtr->llRfPhyPktFmt = g_rfPhyPktFmt;
1fff7fc0:	127c      	lrw      	r3, 0x1fff08ae	// 1fff8130 <move_to_slave_function1+0x2b4>
    ll_debug_output(DEBUG_LL_STATE_CONN_SLAVE);
1fff7fc2:	3025      	movi      	r0, 37
    connPtr->llRfPhyPktFmt = g_rfPhyPktFmt;
1fff7fc4:	8360      	ld.b      	r3, (r3, 0x0)
1fff7fc6:	dc64020c 	st.b      	r3, (r4, 0x20c)
    llState = LL_STATE_CONN_SLAVE;
1fff7fca:	3307      	movi      	r3, 7
1fff7fcc:	a560      	st.b      	r3, (r5, 0x0)
    ll_debug_output(DEBUG_LL_STATE_CONN_SLAVE);
1fff7fce:	e000158d 	bsr      	0x1fffaae8	// 1fffaae8 <check_before_startup+0x410>
    connPtr->active = TRUE;
1fff7fd2:	3301      	movi      	r3, 1
1fff7fd4:	a463      	st.b      	r3, (r4, 0x3)
    connPtr->sn_nesn = 0;                  // 1st rtlp, init sn/nesn as 0
1fff7fd6:	3300      	movi      	r3, 0
1fff7fd8:	dc640134 	st.b      	r3, (r4, 0x134)
    connPtr->llMode = LL_HW_RTLP_1ST;     // set as RTLP_1ST for the 1st connection event
1fff7fdc:	3331      	movi      	r3, 49
1fff7fde:	dc640135 	st.b      	r3, (r4, 0x135)
    connPtr->currentChan = 0;
1fff7fe2:	3300      	movi      	r3, 0
1fff7fe4:	dc64003d 	st.b      	r3, (r4, 0x3d)
    if (connPtr->channel_selection == LL_CHN_SEL_ALGORITHM_1) {
1fff7fe8:	d864020d 	ld.b      	r3, (r4, 0x20d)
1fff7fec:	3b40      	cmpnei      	r3, 0
1fff7fee:	0875      	bt      	0x1fff80d8	// 1fff80d8 <move_to_slave_function1+0x25c>
        connPtr->currentChan = llGetNextDataChan(connPtr, 1);
1fff7ff0:	3101      	movi      	r1, 1
1fff7ff2:	6c13      	mov      	r0, r4
1fff7ff4:	e000142a 	bsr      	0x1fffa848	// 1fffa848 <check_before_startup+0x170>
    llCalcTimerDrift(connPtr->curParam.winOffset + 2,        // 1250us + win offset, in 625us tick
1fff7ff8:	8c31      	ld.h      	r1, (r4, 0x22)
        connPtr->currentChan = llGetNextDataChanCSA2(0,
1fff7ffa:	dc04003d 	st.b      	r0, (r4, 0x3d)
    llCalcTimerDrift(connPtr->curParam.winOffset + 2,        // 1250us + win offset, in 625us tick
1fff7ffe:	d8440030 	ld.b      	r2, (r4, 0x30)
                     (uint32 *) & (connPtr->timerDrift));
1fff8002:	e4640013 	addi      	r3, r4, 20
    llCalcTimerDrift(connPtr->curParam.winOffset + 2,        // 1250us + win offset, in 625us tick
1fff8006:	8c1a      	ld.h      	r0, (r4, 0x34)
1fff8008:	2001      	addi      	r0, 2
1fff800a:	e00013e3 	bsr      	0x1fffa7d0	// 1fffa7d0 <check_before_startup+0xf8>
    T2 = read_current_fine_time();
1fff800e:	e0001585 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
    calibra_time = (T2 > ISR_entry_time) ? (T2 - ISR_entry_time) : (BASE_TIME_UNITS - ISR_entry_time + T2);
1fff8012:	1269      	lrw      	r3, 0x1fff0e1c	// 1fff8134 <move_to_slave_function1+0x2b8>
    T2 = read_current_fine_time();
1fff8014:	6d83      	mov      	r6, r0
    calibra_time = (T2 > ISR_entry_time) ? (T2 - ISR_entry_time) : (BASE_TIME_UNITS - ISR_entry_time + T2);
1fff8016:	9360      	ld.w      	r3, (r3, 0x0)
1fff8018:	582d      	subu      	r1, r0, r3
1fff801a:	640c      	cmphs      	r3, r0
1fff801c:	086c      	bt      	0x1fff80f4	// 1fff80f4 <move_to_slave_function1+0x278>
    if (g_llAdvMode == LL_MODE_EXTENDED) {
1fff801e:	1247      	lrw      	r2, 0x1fff0888	// 1fff8138 <move_to_slave_function1+0x2bc>
    calibra_time += pGlobal_config[CONN_REQ_TO_SLAVE_DELAY];     //(32 + 50 + 60 + 50 + pGlobal_config[CONN_REQ_TO_SLAVE_DELAY]);
1fff8020:	9861      	ld.w      	r3, (r14, 0x4)
    if (g_llAdvMode == LL_MODE_EXTENDED) {
1fff8022:	8240      	ld.b      	r2, (r2, 0x0)
    calibra_time += pGlobal_config[CONN_REQ_TO_SLAVE_DELAY];     //(32 + 50 + 60 + 50 + pGlobal_config[CONN_REQ_TO_SLAVE_DELAY]);
1fff8024:	9360      	ld.w      	r3, (r3, 0x0)
    if (g_llAdvMode == LL_MODE_EXTENDED) {
1fff8026:	3a41      	cmpnei      	r2, 1
    calibra_time += pGlobal_config[CONN_REQ_TO_SLAVE_DELAY];     //(32 + 50 + 60 + 50 + pGlobal_config[CONN_REQ_TO_SLAVE_DELAY]);
1fff8028:	9362      	ld.w      	r3, (r3, 0x8)
1fff802a:	604c      	addu      	r1, r3
    if (g_llAdvMode == LL_MODE_EXTENDED) {
1fff802c:	086c      	bt      	0x1fff8104	// 1fff8104 <move_to_slave_function1+0x288>
        pAdvInfo = g_pAdvSchInfo[g_currentExtAdv].pAdvInfo;
1fff802e:	1244      	lrw      	r2, 0x1fff12dc	// 1fff813c <move_to_slave_function1+0x2c0>
1fff8030:	1204      	lrw      	r0, 0x1fff1198	// 1fff8140 <move_to_slave_function1+0x2c4>
1fff8032:	8240      	ld.b      	r2, (r2, 0x0)
1fff8034:	9000      	ld.w      	r0, (r0, 0x0)
1fff8036:	4244      	lsli      	r2, r2, 4
1fff8038:	6080      	addu      	r2, r0
1fff803a:	9201      	ld.w      	r0, (r2, 0x4)
1fff803c:	b862      	st.w      	r3, (r14, 0x8)
        if (pAdvInfo != NULL && !ll_isLegacyAdv(pAdvInfo)) {
1fff803e:	3840      	cmpnei      	r0, 0
1fff8040:	0c62      	bf      	0x1fff8104	// 1fff8104 <move_to_slave_function1+0x288>
1fff8042:	b821      	st.w      	r1, (r14, 0x4)
1fff8044:	e3ffef5c 	bsr      	0x1fff5efc	// 1fff5efc <ll_isLegacyAdv>
1fff8048:	9821      	ld.w      	r1, (r14, 0x4)
1fff804a:	3840      	cmpnei      	r0, 0
1fff804c:	085c      	bt      	0x1fff8104	// 1fff8104 <move_to_slave_function1+0x288>
            if (connPtr->llRfPhyPktFmt == PKT_FMT_BLR500K || connPtr->llRfPhyPktFmt == PKT_FMT_BLR125K) {
1fff804e:	d844020c 	ld.b      	r2, (r4, 0x20c)
1fff8052:	2a02      	subi      	r2, 3
1fff8054:	7488      	zextb      	r2, r2
                tranWinDelay = 3750;
1fff8056:	ea010ea6 	movi      	r1, 3750
1fff805a:	3a01      	cmphsi      	r2, 2
1fff805c:	ea0209c4 	movi      	r2, 2500
1fff8060:	c4410c20 	incf      	r2, r1, 0
            calibra_time = (T2 > g_auxconnreq_ISR_entry_time) ? (T2 - g_auxconnreq_ISR_entry_time) : (BASE_TIME_UNITS - g_auxconnreq_ISR_entry_time + T2);
1fff8064:	1138      	lrw      	r1, 0x1fffcf04	// 1fff8144 <move_to_slave_function1+0x2c8>
1fff8066:	9862      	ld.w      	r3, (r14, 0x8)
1fff8068:	9120      	ld.w      	r1, (r1, 0x0)
1fff806a:	6584      	cmphs      	r1, r6
1fff806c:	6186      	subu      	r6, r1
1fff806e:	0847      	bt      	0x1fff80fc	// 1fff80fc <move_to_slave_function1+0x280>
            calibra_time += pGlobal_config[CONN_REQ_TO_SLAVE_DELAY];
1fff8070:	5e2c      	addu      	r1, r6, r3
    if (g_ll_conn_ctx.numLLConns == 1) {   // 1st connection, time1 is for adv event
1fff8072:	11d6      	lrw      	r6, 0x1fff11c4	// 1fff8148 <move_to_slave_function1+0x2cc>
    temp = tranWinDelay + connPtr->curParam.winOffset * 625 - calibra_time - connPtr->timerDrift;
1fff8074:	ea000271 	movi      	r0, 625
1fff8078:	8c7a      	ld.h      	r3, (r4, 0x34)
1fff807a:	7cc0      	mult      	r3, r0
1fff807c:	9405      	ld.w      	r0, (r4, 0x14)
1fff807e:	60c2      	subu      	r3, r0
1fff8080:	608c      	addu      	r2, r3
    if (g_ll_conn_ctx.numLLConns == 1) {   // 1st connection, time1 is for adv event
1fff8082:	8660      	ld.b      	r3, (r6, 0x0)
    temp = tranWinDelay + connPtr->curParam.winOffset * 625 - calibra_time - connPtr->timerDrift;
1fff8084:	5a25      	subu      	r1, r2, r1
    if (g_ll_conn_ctx.numLLConns == 1) {   // 1st connection, time1 is for adv event
1fff8086:	3b41      	cmpnei      	r3, 1
1fff8088:	0806      	bt      	0x1fff8094	// 1fff8094 <move_to_slave_function1+0x218>
        clear_timer(AP_TIM1);    // stop the timer between different adv channel
1fff808a:	1111      	lrw      	r0, 0x40001000	// 1fff814c <move_to_slave_function1+0x2d0>
1fff808c:	b821      	st.w      	r1, (r14, 0x4)
1fff808e:	e00016b9 	bsr      	0x1fffae00	// 1fffae00 <check_before_startup+0x728>
1fff8092:	9821      	ld.w      	r1, (r14, 0x4)
    ll_addTask(connPtr->connId, temp);
1fff8094:	8404      	ld.b      	r0, (r4, 0x4)
1fff8096:	e000145d 	bsr      	0x1fffa950	// 1fffa950 <check_before_startup+0x278>
    g_ll_conn_ctx.scheduleInfo[connPtr->connId].task_duration = 3000;     // slave task duration: 150 + 80 + 150 + 2120 + window
1fff809a:	8464      	ld.b      	r3, (r4, 0x4)
1fff809c:	ea020bb8 	movi      	r2, 3000
1fff80a0:	4364      	lsli      	r3, r3, 4
1fff80a2:	60d8      	addu      	r3, r6
1fff80a4:	b343      	st.w      	r2, (r3, 0xc)
    if (g_ll_conn_ctx.scheduleInfo[g_ll_conn_ctx.currentConn].linkRole == LL_ROLE_MASTER) {
1fff80a6:	8662      	ld.b      	r3, (r6, 0x2)
1fff80a8:	4364      	lsli      	r3, r3, 4
1fff80aa:	60d8      	addu      	r3, r6
1fff80ac:	8366      	ld.b      	r3, (r3, 0x6)
1fff80ae:	3b42      	cmpnei      	r3, 2
1fff80b0:	082d      	bt      	0x1fff810a	// 1fff810a <move_to_slave_function1+0x28e>
        llState = LL_STATE_CONN_MASTER;
1fff80b2:	3308      	movi      	r3, 8
        llState = LL_STATE_CONN_SLAVE;
1fff80b4:	a560      	st.b      	r3, (r5, 0x0)
    llSecondaryState = LL_SEC_STATE_IDLE;
1fff80b6:	3200      	movi      	r2, 0
1fff80b8:	1166      	lrw      	r3, 0x1fff1184	// 1fff8150 <move_to_slave_function1+0x2d4>
    (void)osal_set_event(LL_TaskID, LL_EVT_SLAVE_CONN_CREATED);
1fff80ba:	8700      	ld.b      	r0, (r7, 0x0)
    llSecondaryState = LL_SEC_STATE_IDLE;
1fff80bc:	a340      	st.b      	r2, (r3, 0x0)
    g_ll_conn_ctx.scheduleInfo[connPtr->connId].linkRole = LL_ROLE_SLAVE;
1fff80be:	8464      	ld.b      	r3, (r4, 0x4)
1fff80c0:	4364      	lsli      	r3, r3, 4
1fff80c2:	618c      	addu      	r6, r3
1fff80c4:	3301      	movi      	r3, 1
    (void)osal_set_event(LL_TaskID, LL_EVT_SLAVE_CONN_CREATED);
1fff80c6:	3104      	movi      	r1, 4
    g_ll_conn_ctx.scheduleInfo[connPtr->connId].linkRole = LL_ROLE_SLAVE;
1fff80c8:	a666      	st.b      	r3, (r6, 0x6)
    (void)osal_set_event(LL_TaskID, LL_EVT_SLAVE_CONN_CREATED);
1fff80ca:	e000161d 	bsr      	0x1fffad04	// 1fffad04 <check_before_startup+0x62c>
    g_pmCounters.ll_conn_succ_cnt ++;     // move to anchor point catch ?
1fff80ce:	1142      	lrw      	r2, 0x1fff12e0	// 1fff8154 <move_to_slave_function1+0x2d8>
1fff80d0:	9271      	ld.w      	r3, (r2, 0x44)
1fff80d2:	2300      	addi      	r3, 1
1fff80d4:	b271      	st.w      	r3, (r2, 0x44)
1fff80d6:	074d      	br      	0x1fff7f70	// 1fff7f70 <move_to_slave_function1+0xf4>
                               ((connPtr->accessAddr & 0xFFFF0000) >> 16) ^ (connPtr->accessAddr  & 0x0000FFFF),
1fff80d8:	944a      	ld.w      	r2, (r4, 0x28)
1fff80da:	4a30      	lsri      	r1, r2, 16
        connPtr->currentChan = llGetNextDataChanCSA2(0,
1fff80dc:	6c49      	xor      	r1, r2
1fff80de:	d844003f 	ld.b      	r2, (r4, 0x3f)
1fff80e2:	7445      	zexth      	r1, r1
1fff80e4:	b840      	st.w      	r2, (r14, 0x0)
1fff80e6:	3000      	movi      	r0, 0
1fff80e8:	6c9b      	mov      	r2, r6
                               connPtr->chanMapTable,
1fff80ea:	e464003f 	addi      	r3, r4, 64
        connPtr->currentChan = llGetNextDataChanCSA2(0,
1fff80ee:	e0001443 	bsr      	0x1fffa974	// 1fffa974 <check_before_startup+0x29c>
1fff80f2:	0783      	br      	0x1fff7ff8	// 1fff7ff8 <move_to_slave_function1+0x17c>
    calibra_time = (T2 > ISR_entry_time) ? (T2 - ISR_entry_time) : (BASE_TIME_UNITS - ISR_entry_time + T2);
1fff80f4:	c6a05023 	bmaski      	r3, 22
1fff80f8:	604c      	addu      	r1, r3
1fff80fa:	0792      	br      	0x1fff801e	// 1fff801e <move_to_slave_function1+0x1a2>
            calibra_time = (T2 > g_auxconnreq_ISR_entry_time) ? (T2 - g_auxconnreq_ISR_entry_time) : (BASE_TIME_UNITS - g_auxconnreq_ISR_entry_time + T2);
1fff80fc:	c6a05021 	bmaski      	r1, 22
1fff8100:	6184      	addu      	r6, r1
1fff8102:	07b7      	br      	0x1fff8070	// 1fff8070 <move_to_slave_function1+0x1f4>
    uint32_t  temp, tranWinDelay = 1250;
1fff8104:	ea0204e2 	movi      	r2, 1250
1fff8108:	07b5      	br      	0x1fff8072	// 1fff8072 <move_to_slave_function1+0x1f6>
    } else if (g_ll_conn_ctx.scheduleInfo[g_ll_conn_ctx.currentConn].linkRole == LL_ROLE_SLAVE) {
1fff810a:	3b41      	cmpnei      	r3, 1
1fff810c:	0bd5      	bt      	0x1fff80b6	// 1fff80b6 <move_to_slave_function1+0x23a>
        llState = LL_STATE_CONN_SLAVE;
1fff810e:	3307      	movi      	r3, 7
1fff8110:	07d2      	br      	0x1fff80b4	// 1fff80b4 <move_to_slave_function1+0x238>
1fff8112:	0000      	bkpt
1fff8114:	1fff1528 	.long	0x1fff1528
1fff8118:	1fffa670 	.long	0x1fffa670
1fff811c:	1fff17f8 	.long	0x1fff17f8
1fff8120:	1fff15d0 	.long	0x1fff15d0
1fff8124:	1fff180a 	.long	0x1fff180a
1fff8128:	1fff14ac 	.long	0x1fff14ac
1fff812c:	1fff117d 	.long	0x1fff117d
1fff8130:	1fff08ae 	.long	0x1fff08ae
1fff8134:	1fff0e1c 	.long	0x1fff0e1c
1fff8138:	1fff0888 	.long	0x1fff0888
1fff813c:	1fff12dc 	.long	0x1fff12dc
1fff8140:	1fff1198 	.long	0x1fff1198
1fff8144:	1fffcf04 	.long	0x1fffcf04
1fff8148:	1fff11c4 	.long	0x1fff11c4
1fff814c:	40001000 	.long	0x40001000
1fff8150:	1fff1184 	.long	0x1fff1184
1fff8154:	1fff12e0 	.long	0x1fff12e0

1fff8158 <ll_hw_trx_settle_bb>:
{
1fff8158:	14d0      	push      	r15
1fff815a:	6c83      	mov      	r2, r0
1fff815c:	1070      	lrw      	r3, 0x1fffa670	// 1fff819c <ll_hw_trx_settle_bb+0x44>
    if (pkt == PKT_FMT_BLE1M) {
1fff815e:	3a41      	cmpnei      	r2, 1
{
1fff8160:	6c07      	mov      	r0, r1
                             pGlobal_config[LL_HW_AFE_DELAY],
1fff8162:	9360      	ld.w      	r3, (r3, 0x0)
    if (pkt == PKT_FMT_BLE1M) {
1fff8164:	0808      	bt      	0x1fff8174	// 1fff8174 <ll_hw_trx_settle_bb+0x1c>
        ll_hw_set_trx_settle(bb_delay,
1fff8166:	d8430044 	ld.b      	r2, (r3, 0x44)
1fff816a:	d8230040 	ld.b      	r1, (r3, 0x40)
        ll_hw_set_trx_settle(bb_delay,
1fff816e:	e00015e9 	bsr      	0x1fffad40	// 1fffad40 <check_before_startup+0x668>
}
1fff8172:	1490      	pop      	r15
    } else if (pkt == PKT_FMT_BLE2M) {
1fff8174:	3a42      	cmpnei      	r2, 2
1fff8176:	0806      	bt      	0x1fff8182	// 1fff8182 <ll_hw_trx_settle_bb+0x2a>
        ll_hw_set_trx_settle(bb_delay,
1fff8178:	d84300c4 	ld.b      	r2, (r3, 0xc4)
1fff817c:	d82300c0 	ld.b      	r1, (r3, 0xc0)
1fff8180:	07f7      	br      	0x1fff816e	// 1fff816e <ll_hw_trx_settle_bb+0x16>
    } else if (pkt == PKT_FMT_BLR500K) {
1fff8182:	3a43      	cmpnei      	r2, 3
1fff8184:	0806      	bt      	0x1fff8190	// 1fff8190 <ll_hw_trx_settle_bb+0x38>
        ll_hw_set_trx_settle(bb_delay,
1fff8186:	d84300d8 	ld.b      	r2, (r3, 0xd8)
1fff818a:	d82300d4 	ld.b      	r1, (r3, 0xd4)
1fff818e:	07f0      	br      	0x1fff816e	// 1fff816e <ll_hw_trx_settle_bb+0x16>
        ll_hw_set_trx_settle(bb_delay,
1fff8190:	d84300ec 	ld.b      	r2, (r3, 0xec)
1fff8194:	d82300e8 	ld.b      	r1, (r3, 0xe8)
1fff8198:	07eb      	br      	0x1fff816e	// 1fff816e <ll_hw_trx_settle_bb+0x16>
1fff819a:	0000      	bkpt
1fff819c:	1fffa670 	.long	0x1fffa670

1fff81a0 <patch_extScan_findSchNode>:
    for (patch_extScan_list *entry = p_extScan; entry;) {
1fff81a0:	1067      	lrw      	r3, 0x1fffb8cc	// 1fff81bc <patch_extScan_findSchNode+0x1c>
    patch_extScan_list *node = NULL;
1fff81a2:	3000      	movi      	r0, 0
    for (patch_extScan_list *entry = p_extScan; entry;) {
1fff81a4:	9360      	ld.w      	r3, (r3, 0x0)
        if ((entry) && (entry->remain_time < min)) {
1fff81a6:	3200      	movi      	r2, 0
1fff81a8:	2a00      	subi      	r2, 1
    for (patch_extScan_list *entry = p_extScan; entry;) {
1fff81aa:	3b40      	cmpnei      	r3, 0
1fff81ac:	0802      	bt      	0x1fff81b0	// 1fff81b0 <patch_extScan_findSchNode+0x10>
}
1fff81ae:	783c      	jmp      	r15
        if ((entry) && (entry->remain_time < min)) {
1fff81b0:	9320      	ld.w      	r1, (r3, 0x0)
1fff81b2:	6486      	cmpne      	r1, r2
1fff81b4:	c4030c40 	inct      	r0, r3, 0
        entry = entry->next;
1fff81b8:	9362      	ld.w      	r3, (r3, 0x8)
1fff81ba:	07f8      	br      	0x1fff81aa	// 1fff81aa <patch_extScan_findSchNode+0xa>
1fff81bc:	1fffb8cc 	.long	0x1fffb8cc

1fff81c0 <patch_extScan_deleteNode>:
{
1fff81c0:	14d0      	push      	r15
    for (patch_extScan_list **curr = &p_extScan; *curr;) {
1fff81c2:	1048      	lrw      	r2, 0x1fffb8cc	// 1fff81e0 <patch_extScan_deleteNode+0x20>
1fff81c4:	9260      	ld.w      	r3, (r2, 0x0)
1fff81c6:	3b40      	cmpnei      	r3, 0
1fff81c8:	0c08      	bf      	0x1fff81d8	// 1fff81d8 <patch_extScan_deleteNode+0x18>
        if (entry == node) {
1fff81ca:	640e      	cmpne      	r3, r0
1fff81cc:	0807      	bt      	0x1fff81da	// 1fff81da <patch_extScan_deleteNode+0x1a>
            *curr = entry->next;
1fff81ce:	9322      	ld.w      	r1, (r3, 0x8)
            osal_mem_free(entry);
1fff81d0:	6c0f      	mov      	r0, r3
            *curr = entry->next;
1fff81d2:	b220      	st.w      	r1, (r2, 0x0)
            osal_mem_free(entry);
1fff81d4:	e0001358 	bsr      	0x1fffa884	// 1fffa884 <check_before_startup+0x1ac>
}
1fff81d8:	1490      	pop      	r15
            curr = &entry->next;
1fff81da:	5b5e      	addi      	r2, r3, 8
1fff81dc:	9362      	ld.w      	r3, (r3, 0x8)
1fff81de:	07f4      	br      	0x1fff81c6	// 1fff81c6 <patch_extScan_deleteNode+0x6>
1fff81e0:	1fffb8cc 	.long	0x1fffb8cc

1fff81e4 <patch_extScan_deleteAllNode>:
{
1fff81e4:	14d1      	push      	r4, r15
    for (patch_extScan_list *entry = p_extScan; entry;) {
1fff81e6:	1066      	lrw      	r3, 0x1fffb8cc	// 1fff81fc <patch_extScan_deleteAllNode+0x18>
1fff81e8:	9380      	ld.w      	r4, (r3, 0x0)
1fff81ea:	3c40      	cmpnei      	r4, 0
1fff81ec:	0802      	bt      	0x1fff81f0	// 1fff81f0 <patch_extScan_deleteAllNode+0xc>
}
1fff81ee:	1491      	pop      	r4, r15
            patch_extScan_deleteNode(entry);
1fff81f0:	6c13      	mov      	r0, r4
1fff81f2:	e3ffffe7 	bsr      	0x1fff81c0	// 1fff81c0 <patch_extScan_deleteNode>
            entry = entry->next;
1fff81f6:	9482      	ld.w      	r4, (r4, 0x8)
1fff81f8:	07f9      	br      	0x1fff81ea	// 1fff81ea <patch_extScan_deleteAllNode+0x6>
1fff81fa:	0000      	bkpt
1fff81fc:	1fffb8cc 	.long	0x1fffb8cc

1fff8200 <patch_extScan_updateNode>:
{
1fff8200:	14d1      	push      	r4, r15
    for (patch_extScan_list *entry = p_extScan; entry;) {
1fff8202:	104e      	lrw      	r2, 0x1fffb8cc	// 1fff8238 <patch_extScan_updateNode+0x38>
1fff8204:	9260      	ld.w      	r3, (r2, 0x0)
1fff8206:	3b40      	cmpnei      	r3, 0
1fff8208:	0805      	bt      	0x1fff8212	// 1fff8212 <patch_extScan_updateNode+0x12>
    for (patch_extScan_list *entry = p_extScan; entry;) {
1fff820a:	9280      	ld.w      	r4, (r2, 0x0)
1fff820c:	3c40      	cmpnei      	r4, 0
1fff820e:	080c      	bt      	0x1fff8226	// 1fff8226 <patch_extScan_updateNode+0x26>
}
1fff8210:	1491      	pop      	r4, r15
            if (entry->remain_time > time) {
1fff8212:	9320      	ld.w      	r1, (r3, 0x0)
1fff8214:	6440      	cmphs      	r0, r1
1fff8216:	0805      	bt      	0x1fff8220	// 1fff8220 <patch_extScan_updateNode+0x20>
                entry->remain_time -= time;
1fff8218:	6042      	subu      	r1, r0
1fff821a:	b320      	st.w      	r1, (r3, 0x0)
            entry = entry->next;
1fff821c:	9362      	ld.w      	r3, (r3, 0x8)
1fff821e:	07f4      	br      	0x1fff8206	// 1fff8206 <patch_extScan_updateNode+0x6>
                entry->overflow = TRUE;
1fff8220:	3101      	movi      	r1, 1
1fff8222:	a326      	st.b      	r1, (r3, 0x6)
1fff8224:	07fc      	br      	0x1fff821c	// 1fff821c <patch_extScan_updateNode+0x1c>
            if (entry->overflow) {
1fff8226:	8466      	ld.b      	r3, (r4, 0x6)
1fff8228:	3b40      	cmpnei      	r3, 0
1fff822a:	0c04      	bf      	0x1fff8232	// 1fff8232 <patch_extScan_updateNode+0x32>
                patch_extScan_deleteNode(entry);    // right ?
1fff822c:	6c13      	mov      	r0, r4
1fff822e:	e3ffffc9 	bsr      	0x1fff81c0	// 1fff81c0 <patch_extScan_deleteNode>
            entry = entry->next;
1fff8232:	9482      	ld.w      	r4, (r4, 0x8)
1fff8234:	07ec      	br      	0x1fff820c	// 1fff820c <patch_extScan_updateNode+0xc>
1fff8236:	0000      	bkpt
1fff8238:	1fffb8cc 	.long	0x1fffb8cc

1fff823c <patch_extScan_addNode>:
{
1fff823c:	14d4      	push      	r4-r7, r15
    if (*curr == NULL) {
1fff823e:	1090      	lrw      	r4, 0x1fffb8cc	// 1fff827c <patch_extScan_addNode+0x40>
{
1fff8240:	6d43      	mov      	r5, r0
    if (*curr == NULL) {
1fff8242:	9460      	ld.w      	r3, (r4, 0x0)
{
1fff8244:	6dc7      	mov      	r7, r1
    if (*curr == NULL) {
1fff8246:	3b40      	cmpnei      	r3, 0
{
1fff8248:	6d8b      	mov      	r6, r2
    if (*curr == NULL) {
1fff824a:	0812      	bt      	0x1fff826e	// 1fff826e <patch_extScan_addNode+0x32>
        intsert = *curr = osal_mem_alloc(sizeof(patch_extScan_list));
1fff824c:	300c      	movi      	r0, 12
1fff824e:	e0001327 	bsr      	0x1fffa89c	// 1fffa89c <check_before_startup+0x1c4>
1fff8252:	b400      	st.w      	r0, (r4, 0x0)
    if (intsert != NULL) {
1fff8254:	3840      	cmpnei      	r0, 0
                intsert = osal_mem_alloc(sizeof(patch_extScan_list));
1fff8256:	6d03      	mov      	r4, r0
    if (intsert != NULL) {
1fff8258:	0c0a      	bf      	0x1fff826c	// 1fff826c <patch_extScan_addNode+0x30>
        osal_memset(intsert, 0, sizeof(patch_extScan_list));
1fff825a:	320c      	movi      	r2, 12
1fff825c:	3100      	movi      	r1, 0
1fff825e:	e0001271 	bsr      	0x1fffa740	// 1fffa740 <check_before_startup+0x68>
        intsert->next = NULL;
1fff8262:	3300      	movi      	r3, 0
        intsert->chan = chan;
1fff8264:	a4e4      	st.b      	r7, (r4, 0x4)
        intsert->phy = phy;
1fff8266:	a4c5      	st.b      	r6, (r4, 0x5)
        intsert->remain_time = time;
1fff8268:	b4a0      	st.w      	r5, (r4, 0x0)
        intsert->next = NULL;
1fff826a:	b462      	st.w      	r3, (r4, 0x8)
}
1fff826c:	1494      	pop      	r4-r7, r15
            if (entry->next == NULL) {
1fff826e:	9362      	ld.w      	r3, (r3, 0x8)
1fff8270:	3b40      	cmpnei      	r3, 0
1fff8272:	0bfe      	bt      	0x1fff826e	// 1fff826e <patch_extScan_addNode+0x32>
                intsert = osal_mem_alloc(sizeof(patch_extScan_list));
1fff8274:	300c      	movi      	r0, 12
1fff8276:	e0001313 	bsr      	0x1fffa89c	// 1fffa89c <check_before_startup+0x1c4>
1fff827a:	07ed      	br      	0x1fff8254	// 1fff8254 <patch_extScan_addNode+0x18>
1fff827c:	1fffb8cc 	.long	0x1fffb8cc

1fff8280 <ll_processBasicIRQ_secondaryAdvTRX0>:
}
#endif


uint8 ll_processBasicIRQ_secondaryAdvTRX0(uint32_t              irq_status)
{
1fff8280:	14d4      	push      	r4-r7, r15
1fff8282:	142b      	subi      	r14, r14, 44
1fff8284:	6d83      	mov      	r6, r0
    __ASM volatile("mfcr %0, psr" : "=r"(result));
1fff8286:	c0006023 	mfcr      	r3, cr<0, 0>
1fff828a:	b867      	st.w      	r3, (r14, 0x1c)
    __ASM volatile("psrclr ie");
1fff828c:	c0807020 	psrclr      	ie
    // 2021-02-23
    // bugfix for multi-role secondary advertising
    // bug-case : a device in advertising and receive another device's scan request
    uint8 adv_sch_flag = TRUE;
    // read packet
    packet_len = ll_hw_read_rfifo1((uint8_t *)(&(g_rx_adv_buf.rxheader)),
1fff8290:	0112      	lrw      	r0, 0x1fff17fc	// 1fff85c4 <ll_processBasicIRQ_secondaryAdvTRX0+0x344>
1fff8292:	1b0a      	addi      	r3, r14, 40
1fff8294:	1a09      	addi      	r2, r14, 36
1fff8296:	e42e0021 	addi      	r1, r14, 34
1fff829a:	e3ffeaf1 	bsr      	0x1fff587c	// 1fff587c <ll_hw_read_rfifo1>
1fff829e:	6d43      	mov      	r5, r0
                                   &pktLen,
                                   &pktFoot0,
                                   &pktFoot1);

    if (ll_hw_get_rfifo_depth() > 0) {
1fff82a0:	e0001526 	bsr      	0x1fffacec	// 1fffacec <check_before_startup+0x614>
1fff82a4:	3820      	cmplti      	r0, 1
1fff82a6:	0809      	bt      	0x1fff82b8	// 1fff82b8 <ll_processBasicIRQ_secondaryAdvTRX0+0x38>
        g_pmCounters.ll_rfifo_read_err++;
1fff82a8:	0157      	lrw      	r2, 0x1fff12e0	// 1fff85c8 <ll_processBasicIRQ_secondaryAdvTRX0+0x348>
        packet_len = 0;
1fff82aa:	3500      	movi      	r5, 0
        g_pmCounters.ll_rfifo_read_err++;
1fff82ac:	9279      	ld.w      	r3, (r2, 0x64)
1fff82ae:	2300      	addi      	r3, 1
1fff82b0:	b279      	st.w      	r3, (r2, 0x64)
        pktLen = 0;
1fff82b2:	3300      	movi      	r3, 0
1fff82b4:	dc6e1011 	st.h      	r3, (r14, 0x22)
    }

    // check receive pdu type
    pdu_type = g_rx_adv_buf.rxheader & PDU_TYPE_MASK;
1fff82b8:	017a      	lrw      	r3, 0x1fff17f8	// 1fff85cc <ll_processBasicIRQ_secondaryAdvTRX0+0x34c>
    txAdd    = (g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT;    // adv PDU header, bit 6: TxAdd, 0 - public, 1 - random

    if (packet_len > 0                       // any better checking rule for rx anything?
1fff82ba:	3d40      	cmpnei      	r5, 0
    pdu_type = g_rx_adv_buf.rxheader & PDU_TYPE_MASK;
1fff82bc:	8b82      	ld.h      	r4, (r3, 0x4)
1fff82be:	e444200f 	andi      	r2, r4, 15
    txAdd    = (g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT;    // adv PDU header, bit 6: TxAdd, 0 - public, 1 - random
1fff82c2:	5486      	asri      	r4, r4, 6
1fff82c4:	e4242001 	andi      	r1, r4, 1
1fff82c8:	01bd      	lrw      	r5, 0x1fff1528	// 1fff85d0 <ll_processBasicIRQ_secondaryAdvTRX0+0x350>
1fff82ca:	b820      	st.w      	r1, (r14, 0x0)
    if (packet_len > 0                       // any better checking rule for rx anything?
1fff82cc:	0cee      	bf      	0x1fff84a8	// 1fff84a8 <ll_processBasicIRQ_secondaryAdvTRX0+0x228>
        && (irq_status & LIRQ_COK)
1fff82ce:	e4c62400 	andi      	r6, r6, 1024
1fff82d2:	3e40      	cmpnei      	r6, 0
1fff82d4:	e840020f 	bf      	0x1fff86f2	// 1fff86f2 <ll_processBasicIRQ_secondaryAdvTRX0+0x472>
        && pdu_type == ADV_SCAN_REQ)
1fff82d8:	3a43      	cmpnei      	r2, 3
1fff82da:	e860020a 	bt      	0x1fff86ee	// 1fff86ee <ll_processBasicIRQ_secondaryAdvTRX0+0x46e>
//          && (llState == LL_STATE_ADV_UNDIRECTED
//              || llState == LL_STATE_ADV_SCAN))
    {
        // 1. scan req
        g_pmCounters.ll_recv_scan_req_cnt ++;
1fff82de:	02c4      	lrw      	r6, 0x1fff12e0	// 1fff85c8 <ll_processBasicIRQ_secondaryAdvTRX0+0x348>

        // check AdvA
        if (g_rx_adv_buf.data[6]  != adv_param.ownAddr[0]
1fff82e0:	832c      	ld.b      	r1, (r3, 0xc)
        g_pmCounters.ll_recv_scan_req_cnt ++;
1fff82e2:	9648      	ld.w      	r2, (r6, 0x20)
1fff82e4:	2200      	addi      	r2, 1
1fff82e6:	b648      	st.w      	r2, (r6, 0x20)
        if (g_rx_adv_buf.data[6]  != adv_param.ownAddr[0]
1fff82e8:	8547      	ld.b      	r2, (r5, 0x7)
1fff82ea:	6486      	cmpne      	r1, r2
1fff82ec:	e8600203 	bt      	0x1fff86f2	// 1fff86f2 <ll_processBasicIRQ_secondaryAdvTRX0+0x472>
            || g_rx_adv_buf.data[7]  != adv_param.ownAddr[1]
            || g_rx_adv_buf.data[8]  != adv_param.ownAddr[2]
1fff82f0:	9343      	ld.w      	r2, (r3, 0xc)
1fff82f2:	4248      	lsli      	r2, r2, 8
1fff82f4:	8d24      	ld.h      	r1, (r5, 0x8)
1fff82f6:	4a50      	lsri      	r2, r2, 16
1fff82f8:	6486      	cmpne      	r1, r2
1fff82fa:	09fc      	bt      	0x1fff86f2	// 1fff86f2 <ll_processBasicIRQ_secondaryAdvTRX0+0x472>
            || g_rx_adv_buf.data[9]  != adv_param.ownAddr[3]
1fff82fc:	832f      	ld.b      	r1, (r3, 0xf)
1fff82fe:	854a      	ld.b      	r2, (r5, 0xa)
1fff8300:	6486      	cmpne      	r1, r2
1fff8302:	09f8      	bt      	0x1fff86f2	// 1fff86f2 <ll_processBasicIRQ_secondaryAdvTRX0+0x472>
            || g_rx_adv_buf.data[10] != adv_param.ownAddr[4]
1fff8304:	8330      	ld.b      	r1, (r3, 0x10)
1fff8306:	854b      	ld.b      	r2, (r5, 0xb)
1fff8308:	6486      	cmpne      	r1, r2
1fff830a:	09f4      	bt      	0x1fff86f2	// 1fff86f2 <ll_processBasicIRQ_secondaryAdvTRX0+0x472>
            || g_rx_adv_buf.data[11] != adv_param.ownAddr[5]) {
1fff830c:	8331      	ld.b      	r1, (r3, 0x11)
1fff830e:	854c      	ld.b      	r2, (r5, 0xc)
1fff8310:	6486      	cmpne      	r1, r2
1fff8312:	09f0      	bt      	0x1fff86f2	// 1fff86f2 <ll_processBasicIRQ_secondaryAdvTRX0+0x472>
            uint8_t  rpaListIndex, bWlRlCheckOk;
            uint8_t *peerAddr = &g_rx_adv_buf.data[0];      // ScanA
            adv_sch_flag = FALSE;

            // === Resolving list checking
            if (txAdd == LL_DEV_ADDR_TYPE_RANDOM
1fff8314:	9840      	ld.w      	r2, (r14, 0x0)
1fff8316:	3a40      	cmpnei      	r2, 0
1fff8318:	0c32      	bf      	0x1fff837c	// 1fff837c <ll_processBasicIRQ_secondaryAdvTRX0+0xfc>
                && (g_rx_adv_buf.data[5] & RANDOM_ADDR_HDR) == PRIVATE_RESOLVE_ADDR_HDR) {
1fff831a:	834b      	ld.b      	r2, (r3, 0xb)
1fff831c:	e44220c0 	andi      	r2, r2, 192
1fff8320:	eb420040 	cmpnei      	r2, 64
1fff8324:	082c      	bt      	0x1fff837c	// 1fff837c <ll_processBasicIRQ_secondaryAdvTRX0+0xfc>
                bWlRlCheckOk = TRUE;

                // if ScanA is resolvable private address
                if (g_llRlEnable == TRUE) {
1fff8326:	0273      	lrw      	r3, 0x1fff0ddc	// 1fff85d4 <ll_processBasicIRQ_secondaryAdvTRX0+0x354>
1fff8328:	8360      	ld.b      	r3, (r3, 0x0)
1fff832a:	3b41      	cmpnei      	r3, 1
1fff832c:	0873      	bt      	0x1fff8412	// 1fff8412 <ll_processBasicIRQ_secondaryAdvTRX0+0x192>
                    bWlRlCheckOk = FALSE;
                    rpaListIndex = ll_getRPAListEntry(&g_rx_adv_buf.data[0]);
1fff832e:	0214      	lrw      	r0, 0x1fff17fe	// 1fff85d8 <ll_processBasicIRQ_secondaryAdvTRX0+0x358>
1fff8330:	e0001442 	bsr      	0x1fffabb4	// 1fffabb4 <check_before_startup+0x4dc>

                    if (rpaListIndex < LL_RESOLVINGLIST_ENTRY_NUM) {
1fff8334:	3807      	cmphsi      	r0, 8
1fff8336:	0870      	bt      	0x1fff8416	// 1fff8416 <ll_processBasicIRQ_secondaryAdvTRX0+0x196>
                        peerAddr = &g_llResolvinglist[rpaListIndex].peerAddr[0];
1fff8338:	312e      	movi      	r1, 46
1fff833a:	7c40      	mult      	r1, r0
                        bWlRlCheckOk = TRUE;
1fff833c:	9800      	ld.w      	r0, (r14, 0x0)
                        peerAddr = &g_llResolvinglist[rpaListIndex].peerAddr[0];
1fff833e:	0277      	lrw      	r3, 0x1fff0ff5	// 1fff85dc <ll_processBasicIRQ_secondaryAdvTRX0+0x35c>
1fff8340:	604c      	addu      	r1, r3
                    }
                }
            }

            // === check white list
            if ((pGlobal_config[LL_SWITCH] & LL_WHITELIST_ALLOW)
1fff8342:	02f7      	lrw      	r7, 0x1fffa670	// 1fff85e0 <ll_processBasicIRQ_secondaryAdvTRX0+0x360>
1fff8344:	9760      	ld.w      	r3, (r7, 0x0)
1fff8346:	936b      	ld.w      	r3, (r3, 0x2c)
1fff8348:	e4632008 	andi      	r3, r3, 8
1fff834c:	3b40      	cmpnei      	r3, 0
1fff834e:	0c6a      	bf      	0x1fff8422	// 1fff8422 <ll_processBasicIRQ_secondaryAdvTRX0+0x1a2>
                && (adv_param.wlPolicy  == LL_ADV_WL_POLICY_WL_SCAN_REQ
1fff8350:	856f      	ld.b      	r3, (r5, 0xf)
1fff8352:	e46320fd 	andi      	r3, r3, 253
1fff8356:	3b41      	cmpnei      	r3, 1
1fff8358:	0865      	bt      	0x1fff8422	// 1fff8422 <ll_processBasicIRQ_secondaryAdvTRX0+0x1a2>
                    || adv_param.wlPolicy  == LL_ADV_WL_POLICY_WL_ALL_REQ)
                && (bWlRlCheckOk == TRUE)) {
1fff835a:	3841      	cmpnei      	r0, 1
1fff835c:	0c60      	bf      	0x1fff841c	// 1fff841c <ll_processBasicIRQ_secondaryAdvTRX0+0x19c>
                // check white list
                bWlRlCheckOk = ll_isAddrInWhiteList(txAdd, peerAddr);
            }

            if (bWlRlCheckOk == FALSE) { // if not in white list, do nothing
                g_pmCounters.ll_filter_scan_req_cnt ++;
1fff835e:	966c      	ld.w      	r3, (r6, 0x30)
1fff8360:	2300      	addi      	r3, 1
1fff8362:	b66c      	st.w      	r3, (r6, 0x30)
            }
        }
    }

    // post ISR process
    if (!llWaitingIrq) {                    // bug fixed 2018-05-04, only clear IRQ status when no config new one
1fff8364:	027f      	lrw      	r3, 0x1fff0df8	// 1fff85e4 <ll_processBasicIRQ_secondaryAdvTRX0+0x364>
1fff8366:	9360      	ld.w      	r3, (r3, 0x0)
1fff8368:	3b40      	cmpnei      	r3, 0
1fff836a:	0803      	bt      	0x1fff8370	// 1fff8370 <ll_processBasicIRQ_secondaryAdvTRX0+0xf0>
        ll_hw_clr_irq();
1fff836c:	e0001256 	bsr      	0x1fffa818	// 1fffa818 <check_before_startup+0x140>
    __ASM volatile("mtcr %0, psr" : : "r"(psr));
1fff8370:	9867      	ld.w      	r3, (r14, 0x1c)
1fff8372:	c0036420 	mtcr      	r3, cr<0, 0>
    }

    HAL_EXIT_CRITICAL_SECTION();
    return TRUE;
}
1fff8376:	3001      	movi      	r0, 1
1fff8378:	140b      	addi      	r14, r14, 44
1fff837a:	1494      	pop      	r4-r7, r15
                    if (g_llResolvinglist[i].peerAddr[0] == g_rx_adv_buf.data[0]
1fff837c:	8346      	ld.b      	r2, (r3, 0x6)
                        && g_llResolvinglist[i].peerAddr[5] == g_rx_adv_buf.data[5]
1fff837e:	3000      	movi      	r0, 0
                    if (g_llResolvinglist[i].peerAddr[0] == g_rx_adv_buf.data[0]
1fff8380:	b841      	st.w      	r2, (r14, 0x4)
                        && g_llResolvinglist[i].peerAddr[1] == g_rx_adv_buf.data[1]
1fff8382:	8347      	ld.b      	r2, (r3, 0x7)
1fff8384:	312e      	movi      	r1, 46
1fff8386:	b842      	st.w      	r2, (r14, 0x8)
                        && g_llResolvinglist[i].peerAddr[2] == g_rx_adv_buf.data[2]
1fff8388:	8348      	ld.b      	r2, (r3, 0x8)
1fff838a:	b843      	st.w      	r2, (r14, 0xc)
                        && g_llResolvinglist[i].peerAddr[3] == g_rx_adv_buf.data[3]
1fff838c:	8349      	ld.b      	r2, (r3, 0x9)
1fff838e:	b844      	st.w      	r2, (r14, 0x10)
                        && g_llResolvinglist[i].peerAddr[4] == g_rx_adv_buf.data[4]
1fff8390:	834a      	ld.b      	r2, (r3, 0xa)
                        && g_llResolvinglist[i].peerAddr[5] == g_rx_adv_buf.data[5]
1fff8392:	836b      	ld.b      	r3, (r3, 0xb)
1fff8394:	b866      	st.w      	r3, (r14, 0x18)
                        && g_llResolvinglist[i].peerAddr[4] == g_rx_adv_buf.data[4]
1fff8396:	b845      	st.w      	r2, (r14, 0x14)
1fff8398:	036b      	lrw      	r3, 0x1fff0fd4	// 1fff85e8 <ll_processBasicIRQ_secondaryAdvTRX0+0x368>
1fff839a:	6c8f      	mov      	r2, r3
                    if (g_llResolvinglist[i].peerAddr[0] == g_rx_adv_buf.data[0]
1fff839c:	d8e30021 	ld.b      	r7, (r3, 0x21)
1fff83a0:	9881      	ld.w      	r4, (r14, 0x4)
1fff83a2:	651e      	cmpne      	r7, r4
1fff83a4:	0830      	bt      	0x1fff8404	// 1fff8404 <ll_processBasicIRQ_secondaryAdvTRX0+0x184>
                        && g_llResolvinglist[i].peerAddr[1] == g_rx_adv_buf.data[1]
1fff83a6:	d8e30022 	ld.b      	r7, (r3, 0x22)
1fff83aa:	9882      	ld.w      	r4, (r14, 0x8)
1fff83ac:	651e      	cmpne      	r7, r4
1fff83ae:	082b      	bt      	0x1fff8404	// 1fff8404 <ll_processBasicIRQ_secondaryAdvTRX0+0x184>
                        && g_llResolvinglist[i].peerAddr[2] == g_rx_adv_buf.data[2]
1fff83b0:	d8e30023 	ld.b      	r7, (r3, 0x23)
1fff83b4:	9883      	ld.w      	r4, (r14, 0xc)
1fff83b6:	651e      	cmpne      	r7, r4
1fff83b8:	0826      	bt      	0x1fff8404	// 1fff8404 <ll_processBasicIRQ_secondaryAdvTRX0+0x184>
                        && g_llResolvinglist[i].peerAddr[3] == g_rx_adv_buf.data[3]
1fff83ba:	d8e30024 	ld.b      	r7, (r3, 0x24)
1fff83be:	9884      	ld.w      	r4, (r14, 0x10)
1fff83c0:	651e      	cmpne      	r7, r4
1fff83c2:	0821      	bt      	0x1fff8404	// 1fff8404 <ll_processBasicIRQ_secondaryAdvTRX0+0x184>
                        && g_llResolvinglist[i].peerAddr[4] == g_rx_adv_buf.data[4]
1fff83c4:	d8e30025 	ld.b      	r7, (r3, 0x25)
1fff83c8:	9885      	ld.w      	r4, (r14, 0x14)
1fff83ca:	651e      	cmpne      	r7, r4
1fff83cc:	081c      	bt      	0x1fff8404	// 1fff8404 <ll_processBasicIRQ_secondaryAdvTRX0+0x184>
                        && g_llResolvinglist[i].peerAddr[5] == g_rx_adv_buf.data[5]
1fff83ce:	d8e30026 	ld.b      	r7, (r3, 0x26)
1fff83d2:	9886      	ld.w      	r4, (r14, 0x18)
1fff83d4:	651e      	cmpne      	r7, r4
1fff83d6:	0817      	bt      	0x1fff8404	// 1fff8404 <ll_processBasicIRQ_secondaryAdvTRX0+0x184>
                        && g_llResolvinglist[i].peerAddrType == txAdd) {
1fff83d8:	d8e30020 	ld.b      	r7, (r3, 0x20)
1fff83dc:	9880      	ld.w      	r4, (r14, 0x0)
1fff83de:	651e      	cmpne      	r7, r4
1fff83e0:	0812      	bt      	0x1fff8404	// 1fff8404 <ll_processBasicIRQ_secondaryAdvTRX0+0x184>
                        if (g_llResolvinglist[i].privacyMode == NETWORK_PRIVACY_MODE &&
1fff83e2:	332e      	movi      	r3, 46
1fff83e4:	7c0c      	mult      	r0, r3
1fff83e6:	6080      	addu      	r2, r0
1fff83e8:	d8620027 	ld.b      	r3, (r2, 0x27)
1fff83ec:	3b40      	cmpnei      	r3, 0
1fff83ee:	080f      	bt      	0x1fff840c	// 1fff840c <ll_processBasicIRQ_secondaryAdvTRX0+0x18c>
                            !ll_isIrkAllZero(g_llResolvinglist[i].peerIrk)) {
1fff83f0:	137f      	lrw      	r3, 0x1fff0fe4	// 1fff85ec <ll_processBasicIRQ_secondaryAdvTRX0+0x36c>
1fff83f2:	600c      	addu      	r0, r3
1fff83f4:	e000118e 	bsr      	0x1fffa710	// 1fffa710 <check_before_startup+0x38>
                        if (g_llResolvinglist[i].privacyMode == NETWORK_PRIVACY_MODE &&
1fff83f8:	3840      	cmpnei      	r0, 0
1fff83fa:	c4000500 	mvc      	r0
                    bWlRlCheckOk = FALSE;
1fff83fe:	7400      	zextb      	r0, r0
            uint8_t *peerAddr = &g_rx_adv_buf.data[0];      // ScanA
1fff8400:	1336      	lrw      	r1, 0x1fff17fe	// 1fff85d8 <ll_processBasicIRQ_secondaryAdvTRX0+0x358>
1fff8402:	07a0      	br      	0x1fff8342	// 1fff8342 <ll_processBasicIRQ_secondaryAdvTRX0+0xc2>
                for (int i = 0; i < LL_RESOLVINGLIST_ENTRY_NUM; i++) {
1fff8404:	2000      	addi      	r0, 1
1fff8406:	3848      	cmpnei      	r0, 8
1fff8408:	60c4      	addu      	r3, r1
1fff840a:	0bc9      	bt      	0x1fff839c	// 1fff839c <ll_processBasicIRQ_secondaryAdvTRX0+0x11c>
            uint8_t *peerAddr = &g_rx_adv_buf.data[0];      // ScanA
1fff840c:	1333      	lrw      	r1, 0x1fff17fe	// 1fff85d8 <ll_processBasicIRQ_secondaryAdvTRX0+0x358>
                bWlRlCheckOk = TRUE;
1fff840e:	3001      	movi      	r0, 1
1fff8410:	0799      	br      	0x1fff8342	// 1fff8342 <ll_processBasicIRQ_secondaryAdvTRX0+0xc2>
1fff8412:	9800      	ld.w      	r0, (r14, 0x0)
1fff8414:	07f6      	br      	0x1fff8400	// 1fff8400 <ll_processBasicIRQ_secondaryAdvTRX0+0x180>
            uint8_t *peerAddr = &g_rx_adv_buf.data[0];      // ScanA
1fff8416:	1331      	lrw      	r1, 0x1fff17fe	// 1fff85d8 <ll_processBasicIRQ_secondaryAdvTRX0+0x358>
                    bWlRlCheckOk = FALSE;
1fff8418:	3000      	movi      	r0, 0
1fff841a:	0794      	br      	0x1fff8342	// 1fff8342 <ll_processBasicIRQ_secondaryAdvTRX0+0xc2>
                bWlRlCheckOk = ll_isAddrInWhiteList(txAdd, peerAddr);
1fff841c:	9800      	ld.w      	r0, (r14, 0x0)
1fff841e:	e000118b 	bsr      	0x1fffa734	// 1fffa734 <check_before_startup+0x5c>
            if (bWlRlCheckOk == FALSE) { // if not in white list, do nothing
1fff8422:	3840      	cmpnei      	r0, 0
1fff8424:	0f9d      	bf      	0x1fff835e	// 1fff835e <ll_processBasicIRQ_secondaryAdvTRX0+0xde>
                g_pmCounters.ll_rx_peer_cnt++;
1fff8426:	9674      	ld.w      	r3, (r6, 0x50)
1fff8428:	2300      	addi      	r3, 1
1fff842a:	b674      	st.w      	r3, (r6, 0x50)
                if (LL_PLUS_ScanRequestFilterCBack) {
1fff842c:	1371      	lrw      	r3, 0x1fff0e24	// 1fff85f0 <ll_processBasicIRQ_secondaryAdvTRX0+0x370>
1fff842e:	9300      	ld.w      	r0, (r3, 0x0)
1fff8430:	3840      	cmpnei      	r0, 0
1fff8432:	0811      	bt      	0x1fff8454	// 1fff8454 <ll_processBasicIRQ_secondaryAdvTRX0+0x1d4>
                    ll_hw_set_stx();             // set LL HW as single Tx mode
1fff8434:	e0001168 	bsr      	0x1fffa704	// 1fffa704 <check_before_startup+0x2c>
                    g_same_rf_channel_flag = TRUE;
1fff8438:	138f      	lrw      	r4, 0x1fff0e2c	// 1fff85f4 <ll_processBasicIRQ_secondaryAdvTRX0+0x374>
1fff843a:	3301      	movi      	r3, 1
1fff843c:	a460      	st.b      	r3, (r4, 0x0)
                    T2 = read_current_fine_time();
1fff843e:	e000136d 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
                    delay = (T2 > ISR_entry_time) ? (T2 - ISR_entry_time) : (BASE_TIME_UNITS - ISR_entry_time + T2);
1fff8442:	136e      	lrw      	r3, 0x1fff0e1c	// 1fff85f8 <ll_processBasicIRQ_secondaryAdvTRX0+0x378>
1fff8444:	9360      	ld.w      	r3, (r3, 0x0)
1fff8446:	640c      	cmphs      	r3, r0
1fff8448:	0c0a      	bf      	0x1fff845c	// 1fff845c <ll_processBasicIRQ_secondaryAdvTRX0+0x1dc>
1fff844a:	600e      	subu      	r0, r3
1fff844c:	c6a05023 	bmaski      	r3, 22
1fff8450:	600c      	addu      	r0, r3
1fff8452:	0406      	br      	0x1fff845e	// 1fff845e <ll_processBasicIRQ_secondaryAdvTRX0+0x1de>
                    retScanRspFilter = LL_PLUS_ScanRequestFilterCBack();
1fff8454:	7bc1      	jsr      	r0
                if (retScanRspFilter) {
1fff8456:	3840      	cmpnei      	r0, 0
1fff8458:	0f86      	bf      	0x1fff8364	// 1fff8364 <ll_processBasicIRQ_secondaryAdvTRX0+0xe4>
1fff845a:	07ed      	br      	0x1fff8434	// 1fff8434 <ll_processBasicIRQ_secondaryAdvTRX0+0x1b4>
                    delay = (T2 > ISR_entry_time) ? (T2 - ISR_entry_time) : (BASE_TIME_UNITS - ISR_entry_time + T2);
1fff845c:	600e      	subu      	r0, r3
                    calibra_time = pGlobal_config[SCAN_RSP_DELAY];            // consider rx_done to ISR time, SW delay after read_current_fine_time(), func read_current_fine_time() delay ...
1fff845e:	9760      	ld.w      	r3, (r7, 0x0)
                    ll_hw_set_trx_settle(delay,                               // set BB delay, about 80us in 16MHz HCLK
1fff8460:	d8230040 	ld.b      	r1, (r3, 0x40)
1fff8464:	d8430044 	ld.b      	r2, (r3, 0x44)
                    delay = 118 - delay - calibra_time;                       // IFS = 150us, Tx tail -> Rx done time: about 32us
1fff8468:	93a1      	ld.w      	r5, (r3, 0x4)
1fff846a:	3376      	movi      	r3, 118
1fff846c:	60d6      	subu      	r3, r5
1fff846e:	5b01      	subu      	r0, r3, r0
                    ll_hw_set_trx_settle(delay,                               // set BB delay, about 80us in 16MHz HCLK
1fff8470:	7400      	zextb      	r0, r0
1fff8472:	e0001467 	bsr      	0x1fffad40	// 1fffad40 <check_before_startup+0x668>
                    ll_hw_go();
1fff8476:	e000136f 	bsr      	0x1fffab54	// 1fffab54 <check_before_startup+0x47c>
                    llWaitingIrq = TRUE;
1fff847a:	3201      	movi      	r2, 1
1fff847c:	127a      	lrw      	r3, 0x1fff0df8	// 1fff85e4 <ll_processBasicIRQ_secondaryAdvTRX0+0x364>
1fff847e:	b340      	st.w      	r2, (r3, 0x0)
                    g_same_rf_channel_flag = FALSE;
1fff8480:	3300      	movi      	r3, 0
1fff8482:	a460      	st.b      	r3, (r4, 0x0)
                    ll_hw_rst_rfifo();
1fff8484:	e00012d2 	bsr      	0x1fffaa28	// 1fffaa28 <check_before_startup+0x350>
                    ll_hw_rst_tfifo();
1fff8488:	e000140e 	bsr      	0x1fffaca4	// 1fffaca4 <check_before_startup+0x5cc>
                                      ((tx_scanRsp_desc.txheader & 0xff00) >> 8) + 2);   // payload length + header length(2)
1fff848c:	121c      	lrw      	r0, 0x1fff15e0	// 1fff85fc <ll_processBasicIRQ_secondaryAdvTRX0+0x37c>
                    ll_hw_write_tfifo((uint8 *) & (tx_scanRsp_desc.txheader),
1fff848e:	2003      	addi      	r0, 4
                                      ((tx_scanRsp_desc.txheader & 0xff00) >> 8) + 2);   // payload length + header length(2)
1fff8490:	8820      	ld.h      	r1, (r0, 0x0)
1fff8492:	4928      	lsri      	r1, r1, 8
                    ll_hw_write_tfifo((uint8 *) & (tx_scanRsp_desc.txheader),
1fff8494:	2101      	addi      	r1, 2
1fff8496:	e0001125 	bsr      	0x1fffa6e0	// 1fffa6e0 <check_before_startup+0x8>
                    ll_debug_output(DEBUG_LL_HW_SET_STX);
1fff849a:	300e      	movi      	r0, 14
1fff849c:	e0001326 	bsr      	0x1fffaae8	// 1fffaae8 <check_before_startup+0x410>
                    g_pmCounters.ll_send_scan_rsp_cnt ++;
1fff84a0:	9669      	ld.w      	r3, (r6, 0x24)
1fff84a2:	2300      	addi      	r3, 1
1fff84a4:	b669      	st.w      	r3, (r6, 0x24)
1fff84a6:	075f      	br      	0x1fff8364	// 1fff8364 <ll_processBasicIRQ_secondaryAdvTRX0+0xe4>
    } else if (pdu_type == ADV_CONN_REQ
1fff84a8:	3a45      	cmpnei      	r2, 5
1fff84aa:	0924      	bt      	0x1fff86f2	// 1fff86f2 <ll_processBasicIRQ_secondaryAdvTRX0+0x472>
               && (irq_status & LIRQ_COK))
1fff84ac:	e4c62400 	andi      	r6, r6, 1024
1fff84b0:	3e40      	cmpnei      	r6, 0
1fff84b2:	0d20      	bf      	0x1fff86f2	// 1fff86f2 <ll_processBasicIRQ_secondaryAdvTRX0+0x472>
        g_pmCounters.ll_recv_conn_req_cnt ++;
1fff84b4:	12c5      	lrw      	r6, 0x1fff12e0	// 1fff85c8 <ll_processBasicIRQ_secondaryAdvTRX0+0x348>
        if (g_rx_adv_buf.data[6]  != adv_param.ownAddr[0]
1fff84b6:	832c      	ld.b      	r1, (r3, 0xc)
        g_pmCounters.ll_recv_conn_req_cnt ++;
1fff84b8:	964a      	ld.w      	r2, (r6, 0x28)
1fff84ba:	2200      	addi      	r2, 1
1fff84bc:	b64a      	st.w      	r2, (r6, 0x28)
        if (g_rx_adv_buf.data[6]  != adv_param.ownAddr[0]
1fff84be:	8547      	ld.b      	r2, (r5, 0x7)
1fff84c0:	6486      	cmpne      	r1, r2
1fff84c2:	0918      	bt      	0x1fff86f2	// 1fff86f2 <ll_processBasicIRQ_secondaryAdvTRX0+0x472>
            || g_rx_adv_buf.data[8]  != adv_param.ownAddr[2]
1fff84c4:	9343      	ld.w      	r2, (r3, 0xc)
1fff84c6:	4248      	lsli      	r2, r2, 8
1fff84c8:	8d24      	ld.h      	r1, (r5, 0x8)
1fff84ca:	4a50      	lsri      	r2, r2, 16
1fff84cc:	6486      	cmpne      	r1, r2
1fff84ce:	0912      	bt      	0x1fff86f2	// 1fff86f2 <ll_processBasicIRQ_secondaryAdvTRX0+0x472>
            || g_rx_adv_buf.data[9]  != adv_param.ownAddr[3]
1fff84d0:	832f      	ld.b      	r1, (r3, 0xf)
1fff84d2:	854a      	ld.b      	r2, (r5, 0xa)
1fff84d4:	6486      	cmpne      	r1, r2
1fff84d6:	090e      	bt      	0x1fff86f2	// 1fff86f2 <ll_processBasicIRQ_secondaryAdvTRX0+0x472>
            || g_rx_adv_buf.data[10] != adv_param.ownAddr[4]
1fff84d8:	8330      	ld.b      	r1, (r3, 0x10)
1fff84da:	854b      	ld.b      	r2, (r5, 0xb)
1fff84dc:	6486      	cmpne      	r1, r2
1fff84de:	090a      	bt      	0x1fff86f2	// 1fff86f2 <ll_processBasicIRQ_secondaryAdvTRX0+0x472>
            || g_rx_adv_buf.data[11] != adv_param.ownAddr[5]) {
1fff84e0:	8331      	ld.b      	r1, (r3, 0x11)
1fff84e2:	854c      	ld.b      	r2, (r5, 0xc)
1fff84e4:	6486      	cmpne      	r1, r2
1fff84e6:	0906      	bt      	0x1fff86f2	// 1fff86f2 <ll_processBasicIRQ_secondaryAdvTRX0+0x472>
            if (txAdd == LL_DEV_ADDR_TYPE_RANDOM   &&
1fff84e8:	9840      	ld.w      	r2, (r14, 0x0)
1fff84ea:	3a40      	cmpnei      	r2, 0
1fff84ec:	0c5a      	bf      	0x1fff85a0	// 1fff85a0 <ll_processBasicIRQ_secondaryAdvTRX0+0x320>
1fff84ee:	834b      	ld.b      	r2, (r3, 0xb)
1fff84f0:	e44220c0 	andi      	r2, r2, 192
1fff84f4:	eb420040 	cmpnei      	r2, 64
1fff84f8:	0854      	bt      	0x1fff85a0	// 1fff85a0 <ll_processBasicIRQ_secondaryAdvTRX0+0x320>
                if (g_llRlEnable == TRUE) {
1fff84fa:	1177      	lrw      	r3, 0x1fff0ddc	// 1fff85d4 <ll_processBasicIRQ_secondaryAdvTRX0+0x354>
1fff84fc:	8360      	ld.b      	r3, (r3, 0x0)
1fff84fe:	3b41      	cmpnei      	r3, 1
1fff8500:	08c4      	bt      	0x1fff8688	// 1fff8688 <ll_processBasicIRQ_secondaryAdvTRX0+0x408>
                    rpaListIndex = ll_getRPAListEntry(&g_rx_adv_buf.data[0]);
1fff8502:	1116      	lrw      	r0, 0x1fff17fe	// 1fff85d8 <ll_processBasicIRQ_secondaryAdvTRX0+0x358>
1fff8504:	e0001358 	bsr      	0x1fffabb4	// 1fffabb4 <check_before_startup+0x4dc>
                    if (rpaListIndex < LL_RESOLVINGLIST_ENTRY_NUM) {
1fff8508:	3807      	cmphsi      	r0, 8
1fff850a:	08c1      	bt      	0x1fff868c	// 1fff868c <ll_processBasicIRQ_secondaryAdvTRX0+0x40c>
                        peerAddr = &g_llResolvinglist[rpaListIndex].peerAddr[0];
1fff850c:	332e      	movi      	r3, 46
1fff850e:	7c0c      	mult      	r0, r3
                        g_currentPeerAddrType = g_llResolvinglist[rpaListIndex].peerAddrType + 2;
1fff8510:	115c      	lrw      	r2, 0x1fff191a	// 1fff8600 <ll_processBasicIRQ_secondaryAdvTRX0+0x380>
1fff8512:	117d      	lrw      	r3, 0x1fff0ff4	// 1fff8604 <ll_processBasicIRQ_secondaryAdvTRX0+0x384>
                        peerAddr = &g_llResolvinglist[rpaListIndex].peerAddr[0];
1fff8514:	11f2      	lrw      	r7, 0x1fff0ff5	// 1fff85dc <ll_processBasicIRQ_secondaryAdvTRX0+0x35c>
1fff8516:	61c0      	addu      	r7, r0
                        g_currentPeerAddrType = g_llResolvinglist[rpaListIndex].peerAddrType + 2;
1fff8518:	600c      	addu      	r0, r3
1fff851a:	8060      	ld.b      	r3, (r0, 0x0)
1fff851c:	2301      	addi      	r3, 2
1fff851e:	a260      	st.b      	r3, (r2, 0x0)
                        osal_memcpy(&g_currentPeerRpa[0],  &g_rx_adv_buf.data[0], 6);    // save latest peer RPA
1fff8520:	112e      	lrw      	r1, 0x1fff17fe	// 1fff85d8 <ll_processBasicIRQ_secondaryAdvTRX0+0x358>
1fff8522:	3206      	movi      	r2, 6
1fff8524:	1119      	lrw      	r0, 0x1fff15d7	// 1fff8608 <ll_processBasicIRQ_secondaryAdvTRX0+0x388>
1fff8526:	e0001335 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
                        bWlRlCheckOk = TRUE;
1fff852a:	9800      	ld.w      	r0, (r14, 0x0)
            if ((pGlobal_config[LL_SWITCH] & LL_WHITELIST_ALLOW)
1fff852c:	116d      	lrw      	r3, 0x1fffa670	// 1fff85e0 <ll_processBasicIRQ_secondaryAdvTRX0+0x360>
1fff852e:	9360      	ld.w      	r3, (r3, 0x0)
1fff8530:	936b      	ld.w      	r3, (r3, 0x2c)
1fff8532:	e4632008 	andi      	r3, r3, 8
1fff8536:	3b40      	cmpnei      	r3, 0
1fff8538:	1175      	lrw      	r3, 0x1fff117d	// 1fff860c <ll_processBasicIRQ_secondaryAdvTRX0+0x38c>
1fff853a:	0c11      	bf      	0x1fff855c	// 1fff855c <ll_processBasicIRQ_secondaryAdvTRX0+0x2dc>
                && (llState == LL_STATE_ADV_UNDIRECTED)
1fff853c:	8340      	ld.b      	r2, (r3, 0x0)
1fff853e:	3a41      	cmpnei      	r2, 1
1fff8540:	080e      	bt      	0x1fff855c	// 1fff855c <ll_processBasicIRQ_secondaryAdvTRX0+0x2dc>
                    || adv_param.wlPolicy  == LL_ADV_WL_POLICY_WL_ALL_REQ)
1fff8542:	854f      	ld.b      	r2, (r5, 0xf)
1fff8544:	2a01      	subi      	r2, 2
                && (adv_param.wlPolicy   == LL_ADV_WL_POLICY_WL_CONNECT_REQ
1fff8546:	7488      	zextb      	r2, r2
1fff8548:	3a01      	cmphsi      	r2, 2
1fff854a:	0809      	bt      	0x1fff855c	// 1fff855c <ll_processBasicIRQ_secondaryAdvTRX0+0x2dc>
                && (bWlRlCheckOk == TRUE)) {
1fff854c:	3841      	cmpnei      	r0, 1
1fff854e:	0807      	bt      	0x1fff855c	// 1fff855c <ll_processBasicIRQ_secondaryAdvTRX0+0x2dc>
                bWlRlCheckOk = ll_isAddrInWhiteList(txAdd, peerAddr);
1fff8550:	6c5f      	mov      	r1, r7
1fff8552:	9800      	ld.w      	r0, (r14, 0x0)
1fff8554:	6d0f      	mov      	r4, r3
1fff8556:	e00010ef 	bsr      	0x1fffa734	// 1fffa734 <check_before_startup+0x5c>
1fff855a:	6cd3      	mov      	r3, r4
            if (llState == LL_STATE_ADV_DIRECTED) {
1fff855c:	8360      	ld.b      	r3, (r3, 0x0)
1fff855e:	3b42      	cmpnei      	r3, 2
1fff8560:	081a      	bt      	0x1fff8594	// 1fff8594 <ll_processBasicIRQ_secondaryAdvTRX0+0x314>
                    peerAddr[0]  != peerInfo.peerAddr[0]
1fff8562:	116c      	lrw      	r3, 0x1fff11ba	// 1fff8610 <ll_processBasicIRQ_secondaryAdvTRX0+0x390>
                if (//txAdd         != peerInfo.peerAddrType    // for (extended) set adv param, peer addr type could only be 0x0 or 0x01
1fff8564:	8720      	ld.b      	r1, (r7, 0x0)
1fff8566:	8341      	ld.b      	r2, (r3, 0x1)
1fff8568:	6486      	cmpne      	r1, r2
1fff856a:	0817      	bt      	0x1fff8598	// 1fff8598 <ll_processBasicIRQ_secondaryAdvTRX0+0x318>
                    || peerAddr[1]  != peerInfo.peerAddr[1]
1fff856c:	8721      	ld.b      	r1, (r7, 0x1)
1fff856e:	8342      	ld.b      	r2, (r3, 0x2)
1fff8570:	6486      	cmpne      	r1, r2
1fff8572:	0813      	bt      	0x1fff8598	// 1fff8598 <ll_processBasicIRQ_secondaryAdvTRX0+0x318>
                    || peerAddr[2]  != peerInfo.peerAddr[2]
1fff8574:	8722      	ld.b      	r1, (r7, 0x2)
1fff8576:	8343      	ld.b      	r2, (r3, 0x3)
1fff8578:	6486      	cmpne      	r1, r2
1fff857a:	080f      	bt      	0x1fff8598	// 1fff8598 <ll_processBasicIRQ_secondaryAdvTRX0+0x318>
                    || peerAddr[3]  != peerInfo.peerAddr[3]
1fff857c:	8723      	ld.b      	r1, (r7, 0x3)
1fff857e:	8344      	ld.b      	r2, (r3, 0x4)
1fff8580:	6486      	cmpne      	r1, r2
1fff8582:	080b      	bt      	0x1fff8598	// 1fff8598 <ll_processBasicIRQ_secondaryAdvTRX0+0x318>
                    || peerAddr[4]  != peerInfo.peerAddr[4]
1fff8584:	8724      	ld.b      	r1, (r7, 0x4)
1fff8586:	8345      	ld.b      	r2, (r3, 0x5)
1fff8588:	6486      	cmpne      	r1, r2
1fff858a:	0807      	bt      	0x1fff8598	// 1fff8598 <ll_processBasicIRQ_secondaryAdvTRX0+0x318>
                    || peerAddr[5]  != peerInfo.peerAddr[5]) {
1fff858c:	8745      	ld.b      	r2, (r7, 0x5)
1fff858e:	8366      	ld.b      	r3, (r3, 0x6)
1fff8590:	64ca      	cmpne      	r2, r3
1fff8592:	0803      	bt      	0x1fff8598	// 1fff8598 <ll_processBasicIRQ_secondaryAdvTRX0+0x318>
            if (bWlRlCheckOk == FALSE) { // if not in white list, do nothing
1fff8594:	3840      	cmpnei      	r0, 0
1fff8596:	087d      	bt      	0x1fff8690	// 1fff8690 <ll_processBasicIRQ_secondaryAdvTRX0+0x410>
                g_pmCounters.ll_filter_conn_req_cnt ++;
1fff8598:	966d      	ld.w      	r3, (r6, 0x34)
1fff859a:	2300      	addi      	r3, 1
1fff859c:	b66d      	st.w      	r3, (r6, 0x34)
1fff859e:	06e3      	br      	0x1fff8364	// 1fff8364 <ll_processBasicIRQ_secondaryAdvTRX0+0xe4>
                    if (g_llResolvinglist[i].peerAddr[0] == g_rx_adv_buf.data[0]
1fff85a0:	8346      	ld.b      	r2, (r3, 0x6)
                        && g_llResolvinglist[i].peerAddr[5] == g_rx_adv_buf.data[5]
1fff85a2:	3000      	movi      	r0, 0
                    if (g_llResolvinglist[i].peerAddr[0] == g_rx_adv_buf.data[0]
1fff85a4:	b841      	st.w      	r2, (r14, 0x4)
                        && g_llResolvinglist[i].peerAddr[1] == g_rx_adv_buf.data[1]
1fff85a6:	8347      	ld.b      	r2, (r3, 0x7)
1fff85a8:	312e      	movi      	r1, 46
1fff85aa:	b842      	st.w      	r2, (r14, 0x8)
                        && g_llResolvinglist[i].peerAddr[2] == g_rx_adv_buf.data[2]
1fff85ac:	8348      	ld.b      	r2, (r3, 0x8)
1fff85ae:	b843      	st.w      	r2, (r14, 0xc)
                        && g_llResolvinglist[i].peerAddr[3] == g_rx_adv_buf.data[3]
1fff85b0:	8349      	ld.b      	r2, (r3, 0x9)
1fff85b2:	b844      	st.w      	r2, (r14, 0x10)
                        && g_llResolvinglist[i].peerAddr[4] == g_rx_adv_buf.data[4]
1fff85b4:	834a      	ld.b      	r2, (r3, 0xa)
                        && g_llResolvinglist[i].peerAddr[5] == g_rx_adv_buf.data[5]
1fff85b6:	836b      	ld.b      	r3, (r3, 0xb)
1fff85b8:	b866      	st.w      	r3, (r14, 0x18)
                        && g_llResolvinglist[i].peerAddr[4] == g_rx_adv_buf.data[4]
1fff85ba:	b845      	st.w      	r2, (r14, 0x14)
1fff85bc:	106b      	lrw      	r3, 0x1fff0fd4	// 1fff85e8 <ll_processBasicIRQ_secondaryAdvTRX0+0x368>
1fff85be:	6c8f      	mov      	r2, r3
1fff85c0:	042a      	br      	0x1fff8614	// 1fff8614 <ll_processBasicIRQ_secondaryAdvTRX0+0x394>
1fff85c2:	0000      	bkpt
1fff85c4:	1fff17fc 	.long	0x1fff17fc
1fff85c8:	1fff12e0 	.long	0x1fff12e0
1fff85cc:	1fff17f8 	.long	0x1fff17f8
1fff85d0:	1fff1528 	.long	0x1fff1528
1fff85d4:	1fff0ddc 	.long	0x1fff0ddc
1fff85d8:	1fff17fe 	.long	0x1fff17fe
1fff85dc:	1fff0ff5 	.long	0x1fff0ff5
1fff85e0:	1fffa670 	.long	0x1fffa670
1fff85e4:	1fff0df8 	.long	0x1fff0df8
1fff85e8:	1fff0fd4 	.long	0x1fff0fd4
1fff85ec:	1fff0fe4 	.long	0x1fff0fe4
1fff85f0:	1fff0e24 	.long	0x1fff0e24
1fff85f4:	1fff0e2c 	.long	0x1fff0e2c
1fff85f8:	1fff0e1c 	.long	0x1fff0e1c
1fff85fc:	1fff15e0 	.long	0x1fff15e0
1fff8600:	1fff191a 	.long	0x1fff191a
1fff8604:	1fff0ff4 	.long	0x1fff0ff4
1fff8608:	1fff15d7 	.long	0x1fff15d7
1fff860c:	1fff117d 	.long	0x1fff117d
1fff8610:	1fff11ba 	.long	0x1fff11ba
                    if (g_llResolvinglist[i].peerAddr[0] == g_rx_adv_buf.data[0]
1fff8614:	d8e30021 	ld.b      	r7, (r3, 0x21)
1fff8618:	9881      	ld.w      	r4, (r14, 0x4)
1fff861a:	651e      	cmpne      	r7, r4
1fff861c:	0830      	bt      	0x1fff867c	// 1fff867c <ll_processBasicIRQ_secondaryAdvTRX0+0x3fc>
                        && g_llResolvinglist[i].peerAddr[1] == g_rx_adv_buf.data[1]
1fff861e:	d8e30022 	ld.b      	r7, (r3, 0x22)
1fff8622:	9882      	ld.w      	r4, (r14, 0x8)
1fff8624:	651e      	cmpne      	r7, r4
1fff8626:	082b      	bt      	0x1fff867c	// 1fff867c <ll_processBasicIRQ_secondaryAdvTRX0+0x3fc>
                        && g_llResolvinglist[i].peerAddr[2] == g_rx_adv_buf.data[2]
1fff8628:	d8e30023 	ld.b      	r7, (r3, 0x23)
1fff862c:	9883      	ld.w      	r4, (r14, 0xc)
1fff862e:	651e      	cmpne      	r7, r4
1fff8630:	0826      	bt      	0x1fff867c	// 1fff867c <ll_processBasicIRQ_secondaryAdvTRX0+0x3fc>
                        && g_llResolvinglist[i].peerAddr[3] == g_rx_adv_buf.data[3]
1fff8632:	d8e30024 	ld.b      	r7, (r3, 0x24)
1fff8636:	9884      	ld.w      	r4, (r14, 0x10)
1fff8638:	651e      	cmpne      	r7, r4
1fff863a:	0821      	bt      	0x1fff867c	// 1fff867c <ll_processBasicIRQ_secondaryAdvTRX0+0x3fc>
                        && g_llResolvinglist[i].peerAddr[4] == g_rx_adv_buf.data[4]
1fff863c:	d8e30025 	ld.b      	r7, (r3, 0x25)
1fff8640:	9885      	ld.w      	r4, (r14, 0x14)
1fff8642:	651e      	cmpne      	r7, r4
1fff8644:	081c      	bt      	0x1fff867c	// 1fff867c <ll_processBasicIRQ_secondaryAdvTRX0+0x3fc>
                        && g_llResolvinglist[i].peerAddr[5] == g_rx_adv_buf.data[5]
1fff8646:	d8e30026 	ld.b      	r7, (r3, 0x26)
1fff864a:	9886      	ld.w      	r4, (r14, 0x18)
1fff864c:	651e      	cmpne      	r7, r4
1fff864e:	0817      	bt      	0x1fff867c	// 1fff867c <ll_processBasicIRQ_secondaryAdvTRX0+0x3fc>
                        && g_llResolvinglist[i].peerAddrType == txAdd) {
1fff8650:	d8e30020 	ld.b      	r7, (r3, 0x20)
1fff8654:	9880      	ld.w      	r4, (r14, 0x0)
1fff8656:	651e      	cmpne      	r7, r4
1fff8658:	0812      	bt      	0x1fff867c	// 1fff867c <ll_processBasicIRQ_secondaryAdvTRX0+0x3fc>
                        if (g_llResolvinglist[i].privacyMode == NETWORK_PRIVACY_MODE &&
1fff865a:	332e      	movi      	r3, 46
1fff865c:	7c0c      	mult      	r0, r3
1fff865e:	6080      	addu      	r2, r0
1fff8660:	d8620027 	ld.b      	r3, (r2, 0x27)
1fff8664:	3b40      	cmpnei      	r3, 0
1fff8666:	080f      	bt      	0x1fff8684	// 1fff8684 <ll_processBasicIRQ_secondaryAdvTRX0+0x404>
                            !ll_isIrkAllZero(g_llResolvinglist[i].peerIrk)) {
1fff8668:	1165      	lrw      	r3, 0x1fff0fe4	// 1fff86fc <ll_processBasicIRQ_secondaryAdvTRX0+0x47c>
1fff866a:	600c      	addu      	r0, r3
1fff866c:	e0001052 	bsr      	0x1fffa710	// 1fffa710 <check_before_startup+0x38>
                        if (g_llResolvinglist[i].privacyMode == NETWORK_PRIVACY_MODE &&
1fff8670:	3840      	cmpnei      	r0, 0
1fff8672:	c4000500 	mvc      	r0
                    bWlRlCheckOk = FALSE;
1fff8676:	7400      	zextb      	r0, r0
            peerAddr = &g_rx_adv_buf.data[0];        // initA
1fff8678:	11e2      	lrw      	r7, 0x1fff17fe	// 1fff8700 <ll_processBasicIRQ_secondaryAdvTRX0+0x480>
1fff867a:	0759      	br      	0x1fff852c	// 1fff852c <ll_processBasicIRQ_secondaryAdvTRX0+0x2ac>
                for (int i = 0; i < LL_RESOLVINGLIST_ENTRY_NUM; i++) {
1fff867c:	2000      	addi      	r0, 1
1fff867e:	3848      	cmpnei      	r0, 8
1fff8680:	60c4      	addu      	r3, r1
1fff8682:	0bc9      	bt      	0x1fff8614	// 1fff8614 <ll_processBasicIRQ_secondaryAdvTRX0+0x394>
                bWlRlCheckOk = TRUE;
1fff8684:	3001      	movi      	r0, 1
1fff8686:	07f9      	br      	0x1fff8678	// 1fff8678 <ll_processBasicIRQ_secondaryAdvTRX0+0x3f8>
1fff8688:	9800      	ld.w      	r0, (r14, 0x0)
1fff868a:	07f7      	br      	0x1fff8678	// 1fff8678 <ll_processBasicIRQ_secondaryAdvTRX0+0x3f8>
                    bWlRlCheckOk = FALSE;
1fff868c:	3000      	movi      	r0, 0
1fff868e:	07f5      	br      	0x1fff8678	// 1fff8678 <ll_processBasicIRQ_secondaryAdvTRX0+0x3f8>
                g_pmCounters.ll_rx_peer_cnt++;
1fff8690:	9674      	ld.w      	r3, (r6, 0x50)
1fff8692:	2300      	addi      	r3, 1
1fff8694:	b674      	st.w      	r3, (r6, 0x50)
                osal_memcpy(peerInfo.peerAddr, &peerAddr[0], 6);
1fff8696:	3206      	movi      	r2, 6
                peerInfo.peerAddrType = txAdd;    // adv PDU header, bit 6: TxAdd, 0 - public, 1 - random
1fff8698:	d86e0000 	ld.b      	r3, (r14, 0x0)
1fff869c:	101a      	lrw      	r0, 0x1fff11ba	// 1fff8704 <ll_processBasicIRQ_secondaryAdvTRX0+0x484>
                osal_memcpy(peerInfo.peerAddr, &peerAddr[0], 6);
1fff869e:	6c5f      	mov      	r1, r7
                peerInfo.peerAddrType = txAdd;    // adv PDU header, bit 6: TxAdd, 0 - public, 1 - random
1fff86a0:	a060      	st.b      	r3, (r0, 0x0)
                osal_memcpy(peerInfo.peerAddr, &peerAddr[0], 6);
1fff86a2:	2000      	addi      	r0, 1
1fff86a4:	e0001276 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
                move_to_slave_function();    // move to slave role for connection state
1fff86a8:	e0001394 	bsr      	0x1fffadd0	// 1fffadd0 <check_before_startup+0x6f8>
1fff86ac:	065c      	br      	0x1fff8364	// 1fff8364 <ll_processBasicIRQ_secondaryAdvTRX0+0xe4>
            i ++;    // get the 1st adv channel
1fff86ae:	2300      	addi      	r3, 1
1fff86b0:	74cc      	zextb      	r3, r3
        while (!(adv_param.advChanMap & (1 << i))) {
1fff86b2:	c4604082 	asr      	r2, r0, r3
1fff86b6:	6884      	and      	r2, r1
1fff86b8:	3a40      	cmpnei      	r2, 0
1fff86ba:	0ffa      	bf      	0x1fff86ae	// 1fff86ae <ll_processBasicIRQ_secondaryAdvTRX0+0x42e>
        if (adv_param.advNextChan != (LL_ADV_CHAN_FIRST + i)) {         // not finish adv the last channel, continue adv
1fff86bc:	8554      	ld.b      	r2, (r5, 0x14)
1fff86be:	2324      	addi      	r3, 37
1fff86c0:	64ca      	cmpne      	r2, r3
1fff86c2:	0c04      	bf      	0x1fff86ca	// 1fff86ca <ll_processBasicIRQ_secondaryAdvTRX0+0x44a>
            llSetupSecAdvEvt();
1fff86c4:	e0001344 	bsr      	0x1fffad4c	// 1fffad4c <check_before_startup+0x674>
1fff86c8:	064e      	br      	0x1fff8364	// 1fff8364 <ll_processBasicIRQ_secondaryAdvTRX0+0xe4>
            if (llSecondaryState == LL_SEC_STATE_IDLE_PENDING) {       // advertise last channel and transiting to IDLE
1fff86ca:	1070      	lrw      	r3, 0x1fff1184	// 1fff8708 <ll_processBasicIRQ_secondaryAdvTRX0+0x488>
1fff86cc:	8340      	ld.b      	r2, (r3, 0x0)
1fff86ce:	3a45      	cmpnei      	r2, 5
1fff86d0:	0804      	bt      	0x1fff86d8	// 1fff86d8 <ll_processBasicIRQ_secondaryAdvTRX0+0x458>
                llSecondaryState = LL_SEC_STATE_IDLE;
1fff86d2:	3200      	movi      	r2, 0
1fff86d4:	a340      	st.b      	r2, (r3, 0x0)
1fff86d6:	0647      	br      	0x1fff8364	// 1fff8364 <ll_processBasicIRQ_secondaryAdvTRX0+0xe4>
                osal_start_timerEx(LL_TaskID, LL_EVT_SECONDARY_ADV, (adv_param.advInterval * 5) >> 3);    // * 625 / 1000
1fff86d8:	8d61      	ld.h      	r3, (r5, 0x2)
1fff86da:	4342      	lsli      	r2, r3, 2
1fff86dc:	608c      	addu      	r2, r3
1fff86de:	106c      	lrw      	r3, 0x1fff14ac	// 1fff870c <ll_processBasicIRQ_secondaryAdvTRX0+0x48c>
1fff86e0:	3180      	movi      	r1, 128
1fff86e2:	5243      	asri      	r2, r2, 3
1fff86e4:	8300      	ld.b      	r0, (r3, 0x0)
1fff86e6:	4126      	lsli      	r1, r1, 6
1fff86e8:	e0001248 	bsr      	0x1fffab78	// 1fffab78 <check_before_startup+0x4a0>
1fff86ec:	063c      	br      	0x1fff8364	// 1fff8364 <ll_processBasicIRQ_secondaryAdvTRX0+0xe4>
    } else if (pdu_type == ADV_CONN_REQ
1fff86ee:	3a45      	cmpnei      	r2, 5
1fff86f0:	0ee2      	bf      	0x1fff84b4	// 1fff84b4 <ll_processBasicIRQ_secondaryAdvTRX0+0x234>
        while (!(adv_param.advChanMap & (1 << i))) {
1fff86f2:	850d      	ld.b      	r0, (r5, 0xd)
1fff86f4:	3300      	movi      	r3, 0
1fff86f6:	3101      	movi      	r1, 1
1fff86f8:	07dd      	br      	0x1fff86b2	// 1fff86b2 <ll_processBasicIRQ_secondaryAdvTRX0+0x432>
1fff86fa:	0000      	bkpt
1fff86fc:	1fff0fe4 	.long	0x1fff0fe4
1fff8700:	1fff17fe 	.long	0x1fff17fe
1fff8704:	1fff11ba 	.long	0x1fff11ba
1fff8708:	1fff1184 	.long	0x1fff1184
1fff870c:	1fff14ac 	.long	0x1fff14ac

1fff8710 <ll_processBasicIRQ_secondaryScanSRX0>:

    return;
}

uint8 ll_processBasicIRQ_secondaryScanSRX0(uint32_t              irq_status)
{
1fff8710:	14d4      	push      	r4-r7, r15
1fff8712:	142b      	subi      	r14, r14, 44
    __ASM volatile("mfcr %0, psr" : "=r"(result));
1fff8714:	c0006023 	mfcr      	r3, cr<0, 0>
1fff8718:	b866      	st.w      	r3, (r14, 0x18)
    __ASM volatile("psrclr ie");
1fff871a:	c0807020 	psrclr      	ie
    _HAL_CS_ALLOC_();
    HAL_ENTER_CRITICAL_SECTION();

    // check status
    if ((irq_status & LIRQ_RD) && (irq_status & LIRQ_COK)) {     // bug correct 2018-10-15
1fff871e:	e4002600 	andi      	r0, r0, 1536
1fff8722:	129c      	lrw      	r4, 0x1fff1494	// 1fff8890 <ll_processBasicIRQ_secondaryScanSRX0+0x180>
1fff8724:	eb400600 	cmpnei      	r0, 1536
1fff8728:	084d      	bt      	0x1fff87c2	// 1fff87c2 <ll_processBasicIRQ_secondaryScanSRX0+0xb2>
        uint8_t packet_len, pdu_type;
        uint16_t pktLen;
        uint32_t pktFoot0, pktFoot1;
        // read packet
        // cost 21-26us(measure with GPIO), depneds on the length of ADV
        packet_len = ll_hw_read_rfifo1((uint8_t *)(&(g_rx_adv_buf.rxheader)),
1fff872a:	121b      	lrw      	r0, 0x1fff17fc	// 1fff8894 <ll_processBasicIRQ_secondaryScanSRX0+0x184>
1fff872c:	1b0a      	addi      	r3, r14, 40
1fff872e:	1a09      	addi      	r2, r14, 36
1fff8730:	e42e0021 	addi      	r1, r14, 34
1fff8734:	e3ffe8a4 	bsr      	0x1fff587c	// 1fff587c <ll_hw_read_rfifo1>
                                       &pktFoot0,
                                       &pktFoot1);
        // check receive pdu type
        pdu_type = g_rx_adv_buf.rxheader & 0x0f;

        if (packet_len   != 0
1fff8738:	3840      	cmpnei      	r0, 0
1fff873a:	0c44      	bf      	0x1fff87c2	// 1fff87c2 <ll_processBasicIRQ_secondaryScanSRX0+0xb2>
        pdu_type = g_rx_adv_buf.rxheader & 0x0f;
1fff873c:	1277      	lrw      	r3, 0x1fff17f8	// 1fff8898 <ll_processBasicIRQ_secondaryScanSRX0+0x188>
1fff873e:	8b22      	ld.h      	r1, (r3, 0x4)
1fff8740:	7404      	zextb      	r0, r1
1fff8742:	e440200f 	andi      	r2, r0, 15
            && ((pdu_type == ADV_IND)
1fff8746:	e400200d 	andi      	r0, r0, 13
1fff874a:	3840      	cmpnei      	r0, 0
1fff874c:	0c03      	bf      	0x1fff8752	// 1fff8752 <ll_processBasicIRQ_secondaryScanSRX0+0x42>
                || (pdu_type  == ADV_NONCONN_IND)
                || (pdu_type  == ADV_SCAN_IND))) {
1fff874e:	3a46      	cmpnei      	r2, 6
1fff8750:	0839      	bt      	0x1fff87c2	// 1fff87c2 <ll_processBasicIRQ_secondaryScanSRX0+0xb2>
            int     i = 0;
            uint8_t txAdd = (g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT;    // adv PDU header, bit 6: TxAdd, 0 - public, 1 - random

            // check white list
            if ((pGlobal_config[LL_SWITCH] & LL_WHITELIST_ALLOW)
1fff8752:	1213      	lrw      	r0, 0x1fffa670	// 1fff889c <ll_processBasicIRQ_secondaryScanSRX0+0x18c>
            uint8_t txAdd = (g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT;    // adv PDU header, bit 6: TxAdd, 0 - public, 1 - random
1fff8754:	5126      	asri      	r1, r1, 6
            if ((pGlobal_config[LL_SWITCH] & LL_WHITELIST_ALLOW)
1fff8756:	9000      	ld.w      	r0, (r0, 0x0)
            uint8_t txAdd = (g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT;    // adv PDU header, bit 6: TxAdd, 0 - public, 1 - random
1fff8758:	e4212001 	andi      	r1, r1, 1
            if ((pGlobal_config[LL_SWITCH] & LL_WHITELIST_ALLOW)
1fff875c:	900b      	ld.w      	r0, (r0, 0x2c)
1fff875e:	e4002008 	andi      	r0, r0, 8
1fff8762:	3840      	cmpnei      	r0, 0
1fff8764:	0c8d      	bf      	0x1fff887e	// 1fff887e <ll_processBasicIRQ_secondaryScanSRX0+0x16e>
                && (scanInfo.wlPolicy  == LL_SCAN_WL_POLICY_USE_WHITE_LIST)) {
1fff8766:	840e      	ld.b      	r0, (r4, 0xe)
1fff8768:	3841      	cmpnei      	r0, 1
1fff876a:	088a      	bt      	0x1fff887e	// 1fff887e <ll_processBasicIRQ_secondaryScanSRX0+0x16e>
                // check white list
                for (i = 0; i < LL_WHITELIST_ENTRY_NUM; i++) {
                    if (txAdd                 != g_llWhitelist[i].peerAddrType
                        || g_rx_adv_buf.data[0]  != g_llWhitelist[i].peerAddr[0]
1fff876c:	8306      	ld.b      	r0, (r3, 0x6)
                        || g_rx_adv_buf.data[1]  != g_llWhitelist[i].peerAddr[1]
                        || g_rx_adv_buf.data[2]  != g_llWhitelist[i].peerAddr[2]
                        || g_rx_adv_buf.data[3]  != g_llWhitelist[i].peerAddr[3]
                        || g_rx_adv_buf.data[4]  != g_llWhitelist[i].peerAddr[4]
1fff876e:	83aa      	ld.b      	r5, (r3, 0xa)
                        || g_rx_adv_buf.data[0]  != g_llWhitelist[i].peerAddr[0]
1fff8770:	b802      	st.w      	r0, (r14, 0x8)
                        || g_rx_adv_buf.data[1]  != g_llWhitelist[i].peerAddr[1]
1fff8772:	8307      	ld.b      	r0, (r3, 0x7)
                        || g_rx_adv_buf.data[5]  != g_llWhitelist[i].peerAddr[5]) {
1fff8774:	83cb      	ld.b      	r6, (r3, 0xb)
                        || g_rx_adv_buf.data[1]  != g_llWhitelist[i].peerAddr[1]
1fff8776:	b803      	st.w      	r0, (r14, 0xc)
                        || g_rx_adv_buf.data[2]  != g_llWhitelist[i].peerAddr[2]
1fff8778:	8308      	ld.b      	r0, (r3, 0x8)
1fff877a:	b804      	st.w      	r0, (r14, 0x10)
                        || g_rx_adv_buf.data[3]  != g_llWhitelist[i].peerAddr[3]
1fff877c:	8309      	ld.b      	r0, (r3, 0x9)
1fff877e:	1269      	lrw      	r3, 0x1fff1144	// 1fff88a0 <ll_processBasicIRQ_secondaryScanSRX0+0x190>
1fff8780:	b805      	st.w      	r0, (r14, 0x14)
1fff8782:	e4030037 	addi      	r0, r3, 56
1fff8786:	b807      	st.w      	r0, (r14, 0x1c)
                    if (txAdd                 != g_llWhitelist[i].peerAddrType
1fff8788:	83e0      	ld.b      	r7, (r3, 0x0)
1fff878a:	645e      	cmpne      	r7, r1
1fff878c:	0817      	bt      	0x1fff87ba	// 1fff87ba <ll_processBasicIRQ_secondaryScanSRX0+0xaa>
                        || g_rx_adv_buf.data[0]  != g_llWhitelist[i].peerAddr[0]
1fff878e:	83e1      	ld.b      	r7, (r3, 0x1)
1fff8790:	9802      	ld.w      	r0, (r14, 0x8)
1fff8792:	641e      	cmpne      	r7, r0
1fff8794:	0813      	bt      	0x1fff87ba	// 1fff87ba <ll_processBasicIRQ_secondaryScanSRX0+0xaa>
                        || g_rx_adv_buf.data[1]  != g_llWhitelist[i].peerAddr[1]
1fff8796:	83e2      	ld.b      	r7, (r3, 0x2)
1fff8798:	9803      	ld.w      	r0, (r14, 0xc)
1fff879a:	641e      	cmpne      	r7, r0
1fff879c:	080f      	bt      	0x1fff87ba	// 1fff87ba <ll_processBasicIRQ_secondaryScanSRX0+0xaa>
                        || g_rx_adv_buf.data[2]  != g_llWhitelist[i].peerAddr[2]
1fff879e:	83e3      	ld.b      	r7, (r3, 0x3)
1fff87a0:	9804      	ld.w      	r0, (r14, 0x10)
1fff87a2:	641e      	cmpne      	r7, r0
1fff87a4:	080b      	bt      	0x1fff87ba	// 1fff87ba <ll_processBasicIRQ_secondaryScanSRX0+0xaa>
                        || g_rx_adv_buf.data[3]  != g_llWhitelist[i].peerAddr[3]
1fff87a6:	83e4      	ld.b      	r7, (r3, 0x4)
1fff87a8:	9805      	ld.w      	r0, (r14, 0x14)
1fff87aa:	641e      	cmpne      	r7, r0
1fff87ac:	0807      	bt      	0x1fff87ba	// 1fff87ba <ll_processBasicIRQ_secondaryScanSRX0+0xaa>
                        || g_rx_adv_buf.data[4]  != g_llWhitelist[i].peerAddr[4]
1fff87ae:	83e5      	ld.b      	r7, (r3, 0x5)
1fff87b0:	655e      	cmpne      	r7, r5
1fff87b2:	0804      	bt      	0x1fff87ba	// 1fff87ba <ll_processBasicIRQ_secondaryScanSRX0+0xaa>
                        || g_rx_adv_buf.data[5]  != g_llWhitelist[i].peerAddr[5]) {
1fff87b4:	83e6      	ld.b      	r7, (r3, 0x6)
1fff87b6:	659e      	cmpne      	r7, r6
1fff87b8:	0c63      	bf      	0x1fff887e	// 1fff887e <ll_processBasicIRQ_secondaryScanSRX0+0x16e>
                for (i = 0; i < LL_WHITELIST_ENTRY_NUM; i++) {
1fff87ba:	9807      	ld.w      	r0, (r14, 0x1c)
1fff87bc:	2306      	addi      	r3, 7
1fff87be:	64c2      	cmpne      	r0, r3
1fff87c0:	0be4      	bt      	0x1fff8788	// 1fff8788 <ll_processBasicIRQ_secondaryScanSRX0+0x78>
            }
        }
    }

    //  update scan time
    llScanTime += ((ISR_entry_time > llScanT1) ? (ISR_entry_time - llScanT1) : (BASE_TIME_UNITS - llScanT1 + ISR_entry_time));
1fff87c2:	1179      	lrw      	r3, 0x1fff0e1c	// 1fff88a4 <ll_processBasicIRQ_secondaryScanSRX0+0x194>
1fff87c4:	1159      	lrw      	r2, 0x1fff190c	// 1fff88a8 <ll_processBasicIRQ_secondaryScanSRX0+0x198>
1fff87c6:	9360      	ld.w      	r3, (r3, 0x0)
1fff87c8:	9240      	ld.w      	r2, (r2, 0x0)
1fff87ca:	64c8      	cmphs      	r2, r3
1fff87cc:	0843      	bt      	0x1fff8852	// 1fff8852 <ll_processBasicIRQ_secondaryScanSRX0+0x142>
1fff87ce:	11b8      	lrw      	r5, 0x1fff0dfc	// 1fff88ac <ll_processBasicIRQ_secondaryScanSRX0+0x19c>
1fff87d0:	60ca      	subu      	r3, r2

    if (llScanTime >= scanInfo.scanWindow * 625) {
1fff87d2:	8c26      	ld.h      	r1, (r4, 0xc)
    llScanTime += ((ISR_entry_time > llScanT1) ? (ISR_entry_time - llScanT1) : (BASE_TIME_UNITS - llScanT1 + ISR_entry_time));
1fff87d4:	9540      	ld.w      	r2, (r5, 0x0)
1fff87d6:	60c8      	addu      	r3, r2
    if (llScanTime >= scanInfo.scanWindow * 625) {
1fff87d8:	ea020271 	movi      	r2, 625
1fff87dc:	7c84      	mult      	r2, r1
    llScanTime += ((ISR_entry_time > llScanT1) ? (ISR_entry_time - llScanT1) : (BASE_TIME_UNITS - llScanT1 + ISR_entry_time));
1fff87de:	b560      	st.w      	r3, (r5, 0x0)
    if (llScanTime >= scanInfo.scanWindow * 625) {
1fff87e0:	648c      	cmphs      	r3, r2
1fff87e2:	0c46      	bf      	0x1fff886e	// 1fff886e <ll_processBasicIRQ_secondaryScanSRX0+0x15e>
        // switch scan channel, set event instead of trigger immediately
        // calculate next scan channel
        LL_CALC_NEXT_SCAN_CHN(scanInfo.nextScanChan);
1fff87e4:	8472      	ld.b      	r3, (r4, 0x12)
1fff87e6:	2300      	addi      	r3, 1
1fff87e8:	74cc      	zextb      	r3, r3
1fff87ea:	3225      	movi      	r2, 37
1fff87ec:	eb030027 	cmphsi      	r3, 40
1fff87f0:	c4620c40 	inct      	r3, r2, 0

        // schedule next scan event
        if (scanInfo.scanWindow == scanInfo.scanInterval) {    // scanWindow == scanInterval, trigger immediately
1fff87f4:	8c45      	ld.h      	r2, (r4, 0xa)
        LL_CALC_NEXT_SCAN_CHN(scanInfo.nextScanChan);
1fff87f6:	a472      	st.b      	r3, (r4, 0x12)
        if (scanInfo.scanWindow == scanInfo.scanInterval) {    // scanWindow == scanInterval, trigger immediately
1fff87f8:	6486      	cmpne      	r1, r2
1fff87fa:	110e      	lrw      	r0, 0x1fff14ac	// 1fff88b0 <ll_processBasicIRQ_secondaryScanSRX0+0x1a0>
1fff87fc:	082f      	bt      	0x1fff885a	// 1fff885a <ll_processBasicIRQ_secondaryScanSRX0+0x14a>
            osal_set_event(LL_TaskID, LL_EVT_SECONDARY_SCAN);
1fff87fe:	3180      	movi      	r1, 128
1fff8800:	8000      	ld.b      	r0, (r0, 0x0)
1fff8802:	4125      	lsli      	r1, r1, 5
1fff8804:	e0001280 	bsr      	0x1fffad04	// 1fffad04 <check_before_startup+0x62c>
        } else {
            osal_start_timerEx(LL_TaskID, LL_EVT_SECONDARY_SCAN, ((scanInfo.scanInterval - scanInfo.scanWindow) * 5) >> 3);
        }

        // reset scan total time
        llScanTime = 0;
1fff8808:	3300      	movi      	r3, 0
1fff880a:	b560      	st.w      	r3, (r5, 0x0)
    } else if (llSecondaryState == LL_SEC_STATE_SCAN) {
        llSetupSecScan(scanInfo.nextScanChan);
    }

    // post ISR process
    if (!llWaitingIrq) {                    // bug fixed 2018-05-04, only clear IRQ status when no config new one
1fff880c:	116a      	lrw      	r3, 0x1fff0df8	// 1fff88b4 <ll_processBasicIRQ_secondaryScanSRX0+0x1a4>
1fff880e:	9360      	ld.w      	r3, (r3, 0x0)
1fff8810:	3b40      	cmpnei      	r3, 0
1fff8812:	0803      	bt      	0x1fff8818	// 1fff8818 <ll_processBasicIRQ_secondaryScanSRX0+0x108>
        ll_hw_clr_irq();
1fff8814:	e0001002 	bsr      	0x1fffa818	// 1fffa818 <check_before_startup+0x140>
    __ASM volatile("mtcr %0, psr" : : "r"(psr));
1fff8818:	9866      	ld.w      	r3, (r14, 0x18)
1fff881a:	c0036420 	mtcr      	r3, cr<0, 0>
    }

    HAL_EXIT_CRITICAL_SECTION();
    return TRUE;
1fff881e:	3001      	movi      	r0, 1
1fff8820:	140b      	addi      	r14, r14, 44
1fff8822:	1494      	pop      	r4-r7, r15
1fff8824:	1165      	lrw      	r3, 0x11011ae1	// 1fff88b8 <ll_processBasicIRQ_secondaryScanSRX0+0x1a8>
1fff8826:	608c      	addu      	r2, r3
1fff8828:	8200      	ld.b      	r0, (r2, 0x0)
                rssi  =  -(pktFoot1 >> 24);
1fff882a:	98aa      	ld.w      	r5, (r14, 0x28)
1fff882c:	4db8      	lsri      	r5, r5, 24
1fff882e:	3200      	movi      	r2, 0
1fff8830:	6096      	subu      	r2, r5
                LL_AdvReportCback(advEventType,                          // event type
1fff8832:	748a      	sextb      	r2, r2
1fff8834:	b841      	st.w      	r2, (r14, 0x4)
1fff8836:	1142      	lrw      	r2, 0x1fff1804	// 1fff88bc <ll_processBasicIRQ_secondaryScanSRX0+0x1ac>
1fff8838:	d86e0022 	ld.b      	r3, (r14, 0x22)
1fff883c:	b840      	st.w      	r2, (r14, 0x0)
1fff883e:	2b07      	subi      	r3, 8
1fff8840:	1140      	lrw      	r2, 0x1fff17fe	// 1fff88c0 <ll_processBasicIRQ_secondaryScanSRX0+0x1b0>
1fff8842:	74cc      	zextb      	r3, r3
1fff8844:	e00012b4 	bsr      	0x1fffadac	// 1fffadac <check_before_startup+0x6d4>
                g_pmCounters.ll_recv_adv_pkt_cnt ++;
1fff8848:	105f      	lrw      	r2, 0x1fff12e0	// 1fff88c4 <ll_processBasicIRQ_secondaryScanSRX0+0x1b4>
1fff884a:	926e      	ld.w      	r3, (r2, 0x38)
1fff884c:	2300      	addi      	r3, 1
1fff884e:	b26e      	st.w      	r3, (r2, 0x38)
1fff8850:	07b9      	br      	0x1fff87c2	// 1fff87c2 <ll_processBasicIRQ_secondaryScanSRX0+0xb2>
    llScanTime += ((ISR_entry_time > llScanT1) ? (ISR_entry_time - llScanT1) : (BASE_TIME_UNITS - llScanT1 + ISR_entry_time));
1fff8852:	c6a05021 	bmaski      	r1, 22
1fff8856:	60c4      	addu      	r3, r1
1fff8858:	07bb      	br      	0x1fff87ce	// 1fff87ce <ll_processBasicIRQ_secondaryScanSRX0+0xbe>
            osal_start_timerEx(LL_TaskID, LL_EVT_SECONDARY_SCAN, ((scanInfo.scanInterval - scanInfo.scanWindow) * 5) >> 3);
1fff885a:	5a65      	subu      	r3, r2, r1
1fff885c:	3180      	movi      	r1, 128
1fff885e:	4342      	lsli      	r2, r3, 2
1fff8860:	4125      	lsli      	r1, r1, 5
1fff8862:	608c      	addu      	r2, r3
1fff8864:	8000      	ld.b      	r0, (r0, 0x0)
1fff8866:	5243      	asri      	r2, r2, 3
1fff8868:	e0001188 	bsr      	0x1fffab78	// 1fffab78 <check_before_startup+0x4a0>
1fff886c:	07ce      	br      	0x1fff8808	// 1fff8808 <ll_processBasicIRQ_secondaryScanSRX0+0xf8>
    } else if (llSecondaryState == LL_SEC_STATE_SCAN) {
1fff886e:	1077      	lrw      	r3, 0x1fff1184	// 1fff88c8 <ll_processBasicIRQ_secondaryScanSRX0+0x1b8>
1fff8870:	8360      	ld.b      	r3, (r3, 0x0)
1fff8872:	3b41      	cmpnei      	r3, 1
1fff8874:	0bcc      	bt      	0x1fff880c	// 1fff880c <ll_processBasicIRQ_secondaryScanSRX0+0xfc>
        llSetupSecScan(scanInfo.nextScanChan);
1fff8876:	8412      	ld.b      	r0, (r4, 0x12)
1fff8878:	e0001072 	bsr      	0x1fffa95c	// 1fffa95c <check_before_startup+0x284>
1fff887c:	07c8      	br      	0x1fff880c	// 1fff880c <ll_processBasicIRQ_secondaryScanSRX0+0xfc>
1fff887e:	2a00      	subi      	r2, 1
1fff8880:	7488      	zextb      	r2, r2
                llCurrentScanChn = scanInfo.nextScanChan;
1fff8882:	8412      	ld.b      	r0, (r4, 0x12)
1fff8884:	1072      	lrw      	r3, 0x1fff1910	// 1fff88cc <ll_processBasicIRQ_secondaryScanSRX0+0x1bc>
1fff8886:	3a05      	cmphsi      	r2, 6
1fff8888:	b300      	st.w      	r0, (r3, 0x0)
1fff888a:	0fcd      	bf      	0x1fff8824	// 1fff8824 <ll_processBasicIRQ_secondaryScanSRX0+0x114>
1fff888c:	3000      	movi      	r0, 0
1fff888e:	07ce      	br      	0x1fff882a	// 1fff882a <ll_processBasicIRQ_secondaryScanSRX0+0x11a>
1fff8890:	1fff1494 	.long	0x1fff1494
1fff8894:	1fff17fc 	.long	0x1fff17fc
1fff8898:	1fff17f8 	.long	0x1fff17f8
1fff889c:	1fffa670 	.long	0x1fffa670
1fff88a0:	1fff1144 	.long	0x1fff1144
1fff88a4:	1fff0e1c 	.long	0x1fff0e1c
1fff88a8:	1fff190c 	.long	0x1fff190c
1fff88ac:	1fff0dfc 	.long	0x1fff0dfc
1fff88b0:	1fff14ac 	.long	0x1fff14ac
1fff88b4:	1fff0df8 	.long	0x1fff0df8
1fff88b8:	11011ae1 	.long	0x11011ae1
1fff88bc:	1fff1804 	.long	0x1fff1804
1fff88c0:	1fff17fe 	.long	0x1fff17fe
1fff88c4:	1fff12e0 	.long	0x1fff12e0
1fff88c8:	1fff1184 	.long	0x1fff1184
1fff88cc:	1fff1910 	.long	0x1fff1910

1fff88d0 <llSetupExtScan1>:
{
1fff88d0:	14d4      	push      	r4-r7, r15
1fff88d2:	6dc3      	mov      	r7, r0
    __ASM volatile("mfcr %0, psr" : "=r"(result));
1fff88d4:	c0006025 	mfcr      	r5, cr<0, 0>
    __ASM volatile("psrclr ie");
1fff88d8:	c0807020 	psrclr      	ie
    if (isTimer1Running() || llWaitingIrq) {
1fff88dc:	e0001262 	bsr      	0x1fffada0	// 1fffada0 <check_before_startup+0x6c8>
1fff88e0:	11c8      	lrw      	r6, 0x1fff15d0	// 1fff8980 <llSetupExtScan1+0xb0>
1fff88e2:	3840      	cmpnei      	r0, 0
1fff88e4:	0805      	bt      	0x1fff88ee	// 1fff88ee <llSetupExtScan1+0x1e>
1fff88e6:	1168      	lrw      	r3, 0x1fff0df8	// 1fff8984 <llSetupExtScan1+0xb4>
1fff88e8:	9360      	ld.w      	r3, (r3, 0x0)
1fff88ea:	3b40      	cmpnei      	r3, 0
1fff88ec:	0c0e      	bf      	0x1fff8908	// 1fff8908 <llSetupExtScan1+0x38>
        scanTime = llCalcMaxScanTime();
1fff88ee:	e0001085 	bsr      	0x1fffa9f8	// 1fffa9f8 <check_before_startup+0x320>
        if (scanTime) {     // trigger scan
1fff88f2:	3840      	cmpnei      	r0, 0
1fff88f4:	080c      	bt      	0x1fff890c	// 1fff890c <llSetupExtScan1+0x3c>
            llTaskState = LL_TASK_EXTENDED_SCAN_PENDING;
1fff88f6:	3311      	movi      	r3, 17
            g_pmCounters.ll_conn_scan_pending_cnt ++;
1fff88f8:	1144      	lrw      	r2, 0x1fff12e0	// 1fff8988 <llSetupExtScan1+0xb8>
            llTaskState = LL_TASK_EXTENDED_SCAN_PENDING;
1fff88fa:	a660      	st.b      	r3, (r6, 0x0)
            g_pmCounters.ll_conn_scan_pending_cnt ++;
1fff88fc:	9267      	ld.w      	r3, (r2, 0x1c)
1fff88fe:	2300      	addi      	r3, 1
1fff8900:	b267      	st.w      	r3, (r2, 0x1c)
    __ASM volatile("mtcr %0, psr" : : "r"(psr));
1fff8902:	c0056420 	mtcr      	r5, cr<0, 0>
}
1fff8906:	1494      	pop      	r4-r7, r15
    uint32_t scanTime = 10000;
1fff8908:	ea002710 	movi      	r0, 10000
    if (scanTime > extScanInfo.scanWindow[extScanInfo.current_index]  * 625) {
1fff890c:	1140      	lrw      	r2, 0x1fff1500	// 1fff898c <llSetupExtScan1+0xbc>
1fff890e:	827c      	ld.b      	r3, (r2, 0x1c)
1fff8910:	2307      	addi      	r3, 8
1fff8912:	4361      	lsli      	r3, r3, 1
1fff8914:	60c8      	addu      	r3, r2
1fff8916:	8b81      	ld.h      	r4, (r3, 0x2)
1fff8918:	ea030271 	movi      	r3, 625
1fff891c:	7d0c      	mult      	r4, r3
    g_rfPhyPktFmt = extScanInfo.current_scan_PHY;
1fff891e:	107d      	lrw      	r3, 0x1fff08ae	// 1fff8990 <llSetupExtScan1+0xc0>
1fff8920:	6500      	cmphs      	r0, r4
1fff8922:	c4800c20 	incf      	r4, r0, 0
1fff8926:	821d      	ld.b      	r0, (r2, 0x1d)
1fff8928:	a300      	st.b      	r0, (r3, 0x0)
    rf_phy_change_cfg0(extScanInfo.current_scan_PHY);
1fff892a:	e3ffdcd5 	bsr      	0x1fff42d4	// 1fff42d4 <rf_phy_change_cfg0>
    ll_hw_rst_tfifo();
1fff892e:	e00011bb 	bsr      	0x1fffaca4	// 1fffaca4 <check_before_startup+0x5cc>
    ll_hw_rst_rfifo();
1fff8932:	e000107b 	bsr      	0x1fffaa28	// 1fffaa28 <check_before_startup+0x350>
    set_crc_seed(ADV_CRC_INIT_VALUE); // crc seed for adv is same for all channels
1fff8936:	1018      	lrw      	r0, 0x555555	// 1fff8994 <llSetupExtScan1+0xc4>
1fff8938:	e0000fc4 	bsr      	0x1fffa8c0	// 1fffa8c0 <check_before_startup+0x1e8>
    set_access_address(ADV_SYNCH_WORD);
1fff893c:	1017      	lrw      	r0, 0x8e89bed6	// 1fff8998 <llSetupExtScan1+0xc8>
1fff893e:	e000106f 	bsr      	0x1fffaa1c	// 1fffaa1c <check_before_startup+0x344>
    set_channel(chan);
1fff8942:	6c1f      	mov      	r0, r7
1fff8944:	e0001012 	bsr      	0x1fffa968	// 1fffa968 <check_before_startup+0x290>
    set_whiten_seed(chan);
1fff8948:	6c1f      	mov      	r0, r7
1fff894a:	e000115f 	bsr      	0x1fffac08	// 1fffac08 <check_before_startup+0x530>
    set_max_length(0xff);
1fff894e:	30ff      	movi      	r0, 255
1fff8950:	e00010b4 	bsr      	0x1fffaab8	// 1fffaab8 <check_before_startup+0x3e0>
    ll_hw_set_rx_timeout(scanTime);     // us
1fff8954:	6c13      	mov      	r0, r4
1fff8956:	e0000f73 	bsr      	0x1fffa83c	// 1fffa83c <check_before_startup+0x164>
    ll_hw_set_srx();
1fff895a:	e000107f 	bsr      	0x1fffaa58	// 1fffaa58 <check_before_startup+0x380>
    ll_hw_ign_rfifo(LL_HW_IGN_CRC | LL_HW_IGN_EMP);
1fff895e:	3003      	movi      	r0, 3
1fff8960:	e000115a 	bsr      	0x1fffac14	// 1fffac14 <check_before_startup+0x53c>
    ll_hw_go();
1fff8964:	e00010f8 	bsr      	0x1fffab54	// 1fffab54 <check_before_startup+0x47c>
    llScanT1 = read_current_fine_time();
1fff8968:	e00010d8 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
1fff896c:	106c      	lrw      	r3, 0x1fff190c	// 1fff899c <llSetupExtScan1+0xcc>
    llWaitingIrq = TRUE;
1fff896e:	3201      	movi      	r2, 1
    llScanT1 = read_current_fine_time();
1fff8970:	b300      	st.w      	r0, (r3, 0x0)
    llWaitingIrq = TRUE;
1fff8972:	1065      	lrw      	r3, 0x1fff0df8	// 1fff8984 <llSetupExtScan1+0xb4>
1fff8974:	b340      	st.w      	r2, (r3, 0x0)
    llTaskState = LL_TASK_EXTENDED_SCAN;
1fff8976:	3303      	movi      	r3, 3
1fff8978:	a660      	st.b      	r3, (r6, 0x0)
    last_scanTime = scanTime;
1fff897a:	106a      	lrw      	r3, 0x1fffcefc	// 1fff89a0 <llSetupExtScan1+0xd0>
1fff897c:	b380      	st.w      	r4, (r3, 0x0)
1fff897e:	07c2      	br      	0x1fff8902	// 1fff8902 <llSetupExtScan1+0x32>
1fff8980:	1fff15d0 	.long	0x1fff15d0
1fff8984:	1fff0df8 	.long	0x1fff0df8
1fff8988:	1fff12e0 	.long	0x1fff12e0
1fff898c:	1fff1500 	.long	0x1fff1500
1fff8990:	1fff08ae 	.long	0x1fff08ae
1fff8994:	00555555 	.long	0x00555555
1fff8998:	8e89bed6 	.long	0x8e89bed6
1fff899c:	1fff190c 	.long	0x1fff190c
1fff89a0:	1fffcefc 	.long	0x1fffcefc

1fff89a4 <ll_processExtScanIRQ>:
{
1fff89a4:	14d4      	push      	r4-r7, r15
1fff89a6:	1436      	subi      	r14, r14, 88
1fff89a8:	6d03      	mov      	r4, r0
    __ASM volatile("mfcr %0, psr" : "=r"(result));
1fff89aa:	c0006023 	mfcr      	r3, cr<0, 0>
1fff89ae:	b871      	st.w      	r3, (r14, 0x44)
    __ASM volatile("psrclr ie");
1fff89b0:	c0807020 	psrclr      	ie
    ll_mode = ll_hw_get_tr_mode();
1fff89b4:	e0001124 	bsr      	0x1fffabfc	// 1fffabfc <check_before_startup+0x524>
    if (ll_mode == LL_HW_MODE_SRX) {    // passive scan
1fff89b8:	3841      	cmpnei      	r0, 1
1fff89ba:	e86003eb 	bt      	0x1fff9190	// 1fff9190 <ll_processExtScanIRQ+0x7ec>
        ll_debug_output(DEBUG_LL_HW_SRX);
1fff89be:	3006      	movi      	r0, 6
1fff89c0:	e0001094 	bsr      	0x1fffaae8	// 1fffaae8 <check_before_startup+0x410>
        if (llTaskState == LL_TASK_EXTENDED_SCAN) {
1fff89c4:	0175      	lrw      	r3, 0x1fff15d0	// 1fff8cec <ll_processExtScanIRQ+0x348>
1fff89c6:	8360      	ld.b      	r3, (r3, 0x0)
1fff89c8:	3b43      	cmpnei      	r3, 3
1fff89ca:	0c03      	bf      	0x1fff89d0	// 1fff89d0 <ll_processExtScanIRQ+0x2c>
    uint8_t  *peerAddr = &ext_adv_hdr.advA[0];
1fff89cc:	0176      	lrw      	r3, 0x1fff1551	// 1fff8cf0 <ll_processExtScanIRQ+0x34c>
1fff89ce:	0422      	br      	0x1fff8a12	// 1fff8a12 <ll_processExtScanIRQ+0x6e>
            osal_memset(&ext_adv_hdr, 0, sizeof(ext_adv_hdr));
1fff89d0:	01f6      	lrw      	r7, 0x1fff1550	// 1fff8cf4 <ll_processExtScanIRQ+0x350>
1fff89d2:	322c      	movi      	r2, 44
1fff89d4:	3100      	movi      	r1, 0
1fff89d6:	6c1f      	mov      	r0, r7
            if ((irq_status & LIRQ_RD) && (irq_status & LIRQ_COK)) {
1fff89d8:	e4842600 	andi      	r4, r4, 1536
            osal_memset(&ext_adv_hdr, 0, sizeof(ext_adv_hdr));
1fff89dc:	e0000eb2 	bsr      	0x1fffa740	// 1fffa740 <check_before_startup+0x68>
            if ((irq_status & LIRQ_RD) && (irq_status & LIRQ_COK)) {
1fff89e0:	eb440600 	cmpnei      	r4, 1536
1fff89e4:	6d5f      	mov      	r5, r7
1fff89e6:	0bf3      	bt      	0x1fff89cc	// 1fff89cc <ll_processExtScanIRQ+0x28>
                packet_len = ll_hw_read_rfifo1((uint8_t *)(&(g_rx_adv_buf.rxheader)),
1fff89e8:	011b      	lrw      	r0, 0x1fff17fc	// 1fff8cf8 <ll_processExtScanIRQ+0x354>
1fff89ea:	1a14      	addi      	r2, r14, 80
1fff89ec:	1b15      	addi      	r3, r14, 84
1fff89ee:	e42e004d 	addi      	r1, r14, 78
1fff89f2:	e3ffe745 	bsr      	0x1fff587c	// 1fff587c <ll_hw_read_rfifo1>
                pdu_type = g_rx_adv_buf.rxheader & 0x0f;
1fff89f6:	017d      	lrw      	r3, 0x1fff17f8	// 1fff8cfc <ll_processExtScanIRQ+0x358>
1fff89f8:	6d8f      	mov      	r6, r3
                packet_len = ll_hw_read_rfifo1((uint8_t *)(&(g_rx_adv_buf.rxheader)),
1fff89fa:	b809      	st.w      	r0, (r14, 0x24)
                pdu_type = g_rx_adv_buf.rxheader & 0x0f;
1fff89fc:	8b82      	ld.h      	r4, (r3, 0x4)
                if (ll_hw_get_rfifo_depth() > 0) {
1fff89fe:	e0001177 	bsr      	0x1fffacec	// 1fffacec <check_before_startup+0x614>
1fff8a02:	9849      	ld.w      	r2, (r14, 0x24)
1fff8a04:	3820      	cmplti      	r0, 1
1fff8a06:	080a      	bt      	0x1fff8a1a	// 1fff8a1a <ll_processExtScanIRQ+0x76>
                    g_pmCounters.ll_rfifo_read_err++;
1fff8a08:	0241      	lrw      	r2, 0x1fff12e0	// 1fff8d00 <ll_processExtScanIRQ+0x35c>
1fff8a0a:	9279      	ld.w      	r3, (r2, 0x64)
1fff8a0c:	2300      	addi      	r3, 1
1fff8a0e:	b279      	st.w      	r3, (r2, 0x64)
    uint8_t  *peerAddr = &ext_adv_hdr.advA[0];
1fff8a10:	5f62      	addi      	r3, r7, 1
1fff8a12:	b86a      	st.w      	r3, (r14, 0x28)
    uint8   peerAddrType = 0;                  // peer address type
1fff8a14:	3300      	movi      	r3, 0
1fff8a16:	b86b      	st.w      	r3, (r14, 0x2c)
1fff8a18:	04ec      	br      	0x1fff8bf0	// 1fff8bf0 <ll_processExtScanIRQ+0x24c>
                if (packet_len   != 0
1fff8a1a:	3a40      	cmpnei      	r2, 0
1fff8a1c:	0ffa      	bf      	0x1fff8a10	// 1fff8a10 <ll_processExtScanIRQ+0x6c>
                pdu_type = g_rx_adv_buf.rxheader & 0x0f;
1fff8a1e:	e484200f 	andi      	r4, r4, 15
                    && (pdu_type == ADV_EXT_TYPE)) {
1fff8a22:	3c47      	cmpnei      	r4, 7
1fff8a24:	e86002c2 	bt      	0x1fff8fa8	// 1fff8fa8 <ll_processExtScanIRQ+0x604>
                    uint8_t txAdd = (g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT;    // adv PDU header, bit 6: TxAdd, 0 - public, 1 - random
1fff8a28:	8e42      	ld.h      	r2, (r6, 0x4)
1fff8a2a:	5226      	asri      	r1, r2, 6
                    uint8   payload_len = (g_rx_adv_buf.rxheader & 0xFF00) >> LENGTH_SHIFT;
1fff8a2c:	4a48      	lsri      	r2, r2, 8
1fff8a2e:	b84d      	st.w      	r2, (r14, 0x34)
                    adv_mode    = (g_rx_adv_buf.data[0] & 0xc0) >> 6;
1fff8a30:	8646      	ld.b      	r2, (r6, 0x6)
                    uint8_t txAdd = (g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT;    // adv PDU header, bit 6: TxAdd, 0 - public, 1 - random
1fff8a32:	e4212001 	andi      	r1, r1, 1
                    adv_mode    = (g_rx_adv_buf.data[0] & 0xc0) >> 6;
1fff8a36:	b84e      	st.w      	r2, (r14, 0x38)
1fff8a38:	4a46      	lsri      	r2, r2, 6
                    uint8_t txAdd = (g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT;    // adv PDU header, bit 6: TxAdd, 0 - public, 1 - random
1fff8a3a:	b82b      	st.w      	r1, (r14, 0x2c)
                    adv_mode    = (g_rx_adv_buf.data[0] & 0xc0) >> 6;
1fff8a3c:	b84c      	st.w      	r2, (r14, 0x30)
                    ll_parseExtHeader(&g_rx_adv_buf.data[1], payload_len - 1);
1fff8a3e:	984d      	ld.w      	r2, (r14, 0x34)
1fff8a40:	5a23      	subi      	r1, r2, 1
1fff8a42:	7445      	zexth      	r1, r1
1fff8a44:	5e1a      	addi      	r0, r6, 7
1fff8a46:	e0001195 	bsr      	0x1fffad70	// 1fffad70 <check_before_startup+0x698>
                    if (g_llRlEnable == TRUE
1fff8a4a:	0270      	lrw      	r3, 0x1fff0ddc	// 1fff8d04 <ll_processExtScanIRQ+0x360>
1fff8a4c:	8360      	ld.b      	r3, (r3, 0x0)
1fff8a4e:	3b41      	cmpnei      	r3, 1
1fff8a50:	08ad      	bt      	0x1fff8baa	// 1fff8baa <ll_processExtScanIRQ+0x206>
                        && (adv_mode == LL_EXT_ADV_MODE_SC)    // BQB test only required checking RL for scanable ADV
1fff8a52:	986c      	ld.w      	r3, (r14, 0x30)
1fff8a54:	3b42      	cmpnei      	r3, 2
1fff8a56:	08aa      	bt      	0x1fff8baa	// 1fff8baa <ll_processExtScanIRQ+0x206>
                        && (ext_adv_hdr.header & LE_EXT_HDR_ADVA_PRESENT_BITMASK)) {       // AdvA field present
1fff8a58:	8760      	ld.b      	r3, (r7, 0x0)
1fff8a5a:	e4632011 	andi      	r3, r3, 17
1fff8a5e:	3b41      	cmpnei      	r3, 1
1fff8a60:	08a5      	bt      	0x1fff8baa	// 1fff8baa <ll_processExtScanIRQ+0x206>
                        if ((ext_adv_hdr.advA[5] & RANDOM_ADDR_HDR) == PRIVATE_RESOLVE_ADDR_HDR) {
1fff8a62:	8746      	ld.b      	r2, (r7, 0x6)
1fff8a64:	e46220c0 	andi      	r3, r2, 192
1fff8a68:	eb430040 	cmpnei      	r3, 64
1fff8a6c:	0858      	bt      	0x1fff8b1c	// 1fff8b1c <ll_processExtScanIRQ+0x178>
                            if (isPeerRpaStore == TRUE
1fff8a6e:	0278      	lrw      	r3, 0x1fff0e2d	// 1fff8d08 <ll_processExtScanIRQ+0x364>
1fff8a70:	8360      	ld.b      	r3, (r3, 0x0)
1fff8a72:	b869      	st.w      	r3, (r14, 0x24)
1fff8a74:	3b41      	cmpnei      	r3, 1
1fff8a76:	084c      	bt      	0x1fff8b0e	// 1fff8b0e <ll_processExtScanIRQ+0x16a>
                                && currentPeerRpa[0] == ext_adv_hdr.advA[0]
1fff8a78:	027a      	lrw      	r3, 0x1fff1914	// 1fff8d0c <ll_processExtScanIRQ+0x368>
1fff8a7a:	8721      	ld.b      	r1, (r7, 0x1)
1fff8a7c:	8300      	ld.b      	r0, (r3, 0x0)
1fff8a7e:	6442      	cmpne      	r0, r1
1fff8a80:	0847      	bt      	0x1fff8b0e	// 1fff8b0e <ll_processExtScanIRQ+0x16a>
                                && currentPeerRpa[1] == ext_adv_hdr.advA[1]
1fff8a82:	8301      	ld.b      	r0, (r3, 0x1)
1fff8a84:	8722      	ld.b      	r1, (r7, 0x2)
1fff8a86:	6442      	cmpne      	r0, r1
1fff8a88:	0843      	bt      	0x1fff8b0e	// 1fff8b0e <ll_processExtScanIRQ+0x16a>
                                && currentPeerRpa[2] == ext_adv_hdr.advA[2]
1fff8a8a:	8302      	ld.b      	r0, (r3, 0x2)
1fff8a8c:	8723      	ld.b      	r1, (r7, 0x3)
1fff8a8e:	6442      	cmpne      	r0, r1
1fff8a90:	083f      	bt      	0x1fff8b0e	// 1fff8b0e <ll_processExtScanIRQ+0x16a>
                                && currentPeerRpa[3] == ext_adv_hdr.advA[3]
1fff8a92:	8303      	ld.b      	r0, (r3, 0x3)
1fff8a94:	8724      	ld.b      	r1, (r7, 0x4)
1fff8a96:	6442      	cmpne      	r0, r1
1fff8a98:	083b      	bt      	0x1fff8b0e	// 1fff8b0e <ll_processExtScanIRQ+0x16a>
                                && currentPeerRpa[4] == ext_adv_hdr.advA[4]
1fff8a9a:	8304      	ld.b      	r0, (r3, 0x4)
1fff8a9c:	8725      	ld.b      	r1, (r7, 0x5)
1fff8a9e:	6442      	cmpne      	r0, r1
1fff8aa0:	0837      	bt      	0x1fff8b0e	// 1fff8b0e <ll_processExtScanIRQ+0x16a>
                                && currentPeerRpa[5] == ext_adv_hdr.advA[5]) {
1fff8aa2:	8365      	ld.b      	r3, (r3, 0x5)
1fff8aa4:	648e      	cmpne      	r3, r2
1fff8aa6:	0834      	bt      	0x1fff8b0e	// 1fff8b0e <ll_processExtScanIRQ+0x16a>
                                rpaListIndex = storeRpaListIndex;
1fff8aa8:	0365      	lrw      	r3, 0x1fff191b	// 1fff8d10 <ll_processExtScanIRQ+0x36c>
1fff8aaa:	8380      	ld.b      	r4, (r3, 0x0)
                            if (rpaListIndex < LL_RESOLVINGLIST_ENTRY_NUM) {
1fff8aac:	3c07      	cmphsi      	r4, 8
1fff8aae:	0885      	bt      	0x1fff8bb8	// 1fff8bb8 <ll_processExtScanIRQ+0x214>
                                peerAddr = &g_llResolvinglist[rpaListIndex].peerAddr[0];
1fff8ab0:	332e      	movi      	r3, 46
1fff8ab2:	7cd0      	mult      	r3, r4
1fff8ab4:	0347      	lrw      	r2, 0x1fff0ff5	// 1fff8d14 <ll_processExtScanIRQ+0x370>
1fff8ab6:	60c8      	addu      	r3, r2
1fff8ab8:	b86a      	st.w      	r3, (r14, 0x28)
                                bWlRlCheckOk = TRUE;
1fff8aba:	3601      	movi      	r6, 1
                    if ((pGlobal_config[LL_SWITCH] & LL_WHITELIST_ALLOW)
1fff8abc:	0348      	lrw      	r2, 0x1fffa670	// 1fff8d18 <ll_processExtScanIRQ+0x374>
1fff8abe:	b84f      	st.w      	r2, (r14, 0x3c)
1fff8ac0:	9260      	ld.w      	r3, (r2, 0x0)
1fff8ac2:	936b      	ld.w      	r3, (r3, 0x2c)
1fff8ac4:	e4632008 	andi      	r3, r3, 8
1fff8ac8:	3b40      	cmpnei      	r3, 0
1fff8aca:	036a      	lrw      	r3, 0x1fff1500	// 1fff8d1c <ll_processExtScanIRQ+0x378>
1fff8acc:	0c0e      	bf      	0x1fff8ae8	// 1fff8ae8 <ll_processExtScanIRQ+0x144>
                        && (extScanInfo.wlPolicy  == LL_SCAN_WL_POLICY_USE_WHITE_LIST)
1fff8ace:	8368      	ld.b      	r3, (r3, 0x8)
1fff8ad0:	3b41      	cmpnei      	r3, 1
1fff8ad2:	080b      	bt      	0x1fff8ae8	// 1fff8ae8 <ll_processExtScanIRQ+0x144>
                        && (bWlRlCheckOk == TRUE)
1fff8ad4:	3e41      	cmpnei      	r6, 1
1fff8ad6:	0809      	bt      	0x1fff8ae8	// 1fff8ae8 <ll_processExtScanIRQ+0x144>
                        && isTargetAChecked == FALSE)
1fff8ad8:	9869      	ld.w      	r3, (r14, 0x24)
1fff8ada:	3b40      	cmpnei      	r3, 0
1fff8adc:	0806      	bt      	0x1fff8ae8	// 1fff8ae8 <ll_processExtScanIRQ+0x144>
                        bWlRlCheckOk = ll_isAddrInWhiteList(txAdd, peerAddr);
1fff8ade:	982a      	ld.w      	r1, (r14, 0x28)
1fff8ae0:	980b      	ld.w      	r0, (r14, 0x2c)
1fff8ae2:	e0000e29 	bsr      	0x1fffa734	// 1fffa734 <check_before_startup+0x5c>
1fff8ae6:	6d83      	mov      	r6, r0
                    if (ext_adv_hdr.header & LE_EXT_HDR_TARGETA_PRESENT_BITMASK) {
1fff8ae8:	8560      	ld.b      	r3, (r5, 0x0)
1fff8aea:	e4632002 	andi      	r3, r3, 2
1fff8aee:	3b40      	cmpnei      	r3, 0
1fff8af0:	0c7d      	bf      	0x1fff8bea	// 1fff8bea <ll_processExtScanIRQ+0x246>
                        if (isTargetAChecked == TRUE) {
1fff8af2:	9869      	ld.w      	r3, (r14, 0x24)
1fff8af4:	3b41      	cmpnei      	r3, 1
1fff8af6:	0863      	bt      	0x1fff8bbc	// 1fff8bbc <ll_processExtScanIRQ+0x218>
                        if (extScanInfo.scanType[extScanInfo.current_index] == LL_SCAN_ACTIVE
1fff8af8:	0376      	lrw      	r3, 0x1fff1500	// 1fff8d1c <ll_processExtScanIRQ+0x378>
1fff8afa:	0356      	lrw      	r2, 0x1fff1500	// 1fff8d1c <ll_processExtScanIRQ+0x378>
1fff8afc:	837c      	ld.b      	r3, (r3, 0x1c)
1fff8afe:	60c8      	addu      	r3, r2
1fff8b00:	836c      	ld.b      	r3, (r3, 0xc)
1fff8b02:	b869      	st.w      	r3, (r14, 0x24)
1fff8b04:	3b41      	cmpnei      	r3, 1
1fff8b06:	0caa      	bf      	0x1fff8c5a	// 1fff8c5a <ll_processExtScanIRQ+0x2b6>
    uint8   bSendingScanReq = FALSE;
1fff8b08:	3300      	movi      	r3, 0
1fff8b0a:	b869      	st.w      	r3, (r14, 0x24)
1fff8b0c:	055b      	br      	0x1fff8dc2	// 1fff8dc2 <ll_processExtScanIRQ+0x41e>
                                rpaListIndex = ll_getRPAListEntry(&ext_adv_hdr.advA[0]);
1fff8b0e:	1319      	lrw      	r0, 0x1fff1551	// 1fff8cf0 <ll_processExtScanIRQ+0x34c>
1fff8b10:	e0001052 	bsr      	0x1fffabb4	// 1fffabb4 <check_before_startup+0x4dc>
                uint8    isTargetAChecked = FALSE;
1fff8b14:	3300      	movi      	r3, 0
                                rpaListIndex = ll_getRPAListEntry(&ext_adv_hdr.advA[0]);
1fff8b16:	6d03      	mov      	r4, r0
                uint8    isTargetAChecked = FALSE;
1fff8b18:	b869      	st.w      	r3, (r14, 0x24)
1fff8b1a:	07c9      	br      	0x1fff8aac	// 1fff8aac <ll_processExtScanIRQ+0x108>
                                if (ext_adv_hdr.advA[0] == g_llResolvinglist[i].peerAddr[0]
1fff8b1c:	8761      	ld.b      	r3, (r7, 0x1)
                                    && ext_adv_hdr.advA[4] == g_llResolvinglist[i].peerAddr[4]
1fff8b1e:	87c5      	ld.b      	r6, (r7, 0x5)
                                if (ext_adv_hdr.advA[0] == g_llResolvinglist[i].peerAddr[0]
1fff8b20:	b869      	st.w      	r3, (r14, 0x24)
                                    && ext_adv_hdr.advA[1] == g_llResolvinglist[i].peerAddr[1]
1fff8b22:	8762      	ld.b      	r3, (r7, 0x2)
                                    && ext_adv_hdr.advA[4] == g_llResolvinglist[i].peerAddr[4]
1fff8b24:	3400      	movi      	r4, 0
                                    && ext_adv_hdr.advA[1] == g_llResolvinglist[i].peerAddr[1]
1fff8b26:	b86a      	st.w      	r3, (r14, 0x28)
                                    && ext_adv_hdr.advA[2] == g_llResolvinglist[i].peerAddr[2]
1fff8b28:	8763      	ld.b      	r3, (r7, 0x3)
1fff8b2a:	302e      	movi      	r0, 46
1fff8b2c:	b86f      	st.w      	r3, (r14, 0x3c)
                                    && ext_adv_hdr.advA[3] == g_llResolvinglist[i].peerAddr[3]
1fff8b2e:	8764      	ld.b      	r3, (r7, 0x4)
1fff8b30:	b870      	st.w      	r3, (r14, 0x40)
1fff8b32:	137c      	lrw      	r3, 0x1fff0fd4	// 1fff8d20 <ll_processExtScanIRQ+0x37c>
1fff8b34:	b872      	st.w      	r3, (r14, 0x48)
                                if (ext_adv_hdr.advA[0] == g_llResolvinglist[i].peerAddr[0]
1fff8b36:	d8e30021 	ld.b      	r7, (r3, 0x21)
1fff8b3a:	9829      	ld.w      	r1, (r14, 0x24)
1fff8b3c:	645e      	cmpne      	r7, r1
1fff8b3e:	0831      	bt      	0x1fff8ba0	// 1fff8ba0 <ll_processExtScanIRQ+0x1fc>
                                    && ext_adv_hdr.advA[1] == g_llResolvinglist[i].peerAddr[1]
1fff8b40:	d8e30022 	ld.b      	r7, (r3, 0x22)
1fff8b44:	982a      	ld.w      	r1, (r14, 0x28)
1fff8b46:	645e      	cmpne      	r7, r1
1fff8b48:	082c      	bt      	0x1fff8ba0	// 1fff8ba0 <ll_processExtScanIRQ+0x1fc>
                                    && ext_adv_hdr.advA[2] == g_llResolvinglist[i].peerAddr[2]
1fff8b4a:	d8e30023 	ld.b      	r7, (r3, 0x23)
1fff8b4e:	982f      	ld.w      	r1, (r14, 0x3c)
1fff8b50:	645e      	cmpne      	r7, r1
1fff8b52:	0827      	bt      	0x1fff8ba0	// 1fff8ba0 <ll_processExtScanIRQ+0x1fc>
                                    && ext_adv_hdr.advA[3] == g_llResolvinglist[i].peerAddr[3]
1fff8b54:	d8e30024 	ld.b      	r7, (r3, 0x24)
1fff8b58:	9830      	ld.w      	r1, (r14, 0x40)
1fff8b5a:	645e      	cmpne      	r7, r1
1fff8b5c:	0822      	bt      	0x1fff8ba0	// 1fff8ba0 <ll_processExtScanIRQ+0x1fc>
                                    && ext_adv_hdr.advA[4] == g_llResolvinglist[i].peerAddr[4]
1fff8b5e:	d8e30025 	ld.b      	r7, (r3, 0x25)
1fff8b62:	659e      	cmpne      	r7, r6
1fff8b64:	081e      	bt      	0x1fff8ba0	// 1fff8ba0 <ll_processExtScanIRQ+0x1fc>
                                    && ext_adv_hdr.advA[5] == g_llResolvinglist[i].peerAddr[5]) {
1fff8b66:	d8e30026 	ld.b      	r7, (r3, 0x26)
1fff8b6a:	649e      	cmpne      	r7, r2
1fff8b6c:	081a      	bt      	0x1fff8ba0	// 1fff8ba0 <ll_processExtScanIRQ+0x1fc>
                                    if (g_llResolvinglist[i].privacyMode == NETWORK_PRIVACY_MODE &&
1fff8b6e:	302e      	movi      	r0, 46
1fff8b70:	7c10      	mult      	r0, r4
1fff8b72:	9832      	ld.w      	r1, (r14, 0x48)
1fff8b74:	6040      	addu      	r1, r0
1fff8b76:	d8610027 	ld.b      	r3, (r1, 0x27)
1fff8b7a:	3b40      	cmpnei      	r3, 0
1fff8b7c:	0c07      	bf      	0x1fff8b8a	// 1fff8b8a <ll_processExtScanIRQ+0x1e6>
                                        rpaListIndex = i;
1fff8b7e:	7510      	zextb      	r4, r4
                uint8    isTargetAChecked = FALSE;
1fff8b80:	3300      	movi      	r3, 0
        uint8_t  bWlRlCheckOk = TRUE;
1fff8b82:	3601      	movi      	r6, 1
                uint8    isTargetAChecked = FALSE;
1fff8b84:	b869      	st.w      	r3, (r14, 0x24)
                    peerAddr = &ext_adv_hdr.advA[0];
1fff8b86:	127b      	lrw      	r3, 0x1fff1551	// 1fff8cf0 <ll_processExtScanIRQ+0x34c>
1fff8b88:	0416      	br      	0x1fff8bb4	// 1fff8bb4 <ll_processExtScanIRQ+0x210>
                                        !ll_isIrkAllZero(g_llResolvinglist[i].peerIrk)) {
1fff8b8a:	1367      	lrw      	r3, 0x1fff0fe4	// 1fff8d24 <ll_processExtScanIRQ+0x380>
1fff8b8c:	600c      	addu      	r0, r3
1fff8b8e:	e0000dc1 	bsr      	0x1fffa710	// 1fffa710 <check_before_startup+0x38>
1fff8b92:	6d83      	mov      	r6, r0
                                    if (g_llResolvinglist[i].privacyMode == NETWORK_PRIVACY_MODE &&
1fff8b94:	3840      	cmpnei      	r0, 0
1fff8b96:	0bf4      	bt      	0x1fff8b7e	// 1fff8b7e <ll_processExtScanIRQ+0x1da>
                uint8    isTargetAChecked = FALSE;
1fff8b98:	3300      	movi      	r3, 0
        uint8_t  rpaListIndex = LL_RESOLVINGLIST_ENTRY_NUM;
1fff8b9a:	3408      	movi      	r4, 8
                uint8    isTargetAChecked = FALSE;
1fff8b9c:	b869      	st.w      	r3, (r14, 0x24)
1fff8b9e:	07f4      	br      	0x1fff8b86	// 1fff8b86 <ll_processExtScanIRQ+0x1e2>
                            for (int i = 0; i < LL_RESOLVINGLIST_ENTRY_NUM; i++) {
1fff8ba0:	2400      	addi      	r4, 1
1fff8ba2:	3c48      	cmpnei      	r4, 8
1fff8ba4:	60c0      	addu      	r3, r0
1fff8ba6:	0bc8      	bt      	0x1fff8b36	// 1fff8b36 <ll_processExtScanIRQ+0x192>
1fff8ba8:	07ec      	br      	0x1fff8b80	// 1fff8b80 <ll_processExtScanIRQ+0x1dc>
                uint8    isTargetAChecked = FALSE;
1fff8baa:	3300      	movi      	r3, 0
        uint8_t  bWlRlCheckOk = TRUE;
1fff8bac:	3601      	movi      	r6, 1
        uint8_t  rpaListIndex = LL_RESOLVINGLIST_ENTRY_NUM;
1fff8bae:	3408      	movi      	r4, 8
                uint8    isTargetAChecked = FALSE;
1fff8bb0:	b869      	st.w      	r3, (r14, 0x24)
                    peerAddr = &ext_adv_hdr.advA[0];
1fff8bb2:	5d62      	addi      	r3, r5, 1
1fff8bb4:	b86a      	st.w      	r3, (r14, 0x28)
1fff8bb6:	0783      	br      	0x1fff8abc	// 1fff8abc <ll_processExtScanIRQ+0x118>
                            bWlRlCheckOk = FALSE;
1fff8bb8:	3600      	movi      	r6, 0
1fff8bba:	07e6      	br      	0x1fff8b86	// 1fff8b86 <ll_processExtScanIRQ+0x1e2>
                        } else if ((ext_adv_hdr.targetA[5] & RANDOM_ADDR_HDR) == PRIVATE_RESOLVE_ADDR_HDR) {
1fff8bbc:	856c      	ld.b      	r3, (r5, 0xc)
1fff8bbe:	e46320c0 	andi      	r3, r3, 192
1fff8bc2:	eb430040 	cmpnei      	r3, 64
1fff8bc6:	0817      	bt      	0x1fff8bf4	// 1fff8bf4 <ll_processExtScanIRQ+0x250>
                            if (rpaListIndex >= LL_RESOLVINGLIST_ENTRY_NUM
1fff8bc8:	3c07      	cmphsi      	r4, 8
1fff8bca:	0952      	bt      	0x1fff8e6e	// 1fff8e6e <ll_processExtScanIRQ+0x4ca>
                                || (ll_isIrkAllZero(g_llResolvinglist[rpaListIndex].localIrk)    // all-0 local IRK
1fff8bcc:	372e      	movi      	r7, 46
1fff8bce:	1275      	lrw      	r3, 0x1fff0fd4	// 1fff8d20 <ll_processExtScanIRQ+0x37c>
1fff8bd0:	7dd0      	mult      	r7, r4
1fff8bd2:	61cc      	addu      	r7, r3
1fff8bd4:	6c1f      	mov      	r0, r7
1fff8bd6:	e0000d9d 	bsr      	0x1fffa710	// 1fffa710 <check_before_startup+0x38>
1fff8bda:	3840      	cmpnei      	r0, 0
1fff8bdc:	0949      	bt      	0x1fff8e6e	// 1fff8e6e <ll_processExtScanIRQ+0x4ca>
                                    || ll_ResolveRandomAddrs(g_llResolvinglist[rpaListIndex].localIrk, &ext_adv_hdr.targetA[0]) != SUCCESS)) {
1fff8bde:	1233      	lrw      	r1, 0x1fff1557	// 1fff8d28 <ll_processExtScanIRQ+0x384>
1fff8be0:	6c1f      	mov      	r0, r7
1fff8be2:	e0000deb 	bsr      	0x1fffa7b8	// 1fffa7b8 <check_before_startup+0xe0>
1fff8be6:	3840      	cmpnei      	r0, 0
                                || ext_adv_hdr.targetA[5] != localAddr[5]) {      // not check rxAdd, to add if required
1fff8be8:	0943      	bt      	0x1fff8e6e	// 1fff8e6e <ll_processExtScanIRQ+0x4ca>
                    if (bWlRlCheckOk == TRUE) {
1fff8bea:	3e41      	cmpnei      	r6, 1
1fff8bec:	0f86      	bf      	0x1fff8af8	// 1fff8af8 <ll_processExtScanIRQ+0x154>
    uint8   bSendingScanReq = FALSE;
1fff8bee:	3300      	movi      	r3, 0
1fff8bf0:	b869      	st.w      	r3, (r14, 0x24)
1fff8bf2:	053e      	br      	0x1fff8e6e	// 1fff8e6e <ll_processExtScanIRQ+0x4ca>
                            if ((extScanInfo.ownAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC || extScanInfo.ownAddrType == LL_DEV_ADDR_TYPE_RPA_RANDOM)
1fff8bf4:	126a      	lrw      	r3, 0x1fff1500	// 1fff8d1c <ll_processExtScanIRQ+0x378>
1fff8bf6:	8361      	ld.b      	r3, (r3, 0x1)
1fff8bf8:	2b01      	subi      	r3, 2
1fff8bfa:	74cc      	zextb      	r3, r3
1fff8bfc:	3b01      	cmphsi      	r3, 2
1fff8bfe:	080d      	bt      	0x1fff8c18	// 1fff8c18 <ll_processExtScanIRQ+0x274>
                                && (rpaListIndex < LL_RESOLVINGLIST_ENTRY_NUM
1fff8c00:	3c07      	cmphsi      	r4, 8
1fff8c02:	080b      	bt      	0x1fff8c18	// 1fff8c18 <ll_processExtScanIRQ+0x274>
                                    && !ll_isIrkAllZero(g_llResolvinglist[rpaListIndex].localIrk))) {
1fff8c04:	302e      	movi      	r0, 46
1fff8c06:	1267      	lrw      	r3, 0x1fff0fd4	// 1fff8d20 <ll_processExtScanIRQ+0x37c>
1fff8c08:	7c10      	mult      	r0, r4
1fff8c0a:	600c      	addu      	r0, r3
1fff8c0c:	e0000d82 	bsr      	0x1fffa710	// 1fffa710 <check_before_startup+0x38>
                                bWlRlCheckOk = FALSE;
1fff8c10:	3300      	movi      	r3, 0
1fff8c12:	3840      	cmpnei      	r0, 0
1fff8c14:	c4c30c20 	incf      	r6, r3, 0
                            if (extScanInfo.ownAddrType == LL_DEV_ADDR_TYPE_RPA_RANDOM || extScanInfo.ownAddrType == LL_DEV_ADDR_TYPE_RANDOM) {
1fff8c18:	1261      	lrw      	r3, 0x1fff1500	// 1fff8d1c <ll_processExtScanIRQ+0x378>
1fff8c1a:	8361      	ld.b      	r3, (r3, 0x1)
1fff8c1c:	e46320fd 	andi      	r3, r3, 253
1fff8c20:	3b41      	cmpnei      	r3, 1
1fff8c22:	081a      	bt      	0x1fff8c56	// 1fff8c56 <ll_processExtScanIRQ+0x2b2>
                                localAddr = ownRandomAddr;
1fff8c24:	1262      	lrw      	r3, 0x1fff1548	// 1fff8d2c <ll_processExtScanIRQ+0x388>
                                localAddr = ownPublicAddr;
1fff8c26:	8340      	ld.b      	r2, (r3, 0x0)
                            if (ext_adv_hdr.targetA[0] != localAddr[0]
1fff8c28:	8527      	ld.b      	r1, (r5, 0x7)
1fff8c2a:	6486      	cmpne      	r1, r2
1fff8c2c:	0921      	bt      	0x1fff8e6e	// 1fff8e6e <ll_processExtScanIRQ+0x4ca>
                                || ext_adv_hdr.targetA[1] != localAddr[1]
1fff8c2e:	8528      	ld.b      	r1, (r5, 0x8)
1fff8c30:	8341      	ld.b      	r2, (r3, 0x1)
1fff8c32:	6486      	cmpne      	r1, r2
1fff8c34:	091d      	bt      	0x1fff8e6e	// 1fff8e6e <ll_processExtScanIRQ+0x4ca>
                                || ext_adv_hdr.targetA[2] != localAddr[2]
1fff8c36:	8529      	ld.b      	r1, (r5, 0x9)
1fff8c38:	8342      	ld.b      	r2, (r3, 0x2)
1fff8c3a:	6486      	cmpne      	r1, r2
1fff8c3c:	0919      	bt      	0x1fff8e6e	// 1fff8e6e <ll_processExtScanIRQ+0x4ca>
                                || ext_adv_hdr.targetA[3] != localAddr[3]
1fff8c3e:	852a      	ld.b      	r1, (r5, 0xa)
1fff8c40:	8343      	ld.b      	r2, (r3, 0x3)
1fff8c42:	6486      	cmpne      	r1, r2
1fff8c44:	0915      	bt      	0x1fff8e6e	// 1fff8e6e <ll_processExtScanIRQ+0x4ca>
                                || ext_adv_hdr.targetA[4] != localAddr[4]
1fff8c46:	852b      	ld.b      	r1, (r5, 0xb)
1fff8c48:	8344      	ld.b      	r2, (r3, 0x4)
1fff8c4a:	6486      	cmpne      	r1, r2
1fff8c4c:	0911      	bt      	0x1fff8e6e	// 1fff8e6e <ll_processExtScanIRQ+0x4ca>
                                || ext_adv_hdr.targetA[5] != localAddr[5]) {      // not check rxAdd, to add if required
1fff8c4e:	854c      	ld.b      	r2, (r5, 0xc)
1fff8c50:	8365      	ld.b      	r3, (r3, 0x5)
1fff8c52:	64ca      	cmpne      	r2, r3
1fff8c54:	07ca      	br      	0x1fff8be8	// 1fff8be8 <ll_processExtScanIRQ+0x244>
                                localAddr = ownPublicAddr;
1fff8c56:	1177      	lrw      	r3, 0x1fff1185	// 1fff8d30 <ll_processExtScanIRQ+0x38c>
1fff8c58:	07e7      	br      	0x1fff8c26	// 1fff8c26 <ll_processExtScanIRQ+0x282>
                            && adv_mode == LL_EXT_ADV_MODE_SC       // only scannable adv accept AUX_SCAN_REQ
1fff8c5a:	986c      	ld.w      	r3, (r14, 0x30)
1fff8c5c:	3b42      	cmpnei      	r3, 2
1fff8c5e:	0b55      	bt      	0x1fff8b08	// 1fff8b08 <ll_processExtScanIRQ+0x164>
                            && !(ext_adv_hdr.header & LE_EXT_HDR_AUX_PTR_PRESENT_BITMASK)) {
1fff8c60:	8560      	ld.b      	r3, (r5, 0x0)
1fff8c62:	e4632010 	andi      	r3, r3, 16
1fff8c66:	3b40      	cmpnei      	r3, 0
1fff8c68:	0b50      	bt      	0x1fff8b08	// 1fff8b08 <ll_processExtScanIRQ+0x164>
                            if (rpaListIndex < LL_RESOLVINGLIST_ENTRY_NUM &&
1fff8c6a:	3c07      	cmphsi      	r4, 8
1fff8c6c:	086c      	bt      	0x1fff8d44	// 1fff8d44 <ll_processExtScanIRQ+0x3a0>
                                !ll_isIrkAllZero(g_llResolvinglist[rpaListIndex].localIrk)) {
1fff8c6e:	362e      	movi      	r6, 46
1fff8c70:	116c      	lrw      	r3, 0x1fff0fd4	// 1fff8d20 <ll_processExtScanIRQ+0x37c>
1fff8c72:	7d90      	mult      	r6, r4
1fff8c74:	618c      	addu      	r6, r3
1fff8c76:	6c1b      	mov      	r0, r6
1fff8c78:	e0000d4c 	bsr      	0x1fffa710	// 1fffa710 <check_before_startup+0x38>
                            if (rpaListIndex < LL_RESOLVINGLIST_ENTRY_NUM &&
1fff8c7c:	3840      	cmpnei      	r0, 0
1fff8c7e:	0863      	bt      	0x1fff8d44	// 1fff8d44 <ll_processExtScanIRQ+0x3a0>
                                ll_CalcRandomAddr(g_llResolvinglist[rpaListIndex].localIrk, &g_tx_adv_buf.data[0]);
1fff8c80:	112d      	lrw      	r1, 0x1fff16f2	// 1fff8d34 <ll_processExtScanIRQ+0x390>
1fff8c82:	6c1b      	mov      	r0, r6
1fff8c84:	e0000d52 	bsr      	0x1fffa728	// 1fffa728 <check_before_startup+0x50>
                            g_tx_adv_buf.txheader = 0xC03;
1fff8c88:	ea030c03 	movi      	r3, 3075
1fff8c8c:	11cb      	lrw      	r6, 0x1fff16ec	// 1fff8d38 <ll_processExtScanIRQ+0x394>
                            ll_hw_set_tx_rx_interval(10);
1fff8c8e:	300a      	movi      	r0, 10
                            g_tx_adv_buf.txheader = 0xC03;
1fff8c90:	ae62      	st.h      	r3, (r6, 0x4)
                            g_same_rf_channel_flag = TRUE;
1fff8c92:	3301      	movi      	r3, 1
1fff8c94:	11ea      	lrw      	r7, 0x1fff0e2c	// 1fff8d3c <ll_processExtScanIRQ+0x398>
1fff8c96:	a760      	st.b      	r3, (r7, 0x0)
                            ll_hw_set_tx_rx_interval(10);
1fff8c98:	e0000f64 	bsr      	0x1fffab60	// 1fffab60 <check_before_startup+0x488>
                            ll_hw_set_rx_timeout(500);
1fff8c9c:	30fa      	movi      	r0, 250
1fff8c9e:	4001      	lsli      	r0, r0, 1
1fff8ca0:	e0000dce 	bsr      	0x1fffa83c	// 1fffa83c <check_before_startup+0x164>
                            set_max_length(0xFF);               // add 2020-03-10
1fff8ca4:	30ff      	movi      	r0, 255
1fff8ca6:	e0000f09 	bsr      	0x1fffaab8	// 1fffaab8 <check_before_startup+0x3e0>
                            T2 = read_current_fine_time();
1fff8caa:	e0000f37 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
                            delay = (T2 > ISR_entry_time) ? (T2 - ISR_entry_time) : (BASE_TIME_UNITS - ISR_entry_time + T2);
1fff8cae:	1165      	lrw      	r3, 0x1fff0e1c	// 1fff8d40 <ll_processExtScanIRQ+0x39c>
1fff8cb0:	9360      	ld.w      	r3, (r3, 0x0)
1fff8cb2:	640c      	cmphs      	r3, r0
1fff8cb4:	600e      	subu      	r0, r3
1fff8cb6:	084d      	bt      	0x1fff8d50	// 1fff8d50 <ll_processExtScanIRQ+0x3ac>
                            if ((delay > 140 - pGlobal_config[LL_ADV_TO_SCAN_REQ_DELAY] - pGlobal_config[LL_HW_PLL_DELAY])
1fff8cb8:	986f      	ld.w      	r3, (r14, 0x3c)
1fff8cba:	9360      	ld.w      	r3, (r3, 0x0)
1fff8cbc:	d8432027 	ld.w      	r2, (r3, 0x9c)
1fff8cc0:	9331      	ld.w      	r1, (r3, 0x44)
1fff8cc2:	338c      	movi      	r3, 140
1fff8cc4:	6048      	addu      	r1, r2
1fff8cc6:	60c6      	subu      	r3, r1
1fff8cc8:	640c      	cmphs      	r3, r0
1fff8cca:	1070      	lrw      	r3, 0x1fff0e2d	// 1fff8d08 <ll_processExtScanIRQ+0x364>
1fff8ccc:	0846      	bt      	0x1fff8d58	// 1fff8d58 <ll_processExtScanIRQ+0x3b4>
                                && (rpaListIndex < LL_RESOLVINGLIST_ENTRY_NUM)) {
1fff8cce:	3c07      	cmphsi      	r4, 8
1fff8cd0:	0844      	bt      	0x1fff8d58	// 1fff8d58 <ll_processExtScanIRQ+0x3b4>
                                isPeerRpaStore = TRUE;
1fff8cd2:	3201      	movi      	r2, 1
                                osal_memcpy(&currentPeerRpa[0], &ext_adv_hdr.advA[0], 6);
1fff8cd4:	1027      	lrw      	r1, 0x1fff1551	// 1fff8cf0 <ll_processExtScanIRQ+0x34c>
                                isPeerRpaStore = TRUE;
1fff8cd6:	a340      	st.b      	r2, (r3, 0x0)
                                osal_memcpy(&currentPeerRpa[0], &ext_adv_hdr.advA[0], 6);
1fff8cd8:	3206      	movi      	r2, 6
                                storeRpaListIndex = rpaListIndex;
1fff8cda:	106e      	lrw      	r3, 0x1fff191b	// 1fff8d10 <ll_processExtScanIRQ+0x36c>
                                osal_memcpy(&currentPeerRpa[0], &ext_adv_hdr.advA[0], 6);
1fff8cdc:	100c      	lrw      	r0, 0x1fff1914	// 1fff8d0c <ll_processExtScanIRQ+0x368>
                                storeRpaListIndex = rpaListIndex;
1fff8cde:	a380      	st.b      	r4, (r3, 0x0)
                                osal_memcpy(&currentPeerRpa[0], &ext_adv_hdr.advA[0], 6);
1fff8ce0:	e0000f58 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
                                g_same_rf_channel_flag = FALSE;
1fff8ce4:	3300      	movi      	r3, 0
1fff8ce6:	a760      	st.b      	r3, (r7, 0x0)
1fff8ce8:	0710      	br      	0x1fff8b08	// 1fff8b08 <ll_processExtScanIRQ+0x164>
1fff8cea:	0000      	bkpt
1fff8cec:	1fff15d0 	.long	0x1fff15d0
1fff8cf0:	1fff1551 	.long	0x1fff1551
1fff8cf4:	1fff1550 	.long	0x1fff1550
1fff8cf8:	1fff17fc 	.long	0x1fff17fc
1fff8cfc:	1fff17f8 	.long	0x1fff17f8
1fff8d00:	1fff12e0 	.long	0x1fff12e0
1fff8d04:	1fff0ddc 	.long	0x1fff0ddc
1fff8d08:	1fff0e2d 	.long	0x1fff0e2d
1fff8d0c:	1fff1914 	.long	0x1fff1914
1fff8d10:	1fff191b 	.long	0x1fff191b
1fff8d14:	1fff0ff5 	.long	0x1fff0ff5
1fff8d18:	1fffa670 	.long	0x1fffa670
1fff8d1c:	1fff1500 	.long	0x1fff1500
1fff8d20:	1fff0fd4 	.long	0x1fff0fd4
1fff8d24:	1fff0fe4 	.long	0x1fff0fe4
1fff8d28:	1fff1557 	.long	0x1fff1557
1fff8d2c:	1fff1548 	.long	0x1fff1548
1fff8d30:	1fff1185 	.long	0x1fff1185
1fff8d34:	1fff16f2 	.long	0x1fff16f2
1fff8d38:	1fff16ec 	.long	0x1fff16ec
1fff8d3c:	1fff0e2c 	.long	0x1fff0e2c
1fff8d40:	1fff0e1c 	.long	0x1fff0e1c
                                osal_memcpy((uint8 *)&g_tx_adv_buf.data[0], &extScanInfo.ownAddr[0], 6);
1fff8d44:	3206      	movi      	r2, 6
1fff8d46:	012a      	lrw      	r1, 0x1fff1502	// 1fff9098 <ll_processExtScanIRQ+0x6f4>
1fff8d48:	010a      	lrw      	r0, 0x1fff16f2	// 1fff909c <ll_processExtScanIRQ+0x6f8>
1fff8d4a:	e0000f23 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
1fff8d4e:	079d      	br      	0x1fff8c88	// 1fff8c88 <ll_processExtScanIRQ+0x2e4>
                            delay = (T2 > ISR_entry_time) ? (T2 - ISR_entry_time) : (BASE_TIME_UNITS - ISR_entry_time + T2);
1fff8d50:	c6a05023 	bmaski      	r3, 22
1fff8d54:	600c      	addu      	r0, r3
1fff8d56:	07b1      	br      	0x1fff8cb8	// 1fff8cb8 <ll_processExtScanIRQ+0x314>
                                delay = 118 - delay - pGlobal_config[LL_ADV_TO_SCAN_REQ_DELAY];
1fff8d58:	3376      	movi      	r3, 118
1fff8d5a:	60ca      	subu      	r3, r2
1fff8d5c:	5b81      	subu      	r4, r3, r0
                                ll_hw_set_trx();             // set LL HW as single TRx mode
1fff8d5e:	e0000d87 	bsr      	0x1fffa86c	// 1fffa86c <check_before_startup+0x194>
                                                     pGlobal_config[LL_HW_AFE_DELAY],
1fff8d62:	986f      	ld.w      	r3, (r14, 0x3c)
                                ll_hw_set_trx_settle(delay,                               // set BB delay, about 80us in 16MHz HCLK
1fff8d64:	7410      	zextb      	r0, r4
                                                     pGlobal_config[LL_HW_AFE_DELAY],
1fff8d66:	9360      	ld.w      	r3, (r3, 0x0)
                                ll_hw_set_trx_settle(delay,                               // set BB delay, about 80us in 16MHz HCLK
1fff8d68:	d8230040 	ld.b      	r1, (r3, 0x40)
1fff8d6c:	d8430044 	ld.b      	r2, (r3, 0x44)
1fff8d70:	e0000fe8 	bsr      	0x1fffad40	// 1fffad40 <check_before_startup+0x668>
                                ll_hw_go();
1fff8d74:	e0000ef0 	bsr      	0x1fffab54	// 1fffab54 <check_before_startup+0x47c>
                                g_pmCounters.ll_send_scan_req_cnt++;
1fff8d78:	0155      	lrw      	r2, 0x1fff12e0	// 1fff90a0 <ll_processExtScanIRQ+0x6fc>
1fff8d7a:	926f      	ld.w      	r3, (r2, 0x3c)
1fff8d7c:	2300      	addi      	r3, 1
1fff8d7e:	b26f      	st.w      	r3, (r2, 0x3c)
                                llWaitingIrq = TRUE;
1fff8d80:	3201      	movi      	r2, 1
1fff8d82:	0176      	lrw      	r3, 0x1fff0df8	// 1fff90a4 <ll_processExtScanIRQ+0x700>
1fff8d84:	b340      	st.w      	r2, (r3, 0x0)
                                ll_hw_rst_rfifo();
1fff8d86:	e0000e51 	bsr      	0x1fffaa28	// 1fffaa28 <check_before_startup+0x350>
                                ll_hw_rst_tfifo();
1fff8d8a:	e0000f8d 	bsr      	0x1fffaca4	// 1fffaca4 <check_before_startup+0x5cc>
                                ll_hw_ign_rfifo(LL_HW_IGN_CRC | LL_HW_IGN_EMP);
1fff8d8e:	3003      	movi      	r0, 3
1fff8d90:	e0000f42 	bsr      	0x1fffac14	// 1fffac14 <check_before_startup+0x53c>
                                g_tx_adv_buf.data[6]  = ext_adv_hdr.advA[0];
1fff8d94:	8561      	ld.b      	r3, (r5, 0x1)
                                ll_hw_write_tfifo((uint8 *) & (g_tx_adv_buf.txheader),
1fff8d96:	011a      	lrw      	r0, 0x1fff16f0	// 1fff90a8 <ll_processExtScanIRQ+0x704>
                                g_tx_adv_buf.data[6]  = ext_adv_hdr.advA[0];
1fff8d98:	a66c      	st.b      	r3, (r6, 0xc)
                                g_tx_adv_buf.data[7]  = ext_adv_hdr.advA[1];
1fff8d9a:	8562      	ld.b      	r3, (r5, 0x2)
                                                  ((g_tx_adv_buf.txheader & 0xff00) >> 8) + 2);   // payload length + header length(2)
1fff8d9c:	8e22      	ld.h      	r1, (r6, 0x4)
                                g_tx_adv_buf.data[7]  = ext_adv_hdr.advA[1];
1fff8d9e:	a66d      	st.b      	r3, (r6, 0xd)
                                g_tx_adv_buf.data[8]  = ext_adv_hdr.advA[2];
1fff8da0:	8563      	ld.b      	r3, (r5, 0x3)
                                                  ((g_tx_adv_buf.txheader & 0xff00) >> 8) + 2);   // payload length + header length(2)
1fff8da2:	4928      	lsri      	r1, r1, 8
                                g_tx_adv_buf.data[8]  = ext_adv_hdr.advA[2];
1fff8da4:	a66e      	st.b      	r3, (r6, 0xe)
                                g_tx_adv_buf.data[9]  = ext_adv_hdr.advA[3];
1fff8da6:	8564      	ld.b      	r3, (r5, 0x4)
                                ll_hw_write_tfifo((uint8 *) & (g_tx_adv_buf.txheader),
1fff8da8:	2101      	addi      	r1, 2
                                g_tx_adv_buf.data[9]  = ext_adv_hdr.advA[3];
1fff8daa:	a66f      	st.b      	r3, (r6, 0xf)
                                g_tx_adv_buf.data[10] = ext_adv_hdr.advA[4];
1fff8dac:	8565      	ld.b      	r3, (r5, 0x5)
1fff8dae:	a670      	st.b      	r3, (r6, 0x10)
                                g_tx_adv_buf.data[11] = ext_adv_hdr.advA[5];
1fff8db0:	8566      	ld.b      	r3, (r5, 0x6)
1fff8db2:	a671      	st.b      	r3, (r6, 0x11)
                                ll_hw_write_tfifo((uint8 *) & (g_tx_adv_buf.txheader),
1fff8db4:	e0000c96 	bsr      	0x1fffa6e0	// 1fffa6e0 <check_before_startup+0x8>
                                g_same_rf_channel_flag = FALSE;
1fff8db8:	3300      	movi      	r3, 0
                                isPeerRpaStore = FALSE;
1fff8dba:	3200      	movi      	r2, 0
                                g_same_rf_channel_flag = FALSE;
1fff8dbc:	a760      	st.b      	r3, (r7, 0x0)
                                isPeerRpaStore = FALSE;
1fff8dbe:	0263      	lrw      	r3, 0x1fff0e2d	// 1fff90ac <ll_processExtScanIRQ+0x708>
1fff8dc0:	a340      	st.b      	r2, (r3, 0x0)
                    ext_hdr_len =  g_rx_adv_buf.data[0] & 0x3f;
1fff8dc2:	986e      	ld.w      	r3, (r14, 0x38)
1fff8dc4:	e403203f 	andi      	r0, r3, 63
                        adv_data_len = payload_len - ext_hdr_len - 1;
1fff8dc8:	986d      	ld.w      	r3, (r14, 0x34)
1fff8dca:	5b41      	subu      	r2, r3, r0
1fff8dcc:	2a00      	subi      	r2, 1
1fff8dce:	74c8      	zextb      	r3, r2
                        rssi  =  -(pktFoot1 >> 24);
1fff8dd0:	3700      	movi      	r7, 0
                        adv_data_len = payload_len - ext_hdr_len - 1;
1fff8dd2:	b86d      	st.w      	r3, (r14, 0x34)
                        rssi  =  -(pktFoot1 >> 24);
1fff8dd4:	9875      	ld.w      	r3, (r14, 0x54)
1fff8dd6:	4b78      	lsri      	r3, r3, 24
1fff8dd8:	61ce      	subu      	r7, r3
                        if (ext_adv_hdr.header & LE_EXT_HDR_ADI_PRESENT_BITMASK) {
1fff8dda:	8560      	ld.b      	r3, (r5, 0x0)
1fff8ddc:	e4232008 	andi      	r1, r3, 8
                        rssi  =  -(pktFoot1 >> 24);
1fff8de0:	75de      	sextb      	r7, r7
                        if (ext_adv_hdr.header & LE_EXT_HDR_ADI_PRESENT_BITMASK) {
1fff8de2:	3940      	cmpnei      	r1, 0
1fff8de4:	0cbd      	bf      	0x1fff8f5e	// 1fff8f5e <ll_processExtScanIRQ+0x5ba>
                            adi = (ext_adv_hdr.adi & 0xF000) >> 12;
1fff8de6:	8dc7      	ld.h      	r6, (r5, 0xe)
1fff8de8:	4ecc      	lsri      	r6, r6, 12
                        if (ext_adv_hdr.header & LE_EXT_HDR_TX_PWR_PRESENT_BITMASK) {
1fff8dea:	e4232040 	andi      	r1, r3, 64
1fff8dee:	7598      	zextb      	r6, r6
1fff8df0:	3940      	cmpnei      	r1, 0
1fff8df2:	0cb8      	bf      	0x1fff8f62	// 1fff8f62 <ll_processExtScanIRQ+0x5be>
                            txPwr = ext_adv_hdr.txPower;
1fff8df4:	d885002a 	ld.b      	r4, (r5, 0x2a)
                        if (adv_data_len > 0 && !bSendingScanReq) {                                          // receive advData
1fff8df8:	984d      	ld.w      	r2, (r14, 0x34)
1fff8dfa:	3a40      	cmpnei      	r2, 0
1fff8dfc:	0cb8      	bf      	0x1fff8f6c	// 1fff8f6c <ll_processExtScanIRQ+0x5c8>
1fff8dfe:	9829      	ld.w      	r1, (r14, 0x24)
1fff8e00:	3940      	cmpnei      	r1, 0
1fff8e02:	08b5      	bt      	0x1fff8f6c	// 1fff8f6c <ll_processExtScanIRQ+0x5c8>
                            if (ext_adv_hdr.header & LE_EXT_HDR_TARGETA_PRESENT_BITMASK) {
1fff8e04:	e4232002 	andi      	r1, r3, 2
1fff8e08:	3940      	cmpnei      	r1, 0
1fff8e0a:	0cae      	bf      	0x1fff8f66	// 1fff8f66 <ll_processExtScanIRQ+0x5c2>
                                advEventType |= LE_ADV_PROP_DIRECT_BITMASK;
1fff8e0c:	982c      	ld.w      	r1, (r14, 0x30)
1fff8e0e:	ec210004 	ori      	r1, r1, 4
1fff8e12:	b82c      	st.w      	r1, (r14, 0x30)
                                if (ext_adv_hdr.advA[5] & RANDOM_ADDR_HDR) {          // TODO: decide the direct addr type
1fff8e14:	8526      	ld.b      	r1, (r5, 0x6)
1fff8e16:	e42120c0 	andi      	r1, r1, 192
                                directA = ext_adv_hdr.targetA;
1fff8e1a:	02b9      	lrw      	r5, 0x1fff1557	// 1fff90b0 <ll_processExtScanIRQ+0x70c>
                                if (ext_adv_hdr.advA[5] & RANDOM_ADDR_HDR) {          // TODO: decide the direct addr type
1fff8e1c:	3940      	cmpnei      	r1, 0
1fff8e1e:	c4000501 	mvc      	r1
                            uint8  directAddrType = 0;
1fff8e22:	7444      	zextb      	r1, r1
                            if (ext_adv_hdr.header & LE_EXT_HDR_AUX_PTR_PRESENT_BITMASK) { // more data
1fff8e24:	e4632010 	andi      	r3, r3, 16
1fff8e28:	3b40      	cmpnei      	r3, 0
1fff8e2a:	0c05      	bf      	0x1fff8e34	// 1fff8e34 <ll_processExtScanIRQ+0x490>
                                advEventType |= LE_ADV_PROP_MORE_DATA_BITMASK;
1fff8e2c:	986c      	ld.w      	r3, (r14, 0x30)
1fff8e2e:	ec630020 	ori      	r3, r3, 32
1fff8e32:	b86c      	st.w      	r3, (r14, 0x30)
                                                 extScanInfo.scanPHYs[extScanInfo.current_index],  // primary PHY
1fff8e34:	027f      	lrw      	r3, 0x1fff1500	// 1fff90b4 <ll_processExtScanIRQ+0x710>
                            LL_ExtAdvReportCback(advEventType,                          // event type
1fff8e36:	025f      	lrw      	r2, 0x1fff1500	// 1fff90b4 <ll_processExtScanIRQ+0x710>
                                                 extScanInfo.scanPHYs[extScanInfo.current_index],  // primary PHY
1fff8e38:	837c      	ld.b      	r3, (r3, 0x1c)
                            LL_ExtAdvReportCback(advEventType,                          // event type
1fff8e3a:	60c8      	addu      	r3, r2
                                                 &g_rx_adv_buf.data[ext_hdr_len + 1]);                // rest of payload
1fff8e3c:	0340      	lrw      	r2, 0x1fff17ff	// 1fff90b8 <ll_processExtScanIRQ+0x714>
1fff8e3e:	6008      	addu      	r0, r2
                            LL_ExtAdvReportCback(advEventType,                          // event type
1fff8e40:	984d      	ld.w      	r2, (r14, 0x34)
1fff8e42:	836a      	ld.b      	r3, (r3, 0xa)
1fff8e44:	b847      	st.w      	r2, (r14, 0x1c)
1fff8e46:	3200      	movi      	r2, 0
1fff8e48:	b808      	st.w      	r0, (r14, 0x20)
1fff8e4a:	b825      	st.w      	r1, (r14, 0x14)
1fff8e4c:	b844      	st.w      	r2, (r14, 0x10)
1fff8e4e:	b8a6      	st.w      	r5, (r14, 0x18)
1fff8e50:	b8e3      	st.w      	r7, (r14, 0xc)
1fff8e52:	b882      	st.w      	r4, (r14, 0x8)
1fff8e54:	b8c1      	st.w      	r6, (r14, 0x4)
1fff8e56:	982b      	ld.w      	r1, (r14, 0x2c)
1fff8e58:	980c      	ld.w      	r0, (r14, 0x30)
1fff8e5a:	0348      	lrw      	r2, 0x1fff1500	// 1fff90b4 <ll_processExtScanIRQ+0x710>
1fff8e5c:	825d      	ld.b      	r2, (r2, 0x1d)
1fff8e5e:	b840      	st.w      	r2, (r14, 0x0)
1fff8e60:	984a      	ld.w      	r2, (r14, 0x28)
1fff8e62:	e3ffe853 	bsr      	0x1fff5f08	// 1fff5f08 <LL_ExtAdvReportCback>
                            g_pmCounters.ll_recv_adv_pkt_cnt ++;
1fff8e66:	0350      	lrw      	r2, 0x1fff12e0	// 1fff90a0 <ll_processExtScanIRQ+0x6fc>
1fff8e68:	926e      	ld.w      	r3, (r2, 0x38)
1fff8e6a:	2300      	addi      	r3, 1
1fff8e6c:	b26e      	st.w      	r3, (r2, 0x38)
    patch_ISR_outTime = read_current_fine_time();
1fff8e6e:	e0000e55 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
1fff8e72:	036c      	lrw      	r3, 0x1fffb8d0	// 1fff90bc <ll_processExtScanIRQ+0x718>
1fff8e74:	b300      	st.w      	r0, (r3, 0x0)
    if (extScanInfo.enable) {
1fff8e76:	036f      	lrw      	r3, 0x1fff1500	// 1fff90b4 <ll_processExtScanIRQ+0x710>
1fff8e78:	6dcf      	mov      	r7, r3
1fff8e7a:	8340      	ld.b      	r2, (r3, 0x0)
1fff8e7c:	3a40      	cmpnei      	r2, 0
1fff8e7e:	e8400352 	bf      	0x1fff9522	// 1fff9522 <ll_processExtScanIRQ+0xb7e>
        if (FALSE == bSendingScanReq) {
1fff8e82:	9869      	ld.w      	r3, (r14, 0x24)
1fff8e84:	3b40      	cmpnei      	r3, 0
1fff8e86:	e86003ec 	bt      	0x1fff965e	// 1fff965e <ll_processExtScanIRQ+0xcba>
            if ((ext_adv_hdr.header & LE_EXT_HDR_SYNC_INFO_PRESENT_BITMASK)
1fff8e8a:	03b1      	lrw      	r5, 0x1fff1550	// 1fff90c0 <ll_processExtScanIRQ+0x71c>
1fff8e8c:	8560      	ld.b      	r3, (r5, 0x0)
1fff8e8e:	e4632020 	andi      	r3, r3, 32
1fff8e92:	3b40      	cmpnei      	r3, 0
1fff8e94:	0c42      	bf      	0x1fff8f18	// 1fff8f18 <ll_processExtScanIRQ+0x574>
                && (scanSyncInfo.valid == TRUE)) {
1fff8e96:	03d3      	lrw      	r6, 0x1fff14ee	// 1fff90c4 <ll_processExtScanIRQ+0x720>
1fff8e98:	8660      	ld.b      	r3, (r6, 0x0)
1fff8e9a:	3b41      	cmpnei      	r3, 1
1fff8e9c:	083e      	bt      	0x1fff8f18	// 1fff8f18 <ll_processExtScanIRQ+0x574>
                if (scanSyncInfo.options & LL_PERIODIC_ADV_CREATE_SYNC_USING_ADV_LIST_BITMASK) {
1fff8e9e:	8661      	ld.b      	r3, (r6, 0x1)
1fff8ea0:	e4632001 	andi      	r3, r3, 1
1fff8ea4:	3b40      	cmpnei      	r3, 0
1fff8ea6:	e840024e 	bf      	0x1fff9342	// 1fff9342 <ll_processExtScanIRQ+0x99e>
                    if (g_llPrdAdvDeviceNum == 0)
1fff8eaa:	0377      	lrw      	r3, 0x1fff117c	// 1fff90c8 <ll_processExtScanIRQ+0x724>
1fff8eac:	8360      	ld.b      	r3, (r3, 0x0)
1fff8eae:	3b40      	cmpnei      	r3, 0
1fff8eb0:	0c34      	bf      	0x1fff8f18	// 1fff8f18 <ll_processExtScanIRQ+0x574>
                                || ext_adv_hdr.advA[0]  != g_llPeriodicAdvlist[i].addr[0]
1fff8eb2:	8561      	ld.b      	r3, (r5, 0x1)
                                || ext_adv_hdr.advA[5]  != g_llPeriodicAdvlist[i].addr[5]
1fff8eb4:	8526      	ld.b      	r1, (r5, 0x6)
                                || ext_adv_hdr.advA[0]  != g_llPeriodicAdvlist[i].addr[0]
1fff8eb6:	b869      	st.w      	r3, (r14, 0x24)
                                || ext_adv_hdr.advA[1]  != g_llPeriodicAdvlist[i].addr[1]
1fff8eb8:	8562      	ld.b      	r3, (r5, 0x2)
                                || ext_adv_hdr.adi      != g_llPeriodicAdvlist[i].sid) {
1fff8eba:	8d07      	ld.h      	r0, (r5, 0xe)
                                || ext_adv_hdr.advA[1]  != g_llPeriodicAdvlist[i].addr[1]
1fff8ebc:	b86a      	st.w      	r3, (r14, 0x28)
                                || ext_adv_hdr.advA[2]  != g_llPeriodicAdvlist[i].addr[2]
1fff8ebe:	8563      	ld.b      	r3, (r5, 0x3)
1fff8ec0:	b86c      	st.w      	r3, (r14, 0x30)
                                || ext_adv_hdr.advA[3]  != g_llPeriodicAdvlist[i].addr[3]
1fff8ec2:	8564      	ld.b      	r3, (r5, 0x4)
1fff8ec4:	b86d      	st.w      	r3, (r14, 0x34)
                                || ext_adv_hdr.advA[4]  != g_llPeriodicAdvlist[i].addr[4]
1fff8ec6:	8565      	ld.b      	r3, (r5, 0x5)
1fff8ec8:	b86e      	st.w      	r3, (r14, 0x38)
1fff8eca:	037e      	lrw      	r3, 0x1fff14ae	// 1fff90cc <ll_processExtScanIRQ+0x728>
1fff8ecc:	e443003f 	addi      	r2, r3, 64
1fff8ed0:	b84f      	st.w      	r2, (r14, 0x3c)
                            if (peerAddrType         != g_llPeriodicAdvlist[i].addrType
1fff8ed2:	8380      	ld.b      	r4, (r3, 0x0)
1fff8ed4:	984b      	ld.w      	r2, (r14, 0x2c)
1fff8ed6:	6492      	cmpne      	r4, r2
1fff8ed8:	081c      	bt      	0x1fff8f10	// 1fff8f10 <ll_processExtScanIRQ+0x56c>
                                || ext_adv_hdr.advA[0]  != g_llPeriodicAdvlist[i].addr[0]
1fff8eda:	8381      	ld.b      	r4, (r3, 0x1)
1fff8edc:	9849      	ld.w      	r2, (r14, 0x24)
1fff8ede:	6492      	cmpne      	r4, r2
1fff8ee0:	0818      	bt      	0x1fff8f10	// 1fff8f10 <ll_processExtScanIRQ+0x56c>
                                || ext_adv_hdr.advA[1]  != g_llPeriodicAdvlist[i].addr[1]
1fff8ee2:	8382      	ld.b      	r4, (r3, 0x2)
1fff8ee4:	984a      	ld.w      	r2, (r14, 0x28)
1fff8ee6:	6492      	cmpne      	r4, r2
1fff8ee8:	0814      	bt      	0x1fff8f10	// 1fff8f10 <ll_processExtScanIRQ+0x56c>
                                || ext_adv_hdr.advA[2]  != g_llPeriodicAdvlist[i].addr[2]
1fff8eea:	8383      	ld.b      	r4, (r3, 0x3)
1fff8eec:	984c      	ld.w      	r2, (r14, 0x30)
1fff8eee:	6492      	cmpne      	r4, r2
1fff8ef0:	0810      	bt      	0x1fff8f10	// 1fff8f10 <ll_processExtScanIRQ+0x56c>
                                || ext_adv_hdr.advA[3]  != g_llPeriodicAdvlist[i].addr[3]
1fff8ef2:	8384      	ld.b      	r4, (r3, 0x4)
1fff8ef4:	984d      	ld.w      	r2, (r14, 0x34)
1fff8ef6:	6492      	cmpne      	r4, r2
1fff8ef8:	080c      	bt      	0x1fff8f10	// 1fff8f10 <ll_processExtScanIRQ+0x56c>
                                || ext_adv_hdr.advA[4]  != g_llPeriodicAdvlist[i].addr[4]
1fff8efa:	8385      	ld.b      	r4, (r3, 0x5)
1fff8efc:	984e      	ld.w      	r2, (r14, 0x38)
1fff8efe:	6492      	cmpne      	r4, r2
1fff8f00:	0808      	bt      	0x1fff8f10	// 1fff8f10 <ll_processExtScanIRQ+0x56c>
                                || ext_adv_hdr.advA[5]  != g_llPeriodicAdvlist[i].addr[5]
1fff8f02:	8386      	ld.b      	r4, (r3, 0x6)
1fff8f04:	6452      	cmpne      	r4, r1
1fff8f06:	0805      	bt      	0x1fff8f10	// 1fff8f10 <ll_processExtScanIRQ+0x56c>
                                || ext_adv_hdr.adi      != g_llPeriodicAdvlist[i].sid) {
1fff8f08:	8387      	ld.b      	r4, (r3, 0x7)
1fff8f0a:	6412      	cmpne      	r4, r0
1fff8f0c:	e840022e 	bf      	0x1fff9368	// 1fff9368 <ll_processExtScanIRQ+0x9c4>
                        for (int i = 0; i < LL_PRD_ADV_ENTRY_NUM; i++) {
1fff8f10:	984f      	ld.w      	r2, (r14, 0x3c)
1fff8f12:	2307      	addi      	r3, 8
1fff8f14:	64ca      	cmpne      	r2, r3
1fff8f16:	0bde      	bt      	0x1fff8ed2	// 1fff8ed2 <ll_processExtScanIRQ+0x52e>
                llScanDuration += ((ISR_entry_time > llScanT1) ? (ISR_entry_time - llScanT1) : (BASE_TIME_UNITS - llScanT1 + ISR_entry_time));
1fff8f18:	132e      	lrw      	r1, 0x1fff0e1c	// 1fff90d0 <ll_processExtScanIRQ+0x72c>
1fff8f1a:	138f      	lrw      	r4, 0x1fff190c	// 1fff90d4 <ll_processExtScanIRQ+0x730>
1fff8f1c:	b829      	st.w      	r1, (r14, 0x24)
1fff8f1e:	9160      	ld.w      	r3, (r1, 0x0)
1fff8f20:	9440      	ld.w      	r2, (r4, 0x0)
1fff8f22:	64c8      	cmphs      	r2, r3
1fff8f24:	0c04      	bf      	0x1fff8f2c	// 1fff8f2c <ll_processExtScanIRQ+0x588>
1fff8f26:	c6a05021 	bmaski      	r1, 22
1fff8f2a:	60c4      	addu      	r3, r1
1fff8f2c:	13cb      	lrw      	r6, 0x1fff0e38	// 1fff90d8 <ll_processExtScanIRQ+0x734>
1fff8f2e:	60ca      	subu      	r3, r2
1fff8f30:	9640      	ld.w      	r2, (r6, 0x0)
1fff8f32:	60c8      	addu      	r3, r2
                if (extScanInfo.duration != 0 && extScanInfo.period == 0 && llScanDuration >= extScanInfo.duration * 10000) { // scan timeout
1fff8f34:	8f4c      	ld.h      	r2, (r7, 0x18)
                llScanDuration += ((ISR_entry_time > llScanT1) ? (ISR_entry_time - llScanT1) : (BASE_TIME_UNITS - llScanT1 + ISR_entry_time));
1fff8f36:	b660      	st.w      	r3, (r6, 0x0)
                if (extScanInfo.duration != 0 && extScanInfo.period == 0 && llScanDuration >= extScanInfo.duration * 10000) { // scan timeout
1fff8f38:	3a40      	cmpnei      	r2, 0
1fff8f3a:	e8400303 	bf      	0x1fff9540	// 1fff9540 <ll_processExtScanIRQ+0xb9c>
1fff8f3e:	8f2d      	ld.h      	r1, (r7, 0x1a)
1fff8f40:	3940      	cmpnei      	r1, 0
1fff8f42:	e86002ff 	bt      	0x1fff9540	// 1fff9540 <ll_processExtScanIRQ+0xb9c>
1fff8f46:	ea012710 	movi      	r1, 10000
1fff8f4a:	7c84      	mult      	r2, r1
1fff8f4c:	648c      	cmphs      	r3, r2
1fff8f4e:	e84002f9 	bf      	0x1fff9540	// 1fff9540 <ll_processExtScanIRQ+0xb9c>
                    llTaskState = LL_TASK_INVALID;
1fff8f52:	1363      	lrw      	r3, 0x1fff15d0	// 1fff90dc <ll_processExtScanIRQ+0x738>
1fff8f54:	3200      	movi      	r2, 0
1fff8f56:	2a00      	subi      	r2, 1
1fff8f58:	a340      	st.b      	r2, (r3, 0x0)
1fff8f5a:	e80002e4 	br      	0x1fff9522	// 1fff9522 <ll_processExtScanIRQ+0xb7e>
1fff8f5e:	36ff      	movi      	r6, 255
1fff8f60:	0745      	br      	0x1fff8dea	// 1fff8dea <ll_processExtScanIRQ+0x446>
                        uint8  adi = 0xFF, txPwr = 0x7F;
1fff8f62:	347f      	movi      	r4, 127
1fff8f64:	074a      	br      	0x1fff8df8	// 1fff8df8 <ll_processExtScanIRQ+0x454>
                            uint8  directAddrType = 0;
1fff8f66:	3100      	movi      	r1, 0
                            uint8 *directA = NULL;
1fff8f68:	3500      	movi      	r5, 0
1fff8f6a:	075d      	br      	0x1fff8e24	// 1fff8e24 <ll_processExtScanIRQ+0x480>
                        } else if (ext_adv_hdr.header & LE_EXT_HDR_SYNC_INFO_PRESENT_BITMASK) {
1fff8f6c:	e4632020 	andi      	r3, r3, 32
1fff8f70:	3b40      	cmpnei      	r3, 0
1fff8f72:	0f7e      	bf      	0x1fff8e6e	// 1fff8e6e <ll_processExtScanIRQ+0x4ca>
                                                 extScanInfo.scanPHYs[extScanInfo.current_index],  // primary PHY
1fff8f74:	1270      	lrw      	r3, 0x1fff1500	// 1fff90b4 <ll_processExtScanIRQ+0x710>
                            LL_ExtAdvReportCback(0,                             // event type
1fff8f76:	1250      	lrw      	r2, 0x1fff1500	// 1fff90b4 <ll_processExtScanIRQ+0x710>
                                                 extScanInfo.scanPHYs[extScanInfo.current_index],  // primary PHY
1fff8f78:	837c      	ld.b      	r3, (r3, 0x1c)
                            LL_ExtAdvReportCback(0,                             // event type
1fff8f7a:	60c8      	addu      	r3, r2
1fff8f7c:	1259      	lrw      	r2, 0x1fff1804	// 1fff90e0 <ll_processExtScanIRQ+0x73c>
1fff8f7e:	836a      	ld.b      	r3, (r3, 0xa)
1fff8f80:	b848      	st.w      	r2, (r14, 0x20)
1fff8f82:	3200      	movi      	r2, 0
1fff8f84:	982b      	ld.w      	r1, (r14, 0x2c)
1fff8f86:	b847      	st.w      	r2, (r14, 0x1c)
1fff8f88:	b846      	st.w      	r2, (r14, 0x18)
1fff8f8a:	b845      	st.w      	r2, (r14, 0x14)
1fff8f8c:	3000      	movi      	r0, 0
1fff8f8e:	1256      	lrw      	r2, 0x1fff0fa4	// 1fff90e4 <ll_processExtScanIRQ+0x740>
1fff8f90:	8a41      	ld.h      	r2, (r2, 0x2)
1fff8f92:	b844      	st.w      	r2, (r14, 0x10)
1fff8f94:	b8e3      	st.w      	r7, (r14, 0xc)
1fff8f96:	b882      	st.w      	r4, (r14, 0x8)
1fff8f98:	b8c1      	st.w      	r6, (r14, 0x4)
1fff8f9a:	1247      	lrw      	r2, 0x1fff1500	// 1fff90b4 <ll_processExtScanIRQ+0x710>
1fff8f9c:	825d      	ld.b      	r2, (r2, 0x1d)
1fff8f9e:	b840      	st.w      	r2, (r14, 0x0)
1fff8fa0:	984a      	ld.w      	r2, (r14, 0x28)
1fff8fa2:	e3ffe7b3 	bsr      	0x1fff5f08	// 1fff5f08 <LL_ExtAdvReportCback>
1fff8fa6:	0764      	br      	0x1fff8e6e	// 1fff8e6e <ll_processExtScanIRQ+0x4ca>
                         && ((pdu_type == ADV_IND)
1fff8fa8:	3c02      	cmphsi      	r4, 3
1fff8faa:	0c04      	bf      	0x1fff8fb2	// 1fff8fb2 <ll_processExtScanIRQ+0x60e>
                             || (pdu_type  == ADV_SCAN_IND)
1fff8fac:	3c46      	cmpnei      	r4, 6
1fff8fae:	e860fd31 	bt      	0x1fff8a10	// 1fff8a10 <ll_processExtScanIRQ+0x6c>
                    uint8_t txAdd = (g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT;    // adv PDU header, bit 6: TxAdd, 0 - public, 1 - random
1fff8fb2:	8e62      	ld.h      	r3, (r6, 0x4)
1fff8fb4:	5366      	asri      	r3, r3, 6
                    if ((pGlobal_config[LL_SWITCH] & LL_WHITELIST_ALLOW)
1fff8fb6:	12ed      	lrw      	r7, 0x1fffa670	// 1fff90e8 <ll_processExtScanIRQ+0x744>
                    uint8_t txAdd = (g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT;    // adv PDU header, bit 6: TxAdd, 0 - public, 1 - random
1fff8fb8:	e4632001 	andi      	r3, r3, 1
1fff8fbc:	b86b      	st.w      	r3, (r14, 0x2c)
                    if ((pGlobal_config[LL_SWITCH] & LL_WHITELIST_ALLOW)
1fff8fbe:	9760      	ld.w      	r3, (r7, 0x0)
1fff8fc0:	936b      	ld.w      	r3, (r3, 0x2c)
1fff8fc2:	e4632008 	andi      	r3, r3, 8
1fff8fc6:	3b40      	cmpnei      	r3, 0
1fff8fc8:	117b      	lrw      	r3, 0x1fff1500	// 1fff90b4 <ll_processExtScanIRQ+0x710>
1fff8fca:	0c15      	bf      	0x1fff8ff4	// 1fff8ff4 <ll_processExtScanIRQ+0x650>
                        && (extScanInfo.wlPolicy  == LL_SCAN_WL_POLICY_USE_WHITE_LIST)
1fff8fcc:	8368      	ld.b      	r3, (r3, 0x8)
1fff8fce:	3b41      	cmpnei      	r3, 1
1fff8fd0:	0812      	bt      	0x1fff8ff4	// 1fff8ff4 <ll_processExtScanIRQ+0x650>
                        bWlRlCheckOk = ll_isAddrInWhiteList(txAdd, peerAddr);
1fff8fd2:	1227      	lrw      	r1, 0x1fff17fe	// 1fff90ec <ll_processExtScanIRQ+0x748>
1fff8fd4:	980b      	ld.w      	r0, (r14, 0x2c)
1fff8fd6:	e0000baf 	bsr      	0x1fffa734	// 1fffa734 <check_before_startup+0x5c>
                    if (bWlRlCheckOk == TRUE) {
1fff8fda:	3841      	cmpnei      	r0, 1
1fff8fdc:	080e      	bt      	0x1fff8ff8	// 1fff8ff8 <ll_processExtScanIRQ+0x654>
                        if (extScanInfo.scanType[0] == LL_SCAN_ACTIVE
1fff8fde:	1176      	lrw      	r3, 0x1fff1500	// 1fff90b4 <ll_processExtScanIRQ+0x710>
1fff8fe0:	836c      	ld.b      	r3, (r3, 0xc)
1fff8fe2:	b869      	st.w      	r3, (r14, 0x24)
1fff8fe4:	3b41      	cmpnei      	r3, 1
1fff8fe6:	0c0d      	bf      	0x1fff9000	// 1fff9000 <ll_processExtScanIRQ+0x65c>
    uint8   bSendingScanReq = FALSE;
1fff8fe8:	3300      	movi      	r3, 0
1fff8fea:	b869      	st.w      	r3, (r14, 0x24)
1fff8fec:	3c06      	cmphsi      	r4, 7
1fff8fee:	0ca6      	bf      	0x1fff913a	// 1fff913a <ll_processExtScanIRQ+0x796>
1fff8ff0:	3000      	movi      	r0, 0
1fff8ff2:	04a7      	br      	0x1fff9140	// 1fff9140 <ll_processExtScanIRQ+0x79c>
                    } else if (pdu_type == ADV_DIRECT_IND) { // direct adv only report addr & addr type match the whitelist
1fff8ff4:	3c41      	cmpnei      	r4, 1
1fff8ff6:	0bf4      	bt      	0x1fff8fde	// 1fff8fde <ll_processExtScanIRQ+0x63a>
                    peerAddr = &g_rx_adv_buf.data[0];        // AdvA
1fff8ff8:	117d      	lrw      	r3, 0x1fff17fe	// 1fff90ec <ll_processExtScanIRQ+0x748>
1fff8ffa:	b86a      	st.w      	r3, (r14, 0x28)
1fff8ffc:	e800fdf9 	br      	0x1fff8bee	// 1fff8bee <ll_processExtScanIRQ+0x24a>
                            && (pdu_type == ADV_IND
1fff9000:	3c40      	cmpnei      	r4, 0
1fff9002:	0c03      	bf      	0x1fff9008	// 1fff9008 <ll_processExtScanIRQ+0x664>
                                || pdu_type == ADV_SCAN_IND)) {
1fff9004:	3c46      	cmpnei      	r4, 6
1fff9006:	0bf1      	bt      	0x1fff8fe8	// 1fff8fe8 <ll_processExtScanIRQ+0x644>
                                g_tx_adv_buf.txheader = 0xC03;
1fff9008:	ea030c03 	movi      	r3, 3075
1fff900c:	11b9      	lrw      	r5, 0x1fff16ec	// 1fff90f0 <ll_processExtScanIRQ+0x74c>
                                    g_same_rf_channel_flag = TRUE;
1fff900e:	115a      	lrw      	r2, 0x1fff0e2c	// 1fff90f4 <ll_processExtScanIRQ+0x750>
                                    ll_hw_set_tx_rx_interval(10);
1fff9010:	300a      	movi      	r0, 10
                                g_tx_adv_buf.txheader = 0xC03;
1fff9012:	ad62      	st.h      	r3, (r5, 0x4)
                                    g_same_rf_channel_flag = TRUE;
1fff9014:	3301      	movi      	r3, 1
1fff9016:	b84a      	st.w      	r2, (r14, 0x28)
1fff9018:	a260      	st.b      	r3, (r2, 0x0)
                                    ll_hw_set_tx_rx_interval(10);
1fff901a:	e0000da3 	bsr      	0x1fffab60	// 1fffab60 <check_before_startup+0x488>
                                    ll_hw_set_rx_timeout(300);
1fff901e:	3096      	movi      	r0, 150
1fff9020:	4001      	lsli      	r0, r0, 1
1fff9022:	e0000c0d 	bsr      	0x1fffa83c	// 1fffa83c <check_before_startup+0x164>
                                    set_max_length(0xFF);                    // add 2020-03-10
1fff9026:	30ff      	movi      	r0, 255
1fff9028:	e0000d48 	bsr      	0x1fffaab8	// 1fffaab8 <check_before_startup+0x3e0>
                                    T2 = read_current_fine_time();
1fff902c:	e0000d76 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
                                    delay = (T2 > ISR_entry_time) ? (T2 - ISR_entry_time) : (BASE_TIME_UNITS - ISR_entry_time + T2);
1fff9030:	1168      	lrw      	r3, 0x1fff0e1c	// 1fff90d0 <ll_processExtScanIRQ+0x72c>
1fff9032:	9360      	ld.w      	r3, (r3, 0x0)
1fff9034:	640c      	cmphs      	r3, r0
1fff9036:	600e      	subu      	r0, r3
1fff9038:	08a8      	bt      	0x1fff9188	// 1fff9188 <ll_processExtScanIRQ+0x7e4>
                                    delay = 118 - delay - pGlobal_config[LL_ADV_TO_SCAN_REQ_DELAY];
1fff903a:	9760      	ld.w      	r3, (r7, 0x0)
1fff903c:	d8432027 	ld.w      	r2, (r3, 0x9c)
1fff9040:	3376      	movi      	r3, 118
1fff9042:	60ca      	subu      	r3, r2
1fff9044:	60c2      	subu      	r3, r0
1fff9046:	b86c      	st.w      	r3, (r14, 0x30)
                                    ll_hw_set_trx();             // set LL HW as single TRx mode
1fff9048:	e0000c12 	bsr      	0x1fffa86c	// 1fffa86c <check_before_startup+0x194>
                                                         pGlobal_config[LL_HW_AFE_DELAY],
1fff904c:	9720      	ld.w      	r1, (r7, 0x0)
                                    ll_hw_set_trx_settle(delay,                               // set BB delay, about 80us in 16MHz HCLK
1fff904e:	986c      	ld.w      	r3, (r14, 0x30)
1fff9050:	740c      	zextb      	r0, r3
1fff9052:	d8410044 	ld.b      	r2, (r1, 0x44)
1fff9056:	d8210040 	ld.b      	r1, (r1, 0x40)
1fff905a:	e0000e73 	bsr      	0x1fffad40	// 1fffad40 <check_before_startup+0x668>
                                    ll_hw_go();
1fff905e:	e0000d7b 	bsr      	0x1fffab54	// 1fffab54 <check_before_startup+0x47c>
                                    g_pmCounters.ll_send_scan_req_cnt++;
1fff9062:	1050      	lrw      	r2, 0x1fff12e0	// 1fff90a0 <ll_processExtScanIRQ+0x6fc>
1fff9064:	926f      	ld.w      	r3, (r2, 0x3c)
1fff9066:	2300      	addi      	r3, 1
1fff9068:	b26f      	st.w      	r3, (r2, 0x3c)
                                    llWaitingIrq = TRUE;
1fff906a:	3201      	movi      	r2, 1
1fff906c:	106e      	lrw      	r3, 0x1fff0df8	// 1fff90a4 <ll_processExtScanIRQ+0x700>
1fff906e:	b340      	st.w      	r2, (r3, 0x0)
                                    ll_hw_rst_rfifo();
1fff9070:	e0000cdc 	bsr      	0x1fffaa28	// 1fffaa28 <check_before_startup+0x350>
                                    ll_hw_rst_tfifo();
1fff9074:	e0000e18 	bsr      	0x1fffaca4	// 1fffaca4 <check_before_startup+0x5cc>
                                    ll_hw_ign_rfifo(LL_HW_IGN_CRC | LL_HW_IGN_EMP);
1fff9078:	3003      	movi      	r0, 3
1fff907a:	e0000dcd 	bsr      	0x1fffac14	// 1fffac14 <check_before_startup+0x53c>
                                                              | (extScanInfo.ownAddrType << TX_ADD_SHIFT & TX_ADD_MASK));
1fff907e:	104e      	lrw      	r2, 0x1fff1500	// 1fff90b4 <ll_processExtScanIRQ+0x710>
                                    g_tx_adv_buf.txheader |= (((g_rx_adv_buf.rxheader & 0x40) << 1)
1fff9080:	8e62      	ld.h      	r3, (r6, 0x4)
                                                              | (extScanInfo.ownAddrType << TX_ADD_SHIFT & TX_ADD_MASK));
1fff9082:	8241      	ld.b      	r2, (r2, 0x1)
                                    g_tx_adv_buf.txheader |= (((g_rx_adv_buf.rxheader & 0x40) << 1)
1fff9084:	4361      	lsli      	r3, r3, 1
                                                              | (extScanInfo.ownAddrType << TX_ADD_SHIFT & TX_ADD_MASK));
1fff9086:	4246      	lsli      	r2, r2, 6
1fff9088:	e4422040 	andi      	r2, r2, 64
                                    g_tx_adv_buf.txheader |= (((g_rx_adv_buf.rxheader & 0x40) << 1)
1fff908c:	e4632080 	andi      	r3, r3, 128
                                                              | (extScanInfo.ownAddrType << TX_ADD_SHIFT & TX_ADD_MASK));
1fff9090:	6cc8      	or      	r3, r2
                                    g_tx_adv_buf.txheader |= (((g_rx_adv_buf.rxheader & 0x40) << 1)
1fff9092:	8d42      	ld.h      	r2, (r5, 0x4)
1fff9094:	0432      	br      	0x1fff90f8	// 1fff90f8 <ll_processExtScanIRQ+0x754>
1fff9096:	0000      	bkpt
1fff9098:	1fff1502 	.long	0x1fff1502
1fff909c:	1fff16f2 	.long	0x1fff16f2
1fff90a0:	1fff12e0 	.long	0x1fff12e0
1fff90a4:	1fff0df8 	.long	0x1fff0df8
1fff90a8:	1fff16f0 	.long	0x1fff16f0
1fff90ac:	1fff0e2d 	.long	0x1fff0e2d
1fff90b0:	1fff1557 	.long	0x1fff1557
1fff90b4:	1fff1500 	.long	0x1fff1500
1fff90b8:	1fff17ff 	.long	0x1fff17ff
1fff90bc:	1fffb8d0 	.long	0x1fffb8d0
1fff90c0:	1fff1550 	.long	0x1fff1550
1fff90c4:	1fff14ee 	.long	0x1fff14ee
1fff90c8:	1fff117c 	.long	0x1fff117c
1fff90cc:	1fff14ae 	.long	0x1fff14ae
1fff90d0:	1fff0e1c 	.long	0x1fff0e1c
1fff90d4:	1fff190c 	.long	0x1fff190c
1fff90d8:	1fff0e38 	.long	0x1fff0e38
1fff90dc:	1fff15d0 	.long	0x1fff15d0
1fff90e0:	1fff1804 	.long	0x1fff1804
1fff90e4:	1fff0fa4 	.long	0x1fff0fa4
1fff90e8:	1fffa670 	.long	0x1fffa670
1fff90ec:	1fff17fe 	.long	0x1fff17fe
1fff90f0:	1fff16ec 	.long	0x1fff16ec
1fff90f4:	1fff0e2c 	.long	0x1fff0e2c
1fff90f8:	6cc8      	or      	r3, r2
                                        osal_memcpy((uint8 *)&g_tx_adv_buf.data[0], &extScanInfo.ownAddr[0], 6);
1fff90fa:	0129      	lrw      	r1, 0x1fff1502	// 1fff9450 <ll_processExtScanIRQ+0xaac>
1fff90fc:	3206      	movi      	r2, 6
1fff90fe:	0109      	lrw      	r0, 0x1fff16f2	// 1fff9454 <ll_processExtScanIRQ+0xab0>
                                    g_tx_adv_buf.txheader |= (((g_rx_adv_buf.rxheader & 0x40) << 1)
1fff9100:	ad62      	st.h      	r3, (r5, 0x4)
                                        osal_memcpy((uint8 *)&g_tx_adv_buf.data[0], &extScanInfo.ownAddr[0], 6);
1fff9102:	e0000d47 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
                                    g_tx_adv_buf.data[6]  = peerAddr[0];
1fff9106:	8666      	ld.b      	r3, (r6, 0x6)
                                    ll_hw_write_tfifo((uint8 *) & (g_tx_adv_buf.txheader),
1fff9108:	010b      	lrw      	r0, 0x1fff16f0	// 1fff9458 <ll_processExtScanIRQ+0xab4>
                                    g_tx_adv_buf.data[6]  = peerAddr[0];
1fff910a:	a56c      	st.b      	r3, (r5, 0xc)
                                    g_tx_adv_buf.data[7]  = peerAddr[1];
1fff910c:	8667      	ld.b      	r3, (r6, 0x7)
                                                      ((g_tx_adv_buf.txheader & 0xff00) >> 8) + 2);   // payload length + header length(2)
1fff910e:	8d22      	ld.h      	r1, (r5, 0x4)
                                    g_tx_adv_buf.data[7]  = peerAddr[1];
1fff9110:	a56d      	st.b      	r3, (r5, 0xd)
                                    g_tx_adv_buf.data[8]  = peerAddr[2];
1fff9112:	8668      	ld.b      	r3, (r6, 0x8)
                                                      ((g_tx_adv_buf.txheader & 0xff00) >> 8) + 2);   // payload length + header length(2)
1fff9114:	4928      	lsri      	r1, r1, 8
                                    g_tx_adv_buf.data[8]  = peerAddr[2];
1fff9116:	a56e      	st.b      	r3, (r5, 0xe)
                                    g_tx_adv_buf.data[9]  = peerAddr[3];
1fff9118:	8669      	ld.b      	r3, (r6, 0x9)
                                    ll_hw_write_tfifo((uint8 *) & (g_tx_adv_buf.txheader),
1fff911a:	2101      	addi      	r1, 2
                                    g_tx_adv_buf.data[9]  = peerAddr[3];
1fff911c:	a56f      	st.b      	r3, (r5, 0xf)
                                    g_tx_adv_buf.data[10] = peerAddr[4];
1fff911e:	866a      	ld.b      	r3, (r6, 0xa)
1fff9120:	a570      	st.b      	r3, (r5, 0x10)
                                    g_tx_adv_buf.data[11] = peerAddr[5];
1fff9122:	866b      	ld.b      	r3, (r6, 0xb)
1fff9124:	a571      	st.b      	r3, (r5, 0x11)
                                    ll_hw_write_tfifo((uint8 *) & (g_tx_adv_buf.txheader),
1fff9126:	e0000add 	bsr      	0x1fffa6e0	// 1fffa6e0 <check_before_startup+0x8>
                                    g_same_rf_channel_flag = FALSE;
1fff912a:	986a      	ld.w      	r3, (r14, 0x28)
1fff912c:	3200      	movi      	r2, 0
                                    if (pdu_type == ADV_SCAN_IND) {
1fff912e:	3c46      	cmpnei      	r4, 6
                                    g_same_rf_channel_flag = FALSE;
1fff9130:	a340      	st.b      	r2, (r3, 0x0)
                                    if (pdu_type == ADV_SCAN_IND) {
1fff9132:	0b5d      	bt      	0x1fff8fec	// 1fff8fec <ll_processExtScanIRQ+0x648>
                                        scanningScanInd = TRUE;
1fff9134:	0175      	lrw      	r3, 0x1fffb8f8	// 1fff945c <ll_processExtScanIRQ+0xab8>
1fff9136:	3201      	movi      	r2, 1
1fff9138:	a340      	st.b      	r2, (r3, 0x0)
1fff913a:	0175      	lrw      	r3, 0x11011ae7	// 1fff9460 <ll_processExtScanIRQ+0xabc>
1fff913c:	610c      	addu      	r4, r3
1fff913e:	8400      	ld.b      	r0, (r4, 0x0)
                        if (pktLen >= 8) {
1fff9140:	d86e1027 	ld.h      	r3, (r14, 0x4e)
1fff9144:	3b07      	cmphsi      	r3, 8
1fff9146:	0c1e      	bf      	0x1fff9182	// 1fff9182 <ll_processExtScanIRQ+0x7de>
                            LL_ExtAdvReportCback(advEventType,                          // event type
1fff9148:	0158      	lrw      	r2, 0x1fff1804	// 1fff9464 <ll_processExtScanIRQ+0xac0>
1fff914a:	2b07      	subi      	r3, 8
1fff914c:	74cc      	zextb      	r3, r3
1fff914e:	b867      	st.w      	r3, (r14, 0x1c)
1fff9150:	3300      	movi      	r3, 0
1fff9152:	b848      	st.w      	r2, (r14, 0x20)
                        rssi  =  -(pktFoot1 >> 24);
1fff9154:	9855      	ld.w      	r2, (r14, 0x54)
                            LL_ExtAdvReportCback(advEventType,                          // event type
1fff9156:	b866      	st.w      	r3, (r14, 0x18)
1fff9158:	b865      	st.w      	r3, (r14, 0x14)
1fff915a:	b864      	st.w      	r3, (r14, 0x10)
                        rssi  =  -(pktFoot1 >> 24);
1fff915c:	4a58      	lsri      	r2, r2, 24
1fff915e:	60ca      	subu      	r3, r2
                            LL_ExtAdvReportCback(advEventType,                          // event type
1fff9160:	74ce      	sextb      	r3, r3
1fff9162:	b863      	st.w      	r3, (r14, 0xc)
1fff9164:	337f      	movi      	r3, 127
1fff9166:	015e      	lrw      	r2, 0x1fff17fe	// 1fff9468 <ll_processExtScanIRQ+0xac4>
1fff9168:	b862      	st.w      	r3, (r14, 0x8)
1fff916a:	33ff      	movi      	r3, 255
1fff916c:	982b      	ld.w      	r1, (r14, 0x2c)
1fff916e:	b861      	st.w      	r3, (r14, 0x4)
1fff9170:	3300      	movi      	r3, 0
1fff9172:	b860      	st.w      	r3, (r14, 0x0)
1fff9174:	3301      	movi      	r3, 1
1fff9176:	e3ffe6c9 	bsr      	0x1fff5f08	// 1fff5f08 <LL_ExtAdvReportCback>
                            g_pmCounters.ll_recv_adv_pkt_cnt ++;
1fff917a:	0242      	lrw      	r2, 0x1fff12e0	// 1fff946c <ll_processExtScanIRQ+0xac8>
1fff917c:	926e      	ld.w      	r3, (r2, 0x38)
1fff917e:	2300      	addi      	r3, 1
1fff9180:	b26e      	st.w      	r3, (r2, 0x38)
                    peerAddr = &g_rx_adv_buf.data[0];        // AdvA
1fff9182:	0265      	lrw      	r3, 0x1fff17fe	// 1fff9468 <ll_processExtScanIRQ+0xac4>
1fff9184:	b86a      	st.w      	r3, (r14, 0x28)
1fff9186:	0674      	br      	0x1fff8e6e	// 1fff8e6e <ll_processExtScanIRQ+0x4ca>
                                    delay = (T2 > ISR_entry_time) ? (T2 - ISR_entry_time) : (BASE_TIME_UNITS - ISR_entry_time + T2);
1fff9188:	c6a05023 	bmaski      	r3, 22
1fff918c:	600c      	addu      	r0, r3
1fff918e:	0756      	br      	0x1fff903a	// 1fff903a <ll_processExtScanIRQ+0x696>
    } else if (ll_mode == LL_HW_MODE_TRX && llTaskState == LL_TASK_EXTENDED_SCAN) {         // active scan
1fff9190:	3842      	cmpnei      	r0, 2
1fff9192:	e860fc1d 	bt      	0x1fff89cc	// 1fff89cc <ll_processExtScanIRQ+0x28>
1fff9196:	0268      	lrw      	r3, 0x1fff15d0	// 1fff9470 <ll_processExtScanIRQ+0xacc>
1fff9198:	8360      	ld.b      	r3, (r3, 0x0)
1fff919a:	3b43      	cmpnei      	r3, 3
1fff919c:	e860fc18 	bt      	0x1fff89cc	// 1fff89cc <ll_processExtScanIRQ+0x28>
        osal_memset(&ext_adv_hdr, 0, sizeof(ext_adv_hdr));
1fff91a0:	02ca      	lrw      	r6, 0x1fff1550	// 1fff9474 <ll_processExtScanIRQ+0xad0>
1fff91a2:	322c      	movi      	r2, 44
1fff91a4:	3100      	movi      	r1, 0
1fff91a6:	6c1b      	mov      	r0, r6
        if ((irq_status & LIRQ_RD) && (irq_status & LIRQ_COK)) {
1fff91a8:	e4842600 	andi      	r4, r4, 1536
        osal_memset(&ext_adv_hdr, 0, sizeof(ext_adv_hdr));
1fff91ac:	e0000aca 	bsr      	0x1fffa740	// 1fffa740 <check_before_startup+0x68>
        if ((irq_status & LIRQ_RD) && (irq_status & LIRQ_COK)) {
1fff91b0:	eb440600 	cmpnei      	r4, 1536
1fff91b4:	e860fc0c 	bt      	0x1fff89cc	// 1fff89cc <ll_processExtScanIRQ+0x28>
            packet_len = ll_hw_read_rfifo1((uint8_t *)(&(g_rx_adv_buf.rxheader)),
1fff91b8:	020f      	lrw      	r0, 0x1fff17fc	// 1fff9478 <ll_processExtScanIRQ+0xad4>
1fff91ba:	1a14      	addi      	r2, r14, 80
1fff91bc:	1b15      	addi      	r3, r14, 84
1fff91be:	e42e004d 	addi      	r1, r14, 78
1fff91c2:	e3ffe35d 	bsr      	0x1fff587c	// 1fff587c <ll_hw_read_rfifo1>
            pdu_type = g_rx_adv_buf.rxheader & 0x0f;
1fff91c6:	0271      	lrw      	r3, 0x1fff17f8	// 1fff947c <ll_processExtScanIRQ+0xad8>
1fff91c8:	6dcf      	mov      	r7, r3
1fff91ca:	8b82      	ld.h      	r4, (r3, 0x4)
            packet_len = ll_hw_read_rfifo1((uint8_t *)(&(g_rx_adv_buf.rxheader)),
1fff91cc:	6d43      	mov      	r5, r0
            if (ll_hw_get_rfifo_depth() > 0) {
1fff91ce:	e0000d8f 	bsr      	0x1fffacec	// 1fffacec <check_before_startup+0x614>
1fff91d2:	6cdf      	mov      	r3, r7
1fff91d4:	3820      	cmplti      	r0, 1
1fff91d6:	6c9f      	mov      	r2, r7
1fff91d8:	0807      	bt      	0x1fff91e6	// 1fff91e6 <ll_processExtScanIRQ+0x842>
                g_pmCounters.ll_rfifo_read_err++;
1fff91da:	025a      	lrw      	r2, 0x1fff12e0	// 1fff946c <ll_processExtScanIRQ+0xac8>
1fff91dc:	9279      	ld.w      	r3, (r2, 0x64)
1fff91de:	2300      	addi      	r3, 1
1fff91e0:	b279      	st.w      	r3, (r2, 0x64)
1fff91e2:	e800fbf5 	br      	0x1fff89cc	// 1fff89cc <ll_processExtScanIRQ+0x28>
            if (packet_len > 0 && pdu_type == ADV_SCAN_RSP) {
1fff91e6:	3d40      	cmpnei      	r5, 0
1fff91e8:	e840fbf2 	bf      	0x1fff89cc	// 1fff89cc <ll_processExtScanIRQ+0x28>
            pdu_type = g_rx_adv_buf.rxheader & 0x0f;
1fff91ec:	e424200f 	andi      	r1, r4, 15
            if (packet_len > 0 && pdu_type == ADV_SCAN_RSP) {
1fff91f0:	3944      	cmpnei      	r1, 4
1fff91f2:	085a      	bt      	0x1fff92a6	// 1fff92a6 <ll_processExtScanIRQ+0x902>
                if (g_rx_adv_buf.data[0] != g_tx_adv_buf.data[6]  ||
1fff91f4:	027c      	lrw      	r3, 0x1fff16ec	// 1fff9480 <ll_processExtScanIRQ+0xadc>
1fff91f6:	8f03      	ld.h      	r0, (r7, 0x6)
1fff91f8:	8b26      	ld.h      	r1, (r3, 0xc)
1fff91fa:	6442      	cmpne      	r0, r1
1fff91fc:	e860fbe8 	bt      	0x1fff89cc	// 1fff89cc <ll_processExtScanIRQ+0x28>
                    g_rx_adv_buf.data[2] != g_tx_adv_buf.data[8]  ||
1fff9200:	8f04      	ld.h      	r0, (r7, 0x8)
1fff9202:	8b27      	ld.h      	r1, (r3, 0xe)
1fff9204:	6442      	cmpne      	r0, r1
1fff9206:	e860fbe3 	bt      	0x1fff89cc	// 1fff89cc <ll_processExtScanIRQ+0x28>
                    g_rx_adv_buf.data[4] != g_tx_adv_buf.data[10] ||
1fff920a:	8f25      	ld.h      	r1, (r7, 0xa)
1fff920c:	8b68      	ld.h      	r3, (r3, 0x10)
1fff920e:	64c6      	cmpne      	r1, r3
1fff9210:	e860fbde 	bt      	0x1fff89cc	// 1fff89cc <ll_processExtScanIRQ+0x28>
                uint8  peerAddrType = (g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT;
1fff9214:	8f62      	ld.h      	r3, (r7, 0x4)
1fff9216:	5366      	asri      	r3, r3, 6
                if (bCheckOk == TRUE && peerAddrType == LL_DEV_ADDR_TYPE_RANDOM  &&
1fff9218:	e4632001 	andi      	r3, r3, 1
                int8   rssi     =  -(pktFoot1 >> 24);
1fff921c:	9895      	ld.w      	r4, (r14, 0x54)
                if (bCheckOk == TRUE && peerAddrType == LL_DEV_ADDR_TYPE_RANDOM  &&
1fff921e:	3b40      	cmpnei      	r3, 0
1fff9220:	0804      	bt      	0x1fff9228	// 1fff9228 <ll_processExtScanIRQ+0x884>
1fff9222:	3100      	movi      	r1, 0
                peerAddr = &g_rx_adv_buf.data[0];
1fff9224:	034e      	lrw      	r2, 0x1fff17fe	// 1fff9468 <ll_processExtScanIRQ+0xac4>
1fff9226:	041c      	br      	0x1fff925e	// 1fff925e <ll_processExtScanIRQ+0x8ba>
                if (bCheckOk == TRUE && peerAddrType == LL_DEV_ADDR_TYPE_RANDOM  &&
1fff9228:	826b      	ld.b      	r3, (r2, 0xb)
1fff922a:	e46320c0 	andi      	r3, r3, 192
1fff922e:	eb430040 	cmpnei      	r3, 64
1fff9232:	e860022b 	bt      	0x1fff9688	// 1fff9688 <ll_processExtScanIRQ+0xce4>
                    if (g_llRlEnable == TRUE) {
1fff9236:	036b      	lrw      	r3, 0x1fff0ddc	// 1fff9484 <ll_processExtScanIRQ+0xae0>
1fff9238:	8360      	ld.b      	r3, (r3, 0x0)
1fff923a:	3b41      	cmpnei      	r3, 1
1fff923c:	e8600226 	bt      	0x1fff9688	// 1fff9688 <ll_processExtScanIRQ+0xce4>
                        rpaListIndex = ll_getRPAListEntry(&g_rx_adv_buf.data[0]);
1fff9240:	0315      	lrw      	r0, 0x1fff17fe	// 1fff9468 <ll_processExtScanIRQ+0xac4>
1fff9242:	e0000cb9 	bsr      	0x1fffabb4	// 1fffabb4 <check_before_startup+0x4dc>
                        if (rpaListIndex < LL_RESOLVINGLIST_ENTRY_NUM) {
1fff9246:	3807      	cmphsi      	r0, 8
1fff9248:	e860fbc2 	bt      	0x1fff89cc	// 1fff89cc <ll_processExtScanIRQ+0x28>
                            peerAddr = &g_llResolvinglist[rpaListIndex].peerAddr[0];
1fff924c:	332e      	movi      	r3, 46
1fff924e:	7c0c      	mult      	r0, r3
1fff9250:	0351      	lrw      	r2, 0x1fff0ff5	// 1fff9488 <ll_processExtScanIRQ+0xae4>
                            peerAddrType = g_llResolvinglist[rpaListIndex].peerAddrType + 2;
1fff9252:	0370      	lrw      	r3, 0x1fff0ff4	// 1fff948c <ll_processExtScanIRQ+0xae8>
                            peerAddr = &g_llResolvinglist[rpaListIndex].peerAddr[0];
1fff9254:	6080      	addu      	r2, r0
                            peerAddrType = g_llResolvinglist[rpaListIndex].peerAddrType + 2;
1fff9256:	600c      	addu      	r0, r3
1fff9258:	8020      	ld.b      	r1, (r0, 0x0)
1fff925a:	2101      	addi      	r1, 2
1fff925c:	7444      	zextb      	r1, r1
                    if (scanningScanInd == TRUE) {
1fff925e:	037f      	lrw      	r3, 0x1fffb8f8	// 1fff945c <ll_processExtScanIRQ+0xab8>
                int8   rssi     =  -(pktFoot1 >> 24);
1fff9260:	4c98      	lsri      	r4, r4, 24
                    if (scanningScanInd == TRUE) {
1fff9262:	8360      	ld.b      	r3, (r3, 0x0)
                    uint8 advEvt = 0x1B;
1fff9264:	3b41      	cmpnei      	r3, 1
                    LL_ExtAdvReportCback(advEvt,                  // event type
1fff9266:	037f      	lrw      	r3, 0x1fff1804	// 1fff9464 <ll_processExtScanIRQ+0xac0>
                    uint8 advEvt = 0x1B;
1fff9268:	c4000500 	mvc      	r0
                    LL_ExtAdvReportCback(advEvt,                  // event type
1fff926c:	b868      	st.w      	r3, (r14, 0x20)
1fff926e:	d86e004e 	ld.b      	r3, (r14, 0x4e)
1fff9272:	2b07      	subi      	r3, 8
1fff9274:	74cc      	zextb      	r3, r3
1fff9276:	b867      	st.w      	r3, (r14, 0x1c)
1fff9278:	3300      	movi      	r3, 0
                    uint8 advEvt = 0x1B;
1fff927a:	2019      	addi      	r0, 26
                    LL_ExtAdvReportCback(advEvt,                  // event type
1fff927c:	b866      	st.w      	r3, (r14, 0x18)
1fff927e:	b865      	st.w      	r3, (r14, 0x14)
1fff9280:	b864      	st.w      	r3, (r14, 0x10)
                int8   rssi     =  -(pktFoot1 >> 24);
1fff9282:	60d2      	subu      	r3, r4
                    LL_ExtAdvReportCback(advEvt,                  // event type
1fff9284:	74ce      	sextb      	r3, r3
1fff9286:	b863      	st.w      	r3, (r14, 0xc)
1fff9288:	337f      	movi      	r3, 127
1fff928a:	b862      	st.w      	r3, (r14, 0x8)
1fff928c:	33ff      	movi      	r3, 255
1fff928e:	b861      	st.w      	r3, (r14, 0x4)
1fff9290:	3300      	movi      	r3, 0
1fff9292:	b860      	st.w      	r3, (r14, 0x0)
1fff9294:	3301      	movi      	r3, 1
1fff9296:	e3ffe639 	bsr      	0x1fff5f08	// 1fff5f08 <LL_ExtAdvReportCback>
                    g_pmCounters.ll_recv_scan_rsp_cnt ++;
1fff929a:	1355      	lrw      	r2, 0x1fff12e0	// 1fff946c <ll_processExtScanIRQ+0xac8>
1fff929c:	9270      	ld.w      	r3, (r2, 0x40)
1fff929e:	2300      	addi      	r3, 1
1fff92a0:	b270      	st.w      	r3, (r2, 0x40)
1fff92a2:	e800fb95 	br      	0x1fff89cc	// 1fff89cc <ll_processExtScanIRQ+0x28>
            else if (packet_len > 0 && pdu_type == ADV_EXT_TYPE) {
1fff92a6:	3947      	cmpnei      	r1, 7
1fff92a8:	e860fb92 	bt      	0x1fff89cc	// 1fff89cc <ll_processExtScanIRQ+0x28>
                uint8_t txAdd = (g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT;    // adv PDU header, bit 6: TxAdd, 0 - public, 1 - random
1fff92ac:	8f82      	ld.h      	r4, (r7, 0x4)
                uint8   payload_len = (g_rx_adv_buf.rxheader & 0xFF00) >> LENGTH_SHIFT;
1fff92ae:	4ce8      	lsri      	r7, r4, 8
                ll_parseExtHeader(&g_rx_adv_buf.data[1], payload_len - 1);
1fff92b0:	5f23      	subi      	r1, r7, 1
1fff92b2:	7445      	zexth      	r1, r1
                ext_hdr_len =  g_rx_adv_buf.data[0] & 0x3f;
1fff92b4:	83a6      	ld.b      	r5, (r3, 0x6)
                ll_parseExtHeader(&g_rx_adv_buf.data[1], payload_len - 1);
1fff92b6:	5b1a      	addi      	r0, r3, 7
1fff92b8:	e0000d5c 	bsr      	0x1fffad70	// 1fffad70 <check_before_startup+0x698>
                if (ext_adv_hdr.header & LE_EXT_HDR_ADI_PRESENT_BITMASK) {
1fff92bc:	8660      	ld.b      	r3, (r6, 0x0)
1fff92be:	e4232008 	andi      	r1, r3, 8
                ext_hdr_len =  g_rx_adv_buf.data[0] & 0x3f;
1fff92c2:	e4a5203f 	andi      	r5, r5, 63
                if (ext_adv_hdr.header & LE_EXT_HDR_ADI_PRESENT_BITMASK) {
1fff92c6:	3940      	cmpnei      	r1, 0
                adv_data_len = payload_len - ext_hdr_len - 1;
1fff92c8:	5f55      	subu      	r2, r7, r5
1fff92ca:	2a00      	subi      	r2, 1
1fff92cc:	7488      	zextb      	r2, r2
                if (ext_adv_hdr.header & LE_EXT_HDR_ADI_PRESENT_BITMASK) {
1fff92ce:	0c36      	bf      	0x1fff933a	// 1fff933a <ll_processExtScanIRQ+0x996>
                    adi = (ext_adv_hdr.adi & 0xF000) >> 12;
1fff92d0:	8ee7      	ld.h      	r7, (r6, 0xe)
1fff92d2:	4fec      	lsri      	r7, r7, 12
                if (ext_adv_hdr.header & LE_EXT_HDR_TX_PWR_PRESENT_BITMASK) {
1fff92d4:	e4232040 	andi      	r1, r3, 64
1fff92d8:	3940      	cmpnei      	r1, 0
1fff92da:	0c32      	bf      	0x1fff933e	// 1fff933e <ll_processExtScanIRQ+0x99a>
                    txPwr = ext_adv_hdr.txPower;
1fff92dc:	d8c6002a 	ld.b      	r6, (r6, 0x2a)
                if (adv_data_len > 0) {                                          // receive advData
1fff92e0:	3a40      	cmpnei      	r2, 0
1fff92e2:	e840fb75 	bf      	0x1fff89cc	// 1fff89cc <ll_processExtScanIRQ+0x28>
                    if (ext_adv_hdr.header & LE_EXT_HDR_AUX_PTR_PRESENT_BITMASK) { // more data
1fff92e6:	e4632010 	andi      	r3, r3, 16
                uint8   advEventType = LE_ADV_PROP_SCAN_BITMASK | LE_ADV_PROP_DIRECT_BITMASK | LE_ADV_PROP_SCAN_RSP_BITMASK;  // LE_ADV_PROP_DIRECT_BITMASK: temp set for BQB LL/DDI/SCN/BV-63-C
1fff92ea:	300e      	movi      	r0, 14
1fff92ec:	3b40      	cmpnei      	r3, 0
1fff92ee:	332e      	movi      	r3, 46
1fff92f0:	c4030c40 	inct      	r0, r3, 0
1fff92f4:	b809      	st.w      	r0, (r14, 0x24)
                uint8_t txAdd = (g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT;    // adv PDU header, bit 6: TxAdd, 0 - public, 1 - random
1fff92f6:	5426      	asri      	r1, r4, 6
                    LL_ExtAdvReportCback(advEventType,                          // event type
1fff92f8:	1306      	lrw      	r0, 0x1fff1500	// 1fff9490 <ll_processExtScanIRQ+0xaec>
                                         &g_rx_adv_buf.data[ext_hdr_len + 1]);                // rest of payload
1fff92fa:	1387      	lrw      	r4, 0x1fff17ff	// 1fff9494 <ll_processExtScanIRQ+0xaf0>
                                         extScanInfo.scanPHYs[extScanInfo.current_index],  // primary PHY
1fff92fc:	807c      	ld.b      	r3, (r0, 0x1c)
                    LL_ExtAdvReportCback(advEventType,                          // event type
1fff92fe:	60c0      	addu      	r3, r0
1fff9300:	836a      	ld.b      	r3, (r3, 0xa)
1fff9302:	b847      	st.w      	r2, (r14, 0x1c)
1fff9304:	3200      	movi      	r2, 0
                                         &g_rx_adv_buf.data[ext_hdr_len + 1]);                // rest of payload
1fff9306:	6150      	addu      	r5, r4
                rssi  =  -(pktFoot1 >> 24);
1fff9308:	9895      	ld.w      	r4, (r14, 0x54)
                    LL_ExtAdvReportCback(advEventType,                          // event type
1fff930a:	b846      	st.w      	r2, (r14, 0x18)
1fff930c:	b845      	st.w      	r2, (r14, 0x14)
1fff930e:	b844      	st.w      	r2, (r14, 0x10)
                rssi  =  -(pktFoot1 >> 24);
1fff9310:	4c98      	lsri      	r4, r4, 24
1fff9312:	6092      	subu      	r2, r4
                    LL_ExtAdvReportCback(advEventType,                          // event type
1fff9314:	748a      	sextb      	r2, r2
1fff9316:	b8a8      	st.w      	r5, (r14, 0x20)
1fff9318:	b843      	st.w      	r2, (r14, 0xc)
1fff931a:	b8c2      	st.w      	r6, (r14, 0x8)
1fff931c:	b8e1      	st.w      	r7, (r14, 0x4)
1fff931e:	e4212001 	andi      	r1, r1, 1
1fff9322:	805d      	ld.b      	r2, (r0, 0x1d)
1fff9324:	9809      	ld.w      	r0, (r14, 0x24)
1fff9326:	b840      	st.w      	r2, (r14, 0x0)
1fff9328:	125c      	lrw      	r2, 0x1fff1551	// 1fff9498 <ll_processExtScanIRQ+0xaf4>
1fff932a:	e3ffe5ef 	bsr      	0x1fff5f08	// 1fff5f08 <LL_ExtAdvReportCback>
                    g_pmCounters.ll_recv_adv_pkt_cnt ++;
1fff932e:	1250      	lrw      	r2, 0x1fff12e0	// 1fff946c <ll_processExtScanIRQ+0xac8>
1fff9330:	926e      	ld.w      	r3, (r2, 0x38)
1fff9332:	2300      	addi      	r3, 1
1fff9334:	b26e      	st.w      	r3, (r2, 0x38)
1fff9336:	e800fb4b 	br      	0x1fff89cc	// 1fff89cc <ll_processExtScanIRQ+0x28>
1fff933a:	37ff      	movi      	r7, 255
1fff933c:	07cc      	br      	0x1fff92d4	// 1fff92d4 <ll_processExtScanIRQ+0x930>
                uint8   txPwr = 0x7F, rssi, adi;
1fff933e:	367f      	movi      	r6, 127
1fff9340:	07d0      	br      	0x1fff92e0	// 1fff92e0 <ll_processExtScanIRQ+0x93c>
                    if (((ext_adv_hdr.adi >> 12) & 0x0F)  == scanSyncInfo.advertising_SID
1fff9342:	8d67      	ld.h      	r3, (r5, 0xe)
1fff9344:	8642      	ld.b      	r2, (r6, 0x2)
1fff9346:	4b6c      	lsri      	r3, r3, 12
1fff9348:	64ca      	cmpne      	r2, r3
1fff934a:	e860fde7 	bt      	0x1fff8f18	// 1fff8f18 <ll_processExtScanIRQ+0x574>
                        && peerAddrType == scanSyncInfo.advertiser_Address_Type
1fff934e:	8663      	ld.b      	r3, (r6, 0x3)
1fff9350:	984b      	ld.w      	r2, (r14, 0x2c)
1fff9352:	648e      	cmpne      	r3, r2
1fff9354:	e860fde2 	bt      	0x1fff8f18	// 1fff8f18 <ll_processExtScanIRQ+0x574>
                        && osal_memcmp(&peerAddr[0], &scanSyncInfo.advertiser_Address[0], LL_DEVICE_ADDR_LEN) == 0) {
1fff9358:	3206      	movi      	r2, 6
1fff935a:	980a      	ld.w      	r0, (r14, 0x28)
1fff935c:	5e2e      	addi      	r1, r6, 4
1fff935e:	e0000a4b 	bsr      	0x1fffa7f4	// 1fffa7f4 <check_before_startup+0x11c>
1fff9362:	3840      	cmpnei      	r0, 0
1fff9364:	e860fdda 	bt      	0x1fff8f18	// 1fff8f18 <ll_processExtScanIRQ+0x574>
                    sync_handler = llAllocateSyncHandle();
1fff9368:	e0000ba2 	bsr      	0x1fffaaac	// 1fffaaac <check_before_startup+0x3d4>
                    pPrdScanInfo->syncHandler  = sync_handler;
1fff936c:	126c      	lrw      	r3, 0x1fff13ac	// 1fff949c <ll_processExtScanIRQ+0xaf8>
1fff936e:	3274      	movi      	r2, 116
                    sync_handler = llAllocateSyncHandle();
1fff9370:	b80a      	st.w      	r0, (r14, 0x28)
                    pPrdScanInfo->syncHandler  = sync_handler;
1fff9372:	b86c      	st.w      	r3, (r14, 0x30)
1fff9374:	7c80      	mult      	r2, r0
1fff9376:	5a8c      	addu      	r4, r2, r3
1fff9378:	d86e1014 	ld.h      	r3, (r14, 0x28)
                    pPrdScanInfo->eventCounter = syncInfo.event_counter;
1fff937c:	12a9      	lrw      	r5, 0x1fff0fa4	// 1fff94a0 <ll_processExtScanIRQ+0xafc>
                    osal_memcpy(&pPrdScanInfo->chnMap[0], &syncInfo.chn_map[0], 4);
1fff937e:	5d2e      	addi      	r1, r5, 4
                    pPrdScanInfo->syncHandler  = sync_handler;
1fff9380:	b849      	st.w      	r2, (r14, 0x24)
1fff9382:	ac60      	st.h      	r3, (r4, 0x0)
                    pPrdScanInfo->eventCounter = syncInfo.event_counter;
1fff9384:	8d68      	ld.h      	r3, (r5, 0x10)
1fff9386:	dc641026 	st.h      	r3, (r4, 0x4c)
                    pPrdScanInfo->advInterval  = syncInfo.interval * 1250;
1fff938a:	ea0304e2 	movi      	r3, 1250
1fff938e:	8d41      	ld.h      	r2, (r5, 0x2)
1fff9390:	7c8c      	mult      	r2, r3
1fff9392:	b444      	st.w      	r2, (r4, 0x10)
                    osal_memcpy(&pPrdScanInfo->chnMap[0], &syncInfo.chn_map[0], 4);
1fff9394:	1264      	lrw      	r3, 0x1fff13c0	// 1fff94a4 <ll_processExtScanIRQ+0xb00>
1fff9396:	9849      	ld.w      	r2, (r14, 0x24)
1fff9398:	60c8      	addu      	r3, r2
1fff939a:	3204      	movi      	r2, 4
1fff939c:	6c0f      	mov      	r0, r3
1fff939e:	b86b      	st.w      	r3, (r14, 0x2c)
1fff93a0:	e0000bf8 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
                    pPrdScanInfo->chnMap[4]    = syncInfo.chn_map4.chn_map;
1fff93a4:	8548      	ld.b      	r2, (r5, 0x8)
1fff93a6:	e422201f 	andi      	r1, r2, 31
                    pPrdScanInfo->sca          = syncInfo.chn_map4.sca;
1fff93aa:	4a45      	lsri      	r2, r2, 5
                    pPrdScanInfo->chnMap[4]    = syncInfo.chn_map4.chn_map;
1fff93ac:	a438      	st.b      	r1, (r4, 0x18)
                    pPrdScanInfo->sca          = syncInfo.chn_map4.sca;
1fff93ae:	dc44003f 	st.b      	r2, (r4, 0x3f)
                    osal_memcpy(&pPrdScanInfo->accessAddress[0], &syncInfo.AA[0], 4);
1fff93b2:	3204      	movi      	r2, 4
1fff93b4:	9869      	ld.w      	r3, (r14, 0x24)
1fff93b6:	e4250008 	addi      	r1, r5, 9
1fff93ba:	111c      	lrw      	r0, 0x1fff13ec	// 1fff94a8 <ll_processExtScanIRQ+0xb04>
1fff93bc:	600c      	addu      	r0, r3
1fff93be:	e0000be9 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
                    osal_memcpy(&pPrdScanInfo->crcInit[0], &syncInfo.crcInit[0], 3);  // TO check bit order
1fff93c2:	3203      	movi      	r2, 3
1fff93c4:	9869      	ld.w      	r3, (r14, 0x24)
1fff93c6:	e425000c 	addi      	r1, r5, 13
1fff93ca:	1119      	lrw      	r0, 0x1fff13f2	// 1fff94ac <ll_processExtScanIRQ+0xb08>
1fff93cc:	600c      	addu      	r0, r3
1fff93ce:	e0000be1 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
                    accessAddress = (pPrdScanInfo->accessAddress[3] << 24)
1fff93d2:	d8240043 	ld.b      	r1, (r4, 0x43)
                                    | (pPrdScanInfo->accessAddress[2] << 16)
1fff93d6:	d8440042 	ld.b      	r2, (r4, 0x42)
                    pPrdScanInfo->advPhy = extScanInfo.current_scan_PHY;
1fff93da:	877d      	ld.b      	r3, (r7, 0x1d)
                                    | (pPrdScanInfo->accessAddress[2] << 16)
1fff93dc:	4250      	lsli      	r2, r2, 16
                    accessAddress = (pPrdScanInfo->accessAddress[3] << 24)
1fff93de:	4138      	lsli      	r1, r1, 24
                                    | (pPrdScanInfo->accessAddress[2] << 16)
1fff93e0:	6c48      	or      	r1, r2
                                    |  pPrdScanInfo->accessAddress[0];
1fff93e2:	d8440040 	ld.b      	r2, (r4, 0x40)
                    pPrdScanInfo->advPhy = extScanInfo.current_scan_PHY;
1fff93e6:	dc640049 	st.b      	r3, (r4, 0x49)
                                    |  pPrdScanInfo->accessAddress[0];
1fff93ea:	6c48      	or      	r1, r2
                                    | (pPrdScanInfo->accessAddress[1] << 8)
1fff93ec:	d8440041 	ld.b      	r2, (r4, 0x41)
1fff93f0:	4248      	lsli      	r2, r2, 8
                                    |  pPrdScanInfo->accessAddress[0];
1fff93f2:	6c48      	or      	r1, r2
                    pPrdScanInfo->syncTimeout = scanSyncInfo.sync_Timeout * 1250;
1fff93f4:	ea0304e2 	movi      	r3, 1250
1fff93f8:	8e46      	ld.h      	r2, (r6, 0xc)
1fff93fa:	c4628427 	mult      	r7, r2, r3
                    pPrdScanInfo->nextEventRemainder = ((syncInfo.offset.offsetUnit == 1) ? 300 : 30) * syncInfo.offset.syncPacketOffset;
1fff93fe:	3296      	movi      	r2, 150
                    pPrdScanInfo->syncTimeout = scanSyncInfo.sync_Timeout * 1250;
1fff9400:	b4e2      	st.w      	r7, (r4, 0x8)
                    pPrdScanInfo->nextEventRemainder = ((syncInfo.offset.offsetUnit == 1) ? 300 : 30) * syncInfo.offset.syncPacketOffset;
1fff9402:	4241      	lsli      	r2, r2, 1
                    pPrdScanInfo->syncCteType = scanSyncInfo.sync_CTE_Type;
1fff9404:	866e      	ld.b      	r3, (r6, 0xe)
                                pPrdScanInfo->chanMapTable[pPrdScanInfo->numUsedChans] = (i * 8U) + j;
1fff9406:	6dd3      	mov      	r7, r4
                    pPrdScanInfo->syncCteType = scanSyncInfo.sync_CTE_Type;
1fff9408:	a46c      	st.b      	r3, (r4, 0xc)
                    pPrdScanInfo->skip        = scanSyncInfo.skip;
1fff940a:	8e65      	ld.h      	r3, (r6, 0xa)
1fff940c:	ac63      	st.h      	r3, (r4, 0x6)
                    pPrdScanInfo->nextEventRemainder = ((syncInfo.offset.offsetUnit == 1) ? 300 : 30) * syncInfo.offset.syncPacketOffset;
1fff940e:	8501      	ld.b      	r0, (r5, 0x1)
1fff9410:	986c      	ld.w      	r3, (r14, 0x30)
1fff9412:	e4002020 	andi      	r0, r0, 32
1fff9416:	b86f      	st.w      	r3, (r14, 0x3c)
1fff9418:	3840      	cmpnei      	r0, 0
1fff941a:	331e      	movi      	r3, 30
1fff941c:	c4620c40 	inct      	r3, r2, 0
1fff9420:	ea001fff 	movi      	r0, 8191
1fff9424:	8d40      	ld.h      	r2, (r5, 0x0)
1fff9426:	6880      	and      	r2, r0
1fff9428:	7cc8      	mult      	r3, r2
                    pPrdScanInfo->syncEstOk = FALSE;
1fff942a:	3200      	movi      	r2, 0
                    pPrdScanInfo->nextEventRemainder = ((syncInfo.offset.offsetUnit == 1) ? 300 : 30) * syncInfo.offset.syncPacketOffset;
1fff942c:	b475      	st.w      	r3, (r4, 0x54)
                    pPrdScanInfo->syncEstOk = FALSE;
1fff942e:	a443      	st.b      	r2, (r4, 0x3)
                    pPrdScanInfo->event1stFlag = TRUE;        // receiving the 1st PDU of a periodic event
1fff9430:	3201      	movi      	r2, 1
                    schedule_time = g_llPeriodAdvSyncInfo[sync_handler].nextEventRemainder - 2500;  // 1000: timing advance
1fff9432:	e46319c3 	subi      	r3, r3, 2500
                    pPrdScanInfo->event1stFlag = TRUE;        // receiving the 1st PDU of a periodic event
1fff9436:	a444      	st.b      	r2, (r4, 0x4)
                    pPrdScanInfo->channelIdentifier = ((accessAddress & 0xFFFF0000) >> 16) ^ (accessAddress & 0x0000FFFF);
1fff9438:	4950      	lsri      	r2, r1, 16
1fff943a:	6c49      	xor      	r1, r2
1fff943c:	7485      	zexth      	r2, r1
1fff943e:	b84c      	st.w      	r2, (r14, 0x30)
1fff9440:	d84e1018 	ld.h      	r2, (r14, 0x30)
1fff9444:	dc441022 	st.h      	r2, (r4, 0x44)
                    schedule_time = g_llPeriodAdvSyncInfo[sync_handler].nextEventRemainder - 2500;  // 1000: timing advance
1fff9448:	b86d      	st.w      	r3, (r14, 0x34)
1fff944a:	3200      	movi      	r2, 0
1fff944c:	6cd3      	mov      	r3, r4
1fff944e:	044b      	br      	0x1fff94e4	// 1fff94e4 <ll_processExtScanIRQ+0xb40>
1fff9450:	1fff1502 	.long	0x1fff1502
1fff9454:	1fff16f2 	.long	0x1fff16f2
1fff9458:	1fff16f0 	.long	0x1fff16f0
1fff945c:	1fffb8f8 	.long	0x1fffb8f8
1fff9460:	11011ae7 	.long	0x11011ae7
1fff9464:	1fff1804 	.long	0x1fff1804
1fff9468:	1fff17fe 	.long	0x1fff17fe
1fff946c:	1fff12e0 	.long	0x1fff12e0
1fff9470:	1fff15d0 	.long	0x1fff15d0
1fff9474:	1fff1550 	.long	0x1fff1550
1fff9478:	1fff17fc 	.long	0x1fff17fc
1fff947c:	1fff17f8 	.long	0x1fff17f8
1fff9480:	1fff16ec 	.long	0x1fff16ec
1fff9484:	1fff0ddc 	.long	0x1fff0ddc
1fff9488:	1fff0ff5 	.long	0x1fff0ff5
1fff948c:	1fff0ff4 	.long	0x1fff0ff4
1fff9490:	1fff1500 	.long	0x1fff1500
1fff9494:	1fff17ff 	.long	0x1fff17ff
1fff9498:	1fff1551 	.long	0x1fff1551
1fff949c:	1fff13ac 	.long	0x1fff13ac
1fff94a0:	1fff0fa4 	.long	0x1fff0fa4
1fff94a4:	1fff13c0 	.long	0x1fff13c0
1fff94a8:	1fff13ec 	.long	0x1fff13ec
1fff94ac:	1fff13f2 	.long	0x1fff13f2
                            if ((pPrdScanInfo->chnMap[i] >> j) & 1) {
1fff94b0:	98ae      	ld.w      	r5, (r14, 0x38)
1fff94b2:	7152      	asr      	r5, r4
1fff94b4:	e4a52001 	andi      	r5, r5, 1
1fff94b8:	3d40      	cmpnei      	r5, 0
1fff94ba:	0c0a      	bf      	0x1fff94ce	// 1fff94ce <ll_processExtScanIRQ+0xb2a>
                                pPrdScanInfo->chanMapTable[pPrdScanInfo->numUsedChans] = (i * 8U) + j;
1fff94bc:	d8a7003e 	ld.b      	r5, (r7, 0x3e)
1fff94c0:	5f34      	addu      	r1, r7, r5
                                pPrdScanInfo->numUsedChans++;
1fff94c2:	2500      	addi      	r5, 1
                                pPrdScanInfo->chanMapTable[pPrdScanInfo->numUsedChans] = (i * 8U) + j;
1fff94c4:	a119      	st.b      	r0, (r1, 0x19)
                                pPrdScanInfo->numUsedChans++;
1fff94c6:	dca7003e 	st.b      	r5, (r7, 0x3e)
                                pPrdScanInfo->chanMapTable[pPrdScanInfo->numUsedChans] = (i * 8U) + j;
1fff94ca:	e4c7003d 	addi      	r6, r7, 62
1fff94ce:	2400      	addi      	r4, 1
                        for (uint8 j = 0; j < 8; j++) {
1fff94d0:	3c48      	cmpnei      	r4, 8
1fff94d2:	2000      	addi      	r0, 1
1fff94d4:	7400      	zextb      	r0, r0
1fff94d6:	0bed      	bt      	0x1fff94b0	// 1fff94b0 <ll_processExtScanIRQ+0xb0c>
1fff94d8:	2207      	addi      	r2, 8
1fff94da:	7488      	zextb      	r2, r2
1fff94dc:	2300      	addi      	r3, 1
                    for (int i = 0; i < LL_NUM_BYTES_FOR_CHAN_MAP; i++) {
1fff94de:	eb420028 	cmpnei      	r2, 40
1fff94e2:	0c06      	bf      	0x1fff94ee	// 1fff94ee <ll_processExtScanIRQ+0xb4a>
                            if ((pPrdScanInfo->chnMap[i] >> j) & 1) {
1fff94e4:	8334      	ld.b      	r1, (r3, 0x14)
1fff94e6:	6c0b      	mov      	r0, r2
1fff94e8:	b82e      	st.w      	r1, (r14, 0x38)
1fff94ea:	3400      	movi      	r4, 0
1fff94ec:	07e2      	br      	0x1fff94b0	// 1fff94b0 <ll_processExtScanIRQ+0xb0c>
                                                        pPrdScanInfo->chanMapTable,
1fff94ee:	9869      	ld.w      	r3, (r14, 0x24)
1fff94f0:	1348      	lrw      	r2, 0x1fff13c5	// 1fff9690 <ll_processExtScanIRQ+0xcec>
                    pPrdScanInfo->currentEventChannel = llGetNextDataChanCSA2(pPrdScanInfo->eventCounter,
1fff94f2:	3474      	movi      	r4, 116
                                                        pPrdScanInfo->chanMapTable,
1fff94f4:	60c8      	addu      	r3, r2
                    pPrdScanInfo->currentEventChannel = llGetNextDataChanCSA2(pPrdScanInfo->eventCounter,
1fff94f6:	984a      	ld.w      	r2, (r14, 0x28)
1fff94f8:	7c90      	mult      	r2, r4
1fff94fa:	6d0b      	mov      	r4, r2
1fff94fc:	984f      	ld.w      	r2, (r14, 0x3c)
1fff94fe:	6090      	addu      	r2, r4
1fff9500:	d8021026 	ld.h      	r0, (r2, 0x4c)
1fff9504:	6d0b      	mov      	r4, r2
1fff9506:	d842003e 	ld.b      	r2, (r2, 0x3e)
1fff950a:	b840      	st.w      	r2, (r14, 0x0)
1fff950c:	982c      	ld.w      	r1, (r14, 0x30)
1fff950e:	984b      	ld.w      	r2, (r14, 0x2c)
1fff9510:	e0000a32 	bsr      	0x1fffa974	// 1fffa974 <check_before_startup+0x29c>
1fff9514:	dc04004b 	st.b      	r0, (r4, 0x4b)
                    g_llPeriodAdvSyncInfo[sync_handler].current_channel = pPrdScanInfo->currentEventChannel;
1fff9518:	dc04004a 	st.b      	r0, (r4, 0x4a)
                    ll_prd_scan_schedule_next_event(schedule_time);
1fff951c:	980d      	ld.w      	r0, (r14, 0x34)
1fff951e:	e0000a3d 	bsr      	0x1fffa998	// 1fffa998 <check_before_startup+0x2c0>
    if (!llWaitingIrq) {
1fff9522:	127d      	lrw      	r3, 0x1fff0df8	// 1fff9694 <ll_processExtScanIRQ+0xcf0>
1fff9524:	9360      	ld.w      	r3, (r3, 0x0)
1fff9526:	3b40      	cmpnei      	r3, 0
1fff9528:	0806      	bt      	0x1fff9534	// 1fff9534 <ll_processExtScanIRQ+0xb90>
        ll_hw_clr_irq();
1fff952a:	e0000977 	bsr      	0x1fffa818	// 1fffa818 <check_before_startup+0x140>
        llTaskState = LL_TASK_OTHERS;
1fff952e:	127b      	lrw      	r3, 0x1fff15d0	// 1fff9698 <ll_processExtScanIRQ+0xcf4>
1fff9530:	3210      	movi      	r2, 16
1fff9532:	a340      	st.b      	r2, (r3, 0x0)
    __ASM volatile("mtcr %0, psr" : : "r"(psr));
1fff9534:	9871      	ld.w      	r3, (r14, 0x44)
1fff9536:	c0036420 	mtcr      	r3, cr<0, 0>
}
1fff953a:	3001      	movi      	r0, 1
1fff953c:	1416      	addi      	r14, r14, 88
1fff953e:	1494      	pop      	r4-r7, r15
                    uint32 sch2scan_dly = LL_TIME_DELTA(llScanT1, read_current_fine_time());
1fff9540:	e0000aec 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
1fff9544:	9460      	ld.w      	r3, (r4, 0x0)
1fff9546:	64c0      	cmphs      	r0, r3
1fff9548:	0c5d      	bf      	0x1fff9602	// 1fff9602 <ll_processExtScanIRQ+0xc5e>
1fff954a:	e0000ae7 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
1fff954e:	9460      	ld.w      	r3, (r4, 0x0)
1fff9550:	600e      	subu      	r0, r3
                    patch_extScan_updateNode(sch2scan_dly);
1fff9552:	e3fff657 	bsr      	0x1fff8200	// 1fff8200 <patch_extScan_updateNode>
                    if (ext_adv_hdr.header & LE_EXT_HDR_AUX_PTR_PRESENT_BITMASK) {
1fff9556:	8560      	ld.b      	r3, (r5, 0x0)
1fff9558:	e4632010 	andi      	r3, r3, 16
1fff955c:	3b40      	cmpnei      	r3, 0
1fff955e:	0c21      	bf      	0x1fff95a0	// 1fff95a0 <ll_processExtScanIRQ+0xbfc>
                        extScanInfo.current_chn = ext_adv_hdr.auxPtr.chn_idx;
1fff9560:	8570      	ld.b      	r3, (r5, 0x10)
                        wait_time = ext_adv_hdr.auxPtr.aux_offset * ((ext_adv_hdr.auxPtr.offset_unit == 1) ? 300 : 30);
1fff9562:	8552      	ld.b      	r2, (r5, 0x12)
                        extScanInfo.current_chn = ext_adv_hdr.auxPtr.chn_idx;
1fff9564:	a77e      	st.b      	r3, (r7, 0x1e)
                        extScanInfo.current_scan_PHY = ext_adv_hdr.auxPtr.aux_phy;
1fff9566:	8576      	ld.b      	r3, (r5, 0x16)
                        wait_time = ext_adv_hdr.auxPtr.aux_offset * ((ext_adv_hdr.auxPtr.offset_unit == 1) ? 300 : 30);
1fff9568:	8d0a      	ld.h      	r0, (r5, 0x14)
                        extScanInfo.current_scan_PHY = ext_adv_hdr.auxPtr.aux_phy;
1fff956a:	a77d      	st.b      	r3, (r7, 0x1d)
                        wait_time = ext_adv_hdr.auxPtr.aux_offset * ((ext_adv_hdr.auxPtr.offset_unit == 1) ? 300 : 30);
1fff956c:	3396      	movi      	r3, 150
1fff956e:	4361      	lsli      	r3, r3, 1
1fff9570:	3a41      	cmpnei      	r2, 1
1fff9572:	351e      	movi      	r5, 30
1fff9574:	c4a30c20 	incf      	r5, r3, 0
1fff9578:	7d40      	mult      	r5, r0
                        uint32 scan_dly = LL_TIME_DELTA(llScanT1, read_current_fine_time());
1fff957a:	e0000acf 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
1fff957e:	9460      	ld.w      	r3, (r4, 0x0)
1fff9580:	64c0      	cmphs      	r0, r3
1fff9582:	0c48      	bf      	0x1fff9612	// 1fff9612 <ll_processExtScanIRQ+0xc6e>
1fff9584:	e0000aca 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
1fff9588:	9460      	ld.w      	r3, (r4, 0x0)
1fff958a:	600e      	subu      	r0, r3
                        if ((wait_time > scan_dly) && ((wait_time - scan_dly) > patch_startScan_thrd)) {
1fff958c:	6540      	cmphs      	r0, r5
1fff958e:	084a      	bt      	0x1fff9622	// 1fff9622 <ll_processExtScanIRQ+0xc7e>
1fff9590:	5d01      	subu      	r0, r5, r0
1fff9592:	eb001388 	cmphsi      	r0, 5001
1fff9596:	0c46      	bf      	0x1fff9622	// 1fff9622 <ll_processExtScanIRQ+0xc7e>
                            patch_extScan_addNode(wait_time - scan_dly, extScanInfo.current_chn, extScanInfo.current_scan_PHY);
1fff9598:	875d      	ld.b      	r2, (r7, 0x1d)
1fff959a:	873e      	ld.b      	r1, (r7, 0x1e)
1fff959c:	e3fff650 	bsr      	0x1fff823c	// 1fff823c <patch_extScan_addNode>
                    if (patch_scanMode != PATCH_SCAN_AUX) {
1fff95a0:	117f      	lrw      	r3, 0x1fffb8d4	// 1fff969c <ll_processExtScanIRQ+0xcf8>
1fff95a2:	12a0      	lrw      	r5, 0x1fff0dfc	// 1fff96a0 <ll_processExtScanIRQ+0xcfc>
1fff95a4:	8360      	ld.b      	r3, (r3, 0x0)
1fff95a6:	3b41      	cmpnei      	r3, 1
1fff95a8:	0c2a      	bf      	0x1fff95fc	// 1fff95fc <ll_processExtScanIRQ+0xc58>
                        patch_scanMode = PATCH_SCAN_PRIM;
1fff95aa:	117d      	lrw      	r3, 0x1fffb8d4	// 1fff969c <ll_processExtScanIRQ+0xcf8>
1fff95ac:	3202      	movi      	r2, 2
1fff95ae:	a340      	st.b      	r2, (r3, 0x0)
                        extScanInfo.current_chn = LL_SCAN_ADV_CHAN_37;
1fff95b0:	3325      	movi      	r3, 37
                            llScanTime += ((ISR_entry_time > llScanT1) ? (ISR_entry_time - llScanT1) : (BASE_TIME_UNITS - llScanT1 + ISR_entry_time));
1fff95b2:	9440      	ld.w      	r2, (r4, 0x0)
                        extScanInfo.current_chn = LL_SCAN_ADV_CHAN_37;
1fff95b4:	a77e      	st.b      	r3, (r7, 0x1e)
                        extScanInfo.current_scan_PHY = PKT_FMT_BLE1M;
1fff95b6:	3301      	movi      	r3, 1
1fff95b8:	a77d      	st.b      	r3, (r7, 0x1d)
                            llScanTime += ((ISR_entry_time > llScanT1) ? (ISR_entry_time - llScanT1) : (BASE_TIME_UNITS - llScanT1 + ISR_entry_time));
1fff95ba:	9869      	ld.w      	r3, (r14, 0x24)
1fff95bc:	9360      	ld.w      	r3, (r3, 0x0)
1fff95be:	64c8      	cmphs      	r2, r3
1fff95c0:	0838      	bt      	0x1fff9630	// 1fff9630 <ll_processExtScanIRQ+0xc8c>
1fff95c2:	60ca      	subu      	r3, r2
1fff95c4:	9540      	ld.w      	r2, (r5, 0x0)
1fff95c6:	60c8      	addu      	r3, r2
                            if (llScanTime >= extScanInfo.scanWindow[extScanInfo.current_index] * 625) {
1fff95c8:	875c      	ld.b      	r2, (r7, 0x1c)
1fff95ca:	5a3e      	addi      	r1, r2, 8
1fff95cc:	4121      	lsli      	r1, r1, 1
1fff95ce:	605c      	addu      	r1, r7
1fff95d0:	8921      	ld.h      	r1, (r1, 0x2)
1fff95d2:	ea040271 	movi      	r4, 625
1fff95d6:	c4818420 	mult      	r0, r1, r4
                            llScanTime += ((ISR_entry_time > llScanT1) ? (ISR_entry_time - llScanT1) : (BASE_TIME_UNITS - llScanT1 + ISR_entry_time));
1fff95da:	b560      	st.w      	r3, (r5, 0x0)
                            if (llScanTime >= extScanInfo.scanWindow[extScanInfo.current_index] * 625) {
1fff95dc:	640c      	cmphs      	r3, r0
1fff95de:	0c0c      	bf      	0x1fff95f6	// 1fff95f6 <ll_processExtScanIRQ+0xc52>
                                if (extScanInfo.scanWindow[extScanInfo.current_index] == extScanInfo.scanInterval[extScanInfo.current_index]) {    // scanWindow == scanInterval, trigger immediately
1fff95e0:	2205      	addi      	r2, 6
1fff95e2:	4241      	lsli      	r2, r2, 1
1fff95e4:	609c      	addu      	r2, r7
1fff95e6:	8a01      	ld.h      	r0, (r2, 0x2)
                                LL_CALC_NEXT_SCAN_CHN(extScanInfo.current_chn);
1fff95e8:	3326      	movi      	r3, 38
                                if (extScanInfo.scanWindow[extScanInfo.current_index] == extScanInfo.scanInterval[extScanInfo.current_index]) {    // scanWindow == scanInterval, trigger immediately
1fff95ea:	6406      	cmpne      	r1, r0
                                LL_CALC_NEXT_SCAN_CHN(extScanInfo.current_chn);
1fff95ec:	a77e      	st.b      	r3, (r7, 0x1e)
                                if (extScanInfo.scanWindow[extScanInfo.current_index] == extScanInfo.scanInterval[extScanInfo.current_index]) {    // scanWindow == scanInterval, trigger immediately
1fff95ee:	0825      	bt      	0x1fff9638	// 1fff9638 <ll_processExtScanIRQ+0xc94>
                                    llSetupExtScan1(extScanInfo.current_chn);
1fff95f0:	3026      	movi      	r0, 38
1fff95f2:	e3fff96f 	bsr      	0x1fff88d0	// 1fff88d0 <llSetupExtScan1>
                        ll_ext_scan_schedule_next_event(patch_immdScanWaiting);
1fff95f6:	3032      	movi      	r0, 50
1fff95f8:	e0000bb0 	bsr      	0x1fffad58	// 1fffad58 <check_before_startup+0x680>
                    llScanTime = 0;
1fff95fc:	3300      	movi      	r3, 0
1fff95fe:	b560      	st.w      	r3, (r5, 0x0)
1fff9600:	0791      	br      	0x1fff9522	// 1fff9522 <ll_processExtScanIRQ+0xb7e>
                    uint32 sch2scan_dly = LL_TIME_DELTA(llScanT1, read_current_fine_time());
1fff9602:	e0000a8b 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
1fff9606:	9460      	ld.w      	r3, (r4, 0x0)
1fff9608:	600e      	subu      	r0, r3
1fff960a:	c6a05023 	bmaski      	r3, 22
1fff960e:	600c      	addu      	r0, r3
1fff9610:	07a1      	br      	0x1fff9552	// 1fff9552 <ll_processExtScanIRQ+0xbae>
                        uint32 scan_dly = LL_TIME_DELTA(llScanT1, read_current_fine_time());
1fff9612:	e0000a83 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
1fff9616:	9460      	ld.w      	r3, (r4, 0x0)
1fff9618:	600e      	subu      	r0, r3
1fff961a:	c6a05023 	bmaski      	r3, 22
1fff961e:	600c      	addu      	r0, r3
1fff9620:	07b6      	br      	0x1fff958c	// 1fff958c <ll_processExtScanIRQ+0xbe8>
                            patch_scanMode = PATCH_SCAN_AUX;
1fff9622:	107f      	lrw      	r3, 0x1fffb8d4	// 1fff969c <ll_processExtScanIRQ+0xcf8>
1fff9624:	3201      	movi      	r2, 1
                            ll_ext_scan_schedule_next_event(patch_immdScanWaiting);
1fff9626:	3032      	movi      	r0, 50
                            patch_scanMode = PATCH_SCAN_AUX;
1fff9628:	a340      	st.b      	r2, (r3, 0x0)
                            ll_ext_scan_schedule_next_event(patch_immdScanWaiting);
1fff962a:	e0000b97 	bsr      	0x1fffad58	// 1fffad58 <check_before_startup+0x680>
1fff962e:	07b9      	br      	0x1fff95a0	// 1fff95a0 <ll_processExtScanIRQ+0xbfc>
                            llScanTime += ((ISR_entry_time > llScanT1) ? (ISR_entry_time - llScanT1) : (BASE_TIME_UNITS - llScanT1 + ISR_entry_time));
1fff9630:	c6a05021 	bmaski      	r1, 22
1fff9634:	60c4      	addu      	r3, r1
1fff9636:	07c6      	br      	0x1fff95c2	// 1fff95c2 <ll_processExtScanIRQ+0xc1e>
                                                                     - extScanInfo.scanWindow[extScanInfo.current_index]) * 625);
1fff9638:	6006      	subu      	r0, r1
                                    ll_ext_scan_schedule_next_event((extScanInfo.scanInterval[extScanInfo.current_index]
1fff963a:	7c10      	mult      	r0, r4
1fff963c:	e0000b8e 	bsr      	0x1fffad58	// 1fffad58 <check_before_startup+0x680>
                                    llScanDuration += (extScanInfo.scanInterval[extScanInfo.current_index]
1fff9640:	877c      	ld.b      	r3, (r7, 0x1c)
1fff9642:	5b56      	addi      	r2, r3, 6
                                                       - extScanInfo.scanWindow[extScanInfo.current_index]) * 625;
1fff9644:	2307      	addi      	r3, 8
                                    llScanDuration += (extScanInfo.scanInterval[extScanInfo.current_index]
1fff9646:	4241      	lsli      	r2, r2, 1
                                                       - extScanInfo.scanWindow[extScanInfo.current_index]) * 625;
1fff9648:	4361      	lsli      	r3, r3, 1
                                    llScanDuration += (extScanInfo.scanInterval[extScanInfo.current_index]
1fff964a:	609c      	addu      	r2, r7
                                                       - extScanInfo.scanWindow[extScanInfo.current_index]) * 625;
1fff964c:	60dc      	addu      	r3, r7
                                    llScanDuration += (extScanInfo.scanInterval[extScanInfo.current_index]
1fff964e:	8a41      	ld.h      	r2, (r2, 0x2)
                                                       - extScanInfo.scanWindow[extScanInfo.current_index]) * 625;
1fff9650:	8b61      	ld.h      	r3, (r3, 0x2)
1fff9652:	608e      	subu      	r2, r3
1fff9654:	7d08      	mult      	r4, r2
                                    llScanDuration += (extScanInfo.scanInterval[extScanInfo.current_index]
1fff9656:	9640      	ld.w      	r2, (r6, 0x0)
1fff9658:	6108      	addu      	r4, r2
1fff965a:	b680      	st.w      	r4, (r6, 0x0)
1fff965c:	07cd      	br      	0x1fff95f6	// 1fff95f6 <ll_processExtScanIRQ+0xc52>
            uint32 sch2scan_dly = LL_TIME_DELTA(llScanT1, read_current_fine_time());
1fff965e:	1092      	lrw      	r4, 0x1fff190c	// 1fff96a4 <ll_processExtScanIRQ+0xd00>
1fff9660:	e0000a5c 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
1fff9664:	9460      	ld.w      	r3, (r4, 0x0)
1fff9666:	64c0      	cmphs      	r0, r3
1fff9668:	0c08      	bf      	0x1fff9678	// 1fff9678 <ll_processExtScanIRQ+0xcd4>
1fff966a:	e0000a57 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
1fff966e:	9460      	ld.w      	r3, (r4, 0x0)
1fff9670:	600e      	subu      	r0, r3
            patch_extScan_updateNode(sch2scan_dly);
1fff9672:	e3fff5c7 	bsr      	0x1fff8200	// 1fff8200 <patch_extScan_updateNode>
1fff9676:	0756      	br      	0x1fff9522	// 1fff9522 <ll_processExtScanIRQ+0xb7e>
            uint32 sch2scan_dly = LL_TIME_DELTA(llScanT1, read_current_fine_time());
1fff9678:	e0000a50 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
1fff967c:	9460      	ld.w      	r3, (r4, 0x0)
1fff967e:	600e      	subu      	r0, r3
1fff9680:	c6a05023 	bmaski      	r3, 22
1fff9684:	600c      	addu      	r0, r3
1fff9686:	07f6      	br      	0x1fff9672	// 1fff9672 <ll_processExtScanIRQ+0xcce>
1fff9688:	3101      	movi      	r1, 1
1fff968a:	e800fdcd 	br      	0x1fff9224	// 1fff9224 <ll_processExtScanIRQ+0x880>
1fff968e:	0000      	bkpt
1fff9690:	1fff13c5 	.long	0x1fff13c5
1fff9694:	1fff0df8 	.long	0x1fff0df8
1fff9698:	1fff15d0 	.long	0x1fff15d0
1fff969c:	1fffb8d4 	.long	0x1fffb8d4
1fff96a0:	1fff0dfc 	.long	0x1fff0dfc
1fff96a4:	1fff190c 	.long	0x1fff190c

1fff96a8 <LL_extScanTimerExpProcess>:
{
1fff96a8:	14d4      	push      	r4-r7, r15
    if (extScanInfo.enable == TRUE) {
1fff96aa:	109d      	lrw      	r4, 0x1fff1500	// 1fff971c <LL_extScanTimerExpProcess+0x74>
1fff96ac:	10bd      	lrw      	r5, 0x1fffb8d4	// 1fff9720 <LL_extScanTimerExpProcess+0x78>
1fff96ae:	8460      	ld.b      	r3, (r4, 0x0)
1fff96b0:	10dd      	lrw      	r6, 0x1fff15d0	// 1fff9724 <LL_extScanTimerExpProcess+0x7c>
1fff96b2:	3b41      	cmpnei      	r3, 1
1fff96b4:	082e      	bt      	0x1fff9710	// 1fff9710 <LL_extScanTimerExpProcess+0x68>
        if (patch_scanMode != PATCH_SCAN_AUX) {
1fff96b6:	8560      	ld.b      	r3, (r5, 0x0)
1fff96b8:	3b41      	cmpnei      	r3, 1
1fff96ba:	0c1b      	bf      	0x1fff96f0	// 1fff96f0 <LL_extScanTimerExpProcess+0x48>
            uint32 sch2scan_dly = LL_TIME_DELTA(patch_ISR_outTime, read_current_fine_time());
1fff96bc:	10fb      	lrw      	r7, 0x1fffb8d0	// 1fff9728 <LL_extScanTimerExpProcess+0x80>
1fff96be:	e0000a2d 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
1fff96c2:	9760      	ld.w      	r3, (r7, 0x0)
1fff96c4:	64c0      	cmphs      	r0, r3
1fff96c6:	0c1d      	bf      	0x1fff9700	// 1fff9700 <LL_extScanTimerExpProcess+0x58>
1fff96c8:	e0000a28 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
1fff96cc:	9760      	ld.w      	r3, (r7, 0x0)
1fff96ce:	600e      	subu      	r0, r3
            patch_extScan_updateNode(sch2scan_dly);
1fff96d0:	e3fff598 	bsr      	0x1fff8200	// 1fff8200 <patch_extScan_updateNode>
            patch_extScan_list *node = patch_extScan_findSchNode();
1fff96d4:	e3fff566 	bsr      	0x1fff81a0	// 1fff81a0 <patch_extScan_findSchNode>
            if (node && (node->remain_time <= patch_schRemain_thrd)) {
1fff96d8:	3840      	cmpnei      	r0, 0
1fff96da:	0c0b      	bf      	0x1fff96f0	// 1fff96f0 <LL_extScanTimerExpProcess+0x48>
1fff96dc:	9060      	ld.w      	r3, (r0, 0x0)
1fff96de:	eb0307d0 	cmphsi      	r3, 2001
1fff96e2:	0807      	bt      	0x1fff96f0	// 1fff96f0 <LL_extScanTimerExpProcess+0x48>
                extScanInfo.current_chn = node->chan;
1fff96e4:	8064      	ld.b      	r3, (r0, 0x4)
1fff96e6:	a47e      	st.b      	r3, (r4, 0x1e)
                extScanInfo.current_scan_PHY = node->phy;
1fff96e8:	8065      	ld.b      	r3, (r0, 0x5)
1fff96ea:	a47d      	st.b      	r3, (r4, 0x1d)
                patch_extScan_deleteNode(node);
1fff96ec:	e3fff56a 	bsr      	0x1fff81c0	// 1fff81c0 <patch_extScan_deleteNode>
        patch_scanMode = PATCH_SCAN_NONE;
1fff96f0:	3300      	movi      	r3, 0
        llSetupExtScan1(extScanInfo.current_chn);
1fff96f2:	841e      	ld.b      	r0, (r4, 0x1e)
        patch_scanMode = PATCH_SCAN_NONE;
1fff96f4:	a560      	st.b      	r3, (r5, 0x0)
        llTaskState = LL_TASK_EXTENDED_SCAN;
1fff96f6:	3303      	movi      	r3, 3
1fff96f8:	a660      	st.b      	r3, (r6, 0x0)
        llSetupExtScan1(extScanInfo.current_chn);
1fff96fa:	e3fff8eb 	bsr      	0x1fff88d0	// 1fff88d0 <llSetupExtScan1>
}
1fff96fe:	1494      	pop      	r4-r7, r15
            uint32 sch2scan_dly = LL_TIME_DELTA(patch_ISR_outTime, read_current_fine_time());
1fff9700:	e0000a0c 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
1fff9704:	9760      	ld.w      	r3, (r7, 0x0)
1fff9706:	600e      	subu      	r0, r3
1fff9708:	c6a05023 	bmaski      	r3, 22
1fff970c:	600c      	addu      	r0, r3
1fff970e:	07e1      	br      	0x1fff96d0	// 1fff96d0 <LL_extScanTimerExpProcess+0x28>
        patch_scanMode = PATCH_SCAN_NONE;
1fff9710:	3300      	movi      	r3, 0
1fff9712:	a560      	st.b      	r3, (r5, 0x0)
        llTaskState = LL_TASK_OTHERS;
1fff9714:	3310      	movi      	r3, 16
1fff9716:	a660      	st.b      	r3, (r6, 0x0)
}
1fff9718:	07f3      	br      	0x1fff96fe	// 1fff96fe <LL_extScanTimerExpProcess+0x56>
1fff971a:	0000      	bkpt
1fff971c:	1fff1500 	.long	0x1fff1500
1fff9720:	1fffb8d4 	.long	0x1fffb8d4
1fff9724:	1fff15d0 	.long	0x1fff15d0
1fff9728:	1fffb8d0 	.long	0x1fffb8d0

1fff972c <rc32k_calibration>:
{
1fff972c:	14d2      	push      	r4-r5, r15
    *(volatile uint32_t *) 0x4000f05c &= 0xfffffffe;                  // disable RC32K calibration
1fff972e:	1097      	lrw      	r4, 0x4000f000	// 1fff9788 <rc32k_calibration+0x5c>
    WaitRTCCount(6);
1fff9730:	3006      	movi      	r0, 6
    *(volatile uint32_t *) 0x4000f05c &= 0xfffffffe;                  // disable RC32K calibration
1fff9732:	9477      	ld.w      	r3, (r4, 0x5c)
1fff9734:	3b80      	bclri      	r3, 0
1fff9736:	b477      	st.w      	r3, (r4, 0x5c)
    while (!(*(volatile uint32_t *) 0x4000f068 & 0x200)         // check RC32K calibration OK flag, normally need >200us
1fff9738:	350b      	movi      	r5, 11
    WaitRTCCount(6);
1fff973a:	e0000aaf 	bsr      	0x1fffac98	// 1fffac98 <check_before_startup+0x5c0>
    *(volatile uint32_t *) 0x4000f018 |= 0x80;                  // set capbank controlled by calibration
1fff973e:	9466      	ld.w      	r3, (r4, 0x18)
1fff9740:	ec630080 	ori      	r3, r3, 128
1fff9744:	b466      	st.w      	r3, (r4, 0x18)
    *(volatile uint32_t *) 0x4000f05c |= 0x01;                  // enable RC32K calibration
1fff9746:	9477      	ld.w      	r3, (r4, 0x5c)
1fff9748:	ec630001 	ori      	r3, r3, 1
1fff974c:	b477      	st.w      	r3, (r4, 0x5c)
    while (!(*(volatile uint32_t *) 0x4000f068 & 0x200)         // check RC32K calibration OK flag, normally need >200us
1fff974e:	947a      	ld.w      	r3, (r4, 0x68)
1fff9750:	e4632200 	andi      	r3, r3, 512
1fff9754:	3b40      	cmpnei      	r3, 0
1fff9756:	0805      	bt      	0x1fff9760	// 1fff9760 <rc32k_calibration+0x34>
1fff9758:	2d00      	subi      	r5, 1
1fff975a:	7554      	zextb      	r5, r5
           && delay -- > 0) {
1fff975c:	3d40      	cmpnei      	r5, 0
1fff975e:	0810      	bt      	0x1fff977e	// 1fff977e <rc32k_calibration+0x52>
        temp = (*(volatile uint32_t *) 0x4000f060 & 0x3f0000) >> 15;        // read 6bit calibration result
1fff9760:	9418      	ld.w      	r0, (r4, 0x60)
1fff9762:	480f      	lsri      	r0, r0, 15
        *(volatile uint32_t *)0x4000f018 = (*(volatile uint32_t *) 0x4000f018 & 0xffffff81) | temp;   // write the result
1fff9764:	9466      	ld.w      	r3, (r4, 0x18)
        temp = (*(volatile uint32_t *) 0x4000f060 & 0x3f0000) >> 15;        // read 6bit calibration result
1fff9766:	e400207e 	andi      	r0, r0, 126
        *(volatile uint32_t *)0x4000f018 = (*(volatile uint32_t *) 0x4000f018 & 0xffffff81) | temp;   // write the result
1fff976a:	3200      	movi      	r2, 0
1fff976c:	2a7e      	subi      	r2, 127
1fff976e:	68c8      	and      	r3, r2
1fff9770:	6cc0      	or      	r3, r0
1fff9772:	b466      	st.w      	r3, (r4, 0x18)
    return (uint8)(0x7f & (temp >> 1));
1fff9774:	4801      	lsri      	r0, r0, 1
    *(volatile uint32_t *) 0x4000f018 &= 0xffffff7f;            // set capbank controlled by AON
1fff9776:	9466      	ld.w      	r3, (r4, 0x18)
1fff9778:	3b87      	bclri      	r3, 7
1fff977a:	b466      	st.w      	r3, (r4, 0x18)
}
1fff977c:	1492      	pop      	r4-r5, r15
        WaitRTCCount(8);//30.125*8 us each loop
1fff977e:	3008      	movi      	r0, 8
1fff9780:	e0000a8c 	bsr      	0x1fffac98	// 1fffac98 <check_before_startup+0x5c0>
1fff9784:	07e5      	br      	0x1fff974e	// 1fff974e <rc32k_calibration+0x22>
1fff9786:	0000      	bkpt
1fff9788:	4000f000 	.long	0x4000f000

1fff978c <rf_calibrate1>:
{
1fff978c:	14d0      	push      	r15
    rf_phy_ana_cfg();
1fff978e:	e3ffd439 	bsr      	0x1fff4000	// 1fff4000 <rf_phy_ana_cfg>
    rf_tpCal_gen_cap_arrary();                                  //generate the tpCal cap arrary
1fff9792:	e3ffd697 	bsr      	0x1fff44c0	// 1fff44c0 <rf_tpCal_gen_cap_arrary>
    rf_rxDcoc_cfg(/*rfChn*/88,/*bwSet*/1, &g_rfPhyRxDcIQ);      //set the rfChn as 2488 for BW=1MHz
1fff9796:	1045      	lrw      	r2, 0x1fff08b4	// 1fff97a8 <rf_calibrate1+0x1c>
1fff9798:	3101      	movi      	r1, 1
1fff979a:	3058      	movi      	r0, 88
1fff979c:	e3ffd6bc 	bsr      	0x1fff4514	// 1fff4514 <rf_rxDcoc_cfg>
    rc32k_calibration();
1fff97a0:	e3ffffc6 	bsr      	0x1fff972c	// 1fff972c <rc32k_calibration>
}
1fff97a4:	1490      	pop      	r15
1fff97a6:	0000      	bkpt
1fff97a8:	1fff08b4 	.long	0x1fff08b4

1fff97ac <ll_processExtAdvIRQ>:
{
1fff97ac:	14d4      	push      	r4-r7, r15
1fff97ae:	1426      	subi      	r14, r14, 24
    if (g_currentExtAdv > g_extAdvNumber) {
1fff97b0:	0173      	lrw      	r3, 0x1fff12dc	// 1fff9ae0 <ll_processExtAdvIRQ+0x334>
1fff97b2:	0152      	lrw      	r2, 0x1fff11b0	// 1fff9ae4 <ll_processExtAdvIRQ+0x338>
1fff97b4:	8360      	ld.b      	r3, (r3, 0x0)
1fff97b6:	8240      	ld.b      	r2, (r2, 0x0)
{
1fff97b8:	6d43      	mov      	r5, r0
    if (g_currentExtAdv > g_extAdvNumber) {
1fff97ba:	64c8      	cmphs      	r2, r3
1fff97bc:	e84003a5 	bf      	0x1fff9f06	// 1fff9f06 <ll_processExtAdvIRQ+0x75a>
    pAdvInfo = g_pAdvSchInfo[g_currentExtAdv].pAdvInfo;
1fff97c0:	0155      	lrw      	r2, 0x1fff1198	// 1fff9ae8 <ll_processExtAdvIRQ+0x33c>
1fff97c2:	4364      	lsli      	r3, r3, 4
1fff97c4:	9240      	ld.w      	r2, (r2, 0x0)
1fff97c6:	60c8      	addu      	r3, r2
1fff97c8:	9381      	ld.w      	r4, (r3, 0x4)
    if (pAdvInfo == NULL) {
1fff97ca:	3c40      	cmpnei      	r4, 0
1fff97cc:	e840039d 	bf      	0x1fff9f06	// 1fff9f06 <ll_processExtAdvIRQ+0x75a>
    __ASM volatile("mfcr %0, psr" : "=r"(result));
1fff97d0:	c0006023 	mfcr      	r3, cr<0, 0>
1fff97d4:	b861      	st.w      	r3, (r14, 0x4)
    __ASM volatile("psrclr ie");
1fff97d6:	c0807020 	psrclr      	ie
    mode = ll_hw_get_tr_mode();
1fff97da:	e0000a11 	bsr      	0x1fffabfc	// 1fffabfc <check_before_startup+0x524>
1fff97de:	6d83      	mov      	r6, r0
    if (ll_isLegacyAdv(pAdvInfo)) {
1fff97e0:	6c13      	mov      	r0, r4
1fff97e2:	e3ffe38d 	bsr      	0x1fff5efc	// 1fff5efc <ll_isLegacyAdv>
1fff97e6:	3840      	cmpnei      	r0, 0
1fff97e8:	0da8      	bf      	0x1fff9b38	// 1fff9b38 <ll_processExtAdvIRQ+0x38c>
        ll_debug_output(DEBUG_LL_HW_TRX);
1fff97ea:	3007      	movi      	r0, 7
1fff97ec:	e000097e 	bsr      	0x1fffaae8	// 1fffaae8 <check_before_startup+0x410>
        packet_len = ll_hw_read_rfifo1((uint8_t *)(&(g_rx_adv_buf.rxheader)),
1fff97f0:	0200      	lrw      	r0, 0x1fff17fc	// 1fff9aec <ll_processExtAdvIRQ+0x340>
1fff97f2:	1b05      	addi      	r3, r14, 20
1fff97f4:	1a04      	addi      	r2, r14, 16
1fff97f6:	e42e000d 	addi      	r1, r14, 14
1fff97fa:	e3ffe041 	bsr      	0x1fff587c	// 1fff587c <ll_hw_read_rfifo1>
1fff97fe:	6dc3      	mov      	r7, r0
        if (ll_hw_get_rfifo_depth() > 0) {
1fff9800:	e0000a76 	bsr      	0x1fffacec	// 1fffacec <check_before_startup+0x614>
1fff9804:	3820      	cmplti      	r0, 1
1fff9806:	0809      	bt      	0x1fff9818	// 1fff9818 <ll_processExtAdvIRQ+0x6c>
            g_pmCounters.ll_rfifo_read_err++;
1fff9808:	0245      	lrw      	r2, 0x1fff12e0	// 1fff9af0 <ll_processExtAdvIRQ+0x344>
            packet_len = 0;
1fff980a:	3700      	movi      	r7, 0
            g_pmCounters.ll_rfifo_read_err++;
1fff980c:	9279      	ld.w      	r3, (r2, 0x64)
1fff980e:	2300      	addi      	r3, 1
1fff9810:	b279      	st.w      	r3, (r2, 0x64)
            pktLen = 0;
1fff9812:	3300      	movi      	r3, 0
1fff9814:	dc6e1007 	st.h      	r3, (r14, 0xe)
        if (pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RANDOM && pAdvInfo->parameter.isOwnRandomAddressSet == TRUE) {
1fff9818:	0228      	lrw      	r1, 0xffff00	// 1fff9af4 <ll_processExtAdvIRQ+0x348>
1fff981a:	9464      	ld.w      	r3, (r4, 0x10)
1fff981c:	68c4      	and      	r3, r1
        pdu_type = g_rx_adv_buf.rxheader & PDU_TYPE_MASK;
1fff981e:	02a8      	lrw      	r5, 0x1fff17f8	// 1fff9af8 <ll_processExtAdvIRQ+0x34c>
        if (pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RANDOM && pAdvInfo->parameter.isOwnRandomAddressSet == TRUE) {
1fff9820:	0228      	lrw      	r1, 0x10100	// 1fff9afc <ll_processExtAdvIRQ+0x350>
        pdu_type = g_rx_adv_buf.rxheader & PDU_TYPE_MASK;
1fff9822:	8dc2      	ld.h      	r6, (r5, 0x4)
        if (pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RANDOM && pAdvInfo->parameter.isOwnRandomAddressSet == TRUE) {
1fff9824:	644e      	cmpne      	r3, r1
        pdu_type = g_rx_adv_buf.rxheader & PDU_TYPE_MASK;
1fff9826:	e446200f 	andi      	r2, r6, 15
        txAdd    = (g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT;    // adv PDU header, bit 6: TxAdd, 0 - public, 1 - random
1fff982a:	56c6      	asri      	r6, r6, 6
1fff982c:	e4c62001 	andi      	r6, r6, 1
        if (pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RANDOM && pAdvInfo->parameter.isOwnRandomAddressSet == TRUE) {
1fff9830:	0863      	bt      	0x1fff98f6	// 1fff98f6 <ll_processExtAdvIRQ+0x14a>
            ownAddr = pAdvInfo->parameter.ownRandomAddress;
1fff9832:	e4640012 	addi      	r3, r4, 19
        if (packet_len > 0                       // any better checking rule for rx anything?
1fff9836:	3f40      	cmpnei      	r7, 0
1fff9838:	0ca9      	bf      	0x1fff998a	// 1fff998a <ll_processExtAdvIRQ+0x1de>
            && pdu_type == ADV_SCAN_REQ
1fff983a:	3a43      	cmpnei      	r2, 3
1fff983c:	08a7      	bt      	0x1fff998a	// 1fff998a <ll_processExtAdvIRQ+0x1de>
                || pAdvInfo->parameter.advEventProperties == LL_EXT_ADV_PROP_ADV_SCAN_IND)) {
1fff983e:	8c43      	ld.h      	r2, (r4, 0x6)
1fff9840:	2a11      	subi      	r2, 18
            && (pAdvInfo->parameter.advEventProperties == LL_EXT_ADV_PROP_ADV_IND
1fff9842:	7489      	zexth      	r2, r2
1fff9844:	3a01      	cmphsi      	r2, 2
1fff9846:	0847      	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
            g_pmCounters.ll_recv_scan_req_cnt ++;
1fff9848:	02f5      	lrw      	r7, 0x1fff12e0	// 1fff9af0 <ll_processExtAdvIRQ+0x344>
            if (g_rx_adv_buf.data[6]  != ownAddr[0]
1fff984a:	852c      	ld.b      	r1, (r5, 0xc)
            g_pmCounters.ll_recv_scan_req_cnt ++;
1fff984c:	9748      	ld.w      	r2, (r7, 0x20)
1fff984e:	2200      	addi      	r2, 1
1fff9850:	b748      	st.w      	r2, (r7, 0x20)
            if (g_rx_adv_buf.data[6]  != ownAddr[0]
1fff9852:	8340      	ld.b      	r2, (r3, 0x0)
1fff9854:	6486      	cmpne      	r1, r2
1fff9856:	083f      	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                || g_rx_adv_buf.data[7]  != ownAddr[1]
1fff9858:	852d      	ld.b      	r1, (r5, 0xd)
1fff985a:	8341      	ld.b      	r2, (r3, 0x1)
1fff985c:	6486      	cmpne      	r1, r2
1fff985e:	083b      	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                || g_rx_adv_buf.data[8]  != ownAddr[2]
1fff9860:	852e      	ld.b      	r1, (r5, 0xe)
1fff9862:	8342      	ld.b      	r2, (r3, 0x2)
1fff9864:	6486      	cmpne      	r1, r2
1fff9866:	0837      	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                || g_rx_adv_buf.data[9]  != ownAddr[3]
1fff9868:	852f      	ld.b      	r1, (r5, 0xf)
1fff986a:	8343      	ld.b      	r2, (r3, 0x3)
1fff986c:	6486      	cmpne      	r1, r2
1fff986e:	0833      	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                || g_rx_adv_buf.data[10] != ownAddr[4]
1fff9870:	8530      	ld.b      	r1, (r5, 0x10)
1fff9872:	8344      	ld.b      	r2, (r3, 0x4)
1fff9874:	6486      	cmpne      	r1, r2
1fff9876:	082f      	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                || g_rx_adv_buf.data[11] != ownAddr[5]) {
1fff9878:	8551      	ld.b      	r2, (r5, 0x11)
1fff987a:	8365      	ld.b      	r3, (r3, 0x5)
1fff987c:	64ca      	cmpne      	r2, r3
1fff987e:	082b      	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                if (g_llRlEnable == TRUE          &&
1fff9880:	027f      	lrw      	r3, 0x1fff0ddc	// 1fff9b00 <ll_processExtAdvIRQ+0x354>
1fff9882:	8360      	ld.b      	r3, (r3, 0x0)
1fff9884:	3b41      	cmpnei      	r3, 1
1fff9886:	083a      	bt      	0x1fff98fa	// 1fff98fa <ll_processExtAdvIRQ+0x14e>
1fff9888:	3e40      	cmpnei      	r6, 0
1fff988a:	0c3c      	bf      	0x1fff9902	// 1fff9902 <ll_processExtAdvIRQ+0x156>
                    txAdd == LL_DEV_ADDR_TYPE_RANDOM &&
1fff988c:	856b      	ld.b      	r3, (r5, 0xb)
1fff988e:	e46320c0 	andi      	r3, r3, 192
1fff9892:	eb430040 	cmpnei      	r3, 64
1fff9896:	0838      	bt      	0x1fff9906	// 1fff9906 <ll_processExtAdvIRQ+0x15a>
                    rpaListIndex = ll_getRPAListEntry(&g_rx_adv_buf.data[0]);
1fff9898:	0304      	lrw      	r0, 0x1fff17fe	// 1fff9b04 <ll_processExtAdvIRQ+0x358>
1fff989a:	e000098d 	bsr      	0x1fffabb4	// 1fffabb4 <check_before_startup+0x4dc>
                    if (rpaListIndex < LL_RESOLVINGLIST_ENTRY_NUM) {
1fff989e:	3807      	cmphsi      	r0, 8
1fff98a0:	0835      	bt      	0x1fff990a	// 1fff990a <ll_processExtAdvIRQ+0x15e>
                        peerAddr = &g_llResolvinglist[rpaListIndex].peerAddr[0];
1fff98a2:	332e      	movi      	r3, 46
1fff98a4:	7c0c      	mult      	r0, r3
1fff98a6:	0326      	lrw      	r1, 0x1fff0ff5	// 1fff9b08 <ll_processExtAdvIRQ+0x35c>
                        peerType = g_llResolvinglist[rpaListIndex].peerAddrType;
1fff98a8:	0366      	lrw      	r3, 0x1fff0ff4	// 1fff9b0c <ll_processExtAdvIRQ+0x360>
                        peerAddr = &g_llResolvinglist[rpaListIndex].peerAddr[0];
1fff98aa:	6040      	addu      	r1, r0
                        peerType = g_llResolvinglist[rpaListIndex].peerAddrType;
1fff98ac:	600c      	addu      	r0, r3
1fff98ae:	8000      	ld.b      	r0, (r0, 0x0)
                if ((pGlobal_config[LL_SWITCH] & LL_WHITELIST_ALLOW)
1fff98b0:	03a7      	lrw      	r5, 0x1fffa670	// 1fff9b10 <ll_processExtAdvIRQ+0x364>
1fff98b2:	9560      	ld.w      	r3, (r5, 0x0)
1fff98b4:	936b      	ld.w      	r3, (r3, 0x2c)
1fff98b6:	e4632008 	andi      	r3, r3, 8
1fff98ba:	3b40      	cmpnei      	r3, 0
1fff98bc:	0c2d      	bf      	0x1fff9916	// 1fff9916 <ll_processExtAdvIRQ+0x16a>
                    && (pAdvInfo->parameter.wlPolicy  == LL_ADV_WL_POLICY_WL_SCAN_REQ
1fff98be:	d8640020 	ld.b      	r3, (r4, 0x20)
1fff98c2:	e46320fd 	andi      	r3, r3, 253
1fff98c6:	3b41      	cmpnei      	r3, 1
1fff98c8:	0827      	bt      	0x1fff9916	// 1fff9916 <ll_processExtAdvIRQ+0x16a>
                    && (bWlRlCheckOk == TRUE)) {
1fff98ca:	3e41      	cmpnei      	r6, 1
1fff98cc:	0c22      	bf      	0x1fff9910	// 1fff9910 <ll_processExtAdvIRQ+0x164>
                    g_pmCounters.ll_filter_scan_req_cnt ++;
1fff98ce:	976c      	ld.w      	r3, (r7, 0x30)
1fff98d0:	2300      	addi      	r3, 1
1fff98d2:	b76c      	st.w      	r3, (r7, 0x30)
    if (!llWaitingIrq) {
1fff98d4:	036f      	lrw      	r3, 0x1fff0df8	// 1fff9b14 <ll_processExtAdvIRQ+0x368>
1fff98d6:	9360      	ld.w      	r3, (r3, 0x0)
1fff98d8:	3b40      	cmpnei      	r3, 0
1fff98da:	0808      	bt      	0x1fff98ea	// 1fff98ea <ll_processExtAdvIRQ+0x13e>
        ll_adv_scheduler();
1fff98dc:	e00007ec 	bsr      	0x1fffa8b4	// 1fffa8b4 <check_before_startup+0x1dc>
        ll_hw_clr_irq();
1fff98e0:	e000079c 	bsr      	0x1fffa818	// 1fffa818 <check_before_startup+0x140>
        llTaskState = LL_TASK_OTHERS;
1fff98e4:	0372      	lrw      	r3, 0x1fff15d0	// 1fff9b18 <ll_processExtAdvIRQ+0x36c>
1fff98e6:	3210      	movi      	r2, 16
1fff98e8:	a340      	st.b      	r2, (r3, 0x0)
    __ASM volatile("mtcr %0, psr" : : "r"(psr));
1fff98ea:	9861      	ld.w      	r3, (r14, 0x4)
1fff98ec:	c0036420 	mtcr      	r3, cr<0, 0>
    return TRUE;
1fff98f0:	3001      	movi      	r0, 1
}
1fff98f2:	1406      	addi      	r14, r14, 24
1fff98f4:	1494      	pop      	r4-r7, r15
            ownAddr = ownPublicAddr;
1fff98f6:	0375      	lrw      	r3, 0x1fff1185	// 1fff9b1c <ll_processExtAdvIRQ+0x370>
1fff98f8:	079f      	br      	0x1fff9836	// 1fff9836 <ll_processExtAdvIRQ+0x8a>
        txAdd    = (g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT;    // adv PDU header, bit 6: TxAdd, 0 - public, 1 - random
1fff98fa:	6c1b      	mov      	r0, r6
        uint8_t  bWlRlCheckOk = TRUE;
1fff98fc:	3601      	movi      	r6, 1
                peerAddr = &g_rx_adv_buf.data[0];      // ScanA
1fff98fe:	033d      	lrw      	r1, 0x1fff17fe	// 1fff9b04 <ll_processExtAdvIRQ+0x358>
1fff9900:	07d8      	br      	0x1fff98b0	// 1fff98b0 <ll_processExtAdvIRQ+0x104>
1fff9902:	3000      	movi      	r0, 0
1fff9904:	07fc      	br      	0x1fff98fc	// 1fff98fc <ll_processExtAdvIRQ+0x150>
1fff9906:	3001      	movi      	r0, 1
1fff9908:	07fb      	br      	0x1fff98fe	// 1fff98fe <ll_processExtAdvIRQ+0x152>
1fff990a:	3001      	movi      	r0, 1
                        bWlRlCheckOk = FALSE;
1fff990c:	3600      	movi      	r6, 0
1fff990e:	07f8      	br      	0x1fff98fe	// 1fff98fe <ll_processExtAdvIRQ+0x152>
                    bWlRlCheckOk = ll_isAddrInWhiteList(peerType, peerAddr);
1fff9910:	e0000712 	bsr      	0x1fffa734	// 1fffa734 <check_before_startup+0x5c>
1fff9914:	6d83      	mov      	r6, r0
                if (bWlRlCheckOk == FALSE) { // if not in white list, do nothing
1fff9916:	3e40      	cmpnei      	r6, 0
1fff9918:	0fdb      	bf      	0x1fff98ce	// 1fff98ce <ll_processExtAdvIRQ+0x122>
                    g_pmCounters.ll_rx_peer_cnt++;
1fff991a:	9774      	ld.w      	r3, (r7, 0x50)
1fff991c:	2300      	addi      	r3, 1
1fff991e:	b774      	st.w      	r3, (r7, 0x50)
                        ll_hw_set_stx();             // set LL HW as single Tx mode
1fff9920:	e00006f2 	bsr      	0x1fffa704	// 1fffa704 <check_before_startup+0x2c>
                        g_same_rf_channel_flag = TRUE;
1fff9924:	139f      	lrw      	r4, 0x1fff0e2c	// 1fff9b20 <ll_processExtAdvIRQ+0x374>
1fff9926:	3301      	movi      	r3, 1
1fff9928:	a460      	st.b      	r3, (r4, 0x0)
                        T2 = read_current_fine_time();
1fff992a:	e00008f7 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
                        delay = (T2 > ISR_entry_time) ? (T2 - ISR_entry_time) : (BASE_TIME_UNITS - ISR_entry_time + T2);
1fff992e:	137e      	lrw      	r3, 0x1fff0e1c	// 1fff9b24 <ll_processExtAdvIRQ+0x378>
1fff9930:	9360      	ld.w      	r3, (r3, 0x0)
1fff9932:	640c      	cmphs      	r3, r0
1fff9934:	600e      	subu      	r0, r3
1fff9936:	0826      	bt      	0x1fff9982	// 1fff9982 <ll_processExtAdvIRQ+0x1d6>
                        calibra_time = pGlobal_config[SCAN_RSP_DELAY];            // consider rx_done to ISR time, SW delay after read_current_fine_time(), func read_current_fine_time() delay ...
1fff9938:	9560      	ld.w      	r3, (r5, 0x0)
                        ll_hw_set_trx_settle(delay,                               // set BB delay, about 80us in 16MHz HCLK
1fff993a:	d8230040 	ld.b      	r1, (r3, 0x40)
1fff993e:	d8430044 	ld.b      	r2, (r3, 0x44)
                        delay = 118 - delay - calibra_time;                       // IFS = 150us, Tx tail -> Rx done time: about 32us
1fff9942:	93a1      	ld.w      	r5, (r3, 0x4)
1fff9944:	3376      	movi      	r3, 118
1fff9946:	60d6      	subu      	r3, r5
1fff9948:	60c2      	subu      	r3, r0
                        ll_hw_set_trx_settle(delay,                               // set BB delay, about 80us in 16MHz HCLK
1fff994a:	740c      	zextb      	r0, r3
1fff994c:	e00009fa 	bsr      	0x1fffad40	// 1fffad40 <check_before_startup+0x668>
                        ll_hw_go();
1fff9950:	e0000902 	bsr      	0x1fffab54	// 1fffab54 <check_before_startup+0x47c>
                        llWaitingIrq = TRUE;
1fff9954:	3201      	movi      	r2, 1
1fff9956:	1370      	lrw      	r3, 0x1fff0df8	// 1fff9b14 <ll_processExtAdvIRQ+0x368>
1fff9958:	b340      	st.w      	r2, (r3, 0x0)
                        g_same_rf_channel_flag = FALSE;
1fff995a:	3300      	movi      	r3, 0
1fff995c:	a460      	st.b      	r3, (r4, 0x0)
                        ll_hw_rst_rfifo();
1fff995e:	e0000865 	bsr      	0x1fffaa28	// 1fffaa28 <check_before_startup+0x350>
                        ll_hw_rst_tfifo();
1fff9962:	e00009a1 	bsr      	0x1fffaca4	// 1fffaca4 <check_before_startup+0x5cc>
                                          ((tx_scanRsp_desc.txheader & 0xff00) >> 8) + 2);   // payload length + header length(2)
1fff9966:	1311      	lrw      	r0, 0x1fff15e0	// 1fff9b28 <ll_processExtAdvIRQ+0x37c>
                        ll_hw_write_tfifo((uint8 *) & (tx_scanRsp_desc.txheader),
1fff9968:	2003      	addi      	r0, 4
                                          ((tx_scanRsp_desc.txheader & 0xff00) >> 8) + 2);   // payload length + header length(2)
1fff996a:	8820      	ld.h      	r1, (r0, 0x0)
1fff996c:	4928      	lsri      	r1, r1, 8
                        ll_hw_write_tfifo((uint8 *) & (tx_scanRsp_desc.txheader),
1fff996e:	2101      	addi      	r1, 2
1fff9970:	e00006b8 	bsr      	0x1fffa6e0	// 1fffa6e0 <check_before_startup+0x8>
                        ll_debug_output(DEBUG_LL_HW_SET_STX);
1fff9974:	300e      	movi      	r0, 14
1fff9976:	e00008b9 	bsr      	0x1fffaae8	// 1fffaae8 <check_before_startup+0x410>
                        g_pmCounters.ll_send_scan_rsp_cnt ++;
1fff997a:	9769      	ld.w      	r3, (r7, 0x24)
1fff997c:	2300      	addi      	r3, 1
1fff997e:	b769      	st.w      	r3, (r7, 0x24)
1fff9980:	07aa      	br      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                        delay = (T2 > ISR_entry_time) ? (T2 - ISR_entry_time) : (BASE_TIME_UNITS - ISR_entry_time + T2);
1fff9982:	c6a05023 	bmaski      	r3, 22
1fff9986:	600c      	addu      	r0, r3
1fff9988:	07d8      	br      	0x1fff9938	// 1fff9938 <ll_processExtAdvIRQ+0x18c>
        } else if (pdu_type == ADV_CONN_REQ
1fff998a:	3a45      	cmpnei      	r2, 5
1fff998c:	0ba4      	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                   && (pAdvInfo->parameter.advEventProperties == LL_EXT_ADV_PROP_ADV_IND
1fff998e:	8c43      	ld.h      	r2, (r4, 0x6)
1fff9990:	3a53      	cmpnei      	r2, 19
1fff9992:	0c06      	bf      	0x1fff999e	// 1fff999e <ll_processExtAdvIRQ+0x1f2>
                       || pAdvInfo->parameter.advEventProperties == LL_EXT_ADV_PROP_ADV_LDC_ADV
1fff9994:	ea01fff7 	movi      	r1, 65527
1fff9998:	6884      	and      	r2, r1
1fff999a:	3a55      	cmpnei      	r2, 21
1fff999c:	0b9c      	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
            g_pmCounters.ll_recv_conn_req_cnt ++;
1fff999e:	1255      	lrw      	r2, 0x1fff12e0	// 1fff9af0 <ll_processExtAdvIRQ+0x344>
            if (g_rx_adv_buf.data[6]  != ownAddr[0]
1fff99a0:	850c      	ld.b      	r0, (r5, 0xc)
            g_pmCounters.ll_recv_conn_req_cnt ++;
1fff99a2:	922a      	ld.w      	r1, (r2, 0x28)
1fff99a4:	2100      	addi      	r1, 1
1fff99a6:	b22a      	st.w      	r1, (r2, 0x28)
1fff99a8:	b840      	st.w      	r2, (r14, 0x0)
            if (g_rx_adv_buf.data[6]  != ownAddr[0]
1fff99aa:	8320      	ld.b      	r1, (r3, 0x0)
1fff99ac:	6442      	cmpne      	r0, r1
1fff99ae:	0b93      	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                || g_rx_adv_buf.data[7]  != ownAddr[1]
1fff99b0:	852d      	ld.b      	r1, (r5, 0xd)
1fff99b2:	8341      	ld.b      	r2, (r3, 0x1)
1fff99b4:	6486      	cmpne      	r1, r2
1fff99b6:	0b8f      	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                || g_rx_adv_buf.data[8]  != ownAddr[2]
1fff99b8:	852e      	ld.b      	r1, (r5, 0xe)
1fff99ba:	8342      	ld.b      	r2, (r3, 0x2)
1fff99bc:	6486      	cmpne      	r1, r2
1fff99be:	0b8b      	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                || g_rx_adv_buf.data[9]  != ownAddr[3]
1fff99c0:	852f      	ld.b      	r1, (r5, 0xf)
1fff99c2:	8343      	ld.b      	r2, (r3, 0x3)
1fff99c4:	6486      	cmpne      	r1, r2
1fff99c6:	0b87      	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                || g_rx_adv_buf.data[10] != ownAddr[4]
1fff99c8:	8530      	ld.b      	r1, (r5, 0x10)
1fff99ca:	8344      	ld.b      	r2, (r3, 0x4)
1fff99cc:	6486      	cmpne      	r1, r2
1fff99ce:	0b83      	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                || g_rx_adv_buf.data[11] != ownAddr[5]) {
1fff99d0:	8551      	ld.b      	r2, (r5, 0x11)
1fff99d2:	8365      	ld.b      	r3, (r3, 0x5)
1fff99d4:	64ca      	cmpne      	r2, r3
1fff99d6:	0b7f      	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                if (g_llRlEnable == TRUE             &&
1fff99d8:	126a      	lrw      	r3, 0x1fff0ddc	// 1fff9b00 <ll_processExtAdvIRQ+0x354>
1fff99da:	8360      	ld.b      	r3, (r3, 0x0)
1fff99dc:	3b41      	cmpnei      	r3, 1
1fff99de:	0856      	bt      	0x1fff9a8a	// 1fff9a8a <ll_processExtAdvIRQ+0x2de>
1fff99e0:	3e40      	cmpnei      	r6, 0
1fff99e2:	0c58      	bf      	0x1fff9a92	// 1fff9a92 <ll_processExtAdvIRQ+0x2e6>
                    txAdd == LL_DEV_ADDR_TYPE_RANDOM   &&
1fff99e4:	856b      	ld.b      	r3, (r5, 0xb)
1fff99e6:	e46320c0 	andi      	r3, r3, 192
1fff99ea:	eb430040 	cmpnei      	r3, 64
1fff99ee:	0854      	bt      	0x1fff9a96	// 1fff9a96 <ll_processExtAdvIRQ+0x2ea>
                    rpaListIndex = ll_getRPAListEntry(&g_rx_adv_buf.data[0]);
1fff99f0:	1205      	lrw      	r0, 0x1fff17fe	// 1fff9b04 <ll_processExtAdvIRQ+0x358>
1fff99f2:	e00008e1 	bsr      	0x1fffabb4	// 1fffabb4 <check_before_startup+0x4dc>
                    if (rpaListIndex < LL_RESOLVINGLIST_ENTRY_NUM) {
1fff99f6:	3807      	cmphsi      	r0, 8
1fff99f8:	0852      	bt      	0x1fff9a9c	// 1fff9a9c <ll_processExtAdvIRQ+0x2f0>
                        peerAddr = &g_llResolvinglist[rpaListIndex].peerAddr[0];
1fff99fa:	332e      	movi      	r3, 46
1fff99fc:	7c0c      	mult      	r0, r3
1fff99fe:	12e3      	lrw      	r7, 0x1fff0ff5	// 1fff9b08 <ll_processExtAdvIRQ+0x35c>
                        peerType = g_llResolvinglist[rpaListIndex].peerAddrType;
1fff9a00:	1263      	lrw      	r3, 0x1fff0ff4	// 1fff9b0c <ll_processExtAdvIRQ+0x360>
                        peerAddr = &g_llResolvinglist[rpaListIndex].peerAddr[0];
1fff9a02:	61c0      	addu      	r7, r0
                        peerType = g_llResolvinglist[rpaListIndex].peerAddrType;
1fff9a04:	600c      	addu      	r0, r3
1fff9a06:	8000      	ld.b      	r0, (r0, 0x0)
        uint8_t  bWlRlCheckOk = TRUE;
1fff9a08:	6cdb      	mov      	r3, r6
                if ((pGlobal_config[LL_SWITCH] & LL_WHITELIST_ALLOW)
1fff9a0a:	1242      	lrw      	r2, 0x1fffa670	// 1fff9b10 <ll_processExtAdvIRQ+0x364>
1fff9a0c:	9240      	ld.w      	r2, (r2, 0x0)
1fff9a0e:	924b      	ld.w      	r2, (r2, 0x2c)
1fff9a10:	e4422008 	andi      	r2, r2, 8
1fff9a14:	3a40      	cmpnei      	r2, 0
1fff9a16:	1246      	lrw      	r2, 0x1fff117d	// 1fff9b2c <ll_processExtAdvIRQ+0x380>
1fff9a18:	0c12      	bf      	0x1fff9a3c	// 1fff9a3c <ll_processExtAdvIRQ+0x290>
                    && (llState == LL_STATE_ADV_UNDIRECTED)
1fff9a1a:	8220      	ld.b      	r1, (r2, 0x0)
1fff9a1c:	3941      	cmpnei      	r1, 1
1fff9a1e:	080f      	bt      	0x1fff9a3c	// 1fff9a3c <ll_processExtAdvIRQ+0x290>
                        || pAdvInfo->parameter.wlPolicy  == LL_ADV_WL_POLICY_WL_ALL_REQ)
1fff9a20:	d8240020 	ld.b      	r1, (r4, 0x20)
1fff9a24:	2901      	subi      	r1, 2
                    && (pAdvInfo->parameter.wlPolicy   == LL_ADV_WL_POLICY_WL_CONNECT_REQ
1fff9a26:	7444      	zextb      	r1, r1
1fff9a28:	3901      	cmphsi      	r1, 2
1fff9a2a:	0809      	bt      	0x1fff9a3c	// 1fff9a3c <ll_processExtAdvIRQ+0x290>
                    && (bWlRlCheckOk == TRUE)) {
1fff9a2c:	3b41      	cmpnei      	r3, 1
1fff9a2e:	0807      	bt      	0x1fff9a3c	// 1fff9a3c <ll_processExtAdvIRQ+0x290>
                    bWlRlCheckOk = ll_isAddrInWhiteList(peerType, peerAddr);
1fff9a30:	6c5f      	mov      	r1, r7
1fff9a32:	b842      	st.w      	r2, (r14, 0x8)
1fff9a34:	e0000680 	bsr      	0x1fffa734	// 1fffa734 <check_before_startup+0x5c>
1fff9a38:	6cc3      	mov      	r3, r0
1fff9a3a:	9842      	ld.w      	r2, (r14, 0x8)
                if (llState == LL_STATE_ADV_DIRECTED) {
1fff9a3c:	8240      	ld.b      	r2, (r2, 0x0)
1fff9a3e:	3a42      	cmpnei      	r2, 2
1fff9a40:	081d      	bt      	0x1fff9a7a	// 1fff9a7a <ll_processExtAdvIRQ+0x2ce>
                    if (txAdd         != peerInfo.peerAddrType
1fff9a42:	115c      	lrw      	r2, 0x1fff11ba	// 1fff9b30 <ll_processExtAdvIRQ+0x384>
1fff9a44:	8220      	ld.b      	r1, (r2, 0x0)
1fff9a46:	6586      	cmpne      	r1, r6
1fff9a48:	081b      	bt      	0x1fff9a7e	// 1fff9a7e <ll_processExtAdvIRQ+0x2d2>
                        || peerAddr[0]  != peerInfo.peerAddr[0]
1fff9a4a:	8700      	ld.b      	r0, (r7, 0x0)
1fff9a4c:	8221      	ld.b      	r1, (r2, 0x1)
1fff9a4e:	6442      	cmpne      	r0, r1
1fff9a50:	0817      	bt      	0x1fff9a7e	// 1fff9a7e <ll_processExtAdvIRQ+0x2d2>
                        || peerAddr[1]  != peerInfo.peerAddr[1]
1fff9a52:	8701      	ld.b      	r0, (r7, 0x1)
1fff9a54:	8222      	ld.b      	r1, (r2, 0x2)
1fff9a56:	6442      	cmpne      	r0, r1
1fff9a58:	0813      	bt      	0x1fff9a7e	// 1fff9a7e <ll_processExtAdvIRQ+0x2d2>
                        || peerAddr[2]  != peerInfo.peerAddr[2]
1fff9a5a:	8702      	ld.b      	r0, (r7, 0x2)
1fff9a5c:	8223      	ld.b      	r1, (r2, 0x3)
1fff9a5e:	6442      	cmpne      	r0, r1
1fff9a60:	080f      	bt      	0x1fff9a7e	// 1fff9a7e <ll_processExtAdvIRQ+0x2d2>
                        || peerAddr[3]  != peerInfo.peerAddr[3]
1fff9a62:	8703      	ld.b      	r0, (r7, 0x3)
1fff9a64:	8224      	ld.b      	r1, (r2, 0x4)
1fff9a66:	6442      	cmpne      	r0, r1
1fff9a68:	080b      	bt      	0x1fff9a7e	// 1fff9a7e <ll_processExtAdvIRQ+0x2d2>
                        || peerAddr[4]  != peerInfo.peerAddr[4]
1fff9a6a:	8704      	ld.b      	r0, (r7, 0x4)
1fff9a6c:	8225      	ld.b      	r1, (r2, 0x5)
1fff9a6e:	6442      	cmpne      	r0, r1
1fff9a70:	0807      	bt      	0x1fff9a7e	// 1fff9a7e <ll_processExtAdvIRQ+0x2d2>
                        || peerAddr[5]  != peerInfo.peerAddr[5]) {
1fff9a72:	8725      	ld.b      	r1, (r7, 0x5)
1fff9a74:	8246      	ld.b      	r2, (r2, 0x6)
1fff9a76:	6486      	cmpne      	r1, r2
1fff9a78:	0803      	bt      	0x1fff9a7e	// 1fff9a7e <ll_processExtAdvIRQ+0x2d2>
                if (bWlRlCheckOk == FALSE) { // if not in white list, do nothing
1fff9a7a:	3b40      	cmpnei      	r3, 0
1fff9a7c:	0813      	bt      	0x1fff9aa2	// 1fff9aa2 <ll_processExtAdvIRQ+0x2f6>
                    g_pmCounters.ll_filter_conn_req_cnt ++;
1fff9a7e:	9860      	ld.w      	r3, (r14, 0x0)
1fff9a80:	9840      	ld.w      	r2, (r14, 0x0)
1fff9a82:	936d      	ld.w      	r3, (r3, 0x34)
1fff9a84:	2300      	addi      	r3, 1
1fff9a86:	b26d      	st.w      	r3, (r2, 0x34)
1fff9a88:	0726      	br      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
        txAdd    = (g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT;    // adv PDU header, bit 6: TxAdd, 0 - public, 1 - random
1fff9a8a:	6c1b      	mov      	r0, r6
        uint8_t  bWlRlCheckOk = TRUE;
1fff9a8c:	3301      	movi      	r3, 1
                peerAddr = &g_rx_adv_buf.data[0];        // initA
1fff9a8e:	10fe      	lrw      	r7, 0x1fff17fe	// 1fff9b04 <ll_processExtAdvIRQ+0x358>
1fff9a90:	07bd      	br      	0x1fff9a0a	// 1fff9a0a <ll_processExtAdvIRQ+0x25e>
1fff9a92:	3000      	movi      	r0, 0
1fff9a94:	07fc      	br      	0x1fff9a8c	// 1fff9a8c <ll_processExtAdvIRQ+0x2e0>
        uint8_t  bWlRlCheckOk = TRUE;
1fff9a96:	6cdb      	mov      	r3, r6
1fff9a98:	3001      	movi      	r0, 1
1fff9a9a:	07fa      	br      	0x1fff9a8e	// 1fff9a8e <ll_processExtAdvIRQ+0x2e2>
1fff9a9c:	3001      	movi      	r0, 1
                        bWlRlCheckOk = FALSE;
1fff9a9e:	3300      	movi      	r3, 0
1fff9aa0:	07f7      	br      	0x1fff9a8e	// 1fff9a8e <ll_processExtAdvIRQ+0x2e2>
                    g_pmCounters.ll_rx_peer_cnt++;
1fff9aa2:	9860      	ld.w      	r3, (r14, 0x0)
1fff9aa4:	9840      	ld.w      	r2, (r14, 0x0)
1fff9aa6:	9374      	ld.w      	r3, (r3, 0x50)
1fff9aa8:	2300      	addi      	r3, 1
1fff9aaa:	b274      	st.w      	r3, (r2, 0x50)
                    peerInfo.peerAddrType = (g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT;    // adv PDU header, bit 6: TxAdd, 0 - public, 1 - random
1fff9aac:	8d62      	ld.h      	r3, (r5, 0x4)
1fff9aae:	1101      	lrw      	r0, 0x1fff11ba	// 1fff9b30 <ll_processExtAdvIRQ+0x384>
1fff9ab0:	5366      	asri      	r3, r3, 6
                    osal_memcpy(peerInfo.peerAddr, g_rx_adv_buf.data, 6);
1fff9ab2:	3206      	movi      	r2, 6
1fff9ab4:	1034      	lrw      	r1, 0x1fff17fe	// 1fff9b04 <ll_processExtAdvIRQ+0x358>
                    peerInfo.peerAddrType = (g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT;    // adv PDU header, bit 6: TxAdd, 0 - public, 1 - random
1fff9ab6:	e4632001 	andi      	r3, r3, 1
1fff9aba:	a060      	st.b      	r3, (r0, 0x0)
                    osal_memcpy(peerInfo.peerAddr, g_rx_adv_buf.data, 6);
1fff9abc:	2000      	addi      	r0, 1
1fff9abe:	e0000869 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
                    move_to_slave_function();    // move to slave role for connection state
1fff9ac2:	e0000987 	bsr      	0x1fffadd0	// 1fffadd0 <check_before_startup+0x6f8>
                    pAdvInfo->active = FALSE;
1fff9ac6:	3300      	movi      	r3, 0
                    LL_AdvSetTerminatedCback(LL_STATUS_SUCCESS,
1fff9ac8:	105b      	lrw      	r2, 0x1fff1528	// 1fff9b34 <ll_processExtAdvIRQ+0x388>
1fff9aca:	8420      	ld.b      	r1, (r4, 0x0)
                    pAdvInfo->active = FALSE;
1fff9acc:	dc640042 	st.b      	r3, (r4, 0x42)
                    LL_AdvSetTerminatedCback(LL_STATUS_SUCCESS,
1fff9ad0:	8255      	ld.b      	r2, (r2, 0x15)
1fff9ad2:	d8640048 	ld.b      	r3, (r4, 0x48)
1fff9ad6:	3000      	movi      	r0, 0
1fff9ad8:	e00008f8 	bsr      	0x1fffacc8	// 1fffacc8 <check_before_startup+0x5f0>
1fff9adc:	06fc      	br      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
1fff9ade:	0000      	bkpt
1fff9ae0:	1fff12dc 	.long	0x1fff12dc
1fff9ae4:	1fff11b0 	.long	0x1fff11b0
1fff9ae8:	1fff1198 	.long	0x1fff1198
1fff9aec:	1fff17fc 	.long	0x1fff17fc
1fff9af0:	1fff12e0 	.long	0x1fff12e0
1fff9af4:	00ffff00 	.long	0x00ffff00
1fff9af8:	1fff17f8 	.long	0x1fff17f8
1fff9afc:	00010100 	.long	0x00010100
1fff9b00:	1fff0ddc 	.long	0x1fff0ddc
1fff9b04:	1fff17fe 	.long	0x1fff17fe
1fff9b08:	1fff0ff5 	.long	0x1fff0ff5
1fff9b0c:	1fff0ff4 	.long	0x1fff0ff4
1fff9b10:	1fffa670 	.long	0x1fffa670
1fff9b14:	1fff0df8 	.long	0x1fff0df8
1fff9b18:	1fff15d0 	.long	0x1fff15d0
1fff9b1c:	1fff1185 	.long	0x1fff1185
1fff9b20:	1fff0e2c 	.long	0x1fff0e2c
1fff9b24:	1fff0e1c 	.long	0x1fff0e1c
1fff9b28:	1fff15e0 	.long	0x1fff15e0
1fff9b2c:	1fff117d 	.long	0x1fff117d
1fff9b30:	1fff11ba 	.long	0x1fff11ba
1fff9b34:	1fff1528 	.long	0x1fff1528
    } else if (mode == LL_HW_MODE_TRX  &&
1fff9b38:	3e42      	cmpnei      	r6, 2
1fff9b3a:	0acd      	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
               (irq_status & LIRQ_COK)) {
1fff9b3c:	e4a52400 	andi      	r5, r5, 1024
    } else if (mode == LL_HW_MODE_TRX  &&
1fff9b40:	3d40      	cmpnei      	r5, 0
1fff9b42:	0ec9      	bf      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
        ll_debug_output(DEBUG_LL_HW_TRX);
1fff9b44:	3007      	movi      	r0, 7
1fff9b46:	e00007d1 	bsr      	0x1fffaae8	// 1fffaae8 <check_before_startup+0x410>
        packet_len = ll_hw_read_rfifo1((uint8_t *)(&(g_rx_adv_buf.rxheader)),
1fff9b4a:	010a      	lrw      	r0, 0x1fff17fc	// 1fff9e9c <ll_processExtAdvIRQ+0x6f0>
1fff9b4c:	1b05      	addi      	r3, r14, 20
1fff9b4e:	1a04      	addi      	r2, r14, 16
1fff9b50:	e42e000d 	addi      	r1, r14, 14
1fff9b54:	e3ffde94 	bsr      	0x1fff587c	// 1fff587c <ll_hw_read_rfifo1>
1fff9b58:	6d43      	mov      	r5, r0
        if (ll_hw_get_rfifo_depth() > 0) {
1fff9b5a:	e00008c9 	bsr      	0x1fffacec	// 1fffacec <check_before_startup+0x614>
1fff9b5e:	3820      	cmplti      	r0, 1
1fff9b60:	0809      	bt      	0x1fff9b72	// 1fff9b72 <ll_processExtAdvIRQ+0x3c6>
            g_pmCounters.ll_rfifo_read_err++;
1fff9b62:	014f      	lrw      	r2, 0x1fff12e0	// 1fff9ea0 <ll_processExtAdvIRQ+0x6f4>
            packet_len = 0;
1fff9b64:	3500      	movi      	r5, 0
            g_pmCounters.ll_rfifo_read_err++;
1fff9b66:	9279      	ld.w      	r3, (r2, 0x64)
1fff9b68:	2300      	addi      	r3, 1
1fff9b6a:	b279      	st.w      	r3, (r2, 0x64)
            pktLen = 0;
1fff9b6c:	3300      	movi      	r3, 0
1fff9b6e:	dc6e1007 	st.h      	r3, (r14, 0xe)
        if (pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RANDOM && pAdvInfo->parameter.isOwnRandomAddressSet == TRUE) {
1fff9b72:	0112      	lrw      	r0, 0xffff00	// 1fff9ea4 <ll_processExtAdvIRQ+0x6f8>
1fff9b74:	9444      	ld.w      	r2, (r4, 0x10)
1fff9b76:	6880      	and      	r2, r0
        pdu_type = g_rx_adv_buf.rxheader & PDU_TYPE_MASK;
1fff9b78:	0173      	lrw      	r3, 0x1fff17f8	// 1fff9ea8 <ll_processExtAdvIRQ+0x6fc>
        if (pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RANDOM && pAdvInfo->parameter.isOwnRandomAddressSet == TRUE) {
1fff9b7a:	0112      	lrw      	r0, 0x10100	// 1fff9eac <ll_processExtAdvIRQ+0x700>
        pdu_type = g_rx_adv_buf.rxheader & PDU_TYPE_MASK;
1fff9b7c:	8be2      	ld.h      	r7, (r3, 0x4)
        if (pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RANDOM && pAdvInfo->parameter.isOwnRandomAddressSet == TRUE) {
1fff9b7e:	640a      	cmpne      	r2, r0
        pdu_type = g_rx_adv_buf.rxheader & PDU_TYPE_MASK;
1fff9b80:	e427200f 	andi      	r1, r7, 15
        txAdd    = (g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT;    // adv PDU header, bit 6: TxAdd, 0 - public, 1 - random
1fff9b84:	57e6      	asri      	r7, r7, 6
1fff9b86:	e4e72001 	andi      	r7, r7, 1
        if (pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RANDOM && pAdvInfo->parameter.isOwnRandomAddressSet == TRUE) {
1fff9b8a:	0853      	bt      	0x1fff9c30	// 1fff9c30 <ll_processExtAdvIRQ+0x484>
            ownAddr = pAdvInfo->parameter.ownRandomAddress;
1fff9b8c:	e4440012 	addi      	r2, r4, 19
        if (packet_len > 0
1fff9b90:	3d40      	cmpnei      	r5, 0
1fff9b92:	0cb6      	bf      	0x1fff9cfe	// 1fff9cfe <ll_processExtAdvIRQ+0x552>
            && pdu_type == ADV_AUX_SCAN_REQ
1fff9b94:	3943      	cmpnei      	r1, 3
1fff9b96:	08b4      	bt      	0x1fff9cfe	// 1fff9cfe <ll_processExtAdvIRQ+0x552>
            && (pAdvInfo->parameter.advEventProperties & LE_ADV_PROP_SCAN_BITMASK)) {
1fff9b98:	8c23      	ld.h      	r1, (r4, 0x6)
1fff9b9a:	e4212002 	andi      	r1, r1, 2
1fff9b9e:	3940      	cmpnei      	r1, 0
1fff9ba0:	0e9a      	bf      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
            g_pmCounters.ll_recv_scan_req_cnt ++;
1fff9ba2:	01bf      	lrw      	r5, 0x1fff12e0	// 1fff9ea0 <ll_processExtAdvIRQ+0x6f4>
            if (g_rx_adv_buf.data[6]  != ownAddr[0]
1fff9ba4:	830c      	ld.b      	r0, (r3, 0xc)
            g_pmCounters.ll_recv_scan_req_cnt ++;
1fff9ba6:	9528      	ld.w      	r1, (r5, 0x20)
1fff9ba8:	2100      	addi      	r1, 1
1fff9baa:	b528      	st.w      	r1, (r5, 0x20)
            if (g_rx_adv_buf.data[6]  != ownAddr[0]
1fff9bac:	8220      	ld.b      	r1, (r2, 0x0)
1fff9bae:	6442      	cmpne      	r0, r1
1fff9bb0:	0a92      	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                || g_rx_adv_buf.data[7]  != ownAddr[1]
1fff9bb2:	830d      	ld.b      	r0, (r3, 0xd)
1fff9bb4:	8221      	ld.b      	r1, (r2, 0x1)
1fff9bb6:	6442      	cmpne      	r0, r1
1fff9bb8:	0a8e      	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                || g_rx_adv_buf.data[8]  != ownAddr[2]
1fff9bba:	830e      	ld.b      	r0, (r3, 0xe)
1fff9bbc:	8222      	ld.b      	r1, (r2, 0x2)
1fff9bbe:	6442      	cmpne      	r0, r1
1fff9bc0:	0a8a      	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                || g_rx_adv_buf.data[9]  != ownAddr[3]
1fff9bc2:	830f      	ld.b      	r0, (r3, 0xf)
1fff9bc4:	8223      	ld.b      	r1, (r2, 0x3)
1fff9bc6:	6442      	cmpne      	r0, r1
1fff9bc8:	0a86      	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                || g_rx_adv_buf.data[10] != ownAddr[4]
1fff9bca:	8310      	ld.b      	r0, (r3, 0x10)
1fff9bcc:	8224      	ld.b      	r1, (r2, 0x4)
1fff9bce:	6442      	cmpne      	r0, r1
1fff9bd0:	0a82      	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                || g_rx_adv_buf.data[11] != ownAddr[5]) {
1fff9bd2:	8331      	ld.b      	r1, (r3, 0x11)
1fff9bd4:	8245      	ld.b      	r2, (r2, 0x5)
1fff9bd6:	6486      	cmpne      	r1, r2
1fff9bd8:	0a7e      	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                if (g_llRlEnable == TRUE          &&
1fff9bda:	0249      	lrw      	r2, 0x1fff0ddc	// 1fff9eb0 <ll_processExtAdvIRQ+0x704>
1fff9bdc:	8240      	ld.b      	r2, (r2, 0x0)
1fff9bde:	3a41      	cmpnei      	r2, 1
1fff9be0:	0830      	bt      	0x1fff9c40	// 1fff9c40 <ll_processExtAdvIRQ+0x494>
1fff9be2:	3f40      	cmpnei      	r7, 0
1fff9be4:	0c32      	bf      	0x1fff9c48	// 1fff9c48 <ll_processExtAdvIRQ+0x49c>
                    txAdd == LL_DEV_ADDR_TYPE_RANDOM &&
1fff9be6:	836b      	ld.b      	r3, (r3, 0xb)
1fff9be8:	e46320c0 	andi      	r3, r3, 192
1fff9bec:	eb430040 	cmpnei      	r3, 64
1fff9bf0:	082e      	bt      	0x1fff9c4c	// 1fff9c4c <ll_processExtAdvIRQ+0x4a0>
                    rpaListIndex = ll_getRPAListEntry(&g_rx_adv_buf.data[0]);
1fff9bf2:	020e      	lrw      	r0, 0x1fff17fe	// 1fff9eb4 <ll_processExtAdvIRQ+0x708>
1fff9bf4:	e00007e0 	bsr      	0x1fffabb4	// 1fffabb4 <check_before_startup+0x4dc>
                    if (rpaListIndex < LL_RESOLVINGLIST_ENTRY_NUM) {
1fff9bf8:	3807      	cmphsi      	r0, 8
1fff9bfa:	082b      	bt      	0x1fff9c50	// 1fff9c50 <ll_processExtAdvIRQ+0x4a4>
                        peerAddr = &g_llResolvinglist[rpaListIndex].peerAddr[0];
1fff9bfc:	332e      	movi      	r3, 46
1fff9bfe:	7c0c      	mult      	r0, r3
1fff9c00:	0231      	lrw      	r1, 0x1fff0ff5	// 1fff9eb8 <ll_processExtAdvIRQ+0x70c>
                        peerType = g_llResolvinglist[rpaListIndex].peerAddrType;
1fff9c02:	0270      	lrw      	r3, 0x1fff0ff4	// 1fff9ebc <ll_processExtAdvIRQ+0x710>
                        peerAddr = &g_llResolvinglist[rpaListIndex].peerAddr[0];
1fff9c04:	6040      	addu      	r1, r0
                        peerType = g_llResolvinglist[rpaListIndex].peerAddrType;
1fff9c06:	600c      	addu      	r0, r3
1fff9c08:	8000      	ld.b      	r0, (r0, 0x0)
                if ((pGlobal_config[LL_SWITCH] & LL_WHITELIST_ALLOW)
1fff9c0a:	02d1      	lrw      	r6, 0x1fffa670	// 1fff9ec0 <ll_processExtAdvIRQ+0x714>
1fff9c0c:	9660      	ld.w      	r3, (r6, 0x0)
1fff9c0e:	936b      	ld.w      	r3, (r3, 0x2c)
1fff9c10:	e4632008 	andi      	r3, r3, 8
1fff9c14:	3b40      	cmpnei      	r3, 0
1fff9c16:	0c23      	bf      	0x1fff9c5c	// 1fff9c5c <ll_processExtAdvIRQ+0x4b0>
                    && (pAdvInfo->parameter.wlPolicy  == LL_ADV_WL_POLICY_WL_SCAN_REQ
1fff9c18:	d8640020 	ld.b      	r3, (r4, 0x20)
1fff9c1c:	e46320fd 	andi      	r3, r3, 253
1fff9c20:	3b41      	cmpnei      	r3, 1
1fff9c22:	081d      	bt      	0x1fff9c5c	// 1fff9c5c <ll_processExtAdvIRQ+0x4b0>
                    && (bWlRlCheckOk == TRUE)) {
1fff9c24:	3f41      	cmpnei      	r7, 1
1fff9c26:	0c18      	bf      	0x1fff9c56	// 1fff9c56 <ll_processExtAdvIRQ+0x4aa>
                    g_pmCounters.ll_filter_scan_req_cnt ++;
1fff9c28:	956c      	ld.w      	r3, (r5, 0x30)
1fff9c2a:	2300      	addi      	r3, 1
1fff9c2c:	b56c      	st.w      	r3, (r5, 0x30)
1fff9c2e:	0653      	br      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
        } else if (g_currentLocalAddrType == LL_DEV_ADDR_TYPE_RPA_RANDOM) {
1fff9c30:	025a      	lrw      	r2, 0x1fff1904	// 1fff9ec4 <ll_processExtAdvIRQ+0x718>
            ownAddr = ownPublicAddr;
1fff9c32:	0219      	lrw      	r0, 0x1fff15d1	// 1fff9ec8 <ll_processExtAdvIRQ+0x71c>
        } else if (g_currentLocalAddrType == LL_DEV_ADDR_TYPE_RPA_RANDOM) {
1fff9c34:	8240      	ld.b      	r2, (r2, 0x0)
            ownAddr = ownPublicAddr;
1fff9c36:	3a43      	cmpnei      	r2, 3
1fff9c38:	025a      	lrw      	r2, 0x1fff1185	// 1fff9ecc <ll_processExtAdvIRQ+0x720>
1fff9c3a:	c4400c20 	incf      	r2, r0, 0
1fff9c3e:	07a9      	br      	0x1fff9b90	// 1fff9b90 <ll_processExtAdvIRQ+0x3e4>
        txAdd    = (g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT;    // adv PDU header, bit 6: TxAdd, 0 - public, 1 - random
1fff9c40:	6c1f      	mov      	r0, r7
        uint8_t  bWlRlCheckOk = TRUE;
1fff9c42:	3701      	movi      	r7, 1
                peerAddr = &g_rx_adv_buf.data[0];      // ScanA
1fff9c44:	0323      	lrw      	r1, 0x1fff17fe	// 1fff9eb4 <ll_processExtAdvIRQ+0x708>
1fff9c46:	07e2      	br      	0x1fff9c0a	// 1fff9c0a <ll_processExtAdvIRQ+0x45e>
1fff9c48:	3000      	movi      	r0, 0
1fff9c4a:	07fc      	br      	0x1fff9c42	// 1fff9c42 <ll_processExtAdvIRQ+0x496>
1fff9c4c:	3001      	movi      	r0, 1
1fff9c4e:	07fb      	br      	0x1fff9c44	// 1fff9c44 <ll_processExtAdvIRQ+0x498>
1fff9c50:	3001      	movi      	r0, 1
                        bWlRlCheckOk = FALSE;
1fff9c52:	3700      	movi      	r7, 0
1fff9c54:	07f8      	br      	0x1fff9c44	// 1fff9c44 <ll_processExtAdvIRQ+0x498>
                    bWlRlCheckOk = ll_isAddrInWhiteList(peerType, peerAddr);
1fff9c56:	e000056f 	bsr      	0x1fffa734	// 1fffa734 <check_before_startup+0x5c>
1fff9c5a:	6dc3      	mov      	r7, r0
                if (bWlRlCheckOk == FALSE) { // if not in white list, do nothing
1fff9c5c:	3f40      	cmpnei      	r7, 0
1fff9c5e:	0fe5      	bf      	0x1fff9c28	// 1fff9c28 <ll_processExtAdvIRQ+0x47c>
                    g_pmCounters.ll_rx_peer_cnt++;
1fff9c60:	9574      	ld.w      	r3, (r5, 0x50)
1fff9c62:	2300      	addi      	r3, 1
                    g_tx_ext_adv_buf.txheader = 0;
1fff9c64:	3200      	movi      	r2, 0
                    llSetupAuxScanRspPDU(pAdvInfo);
1fff9c66:	6c13      	mov      	r0, r4
                    g_pmCounters.ll_rx_peer_cnt++;
1fff9c68:	b574      	st.w      	r3, (r5, 0x50)
                    g_same_rf_channel_flag = TRUE;
1fff9c6a:	03e5      	lrw      	r7, 0x1fff0e2c	// 1fff9ed0 <ll_processExtAdvIRQ+0x724>
                    g_tx_ext_adv_buf.txheader = 0;
1fff9c6c:	0365      	lrw      	r3, 0x1fff191c	// 1fff9ed4 <ll_processExtAdvIRQ+0x728>
1fff9c6e:	b860      	st.w      	r3, (r14, 0x0)
1fff9c70:	ab42      	st.h      	r2, (r3, 0x4)
                    llSetupAuxScanRspPDU(pAdvInfo);
1fff9c72:	e0000669 	bsr      	0x1fffa944	// 1fffa944 <check_before_startup+0x26c>
                    ll_hw_set_stx();             // set LL HW as single Tx mode
1fff9c76:	e0000547 	bsr      	0x1fffa704	// 1fffa704 <check_before_startup+0x2c>
                    g_same_rf_channel_flag = TRUE;
1fff9c7a:	3301      	movi      	r3, 1
1fff9c7c:	a760      	st.b      	r3, (r7, 0x0)
                    T2 = read_current_fine_time();
1fff9c7e:	e000074d 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
                    delay = (T2 > ISR_entry_time) ? (T2 - ISR_entry_time) : (BASE_TIME_UNITS - ISR_entry_time + T2);
1fff9c82:	0349      	lrw      	r2, 0x1fff0e1c	// 1fff9ed8 <ll_processExtAdvIRQ+0x72c>
1fff9c84:	9860      	ld.w      	r3, (r14, 0x0)
1fff9c86:	9240      	ld.w      	r2, (r2, 0x0)
1fff9c88:	6d0f      	mov      	r4, r3
1fff9c8a:	6408      	cmphs      	r2, r0
1fff9c8c:	600a      	subu      	r0, r2
1fff9c8e:	080a      	bt      	0x1fff9ca2	// 1fff9ca2 <ll_processExtAdvIRQ+0x4f6>
                    if (g_rfPhyPktFmt == PKT_FMT_BLE1M) {
1fff9c90:	036c      	lrw      	r3, 0x1fff08ae	// 1fff9edc <ll_processExtAdvIRQ+0x730>
1fff9c92:	8340      	ld.b      	r2, (r3, 0x0)
1fff9c94:	3a41      	cmpnei      	r2, 1
1fff9c96:	080a      	bt      	0x1fff9caa	// 1fff9caa <ll_processExtAdvIRQ+0x4fe>
                        calibra_time = pGlobal_config[EXT_ADV_AUXSCANRSP_DELAY_1MPHY];
1fff9c98:	9640      	ld.w      	r2, (r6, 0x0)
                        delay = 118 - delay - calibra_time;
1fff9c9a:	d8422065 	ld.w      	r2, (r2, 0x194)
                        delay = 118 - delay - calibra_time;
1fff9c9e:	3176      	movi      	r1, 118
1fff9ca0:	040c      	br      	0x1fff9cb8	// 1fff9cb8 <ll_processExtAdvIRQ+0x50c>
                    delay = (T2 > ISR_entry_time) ? (T2 - ISR_entry_time) : (BASE_TIME_UNITS - ISR_entry_time + T2);
1fff9ca2:	c6a05023 	bmaski      	r3, 22
1fff9ca6:	600c      	addu      	r0, r3
1fff9ca8:	07f4      	br      	0x1fff9c90	// 1fff9c90 <ll_processExtAdvIRQ+0x4e4>
                    } else if (g_rfPhyPktFmt == PKT_FMT_BLE2M) {
1fff9caa:	8340      	ld.b      	r2, (r3, 0x0)
1fff9cac:	3a42      	cmpnei      	r2, 2
                        calibra_time = pGlobal_config[EXT_ADV_AUXSCANRSP_DELAY_2MPHY];
1fff9cae:	9640      	ld.w      	r2, (r6, 0x0)
                    } else if (g_rfPhyPktFmt == PKT_FMT_BLE2M) {
1fff9cb0:	0824      	bt      	0x1fff9cf8	// 1fff9cf8 <ll_processExtAdvIRQ+0x54c>
                        delay = 118 + 14 - delay - calibra_time;
1fff9cb2:	d8422067 	ld.w      	r2, (r2, 0x19c)
1fff9cb6:	3184      	movi      	r1, 132
                        delay = 118 - delay - calibra_time;
1fff9cb8:	604a      	subu      	r1, r2
1fff9cba:	6042      	subu      	r1, r0
                    ll_hw_trx_settle_bb(g_rfPhyPktFmt, delay);
1fff9cbc:	8300      	ld.b      	r0, (r3, 0x0)
1fff9cbe:	7400      	zextb      	r0, r0
1fff9cc0:	7444      	zextb      	r1, r1
1fff9cc2:	e3fff24b 	bsr      	0x1fff8158	// 1fff8158 <ll_hw_trx_settle_bb>
                    ll_hw_go();
1fff9cc6:	e0000747 	bsr      	0x1fffab54	// 1fffab54 <check_before_startup+0x47c>
                    llWaitingIrq = TRUE;
1fff9cca:	3201      	movi      	r2, 1
1fff9ccc:	037a      	lrw      	r3, 0x1fff0df8	// 1fff9ee0 <ll_processExtAdvIRQ+0x734>
1fff9cce:	b340      	st.w      	r2, (r3, 0x0)
                    g_same_rf_channel_flag = FALSE;
1fff9cd0:	3300      	movi      	r3, 0
1fff9cd2:	a760      	st.b      	r3, (r7, 0x0)
                    ll_hw_rst_rfifo();
1fff9cd4:	e00006aa 	bsr      	0x1fffaa28	// 1fffaa28 <check_before_startup+0x350>
                    ll_hw_rst_tfifo();
1fff9cd8:	e00007e6 	bsr      	0x1fffaca4	// 1fffaca4 <check_before_startup+0x5cc>
                    ll_hw_write_tfifo((uint8 *) & (g_tx_ext_adv_buf.txheader),
1fff9cdc:	031d      	lrw      	r0, 0x1fff1920	// 1fff9ee4 <ll_processExtAdvIRQ+0x738>
                                      ((g_tx_ext_adv_buf.txheader & 0xff00) >> 8) + 2);   // payload length + header length(2)
1fff9cde:	8c22      	ld.h      	r1, (r4, 0x4)
1fff9ce0:	4928      	lsri      	r1, r1, 8
                    ll_hw_write_tfifo((uint8 *) & (g_tx_ext_adv_buf.txheader),
1fff9ce2:	2101      	addi      	r1, 2
1fff9ce4:	e00004fe 	bsr      	0x1fffa6e0	// 1fffa6e0 <check_before_startup+0x8>
                    ll_debug_output(DEBUG_LL_HW_SET_STX);
1fff9ce8:	300e      	movi      	r0, 14
1fff9cea:	e00006ff 	bsr      	0x1fffaae8	// 1fffaae8 <check_before_startup+0x410>
                    g_pmCounters.ll_send_scan_rsp_cnt ++;
1fff9cee:	9569      	ld.w      	r3, (r5, 0x24)
1fff9cf0:	2300      	addi      	r3, 1
1fff9cf2:	b569      	st.w      	r3, (r5, 0x24)
1fff9cf4:	e800fdf0 	br      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                        delay = 118 - delay - calibra_time;
1fff9cf8:	d842206b 	ld.w      	r2, (r2, 0x1ac)
1fff9cfc:	07d1      	br      	0x1fff9c9e	// 1fff9c9e <ll_processExtAdvIRQ+0x4f2>
        } else if (pdu_type == ADV_AUX_CONN_REQ
1fff9cfe:	3945      	cmpnei      	r1, 5
1fff9d00:	e860fdea 	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                   && (pAdvInfo->parameter.advEventProperties & LE_ADV_PROP_CONN_BITMASK)) {
1fff9d04:	8c23      	ld.h      	r1, (r4, 0x6)
1fff9d06:	e4212001 	andi      	r1, r1, 1
1fff9d0a:	3940      	cmpnei      	r1, 0
1fff9d0c:	e840fde4 	bf      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
            g_auxconnreq_ISR_entry_time = ISR_entry_time;
1fff9d10:	1332      	lrw      	r1, 0x1fff0e1c	// 1fff9ed8 <ll_processExtAdvIRQ+0x72c>
1fff9d12:	1316      	lrw      	r0, 0x1fffcf04	// 1fff9ee8 <ll_processExtAdvIRQ+0x73c>
            if (g_rx_adv_buf.data[6]  != ownAddr[0]
1fff9d14:	83cc      	ld.b      	r6, (r3, 0xc)
            g_auxconnreq_ISR_entry_time = ISR_entry_time;
1fff9d16:	91a0      	ld.w      	r5, (r1, 0x0)
1fff9d18:	b820      	st.w      	r1, (r14, 0x0)
1fff9d1a:	b0a0      	st.w      	r5, (r0, 0x0)
            g_pmCounters.ll_recv_conn_req_cnt ++;
1fff9d1c:	13a1      	lrw      	r5, 0x1fff12e0	// 1fff9ea0 <ll_processExtAdvIRQ+0x6f4>
1fff9d1e:	950a      	ld.w      	r0, (r5, 0x28)
1fff9d20:	2000      	addi      	r0, 1
1fff9d22:	b50a      	st.w      	r0, (r5, 0x28)
            if (g_rx_adv_buf.data[6]  != ownAddr[0]
1fff9d24:	8200      	ld.b      	r0, (r2, 0x0)
1fff9d26:	641a      	cmpne      	r6, r0
1fff9d28:	e860fdd6 	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                || g_rx_adv_buf.data[7]  != ownAddr[1]
1fff9d2c:	830d      	ld.b      	r0, (r3, 0xd)
1fff9d2e:	8221      	ld.b      	r1, (r2, 0x1)
1fff9d30:	6442      	cmpne      	r0, r1
1fff9d32:	e860fdd1 	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                || g_rx_adv_buf.data[8]  != ownAddr[2]
1fff9d36:	830e      	ld.b      	r0, (r3, 0xe)
1fff9d38:	8222      	ld.b      	r1, (r2, 0x2)
1fff9d3a:	6442      	cmpne      	r0, r1
1fff9d3c:	e860fdcc 	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                || g_rx_adv_buf.data[9]  != ownAddr[3]
1fff9d40:	830f      	ld.b      	r0, (r3, 0xf)
1fff9d42:	8223      	ld.b      	r1, (r2, 0x3)
1fff9d44:	6442      	cmpne      	r0, r1
1fff9d46:	e860fdc7 	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                || g_rx_adv_buf.data[10] != ownAddr[4]
1fff9d4a:	8310      	ld.b      	r0, (r3, 0x10)
1fff9d4c:	8224      	ld.b      	r1, (r2, 0x4)
1fff9d4e:	6442      	cmpne      	r0, r1
1fff9d50:	e860fdc2 	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                || g_rx_adv_buf.data[11] != ownAddr[5]) {
1fff9d54:	8331      	ld.b      	r1, (r3, 0x11)
1fff9d56:	8245      	ld.b      	r2, (r2, 0x5)
1fff9d58:	6486      	cmpne      	r1, r2
1fff9d5a:	e860fdbd 	bt      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
                if (g_llRlEnable == TRUE             &&
1fff9d5e:	1255      	lrw      	r2, 0x1fff0ddc	// 1fff9eb0 <ll_processExtAdvIRQ+0x704>
1fff9d60:	8240      	ld.b      	r2, (r2, 0x0)
1fff9d62:	3a41      	cmpnei      	r2, 1
1fff9d64:	082b      	bt      	0x1fff9dba	// 1fff9dba <ll_processExtAdvIRQ+0x60e>
1fff9d66:	3f40      	cmpnei      	r7, 0
1fff9d68:	0c2d      	bf      	0x1fff9dc2	// 1fff9dc2 <ll_processExtAdvIRQ+0x616>
                    txAdd == LL_DEV_ADDR_TYPE_RANDOM   &&
1fff9d6a:	834b      	ld.b      	r2, (r3, 0xb)
1fff9d6c:	e44220c0 	andi      	r2, r2, 192
1fff9d70:	eb420040 	cmpnei      	r2, 64
1fff9d74:	0829      	bt      	0x1fff9dc6	// 1fff9dc6 <ll_processExtAdvIRQ+0x61a>
                    rpaListIndex = ll_getRPAListEntry(&g_rx_adv_buf.data[0]);
1fff9d76:	1210      	lrw      	r0, 0x1fff17fe	// 1fff9eb4 <ll_processExtAdvIRQ+0x708>
1fff9d78:	6d8f      	mov      	r6, r3
1fff9d7a:	e000071d 	bsr      	0x1fffabb4	// 1fffabb4 <check_before_startup+0x4dc>
                    if (rpaListIndex < LL_RESOLVINGLIST_ENTRY_NUM) {
1fff9d7e:	6cdb      	mov      	r3, r6
1fff9d80:	3807      	cmphsi      	r0, 8
1fff9d82:	0824      	bt      	0x1fff9dca	// 1fff9dca <ll_processExtAdvIRQ+0x61e>
                        peerAddr = &g_llResolvinglist[rpaListIndex].peerAddr[0];
1fff9d84:	322e      	movi      	r2, 46
1fff9d86:	7c08      	mult      	r0, r2
1fff9d88:	122c      	lrw      	r1, 0x1fff0ff5	// 1fff9eb8 <ll_processExtAdvIRQ+0x70c>
                        peerType = g_llResolvinglist[rpaListIndex].peerAddrType;
1fff9d8a:	124d      	lrw      	r2, 0x1fff0ff4	// 1fff9ebc <ll_processExtAdvIRQ+0x710>
                        peerAddr = &g_llResolvinglist[rpaListIndex].peerAddr[0];
1fff9d8c:	6040      	addu      	r1, r0
                        peerType = g_llResolvinglist[rpaListIndex].peerAddrType;
1fff9d8e:	6008      	addu      	r0, r2
1fff9d90:	8000      	ld.b      	r0, (r0, 0x0)
                if ((pGlobal_config[LL_SWITCH] & LL_WHITELIST_ALLOW)
1fff9d92:	12cc      	lrw      	r6, 0x1fffa670	// 1fff9ec0 <ll_processExtAdvIRQ+0x714>
1fff9d94:	9640      	ld.w      	r2, (r6, 0x0)
1fff9d96:	924b      	ld.w      	r2, (r2, 0x2c)
1fff9d98:	e4422008 	andi      	r2, r2, 8
1fff9d9c:	3a40      	cmpnei      	r2, 0
1fff9d9e:	0c1e      	bf      	0x1fff9dda	// 1fff9dda <ll_processExtAdvIRQ+0x62e>
                        || pAdvInfo->parameter.wlPolicy  == LL_ADV_WL_POLICY_WL_ALL_REQ)
1fff9da0:	d8440020 	ld.b      	r2, (r4, 0x20)
1fff9da4:	2a01      	subi      	r2, 2
                    && (pAdvInfo->parameter.wlPolicy   == LL_ADV_WL_POLICY_WL_CONNECT_REQ
1fff9da6:	7488      	zextb      	r2, r2
1fff9da8:	3a01      	cmphsi      	r2, 2
1fff9daa:	0818      	bt      	0x1fff9dda	// 1fff9dda <ll_processExtAdvIRQ+0x62e>
                    && (bWlRlCheckOk == TRUE)) {
1fff9dac:	3f41      	cmpnei      	r7, 1
1fff9dae:	0c11      	bf      	0x1fff9dd0	// 1fff9dd0 <ll_processExtAdvIRQ+0x624>
                    g_pmCounters.ll_filter_conn_req_cnt ++;
1fff9db0:	956d      	ld.w      	r3, (r5, 0x34)
1fff9db2:	2300      	addi      	r3, 1
1fff9db4:	b56d      	st.w      	r3, (r5, 0x34)
1fff9db6:	e800fd8f 	br      	0x1fff98d4	// 1fff98d4 <ll_processExtAdvIRQ+0x128>
        txAdd    = (g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT;    // adv PDU header, bit 6: TxAdd, 0 - public, 1 - random
1fff9dba:	6c1f      	mov      	r0, r7
        uint8_t  bWlRlCheckOk = TRUE;
1fff9dbc:	3701      	movi      	r7, 1
                peerAddr = &g_rx_adv_buf.data[0];        // initA
1fff9dbe:	113e      	lrw      	r1, 0x1fff17fe	// 1fff9eb4 <ll_processExtAdvIRQ+0x708>
1fff9dc0:	07e9      	br      	0x1fff9d92	// 1fff9d92 <ll_processExtAdvIRQ+0x5e6>
1fff9dc2:	3000      	movi      	r0, 0
1fff9dc4:	07fc      	br      	0x1fff9dbc	// 1fff9dbc <ll_processExtAdvIRQ+0x610>
1fff9dc6:	3001      	movi      	r0, 1
1fff9dc8:	07fb      	br      	0x1fff9dbe	// 1fff9dbe <ll_processExtAdvIRQ+0x612>
1fff9dca:	3001      	movi      	r0, 1
                        bWlRlCheckOk = FALSE;
1fff9dcc:	3700      	movi      	r7, 0
1fff9dce:	07f8      	br      	0x1fff9dbe	// 1fff9dbe <ll_processExtAdvIRQ+0x612>
1fff9dd0:	b862      	st.w      	r3, (r14, 0x8)
                    bWlRlCheckOk = ll_isAddrInWhiteList(peerType, peerAddr);
1fff9dd2:	e00004b1 	bsr      	0x1fffa734	// 1fffa734 <check_before_startup+0x5c>
1fff9dd6:	6dc3      	mov      	r7, r0
1fff9dd8:	9862      	ld.w      	r3, (r14, 0x8)
                if (bWlRlCheckOk == FALSE) { // if not in white list, do nothing
1fff9dda:	3f40      	cmpnei      	r7, 0
1fff9ddc:	0fea      	bf      	0x1fff9db0	// 1fff9db0 <ll_processExtAdvIRQ+0x604>
                    llSetupAuxConnectRspPDU1(pAdvInfo);
1fff9dde:	6c13      	mov      	r0, r4
                    g_pmCounters.ll_rx_peer_cnt++;
1fff9de0:	9554      	ld.w      	r2, (r5, 0x50)
1fff9de2:	2200      	addi      	r2, 1
1fff9de4:	b862      	st.w      	r3, (r14, 0x8)
1fff9de6:	b554      	st.w      	r2, (r5, 0x50)
                    llSetupAuxConnectRspPDU1(pAdvInfo);
1fff9de8:	e3ffede0 	bsr      	0x1fff79a8	// 1fff79a8 <llSetupAuxConnectRspPDU1>
                    if (!llWaitingIrq) {
1fff9dec:	117d      	lrw      	r3, 0x1fff0df8	// 1fff9ee0 <ll_processExtAdvIRQ+0x734>
1fff9dee:	11f9      	lrw      	r7, 0x1fff0e2c	// 1fff9ed0 <ll_processExtAdvIRQ+0x724>
1fff9df0:	9340      	ld.w      	r2, (r3, 0x0)
1fff9df2:	9862      	ld.w      	r3, (r14, 0x8)
1fff9df4:	3a40      	cmpnei      	r2, 0
1fff9df6:	082f      	bt      	0x1fff9e54	// 1fff9e54 <ll_processExtAdvIRQ+0x6a8>
                        ll_hw_set_stx();             // set LL HW as single Tx mode
1fff9df8:	e0000486 	bsr      	0x1fffa704	// 1fffa704 <check_before_startup+0x2c>
                        g_same_rf_channel_flag = TRUE;
1fff9dfc:	3301      	movi      	r3, 1
1fff9dfe:	a760      	st.b      	r3, (r7, 0x0)
                        T2 = read_current_fine_time();
1fff9e00:	e000068c 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
                        delay = (T2 > ISR_entry_time) ? (T2 - ISR_entry_time) : (BASE_TIME_UNITS - ISR_entry_time + T2);
1fff9e04:	9860      	ld.w      	r3, (r14, 0x0)
1fff9e06:	9340      	ld.w      	r2, (r3, 0x0)
1fff9e08:	9862      	ld.w      	r3, (r14, 0x8)
1fff9e0a:	6408      	cmphs      	r2, r0
1fff9e0c:	600a      	subu      	r0, r2
1fff9e0e:	080a      	bt      	0x1fff9e22	// 1fff9e22 <ll_processExtAdvIRQ+0x676>
                        if (g_rfPhyPktFmt == PKT_FMT_BLE1M) {
1fff9e10:	1153      	lrw      	r2, 0x1fff08ae	// 1fff9edc <ll_processExtAdvIRQ+0x730>
1fff9e12:	8220      	ld.b      	r1, (r2, 0x0)
1fff9e14:	3941      	cmpnei      	r1, 1
1fff9e16:	080a      	bt      	0x1fff9e2a	// 1fff9e2a <ll_processExtAdvIRQ+0x67e>
                            calibra_time = pGlobal_config[EXT_ADV_AUXCONNRSP_DELAY_1MPHY];
1fff9e18:	9620      	ld.w      	r1, (r6, 0x0)
                            delay = 118 - delay - calibra_time;
1fff9e1a:	d8c12066 	ld.w      	r6, (r1, 0x198)
                            delay = 118 - delay - calibra_time;
1fff9e1e:	3176      	movi      	r1, 118
1fff9e20:	040c      	br      	0x1fff9e38	// 1fff9e38 <ll_processExtAdvIRQ+0x68c>
                        delay = (T2 > ISR_entry_time) ? (T2 - ISR_entry_time) : (BASE_TIME_UNITS - ISR_entry_time + T2);
1fff9e22:	c6a05022 	bmaski      	r2, 22
1fff9e26:	6008      	addu      	r0, r2
1fff9e28:	07f4      	br      	0x1fff9e10	// 1fff9e10 <ll_processExtAdvIRQ+0x664>
                        } else if (g_rfPhyPktFmt == PKT_FMT_BLE2M) {
1fff9e2a:	8220      	ld.b      	r1, (r2, 0x0)
1fff9e2c:	3942      	cmpnei      	r1, 2
                            calibra_time = pGlobal_config[EXT_ADV_AUXCONNRSP_DELAY_2MPHY];
1fff9e2e:	9620      	ld.w      	r1, (r6, 0x0)
                        } else if (g_rfPhyPktFmt == PKT_FMT_BLE2M) {
1fff9e30:	0868      	bt      	0x1fff9f00	// 1fff9f00 <ll_processExtAdvIRQ+0x754>
                            delay = 118 + 14 - delay - calibra_time;
1fff9e32:	d8c12068 	ld.w      	r6, (r1, 0x1a0)
1fff9e36:	3184      	movi      	r1, 132
                            delay = 118 - delay - calibra_time;
1fff9e38:	605a      	subu      	r1, r6
1fff9e3a:	6042      	subu      	r1, r0
                        ll_hw_trx_settle_bb(g_rfPhyPktFmt, delay);
1fff9e3c:	8200      	ld.b      	r0, (r2, 0x0)
1fff9e3e:	7400      	zextb      	r0, r0
1fff9e40:	7444      	zextb      	r1, r1
1fff9e42:	6d8f      	mov      	r6, r3
1fff9e44:	e3fff18a 	bsr      	0x1fff8158	// 1fff8158 <ll_hw_trx_settle_bb>
                        ll_hw_go();
1fff9e48:	e0000686 	bsr      	0x1fffab54	// 1fffab54 <check_before_startup+0x47c>
                        llWaitingIrq = TRUE;
1fff9e4c:	1165      	lrw      	r3, 0x1fff0df8	// 1fff9ee0 <ll_processExtAdvIRQ+0x734>
1fff9e4e:	3201      	movi      	r2, 1
1fff9e50:	b340      	st.w      	r2, (r3, 0x0)
1fff9e52:	6cdb      	mov      	r3, r6
1fff9e54:	6d8f      	mov      	r6, r3
                    g_same_rf_channel_flag = FALSE;
1fff9e56:	3300      	movi      	r3, 0
1fff9e58:	a760      	st.b      	r3, (r7, 0x0)
                    ll_hw_rst_rfifo();
1fff9e5a:	e00005e7 	bsr      	0x1fffaa28	// 1fffaa28 <check_before_startup+0x350>
                    ll_hw_rst_tfifo();
1fff9e5e:	e0000723 	bsr      	0x1fffaca4	// 1fffaca4 <check_before_startup+0x5cc>
                                      ((g_tx_adv_buf.txheader & 0xff00) >> 8) + 2);   // payload length + header length(2)
1fff9e62:	1103      	lrw      	r0, 0x1fff16ec	// 1fff9eec <ll_processExtAdvIRQ+0x740>
                    ll_hw_write_tfifo((uint8 *) & (g_tx_adv_buf.txheader),
1fff9e64:	2003      	addi      	r0, 4
                                      ((g_tx_adv_buf.txheader & 0xff00) >> 8) + 2);   // payload length + header length(2)
1fff9e66:	8820      	ld.h      	r1, (r0, 0x0)
1fff9e68:	4928      	lsri      	r1, r1, 8
                    ll_hw_write_tfifo((uint8 *) & (g_tx_adv_buf.txheader),
1fff9e6a:	2101      	addi      	r1, 2
1fff9e6c:	e000043a 	bsr      	0x1fffa6e0	// 1fffa6e0 <check_before_startup+0x8>
                    ll_debug_output(DEBUG_LL_HW_SET_STX);
1fff9e70:	300e      	movi      	r0, 14
1fff9e72:	e000063b 	bsr      	0x1fffaae8	// 1fffaae8 <check_before_startup+0x410>
                    g_pmCounters.ll_send_conn_rsp_cnt ++;
1fff9e76:	954b      	ld.w      	r2, (r5, 0x2c)
1fff9e78:	2200      	addi      	r2, 1
1fff9e7a:	b54b      	st.w      	r2, (r5, 0x2c)
                    peerInfo.peerAddrType = (g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT;    // adv PDU header, bit 6: TxAdd, 0 - public, 1 - random
1fff9e7c:	8e42      	ld.h      	r2, (r6, 0x4)
1fff9e7e:	101d      	lrw      	r0, 0x1fff11ba	// 1fff9ef0 <ll_processExtAdvIRQ+0x744>
1fff9e80:	5246      	asri      	r2, r2, 6
1fff9e82:	e4422001 	andi      	r2, r2, 1
1fff9e86:	a040      	st.b      	r2, (r0, 0x0)
                    osal_memcpy(peerInfo.peerAddr, g_rx_adv_buf.data, 6);
1fff9e88:	102b      	lrw      	r1, 0x1fff17fe	// 1fff9eb4 <ll_processExtAdvIRQ+0x708>
1fff9e8a:	3206      	movi      	r2, 6
1fff9e8c:	2000      	addi      	r0, 1
1fff9e8e:	e0000681 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
                    SET_BITS(g_rx_adv_buf.rxheader, 1, CHSEL_SHIFT, CHSEL_MASK);
1fff9e92:	8e42      	ld.h      	r2, (r6, 0x4)
1fff9e94:	ec420020 	ori      	r2, r2, 32
1fff9e98:	042e      	br      	0x1fff9ef4	// 1fff9ef4 <ll_processExtAdvIRQ+0x748>
1fff9e9a:	0000      	bkpt
1fff9e9c:	1fff17fc 	.long	0x1fff17fc
1fff9ea0:	1fff12e0 	.long	0x1fff12e0
1fff9ea4:	00ffff00 	.long	0x00ffff00
1fff9ea8:	1fff17f8 	.long	0x1fff17f8
1fff9eac:	00010100 	.long	0x00010100
1fff9eb0:	1fff0ddc 	.long	0x1fff0ddc
1fff9eb4:	1fff17fe 	.long	0x1fff17fe
1fff9eb8:	1fff0ff5 	.long	0x1fff0ff5
1fff9ebc:	1fff0ff4 	.long	0x1fff0ff4
1fff9ec0:	1fffa670 	.long	0x1fffa670
1fff9ec4:	1fff1904 	.long	0x1fff1904
1fff9ec8:	1fff15d1 	.long	0x1fff15d1
1fff9ecc:	1fff1185 	.long	0x1fff1185
1fff9ed0:	1fff0e2c 	.long	0x1fff0e2c
1fff9ed4:	1fff191c 	.long	0x1fff191c
1fff9ed8:	1fff0e1c 	.long	0x1fff0e1c
1fff9edc:	1fff08ae 	.long	0x1fff08ae
1fff9ee0:	1fff0df8 	.long	0x1fff0df8
1fff9ee4:	1fff1920 	.long	0x1fff1920
1fff9ee8:	1fffcf04 	.long	0x1fffcf04
1fff9eec:	1fff16ec 	.long	0x1fff16ec
1fff9ef0:	1fff11ba 	.long	0x1fff11ba
                    peerInfo.peerAddrType = (g_rx_adv_buf.rxheader & TX_ADD_MASK) >> TX_ADD_SHIFT;    // adv PDU header, bit 6: TxAdd, 0 - public, 1 - random
1fff9ef4:	6d5b      	mov      	r5, r6
                    SET_BITS(g_rx_adv_buf.rxheader, 1, CHSEL_SHIFT, CHSEL_MASK);
1fff9ef6:	ae42      	st.h      	r2, (r6, 0x4)
                    move_to_slave_function1();    // move to slave role for connection state
1fff9ef8:	e3ffefc2 	bsr      	0x1fff7e7c	// 1fff7e7c <move_to_slave_function1>
1fff9efc:	e800fde5 	br      	0x1fff9ac6	// 1fff9ac6 <ll_processExtAdvIRQ+0x31a>
                            delay = 118 - delay - calibra_time;
1fff9f00:	d8c1206c 	ld.w      	r6, (r1, 0x1b0)
1fff9f04:	078d      	br      	0x1fff9e1e	// 1fff9e1e <ll_processExtAdvIRQ+0x672>
        return FALSE;
1fff9f06:	3000      	movi      	r0, 0
1fff9f08:	e800fcf5 	br      	0x1fff98f2	// 1fff98f2 <ll_processExtAdvIRQ+0x146>

1fff9f0c <LL_extAdvTimerExpProcess>:
{
1fff9f0c:	14d4      	push      	r4-r7, r15
    pAdvInfo = g_pAdvSchInfo[g_currentExtAdv].pAdvInfo;
1fff9f0e:	11d9      	lrw      	r6, 0x1fff12dc	// 1fff9ff0 <LL_extAdvTimerExpProcess+0xe4>
1fff9f10:	11b9      	lrw      	r5, 0x1fff1198	// 1fff9ff4 <LL_extAdvTimerExpProcess+0xe8>
1fff9f12:	8640      	ld.b      	r2, (r6, 0x0)
1fff9f14:	9560      	ld.w      	r3, (r5, 0x0)
1fff9f16:	4244      	lsli      	r2, r2, 4
1fff9f18:	60c8      	addu      	r3, r2
1fff9f1a:	9381      	ld.w      	r4, (r3, 0x4)
    if (!pAdvInfo) {
1fff9f1c:	3c40      	cmpnei      	r4, 0
1fff9f1e:	0c66      	bf      	0x1fff9fea	// 1fff9fea <LL_extAdvTimerExpProcess+0xde>
    ll_updateExtAdvRemainderTime(g_currentAdvTimer + LL_ADV_TIMING_COMPENSATE + extAdvTim4_schDelta);
1fff9f20:	1176      	lrw      	r3, 0x1fff0f98	// 1fff9ff8 <LL_extAdvTimerExpProcess+0xec>
    current_chn = pAdvInfo->currentChn;
1fff9f22:	d8e40052 	ld.b      	r7, (r4, 0x52)
    ll_updateExtAdvRemainderTime(g_currentAdvTimer + LL_ADV_TIMING_COMPENSATE + extAdvTim4_schDelta);
1fff9f26:	9300      	ld.w      	r0, (r3, 0x0)
1fff9f28:	1175      	lrw      	r3, 0x1fffb8b8	// 1fff9ffc <LL_extAdvTimerExpProcess+0xf0>
1fff9f2a:	9360      	ld.w      	r3, (r3, 0x0)
1fff9f2c:	600c      	addu      	r0, r3
1fff9f2e:	e0000457 	bsr      	0x1fffa7dc	// 1fffa7dc <check_before_startup+0x104>
    if (llWaitingIrq ||
1fff9f32:	1174      	lrw      	r3, 0x1fff0df8	// 1fffa000 <LL_extAdvTimerExpProcess+0xf4>
1fff9f34:	9360      	ld.w      	r3, (r3, 0x0)
1fff9f36:	3b40      	cmpnei      	r3, 0
1fff9f38:	0c09      	bf      	0x1fff9f4a	// 1fff9f4a <LL_extAdvTimerExpProcess+0x3e>
        ll_ext_adv_schedule_next_event(pGlobal_config[LL_EXT_ADV_TASK_DURATION]);
1fff9f3a:	1173      	lrw      	r3, 0x1fffa670	// 1fffa004 <LL_extAdvTimerExpProcess+0xf8>
1fff9f3c:	9360      	ld.w      	r3, (r3, 0x0)
1fff9f3e:	d8032056 	ld.w      	r0, (r3, 0x158)
1fff9f42:	e00006db 	bsr      	0x1fffacf8	// 1fffacf8 <check_before_startup+0x620>
    return TRUE;
1fff9f46:	3001      	movi      	r0, 1
}
1fff9f48:	1494      	pop      	r4-r7, r15
        (isTimer1Running() && read_LL_remainder_time1() < pGlobal_config[LL_EXT_ADV_TASK_DURATION])) {
1fff9f4a:	e000072b 	bsr      	0x1fffada0	// 1fffada0 <check_before_startup+0x6c8>
    if (llWaitingIrq ||
1fff9f4e:	3840      	cmpnei      	r0, 0
1fff9f50:	0c09      	bf      	0x1fff9f62	// 1fff9f62 <LL_extAdvTimerExpProcess+0x56>
        (isTimer1Running() && read_LL_remainder_time1() < pGlobal_config[LL_EXT_ADV_TASK_DURATION])) {
1fff9f52:	e3ffdc7f 	bsr      	0x1fff5850	// 1fff5850 <read_LL_remainder_time1>
1fff9f56:	116c      	lrw      	r3, 0x1fffa670	// 1fffa004 <LL_extAdvTimerExpProcess+0xf8>
1fff9f58:	9360      	ld.w      	r3, (r3, 0x0)
1fff9f5a:	d8632056 	ld.w      	r3, (r3, 0x158)
1fff9f5e:	64c0      	cmphs      	r0, r3
1fff9f60:	0fed      	bf      	0x1fff9f3a	// 1fff9f3a <LL_extAdvTimerExpProcess+0x2e>
        if (ll_isLegacyAdv(pAdvInfo)) {
1fff9f62:	6c13      	mov      	r0, r4
1fff9f64:	e3ffdfcc 	bsr      	0x1fff5efc	// 1fff5efc <ll_isLegacyAdv>
1fff9f68:	3840      	cmpnei      	r0, 0
            llSetupExtAdvLegacyEvent(pAdvInfo);    // send legacy ADV PDU
1fff9f6a:	6c13      	mov      	r0, r4
        if (ll_isLegacyAdv(pAdvInfo)) {
1fff9f6c:	0c28      	bf      	0x1fff9fbc	// 1fff9fbc <LL_extAdvTimerExpProcess+0xb0>
            llSetupExtAdvLegacyEvent(pAdvInfo);    // send legacy ADV PDU
1fff9f6e:	e3ffed6f 	bsr      	0x1fff7a4c	// 1fff7a4c <llSetupExtAdvLegacyEvent>
    if (ll_isFirstAdvChn(pAdvInfo->parameter.priAdvChnMap, current_chn)) {
1fff9f72:	8410      	ld.b      	r0, (r4, 0x10)
1fff9f74:	6c5f      	mov      	r1, r7
1fff9f76:	e000074b 	bsr      	0x1fffae0c	// 1fffae0c <check_before_startup+0x734>
1fff9f7a:	3840      	cmpnei      	r0, 0
1fff9f7c:	0fe5      	bf      	0x1fff9f46	// 1fff9f46 <LL_extAdvTimerExpProcess+0x3a>
        g_pAdvSchInfo[g_currentExtAdv].pAdvInfo->adv_event_counter ++;
1fff9f7e:	8660      	ld.b      	r3, (r6, 0x0)
1fff9f80:	9540      	ld.w      	r2, (r5, 0x0)
1fff9f82:	4364      	lsli      	r3, r3, 4
1fff9f84:	60c8      	addu      	r3, r2
1fff9f86:	9321      	ld.w      	r1, (r3, 0x4)
1fff9f88:	d8411024 	ld.h      	r2, (r1, 0x48)
1fff9f8c:	2200      	addi      	r2, 1
1fff9f8e:	dc411024 	st.h      	r2, (r1, 0x48)
        if (g_pAdvSchInfo[g_currentExtAdv].pAdvInfo->duration != 0 &&
1fff9f92:	9341      	ld.w      	r2, (r3, 0x4)
1fff9f94:	922f      	ld.w      	r1, (r2, 0x3c)
1fff9f96:	3940      	cmpnei      	r1, 0
1fff9f98:	0c15      	bf      	0x1fff9fc2	// 1fff9fc2 <LL_extAdvTimerExpProcess+0xb6>
1fff9f9a:	9213      	ld.w      	r0, (r2, 0x4c)
1fff9f9c:	6404      	cmphs      	r1, r0
1fff9f9e:	0812      	bt      	0x1fff9fc2	// 1fff9fc2 <LL_extAdvTimerExpProcess+0xb6>
            g_pAdvSchInfo[g_currentExtAdv].pAdvInfo->active = FALSE;          // mark as inactive
1fff9fa0:	3100      	movi      	r1, 0
            LL_AdvSetTerminatedCback(LL_STATUS_ERROR_DIRECTED_ADV_TIMEOUT,
1fff9fa2:	303c      	movi      	r0, 60
            g_pAdvSchInfo[g_currentExtAdv].pAdvInfo->active = FALSE;          // mark as inactive
1fff9fa4:	dc220042 	st.b      	r1, (r2, 0x42)
                                     g_pAdvSchInfo[g_currentExtAdv].pAdvInfo->advHandle,
1fff9fa8:	9341      	ld.w      	r2, (r3, 0x4)
            LL_AdvSetTerminatedCback(LL_STATUS_ERROR_DIRECTED_ADV_TIMEOUT,
1fff9faa:	d8620048 	ld.b      	r3, (r2, 0x48)
1fff9fae:	8220      	ld.b      	r1, (r2, 0x0)
1fff9fb0:	2b00      	subi      	r3, 1
1fff9fb2:	3200      	movi      	r2, 0
1fff9fb4:	74cc      	zextb      	r3, r3
            LL_AdvSetTerminatedCback(LL_STATUS_ERROR_LIMIT_REACHED,
1fff9fb6:	e0000689 	bsr      	0x1fffacc8	// 1fffacc8 <check_before_startup+0x5f0>
1fff9fba:	07c6      	br      	0x1fff9f46	// 1fff9f46 <LL_extAdvTimerExpProcess+0x3a>
            llSetupExtAdvEvent(pAdvInfo);    // send extended advertisement
1fff9fbc:	e00006e6 	bsr      	0x1fffad88	// 1fffad88 <check_before_startup+0x6b0>
1fff9fc0:	07d9      	br      	0x1fff9f72	// 1fff9f72 <LL_extAdvTimerExpProcess+0x66>
        } else if (g_pAdvSchInfo[g_currentExtAdv].pAdvInfo->maxExtAdvEvents != 0
1fff9fc2:	d8220040 	ld.b      	r1, (r2, 0x40)
1fff9fc6:	3940      	cmpnei      	r1, 0
1fff9fc8:	0fbf      	bf      	0x1fff9f46	// 1fff9f46 <LL_extAdvTimerExpProcess+0x3a>
                   && g_pAdvSchInfo[g_currentExtAdv].pAdvInfo->adv_event_counter >= g_pAdvSchInfo[g_currentExtAdv].pAdvInfo->maxExtAdvEvents) {
1fff9fca:	d8021024 	ld.h      	r0, (r2, 0x48)
1fff9fce:	6440      	cmphs      	r0, r1
1fff9fd0:	0fbb      	bf      	0x1fff9f46	// 1fff9f46 <LL_extAdvTimerExpProcess+0x3a>
            g_pAdvSchInfo[g_currentExtAdv].pAdvInfo->active = FALSE;          // mark as inactive
1fff9fd2:	3100      	movi      	r1, 0
            LL_AdvSetTerminatedCback(LL_STATUS_ERROR_LIMIT_REACHED,
1fff9fd4:	3043      	movi      	r0, 67
            g_pAdvSchInfo[g_currentExtAdv].pAdvInfo->active = FALSE;          // mark as inactive
1fff9fd6:	dc220042 	st.b      	r1, (r2, 0x42)
                                     g_pAdvSchInfo[g_currentExtAdv].pAdvInfo->advHandle,
1fff9fda:	9341      	ld.w      	r2, (r3, 0x4)
            LL_AdvSetTerminatedCback(LL_STATUS_ERROR_LIMIT_REACHED,
1fff9fdc:	d8620048 	ld.b      	r3, (r2, 0x48)
1fff9fe0:	8220      	ld.b      	r1, (r2, 0x0)
1fff9fe2:	2b00      	subi      	r3, 1
1fff9fe4:	3200      	movi      	r2, 0
1fff9fe6:	74cc      	zextb      	r3, r3
1fff9fe8:	07e7      	br      	0x1fff9fb6	// 1fff9fb6 <LL_extAdvTimerExpProcess+0xaa>
        return FALSE;
1fff9fea:	3000      	movi      	r0, 0
1fff9fec:	07ae      	br      	0x1fff9f48	// 1fff9f48 <LL_extAdvTimerExpProcess+0x3c>
1fff9fee:	0000      	bkpt
1fff9ff0:	1fff12dc 	.long	0x1fff12dc
1fff9ff4:	1fff1198 	.long	0x1fff1198
1fff9ff8:	1fff0f98 	.long	0x1fff0f98
1fff9ffc:	1fffb8b8 	.long	0x1fffb8b8
1fffa000:	1fff0df8 	.long	0x1fff0df8
1fffa004:	1fffa670 	.long	0x1fffa670

1fffa008 <TIM4_IRQHandler1>:
{
1fffa008:	14d2      	push      	r4-r5, r15
    __ASM volatile("mfcr %0, psr" : "=r"(result));
1fffa00a:	c0006025 	mfcr      	r5, cr<0, 0>
    __ASM volatile("psrclr ie");
1fffa00e:	c0807020 	psrclr      	ie
    g_timerExpiryTick = read_current_fine_time();
1fffa012:	e0000583 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
1fffa016:	1079      	lrw      	r3, 0x1fff0f8c	// 1fffa078 <TIM4_IRQHandler1+0x70>
    if (AP_TIM4->status & 0x1) {
1fffa018:	1099      	lrw      	r4, 0x4000103c	// 1fffa07c <TIM4_IRQHandler1+0x74>
    g_timerExpiryTick = read_current_fine_time();
1fffa01a:	b300      	st.w      	r0, (r3, 0x0)
    if (AP_TIM4->status & 0x1) {
1fffa01c:	9464      	ld.w      	r3, (r4, 0x10)
1fffa01e:	e4632001 	andi      	r3, r3, 1
1fffa022:	3b40      	cmpnei      	r3, 0
1fffa024:	0c12      	bf      	0x1fffa048	// 1fffa048 <TIM4_IRQHandler1+0x40>
        g_timer4_irq_pending_time = AP_TIM4->CurrentCount - AP_TIM4->LoadCount;    // TODO: check the formula
1fffa026:	9461      	ld.w      	r3, (r4, 0x4)
        clear_timer_int(AP_TIM4);
1fffa028:	6c13      	mov      	r0, r4
        g_timer4_irq_pending_time = AP_TIM4->CurrentCount - AP_TIM4->LoadCount;    // TODO: check the formula
1fffa02a:	9440      	ld.w      	r2, (r4, 0x0)
1fffa02c:	60ca      	subu      	r3, r2
1fffa02e:	1055      	lrw      	r2, 0x1fff0ed0	// 1fffa080 <TIM4_IRQHandler1+0x78>
1fffa030:	b260      	st.w      	r3, (r2, 0x0)
        clear_timer_int(AP_TIM4);
1fffa032:	e000035d 	bsr      	0x1fffa6ec	// 1fffa6ec <check_before_startup+0x14>
        clear_timer(AP_TIM4);
1fffa036:	6c13      	mov      	r0, r4
1fffa038:	e00006e4 	bsr      	0x1fffae00	// 1fffae00 <check_before_startup+0x728>
        if (g_currentTimerTask == LL_TASK_EXTENDED_ADV) {
1fffa03c:	1072      	lrw      	r3, 0x1fff0f97	// 1fffa084 <TIM4_IRQHandler1+0x7c>
1fffa03e:	8360      	ld.b      	r3, (r3, 0x0)
1fffa040:	3b41      	cmpnei      	r3, 1
1fffa042:	0806      	bt      	0x1fffa04e	// 1fffa04e <TIM4_IRQHandler1+0x46>
            LL_extAdvTimerExpProcess();
1fffa044:	e3ffff64 	bsr      	0x1fff9f0c	// 1fff9f0c <LL_extAdvTimerExpProcess>
    __ASM volatile("mtcr %0, psr" : : "r"(psr));
1fffa048:	c0056420 	mtcr      	r5, cr<0, 0>
}
1fffa04c:	1492      	pop      	r4-r5, r15
        } else if (g_currentTimerTask == LL_TASK_PERIODIC_ADV) {
1fffa04e:	3b42      	cmpnei      	r3, 2
1fffa050:	0804      	bt      	0x1fffa058	// 1fffa058 <TIM4_IRQHandler1+0x50>
            LL_prdAdvTimerExpProcess();
1fffa052:	e3ffe563 	bsr      	0x1fff6b18	// 1fff6b18 <LL_prdAdvTimerExpProcess>
1fffa056:	07f9      	br      	0x1fffa048	// 1fffa048 <TIM4_IRQHandler1+0x40>
        } else if (g_currentTimerTask == LL_TASK_EXTENDED_SCAN) {
1fffa058:	3b43      	cmpnei      	r3, 3
1fffa05a:	0804      	bt      	0x1fffa062	// 1fffa062 <TIM4_IRQHandler1+0x5a>
            LL_extScanTimerExpProcess();
1fffa05c:	e3fffb26 	bsr      	0x1fff96a8	// 1fff96a8 <LL_extScanTimerExpProcess>
1fffa060:	07f4      	br      	0x1fffa048	// 1fffa048 <TIM4_IRQHandler1+0x40>
        } else if (g_currentTimerTask == LL_TASK_EXTENDED_INIT) {
1fffa062:	3b44      	cmpnei      	r3, 4
1fffa064:	0804      	bt      	0x1fffa06c	// 1fffa06c <TIM4_IRQHandler1+0x64>
    llSetupExtInit();
1fffa066:	e0000655 	bsr      	0x1fffad10	// 1fffad10 <check_before_startup+0x638>
1fffa06a:	07ef      	br      	0x1fffa048	// 1fffa048 <TIM4_IRQHandler1+0x40>
        } else if (g_currentTimerTask == LL_TASK_PERIODIC_SCAN) {
1fffa06c:	3b45      	cmpnei      	r3, 5
1fffa06e:	0bed      	bt      	0x1fffa048	// 1fffa048 <TIM4_IRQHandler1+0x40>
            LL_prdScanTimerExpProcess();
1fffa070:	e3ffe5e4 	bsr      	0x1fff6c38	// 1fff6c38 <LL_prdScanTimerExpProcess>
1fffa074:	07ea      	br      	0x1fffa048	// 1fffa048 <TIM4_IRQHandler1+0x40>
1fffa076:	0000      	bkpt
1fffa078:	1fff0f8c 	.long	0x1fff0f8c
1fffa07c:	4000103c 	.long	0x4000103c
1fffa080:	1fff0ed0 	.long	0x1fff0ed0
1fffa084:	1fff0f97 	.long	0x1fff0f97

1fffa088 <llSetupAuxScanRspPDU1>:
{
1fffa088:	14d4      	push      	r4-r7, r15
1fffa08a:	1422      	subi      	r14, r14, 8
    SET_BITS(g_tx_ext_adv_buf.txheader, ADV_EXT_TYPE, PDU_TYPE_SHIFT, PDU_TYPE_MASK);
1fffa08c:	3307      	movi      	r3, 7
1fffa08e:	1249      	lrw      	r2, 0x1fff191c	// 1fffa1b0 <llSetupAuxScanRspPDU1+0x128>
{
1fffa090:	6d43      	mov      	r5, r0
    SET_BITS(g_tx_ext_adv_buf.txheader, ADV_EXT_TYPE, PDU_TYPE_SHIFT, PDU_TYPE_MASK);
1fffa092:	aa62      	st.h      	r3, (r2, 0x4)
    if (pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC
1fffa094:	8571      	ld.b      	r3, (r5, 0x11)
        ||  pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RPA_RANDOM) {
1fffa096:	5b27      	subi      	r1, r3, 2
    if (pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC
1fffa098:	7444      	zextb      	r1, r1
    SET_BITS(g_tx_ext_adv_buf.txheader, ADV_EXT_TYPE, PDU_TYPE_SHIFT, PDU_TYPE_MASK);
1fffa09a:	3007      	movi      	r0, 7
    if (pAdvInfo->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RPA_PUBLIC
1fffa09c:	3901      	cmphsi      	r1, 2
1fffa09e:	087d      	bt      	0x1fffa198	// 1fffa198 <llSetupAuxScanRspPDU1+0x110>
        if ((adv_param.ownAddr[5] & RANDOM_ADDR_HDR) == PRIVATE_RESOLVE_ADDR_HDR) {
1fffa0a0:	1225      	lrw      	r1, 0x1fff1528	// 1fffa1b4 <llSetupAuxScanRspPDU1+0x12c>
1fffa0a2:	812c      	ld.b      	r1, (r1, 0xc)
1fffa0a4:	e42120c0 	andi      	r1, r1, 192
1fffa0a8:	eb410040 	cmpnei      	r1, 64
1fffa0ac:	0871      	bt      	0x1fffa18e	// 1fffa18e <llSetupAuxScanRspPDU1+0x106>
            SET_BITS(g_tx_ext_adv_buf.txheader, LL_DEV_ADDR_TYPE_RANDOM, TX_ADD_SHIFT, TX_ADD_MASK);
1fffa0ae:	3347      	movi      	r3, 71
    if (pAdvInfo->scanRspMaxLength - extscanrsp_offset < 245) {
1fffa0b0:	12c2      	lrw      	r6, 0x1fffb8bc	// 1fffa1b8 <llSetupAuxScanRspPDU1+0x130>
1fffa0b2:	8d9a      	ld.h      	r4, (r5, 0x34)
        SET_BITS(g_tx_ext_adv_buf.txheader, pAdvInfo->parameter.ownAddrType, TX_ADD_SHIFT, TX_ADD_MASK);
1fffa0b4:	aa62      	st.h      	r3, (r2, 0x4)
    if (pAdvInfo->scanRspMaxLength - extscanrsp_offset < 245) {
1fffa0b6:	8e60      	ld.h      	r3, (r6, 0x0)
1fffa0b8:	610e      	subu      	r4, r3
1fffa0ba:	eb2400f4 	cmplti      	r4, 245
1fffa0be:	0c6f      	bf      	0x1fffa19c	// 1fffa19c <llSetupAuxScanRspPDU1+0x114>
        advDataLen = pAdvInfo->scanRspMaxLength - extscanrsp_offset;
1fffa0c0:	7510      	zextb      	r4, r4
    extHdrLength += 8;
1fffa0c2:	3109      	movi      	r1, 9
    extHeaderFlag |= LE_EXT_HDR_ADVA_PRESENT_BITMASK | LE_EXT_HDR_ADI_PRESENT_BITMASK;
1fffa0c4:	3709      	movi      	r7, 9
    length = 1 + extHdrLength + advDataLen;   // 1: extended header len(6bits) + advMode(2bit)
1fffa0c6:	5970      	addu      	r3, r1, r4
1fffa0c8:	2300      	addi      	r3, 1
    SET_BITS(g_tx_ext_adv_buf.txheader, length, LENGTH_SHIFT, LENGTH_MASK);
1fffa0ca:	74cc      	zextb      	r3, r3
1fffa0cc:	8204      	ld.b      	r0, (r2, 0x4)
1fffa0ce:	4368      	lsli      	r3, r3, 8
1fffa0d0:	6cc0      	or      	r3, r0
1fffa0d2:	aa62      	st.h      	r3, (r2, 0x4)
    g_tx_ext_adv_buf.data[offset] = ((advMode & 0x3) << 6) | (extHdrLength & 0x3F);
1fffa0d4:	a226      	st.b      	r1, (r2, 0x6)
    g_tx_ext_adv_buf.data[offset] = extHeaderFlag;
1fffa0d6:	a2e7      	st.b      	r7, (r2, 0x7)
        if (g_currentLocalAddrType  == LL_DEV_ADDR_TYPE_RANDOM && pAdvInfo->parameter.isOwnRandomAddressSet == TRUE) { // per adv set random address may be updated after generate adv_param.ownAddr
1fffa0d8:	1179      	lrw      	r3, 0x1fff1904	// 1fffa1bc <llSetupAuxScanRspPDU1+0x134>
1fffa0da:	8360      	ld.b      	r3, (r3, 0x0)
1fffa0dc:	3b41      	cmpnei      	r3, 1
1fffa0de:	0863      	bt      	0x1fffa1a4	// 1fffa1a4 <llSetupAuxScanRspPDU1+0x11c>
1fffa0e0:	8572      	ld.b      	r3, (r5, 0x12)
1fffa0e2:	3b41      	cmpnei      	r3, 1
1fffa0e4:	0860      	bt      	0x1fffa1a4	// 1fffa1a4 <llSetupAuxScanRspPDU1+0x11c>
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], pAdvInfo->parameter.ownRandomAddress, LL_DEVICE_ADDR_LEN);
1fffa0e6:	3206      	movi      	r2, 6
1fffa0e8:	e4250012 	addi      	r1, r5, 19
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], adv_param.ownAddr, LL_DEVICE_ADDR_LEN);
1fffa0ec:	1115      	lrw      	r0, 0x1fff1924	// 1fffa1c0 <llSetupAuxScanRspPDU1+0x138>
    if (extHeaderFlag & LE_EXT_HDR_AUX_PTR_PRESENT_BITMASK) {
1fffa0ee:	e4e72010 	andi      	r7, r7, 16
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], adv_param.ownAddr, LL_DEVICE_ADDR_LEN);
1fffa0f2:	e000054f 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
        adi = ((pAdvInfo->parameter.advertisingSID & 0x0F) << 12) | (pAdvInfo->data.DIDInfo & 0x0FFF);
1fffa0f6:	8564      	ld.b      	r3, (r5, 0x4)
1fffa0f8:	8d58      	ld.h      	r2, (r5, 0x30)
1fffa0fa:	e4422fff 	andi      	r2, r2, 4095
1fffa0fe:	436c      	lsli      	r3, r3, 12
1fffa100:	6cc8      	or      	r3, r2
        osal_memcpy(&g_tx_ext_adv_buf.data[offset], (uint8 *)&adi, 2);
1fffa102:	1111      	lrw      	r0, 0x1fff192a	// 1fffa1c4 <llSetupAuxScanRspPDU1+0x13c>
1fffa104:	3202      	movi      	r2, 2
        adi = ((pAdvInfo->parameter.advertisingSID & 0x0F) << 12) | (pAdvInfo->data.DIDInfo & 0x0FFF);
1fffa106:	dc6e1002 	st.h      	r3, (r14, 0x4)
        osal_memcpy(&g_tx_ext_adv_buf.data[offset], (uint8 *)&adi, 2);
1fffa10a:	1901      	addi      	r1, r14, 4
1fffa10c:	e0000542 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
    if (extHeaderFlag & LE_EXT_HDR_AUX_PTR_PRESENT_BITMASK) {
1fffa110:	3f40      	cmpnei      	r7, 0
1fffa112:	0c4c      	bf      	0x1fffa1aa	// 1fffa1aa <llSetupAuxScanRspPDU1+0x122>
        uint32  temp = 0;
1fffa114:	3300      	movi      	r3, 0
        chn_idx = llGetNextAuxAdvChn(pAdvInfo->currentChn);
1fffa116:	d8050052 	ld.b      	r0, (r5, 0x52)
        uint32  temp = 0;
1fffa11a:	b861      	st.w      	r3, (r14, 0x4)
        chn_idx = llGetNextAuxAdvChn(pAdvInfo->currentChn);
1fffa11c:	e00004aa 	bsr      	0x1fffaa70	// 1fffaa70 <check_before_startup+0x398>
        aux_offset = g_interAuxPduDuration / 30;
1fffa120:	116a      	lrw      	r3, 0x1fff0894	// 1fffa1c8 <llSetupAuxScanRspPDU1+0x140>
        chn_idx = llGetNextAuxAdvChn(pAdvInfo->currentChn);
1fffa122:	6dc3      	mov      	r7, r0
        aux_offset = g_interAuxPduDuration / 30;
1fffa124:	311e      	movi      	r1, 30
1fffa126:	9300      	ld.w      	r0, (r3, 0x0)
        aux_phy = pAdvInfo->parameter.secondaryAdvPHY - 1;             // HCI & LL using different enum
1fffa128:	d8450023 	ld.b      	r2, (r5, 0x23)
1fffa12c:	2a00      	subi      	r2, 1
1fffa12e:	7488      	zextb      	r2, r2
1fffa130:	b840      	st.w      	r2, (r14, 0x0)
        aux_offset = g_interAuxPduDuration / 30;
1fffa132:	e00004ab 	bsr      	0x1fffaa88	// 1fffaa88 <check_before_startup+0x3b0>
        temp |= (aux_offset & LL_AUX_PTR_AUX_OFFSET_MASK) << LL_AUX_PTR_AUX_OFFSET_SHIFT;
1fffa136:	4068      	lsli      	r3, r0, 8
1fffa138:	1145      	lrw      	r2, 0x1fff00	// 1fffa1cc <llSetupAuxScanRspPDU1+0x144>
1fffa13a:	68c8      	and      	r3, r2
        temp |= (aux_phy & LL_AUX_PTR_AUX_PHY_MASK) << LL_AUX_PTR_AUX_PHY_SHIFT;
1fffa13c:	31e0      	movi      	r1, 224
1fffa13e:	9840      	ld.w      	r2, (r14, 0x0)
1fffa140:	9801      	ld.w      	r0, (r14, 0x4)
1fffa142:	4130      	lsli      	r1, r1, 16
1fffa144:	4255      	lsli      	r2, r2, 21
1fffa146:	6884      	and      	r2, r1
1fffa148:	6cc0      	or      	r3, r0
        pAdvInfo->currentChn = chn_idx;
1fffa14a:	dce50052 	st.b      	r7, (r5, 0x52)
        temp |= (aux_phy & LL_AUX_PTR_AUX_PHY_MASK) << LL_AUX_PTR_AUX_PHY_SHIFT;
1fffa14e:	6cc8      	or      	r3, r2
        temp |= (chn_idx & LL_AUX_PTR_CHN_IDX_MASK) << LL_AUX_PTR_CHN_IDX_SHIFT;
1fffa150:	e4e7203f 	andi      	r7, r7, 63
        temp |= (aux_phy & LL_AUX_PTR_AUX_PHY_MASK) << LL_AUX_PTR_AUX_PHY_SHIFT;
1fffa154:	6cdc      	or      	r3, r7
        temp &= 0x00FFFFFF;
1fffa156:	4368      	lsli      	r3, r3, 8
        osal_memcpy(&g_tx_ext_adv_buf.data[offset], (uint8 *)&temp, 3);
1fffa158:	3203      	movi      	r2, 3
1fffa15a:	101e      	lrw      	r0, 0x1fff192c	// 1fffa1d0 <llSetupAuxScanRspPDU1+0x148>
        temp &= 0x00FFFFFF;
1fffa15c:	4b68      	lsri      	r3, r3, 8
1fffa15e:	b861      	st.w      	r3, (r14, 0x4)
        osal_memcpy(&g_tx_ext_adv_buf.data[offset], (uint8 *)&temp, 3);
1fffa160:	1901      	addi      	r1, r14, 4
1fffa162:	e0000517 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
        offset += 3;
1fffa166:	300d      	movi      	r0, 13
    osal_memcpy(&g_tx_ext_adv_buf.data[offset], (uint8 *)&pAdvInfo->scanRspData[extscanrsp_offset], advDataLen);
1fffa168:	6c93      	mov      	r2, r4
1fffa16a:	8e60      	ld.h      	r3, (r6, 0x0)
1fffa16c:	952e      	ld.w      	r1, (r5, 0x38)
1fffa16e:	604c      	addu      	r1, r3
1fffa170:	1079      	lrw      	r3, 0x1fff1922	// 1fffa1d4 <llSetupAuxScanRspPDU1+0x14c>
1fffa172:	600c      	addu      	r0, r3
1fffa174:	e000050e 	bsr      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
    extscanrsp_offset += advDataLen;
1fffa178:	8e60      	ld.h      	r3, (r6, 0x0)
1fffa17a:	610c      	addu      	r4, r3
    if (extscanrsp_offset == pAdvInfo->scanRspMaxLength) {
1fffa17c:	8d7a      	ld.h      	r3, (r5, 0x34)
    extscanrsp_offset += advDataLen;
1fffa17e:	7511      	zexth      	r4, r4
1fffa180:	ae80      	st.h      	r4, (r6, 0x0)
    if (extscanrsp_offset == pAdvInfo->scanRspMaxLength) {
1fffa182:	650e      	cmpne      	r3, r4
1fffa184:	0803      	bt      	0x1fffa18a	// 1fffa18a <llSetupAuxScanRspPDU1+0x102>
        extscanrsp_offset = 0;
1fffa186:	3300      	movi      	r3, 0
1fffa188:	ae60      	st.h      	r3, (r6, 0x0)
}
1fffa18a:	1402      	addi      	r14, r14, 8
1fffa18c:	1494      	pop      	r4-r7, r15
            SET_BITS(g_tx_ext_adv_buf.txheader, (pAdvInfo->parameter.ownAddrType & 0x01), TX_ADD_SHIFT, TX_ADD_MASK);
1fffa18e:	4366      	lsli      	r3, r3, 6
1fffa190:	e4632040 	andi      	r3, r3, 64
        SET_BITS(g_tx_ext_adv_buf.txheader, pAdvInfo->parameter.ownAddrType, TX_ADD_SHIFT, TX_ADD_MASK);
1fffa194:	6cc0      	or      	r3, r0
1fffa196:	078d      	br      	0x1fffa0b0	// 1fffa0b0 <llSetupAuxScanRspPDU1+0x28>
1fffa198:	4366      	lsli      	r3, r3, 6
1fffa19a:	07fd      	br      	0x1fffa194	// 1fffa194 <llSetupAuxScanRspPDU1+0x10c>
        advDataLen = 100;
1fffa19c:	3464      	movi      	r4, 100
        extHdrLength += 3;
1fffa19e:	310c      	movi      	r1, 12
        extHeaderFlag |= LE_EXT_HDR_AUX_PTR_PRESENT_BITMASK ;
1fffa1a0:	3719      	movi      	r7, 25
1fffa1a2:	0792      	br      	0x1fffa0c6	// 1fffa0c6 <llSetupAuxScanRspPDU1+0x3e>
            osal_memcpy(&g_tx_ext_adv_buf.data[offset], adv_param.ownAddr, LL_DEVICE_ADDR_LEN);
1fffa1a4:	3206      	movi      	r2, 6
1fffa1a6:	102d      	lrw      	r1, 0x1fff152f	// 1fffa1d8 <llSetupAuxScanRspPDU1+0x150>
1fffa1a8:	07a2      	br      	0x1fffa0ec	// 1fffa0ec <llSetupAuxScanRspPDU1+0x64>
1fffa1aa:	300a      	movi      	r0, 10
1fffa1ac:	07de      	br      	0x1fffa168	// 1fffa168 <llSetupAuxScanRspPDU1+0xe0>
1fffa1ae:	0000      	bkpt
1fffa1b0:	1fff191c 	.long	0x1fff191c
1fffa1b4:	1fff1528 	.long	0x1fff1528
1fffa1b8:	1fffb8bc 	.long	0x1fffb8bc
1fffa1bc:	1fff1904 	.long	0x1fff1904
1fffa1c0:	1fff1924 	.long	0x1fff1924
1fffa1c4:	1fff192a 	.long	0x1fff192a
1fffa1c8:	1fff0894 	.long	0x1fff0894
1fffa1cc:	001fff00 	.long	0x001fff00
1fffa1d0:	1fff192c 	.long	0x1fff192c
1fffa1d4:	1fff1922 	.long	0x1fff1922
1fffa1d8:	1fff152f 	.long	0x1fff152f

1fffa1dc <rx_signal_handler>:

extern int32_t csi_usart_receive_dma(usart_handle_t handle, void *data, uint32_t num);
extern uint32_t hci_h5_receive_msg(uint8_t *byte, uint16_t length);

void RAM_CODE_SECTION(rx_signal_handler)()
{
1fffa1dc:	14d0      	push      	r15
    if (hci_uart_h5.event) {
1fffa1de:	1045      	lrw      	r2, 0x1fffbd00	// 1fffa1f0 <rx_signal_handler+0x14>
1fffa1e0:	9269      	ld.w      	r3, (r2, 0x24)
1fffa1e2:	3b40      	cmpnei      	r3, 0
1fffa1e4:	0c05      	bf      	0x1fffa1ee	// 1fffa1ee <rx_signal_handler+0x12>
        hci_uart_h5.event(HCI_EVENT_READ, 0, hci_uart_h5.event_priv);
1fffa1e6:	924a      	ld.w      	r2, (r2, 0x28)
1fffa1e8:	3100      	movi      	r1, 0
1fffa1ea:	3000      	movi      	r0, 0
1fffa1ec:	7bcd      	jsr      	r3
    }
}
1fffa1ee:	1490      	pop      	r15
1fffa1f0:	1fffbd00 	.long	0x1fffbd00

1fffa1f4 <move_to_slave_function3>:
{
1fffa1f4:	14d0      	push      	r15
1fffa1f6:	1423      	subi      	r14, r14, 12
    pBuf = llMemCopySrc((uint8 *)&winSize,       pBuf, 1);
1fffa1f8:	3201      	movi      	r2, 1
1fffa1fa:	103f      	lrw      	r1, 0x1fff1811	// 1fffa274 <move_to_slave_function3+0x80>
1fffa1fc:	e40e0002 	addi      	r0, r14, 3
1fffa200:	e000038a 	bsr      	0x1fffa914	// 1fffa914 <check_before_startup+0x23c>
1fffa204:	6c43      	mov      	r1, r0
    pBuf = llMemCopySrc((uint8 *)&winOffset,     pBuf, 2);
1fffa206:	3202      	movi      	r2, 2
1fffa208:	1801      	addi      	r0, r14, 4
1fffa20a:	e0000385 	bsr      	0x1fffa914	// 1fffa914 <check_before_startup+0x23c>
1fffa20e:	6c43      	mov      	r1, r0
    pBuf = llMemCopySrc((uint8 *)&connInterval,  pBuf, 2);
1fffa210:	3202      	movi      	r2, 2
1fffa212:	e40e0005 	addi      	r0, r14, 6
1fffa216:	e000037f 	bsr      	0x1fffa914	// 1fffa914 <check_before_startup+0x23c>
1fffa21a:	6c43      	mov      	r1, r0
    pBuf = llMemCopySrc((uint8 *)&slaveLatency,  pBuf, 2);
1fffa21c:	3202      	movi      	r2, 2
1fffa21e:	1802      	addi      	r0, r14, 8
1fffa220:	e000037a 	bsr      	0x1fffa914	// 1fffa914 <check_before_startup+0x23c>
1fffa224:	6c43      	mov      	r1, r0
    pBuf = llMemCopySrc((uint8 *)&connTimeout,   pBuf, 2);
1fffa226:	3202      	movi      	r2, 2
1fffa228:	e40e0009 	addi      	r0, r14, 10
1fffa22c:	e0000374 	bsr      	0x1fffa914	// 1fffa914 <check_before_startup+0x23c>
    winSize      <<= 1;
1fffa230:	d86e0003 	ld.b      	r3, (r14, 0x3)
1fffa234:	4361      	lsli      	r3, r3, 1
1fffa236:	dc6e0003 	st.b      	r3, (r14, 0x3)
    winOffset    <<= 1;
1fffa23a:	d86e1002 	ld.h      	r3, (r14, 0x4)
1fffa23e:	4361      	lsli      	r3, r3, 1
1fffa240:	dc6e1002 	st.h      	r3, (r14, 0x4)
    connInterval <<= 1;
1fffa244:	d86e1003 	ld.h      	r3, (r14, 0x6)
1fffa248:	4361      	lsli      	r3, r3, 1
1fffa24a:	74cd      	zexth      	r3, r3
    connTimeout  <<= 4;
1fffa24c:	d84e1005 	ld.h      	r2, (r14, 0xa)
    if (((connTimeout <= ((slaveLatency) * connInterval << 1)))
1fffa250:	d82e1004 	ld.h      	r1, (r14, 0x8)
    connTimeout  <<= 4;
1fffa254:	4244      	lsli      	r2, r2, 4
    if (((connTimeout <= ((slaveLatency) * connInterval << 1)))
1fffa256:	7c4c      	mult      	r1, r3
    connTimeout  <<= 4;
1fffa258:	7489      	zexth      	r2, r2
    if (((connTimeout <= ((slaveLatency) * connInterval << 1)))
1fffa25a:	4121      	lsli      	r1, r1, 1
    connInterval <<= 1;
1fffa25c:	dc6e1003 	st.h      	r3, (r14, 0x6)
    if (((connTimeout <= ((slaveLatency) * connInterval << 1)))
1fffa260:	6485      	cmplt      	r1, r2
    connTimeout  <<= 4;
1fffa262:	dc4e1005 	st.h      	r2, (r14, 0xa)
    if (((connTimeout <= ((slaveLatency) * connInterval << 1)))
1fffa266:	0c05      	bf      	0x1fffa270	// 1fffa270 <move_to_slave_function3+0x7c>
        || (connInterval == 0)) {
1fffa268:	3b40      	cmpnei      	r3, 0
1fffa26a:	0c03      	bf      	0x1fffa270	// 1fffa270 <move_to_slave_function3+0x7c>
    move_to_slave_function0();
1fffa26c:	e0000450 	bsr      	0x1fffab0c	// 1fffab0c <check_before_startup+0x434>
}
1fffa270:	1403      	addi      	r14, r14, 12
1fffa272:	1490      	pop      	r15
1fffa274:	1fff1811 	.long	0x1fff1811

1fffa278 <uart_recv_event>:

    osal_run_system();
}

__attribute__((section(".__sram.code"))) void uart_recv_event(int32_t idx, usart_event_e event)
{
1fffa278:	14d0      	push      	r15
    if (event ==  USART_EVENT_RECEIVE_COMPLETE || event ==  USART_EVENT_RX_FRAMING_ERROR) {
1fffa27a:	3941      	cmpnei      	r1, 1
1fffa27c:	0c03      	bf      	0x1fffa282	// 1fffa282 <uart_recv_event+0xa>
1fffa27e:	3948      	cmpnei      	r1, 8
1fffa280:	0808      	bt      	0x1fffa290	// 1fffa290 <uart_recv_event+0x18>
        hci_uart_h5.dma_may_overflow++;
1fffa282:	1065      	lrw      	r3, 0x1fffbd00	// 1fffa294 <uart_recv_event+0x1c>
        csi_usart_restart_receive_dma(hci_uart_h5.uart_dev);
1fffa284:	9307      	ld.w      	r0, (r3, 0x1c)
        hci_uart_h5.dma_may_overflow++;
1fffa286:	934c      	ld.w      	r2, (r3, 0x30)
1fffa288:	2200      	addi      	r2, 1
1fffa28a:	b34c      	st.w      	r2, (r3, 0x30)
        csi_usart_restart_receive_dma(hci_uart_h5.uart_dev);
1fffa28c:	e3ffd7c6 	bsr      	0x1fff5218	// 1fff5218 <csi_usart_restart_receive_dma>
    }
}
1fffa290:	1490      	pop      	r15
1fffa292:	0000      	bkpt
1fffa294:	1fffbd00 	.long	0x1fffbd00

1fffa298 <hci_uart_loop>:
{
1fffa298:	14d3      	push      	r4-r6, r15
1fffa29a:	1424      	subi      	r14, r14, 16
    dma_now  = DMA_DAR;
1fffa29c:	ea234001 	movih      	r3, 16385
1fffa2a0:	9362      	ld.w      	r3, (r3, 0x8)
1fffa2a2:	b863      	st.w      	r3, (r14, 0xc)
    if (dma_now > (uint32_t)hci_uart_h5.dma_recv + DMA_RECV_BUFFER_SIZE) {
1fffa2a4:	119f      	lrw      	r4, 0x1fffbd00	// 1fffa3a0 <hci_uart_loop+0x108>
1fffa2a6:	6d93      	mov      	r6, r4
1fffa2a8:	9843      	ld.w      	r2, (r14, 0xc)
1fffa2aa:	946d      	ld.w      	r3, (r4, 0x34)
1fffa2ac:	e42303ff 	addi      	r1, r3, 1024
1fffa2b0:	6484      	cmphs      	r1, r2
1fffa2b2:	0815      	bt      	0x1fffa2dc	// 1fffa2dc <hci_uart_loop+0x44>
        LOGE(TAG, "dma overflow,0x%x, 0x%x\n", hci_uart_h5.dma_recv, dma_now);
1fffa2b4:	9843      	ld.w      	r2, (r14, 0xc)
1fffa2b6:	b861      	st.w      	r3, (r14, 0x4)
1fffa2b8:	b842      	st.w      	r2, (r14, 0x8)
1fffa2ba:	3003      	movi      	r0, 3
1fffa2bc:	117a      	lrw      	r3, 0x1101211e	// 1fffa3a4 <hci_uart_loop+0x10c>
1fffa2be:	115b      	lrw      	r2, 0x110120ec	// 1fffa3a8 <hci_uart_loop+0x110>
1fffa2c0:	113b      	lrw      	r1, 0x1101211a	// 1fffa3ac <hci_uart_loop+0x114>
1fffa2c2:	b860      	st.w      	r3, (r14, 0x0)
1fffa2c4:	ea030514 	movi      	r3, 1300
1fffa2c8:	e000029c 	bsr      	0x1fffa800	// 1fffa800 <check_before_startup+0x128>
        csi_usart_restart_receive_dma(hci_uart_h5.uart_dev);
1fffa2cc:	9407      	ld.w      	r0, (r4, 0x1c)
        hci_uart_h5.dma_may_overflow++;
1fffa2ce:	946c      	ld.w      	r3, (r4, 0x30)
1fffa2d0:	2300      	addi      	r3, 1
1fffa2d2:	b46c      	st.w      	r3, (r4, 0x30)
        csi_usart_restart_receive_dma(hci_uart_h5.uart_dev);
1fffa2d4:	e3ffd7a2 	bsr      	0x1fff5218	// 1fff5218 <csi_usart_restart_receive_dma>
}
1fffa2d8:	1404      	addi      	r14, r14, 16
1fffa2da:	1493      	pop      	r4-r6, r15
    recv_size = dma_now >= hci_uart_h5.dma_read ? dma_now - hci_uart_h5.dma_read : dma_now + DMA_RECV_BUFFER_SIZE - hci_uart_h5.dma_read;
1fffa2dc:	9843      	ld.w      	r2, (r14, 0xc)
1fffa2de:	d864210e 	ld.w      	r3, (r4, 0x438)
1fffa2e2:	9823      	ld.w      	r1, (r14, 0xc)
1fffa2e4:	64c8      	cmphs      	r2, r3
1fffa2e6:	0c2b      	bf      	0x1fffa33c	// 1fffa33c <hci_uart_loop+0xa4>
            printf("may overlow\n");
1fffa2e8:	1192      	lrw      	r4, 0x11012137	// 1fffa3b0 <hci_uart_loop+0x118>
        dma_now  = DMA_DAR;
1fffa2ea:	ea254001 	movih      	r5, 16385
    recv_size = dma_now >= hci_uart_h5.dma_read ? dma_now - hci_uart_h5.dma_read : dma_now + DMA_RECV_BUFFER_SIZE - hci_uart_h5.dma_read;
1fffa2ee:	604e      	subu      	r1, r3
    while (recv_size > 0) {
1fffa2f0:	3940      	cmpnei      	r1, 0
1fffa2f2:	0828      	bt      	0x1fffa342	// 1fffa342 <hci_uart_loop+0xaa>
    uint32_t flags = irq_lock();
1fffa2f4:	e0000298 	bsr      	0x1fffa824	// 1fffa824 <check_before_startup+0x14c>
    if ((DMA_DAR == dma_now) && (DMA_DAR > (uint32_t)hci_uart_h5.dma_recv) && (DMA_DAR == (uint32_t)hci_uart_h5.dma_read) && (((readl(0x4000907c) & 0x01)) == 0)) {
1fffa2f8:	ea234001 	movih      	r3, 16385
1fffa2fc:	9322      	ld.w      	r1, (r3, 0x8)
1fffa2fe:	9843      	ld.w      	r2, (r14, 0xc)
    uint32_t flags = irq_lock();
1fffa300:	6d03      	mov      	r4, r0
    if ((DMA_DAR == dma_now) && (DMA_DAR > (uint32_t)hci_uart_h5.dma_recv) && (DMA_DAR == (uint32_t)hci_uart_h5.dma_read) && (((readl(0x4000907c) & 0x01)) == 0)) {
1fffa302:	6486      	cmpne      	r1, r2
1fffa304:	0816      	bt      	0x1fffa330	// 1fffa330 <hci_uart_loop+0x98>
1fffa306:	9342      	ld.w      	r2, (r3, 0x8)
1fffa308:	962d      	ld.w      	r1, (r6, 0x34)
1fffa30a:	6484      	cmphs      	r1, r2
1fffa30c:	0812      	bt      	0x1fffa330	// 1fffa330 <hci_uart_loop+0x98>
1fffa30e:	9342      	ld.w      	r2, (r3, 0x8)
1fffa310:	d866210e 	ld.w      	r3, (r6, 0x438)
1fffa314:	64ca      	cmpne      	r2, r3
1fffa316:	080d      	bt      	0x1fffa330	// 1fffa330 <hci_uart_loop+0x98>
1fffa318:	1167      	lrw      	r3, 0x40009000	// 1fffa3b4 <hci_uart_loop+0x11c>
1fffa31a:	937f      	ld.w      	r3, (r3, 0x7c)
1fffa31c:	e4632001 	andi      	r3, r3, 1
1fffa320:	3b40      	cmpnei      	r3, 0
1fffa322:	0807      	bt      	0x1fffa330	// 1fffa330 <hci_uart_loop+0x98>
        csi_usart_restart_receive_dma(hci_uart_h5.uart_dev);
1fffa324:	9607      	ld.w      	r0, (r6, 0x1c)
1fffa326:	e3ffd779 	bsr      	0x1fff5218	// 1fff5218 <csi_usart_restart_receive_dma>
        hci_uart_h5.dma_read = (uint32_t)hci_uart_h5.dma_recv;
1fffa32a:	966d      	ld.w      	r3, (r6, 0x34)
1fffa32c:	dc66210e 	st.w      	r3, (r6, 0x438)
    irq_unlock(flags);
1fffa330:	6c13      	mov      	r0, r4
1fffa332:	e00003cf 	bsr      	0x1fffaad0	// 1fffaad0 <check_before_startup+0x3f8>
    osal_run_system();
1fffa336:	e000027d 	bsr      	0x1fffa830	// 1fffa830 <check_before_startup+0x158>
1fffa33a:	07cf      	br      	0x1fffa2d8	// 1fffa2d8 <hci_uart_loop+0x40>
    recv_size = dma_now >= hci_uart_h5.dma_read ? dma_now - hci_uart_h5.dma_read : dma_now + DMA_RECV_BUFFER_SIZE - hci_uart_h5.dma_read;
1fffa33c:	e42103ff 	addi      	r1, r1, 1024
1fffa340:	07d4      	br      	0x1fffa2e8	// 1fffa2e8 <hci_uart_loop+0x50>
        hci_uart_h5.total_recv += recv_size;
1fffa342:	d866210f 	ld.w      	r3, (r6, 0x43c)
1fffa346:	60c4      	addu      	r3, r1
1fffa348:	dc66210f 	st.w      	r3, (r6, 0x43c)
        if (dma_now >= hci_uart_h5.dma_read) {
1fffa34c:	d806210e 	ld.w      	r0, (r6, 0x438)
1fffa350:	9863      	ld.w      	r3, (r14, 0xc)
1fffa352:	640c      	cmphs      	r3, r0
1fffa354:	0c0f      	bf      	0x1fffa372	// 1fffa372 <hci_uart_loop+0xda>
            hci_h5_receive_msg((uint8_t *)hci_uart_h5.dma_read, recv_size);
1fffa356:	7445      	zexth      	r1, r1
1fffa358:	e000048e 	bsr      	0x1fffac74	// 1fffac74 <check_before_startup+0x59c>
        hci_uart_h5.dma_read = dma_now;
1fffa35c:	9863      	ld.w      	r3, (r14, 0xc)
1fffa35e:	dc66210e 	st.w      	r3, (r6, 0x438)
        dma_now  = DMA_DAR;
1fffa362:	9542      	ld.w      	r2, (r5, 0x8)
1fffa364:	b843      	st.w      	r2, (r14, 0xc)
        recv_size = dma_now >= hci_uart_h5.dma_read ? dma_now - hci_uart_h5.dma_read : dma_now + DMA_RECV_BUFFER_SIZE - hci_uart_h5.dma_read;
1fffa366:	9843      	ld.w      	r2, (r14, 0xc)
1fffa368:	9823      	ld.w      	r1, (r14, 0xc)
1fffa36a:	64c8      	cmphs      	r2, r3
1fffa36c:	0c17      	bf      	0x1fffa39a	// 1fffa39a <hci_uart_loop+0x102>
1fffa36e:	604e      	subu      	r1, r3
1fffa370:	07c0      	br      	0x1fffa2f0	// 1fffa2f0 <hci_uart_loop+0x58>
            hci_h5_receive_msg((uint8_t *)hci_uart_h5.dma_read, (uint32_t)hci_uart_h5.dma_recv + DMA_RECV_BUFFER_SIZE - hci_uart_h5.dma_read);
1fffa372:	962d      	ld.w      	r1, (r6, 0x34)
1fffa374:	6042      	subu      	r1, r0
1fffa376:	e42103ff 	addi      	r1, r1, 1024
1fffa37a:	7445      	zexth      	r1, r1
1fffa37c:	e000047c 	bsr      	0x1fffac74	// 1fffac74 <check_before_startup+0x59c>
            hci_h5_receive_msg((uint8_t *)hci_uart_h5.dma_recv, dma_now - (uint32_t)hci_uart_h5.dma_recv);
1fffa380:	960d      	ld.w      	r0, (r6, 0x34)
1fffa382:	9823      	ld.w      	r1, (r14, 0xc)
1fffa384:	6042      	subu      	r1, r0
1fffa386:	7445      	zexth      	r1, r1
1fffa388:	e0000476 	bsr      	0x1fffac74	// 1fffac74 <check_before_startup+0x59c>
            printf("may overlow\n");
1fffa38c:	6c13      	mov      	r0, r4
            hci_uart_h5.dma_may_overflow++;
1fffa38e:	966c      	ld.w      	r3, (r6, 0x30)
1fffa390:	2300      	addi      	r3, 1
1fffa392:	b66c      	st.w      	r3, (r6, 0x30)
            printf("may overlow\n");
1fffa394:	e000052a 	bsr      	0x1fffade8	// 1fffade8 <check_before_startup+0x710>
1fffa398:	07e2      	br      	0x1fffa35c	// 1fffa35c <hci_uart_loop+0xc4>
        recv_size = dma_now >= hci_uart_h5.dma_read ? dma_now - hci_uart_h5.dma_read : dma_now + DMA_RECV_BUFFER_SIZE - hci_uart_h5.dma_read;
1fffa39a:	e42103ff 	addi      	r1, r1, 1024
1fffa39e:	07e8      	br      	0x1fffa36e	// 1fffa36e <hci_uart_loop+0xd6>
1fffa3a0:	1fffbd00 	.long	0x1fffbd00
1fffa3a4:	1101211e 	.long	0x1101211e
1fffa3a8:	110120ec 	.long	0x110120ec
1fffa3ac:	1101211a 	.long	0x1101211a
1fffa3b0:	11012137 	.long	0x11012137
1fffa3b4:	40009000 	.long	0x40009000

1fffa3b8 <LL_IRQHandler_process>:
{
1fffa3b8:	14d2      	push      	r4-r5, r15
    ISR_entry_time = read_current_fine_time();
1fffa3ba:	e00003af 	bsr      	0x1fffab18	// 1fffab18 <check_before_startup+0x440>
1fffa3be:	1176      	lrw      	r3, 0x1fff0e1c	// 1fffa494 <LL_IRQHandler_process+0xdc>
1fffa3c0:	b300      	st.w      	r0, (r3, 0x0)
    osalTimeUpdate();
1fffa3c2:	e000044d 	bsr      	0x1fffac5c	// 1fffac5c <check_before_startup+0x584>
    irq_status = ll_hw_get_irq_status();
1fffa3c6:	e00001d5 	bsr      	0x1fffa770	// 1fffa770 <check_before_startup+0x98>
    if (!(irq_status & LIRQ_MD)) {        // only process IRQ of MODE DONE
1fffa3ca:	e4602001 	andi      	r3, r0, 1
    irq_status = ll_hw_get_irq_status();
1fffa3ce:	6d03      	mov      	r4, r0
    if (!(irq_status & LIRQ_MD)) {        // only process IRQ of MODE DONE
1fffa3d0:	3b40      	cmpnei      	r3, 0
1fffa3d2:	0804      	bt      	0x1fffa3da	// 1fffa3da <LL_IRQHandler_process+0x22>
        ll_hw_clr_irq();                  // clear irq status
1fffa3d4:	e0000222 	bsr      	0x1fffa818	// 1fffa818 <check_before_startup+0x140>
}
1fffa3d8:	1492      	pop      	r4-r5, r15
    llWaitingIrq = FALSE;
1fffa3da:	1170      	lrw      	r3, 0x1fff0df8	// 1fffa498 <LL_IRQHandler_process+0xe0>
1fffa3dc:	3200      	movi      	r2, 0
    if (llTaskState == LL_TASK_EXTENDED_ADV) {
1fffa3de:	11b0      	lrw      	r5, 0x1fff15d0	// 1fffa49c <LL_IRQHandler_process+0xe4>
    llWaitingIrq = FALSE;
1fffa3e0:	b340      	st.w      	r2, (r3, 0x0)
    if (llTaskState == LL_TASK_EXTENDED_ADV) {
1fffa3e2:	8560      	ld.b      	r3, (r5, 0x0)
1fffa3e4:	3b41      	cmpnei      	r3, 1
1fffa3e6:	081b      	bt      	0x1fffa41c	// 1fffa41c <LL_IRQHandler_process+0x64>
        ret = ll_processExtAdvIRQ(irq_status);
1fffa3e8:	e3fff9e2 	bsr      	0x1fff97ac	// 1fff97ac <ll_processExtAdvIRQ>
        if (ret == TRUE) {
1fffa3ec:	3841      	cmpnei      	r0, 1
1fffa3ee:	0ff5      	bf      	0x1fffa3d8	// 1fffa3d8 <LL_IRQHandler_process+0x20>
    if (llTaskState == LL_TASK_EXTENDED_SCAN_PENDING)
1fffa3f0:	8560      	ld.b      	r3, (r5, 0x0)
1fffa3f2:	3b51      	cmpnei      	r3, 17
1fffa3f4:	0807      	bt      	0x1fffa402	// 1fffa402 <LL_IRQHandler_process+0x4a>
        llSetupExtScan1(extScanInfo.current_chn);
1fffa3f6:	116b      	lrw      	r3, 0x1fff1500	// 1fffa4a0 <LL_IRQHandler_process+0xe8>
1fffa3f8:	831e      	ld.b      	r0, (r3, 0x1e)
1fffa3fa:	e3fff26b 	bsr      	0x1fff88d0	// 1fff88d0 <llSetupExtScan1>
        llTaskState = LL_TASK_EXTENDED_SCAN;
1fffa3fe:	3303      	movi      	r3, 3
1fffa400:	a560      	st.b      	r3, (r5, 0x0)
    if (llSecondaryState == LL_SEC_STATE_ADV_PENDING) {
1fffa402:	1189      	lrw      	r4, 0x1fff1184	// 1fffa4a4 <LL_IRQHandler_process+0xec>
1fffa404:	8460      	ld.b      	r3, (r4, 0x0)
1fffa406:	3b44      	cmpnei      	r3, 4
1fffa408:	0837      	bt      	0x1fffa476	// 1fffa476 <LL_IRQHandler_process+0xbe>
        if (llSecAdvAllow()) {  // for multi-connection case, it is possible still no enough time for adv
1fffa40a:	e0000453 	bsr      	0x1fffacb0	// 1fffacb0 <check_before_startup+0x5d8>
1fffa40e:	3840      	cmpnei      	r0, 0
1fffa410:	0fe4      	bf      	0x1fffa3d8	// 1fffa3d8 <LL_IRQHandler_process+0x20>
            llSetupSecAdvEvt();
1fffa412:	e000049d 	bsr      	0x1fffad4c	// 1fffad4c <check_before_startup+0x674>
            llSecondaryState = LL_SEC_STATE_ADV;
1fffa416:	3302      	movi      	r3, 2
1fffa418:	a460      	st.b      	r3, (r4, 0x0)
1fffa41a:	07df      	br      	0x1fffa3d8	// 1fffa3d8 <LL_IRQHandler_process+0x20>
    } else if (llTaskState == LL_TASK_EXTENDED_SCAN) {
1fffa41c:	3b43      	cmpnei      	r3, 3
1fffa41e:	0804      	bt      	0x1fffa426	// 1fffa426 <LL_IRQHandler_process+0x6e>
        ret = ll_processExtScanIRQ(irq_status);
1fffa420:	e3fff2c2 	bsr      	0x1fff89a4	// 1fff89a4 <ll_processExtScanIRQ>
1fffa424:	07e4      	br      	0x1fffa3ec	// 1fffa3ec <LL_IRQHandler_process+0x34>
    } else if (llTaskState == LL_TASK_EXTENDED_INIT) {
1fffa426:	3b44      	cmpnei      	r3, 4
1fffa428:	0804      	bt      	0x1fffa430	// 1fffa430 <LL_IRQHandler_process+0x78>
        ret = ll_processExtInitIRQ(irq_status);
1fffa42a:	e3ffded1 	bsr      	0x1fff61cc	// 1fff61cc <ll_processExtInitIRQ>
1fffa42e:	07df      	br      	0x1fffa3ec	// 1fffa3ec <LL_IRQHandler_process+0x34>
    } else if (llTaskState == LL_TASK_PERIODIC_ADV) {
1fffa430:	3b42      	cmpnei      	r3, 2
1fffa432:	0fdf      	bf      	0x1fffa3f0	// 1fffa3f0 <LL_IRQHandler_process+0x38>
    } else if (llTaskState == LL_TASK_PERIODIC_SCAN) {
1fffa434:	3b45      	cmpnei      	r3, 5
1fffa436:	0fdd      	bf      	0x1fffa3f0	// 1fffa3f0 <LL_IRQHandler_process+0x38>
        mode = ll_hw_get_tr_mode();
1fffa438:	e00003e2 	bsr      	0x1fffabfc	// 1fffabfc <check_before_startup+0x524>
        if ((llSecondaryState == LL_SEC_STATE_ADV || llSecondaryState ==LL_SEC_STATE_IDLE_PENDING)
1fffa43c:	107a      	lrw      	r3, 0x1fff1184	// 1fffa4a4 <LL_IRQHandler_process+0xec>
1fffa43e:	8360      	ld.b      	r3, (r3, 0x0)
1fffa440:	3b42      	cmpnei      	r3, 2
1fffa442:	0c03      	bf      	0x1fffa448	// 1fffa448 <LL_IRQHandler_process+0x90>
1fffa444:	3b45      	cmpnei      	r3, 5
1fffa446:	0810      	bt      	0x1fffa466	// 1fffa466 <LL_IRQHandler_process+0xae>
            && (mode == LL_HW_MODE_TRX)
1fffa448:	3842      	cmpnei      	r0, 2
1fffa44a:	080a      	bt      	0x1fffa45e	// 1fffa45e <LL_IRQHandler_process+0xa6>
            && (adv_param.advEvtType == LL_ADV_CONNECTABLE_UNDIRECTED_EVT || adv_param.advEvtType == LL_ADV_SCANNABLE_UNDIRECTED_EVT))
1fffa44c:	1077      	lrw      	r3, 0x1fff1528	// 1fffa4a8 <LL_IRQHandler_process+0xf0>
1fffa44e:	836e      	ld.b      	r3, (r3, 0xe)
1fffa450:	e46320fd 	andi      	r3, r3, 253
1fffa454:	3b40      	cmpnei      	r3, 0
1fffa456:	0804      	bt      	0x1fffa45e	// 1fffa45e <LL_IRQHandler_process+0xa6>
            ret = ll_processBasicIRQ_secondaryAdvTRX0(irq_status);
1fffa458:	6c13      	mov      	r0, r4
1fffa45a:	e3ffef13 	bsr      	0x1fff8280	// 1fff8280 <ll_processBasicIRQ_secondaryAdvTRX0>
        ret = ll_processBasicIRQ(irq_status);
1fffa45e:	6c13      	mov      	r0, r4
1fffa460:	e00003f8 	bsr      	0x1fffac50	// 1fffac50 <check_before_startup+0x578>
1fffa464:	07c6      	br      	0x1fffa3f0	// 1fffa3f0 <LL_IRQHandler_process+0x38>
        else if (llSecondaryState == LL_SEC_STATE_SCAN && mode == LL_HW_MODE_SRX)
1fffa466:	3b41      	cmpnei      	r3, 1
1fffa468:	0bfb      	bt      	0x1fffa45e	// 1fffa45e <LL_IRQHandler_process+0xa6>
1fffa46a:	3841      	cmpnei      	r0, 1
1fffa46c:	0bf9      	bt      	0x1fffa45e	// 1fffa45e <LL_IRQHandler_process+0xa6>
            ret = ll_processBasicIRQ_secondaryScanSRX0(irq_status);
1fffa46e:	6c13      	mov      	r0, r4
1fffa470:	e3fff150 	bsr      	0x1fff8710	// 1fff8710 <ll_processBasicIRQ_secondaryScanSRX0>
1fffa474:	07f5      	br      	0x1fffa45e	// 1fffa45e <LL_IRQHandler_process+0xa6>
    else if (llSecondaryState == LL_SEC_STATE_SCAN_PENDING) {
1fffa476:	3b43      	cmpnei      	r3, 3
1fffa478:	0806      	bt      	0x1fffa484	// 1fffa484 <LL_IRQHandler_process+0xcc>
        llSetupSecScan(scanInfo.nextScanChan);
1fffa47a:	106d      	lrw      	r3, 0x1fff1494	// 1fffa4ac <LL_IRQHandler_process+0xf4>
1fffa47c:	8312      	ld.b      	r0, (r3, 0x12)
1fffa47e:	e000026f 	bsr      	0x1fffa95c	// 1fffa95c <check_before_startup+0x284>
1fffa482:	07ab      	br      	0x1fffa3d8	// 1fffa3d8 <LL_IRQHandler_process+0x20>
    else if (llSecondaryState == LL_SEC_STATE_INIT_PENDING) {
1fffa484:	3b47      	cmpnei      	r3, 7
1fffa486:	0ba9      	bt      	0x1fffa3d8	// 1fffa3d8 <LL_IRQHandler_process+0x20>
        llSetupSecInit(initInfo.nextScanChan);
1fffa488:	106a      	lrw      	r3, 0x1fff119e	// 1fffa4b0 <LL_IRQHandler_process+0xf8>
1fffa48a:	830e      	ld.b      	r0, (r3, 0xe)
1fffa48c:	e000034c 	bsr      	0x1fffab24	// 1fffab24 <check_before_startup+0x44c>
1fffa490:	07a4      	br      	0x1fffa3d8	// 1fffa3d8 <LL_IRQHandler_process+0x20>
1fffa492:	0000      	bkpt
1fffa494:	1fff0e1c 	.long	0x1fff0e1c
1fffa498:	1fff0df8 	.long	0x1fff0df8
1fffa49c:	1fff15d0 	.long	0x1fff15d0
1fffa4a0:	1fff1500 	.long	0x1fff1500
1fffa4a4:	1fff1184 	.long	0x1fff1184
1fffa4a8:	1fff1528 	.long	0x1fff1528
1fffa4ac:	1fff1494 	.long	0x1fff1494
1fffa4b0:	1fff119e 	.long	0x1fff119e

1fffa4b4 <__LL_IRQHandler>:
{
1fffa4b4:	14d1      	push      	r4, r15
    g_intrpt_nested_level[0]++;
1fffa4b6:	1087      	lrw      	r4, 0x1fffd9b8	// 1fffa4d0 <__LL_IRQHandler+0x1c>
    g_rx_adv_buf.rxheader = 0;
1fffa4b8:	3200      	movi      	r2, 0
    g_intrpt_nested_level[0]++;
1fffa4ba:	8460      	ld.b      	r3, (r4, 0x0)
1fffa4bc:	2300      	addi      	r3, 1
1fffa4be:	a460      	st.b      	r3, (r4, 0x0)
    g_rx_adv_buf.rxheader = 0;
1fffa4c0:	1065      	lrw      	r3, 0x1fff17f8	// 1fffa4d4 <__LL_IRQHandler+0x20>
1fffa4c2:	ab42      	st.h      	r2, (r3, 0x4)
    LL_IRQHandler_process();
1fffa4c4:	e3ffff7a 	bsr      	0x1fffa3b8	// 1fffa3b8 <LL_IRQHandler_process>
    g_intrpt_nested_level[0]--;
1fffa4c8:	8460      	ld.b      	r3, (r4, 0x0)
1fffa4ca:	2b00      	subi      	r3, 1
1fffa4cc:	a460      	st.b      	r3, (r4, 0x0)
}
1fffa4ce:	1491      	pop      	r4, r15
1fffa4d0:	1fffd9b8 	.long	0x1fffd9b8
1fffa4d4:	1fff17f8 	.long	0x1fff17f8

1fffa4d8 <data_text_end>:
1fffa4d8:	1fffa4dc 	.long	0x1fffa4dc

1fffa4dc <__stderr>:
1fffa4dc:	00000002 00000110 00000000 00000000     ................
	...

1fffa4f8 <stdout>:
1fffa4f8:	1fffa4fc                                ....

1fffa4fc <__stdout>:
1fffa4fc:	00000001 00000128 00000000 00000000     ....(...........
	...

1fffa518 <stdin>:
1fffa518:	1fffa51c                                ....

1fffa51c <__stdin>:
1fffa51c:	00000000 000000ac 00000000 00000000     ................
	...

1fffa538 <minilibc_rand_seed>:
1fffa538:	00000001                                ....

1fffa53c <TAG>:
1fffa53c:	110115da                                ....

1fffa540 <g_err_proc>:
1fffa540:	11021b60                                `...

1fffa544 <g_mm_region>:
1fffa544:	1fffdae0 00000000                       ........

1fffa54c <g_region_num>:
1fffa54c:	00000001                                ....

1fffa550 <process>:
1fffa550:	1102204c                                L ..

1fffa554 <g_flash_ops>:
1fffa554:	110228f8 11022908 1102291a 1102294e     .(...)...)..N)..
1fffa564:	11022992 110229d6                       .)...)..

1fffa56c <stop_filter_level>:
1fffa56c:	ffffff04                                         .

1fffa56d <uart_tx_rx_pin>:
1fffa56d:	ffffffff d0000000                                .......

1fffa574 <timeout_ms>:
1fffa574:	000007d0 00000fa0 00001f40 00003e80     ........@....>..
1fffa584:	00007d00 0000fa00 0001f400 0003e800     .}..............

1fffa594 <__jump_table_base>:
1fffa594:	1fff0400                                ....

1fffa598 <DLL_enable_num>:
1fffa598:	00000001                                ....

1fffa59c <g_spif_ref_clk>:
1fffa59c:	00000004                                ....

1fffa5a0 <flash_driver>:
1fffa5a0:	00000000 1101166f 11011670 00000000     ....o...p.......
1fffa5b0:	110250e8 11021c30 110250d4 110250b2     .P..0....P...P..
1fffa5c0:	110250a6 1102508a 1102506e 11025034     .P...P..nP..4P..
1fffa5d0:	1102500e                                .P..

1fffa5d4 <s_company_id>:
1fffa5d4:	11011aee                                ....

1fffa5d8 <num_hci_h5_cmd_pkts>:
1fffa5d8:	00000001                                ....

1fffa5dc <adv_scan_schd_funcs>:
1fffa5dc:	1102682c 1102617a 110267f8 110267ac     ,h..za...g...g..
1fffa5ec:	11027104 11026fb4 110267d4 11027064     .q...o...g..dp..

1fffa5fc <adv_scan_schd_st_change_map>:
1fffa5fc:	00000001 00000000 00000002 00000000     ................
1fffa60c:	00000001 00000000 00000003 00000001     ................
1fffa61c:	00000003 00000002 00000002 00000000     ................
1fffa62c:	00000003 00000002 00000003 00000001     ................

1fffa63c <h5_driver>:
1fffa63c:	00000000 11011c62 00000000 00000000     ....b...........
1fffa64c:	110277b0 11021c30 00000000 11027960     .w..0.......`y..
1fffa65c:	1102779c 1102772c 1102773c 1102778c     .w..,w..<w...w..
1fffa66c:	11027728                                (w..

1fffa670 <pGlobal_config>:
1fffa670:	1fff0400                                ....

1fffa674 <tasksArr>:
1fffa674:	000040c6 0000453c                       .@..<E..

1fffa67c <tasksCnt>:
1fffa67c:	00000002                                         .

1fffa67d <__start_cmd>:
1fffa67d:	00          	.byte	0x00
	...

1fffa680 <Startup>:
1fffa680:	102d      	lrw      	r1, 0x110122b8	// 1fffa6b4 <__exit+0x4>
1fffa682:	104e      	lrw      	r2, 0x1fff1a40	// 1fffa6b8 <__exit+0x8>
1fffa684:	106e      	lrw      	r3, 0x1fffa680	// 1fffa6bc <__exit+0xc>
1fffa686:	60ca      	subu      	r3, r2
1fffa688:	3b40      	cmpnei      	r3, 0
1fffa68a:	0c05      	bf      	0x1fffa694	// 1fffa694 <Startup+0x14>
1fffa68c:	6c0b      	mov      	r0, r2
1fffa68e:	6c8f      	mov      	r2, r3
1fffa690:	106c      	lrw      	r3, 0x5e20	// 1fffa6c0 <__exit+0x10>
1fffa692:	7bcd      	jsr      	r3
1fffa694:	102c      	lrw      	r1, 0x1fffb090	// 1fffa6c4 <__exit+0x14>
1fffa696:	104d      	lrw      	r2, 0x1fffdae0	// 1fffa6c8 <__exit+0x18>
1fffa698:	3000      	movi      	r0, 0
1fffa69a:	6086      	subu      	r2, r1
1fffa69c:	3a40      	cmpnei      	r2, 0
1fffa69e:	0c05      	bf      	0x1fffa6a8	// 1fffa6a8 <Startup+0x28>
1fffa6a0:	6c07      	mov      	r0, r1
1fffa6a2:	3100      	movi      	r1, 0
1fffa6a4:	106a      	lrw      	r3, 0x5e8c	// 1fffa6cc <__exit+0x1c>
1fffa6a6:	7bcd      	jsr      	r3
1fffa6a8:	106a      	lrw      	r3, 0x11023ed0	// 1fffa6d0 <__exit+0x20>
1fffa6aa:	7bcd      	jsr      	r3
1fffa6ac:	106a      	lrw      	r3, 0x110220a8	// 1fffa6d4 <__exit+0x24>
1fffa6ae:	7bcd      	jsr      	r3

1fffa6b0 <__exit>:
1fffa6b0:	0400      	br      	0x1fffa6b0	// 1fffa6b0 <__exit>
1fffa6b2:	0000      	.short	0x0000
1fffa6b4:	110122b8 	.long	0x110122b8
1fffa6b8:	1fff1a40 	.long	0x1fff1a40
1fffa6bc:	1fffa680 	.long	0x1fffa680
1fffa6c0:	00005e20 	.long	0x00005e20
1fffa6c4:	1fffb090 	.long	0x1fffb090
1fffa6c8:	1fffdae0 	.long	0x1fffdae0
1fffa6cc:	00005e8c 	.long	0x00005e8c
1fffa6d0:	11023ed0 	.long	0x11023ed0
1fffa6d4:	110220a8 	.long	0x110220a8

1fffa6d8 <check_before_startup>:
//int check_data __attribute__((section(".__data_copy_data_first__"))) = 1;

__attribute__((section(".__data_copy_first__")))  void check_before_startup()
{
    //check_data = -1;
}
1fffa6d8:	783c      	jmp      	r15
1fffa6da:	0000      	bkpt
1fffa6dc:	0000      	bkpt
1fffa6de:	0000      	bkpt
1fffa6e0:	ea8d0002 	lrw      	r13, 0xff44	// 1fffa6e8 <check_before_startup+0x10>
1fffa6e4:	7834      	jmp      	r13
1fffa6e6:	6c03      	mov      	r0, r0
1fffa6e8:	ff440000 	cprgr      	r4, <26, 0>
1fffa6ec:	ea8d0002 	lrw      	r13, 0x59d4	// 1fffa6f4 <check_before_startup+0x1c>
1fffa6f0:	7834      	jmp      	r13
1fffa6f2:	6c03      	mov      	r0, r0
1fffa6f4:	59d4      	addu      	r6, r1, r5
1fffa6f6:	0000      	bkpt
1fffa6f8:	ea8d0002 	lrw      	r13, 0x11021fa4	// 1fffa700 <check_before_startup+0x28>
1fffa6fc:	7834      	jmp      	r13
1fffa6fe:	6c03      	mov      	r0, r0
1fffa700:	1fa4      	addi      	r7, r14, 656
1fffa702:	1102      	lrw      	r0, 0x2ea8d	// 1fffa788 <check_before_startup+0xb0>
1fffa704:	ea8d0002 	lrw      	r13, 0xf948	// 1fffa70c <check_before_startup+0x34>
1fffa708:	7834      	jmp      	r13
1fffa70a:	6c03      	mov      	r0, r0
1fffa70c:	f9480000 	.long: 0xf9480000
1fffa710:	ea8d0002 	lrw      	r13, 0xf0d2	// 1fffa718 <check_before_startup+0x40>
1fffa714:	7834      	jmp      	r13
1fffa716:	6c03      	mov      	r0, r0
1fffa718:	f0d20000 	.long: 0xf0d20000
1fffa71c:	ea8d0002 	lrw      	r13, 0x4430	// 1fffa724 <check_before_startup+0x4c>
1fffa720:	7834      	jmp      	r13
1fffa722:	6c03      	mov      	r0, r0
1fffa724:	4430      	lsli      	r1, r4, 16
1fffa726:	0000      	bkpt
1fffa728:	ea8d0002 	lrw      	r13, 0xf03c	// 1fffa730 <check_before_startup+0x58>
1fffa72c:	7834      	jmp      	r13
1fffa72e:	6c03      	mov      	r0, r0
1fffa730:	f03c0000 	.long: 0xf03c0000
1fffa734:	ea8d0002 	lrw      	r13, 0xefdc	// 1fffa73c <check_before_startup+0x64>
1fffa738:	7834      	jmp      	r13
1fffa73a:	6c03      	mov      	r0, r0
1fffa73c:	efdc0000 	ori      	r30, r28, 0
1fffa740:	ea8d0002 	lrw      	r13, 0x5e8c	// 1fffa748 <check_before_startup+0x70>
1fffa744:	7834      	jmp      	r13
1fffa746:	6c03      	mov      	r0, r0
1fffa748:	5e8c      	addu      	r4, r6, r3
1fffa74a:	0000      	bkpt
1fffa74c:	ea8d0002 	lrw      	r13, 0x4340	// 1fffa754 <check_before_startup+0x7c>
1fffa750:	7834      	jmp      	r13
1fffa752:	6c03      	mov      	r0, r0
1fffa754:	4340      	lsli      	r2, r3, 0
1fffa756:	0000      	bkpt
1fffa758:	ea8d0002 	lrw      	r13, 0xf23a	// 1fffa760 <check_before_startup+0x88>
1fffa75c:	7834      	jmp      	r13
1fffa75e:	6c03      	mov      	r0, r0
1fffa760:	f23a0000 	.long: 0xf23a0000
1fffa764:	ea8d0002 	lrw      	r13, 0x11023310	// 1fffa76c <check_before_startup+0x94>
1fffa768:	7834      	jmp      	r13
1fffa76a:	6c03      	mov      	r0, r0
1fffa76c:	3310      	movi      	r3, 16
1fffa76e:	1102      	lrw      	r0, 0x2ea8d	// 1fffa7f4 <check_before_startup+0x11c>
1fffa770:	ea8d0002 	lrw      	r13, 0x10110	// 1fffa778 <check_before_startup+0xa0>
1fffa774:	7834      	jmp      	r13
1fffa776:	6c03      	mov      	r0, r0
1fffa778:	0110      	lrw      	r0, 0xf354	// 1fffaab4 <check_before_startup+0x3dc>
1fffa77a:	0001      	lrw      	r0, 0x6c037834	// 1fffab70 <check_before_startup+0x498>
1fffa77c:	ea8d0002 	lrw      	r13, 0x4748	// 1fffa784 <check_before_startup+0xac>
1fffa780:	7834      	jmp      	r13
1fffa782:	6c03      	mov      	r0, r0
1fffa784:	4748      	lsli      	r2, r7, 8
1fffa786:	0000      	bkpt
1fffa788:	ea8d0002 	lrw      	r13, 0x11027f2c	// 1fffa790 <check_before_startup+0xb8>
1fffa78c:	7834      	jmp      	r13
1fffa78e:	6c03      	mov      	r0, r0
1fffa790:	7f2c      	mult      	r12, r11
1fffa792:	1102      	lrw      	r0, 0x2ea8d	// 1fffa818 <check_before_startup+0x140>
1fffa794:	ea8d0002 	lrw      	r13, 0xe660	// 1fffa79c <check_before_startup+0xc4>
1fffa798:	7834      	jmp      	r13
1fffa79a:	6c03      	mov      	r0, r0
1fffa79c:	e6600000 	addi      	r19, r0, 1
1fffa7a0:	ea8d0002 	lrw      	r13, 0x1101d00c	// 1fffa7a8 <check_before_startup+0xd0>
1fffa7a4:	7834      	jmp      	r13
1fffa7a6:	6c03      	mov      	r0, r0
1fffa7a8:	d00c1101 	.long: 0xd00c1101
1fffa7ac:	ea8d0002 	lrw      	r13, 0x11028958	// 1fffa7b4 <check_before_startup+0xdc>
1fffa7b0:	7834      	jmp      	r13
1fffa7b2:	6c03      	mov      	r0, r0
1fffa7b4:	8958      	ld.h      	r2, (r1, 0x30)
1fffa7b6:	1102      	lrw      	r0, 0x2ea8d	// 1fffa83c <check_before_startup+0x164>
1fffa7b8:	ea8d0002 	lrw      	r13, 0xf082	// 1fffa7c0 <check_before_startup+0xe8>
1fffa7bc:	7834      	jmp      	r13
1fffa7be:	6c03      	mov      	r0, r0
1fffa7c0:	f0820000 	.long: 0xf0820000
1fffa7c4:	ea8d0002 	lrw      	r13, 0x3e5c	// 1fffa7cc <check_before_startup+0xf4>
1fffa7c8:	7834      	jmp      	r13
1fffa7ca:	6c03      	mov      	r0, r0
1fffa7cc:	3e5c      	cmpnei      	r6, 28
1fffa7ce:	0000      	bkpt
1fffa7d0:	ea8d0002 	lrw      	r13, 0x3d68	// 1fffa7d8 <check_before_startup+0x100>
1fffa7d4:	7834      	jmp      	r13
1fffa7d6:	6c03      	mov      	r0, r0
1fffa7d8:	3d68      	.long: 0x00003d68
1fffa7da:	0000      	bkpt
1fffa7dc:	ea8d0002 	lrw      	r13, 0x12798	// 1fffa7e4 <check_before_startup+0x10c>
1fffa7e0:	7834      	jmp      	r13
1fffa7e2:	6c03      	mov      	r0, r0
1fffa7e4:	2798      	addi      	r7, 153
1fffa7e6:	0001      	lrw      	r0, 0x6c037834	// 1fffabdc <check_before_startup+0x504>
1fffa7e8:	ea8d0002 	lrw      	r13, 0xf158	// 1fffa7f0 <check_before_startup+0x118>
1fffa7ec:	7834      	jmp      	r13
1fffa7ee:	6c03      	mov      	r0, r0
1fffa7f0:	f1580000 	.long: 0xf1580000
1fffa7f4:	ea8d0002 	lrw      	r13, 0x5e70	// 1fffa7fc <check_before_startup+0x124>
1fffa7f8:	7834      	jmp      	r13
1fffa7fa:	6c03      	mov      	r0, r0
1fffa7fc:	5e70      	addu      	r3, r6, r4
1fffa7fe:	0000      	bkpt
1fffa800:	ea8d0002 	lrw      	r13, 0x11022aac	// 1fffa808 <check_before_startup+0x130>
1fffa804:	7834      	jmp      	r13
1fffa806:	6c03      	mov      	r0, r0
1fffa808:	2aac      	subi      	r2, 173
1fffa80a:	1102      	lrw      	r0, 0x2ea8d	// 1fffa890 <check_before_startup+0x1b8>
1fffa80c:	ea8d0002 	lrw      	r13, 0xda18	// 1fffa814 <check_before_startup+0x13c>
1fffa810:	7834      	jmp      	r13
1fffa812:	6c03      	mov      	r0, r0
1fffa814:	da180000 	ld.b      	r16, (r24, 0x0)
1fffa818:	ea8d0002 	lrw      	r13, 0xfbf0	// 1fffa820 <check_before_startup+0x148>
1fffa81c:	7834      	jmp      	r13
1fffa81e:	6c03      	mov      	r0, r0
1fffa820:	fbf00000 	.long: 0xfbf00000
1fffa824:	ea8d0002 	lrw      	r13, 0x11022d12	// 1fffa82c <check_before_startup+0x154>
1fffa828:	7834      	jmp      	r13
1fffa82a:	6c03      	mov      	r0, r0
1fffa82c:	2d12      	subi      	r5, 19
1fffa82e:	1102      	lrw      	r0, 0x2ea8d	// 1fffa8b4 <check_before_startup+0x1dc>
1fffa830:	ea8d0002 	lrw      	r13, 0x61a8	// 1fffa838 <check_before_startup+0x160>
1fffa834:	7834      	jmp      	r13
1fffa836:	6c03      	mov      	r0, r0
1fffa838:	61a8      	addu      	r6, r10
1fffa83a:	0000      	bkpt
1fffa83c:	ea8d0002 	lrw      	r13, 0xfc24	// 1fffa844 <check_before_startup+0x16c>
1fffa840:	7834      	jmp      	r13
1fffa842:	6c03      	mov      	r0, r0
1fffa844:	fc240000 	cprgr      	r4, <1, 0>
1fffa848:	ea8d0002 	lrw      	r13, 0xd4ae	// 1fffa850 <check_before_startup+0x178>
1fffa84c:	7834      	jmp      	r13
1fffa84e:	6c03      	mov      	r0, r0
1fffa850:	d4ae0000 	.long: 0xd4ae0000
1fffa854:	ea8d0002 	lrw      	r13, 0x11025108	// 1fffa85c <check_before_startup+0x184>
1fffa858:	7834      	jmp      	r13
1fffa85a:	6c03      	mov      	r0, r0
1fffa85c:	5108      	asri      	r0, r1, 8
1fffa85e:	1102      	lrw      	r0, 0x2ea8d	// 1fffa8e4 <check_before_startup+0x20c>
1fffa860:	ea8d0002 	lrw      	r13, 0x52d0	// 1fffa868 <check_before_startup+0x190>
1fffa864:	7834      	jmp      	r13
1fffa866:	6c03      	mov      	r0, r0
1fffa868:	52d0      	asri      	r6, r2, 16
1fffa86a:	0000      	bkpt
1fffa86c:	ea8d0002 	lrw      	r13, 0xf970	// 1fffa874 <check_before_startup+0x19c>
1fffa870:	7834      	jmp      	r13
1fffa872:	6c03      	mov      	r0, r0
1fffa874:	f9700000 	.long: 0xf9700000
1fffa878:	ea8d0002 	lrw      	r13, 0x4838	// 1fffa880 <check_before_startup+0x1a8>
1fffa87c:	7834      	jmp      	r13
1fffa87e:	6c03      	mov      	r0, r0
1fffa880:	4838      	lsri      	r1, r0, 24
1fffa882:	0000      	bkpt
1fffa884:	ea8d0002 	lrw      	r13, 0x69a0	// 1fffa88c <check_before_startup+0x1b4>
1fffa888:	7834      	jmp      	r13
1fffa88a:	6c03      	mov      	r0, r0
1fffa88c:	69a0      	and      	r6, r8
1fffa88e:	0000      	bkpt
1fffa890:	ea8d0002 	lrw      	r13, 0x11028106	// 1fffa898 <check_before_startup+0x1c0>
1fffa894:	7834      	jmp      	r13
1fffa896:	6c03      	mov      	r0, r0
1fffa898:	8106      	ld.b      	r0, (r1, 0x6)
1fffa89a:	1102      	lrw      	r0, 0x2ea8d	// 1fffa920 <check_before_startup+0x248>
1fffa89c:	ea8d0002 	lrw      	r13, 0x68d8	// 1fffa8a4 <check_before_startup+0x1cc>
1fffa8a0:	7834      	jmp      	r13
1fffa8a2:	6c03      	mov      	r0, r0
1fffa8a4:	68d8      	and      	r3, r6
1fffa8a6:	0000      	bkpt
1fffa8a8:	ea8d0002 	lrw      	r13, 0x11025314	// 1fffa8b0 <check_before_startup+0x1d8>
1fffa8ac:	7834      	jmp      	r13
1fffa8ae:	6c03      	mov      	r0, r0
1fffa8b0:	5314      	asri      	r0, r3, 20
1fffa8b2:	1102      	lrw      	r0, 0x2ea8d	// 1fffa938 <check_before_startup+0x260>
1fffa8b4:	ea8d0002 	lrw      	r13, 0x4718	// 1fffa8bc <check_before_startup+0x1e4>
1fffa8b8:	7834      	jmp      	r13
1fffa8ba:	6c03      	mov      	r0, r0
1fffa8bc:	4718      	lsli      	r0, r7, 24
1fffa8be:	0000      	bkpt
1fffa8c0:	ea8d0002 	lrw      	r13, 0x10458	// 1fffa8c8 <check_before_startup+0x1f0>
1fffa8c4:	7834      	jmp      	r13
1fffa8c6:	6c03      	mov      	r0, r0
1fffa8c8:	0458      	br      	0x1fffa978	// 1fffa978 <check_before_startup+0x2a0>
1fffa8ca:	0001      	lrw      	r0, 0x6c037834	// 1fffacc0 <check_before_startup+0x5e8>
1fffa8cc:	ea8d0002 	lrw      	r13, 0x47c0	// 1fffa8d4 <check_before_startup+0x1fc>
1fffa8d0:	7834      	jmp      	r13
1fffa8d2:	6c03      	mov      	r0, r0
1fffa8d4:	47c0      	lsli      	r6, r7, 0
1fffa8d6:	0000      	bkpt
1fffa8d8:	ea8d0002 	lrw      	r13, 0x11025680	// 1fffa8e0 <check_before_startup+0x208>
1fffa8dc:	7834      	jmp      	r13
1fffa8de:	6c03      	mov      	r0, r0
1fffa8e0:	5680      	asri      	r4, r6, 0
1fffa8e2:	1102      	lrw      	r0, 0x2ea8d	// 1fffa968 <check_before_startup+0x290>
1fffa8e4:	ea8d0002 	lrw      	r13, 0x3d50	// 1fffa8ec <check_before_startup+0x214>
1fffa8e8:	7834      	jmp      	r13
1fffa8ea:	6c03      	mov      	r0, r0
1fffa8ec:	3d50      	cmpnei      	r5, 16
1fffa8ee:	0000      	bkpt
1fffa8f0:	ea8d0002 	lrw      	r13, 0xfc18	// 1fffa8f8 <check_before_startup+0x220>
1fffa8f4:	7834      	jmp      	r13
1fffa8f6:	6c03      	mov      	r0, r0
1fffa8f8:	fc180000 	cprgr      	r24, <0, 0>
1fffa8fc:	ea8d0002 	lrw      	r13, 0xede6	// 1fffa904 <check_before_startup+0x22c>
1fffa900:	7834      	jmp      	r13
1fffa902:	6c03      	mov      	r0, r0
1fffa904:	ede60000 	ori      	r15, r6, 0
1fffa908:	ea8d0002 	lrw      	r13, 0x57fc	// 1fffa910 <check_before_startup+0x238>
1fffa90c:	7834      	jmp      	r13
1fffa90e:	6c03      	mov      	r0, r0
1fffa910:	57fc      	asri      	r7, r7, 28
1fffa912:	0000      	bkpt
1fffa914:	ea8d0002 	lrw      	r13, 0xd41c	// 1fffa91c <check_before_startup+0x244>
1fffa918:	7834      	jmp      	r13
1fffa91a:	6c03      	mov      	r0, r0
1fffa91c:	d41c0000 	.long: 0xd41c0000
1fffa920:	ea8d0002 	lrw      	r13, 0xd368	// 1fffa928 <check_before_startup+0x250>
1fffa924:	7834      	jmp      	r13
1fffa926:	6c03      	mov      	r0, r0
1fffa928:	d3680000 	.long: 0xd3680000
1fffa92c:	ea8d0002 	lrw      	r13, 0xf1b0	// 1fffa934 <check_before_startup+0x25c>
1fffa930:	7834      	jmp      	r13
1fffa932:	6c03      	mov      	r0, r0
1fffa934:	f1b00000 	.long: 0xf1b00000
1fffa938:	ea8d0002 	lrw      	r13, 0x1102518c	// 1fffa940 <check_before_startup+0x268>
1fffa93c:	7834      	jmp      	r13
1fffa93e:	6c03      	mov      	r0, r0
1fffa940:	518c      	asri      	r4, r1, 12
1fffa942:	1102      	lrw      	r0, 0x2ea8d	// 1fffa9c8 <check_before_startup+0x2f0>
1fffa944:	ea8d0002 	lrw      	r13, 0x4850	// 1fffa94c <check_before_startup+0x274>
1fffa948:	7834      	jmp      	r13
1fffa94a:	6c03      	mov      	r0, r0
1fffa94c:	4850      	lsri      	r2, r0, 16
1fffa94e:	0000      	bkpt
1fffa950:	ea8d0002 	lrw      	r13, 0x46e8	// 1fffa958 <check_before_startup+0x280>
1fffa954:	7834      	jmp      	r13
1fffa956:	6c03      	mov      	r0, r0
1fffa958:	46e8      	lsli      	r7, r6, 8
1fffa95a:	0000      	bkpt
1fffa95c:	ea8d0002 	lrw      	r13, 0x45e4	// 1fffa964 <check_before_startup+0x28c>
1fffa960:	7834      	jmp      	r13
1fffa962:	6c03      	mov      	r0, r0
1fffa964:	45e4      	lsli      	r7, r5, 4
1fffa966:	0000      	bkpt
1fffa968:	ea8d0002 	lrw      	r13, 0x10408	// 1fffa970 <check_before_startup+0x298>
1fffa96c:	7834      	jmp      	r13
1fffa96e:	6c03      	mov      	r0, r0
1fffa970:	0408      	br      	0x1fffa980	// 1fffa980 <check_before_startup+0x2a8>
1fffa972:	0001      	lrw      	r0, 0x6c037834	// 1fffad68 <check_before_startup+0x690>
1fffa974:	ea8d0002 	lrw      	r13, 0xd4f4	// 1fffa97c <check_before_startup+0x2a4>
1fffa978:	7834      	jmp      	r13
1fffa97a:	6c03      	mov      	r0, r0
1fffa97c:	d4f40000 	.long: 0xd4f40000
1fffa980:	ea8d0002 	lrw      	r13, 0x31b0	// 1fffa988 <check_before_startup+0x2b0>
1fffa984:	7834      	jmp      	r13
1fffa986:	6c03      	mov      	r0, r0
1fffa988:	31b0      	movi      	r1, 176
1fffa98a:	0000      	bkpt
1fffa98c:	ea8d0002 	lrw      	r13, 0xe424	// 1fffa994 <check_before_startup+0x2bc>
1fffa990:	7834      	jmp      	r13
1fffa992:	6c03      	mov      	r0, r0
1fffa994:	e4240000 	addi      	r1, r4, 1
1fffa998:	ea8d0002 	lrw      	r13, 0x10bac	// 1fffa9a0 <check_before_startup+0x2c8>
1fffa99c:	7834      	jmp      	r13
1fffa99e:	6c03      	mov      	r0, r0
1fffa9a0:	0bac      	bt      	0x1fffa8f8	// 1fffa8f8 <check_before_startup+0x220>
1fffa9a2:	0001      	lrw      	r0, 0x6c037834	// 1fffad98 <check_before_startup+0x6c0>
1fffa9a4:	ea8d0002 	lrw      	r13, 0xd45a	// 1fffa9ac <check_before_startup+0x2d4>
1fffa9a8:	7834      	jmp      	r13
1fffa9aa:	6c03      	mov      	r0, r0
1fffa9ac:	d45a0000 	.long: 0xd45a0000
1fffa9b0:	ea8d0002 	lrw      	r13, 0x11023a8c	// 1fffa9b8 <check_before_startup+0x2e0>
1fffa9b4:	7834      	jmp      	r13
1fffa9b6:	6c03      	mov      	r0, r0
1fffa9b8:	3a8c      	bclri      	r2, 12
1fffa9ba:	1102      	lrw      	r0, 0x2ea8d	// 1fffaa40 <check_before_startup+0x368>
1fffa9bc:	ea8d0002 	lrw      	r13, 0x1101ba98	// 1fffa9c4 <check_before_startup+0x2ec>
1fffa9c0:	7834      	jmp      	r13
1fffa9c2:	6c03      	mov      	r0, r0
1fffa9c4:	ba98      	st.w      	r4, (r14, 0x160)
1fffa9c6:	1101      	lrw      	r0, 0x47d8	// 1fffaa48 <check_before_startup+0x370>
1fffa9c8:	ea8d0002 	lrw      	r13, 0x110216e0	// 1fffa9d0 <check_before_startup+0x2f8>
1fffa9cc:	7834      	jmp      	r13
1fffa9ce:	6c03      	mov      	r0, r0
1fffa9d0:	16e0      	.long: 0x000016e0
1fffa9d2:	1102      	lrw      	r0, 0x2ea8d	// 1fffaa58 <check_before_startup+0x380>
1fffa9d4:	ea8d0002 	lrw      	r13, 0x11578	// 1fffa9dc <check_before_startup+0x304>
1fffa9d8:	7834      	jmp      	r13
1fffa9da:	6c03      	mov      	r0, r0
1fffa9dc:	1578      	.long: 0x00001578
1fffa9de:	0001      	lrw      	r0, 0x6c037834	// 1fffadd4 <check_before_startup+0x6fc>
1fffa9e0:	ea8d0002 	lrw      	r13, 0x54bc	// 1fffa9e8 <check_before_startup+0x310>
1fffa9e4:	7834      	jmp      	r13
1fffa9e6:	6c03      	mov      	r0, r0
1fffa9e8:	54bc      	asri      	r5, r4, 28
1fffa9ea:	0000      	bkpt
1fffa9ec:	ea8d0002 	lrw      	r13, 0x6a0c	// 1fffa9f4 <check_before_startup+0x31c>
1fffa9f0:	7834      	jmp      	r13
1fffa9f2:	6c03      	mov      	r0, r0
1fffa9f4:	6a0c      	and      	r8, r3
1fffa9f6:	0000      	bkpt
1fffa9f8:	ea8d0002 	lrw      	r13, 0x45cc	// 1fffaa00 <check_before_startup+0x328>
1fffa9fc:	7834      	jmp      	r13
1fffa9fe:	6c03      	mov      	r0, r0
1fffaa00:	45cc      	lsli      	r6, r5, 12
1fffaa02:	0000      	bkpt
1fffaa04:	ea8d0002 	lrw      	r13, 0x6c58	// 1fffaa0c <check_before_startup+0x334>
1fffaa08:	7834      	jmp      	r13
1fffaa0a:	6c03      	mov      	r0, r0
1fffaa0c:	6c58      	or      	r1, r6
1fffaa0e:	0000      	bkpt
1fffaa10:	ea8d0002 	lrw      	r13, 0x11021a84	// 1fffaa18 <check_before_startup+0x340>
1fffaa14:	7834      	jmp      	r13
1fffaa16:	6c03      	mov      	r0, r0
1fffaa18:	1a84      	addi      	r2, r14, 528
1fffaa1a:	1102      	lrw      	r0, 0x2ea8d	// 1fffaaa0 <check_before_startup+0x3c8>
1fffaa1c:	ea8d0002 	lrw      	r13, 0x10450	// 1fffaa24 <check_before_startup+0x34c>
1fffaa20:	7834      	jmp      	r13
1fffaa22:	6c03      	mov      	r0, r0
1fffaa24:	0450      	br      	0x1fffaac4	// 1fffaac4 <check_before_startup+0x3ec>
1fffaa26:	0001      	lrw      	r0, 0x6c037834	// 1fffae1c <check_before_startup+0x744>
1fffaa28:	ea8d0002 	lrw      	r13, 0xfda4	// 1fffaa30 <check_before_startup+0x358>
1fffaa2c:	7834      	jmp      	r13
1fffaa2e:	6c03      	mov      	r0, r0
1fffaa30:	fda40000 	cprgr      	r4, <13, 0>
1fffaa34:	ea8d0002 	lrw      	r13, 0x110231cc	// 1fffaa3c <check_before_startup+0x364>
1fffaa38:	7834      	jmp      	r13
1fffaa3a:	6c03      	mov      	r0, r0
1fffaa3c:	31cc      	movi      	r1, 204
1fffaa3e:	1102      	lrw      	r0, 0x2ea8d	// 1fffaac4 <check_before_startup+0x3ec>
1fffaa40:	ea8d0002 	lrw      	r13, 0x47d8	// 1fffaa48 <check_before_startup+0x370>
1fffaa44:	7834      	jmp      	r13
1fffaa46:	6c03      	mov      	r0, r0
1fffaa48:	47d8      	lsli      	r6, r7, 24
1fffaa4a:	0000      	bkpt
1fffaa4c:	ea8d0002 	lrw      	r13, 0x11021a28	// 1fffaa54 <check_before_startup+0x37c>
1fffaa50:	7834      	jmp      	r13
1fffaa52:	6c03      	mov      	r0, r0
1fffaa54:	1a28      	addi      	r2, r14, 160
1fffaa56:	1102      	lrw      	r0, 0x2ea8d	// 1fffaadc <check_before_startup+0x404>
1fffaa58:	ea8d0002 	lrw      	r13, 0xf95c	// 1fffaa60 <check_before_startup+0x388>
1fffaa5c:	7834      	jmp      	r13
1fffaa5e:	6c03      	mov      	r0, r0
1fffaa60:	f95c0000 	.long: 0xf95c0000
1fffaa64:	ea8d0002 	lrw      	r13, 0x1102206c	// 1fffaa6c <check_before_startup+0x394>
1fffaa68:	7834      	jmp      	r13
1fffaa6a:	6c03      	mov      	r0, r0
1fffaa6c:	206c      	addi      	r0, 109
1fffaa6e:	1102      	lrw      	r0, 0x2ea8d	// 1fffaaf4 <check_before_startup+0x41c>
1fffaa70:	ea8d0002 	lrw      	r13, 0x48d4	// 1fffaa78 <check_before_startup+0x3a0>
1fffaa74:	7834      	jmp      	r13
1fffaa76:	6c03      	mov      	r0, r0
1fffaa78:	48d4      	lsri      	r6, r0, 20
1fffaa7a:	0000      	bkpt
1fffaa7c:	ea8d0002 	lrw      	r13, 0x47f0	// 1fffaa84 <check_before_startup+0x3ac>
1fffaa80:	7834      	jmp      	r13
1fffaa82:	6c03      	mov      	r0, r0
1fffaa84:	47f0      	lsli      	r7, r7, 16
1fffaa86:	0000      	bkpt
1fffaa88:	ea8d0002 	lrw      	r13, 0x1101b9fc	// 1fffaa90 <check_before_startup+0x3b8>
1fffaa8c:	7834      	jmp      	r13
1fffaa8e:	6c03      	mov      	r0, r0
1fffaa90:	b9fc      	st.w      	r7, (r14, 0xf0)
1fffaa92:	1101      	lrw      	r0, 0x10c00	// 1fffab14 <check_before_startup+0x43c>
1fffaa94:	ea8d0002 	lrw      	r13, 0xfd84	// 1fffaa9c <check_before_startup+0x3c4>
1fffaa98:	7834      	jmp      	r13
1fffaa9a:	6c03      	mov      	r0, r0
1fffaa9c:	fd840000 	cprgr      	r4, <12, 0>
1fffaaa0:	ea8d0002 	lrw      	r13, 0x110230a0	// 1fffaaa8 <check_before_startup+0x3d0>
1fffaaa4:	7834      	jmp      	r13
1fffaaa6:	6c03      	mov      	r0, r0
1fffaaa8:	30a0      	movi      	r0, 160
1fffaaaa:	1102      	lrw      	r0, 0x2ea8d	// 1fffab30 <check_before_startup+0x458>
1fffaaac:	ea8d0002 	lrw      	r13, 0xf354	// 1fffaab4 <check_before_startup+0x3dc>
1fffaab0:	7834      	jmp      	r13
1fffaab2:	6c03      	mov      	r0, r0
1fffaab4:	f3540000 	.long: 0xf3540000
1fffaab8:	ea8d0002 	lrw      	r13, 0x104d4	// 1fffaac0 <check_before_startup+0x3e8>
1fffaabc:	7834      	jmp      	r13
1fffaabe:	6c03      	mov      	r0, r0
1fffaac0:	04d4      	br      	0x1fffac68	// 1fffac68 <check_before_startup+0x590>
1fffaac2:	0001      	lrw      	r0, 0x0	// 1fffaeb8 <check_before_startup+0x7e0>
1fffaac4:	ea8d0002 	lrw      	r13, 0xfc88	// 1fffaacc <check_before_startup+0x3f4>
1fffaac8:	7834      	jmp      	r13
1fffaaca:	6c03      	mov      	r0, r0
1fffaacc:	fc880000 	cprgr      	r8, <4, 0>
1fffaad0:	ea8d0002 	lrw      	r13, 0x11022d1a	// 1fffaad8 <check_before_startup+0x400>
1fffaad4:	7834      	jmp      	r13
1fffaad6:	6c03      	mov      	r0, r0
1fffaad8:	2d1a      	subi      	r5, 27
1fffaada:	1102      	lrw      	r0, 0x2ea8d	// 1fffab60 <check_before_startup+0x488>
1fffaadc:	ea8d0002 	lrw      	r13, 0x5168	// 1fffaae4 <check_before_startup+0x40c>
1fffaae0:	7834      	jmp      	r13
1fffaae2:	6c03      	mov      	r0, r0
1fffaae4:	5168      	asri      	r3, r1, 8
1fffaae6:	0000      	bkpt
1fffaae8:	ea8d0002 	lrw      	r13, 0x10be4	// 1fffaaf0 <check_before_startup+0x418>
1fffaaec:	7834      	jmp      	r13
1fffaaee:	6c03      	mov      	r0, r0
1fffaaf0:	0be4      	bt      	0x1fffaab8	// 1fffaab8 <check_before_startup+0x3e0>
1fffaaf2:	0001      	lrw      	r0, 0x0	// 1fffaee8 <check_before_startup+0x810>
1fffaaf4:	ea8d0002 	lrw      	r13, 0xe7bc	// 1fffaafc <check_before_startup+0x424>
1fffaaf8:	7834      	jmp      	r13
1fffaafa:	6c03      	mov      	r0, r0
1fffaafc:	e7bc0000 	addi      	r29, r28, 1
1fffab00:	ea8d0002 	lrw      	r13, 0x11021688	// 1fffab08 <check_before_startup+0x430>
1fffab04:	7834      	jmp      	r13
1fffab06:	6c03      	mov      	r0, r0
1fffab08:	1688      	.long: 0x00001688
1fffab0a:	1102      	lrw      	r0, 0x2ea8d	// 1fffab90 <check_before_startup+0x4b8>
1fffab0c:	ea8d0002 	lrw      	r13, 0x10c00	// 1fffab14 <check_before_startup+0x43c>
1fffab10:	7834      	jmp      	r13
1fffab12:	6c03      	mov      	r0, r0
1fffab14:	0c00      	bf      	0x1fffab14	// 1fffab14 <check_before_startup+0x43c>
1fffab16:	0001      	lrw      	r0, 0x0	// 1fffaf0c <check_before_startup+0x834>
1fffab18:	ea8d0002 	lrw      	r13, 0x5a00	// 1fffab20 <check_before_startup+0x448>
1fffab1c:	7834      	jmp      	r13
1fffab1e:	6c03      	mov      	r0, r0
1fffab20:	5a00      	addu      	r0, r2, r0
1fffab22:	0000      	bkpt
1fffab24:	ea8d0002 	lrw      	r13, 0x11dac	// 1fffab2c <check_before_startup+0x454>
1fffab28:	7834      	jmp      	r13
1fffab2a:	6c03      	mov      	r0, r0
1fffab2c:	1dac      	addi      	r5, r14, 688
1fffab2e:	0001      	lrw      	r0, 0x0	// 1fffaf24 <check_before_startup+0x84c>
1fffab30:	ea8d0002 	lrw      	r13, 0x11027f36	// 1fffab38 <check_before_startup+0x460>
1fffab34:	7834      	jmp      	r13
1fffab36:	6c03      	mov      	r0, r0
1fffab38:	7f36      	.long: 0x00007f36
1fffab3a:	1102      	lrw      	r0, 0x2ea8d	// 1fffabc0 <check_before_startup+0x4e8>
1fffab3c:	ea8d0002 	lrw      	r13, 0x10bc8	// 1fffab44 <check_before_startup+0x46c>
1fffab40:	7834      	jmp      	r13
1fffab42:	6c03      	mov      	r0, r0
1fffab44:	0bc8      	bt      	0x1fffaad4	// 1fffaad4 <check_before_startup+0x3fc>
1fffab46:	0001      	lrw      	r0, 0x0	// 1fffaf3c <check_before_startup+0x864>
1fffab48:	ea8d0002 	lrw      	r13, 0x1102847c	// 1fffab50 <check_before_startup+0x478>
1fffab4c:	7834      	jmp      	r13
1fffab4e:	6c03      	mov      	r0, r0
1fffab50:	847c      	ld.b      	r3, (r4, 0x1c)
1fffab52:	1102      	lrw      	r0, 0x2ea8d	// 1fffabd8 <check_before_startup+0x500>
1fffab54:	ea8d0002 	lrw      	r13, 0x4448	// 1fffab5c <check_before_startup+0x484>
1fffab58:	7834      	jmp      	r13
1fffab5a:	6c03      	mov      	r0, r0
1fffab5c:	4448      	lsli      	r2, r4, 8
1fffab5e:	0000      	bkpt
1fffab60:	ea8d0002 	lrw      	r13, 0xfc60	// 1fffab68 <check_before_startup+0x490>
1fffab64:	7834      	jmp      	r13
1fffab66:	6c03      	mov      	r0, r0
1fffab68:	fc600000 	cprgr      	r0, <3, 0>
1fffab6c:	ea8d0002 	lrw      	r13, 0x115d4	// 1fffab74 <check_before_startup+0x49c>
1fffab70:	7834      	jmp      	r13
1fffab72:	6c03      	mov      	r0, r0
1fffab74:	15d4      	.long: 0x000015d4
1fffab76:	0001      	lrw      	r0, 0x0	// 1fffaf6c <check_before_startup+0x894>
1fffab78:	ea8d0002 	lrw      	r13, 0x6c02	// 1fffab80 <check_before_startup+0x4a8>
1fffab7c:	7834      	jmp      	r13
1fffab7e:	6c03      	mov      	r0, r0
1fffab80:	6c02      	nor      	r0, r0
1fffab82:	0000      	bkpt
1fffab84:	ea8d0002 	lrw      	r13, 0x3f88	// 1fffab8c <check_before_startup+0x4b4>
1fffab88:	7834      	jmp      	r13
1fffab8a:	6c03      	mov      	r0, r0
1fffab8c:	3f88      	bclri      	r7, 8
1fffab8e:	0000      	bkpt
1fffab90:	ea8d0002 	lrw      	r13, 0x5e20	// 1fffab98 <check_before_startup+0x4c0>
1fffab94:	7834      	jmp      	r13
1fffab96:	6c03      	mov      	r0, r0
1fffab98:	5e20      	addu      	r1, r6, r0
1fffab9a:	0000      	bkpt
1fffab9c:	ea8d0002 	lrw      	r13, 0xd748	// 1fffaba4 <check_before_startup+0x4cc>
1fffaba0:	7834      	jmp      	r13
1fffaba2:	6c03      	mov      	r0, r0
1fffaba4:	d7480000 	.long: 0xd7480000
1fffaba8:	ea8d0002 	lrw      	r13, 0x4904	// 1fffabb0 <check_before_startup+0x4d8>
1fffabac:	7834      	jmp      	r13
1fffabae:	6c03      	mov      	r0, r0
1fffabb0:	4904      	lsri      	r0, r1, 4
1fffabb2:	0000      	bkpt
1fffabb4:	ea8d0002 	lrw      	r13, 0xf0ec	// 1fffabbc <check_before_startup+0x4e4>
1fffabb8:	7834      	jmp      	r13
1fffabba:	6c03      	mov      	r0, r0
1fffabbc:	f0ec0000 	.long: 0xf0ec0000
1fffabc0:	ea8d0002 	lrw      	r13, 0x10104	// 1fffabc8 <check_before_startup+0x4f0>
1fffabc4:	7834      	jmp      	r13
1fffabc6:	6c03      	mov      	r0, r0
1fffabc8:	0104      	lrw      	r0, 0x0	// 1fffaf34 <check_before_startup+0x85c>
1fffabca:	0001      	lrw      	r0, 0x0	// 1fffafc0 <check_before_startup+0x8e8>
1fffabcc:	ea8d0002 	lrw      	r13, 0x8c70	// 1fffabd4 <check_before_startup+0x4fc>
1fffabd0:	7834      	jmp      	r13
1fffabd2:	6c03      	mov      	r0, r0
1fffabd4:	8c70      	ld.h      	r3, (r4, 0x20)
1fffabd6:	0000      	bkpt
1fffabd8:	ea8d0002 	lrw      	r13, 0x110230f4	// 1fffabe0 <check_before_startup+0x508>
1fffabdc:	7834      	jmp      	r13
1fffabde:	6c03      	mov      	r0, r0
1fffabe0:	30f4      	movi      	r0, 244
1fffabe2:	1102      	lrw      	r0, 0x2ea8d	// 1fffac68 <check_before_startup+0x590>
1fffabe4:	ea8d0002 	lrw      	r13, 0x42e0	// 1fffabec <check_before_startup+0x514>
1fffabe8:	7834      	jmp      	r13
1fffabea:	6c03      	mov      	r0, r0
1fffabec:	42e0      	lsli      	r7, r2, 0
1fffabee:	0000      	bkpt
1fffabf0:	ea8d0002 	lrw      	r13, 0x4808	// 1fffabf8 <check_before_startup+0x520>
1fffabf4:	7834      	jmp      	r13
1fffabf6:	6c03      	mov      	r0, r0
1fffabf8:	4808      	lsri      	r0, r0, 8
1fffabfa:	0000      	bkpt
1fffabfc:	ea8d0002 	lrw      	r13, 0x10524	// 1fffac04 <check_before_startup+0x52c>
1fffac00:	7834      	jmp      	r13
1fffac02:	6c03      	mov      	r0, r0
1fffac04:	0524      	br      	0x1fffae4c	// 1fffae4c <check_before_startup+0x774>
1fffac06:	0001      	lrw      	r0, 0x0	// 1fffaffc <check_before_startup+0x924>
1fffac08:	ea8d0002 	lrw      	r13, 0x104b8	// 1fffac10 <check_before_startup+0x538>
1fffac0c:	7834      	jmp      	r13
1fffac0e:	6c03      	mov      	r0, r0
1fffac10:	04b8      	br      	0x1fffad80	// 1fffad80 <check_before_startup+0x6a8>
1fffac12:	0001      	lrw      	r0, 0x0	// 1fffb008 <check_before_startup+0x930>
1fffac14:	ea8d0002 	lrw      	r13, 0xfd58	// 1fffac1c <check_before_startup+0x544>
1fffac18:	7834      	jmp      	r13
1fffac1a:	6c03      	mov      	r0, r0
1fffac1c:	fd580000 	cprgr      	r24, <10, 0>
1fffac20:	ea8d0002 	lrw      	r13, 0x899c	// 1fffac28 <check_before_startup+0x550>
1fffac24:	7834      	jmp      	r13
1fffac26:	6c03      	mov      	r0, r0
1fffac28:	899c      	ld.h      	r4, (r1, 0x38)
1fffac2a:	0000      	bkpt
1fffac2c:	ea8d0002 	lrw      	r13, 0xfc00	// 1fffac34 <check_before_startup+0x55c>
1fffac30:	7834      	jmp      	r13
1fffac32:	6c03      	mov      	r0, r0
1fffac34:	fc000000 	cprgr      	r0, <0, 0>
1fffac38:	ea8d0002 	lrw      	r13, 0xd8a0	// 1fffac40 <check_before_startup+0x568>
1fffac3c:	7834      	jmp      	r13
1fffac3e:	6c03      	mov      	r0, r0
1fffac40:	d8a00000 	ld.b      	r5, (r0, 0x0)
1fffac44:	ea8d0002 	lrw      	r13, 0x5138	// 1fffac4c <check_before_startup+0x574>
1fffac48:	7834      	jmp      	r13
1fffac4a:	6c03      	mov      	r0, r0
1fffac4c:	5138      	asri      	r1, r1, 24
1fffac4e:	0000      	bkpt
1fffac50:	ea8d0002 	lrw      	r13, 0x12814	// 1fffac58 <check_before_startup+0x580>
1fffac54:	7834      	jmp      	r13
1fffac56:	6c03      	mov      	r0, r0
1fffac58:	2814      	subi      	r0, 21
1fffac5a:	0001      	lrw      	r0, 0x0	// 1fffb050 <check_before_startup+0x978>
1fffac5c:	ea8d0002 	lrw      	r13, 0x65b0	// 1fffac64 <check_before_startup+0x58c>
1fffac60:	7834      	jmp      	r13
1fffac62:	6c03      	mov      	r0, r0
1fffac64:	65b0      	cmphs      	r12, r6
1fffac66:	0000      	bkpt
1fffac68:	ea8d0002 	lrw      	r13, 0xdba8	// 1fffac70 <check_before_startup+0x598>
1fffac6c:	7834      	jmp      	r13
1fffac6e:	6c03      	mov      	r0, r0
1fffac70:	dba80000 	ld.b      	r29, (r8, 0x0)
1fffac74:	ea8d0002 	lrw      	r13, 0x11025eb8	// 1fffac7c <check_before_startup+0x5a4>
1fffac78:	7834      	jmp      	r13
1fffac7a:	6c03      	mov      	r0, r0
1fffac7c:	5eb8      	addu      	r5, r6, r6
1fffac7e:	1102      	lrw      	r0, 0x2ea8d	// 1fffad04 <check_before_startup+0x62c>
1fffac80:	ea8d0002 	lrw      	r13, 0x569e	// 1fffac88 <check_before_startup+0x5b0>
1fffac84:	7834      	jmp      	r13
1fffac86:	6c03      	mov      	r0, r0
1fffac88:	569e      	asri      	r4, r6, 30
1fffac8a:	0000      	bkpt
1fffac8c:	ea8d0002 	lrw      	r13, 0x4358	// 1fffac94 <check_before_startup+0x5bc>
1fffac90:	7834      	jmp      	r13
1fffac92:	6c03      	mov      	r0, r0
1fffac94:	4358      	lsli      	r2, r3, 24
1fffac96:	0000      	bkpt
1fffac98:	ea8d0002 	lrw      	r13, 0x30b8	// 1fffaca0 <check_before_startup+0x5c8>
1fffac9c:	7834      	jmp      	r13
1fffac9e:	6c03      	mov      	r0, r0
1fffaca0:	30b8      	movi      	r0, 184
1fffaca2:	0000      	bkpt
1fffaca4:	ea8d0002 	lrw      	r13, 0xfd4c	// 1fffacac <check_before_startup+0x5d4>
1fffaca8:	7834      	jmp      	r13
1fffacaa:	6c03      	mov      	r0, r0
1fffacac:	fd4c0000 	cprgr      	r12, <10, 0>
1fffacb0:	ea8d0002 	lrw      	r13, 0x45b4	// 1fffacb8 <check_before_startup+0x5e0>
1fffacb4:	7834      	jmp      	r13
1fffacb6:	6c03      	mov      	r0, r0
1fffacb8:	45b4      	lsli      	r5, r5, 20
1fffacba:	0000      	bkpt
1fffacbc:	ea8d0002 	lrw      	r13, 0xe2c0	// 1fffacc4 <check_before_startup+0x5ec>
1fffacc0:	7834      	jmp      	r13
1fffacc2:	6c03      	mov      	r0, r0
1fffacc4:	e2c00000 	bsr      	0x1d7facc4	// 1d7facc4 <__etext+0xc7d1564>
1fffacc8:	ea8d0002 	lrw      	r13, 0x11020478	// 1fffacd0 <check_before_startup+0x5f8>
1fffaccc:	7834      	jmp      	r13
1fffacce:	6c03      	mov      	r0, r0
1fffacd0:	0478      	br      	0x1fffadc0	// 1fffadc0 <check_before_startup+0x6e8>
1fffacd2:	1102      	lrw      	r0, 0x2ea8d	// 1fffad58 <check_before_startup+0x680>
1fffacd4:	ea8d0002 	lrw      	r13, 0xffd4	// 1fffacdc <check_before_startup+0x604>
1fffacd8:	7834      	jmp      	r13
1fffacda:	6c03      	mov      	r0, r0
1fffacdc:	ffd40000 	cprgr      	r20, <30, 0>
1ffface0:	ea8d0002 	lrw      	r13, 0x3050	// 1ffface8 <check_before_startup+0x610>
1ffface4:	7834      	jmp      	r13
1ffface6:	6c03      	mov      	r0, r0
1ffface8:	3050      	movi      	r0, 80
1fffacea:	0000      	bkpt
1fffacec:	ea8d0002 	lrw      	r13, 0x109c4	// 1fffacf4 <check_before_startup+0x61c>
1fffacf0:	7834      	jmp      	r13
1fffacf2:	6c03      	mov      	r0, r0
1fffacf4:	09c4      	bt      	0x1fffb07c	// 1fffb07c <check_before_startup+0x9a4>
1fffacf6:	0001      	lrw      	r0, [pc, 1016]	// from address pool at 0x1fffb0ec
1fffacf8:	ea8d0002 	lrw      	r13, 0x10b48	// 1fffad00 <check_before_startup+0x628>
1fffacfc:	7834      	jmp      	r13
1fffacfe:	6c03      	mov      	r0, r0
1fffad00:	0b48      	bt      	0x1fffab90	// 1fffab90 <check_before_startup+0x4b8>
1fffad02:	0001      	lrw      	r0, [pc, 1016]	// from address pool at 0x1fffb0f8
1fffad04:	ea8d0002 	lrw      	r13, 0x48ec	// 1fffad0c <check_before_startup+0x634>
1fffad08:	7834      	jmp      	r13
1fffad0a:	6c03      	mov      	r0, r0
1fffad0c:	48ec      	lsri      	r7, r0, 12
1fffad0e:	0000      	bkpt
1fffad10:	ea8d0002 	lrw      	r13, 0xd7ec	// 1fffad18 <check_before_startup+0x640>
1fffad14:	7834      	jmp      	r13
1fffad16:	6c03      	mov      	r0, r0
1fffad18:	d7ec0000 	.long: 0xd7ec0000
1fffad1c:	ea8d0002 	lrw      	r13, 0x5ef8	// 1fffad24 <check_before_startup+0x64c>
1fffad20:	7834      	jmp      	r13
1fffad22:	6c03      	mov      	r0, r0
1fffad24:	5ef8      	addu      	r7, r6, r6
1fffad26:	0000      	bkpt
1fffad28:	ea8d0002 	lrw      	r13, 0x1102862c	// 1fffad30 <check_before_startup+0x658>
1fffad2c:	7834      	jmp      	r13
1fffad2e:	6c03      	mov      	r0, r0
1fffad30:	862c      	ld.b      	r1, (r6, 0xc)
1fffad32:	1102      	lrw      	r0, 0x2ea8d	// 1fffadb8 <check_before_startup+0x6e0>
1fffad34:	ea8d0002 	lrw      	r13, 0x10b6c	// 1fffad3c <check_before_startup+0x664>
1fffad38:	7834      	jmp      	r13
1fffad3a:	6c03      	mov      	r0, r0
1fffad3c:	0b6c      	bt      	0x1fffac14	// 1fffac14 <check_before_startup+0x53c>
1fffad3e:	0001      	lrw      	r0, [pc, 1016]	// from address pool at 0x1fffb134
1fffad40:	ea8d0002 	lrw      	r13, 0xfc74	// 1fffad48 <check_before_startup+0x670>
1fffad44:	7834      	jmp      	r13
1fffad46:	6c03      	mov      	r0, r0
1fffad48:	fc740000 	cprgr      	r20, <3, 0>
1fffad4c:	ea8d0002 	lrw      	r13, 0x4554	// 1fffad54 <check_before_startup+0x67c>
1fffad50:	7834      	jmp      	r13
1fffad52:	6c03      	mov      	r0, r0
1fffad54:	4554      	lsli      	r2, r5, 20
1fffad56:	0000      	bkpt
1fffad58:	ea8d0002 	lrw      	r13, 0x10b90	// 1fffad60 <check_before_startup+0x688>
1fffad5c:	7834      	jmp      	r13
1fffad5e:	6c03      	mov      	r0, r0
1fffad60:	0b90      	bt      	0x1fffac80	// 1fffac80 <check_before_startup+0x5a8>
1fffad62:	0001      	lrw      	r0, [pc, 1016]	// from address pool at 0x1fffb158
1fffad64:	ea8d0002 	lrw      	r13, 0x10150	// 1fffad6c <check_before_startup+0x694>
1fffad68:	7834      	jmp      	r13
1fffad6a:	6c03      	mov      	r0, r0
1fffad6c:	0150      	lrw      	r2, [pc, 828]	// from address pool at 0x1fffb0a8
1fffad6e:	0001      	lrw      	r0, [pc, 1016]	// from address pool at 0x1fffb164
1fffad70:	ea8d0002 	lrw      	r13, 0xf248	// 1fffad78 <check_before_startup+0x6a0>
1fffad74:	7834      	jmp      	r13
1fffad76:	6c03      	mov      	r0, r0
1fffad78:	f2480000 	.long: 0xf2480000
1fffad7c:	ea8d0002 	lrw      	r13, 0x11025750	// 1fffad84 <check_before_startup+0x6ac>
1fffad80:	7834      	jmp      	r13
1fffad82:	6c03      	mov      	r0, r0
1fffad84:	5750      	asri      	r2, r7, 16
1fffad86:	1102      	lrw      	r0, 0x2ea8d	// 1fffae0c <check_before_startup+0x734>
1fffad88:	ea8d0002 	lrw      	r13, 0x47a8	// 1fffad90 <check_before_startup+0x6b8>
1fffad8c:	7834      	jmp      	r13
1fffad8e:	6c03      	mov      	r0, r0
1fffad90:	47a8      	lsli      	r5, r7, 8
1fffad92:	0000      	bkpt
1fffad94:	ea8d0002 	lrw      	r13, 0x11025378	// 1fffad9c <check_before_startup+0x6c4>
1fffad98:	7834      	jmp      	r13
1fffad9a:	6c03      	mov      	r0, r0
1fffad9c:	5378      	asri      	r3, r3, 24
1fffad9e:	1102      	lrw      	r0, 0x0	// 1fffae24 <check_before_startup+0x74c>
1fffada0:	ea8d0002 	lrw      	r13, 0x59e0	// 1fffada8 <check_before_startup+0x6d0>
1fffada4:	7834      	jmp      	r13
1fffada6:	6c03      	mov      	r0, r0
1fffada8:	59e0      	addu      	r7, r1, r0
1fffadaa:	0000      	bkpt
1fffadac:	ea8d0002 	lrw      	r13, 0x8060	// 1fffadb4 <check_before_startup+0x6dc>
1fffadb0:	7834      	jmp      	r13
1fffadb2:	6c03      	mov      	r0, r0
1fffadb4:	8060      	ld.b      	r3, (r0, 0x0)
1fffadb6:	0000      	bkpt
1fffadb8:	ea8d0002 	lrw      	r13, 0x3df8	// 1fffadc0 <check_before_startup+0x6e8>
1fffadbc:	7834      	jmp      	r13
1fffadbe:	6c03      	mov      	r0, r0
1fffadc0:	3df8      	.long: 0x00003df8
1fffadc2:	0000      	bkpt
1fffadc4:	ea8d0002 	lrw      	r13, 0x1101b990	// 1fffadcc <check_before_startup+0x6f4>
1fffadc8:	7834      	jmp      	r13
1fffadca:	6c03      	mov      	r0, r0
1fffadcc:	b990      	st.w      	r4, (r14, 0xc0)
1fffadce:	1101      	lrw      	r0, 0x0	// 1fffae50 <check_before_startup+0x778>
1fffadd0:	ea8d0002 	lrw      	r13, 0x3cd8	// 1fffadd8 <check_before_startup+0x700>
1fffadd4:	7834      	jmp      	r13
1fffadd6:	6c03      	mov      	r0, r0
1fffadd8:	3cd8      	btsti      	r4, 24
1fffadda:	0000      	bkpt
1fffaddc:	ea8d0002 	lrw      	r13, 0x11430	// 1fffade4 <check_before_startup+0x70c>
1fffade0:	7834      	jmp      	r13
1fffade2:	6c03      	mov      	r0, r0
1fffade4:	1430      	subi      	r14, r14, 64
1fffade6:	0001      	lrw      	r0, [pc, 1016]	// from address pool at 0x1fffb1dc
1fffade8:	ea8d0002 	lrw      	r13, 0x1101ccb8	// 1fffadf0 <check_before_startup+0x718>
1fffadec:	7834      	jmp      	r13
1fffadee:	6c03      	mov      	r0, r0
1fffadf0:	ccb81101 	.long: 0xccb81101
1fffadf4:	ea8d0002 	lrw      	r13, 0x11021b5c	// 1fffadfc <check_before_startup+0x724>
1fffadf8:	7834      	jmp      	r13
1fffadfa:	6c03      	mov      	r0, r0
1fffadfc:	1b5c      	addi      	r3, r14, 368
1fffadfe:	1102      	lrw      	r0, 0x0	// 1fffae84 <check_before_startup+0x7ac>
1fffae00:	ea8d0002 	lrw      	r13, 0x57f0	// 1fffae08 <check_before_startup+0x730>
1fffae04:	7834      	jmp      	r13
1fffae06:	6c03      	mov      	r0, r0
1fffae08:	57f0      	asri      	r7, r7, 16
1fffae0a:	0000      	bkpt
1fffae0c:	ea8d0002 	lrw      	r13, 0xf214	// 1fffae14 <check_before_startup+0x73c>
1fffae10:	7834      	jmp      	r13
1fffae12:	6c03      	mov      	r0, r0
1fffae14:	f2140000 	.long: 0xf2140000
1fffae18:	ea8d0002 	lrw      	r13, 0x5900	// 1fffae20 <check_before_startup+0x748>
1fffae1c:	7834      	jmp      	r13
1fffae1e:	6c03      	mov      	r0, r0
1fffae20:	5900      	addu      	r0, r1, r0
	...

Disassembly of section .text:

1101b908 <__stext>:
1101b908:	b90c      	st.w      	r0, (r14, 0xb0)
1101b90a:	1101      	.short	0x1101

1101b90c <Reset_Handler>:
1101b90c:	100c      	lrw      	r0, 0x80000200	// 1101b93c <.Data_copy_firset_done+0xa>
1101b90e:	c0006420 	mtcr      	r0, cr<0, 0>
1101b912:	100c      	lrw      	r0, 0x1fff0d88	// 1101b940 <.Data_copy_firset_done+0xe>
1101b914:	6f83      	mov      	r14, r0
1101b916:	102c      	lrw      	r1, 0x1fff1a40	// 1101b944 <.Data_copy_firset_done+0x12>
1101b918:	104c      	lrw      	r2, 0x1fffa680	// 1101b948 <.Data_copy_firset_done+0x16>
1101b91a:	106d      	lrw      	r3, 0x110122b8	// 1101b94c <.Data_copy_firset_done+0x1a>
1101b91c:	6086      	subu      	r2, r1
1101b91e:	5b28      	addu      	r1, r3, r2
1101b920:	104c      	lrw      	r2, 0x1fffa680	// 1101b950 <.Data_copy_firset_done+0x1e>
1101b922:	106d      	lrw      	r3, 0x1fffb090	// 1101b954 <.Data_copy_firset_done+0x22>
1101b924:	60ca      	subu      	r3, r2
1101b926:	3b40      	cmpnei      	r3, 0
1101b928:	0c05      	bf      	0x1101b932	// 1101b932 <.Data_copy_firset_done>
1101b92a:	6c0b      	mov      	r0, r2
1101b92c:	6c8f      	mov      	r2, r3
1101b92e:	106b      	lrw      	r3, 0x5e20	// 1101b958 <.Data_copy_firset_done+0x26>
1101b930:	7bcd      	jsr      	r3

1101b932 <.Data_copy_firset_done>:
1101b932:	e0006a51 	bsr      	0x11028dd4	// 11028dd4 <cpu_task_stack_init+0x42c>
1101b936:	e0006c47 	bsr      	0x110291c4	// 110291c4 <cpu_task_stack_init+0x81c>
1101b93a:	0000      	.short	0x0000
1101b93c:	80000200 	.long	0x80000200
1101b940:	1fff0d88 	.long	0x1fff0d88
1101b944:	1fff1a40 	.long	0x1fff1a40
1101b948:	1fffa680 	.long	0x1fffa680
1101b94c:	110122b8 	.long	0x110122b8
1101b950:	1fffa680 	.long	0x1fffa680
1101b954:	1fffb090 	.long	0x1fffb090
1101b958:	00005e20 	.long	0x00005e20

1101b95c <trap>:
1101b95c:	c1007420 	psrset      	ee
1101b960:	1421      	subi      	r14, r14, 4
1101b962:	b800      	st.w      	r0, (r14, 0x0)
1101b964:	100a      	lrw      	r0, 0x1fff0400	// 1101b98c <Default_Handler+0x4>
1101b966:	2847      	subi      	r0, 72
1101b968:	d4001c2f 	stm      	r0-r15, (r0)
1101b96c:	9820      	ld.w      	r1, (r14, 0x0)
1101b96e:	1401      	addi      	r14, r14, 4
1101b970:	ddc0200e 	st.w      	r14, (r0, 0x38)
1101b974:	6f83      	mov      	r14, r0
1101b976:	b820      	st.w      	r1, (r14, 0x0)
1101b978:	c0026021 	mfcr      	r1, cr<2, 0>
1101b97c:	b830      	st.w      	r1, (r14, 0x40)
1101b97e:	c0046021 	mfcr      	r1, cr<4, 0>
1101b982:	b831      	st.w      	r1, (r14, 0x44)
1101b984:	e0004376 	bsr      	0x11024070	// 11024070 <trap_c>

1101b988 <Default_Handler>:
1101b988:	07ea      	br      	0x1101b95c	// 1101b95c <trap>
1101b98a:	0000      	.short	0x0000
1101b98c:	1fff0400 	.long	0x1fff0400

1101b990 <__div32>:
1101b990:	3940      	cmpnei      	r1, 0
1101b992:	0803      	bt      	0x1101b998	// 1101b998 <__div32+0x8>
1101b994:	c0002c20 	trap      	3
1101b998:	3840      	cmpnei      	r0, 0
1101b99a:	0802      	bt      	0x1101b99e	// 1101b99e <__div32+0xe>
1101b99c:	783c      	jmp      	r15
1101b99e:	14c2      	push      	r4-r5
1101b9a0:	6d43      	mov      	r5, r0
1101b9a2:	6d45      	xor      	r5, r1
1101b9a4:	38df      	btsti      	r0, 31
1101b9a6:	0c03      	bf      	0x1101b9ac	// 1101b9ac <__div32+0x1c>
1101b9a8:	6c02      	nor      	r0, r0
1101b9aa:	2000      	addi      	r0, 1
1101b9ac:	39df      	btsti      	r1, 31
1101b9ae:	0c03      	bf      	0x1101b9b4	// 1101b9b4 <__div32+0x24>
1101b9b0:	6c46      	nor      	r1, r1
1101b9b2:	2100      	addi      	r1, 1
1101b9b4:	3201      	movi      	r2, 1
1101b9b6:	6cc3      	mov      	r3, r0
1101b9b8:	c4037c44 	ff1      	r4, r3
1101b9bc:	7090      	lsl      	r2, r4
1101b9be:	7010      	lsl      	r0, r4
1101b9c0:	6cc7      	mov      	r3, r1
1101b9c2:	c4037c44 	ff1      	r4, r3
1101b9c6:	2400      	addi      	r4, 1
1101b9c8:	6cc3      	mov      	r3, r0
1101b9ca:	70d1      	lsr      	r3, r4
1101b9cc:	6d12      	nor      	r4, r4
1101b9ce:	2420      	addi      	r4, 33
1101b9d0:	7090      	lsl      	r2, r4
1101b9d2:	7010      	lsl      	r0, r4
1101b9d4:	3a40      	cmpnei      	r2, 0
1101b9d6:	0c09      	bf      	0x1101b9e8	// 1101b9e8 <__div32+0x58>
1101b9d8:	c4004c20 	lslc      	r0, r0, 1
1101b9dc:	60cd      	addc      	r3, r3
1101b9de:	644c      	cmphs      	r3, r1
1101b9e0:	0c02      	bf      	0x1101b9e4	// 1101b9e4 <__div32+0x54>
1101b9e2:	60c6      	subu      	r3, r1
1101b9e4:	6089      	addc      	r2, r2
1101b9e6:	0ff9      	bf      	0x1101b9d8	// 1101b9d8 <__div32+0x48>
1101b9e8:	6c0b      	mov      	r0, r2
1101b9ea:	6c4f      	mov      	r1, r3
1101b9ec:	c4054c25 	lslc      	r5, r5, 1
1101b9f0:	0c05      	bf      	0x1101b9fa	// 1101b9fa <__div32+0x6a>
1101b9f2:	6c02      	nor      	r0, r0
1101b9f4:	2000      	addi      	r0, 1
1101b9f6:	6c46      	nor      	r1, r1
1101b9f8:	2100      	addi      	r1, 1
1101b9fa:	1482      	pop      	r4-r5

1101b9fc <__udiv32>:
1101b9fc:	3940      	cmpnei      	r1, 0
1101b9fe:	0803      	bt      	0x1101ba04	// 1101ba04 <__udiv32+0x8>
1101ba00:	c0002c20 	trap      	3
1101ba04:	3840      	cmpnei      	r0, 0
1101ba06:	0802      	bt      	0x1101ba0a	// 1101ba0a <__udiv32+0xe>
1101ba08:	783c      	jmp      	r15
1101ba0a:	14c1      	push      	r4
1101ba0c:	3201      	movi      	r2, 1
1101ba0e:	6cc3      	mov      	r3, r0
1101ba10:	c4037c44 	ff1      	r4, r3
1101ba14:	7090      	lsl      	r2, r4
1101ba16:	7010      	lsl      	r0, r4
1101ba18:	6cc7      	mov      	r3, r1
1101ba1a:	c4037c44 	ff1      	r4, r3
1101ba1e:	2400      	addi      	r4, 1
1101ba20:	6cc3      	mov      	r3, r0
1101ba22:	70d1      	lsr      	r3, r4
1101ba24:	6d12      	nor      	r4, r4
1101ba26:	2420      	addi      	r4, 33
1101ba28:	7090      	lsl      	r2, r4
1101ba2a:	7010      	lsl      	r0, r4
1101ba2c:	3a40      	cmpnei      	r2, 0
1101ba2e:	0c09      	bf      	0x1101ba40	// 1101ba40 <__udiv32+0x44>
1101ba30:	c4004c20 	lslc      	r0, r0, 1
1101ba34:	60cd      	addc      	r3, r3
1101ba36:	644c      	cmphs      	r3, r1
1101ba38:	0c02      	bf      	0x1101ba3c	// 1101ba3c <__udiv32+0x40>
1101ba3a:	60c6      	subu      	r3, r1
1101ba3c:	6089      	addc      	r2, r2
1101ba3e:	0ff9      	bf      	0x1101ba30	// 1101ba30 <__udiv32+0x34>
1101ba40:	6c0b      	mov      	r0, r2
1101ba42:	6c4f      	mov      	r1, r3
1101ba44:	1481      	pop      	r4
	...

1101ba48 <__modsi3>:
1101ba48:	14c1      	push      	r4
1101ba4a:	3940      	cmpnei      	r1, 0
1101ba4c:	0803      	bt      	0x1101ba52	// 1101ba52 <__modsi3+0xa>
1101ba4e:	c0002c20 	trap      	3
1101ba52:	3840      	cmpnei      	r0, 0
1101ba54:	0802      	bt      	0x1101ba58	// 1101ba58 <__modsi3+0x10>
1101ba56:	1481      	pop      	r4
1101ba58:	6d03      	mov      	r4, r0
1101ba5a:	38df      	btsti      	r0, 31
1101ba5c:	0c03      	bf      	0x1101ba62	// 1101ba62 <__modsi3+0x1a>
1101ba5e:	6c02      	nor      	r0, r0
1101ba60:	2000      	addi      	r0, 1
1101ba62:	39df      	btsti      	r1, 31
1101ba64:	0c03      	bf      	0x1101ba6a	// 1101ba6a <__modsi3+0x22>
1101ba66:	6c46      	nor      	r1, r1
1101ba68:	2100      	addi      	r1, 1
1101ba6a:	6c83      	mov      	r2, r0
1101ba6c:	c4027c43 	ff1      	r3, r2
1101ba70:	3201      	movi      	r2, 1
1101ba72:	708c      	lsl      	r2, r3
1101ba74:	700c      	lsl      	r0, r3
1101ba76:	3300      	movi      	r3, 0
1101ba78:	c4004c20 	lslc      	r0, r0, 1
1101ba7c:	60cd      	addc      	r3, r3
1101ba7e:	644c      	cmphs      	r3, r1
1101ba80:	0c02      	bf      	0x1101ba84	// 1101ba84 <__modsi3+0x3c>
1101ba82:	60c6      	subu      	r3, r1
1101ba84:	6089      	addc      	r2, r2
1101ba86:	0ff9      	bf      	0x1101ba78	// 1101ba78 <__modsi3+0x30>
1101ba88:	6c0f      	mov      	r0, r3
1101ba8a:	c4044c24 	lslc      	r4, r4, 1
1101ba8e:	0c03      	bf      	0x1101ba94	// 1101ba94 <__modsi3+0x4c>
1101ba90:	6c02      	nor      	r0, r0
1101ba92:	2000      	addi      	r0, 1
1101ba94:	1481      	pop      	r4
	...

1101ba98 <__umodsi3>:
1101ba98:	3940      	cmpnei      	r1, 0
1101ba9a:	0803      	bt      	0x1101baa0	// 1101baa0 <__umodsi3+0x8>
1101ba9c:	c0002c20 	trap      	3
1101baa0:	3840      	cmpnei      	r0, 0
1101baa2:	0802      	bt      	0x1101baa6	// 1101baa6 <__umodsi3+0xe>
1101baa4:	783c      	jmp      	r15
1101baa6:	6c83      	mov      	r2, r0
1101baa8:	c4027c43 	ff1      	r3, r2
1101baac:	3201      	movi      	r2, 1
1101baae:	708c      	lsl      	r2, r3
1101bab0:	700c      	lsl      	r0, r3
1101bab2:	3300      	movi      	r3, 0
1101bab4:	c4004c20 	lslc      	r0, r0, 1
1101bab8:	60cd      	addc      	r3, r3
1101baba:	644c      	cmphs      	r3, r1
1101babc:	0c02      	bf      	0x1101bac0	// 1101bac0 <__umodsi3+0x28>
1101babe:	60c6      	subu      	r3, r1
1101bac0:	6089      	addc      	r2, r2
1101bac2:	0ff9      	bf      	0x1101bab4	// 1101bab4 <__umodsi3+0x1c>
1101bac4:	6c0f      	mov      	r0, r3
1101bac6:	783c      	jmp      	r15

1101bac8 <__muldi3>:
1101bac8:	14c4      	push      	r4-r7
1101baca:	1421      	subi      	r14, r14, 4
1101bacc:	7501      	zexth      	r4, r0
1101bace:	7589      	zexth      	r6, r2
1101bad0:	b820      	st.w      	r1, (r14, 0x0)
1101bad2:	4830      	lsri      	r1, r0, 16
1101bad4:	c4c48427 	mult      	r7, r4, r6
1101bad8:	7d84      	mult      	r6, r1
1101bada:	6d43      	mov      	r5, r0
1101badc:	4a10      	lsri      	r0, r2, 16
1101bade:	7d00      	mult      	r4, r0
1101bae0:	7c40      	mult      	r1, r0
1101bae2:	6118      	addu      	r4, r6
1101bae4:	4f10      	lsri      	r0, r7, 16
1101bae6:	6100      	addu      	r4, r0
1101bae8:	6590      	cmphs      	r4, r6
1101baea:	0804      	bt      	0x1101baf2	// 1101baf2 <__muldi3+0x2a>
1101baec:	ea200001 	movih      	r0, 1
1101baf0:	6040      	addu      	r1, r0
1101baf2:	4cd0      	lsri      	r6, r4, 16
1101baf4:	6184      	addu      	r6, r1
1101baf6:	c4a38421 	mult      	r1, r3, r5
1101bafa:	9860      	ld.w      	r3, (r14, 0x0)
1101bafc:	4410      	lsli      	r0, r4, 16
1101bafe:	7cc8      	mult      	r3, r2
1101bb00:	751d      	zexth      	r4, r7
1101bb02:	604c      	addu      	r1, r3
1101bb04:	6010      	addu      	r0, r4
1101bb06:	6058      	addu      	r1, r6
1101bb08:	1401      	addi      	r14, r14, 4
1101bb0a:	1484      	pop      	r4-r7

1101bb0c <__divdi3>:
1101bb0c:	14d4      	push      	r4-r7, r15
1101bb0e:	1427      	subi      	r14, r14, 28
1101bb10:	6d8f      	mov      	r6, r3
1101bb12:	39df      	btsti      	r1, 31
1101bb14:	3400      	movi      	r4, 0
1101bb16:	08f9      	bt      	0x1101bd08	// 1101bd08 <__divdi3+0x1fc>
1101bb18:	b881      	st.w      	r4, (r14, 0x4)
1101bb1a:	3edf      	btsti      	r6, 31
1101bb1c:	08eb      	bt      	0x1101bcf2	// 1101bcf2 <__divdi3+0x1e6>
1101bb1e:	3b40      	cmpnei      	r3, 0
1101bb20:	6d8b      	mov      	r6, r2
1101bb22:	6d4f      	mov      	r5, r3
1101bb24:	b800      	st.w      	r0, (r14, 0x0)
1101bb26:	6d07      	mov      	r4, r1
1101bb28:	085c      	bt      	0x1101bbe0	// 1101bbe0 <__divdi3+0xd4>
1101bb2a:	6484      	cmphs      	r1, r2
1101bb2c:	0888      	bt      	0x1101bc3c	// 1101bc3c <__divdi3+0x130>
1101bb2e:	eb02ffff 	cmphsi      	r2, 65536
1101bb32:	0cfa      	bf      	0x1101bd26	// 1101bd26 <__divdi3+0x21a>
1101bb34:	c6e05023 	bmaski      	r3, 24
1101bb38:	3518      	movi      	r5, 24
1101bb3a:	648c      	cmphs      	r3, r2
1101bb3c:	3310      	movi      	r3, 16
1101bb3e:	c4a30c40 	inct      	r5, r3, 0
1101bb42:	c4a64043 	lsr      	r3, r6, r5
1101bb46:	0054      	lrw      	r2, 0x110110e4	// 1101bef0 <__divdi3+0x3e4>
1101bb48:	60c8      	addu      	r3, r2
1101bb4a:	8360      	ld.b      	r3, (r3, 0x0)
1101bb4c:	614c      	addu      	r5, r3
1101bb4e:	3320      	movi      	r3, 32
1101bb50:	60d6      	subu      	r3, r5
1101bb52:	3b40      	cmpnei      	r3, 0
1101bb54:	0c0a      	bf      	0x1101bb68	// 1101bb68 <__divdi3+0x5c>
1101bb56:	9840      	ld.w      	r2, (r14, 0x0)
1101bb58:	710c      	lsl      	r4, r3
1101bb5a:	718c      	lsl      	r6, r3
1101bb5c:	c4a24045 	lsr      	r5, r2, r5
1101bb60:	c4624023 	lsl      	r3, r2, r3
1101bb64:	6d14      	or      	r4, r5
1101bb66:	b860      	st.w      	r3, (r14, 0x0)
1101bb68:	4ef0      	lsri      	r7, r6, 16
1101bb6a:	6c5f      	mov      	r1, r7
1101bb6c:	6c13      	mov      	r0, r4
1101bb6e:	7559      	zexth      	r5, r6
1101bb70:	e3ffff94 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101bb74:	6c5f      	mov      	r1, r7
1101bb76:	b802      	st.w      	r0, (r14, 0x8)
1101bb78:	6c13      	mov      	r0, r4
1101bb7a:	e3ffff41 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101bb7e:	9862      	ld.w      	r3, (r14, 0x8)
1101bb80:	4330      	lsli      	r1, r3, 16
1101bb82:	9860      	ld.w      	r3, (r14, 0x0)
1101bb84:	4b70      	lsri      	r3, r3, 16
1101bb86:	c4058422 	mult      	r2, r5, r0
1101bb8a:	6cc4      	or      	r3, r1
1101bb8c:	6d03      	mov      	r4, r0
1101bb8e:	648c      	cmphs      	r3, r2
1101bb90:	0808      	bt      	0x1101bba0	// 1101bba0 <__divdi3+0x94>
1101bb92:	60d8      	addu      	r3, r6
1101bb94:	658c      	cmphs      	r3, r6
1101bb96:	5823      	subi      	r1, r0, 1
1101bb98:	0c03      	bf      	0x1101bb9e	// 1101bb9e <__divdi3+0x92>
1101bb9a:	648c      	cmphs      	r3, r2
1101bb9c:	0da4      	bf      	0x1101bee4	// 1101bee4 <__divdi3+0x3d8>
1101bb9e:	6d07      	mov      	r4, r1
1101bba0:	60ca      	subu      	r3, r2
1101bba2:	6c5f      	mov      	r1, r7
1101bba4:	6c0f      	mov      	r0, r3
1101bba6:	b863      	st.w      	r3, (r14, 0xc)
1101bba8:	e3ffff78 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101bbac:	9863      	ld.w      	r3, (r14, 0xc)
1101bbae:	b802      	st.w      	r0, (r14, 0x8)
1101bbb0:	6c5f      	mov      	r1, r7
1101bbb2:	6c0f      	mov      	r0, r3
1101bbb4:	e3ffff24 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101bbb8:	9842      	ld.w      	r2, (r14, 0x8)
1101bbba:	d86e1000 	ld.h      	r3, (r14, 0x0)
1101bbbe:	4250      	lsli      	r2, r2, 16
1101bbc0:	74cd      	zexth      	r3, r3
1101bbc2:	7d40      	mult      	r5, r0
1101bbc4:	6c8c      	or      	r2, r3
1101bbc6:	6548      	cmphs      	r2, r5
1101bbc8:	0808      	bt      	0x1101bbd8	// 1101bbd8 <__divdi3+0xcc>
1101bbca:	6098      	addu      	r2, r6
1101bbcc:	6588      	cmphs      	r2, r6
1101bbce:	5863      	subi      	r3, r0, 1
1101bbd0:	0c03      	bf      	0x1101bbd6	// 1101bbd6 <__divdi3+0xca>
1101bbd2:	6548      	cmphs      	r2, r5
1101bbd4:	0d84      	bf      	0x1101bedc	// 1101bedc <__divdi3+0x3d0>
1101bbd6:	6c0f      	mov      	r0, r3
1101bbd8:	4490      	lsli      	r4, r4, 16
1101bbda:	6d00      	or      	r4, r0
1101bbdc:	3500      	movi      	r5, 0
1101bbde:	0405      	br      	0x1101bbe8	// 1101bbe8 <__divdi3+0xdc>
1101bbe0:	64c4      	cmphs      	r1, r3
1101bbe2:	0811      	bt      	0x1101bc04	// 1101bc04 <__divdi3+0xf8>
1101bbe4:	3500      	movi      	r5, 0
1101bbe6:	3400      	movi      	r4, 0
1101bbe8:	9861      	ld.w      	r3, (r14, 0x4)
1101bbea:	6c13      	mov      	r0, r4
1101bbec:	3b40      	cmpnei      	r3, 0
1101bbee:	6c57      	mov      	r1, r5
1101bbf0:	0c08      	bf      	0x1101bc00	// 1101bc00 <__divdi3+0xf4>
1101bbf2:	3200      	movi      	r2, 0
1101bbf4:	3300      	movi      	r3, 0
1101bbf6:	6400      	cmphs      	r0, r0
1101bbf8:	c4020100 	subc      	r0, r2, r0
1101bbfc:	c4230101 	subc      	r1, r3, r1
1101bc00:	1407      	addi      	r14, r14, 28
1101bc02:	1494      	pop      	r4-r7, r15
1101bc04:	eb03ffff 	cmphsi      	r3, 65536
1101bc08:	0c95      	bf      	0x1101bd32	// 1101bd32 <__divdi3+0x226>
1101bc0a:	c6e05023 	bmaski      	r3, 24
1101bc0e:	3218      	movi      	r2, 24
1101bc10:	654c      	cmphs      	r3, r5
1101bc12:	3310      	movi      	r3, 16
1101bc14:	c4620c20 	incf      	r3, r2, 0
1101bc18:	c4654042 	lsr      	r2, r5, r3
1101bc1c:	022a      	lrw      	r1, 0x110110e4	// 1101bef0 <__divdi3+0x3e4>
1101bc1e:	6084      	addu      	r2, r1
1101bc20:	8240      	ld.b      	r2, (r2, 0x0)
1101bc22:	3720      	movi      	r7, 32
1101bc24:	60c8      	addu      	r3, r2
1101bc26:	61ce      	subu      	r7, r3
1101bc28:	3f40      	cmpnei      	r7, 0
1101bc2a:	08d8      	bt      	0x1101bdda	// 1101bdda <__divdi3+0x2ce>
1101bc2c:	6514      	cmphs      	r5, r4
1101bc2e:	0d4c      	bf      	0x1101bec6	// 1101bec6 <__divdi3+0x3ba>
1101bc30:	9860      	ld.w      	r3, (r14, 0x0)
1101bc32:	3500      	movi      	r5, 0
1101bc34:	658c      	cmphs      	r3, r6
1101bc36:	c4000504 	mvc      	r4
1101bc3a:	07d7      	br      	0x1101bbe8	// 1101bbe8 <__divdi3+0xdc>
1101bc3c:	3a40      	cmpnei      	r2, 0
1101bc3e:	0806      	bt      	0x1101bc4a	// 1101bc4a <__divdi3+0x13e>
1101bc40:	3100      	movi      	r1, 0
1101bc42:	3001      	movi      	r0, 1
1101bc44:	e3fffedc 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101bc48:	6d83      	mov      	r6, r0
1101bc4a:	eb06ffff 	cmphsi      	r6, 65536
1101bc4e:	0c66      	bf      	0x1101bd1a	// 1101bd1a <__divdi3+0x20e>
1101bc50:	c6e05023 	bmaski      	r3, 24
1101bc54:	3518      	movi      	r5, 24
1101bc56:	658c      	cmphs      	r3, r6
1101bc58:	3310      	movi      	r3, 16
1101bc5a:	c4a30c40 	inct      	r5, r3, 0
1101bc5e:	025a      	lrw      	r2, 0x110110e4	// 1101bef0 <__divdi3+0x3e4>
1101bc60:	c4a64043 	lsr      	r3, r6, r5
1101bc64:	60c8      	addu      	r3, r2
1101bc66:	8360      	ld.b      	r3, (r3, 0x0)
1101bc68:	3220      	movi      	r2, 32
1101bc6a:	60d4      	addu      	r3, r5
1101bc6c:	608e      	subu      	r2, r3
1101bc6e:	3a40      	cmpnei      	r2, 0
1101bc70:	0867      	bt      	0x1101bd3e	// 1101bd3e <__divdi3+0x232>
1101bc72:	74d9      	zexth      	r3, r6
1101bc74:	4ef0      	lsri      	r7, r6, 16
1101bc76:	b862      	st.w      	r3, (r14, 0x8)
1101bc78:	3501      	movi      	r5, 1
1101bc7a:	611a      	subu      	r4, r6
1101bc7c:	6c5f      	mov      	r1, r7
1101bc7e:	6c13      	mov      	r0, r4
1101bc80:	e3ffff0c 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101bc84:	6c5f      	mov      	r1, r7
1101bc86:	b803      	st.w      	r0, (r14, 0xc)
1101bc88:	6c13      	mov      	r0, r4
1101bc8a:	e3fffeb9 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101bc8e:	9862      	ld.w      	r3, (r14, 0x8)
1101bc90:	c4608422 	mult      	r2, r0, r3
1101bc94:	9863      	ld.w      	r3, (r14, 0xc)
1101bc96:	4330      	lsli      	r1, r3, 16
1101bc98:	9860      	ld.w      	r3, (r14, 0x0)
1101bc9a:	4b70      	lsri      	r3, r3, 16
1101bc9c:	6cc4      	or      	r3, r1
1101bc9e:	6d03      	mov      	r4, r0
1101bca0:	648c      	cmphs      	r3, r2
1101bca2:	0808      	bt      	0x1101bcb2	// 1101bcb2 <__divdi3+0x1a6>
1101bca4:	60d8      	addu      	r3, r6
1101bca6:	658c      	cmphs      	r3, r6
1101bca8:	5823      	subi      	r1, r0, 1
1101bcaa:	0c03      	bf      	0x1101bcb0	// 1101bcb0 <__divdi3+0x1a4>
1101bcac:	648c      	cmphs      	r3, r2
1101bcae:	0d1e      	bf      	0x1101beea	// 1101beea <__divdi3+0x3de>
1101bcb0:	6d07      	mov      	r4, r1
1101bcb2:	60ca      	subu      	r3, r2
1101bcb4:	6c5f      	mov      	r1, r7
1101bcb6:	6c0f      	mov      	r0, r3
1101bcb8:	b864      	st.w      	r3, (r14, 0x10)
1101bcba:	e3fffeef 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101bcbe:	9864      	ld.w      	r3, (r14, 0x10)
1101bcc0:	b803      	st.w      	r0, (r14, 0xc)
1101bcc2:	6c5f      	mov      	r1, r7
1101bcc4:	6c0f      	mov      	r0, r3
1101bcc6:	e3fffe9b 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101bcca:	9843      	ld.w      	r2, (r14, 0xc)
1101bccc:	d82e1000 	ld.h      	r1, (r14, 0x0)
1101bcd0:	9862      	ld.w      	r3, (r14, 0x8)
1101bcd2:	4250      	lsli      	r2, r2, 16
1101bcd4:	7445      	zexth      	r1, r1
1101bcd6:	7cc0      	mult      	r3, r0
1101bcd8:	6c84      	or      	r2, r1
1101bcda:	64c8      	cmphs      	r2, r3
1101bcdc:	0808      	bt      	0x1101bcec	// 1101bcec <__divdi3+0x1e0>
1101bcde:	6098      	addu      	r2, r6
1101bce0:	6588      	cmphs      	r2, r6
1101bce2:	5823      	subi      	r1, r0, 1
1101bce4:	0c03      	bf      	0x1101bcea	// 1101bcea <__divdi3+0x1de>
1101bce6:	64c8      	cmphs      	r2, r3
1101bce8:	0cfc      	bf      	0x1101bee0	// 1101bee0 <__divdi3+0x3d4>
1101bcea:	6c07      	mov      	r0, r1
1101bcec:	4490      	lsli      	r4, r4, 16
1101bcee:	6d00      	or      	r4, r0
1101bcf0:	077c      	br      	0x1101bbe8	// 1101bbe8 <__divdi3+0xdc>
1101bcf2:	9881      	ld.w      	r4, (r14, 0x4)
1101bcf4:	6d12      	nor      	r4, r4
1101bcf6:	b881      	st.w      	r4, (r14, 0x4)
1101bcf8:	3500      	movi      	r5, 0
1101bcfa:	3400      	movi      	r4, 0
1101bcfc:	6488      	cmphs      	r2, r2
1101bcfe:	c4440102 	subc      	r2, r4, r2
1101bd02:	c4650103 	subc      	r3, r5, r3
1101bd06:	070c      	br      	0x1101bb1e	// 1101bb1e <__divdi3+0x12>
1101bd08:	3500      	movi      	r5, 0
1101bd0a:	6400      	cmphs      	r0, r0
1101bd0c:	c4040100 	subc      	r0, r4, r0
1101bd10:	c4250101 	subc      	r1, r5, r1
1101bd14:	2c00      	subi      	r4, 1
1101bd16:	b881      	st.w      	r4, (r14, 0x4)
1101bd18:	0701      	br      	0x1101bb1a	// 1101bb1a <__divdi3+0xe>
1101bd1a:	eb0600ff 	cmphsi      	r6, 256
1101bd1e:	3308      	movi      	r3, 8
1101bd20:	c4a30c40 	inct      	r5, r3, 0
1101bd24:	079d      	br      	0x1101bc5e	// 1101bc5e <__divdi3+0x152>
1101bd26:	eb0200ff 	cmphsi      	r2, 256
1101bd2a:	3308      	movi      	r3, 8
1101bd2c:	c4a30c40 	inct      	r5, r3, 0
1101bd30:	0709      	br      	0x1101bb42	// 1101bb42 <__divdi3+0x36>
1101bd32:	eb0300ff 	cmphsi      	r3, 256
1101bd36:	c4000503 	mvc      	r3
1101bd3a:	4363      	lsli      	r3, r3, 3
1101bd3c:	076e      	br      	0x1101bc18	// 1101bc18 <__divdi3+0x10c>
1101bd3e:	7188      	lsl      	r6, r2
1101bd40:	9820      	ld.w      	r1, (r14, 0x0)
1101bd42:	c4644045 	lsr      	r5, r4, r3
1101bd46:	4ef0      	lsri      	r7, r6, 16
1101bd48:	7108      	lsl      	r4, r2
1101bd4a:	c4414022 	lsl      	r2, r1, r2
1101bd4e:	c4614043 	lsr      	r3, r1, r3
1101bd52:	b840      	st.w      	r2, (r14, 0x0)
1101bd54:	6c5f      	mov      	r1, r7
1101bd56:	7499      	zexth      	r2, r6
1101bd58:	6c17      	mov      	r0, r5
1101bd5a:	6cd0      	or      	r3, r4
1101bd5c:	b863      	st.w      	r3, (r14, 0xc)
1101bd5e:	b842      	st.w      	r2, (r14, 0x8)
1101bd60:	e3fffe9c 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101bd64:	6d03      	mov      	r4, r0
1101bd66:	6c5f      	mov      	r1, r7
1101bd68:	6c17      	mov      	r0, r5
1101bd6a:	4490      	lsli      	r4, r4, 16
1101bd6c:	e3fffe48 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101bd70:	9823      	ld.w      	r1, (r14, 0xc)
1101bd72:	6c83      	mov      	r2, r0
1101bd74:	b804      	st.w      	r0, (r14, 0x10)
1101bd76:	49b0      	lsri      	r5, r1, 16
1101bd78:	7419      	zexth      	r0, r6
1101bd7a:	c4408423 	mult      	r3, r0, r2
1101bd7e:	6d50      	or      	r5, r4
1101bd80:	64d4      	cmphs      	r5, r3
1101bd82:	080c      	bt      	0x1101bd9a	// 1101bd9a <__divdi3+0x28e>
1101bd84:	6158      	addu      	r5, r6
1101bd86:	6594      	cmphs      	r5, r6
1101bd88:	6c4b      	mov      	r1, r2
1101bd8a:	2a00      	subi      	r2, 1
1101bd8c:	0ca6      	bf      	0x1101bed8	// 1101bed8 <__divdi3+0x3cc>
1101bd8e:	64d4      	cmphs      	r5, r3
1101bd90:	08a4      	bt      	0x1101bed8	// 1101bed8 <__divdi3+0x3cc>
1101bd92:	6c87      	mov      	r2, r1
1101bd94:	2a01      	subi      	r2, 2
1101bd96:	b844      	st.w      	r2, (r14, 0x10)
1101bd98:	6158      	addu      	r5, r6
1101bd9a:	614e      	subu      	r5, r3
1101bd9c:	6c5f      	mov      	r1, r7
1101bd9e:	6c17      	mov      	r0, r5
1101bda0:	e3fffe7c 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101bda4:	6d03      	mov      	r4, r0
1101bda6:	6c5f      	mov      	r1, r7
1101bda8:	6c17      	mov      	r0, r5
1101bdaa:	e3fffe29 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101bdae:	d82e1006 	ld.h      	r1, (r14, 0xc)
1101bdb2:	4450      	lsli      	r2, r4, 16
1101bdb4:	74d9      	zexth      	r3, r6
1101bdb6:	7505      	zexth      	r4, r1
1101bdb8:	7cc0      	mult      	r3, r0
1101bdba:	6d08      	or      	r4, r2
1101bdbc:	64d0      	cmphs      	r4, r3
1101bdbe:	0809      	bt      	0x1101bdd0	// 1101bdd0 <__divdi3+0x2c4>
1101bdc0:	6118      	addu      	r4, r6
1101bdc2:	6590      	cmphs      	r4, r6
1101bdc4:	5843      	subi      	r2, r0, 1
1101bdc6:	0c85      	bf      	0x1101bed0	// 1101bed0 <__divdi3+0x3c4>
1101bdc8:	64d0      	cmphs      	r4, r3
1101bdca:	0883      	bt      	0x1101bed0	// 1101bed0 <__divdi3+0x3c4>
1101bdcc:	2801      	subi      	r0, 2
1101bdce:	6118      	addu      	r4, r6
1101bdd0:	610e      	subu      	r4, r3
1101bdd2:	9864      	ld.w      	r3, (r14, 0x10)
1101bdd4:	43b0      	lsli      	r5, r3, 16
1101bdd6:	6d40      	or      	r5, r0
1101bdd8:	0752      	br      	0x1101bc7c	// 1101bc7c <__divdi3+0x170>
1101bdda:	c4e64021 	lsl      	r1, r6, r7
1101bdde:	c4664042 	lsr      	r2, r6, r3
1101bde2:	715c      	lsl      	r5, r7
1101bde4:	6c94      	or      	r2, r5
1101bde6:	b824      	st.w      	r1, (r14, 0x10)
1101bde8:	9820      	ld.w      	r1, (r14, 0x0)
1101bdea:	c4644046 	lsr      	r6, r4, r3
1101bdee:	711c      	lsl      	r4, r7
1101bdf0:	c4614043 	lsr      	r3, r1, r3
1101bdf4:	7449      	zexth      	r1, r2
1101bdf6:	6cd0      	or      	r3, r4
1101bdf8:	4a90      	lsri      	r4, r2, 16
1101bdfa:	b823      	st.w      	r1, (r14, 0xc)
1101bdfc:	6c1b      	mov      	r0, r6
1101bdfe:	6c53      	mov      	r1, r4
1101be00:	b862      	st.w      	r3, (r14, 0x8)
1101be02:	b846      	st.w      	r2, (r14, 0x18)
1101be04:	e3fffe4a 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101be08:	6d43      	mov      	r5, r0
1101be0a:	6c53      	mov      	r1, r4
1101be0c:	6c1b      	mov      	r0, r6
1101be0e:	e3fffdf7 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101be12:	9823      	ld.w      	r1, (r14, 0xc)
1101be14:	c4018423 	mult      	r3, r1, r0
1101be18:	4530      	lsli      	r1, r5, 16
1101be1a:	98a2      	ld.w      	r5, (r14, 0x8)
1101be1c:	4db0      	lsri      	r5, r5, 16
1101be1e:	6d44      	or      	r5, r1
1101be20:	6c83      	mov      	r2, r0
1101be22:	64d4      	cmphs      	r5, r3
1101be24:	080a      	bt      	0x1101be38	// 1101be38 <__divdi3+0x32c>
1101be26:	5823      	subi      	r1, r0, 1
1101be28:	9806      	ld.w      	r0, (r14, 0x18)
1101be2a:	6140      	addu      	r5, r0
1101be2c:	6414      	cmphs      	r5, r0
1101be2e:	0c53      	bf      	0x1101bed4	// 1101bed4 <__divdi3+0x3c8>
1101be30:	64d4      	cmphs      	r5, r3
1101be32:	0851      	bt      	0x1101bed4	// 1101bed4 <__divdi3+0x3c8>
1101be34:	2a01      	subi      	r2, 2
1101be36:	6140      	addu      	r5, r0
1101be38:	614e      	subu      	r5, r3
1101be3a:	6c53      	mov      	r1, r4
1101be3c:	6c17      	mov      	r0, r5
1101be3e:	b845      	st.w      	r2, (r14, 0x14)
1101be40:	e3fffe2c 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101be44:	6d83      	mov      	r6, r0
1101be46:	6c53      	mov      	r1, r4
1101be48:	6c17      	mov      	r0, r5
1101be4a:	46d0      	lsli      	r6, r6, 16
1101be4c:	e3fffdd8 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101be50:	d86e1004 	ld.h      	r3, (r14, 0x8)
1101be54:	9823      	ld.w      	r1, (r14, 0xc)
1101be56:	74cd      	zexth      	r3, r3
1101be58:	7c40      	mult      	r1, r0
1101be5a:	6cd8      	or      	r3, r6
1101be5c:	9845      	ld.w      	r2, (r14, 0x14)
1101be5e:	644c      	cmphs      	r3, r1
1101be60:	080a      	bt      	0x1101be74	// 1101be74 <__divdi3+0x368>
1101be62:	98a6      	ld.w      	r5, (r14, 0x18)
1101be64:	60d4      	addu      	r3, r5
1101be66:	654c      	cmphs      	r3, r5
1101be68:	5883      	subi      	r4, r0, 1
1101be6a:	0c31      	bf      	0x1101becc	// 1101becc <__divdi3+0x3c0>
1101be6c:	644c      	cmphs      	r3, r1
1101be6e:	082f      	bt      	0x1101becc	// 1101becc <__divdi3+0x3c0>
1101be70:	2801      	subi      	r0, 2
1101be72:	60d4      	addu      	r3, r5
1101be74:	4250      	lsli      	r2, r2, 16
1101be76:	98a4      	ld.w      	r5, (r14, 0x10)
1101be78:	6c08      	or      	r0, r2
1101be7a:	7481      	zexth      	r2, r0
1101be7c:	4890      	lsri      	r4, r0, 16
1101be7e:	60c6      	subu      	r3, r1
1101be80:	7455      	zexth      	r1, r5
1101be82:	4dd0      	lsri      	r6, r5, 16
1101be84:	c4228425 	mult      	r5, r2, r1
1101be88:	7c50      	mult      	r1, r4
1101be8a:	7c98      	mult      	r2, r6
1101be8c:	7d18      	mult      	r4, r6
1101be8e:	6084      	addu      	r2, r1
1101be90:	4dd0      	lsri      	r6, r5, 16
1101be92:	6098      	addu      	r2, r6
1101be94:	6448      	cmphs      	r2, r1
1101be96:	0804      	bt      	0x1101be9e	// 1101be9e <__divdi3+0x392>
1101be98:	ea210001 	movih      	r1, 1
1101be9c:	6104      	addu      	r4, r1
1101be9e:	4a30      	lsri      	r1, r2, 16
1101bea0:	6104      	addu      	r4, r1
1101bea2:	650c      	cmphs      	r3, r4
1101bea4:	0c0e      	bf      	0x1101bec0	// 1101bec0 <__divdi3+0x3b4>
1101bea6:	650e      	cmpne      	r3, r4
1101bea8:	0c04      	bf      	0x1101beb0	// 1101beb0 <__divdi3+0x3a4>
1101beaa:	6d03      	mov      	r4, r0
1101beac:	3500      	movi      	r5, 0
1101beae:	069d      	br      	0x1101bbe8	// 1101bbe8 <__divdi3+0xdc>
1101beb0:	9860      	ld.w      	r3, (r14, 0x0)
1101beb2:	70dc      	lsl      	r3, r7
1101beb4:	4250      	lsli      	r2, r2, 16
1101beb6:	7555      	zexth      	r5, r5
1101beb8:	6094      	addu      	r2, r5
1101beba:	648c      	cmphs      	r3, r2
1101bebc:	6dcf      	mov      	r7, r3
1101bebe:	0bf6      	bt      	0x1101beaa	// 1101beaa <__divdi3+0x39e>
1101bec0:	5883      	subi      	r4, r0, 1
1101bec2:	3500      	movi      	r5, 0
1101bec4:	0692      	br      	0x1101bbe8	// 1101bbe8 <__divdi3+0xdc>
1101bec6:	3500      	movi      	r5, 0
1101bec8:	3401      	movi      	r4, 1
1101beca:	068f      	br      	0x1101bbe8	// 1101bbe8 <__divdi3+0xdc>
1101becc:	6c13      	mov      	r0, r4
1101bece:	07d3      	br      	0x1101be74	// 1101be74 <__divdi3+0x368>
1101bed0:	6c0b      	mov      	r0, r2
1101bed2:	077f      	br      	0x1101bdd0	// 1101bdd0 <__divdi3+0x2c4>
1101bed4:	6c87      	mov      	r2, r1
1101bed6:	07b1      	br      	0x1101be38	// 1101be38 <__divdi3+0x32c>
1101bed8:	b844      	st.w      	r2, (r14, 0x10)
1101beda:	0760      	br      	0x1101bd9a	// 1101bd9a <__divdi3+0x28e>
1101bedc:	2801      	subi      	r0, 2
1101bede:	067d      	br      	0x1101bbd8	// 1101bbd8 <__divdi3+0xcc>
1101bee0:	2801      	subi      	r0, 2
1101bee2:	0705      	br      	0x1101bcec	// 1101bcec <__divdi3+0x1e0>
1101bee4:	2c01      	subi      	r4, 2
1101bee6:	60d8      	addu      	r3, r6
1101bee8:	065c      	br      	0x1101bba0	// 1101bba0 <__divdi3+0x94>
1101beea:	2c01      	subi      	r4, 2
1101beec:	60d8      	addu      	r3, r6
1101beee:	06e2      	br      	0x1101bcb2	// 1101bcb2 <__divdi3+0x1a6>
1101bef0:	110110e4 	.long	0x110110e4

1101bef4 <__moddi3>:
1101bef4:	14d4      	push      	r4-r7, r15
1101bef6:	1428      	subi      	r14, r14, 32
1101bef8:	6d03      	mov      	r4, r0
1101befa:	6d47      	mov      	r5, r1
1101befc:	6d8f      	mov      	r6, r3
1101befe:	3ddf      	btsti      	r5, 31
1101bf00:	08fd      	bt      	0x1101c0fa	// 1101c0fa <__moddi3+0x206>
1101bf02:	3100      	movi      	r1, 0
1101bf04:	b822      	st.w      	r1, (r14, 0x8)
1101bf06:	3edf      	btsti      	r6, 31
1101bf08:	08f1      	bt      	0x1101c0ea	// 1101c0ea <__moddi3+0x1f6>
1101bf0a:	3b40      	cmpnei      	r3, 0
1101bf0c:	b840      	st.w      	r2, (r14, 0x0)
1101bf0e:	6dcf      	mov      	r7, r3
1101bf10:	b881      	st.w      	r4, (r14, 0x4)
1101bf12:	6d97      	mov      	r6, r5
1101bf14:	085f      	bt      	0x1101bfd2	// 1101bfd2 <__moddi3+0xde>
1101bf16:	6494      	cmphs      	r5, r2
1101bf18:	0892      	bt      	0x1101c03c	// 1101c03c <__moddi3+0x148>
1101bf1a:	eb02ffff 	cmphsi      	r2, 65536
1101bf1e:	0cff      	bf      	0x1101c11c	// 1101c11c <__moddi3+0x228>
1101bf20:	c6e05023 	bmaski      	r3, 24
1101bf24:	9840      	ld.w      	r2, (r14, 0x0)
1101bf26:	3718      	movi      	r7, 24
1101bf28:	648c      	cmphs      	r3, r2
1101bf2a:	3310      	movi      	r3, 16
1101bf2c:	c4e30c40 	inct      	r7, r3, 0
1101bf30:	9840      	ld.w      	r2, (r14, 0x0)
1101bf32:	6ccb      	mov      	r3, r2
1101bf34:	70dd      	lsr      	r3, r7
1101bf36:	0031      	lrw      	r1, 0x110110e4	// 1101c2ec <__moddi3+0x3f8>
1101bf38:	60c4      	addu      	r3, r1
1101bf3a:	8360      	ld.b      	r3, (r3, 0x0)
1101bf3c:	61cc      	addu      	r7, r3
1101bf3e:	3320      	movi      	r3, 32
1101bf40:	60de      	subu      	r3, r7
1101bf42:	3b40      	cmpnei      	r3, 0
1101bf44:	b863      	st.w      	r3, (r14, 0xc)
1101bf46:	0c0b      	bf      	0x1101bf5c	// 1101bf5c <__moddi3+0x68>
1101bf48:	708c      	lsl      	r2, r3
1101bf4a:	b840      	st.w      	r2, (r14, 0x0)
1101bf4c:	9841      	ld.w      	r2, (r14, 0x4)
1101bf4e:	718c      	lsl      	r6, r3
1101bf50:	c4e24047 	lsr      	r7, r2, r7
1101bf54:	c4624023 	lsl      	r3, r2, r3
1101bf58:	6d9c      	or      	r6, r7
1101bf5a:	b861      	st.w      	r3, (r14, 0x4)
1101bf5c:	9860      	ld.w      	r3, (r14, 0x0)
1101bf5e:	4b90      	lsri      	r4, r3, 16
1101bf60:	6c53      	mov      	r1, r4
1101bf62:	6c1b      	mov      	r0, r6
1101bf64:	754d      	zexth      	r5, r3
1101bf66:	e3fffd99 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101bf6a:	6dc3      	mov      	r7, r0
1101bf6c:	6c53      	mov      	r1, r4
1101bf6e:	6c1b      	mov      	r0, r6
1101bf70:	e3fffd46 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101bf74:	9841      	ld.w      	r2, (r14, 0x4)
1101bf76:	4770      	lsli      	r3, r7, 16
1101bf78:	4af0      	lsri      	r7, r2, 16
1101bf7a:	7c14      	mult      	r0, r5
1101bf7c:	6dcc      	or      	r7, r3
1101bf7e:	641c      	cmphs      	r7, r0
1101bf80:	0809      	bt      	0x1101bf92	// 1101bf92 <__moddi3+0x9e>
1101bf82:	9860      	ld.w      	r3, (r14, 0x0)
1101bf84:	61cc      	addu      	r7, r3
1101bf86:	64dc      	cmphs      	r7, r3
1101bf88:	0c05      	bf      	0x1101bf92	// 1101bf92 <__moddi3+0x9e>
1101bf8a:	641c      	cmphs      	r7, r0
1101bf8c:	60dc      	addu      	r3, r7
1101bf8e:	c4e30c20 	incf      	r7, r3, 0
1101bf92:	61c2      	subu      	r7, r0
1101bf94:	6c53      	mov      	r1, r4
1101bf96:	6c1f      	mov      	r0, r7
1101bf98:	e3fffd80 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101bf9c:	6d83      	mov      	r6, r0
1101bf9e:	6c53      	mov      	r1, r4
1101bfa0:	6c1f      	mov      	r0, r7
1101bfa2:	46d0      	lsli      	r6, r6, 16
1101bfa4:	e3fffd2c 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101bfa8:	d86e1002 	ld.h      	r3, (r14, 0x4)
1101bfac:	7c14      	mult      	r0, r5
1101bfae:	754d      	zexth      	r5, r3
1101bfb0:	6d58      	or      	r5, r6
1101bfb2:	6414      	cmphs      	r5, r0
1101bfb4:	0809      	bt      	0x1101bfc6	// 1101bfc6 <__moddi3+0xd2>
1101bfb6:	9860      	ld.w      	r3, (r14, 0x0)
1101bfb8:	614c      	addu      	r5, r3
1101bfba:	64d4      	cmphs      	r5, r3
1101bfbc:	0c05      	bf      	0x1101bfc6	// 1101bfc6 <__moddi3+0xd2>
1101bfbe:	6414      	cmphs      	r5, r0
1101bfc0:	60d4      	addu      	r3, r5
1101bfc2:	c4a30c20 	incf      	r5, r3, 0
1101bfc6:	6142      	subu      	r5, r0
1101bfc8:	9863      	ld.w      	r3, (r14, 0xc)
1101bfca:	c4654040 	lsr      	r0, r5, r3
1101bfce:	3100      	movi      	r1, 0
1101bfd0:	0405      	br      	0x1101bfda	// 1101bfda <__moddi3+0xe6>
1101bfd2:	64d4      	cmphs      	r5, r3
1101bfd4:	080f      	bt      	0x1101bff2	// 1101bff2 <__moddi3+0xfe>
1101bfd6:	6c13      	mov      	r0, r4
1101bfd8:	6c57      	mov      	r1, r5
1101bfda:	9862      	ld.w      	r3, (r14, 0x8)
1101bfdc:	3b40      	cmpnei      	r3, 0
1101bfde:	0c08      	bf      	0x1101bfee	// 1101bfee <__moddi3+0xfa>
1101bfe0:	3200      	movi      	r2, 0
1101bfe2:	3300      	movi      	r3, 0
1101bfe4:	6400      	cmphs      	r0, r0
1101bfe6:	c4020100 	subc      	r0, r2, r0
1101bfea:	c4230101 	subc      	r1, r3, r1
1101bfee:	1408      	addi      	r14, r14, 32
1101bff0:	1494      	pop      	r4-r7, r15
1101bff2:	eb03ffff 	cmphsi      	r3, 65536
1101bff6:	0c99      	bf      	0x1101c128	// 1101c128 <__moddi3+0x234>
1101bff8:	c6e05023 	bmaski      	r3, 24
1101bffc:	3218      	movi      	r2, 24
1101bffe:	65cc      	cmphs      	r3, r7
1101c000:	3310      	movi      	r3, 16
1101c002:	c4430c40 	inct      	r2, r3, 0
1101c006:	c4474043 	lsr      	r3, r7, r2
1101c00a:	0226      	lrw      	r1, 0x110110e4	// 1101c2ec <__moddi3+0x3f8>
1101c00c:	60c4      	addu      	r3, r1
1101c00e:	8360      	ld.b      	r3, (r3, 0x0)
1101c010:	3420      	movi      	r4, 32
1101c012:	60c8      	addu      	r3, r2
1101c014:	610e      	subu      	r4, r3
1101c016:	3c40      	cmpnei      	r4, 0
1101c018:	b863      	st.w      	r3, (r14, 0xc)
1101c01a:	08ce      	bt      	0x1101c1b6	// 1101c1b6 <__moddi3+0x2c2>
1101c01c:	659c      	cmphs      	r7, r6
1101c01e:	0c05      	bf      	0x1101c028	// 1101c028 <__moddi3+0x134>
1101c020:	9860      	ld.w      	r3, (r14, 0x0)
1101c022:	9841      	ld.w      	r2, (r14, 0x4)
1101c024:	64c8      	cmphs      	r2, r3
1101c026:	0d5a      	bf      	0x1101c2da	// 1101c2da <__moddi3+0x3e6>
1101c028:	9841      	ld.w      	r2, (r14, 0x4)
1101c02a:	9820      	ld.w      	r1, (r14, 0x0)
1101c02c:	5a65      	subu      	r3, r2, r1
1101c02e:	64c8      	cmphs      	r2, r3
1101c030:	619e      	subu      	r6, r7
1101c032:	6483      	mvcv      	r2
1101c034:	618a      	subu      	r6, r2
1101c036:	6c0f      	mov      	r0, r3
1101c038:	6c5b      	mov      	r1, r6
1101c03a:	07d0      	br      	0x1101bfda	// 1101bfda <__moddi3+0xe6>
1101c03c:	9860      	ld.w      	r3, (r14, 0x0)
1101c03e:	3b40      	cmpnei      	r3, 0
1101c040:	0806      	bt      	0x1101c04c	// 1101c04c <__moddi3+0x158>
1101c042:	3100      	movi      	r1, 0
1101c044:	3001      	movi      	r0, 1
1101c046:	e3fffcdb 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101c04a:	b800      	st.w      	r0, (r14, 0x0)
1101c04c:	9860      	ld.w      	r3, (r14, 0x0)
1101c04e:	eb03ffff 	cmphsi      	r3, 65536
1101c052:	0c5f      	bf      	0x1101c110	// 1101c110 <__moddi3+0x21c>
1101c054:	c6e05023 	bmaski      	r3, 24
1101c058:	9840      	ld.w      	r2, (r14, 0x0)
1101c05a:	3718      	movi      	r7, 24
1101c05c:	648c      	cmphs      	r3, r2
1101c05e:	3310      	movi      	r3, 16
1101c060:	c4e30c40 	inct      	r7, r3, 0
1101c064:	9840      	ld.w      	r2, (r14, 0x0)
1101c066:	6ccb      	mov      	r3, r2
1101c068:	70dd      	lsr      	r3, r7
1101c06a:	023e      	lrw      	r1, 0x110110e4	// 1101c2ec <__moddi3+0x3f8>
1101c06c:	60c4      	addu      	r3, r1
1101c06e:	8360      	ld.b      	r3, (r3, 0x0)
1101c070:	61cc      	addu      	r7, r3
1101c072:	3320      	movi      	r3, 32
1101c074:	60de      	subu      	r3, r7
1101c076:	3b40      	cmpnei      	r3, 0
1101c078:	b863      	st.w      	r3, (r14, 0xc)
1101c07a:	085d      	bt      	0x1101c134	// 1101c134 <__moddi3+0x240>
1101c07c:	4a90      	lsri      	r4, r2, 16
1101c07e:	75c9      	zexth      	r7, r2
1101c080:	618a      	subu      	r6, r2
1101c082:	6c53      	mov      	r1, r4
1101c084:	6c1b      	mov      	r0, r6
1101c086:	e3fffd09 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101c08a:	6d43      	mov      	r5, r0
1101c08c:	6c53      	mov      	r1, r4
1101c08e:	6c1b      	mov      	r0, r6
1101c090:	45b0      	lsli      	r5, r5, 16
1101c092:	e3fffcb5 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101c096:	9861      	ld.w      	r3, (r14, 0x4)
1101c098:	4bd0      	lsri      	r6, r3, 16
1101c09a:	7c1c      	mult      	r0, r7
1101c09c:	6d94      	or      	r6, r5
1101c09e:	6418      	cmphs      	r6, r0
1101c0a0:	0809      	bt      	0x1101c0b2	// 1101c0b2 <__moddi3+0x1be>
1101c0a2:	9860      	ld.w      	r3, (r14, 0x0)
1101c0a4:	618c      	addu      	r6, r3
1101c0a6:	64d8      	cmphs      	r6, r3
1101c0a8:	0c05      	bf      	0x1101c0b2	// 1101c0b2 <__moddi3+0x1be>
1101c0aa:	6418      	cmphs      	r6, r0
1101c0ac:	60d8      	addu      	r3, r6
1101c0ae:	c4c30c20 	incf      	r6, r3, 0
1101c0b2:	6182      	subu      	r6, r0
1101c0b4:	6c53      	mov      	r1, r4
1101c0b6:	6c1b      	mov      	r0, r6
1101c0b8:	e3fffcf0 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101c0bc:	6d43      	mov      	r5, r0
1101c0be:	6c53      	mov      	r1, r4
1101c0c0:	6c1b      	mov      	r0, r6
1101c0c2:	45b0      	lsli      	r5, r5, 16
1101c0c4:	e3fffc9c 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101c0c8:	d86e1002 	ld.h      	r3, (r14, 0x4)
1101c0cc:	74cd      	zexth      	r3, r3
1101c0ce:	7dc0      	mult      	r7, r0
1101c0d0:	6d4c      	or      	r5, r3
1101c0d2:	65d4      	cmphs      	r5, r7
1101c0d4:	0809      	bt      	0x1101c0e6	// 1101c0e6 <__moddi3+0x1f2>
1101c0d6:	9860      	ld.w      	r3, (r14, 0x0)
1101c0d8:	614c      	addu      	r5, r3
1101c0da:	64d4      	cmphs      	r5, r3
1101c0dc:	0c05      	bf      	0x1101c0e6	// 1101c0e6 <__moddi3+0x1f2>
1101c0de:	65d4      	cmphs      	r5, r7
1101c0e0:	60d4      	addu      	r3, r5
1101c0e2:	c4a30c20 	incf      	r5, r3, 0
1101c0e6:	615e      	subu      	r5, r7
1101c0e8:	0770      	br      	0x1101bfc8	// 1101bfc8 <__moddi3+0xd4>
1101c0ea:	3000      	movi      	r0, 0
1101c0ec:	3100      	movi      	r1, 0
1101c0ee:	6488      	cmphs      	r2, r2
1101c0f0:	c4400102 	subc      	r2, r0, r2
1101c0f4:	c4610103 	subc      	r3, r1, r3
1101c0f8:	0709      	br      	0x1101bf0a	// 1101bf0a <__moddi3+0x16>
1101c0fa:	3100      	movi      	r1, 0
1101c0fc:	3000      	movi      	r0, 0
1101c0fe:	6510      	cmphs      	r4, r4
1101c100:	c4800104 	subc      	r4, r0, r4
1101c104:	c4a10105 	subc      	r5, r1, r5
1101c108:	3100      	movi      	r1, 0
1101c10a:	2900      	subi      	r1, 1
1101c10c:	b822      	st.w      	r1, (r14, 0x8)
1101c10e:	06fc      	br      	0x1101bf06	// 1101bf06 <__moddi3+0x12>
1101c110:	eb0300ff 	cmphsi      	r3, 256
1101c114:	3308      	movi      	r3, 8
1101c116:	c4e30c40 	inct      	r7, r3, 0
1101c11a:	07a5      	br      	0x1101c064	// 1101c064 <__moddi3+0x170>
1101c11c:	eb0200ff 	cmphsi      	r2, 256
1101c120:	3308      	movi      	r3, 8
1101c122:	c4e30c40 	inct      	r7, r3, 0
1101c126:	0705      	br      	0x1101bf30	// 1101bf30 <__moddi3+0x3c>
1101c128:	eb0300ff 	cmphsi      	r3, 256
1101c12c:	c4000502 	mvc      	r2
1101c130:	4243      	lsli      	r2, r2, 3
1101c132:	076a      	br      	0x1101c006	// 1101c006 <__moddi3+0x112>
1101c134:	9843      	ld.w      	r2, (r14, 0xc)
1101c136:	9821      	ld.w      	r1, (r14, 0x4)
1101c138:	c4e64045 	lsr      	r5, r6, r7
1101c13c:	9860      	ld.w      	r3, (r14, 0x0)
1101c13e:	7188      	lsl      	r6, r2
1101c140:	c4e14047 	lsr      	r7, r1, r7
1101c144:	70c8      	lsl      	r3, r2
1101c146:	c4c72420 	or      	r0, r7, r6
1101c14a:	7048      	lsl      	r1, r2
1101c14c:	4b90      	lsri      	r4, r3, 16
1101c14e:	b804      	st.w      	r0, (r14, 0x10)
1101c150:	b821      	st.w      	r1, (r14, 0x4)
1101c152:	6c17      	mov      	r0, r5
1101c154:	6c53      	mov      	r1, r4
1101c156:	75cd      	zexth      	r7, r3
1101c158:	b860      	st.w      	r3, (r14, 0x0)
1101c15a:	e3fffc9f 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101c15e:	6d83      	mov      	r6, r0
1101c160:	6c53      	mov      	r1, r4
1101c162:	6c17      	mov      	r0, r5
1101c164:	46d0      	lsli      	r6, r6, 16
1101c166:	e3fffc4b 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101c16a:	9844      	ld.w      	r2, (r14, 0x10)
1101c16c:	4ab0      	lsri      	r5, r2, 16
1101c16e:	7c1c      	mult      	r0, r7
1101c170:	6d58      	or      	r5, r6
1101c172:	6414      	cmphs      	r5, r0
1101c174:	0805      	bt      	0x1101c17e	// 1101c17e <__moddi3+0x28a>
1101c176:	9860      	ld.w      	r3, (r14, 0x0)
1101c178:	614c      	addu      	r5, r3
1101c17a:	64d4      	cmphs      	r5, r3
1101c17c:	08aa      	bt      	0x1101c2d0	// 1101c2d0 <__moddi3+0x3dc>
1101c17e:	6142      	subu      	r5, r0
1101c180:	6c53      	mov      	r1, r4
1101c182:	6c17      	mov      	r0, r5
1101c184:	e3fffc8a 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101c188:	6d83      	mov      	r6, r0
1101c18a:	6c53      	mov      	r1, r4
1101c18c:	6c17      	mov      	r0, r5
1101c18e:	e3fffc37 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101c192:	d84e1008 	ld.h      	r2, (r14, 0x10)
1101c196:	4670      	lsli      	r3, r6, 16
1101c198:	7589      	zexth      	r6, r2
1101c19a:	7c1c      	mult      	r0, r7
1101c19c:	6d8c      	or      	r6, r3
1101c19e:	6418      	cmphs      	r6, r0
1101c1a0:	0809      	bt      	0x1101c1b2	// 1101c1b2 <__moddi3+0x2be>
1101c1a2:	9860      	ld.w      	r3, (r14, 0x0)
1101c1a4:	618c      	addu      	r6, r3
1101c1a6:	64d8      	cmphs      	r6, r3
1101c1a8:	0c05      	bf      	0x1101c1b2	// 1101c1b2 <__moddi3+0x2be>
1101c1aa:	6418      	cmphs      	r6, r0
1101c1ac:	60d8      	addu      	r3, r6
1101c1ae:	c4c30c20 	incf      	r6, r3, 0
1101c1b2:	6182      	subu      	r6, r0
1101c1b4:	0767      	br      	0x1101c082	// 1101c082 <__moddi3+0x18e>
1101c1b6:	9800      	ld.w      	r0, (r14, 0x0)
1101c1b8:	9843      	ld.w      	r2, (r14, 0xc)
1101c1ba:	c4404043 	lsr      	r3, r0, r2
1101c1be:	71d0      	lsl      	r7, r4
1101c1c0:	6cdc      	or      	r3, r7
1101c1c2:	6c4f      	mov      	r1, r3
1101c1c4:	6cc3      	mov      	r3, r0
1101c1c6:	70d0      	lsl      	r3, r4
1101c1c8:	c4464047 	lsr      	r7, r6, r2
1101c1cc:	b864      	st.w      	r3, (r14, 0x10)
1101c1ce:	6ccb      	mov      	r3, r2
1101c1d0:	9841      	ld.w      	r2, (r14, 0x4)
1101c1d2:	7190      	lsl      	r6, r4
1101c1d4:	c4624043 	lsr      	r3, r2, r3
1101c1d8:	6cd8      	or      	r3, r6
1101c1da:	7090      	lsl      	r2, r4
1101c1dc:	49d0      	lsri      	r6, r1, 16
1101c1de:	b846      	st.w      	r2, (r14, 0x18)
1101c1e0:	b825      	st.w      	r1, (r14, 0x14)
1101c1e2:	7485      	zexth      	r2, r1
1101c1e4:	6c1f      	mov      	r0, r7
1101c1e6:	6c5b      	mov      	r1, r6
1101c1e8:	b860      	st.w      	r3, (r14, 0x0)
1101c1ea:	b841      	st.w      	r2, (r14, 0x4)
1101c1ec:	e3fffc56 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101c1f0:	6d43      	mov      	r5, r0
1101c1f2:	6c5b      	mov      	r1, r6
1101c1f4:	6c1f      	mov      	r0, r7
1101c1f6:	e3fffc03 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101c1fa:	9841      	ld.w      	r2, (r14, 0x4)
1101c1fc:	c4028423 	mult      	r3, r2, r0
1101c200:	6dc3      	mov      	r7, r0
1101c202:	9800      	ld.w      	r0, (r14, 0x0)
1101c204:	4550      	lsli      	r2, r5, 16
1101c206:	48b0      	lsri      	r5, r0, 16
1101c208:	6d48      	or      	r5, r2
1101c20a:	64d4      	cmphs      	r5, r3
1101c20c:	080a      	bt      	0x1101c220	// 1101c220 <__moddi3+0x32c>
1101c20e:	9825      	ld.w      	r1, (r14, 0x14)
1101c210:	6144      	addu      	r5, r1
1101c212:	6454      	cmphs      	r5, r1
1101c214:	5f43      	subi      	r2, r7, 1
1101c216:	0c5b      	bf      	0x1101c2cc	// 1101c2cc <__moddi3+0x3d8>
1101c218:	64d4      	cmphs      	r5, r3
1101c21a:	0859      	bt      	0x1101c2cc	// 1101c2cc <__moddi3+0x3d8>
1101c21c:	2f01      	subi      	r7, 2
1101c21e:	6144      	addu      	r5, r1
1101c220:	614e      	subu      	r5, r3
1101c222:	6c5b      	mov      	r1, r6
1101c224:	6c17      	mov      	r0, r5
1101c226:	e3fffc39 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101c22a:	6c5b      	mov      	r1, r6
1101c22c:	b807      	st.w      	r0, (r14, 0x1c)
1101c22e:	6c17      	mov      	r0, r5
1101c230:	e3fffbe6 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101c234:	9867      	ld.w      	r3, (r14, 0x1c)
1101c236:	d82e1000 	ld.h      	r1, (r14, 0x0)
1101c23a:	9841      	ld.w      	r2, (r14, 0x4)
1101c23c:	4370      	lsli      	r3, r3, 16
1101c23e:	7585      	zexth      	r6, r1
1101c240:	7c80      	mult      	r2, r0
1101c242:	6cd8      	or      	r3, r6
1101c244:	648c      	cmphs      	r3, r2
1101c246:	080a      	bt      	0x1101c25a	// 1101c25a <__moddi3+0x366>
1101c248:	98a5      	ld.w      	r5, (r14, 0x14)
1101c24a:	60d4      	addu      	r3, r5
1101c24c:	654c      	cmphs      	r3, r5
1101c24e:	5823      	subi      	r1, r0, 1
1101c250:	0c3c      	bf      	0x1101c2c8	// 1101c2c8 <__moddi3+0x3d4>
1101c252:	648c      	cmphs      	r3, r2
1101c254:	083a      	bt      	0x1101c2c8	// 1101c2c8 <__moddi3+0x3d4>
1101c256:	2801      	subi      	r0, 2
1101c258:	60d4      	addu      	r3, r5
1101c25a:	4730      	lsli      	r1, r7, 16
1101c25c:	6c40      	or      	r1, r0
1101c25e:	98a4      	ld.w      	r5, (r14, 0x10)
1101c260:	7415      	zexth      	r0, r5
1101c262:	60ca      	subu      	r3, r2
1101c264:	7485      	zexth      	r2, r1
1101c266:	4930      	lsri      	r1, r1, 16
1101c268:	4dd0      	lsri      	r6, r5, 16
1101c26a:	c4028425 	mult      	r5, r2, r0
1101c26e:	7c04      	mult      	r0, r1
1101c270:	7c98      	mult      	r2, r6
1101c272:	7c58      	mult      	r1, r6
1101c274:	6080      	addu      	r2, r0
1101c276:	4dd0      	lsri      	r6, r5, 16
1101c278:	6098      	addu      	r2, r6
1101c27a:	6408      	cmphs      	r2, r0
1101c27c:	0804      	bt      	0x1101c284	// 1101c284 <__moddi3+0x390>
1101c27e:	ea200001 	movih      	r0, 1
1101c282:	6040      	addu      	r1, r0
1101c284:	4a10      	lsri      	r0, r2, 16
1101c286:	6040      	addu      	r1, r0
1101c288:	644c      	cmphs      	r3, r1
1101c28a:	4250      	lsli      	r2, r2, 16
1101c28c:	7555      	zexth      	r5, r5
1101c28e:	6094      	addu      	r2, r5
1101c290:	0c06      	bf      	0x1101c29c	// 1101c29c <__moddi3+0x3a8>
1101c292:	644e      	cmpne      	r3, r1
1101c294:	0c25      	bf      	0x1101c2de	// 1101c2de <__moddi3+0x3ea>
1101c296:	60c6      	subu      	r3, r1
1101c298:	6d4b      	mov      	r5, r2
1101c29a:	0409      	br      	0x1101c2ac	// 1101c2ac <__moddi3+0x3b8>
1101c29c:	9804      	ld.w      	r0, (r14, 0x10)
1101c29e:	5aa1      	subu      	r5, r2, r0
1101c2a0:	6548      	cmphs      	r2, r5
1101c2a2:	9805      	ld.w      	r0, (r14, 0x14)
1101c2a4:	6483      	mvcv      	r2
1101c2a6:	6042      	subu      	r1, r0
1101c2a8:	604a      	subu      	r1, r2
1101c2aa:	60c6      	subu      	r3, r1
1101c2ac:	9846      	ld.w      	r2, (r14, 0x18)
1101c2ae:	5ab5      	subu      	r5, r2, r5
1101c2b0:	6548      	cmphs      	r2, r5
1101c2b2:	6483      	mvcv      	r2
1101c2b4:	60ca      	subu      	r3, r2
1101c2b6:	9843      	ld.w      	r2, (r14, 0xc)
1101c2b8:	c4434022 	lsl      	r2, r3, r2
1101c2bc:	7151      	lsr      	r5, r4
1101c2be:	c4a22420 	or      	r0, r2, r5
1101c2c2:	c4834041 	lsr      	r1, r3, r4
1101c2c6:	068a      	br      	0x1101bfda	// 1101bfda <__moddi3+0xe6>
1101c2c8:	6c07      	mov      	r0, r1
1101c2ca:	07c8      	br      	0x1101c25a	// 1101c25a <__moddi3+0x366>
1101c2cc:	6dcb      	mov      	r7, r2
1101c2ce:	07a9      	br      	0x1101c220	// 1101c220 <__moddi3+0x32c>
1101c2d0:	6414      	cmphs      	r5, r0
1101c2d2:	60d4      	addu      	r3, r5
1101c2d4:	c4a30c20 	incf      	r5, r3, 0
1101c2d8:	0753      	br      	0x1101c17e	// 1101c17e <__moddi3+0x28a>
1101c2da:	9861      	ld.w      	r3, (r14, 0x4)
1101c2dc:	06ad      	br      	0x1101c036	// 1101c036 <__moddi3+0x142>
1101c2de:	9806      	ld.w      	r0, (r14, 0x18)
1101c2e0:	6480      	cmphs      	r0, r2
1101c2e2:	0fdd      	bf      	0x1101c29c	// 1101c29c <__moddi3+0x3a8>
1101c2e4:	6d4b      	mov      	r5, r2
1101c2e6:	3300      	movi      	r3, 0
1101c2e8:	07e2      	br      	0x1101c2ac	// 1101c2ac <__moddi3+0x3b8>
1101c2ea:	0000      	bkpt
1101c2ec:	110110e4 	.long	0x110110e4

1101c2f0 <__udivdi3>:
1101c2f0:	14d4      	push      	r4-r7, r15
1101c2f2:	1426      	subi      	r14, r14, 24
1101c2f4:	6d87      	mov      	r6, r1
1101c2f6:	3b40      	cmpnei      	r3, 0
1101c2f8:	6dc3      	mov      	r7, r0
1101c2fa:	6c4f      	mov      	r1, r3
1101c2fc:	6d4b      	mov      	r5, r2
1101c2fe:	b800      	st.w      	r0, (r14, 0x0)
1101c300:	6d1b      	mov      	r4, r6
1101c302:	085e      	bt      	0x1101c3be	// 1101c3be <__udivdi3+0xce>
1101c304:	6498      	cmphs      	r6, r2
1101c306:	0879      	bt      	0x1101c3f8	// 1101c3f8 <__udivdi3+0x108>
1101c308:	eb02ffff 	cmphsi      	r2, 65536
1101c30c:	0ce0      	bf      	0x1101c4cc	// 1101c4cc <__udivdi3+0x1dc>
1101c30e:	c6e05023 	bmaski      	r3, 24
1101c312:	3118      	movi      	r1, 24
1101c314:	648c      	cmphs      	r3, r2
1101c316:	3310      	movi      	r3, 16
1101c318:	c4610c20 	incf      	r3, r1, 0
1101c31c:	c4624041 	lsr      	r1, r2, r3
1101c320:	001e      	lrw      	r0, 0x110110e4	// 1101c6a4 <__udivdi3+0x3b4>
1101c322:	6040      	addu      	r1, r0
1101c324:	8120      	ld.b      	r1, (r1, 0x0)
1101c326:	60c4      	addu      	r3, r1
1101c328:	3120      	movi      	r1, 32
1101c32a:	604e      	subu      	r1, r3
1101c32c:	3940      	cmpnei      	r1, 0
1101c32e:	0c0a      	bf      	0x1101c342	// 1101c342 <__udivdi3+0x52>
1101c330:	c4674044 	lsr      	r4, r7, r3
1101c334:	c4274023 	lsl      	r3, r7, r1
1101c338:	7184      	lsl      	r6, r1
1101c33a:	c4224025 	lsl      	r5, r2, r1
1101c33e:	6d18      	or      	r4, r6
1101c340:	b860      	st.w      	r3, (r14, 0x0)
1101c342:	4df0      	lsri      	r7, r5, 16
1101c344:	6c5f      	mov      	r1, r7
1101c346:	6c13      	mov      	r0, r4
1101c348:	7595      	zexth      	r6, r5
1101c34a:	e3fffba7 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101c34e:	6c5f      	mov      	r1, r7
1101c350:	b801      	st.w      	r0, (r14, 0x4)
1101c352:	6c13      	mov      	r0, r4
1101c354:	e3fffb54 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101c358:	9861      	ld.w      	r3, (r14, 0x4)
1101c35a:	9820      	ld.w      	r1, (r14, 0x0)
1101c35c:	4370      	lsli      	r3, r3, 16
1101c35e:	4930      	lsri      	r1, r1, 16
1101c360:	c4068422 	mult      	r2, r6, r0
1101c364:	6cc4      	or      	r3, r1
1101c366:	6d03      	mov      	r4, r0
1101c368:	648c      	cmphs      	r3, r2
1101c36a:	0808      	bt      	0x1101c37a	// 1101c37a <__udivdi3+0x8a>
1101c36c:	60d4      	addu      	r3, r5
1101c36e:	654c      	cmphs      	r3, r5
1101c370:	5823      	subi      	r1, r0, 1
1101c372:	0c03      	bf      	0x1101c378	// 1101c378 <__udivdi3+0x88>
1101c374:	648c      	cmphs      	r3, r2
1101c376:	0d93      	bf      	0x1101c69c	// 1101c69c <__udivdi3+0x3ac>
1101c378:	6d07      	mov      	r4, r1
1101c37a:	60ca      	subu      	r3, r2
1101c37c:	6c5f      	mov      	r1, r7
1101c37e:	6c0f      	mov      	r0, r3
1101c380:	b862      	st.w      	r3, (r14, 0x8)
1101c382:	e3fffb8b 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101c386:	9862      	ld.w      	r3, (r14, 0x8)
1101c388:	b801      	st.w      	r0, (r14, 0x4)
1101c38a:	6c5f      	mov      	r1, r7
1101c38c:	6c0f      	mov      	r0, r3
1101c38e:	e3fffb37 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101c392:	9841      	ld.w      	r2, (r14, 0x4)
1101c394:	d86e1000 	ld.h      	r3, (r14, 0x0)
1101c398:	4250      	lsli      	r2, r2, 16
1101c39a:	74cd      	zexth      	r3, r3
1101c39c:	7d80      	mult      	r6, r0
1101c39e:	6c8c      	or      	r2, r3
1101c3a0:	6588      	cmphs      	r2, r6
1101c3a2:	0808      	bt      	0x1101c3b2	// 1101c3b2 <__udivdi3+0xc2>
1101c3a4:	6094      	addu      	r2, r5
1101c3a6:	6548      	cmphs      	r2, r5
1101c3a8:	5863      	subi      	r3, r0, 1
1101c3aa:	0d58      	bf      	0x1101c65a	// 1101c65a <__udivdi3+0x36a>
1101c3ac:	6588      	cmphs      	r2, r6
1101c3ae:	0956      	bt      	0x1101c65a	// 1101c65a <__udivdi3+0x36a>
1101c3b0:	2801      	subi      	r0, 2
1101c3b2:	4490      	lsli      	r4, r4, 16
1101c3b4:	3600      	movi      	r6, 0
1101c3b6:	6c10      	or      	r0, r4
1101c3b8:	6c5b      	mov      	r1, r6
1101c3ba:	1406      	addi      	r14, r14, 24
1101c3bc:	1494      	pop      	r4-r7, r15
1101c3be:	64d8      	cmphs      	r6, r3
1101c3c0:	0c7b      	bf      	0x1101c4b6	// 1101c4b6 <__udivdi3+0x1c6>
1101c3c2:	eb03ffff 	cmphsi      	r3, 65536
1101c3c6:	0c7d      	bf      	0x1101c4c0	// 1101c4c0 <__udivdi3+0x1d0>
1101c3c8:	c6e05023 	bmaski      	r3, 24
1101c3cc:	3018      	movi      	r0, 24
1101c3ce:	644c      	cmphs      	r3, r1
1101c3d0:	3310      	movi      	r3, 16
1101c3d2:	c4600c20 	incf      	r3, r0, 0
1101c3d6:	c4614040 	lsr      	r0, r1, r3
1101c3da:	028c      	lrw      	r4, 0x110110e4	// 1101c6a4 <__udivdi3+0x3b4>
1101c3dc:	6010      	addu      	r0, r4
1101c3de:	8000      	ld.b      	r0, (r0, 0x0)
1101c3e0:	600c      	addu      	r0, r3
1101c3e2:	3320      	movi      	r3, 32
1101c3e4:	5ba1      	subu      	r5, r3, r0
1101c3e6:	3d40      	cmpnei      	r5, 0
1101c3e8:	087e      	bt      	0x1101c4e4	// 1101c4e4 <__udivdi3+0x1f4>
1101c3ea:	6584      	cmphs      	r1, r6
1101c3ec:	0d43      	bf      	0x1101c672	// 1101c672 <__udivdi3+0x382>
1101c3ee:	649c      	cmphs      	r7, r2
1101c3f0:	c4000500 	mvc      	r0
1101c3f4:	3600      	movi      	r6, 0
1101c3f6:	0462      	br      	0x1101c4ba	// 1101c4ba <__udivdi3+0x1ca>
1101c3f8:	3a40      	cmpnei      	r2, 0
1101c3fa:	0808      	bt      	0x1101c40a	// 1101c40a <__udivdi3+0x11a>
1101c3fc:	3100      	movi      	r1, 0
1101c3fe:	3001      	movi      	r0, 1
1101c400:	6d0f      	mov      	r4, r3
1101c402:	e3fffafd 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101c406:	6d43      	mov      	r5, r0
1101c408:	6cd3      	mov      	r3, r4
1101c40a:	eb05ffff 	cmphsi      	r5, 65536
1101c40e:	0c65      	bf      	0x1101c4d8	// 1101c4d8 <__udivdi3+0x1e8>
1101c410:	c6e05023 	bmaski      	r3, 24
1101c414:	3418      	movi      	r4, 24
1101c416:	654c      	cmphs      	r3, r5
1101c418:	3310      	movi      	r3, 16
1101c41a:	c4640c20 	incf      	r3, r4, 0
1101c41e:	c4654042 	lsr      	r2, r5, r3
1101c422:	023e      	lrw      	r1, 0x110110e4	// 1101c6a4 <__udivdi3+0x3b4>
1101c424:	6084      	addu      	r2, r1
1101c426:	8280      	ld.b      	r4, (r2, 0x0)
1101c428:	3220      	movi      	r2, 32
1101c42a:	60d0      	addu      	r3, r4
1101c42c:	608e      	subu      	r2, r3
1101c42e:	3a40      	cmpnei      	r2, 0
1101c430:	08c6      	bt      	0x1101c5bc	// 1101c5bc <__udivdi3+0x2cc>
1101c432:	74d5      	zexth      	r3, r5
1101c434:	5e95      	subu      	r4, r6, r5
1101c436:	4df0      	lsri      	r7, r5, 16
1101c438:	b861      	st.w      	r3, (r14, 0x4)
1101c43a:	3601      	movi      	r6, 1
1101c43c:	6c5f      	mov      	r1, r7
1101c43e:	6c13      	mov      	r0, r4
1101c440:	e3fffb2c 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101c444:	6c5f      	mov      	r1, r7
1101c446:	b802      	st.w      	r0, (r14, 0x8)
1101c448:	6c13      	mov      	r0, r4
1101c44a:	e3fffad9 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101c44e:	9861      	ld.w      	r3, (r14, 0x4)
1101c450:	c4608422 	mult      	r2, r0, r3
1101c454:	9862      	ld.w      	r3, (r14, 0x8)
1101c456:	4330      	lsli      	r1, r3, 16
1101c458:	9860      	ld.w      	r3, (r14, 0x0)
1101c45a:	4b70      	lsri      	r3, r3, 16
1101c45c:	6cc4      	or      	r3, r1
1101c45e:	6d03      	mov      	r4, r0
1101c460:	648c      	cmphs      	r3, r2
1101c462:	0808      	bt      	0x1101c472	// 1101c472 <__udivdi3+0x182>
1101c464:	60d4      	addu      	r3, r5
1101c466:	654c      	cmphs      	r3, r5
1101c468:	5823      	subi      	r1, r0, 1
1101c46a:	0c03      	bf      	0x1101c470	// 1101c470 <__udivdi3+0x180>
1101c46c:	648c      	cmphs      	r3, r2
1101c46e:	0d14      	bf      	0x1101c696	// 1101c696 <__udivdi3+0x3a6>
1101c470:	6d07      	mov      	r4, r1
1101c472:	60ca      	subu      	r3, r2
1101c474:	6c5f      	mov      	r1, r7
1101c476:	6c0f      	mov      	r0, r3
1101c478:	b863      	st.w      	r3, (r14, 0xc)
1101c47a:	e3fffb0f 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101c47e:	9863      	ld.w      	r3, (r14, 0xc)
1101c480:	b802      	st.w      	r0, (r14, 0x8)
1101c482:	6c5f      	mov      	r1, r7
1101c484:	6c0f      	mov      	r0, r3
1101c486:	e3fffabb 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101c48a:	9842      	ld.w      	r2, (r14, 0x8)
1101c48c:	d86e1000 	ld.h      	r3, (r14, 0x0)
1101c490:	9821      	ld.w      	r1, (r14, 0x4)
1101c492:	4250      	lsli      	r2, r2, 16
1101c494:	74cd      	zexth      	r3, r3
1101c496:	7c40      	mult      	r1, r0
1101c498:	6cc8      	or      	r3, r2
1101c49a:	644c      	cmphs      	r3, r1
1101c49c:	0808      	bt      	0x1101c4ac	// 1101c4ac <__udivdi3+0x1bc>
1101c49e:	60d4      	addu      	r3, r5
1101c4a0:	654c      	cmphs      	r3, r5
1101c4a2:	5843      	subi      	r2, r0, 1
1101c4a4:	0cd9      	bf      	0x1101c656	// 1101c656 <__udivdi3+0x366>
1101c4a6:	644c      	cmphs      	r3, r1
1101c4a8:	08d7      	bt      	0x1101c656	// 1101c656 <__udivdi3+0x366>
1101c4aa:	2801      	subi      	r0, 2
1101c4ac:	4490      	lsli      	r4, r4, 16
1101c4ae:	6c10      	or      	r0, r4
1101c4b0:	6c5b      	mov      	r1, r6
1101c4b2:	1406      	addi      	r14, r14, 24
1101c4b4:	1494      	pop      	r4-r7, r15
1101c4b6:	3600      	movi      	r6, 0
1101c4b8:	3000      	movi      	r0, 0
1101c4ba:	6c5b      	mov      	r1, r6
1101c4bc:	1406      	addi      	r14, r14, 24
1101c4be:	1494      	pop      	r4-r7, r15
1101c4c0:	eb0300ff 	cmphsi      	r3, 256
1101c4c4:	c4000500 	mvc      	r0
1101c4c8:	4063      	lsli      	r3, r0, 3
1101c4ca:	0786      	br      	0x1101c3d6	// 1101c3d6 <__udivdi3+0xe6>
1101c4cc:	eb0200ff 	cmphsi      	r2, 256
1101c4d0:	3108      	movi      	r1, 8
1101c4d2:	c4610c40 	inct      	r3, r1, 0
1101c4d6:	0723      	br      	0x1101c31c	// 1101c31c <__udivdi3+0x2c>
1101c4d8:	eb0500ff 	cmphsi      	r5, 256
1101c4dc:	3208      	movi      	r2, 8
1101c4de:	c4620c40 	inct      	r3, r2, 0
1101c4e2:	079e      	br      	0x1101c41e	// 1101c41e <__udivdi3+0x12e>
1101c4e4:	c4024043 	lsr      	r3, r2, r0
1101c4e8:	7054      	lsl      	r1, r5
1101c4ea:	6cc4      	or      	r3, r1
1101c4ec:	6c4f      	mov      	r1, r3
1101c4ee:	c4a24023 	lsl      	r3, r2, r5
1101c4f2:	b823      	st.w      	r1, (r14, 0xc)
1101c4f4:	b864      	st.w      	r3, (r14, 0x10)
1101c4f6:	c4064043 	lsr      	r3, r6, r0
1101c4fa:	7194      	lsl      	r6, r5
1101c4fc:	c4074040 	lsr      	r0, r7, r0
1101c500:	c4c02422 	or      	r2, r0, r6
1101c504:	7405      	zexth      	r0, r1
1101c506:	49d0      	lsri      	r6, r1, 16
1101c508:	b801      	st.w      	r0, (r14, 0x4)
1101c50a:	6c5b      	mov      	r1, r6
1101c50c:	6c0f      	mov      	r0, r3
1101c50e:	b840      	st.w      	r2, (r14, 0x0)
1101c510:	b862      	st.w      	r3, (r14, 0x8)
1101c512:	e3fffac3 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101c516:	9862      	ld.w      	r3, (r14, 0x8)
1101c518:	6d03      	mov      	r4, r0
1101c51a:	6c5b      	mov      	r1, r6
1101c51c:	6c0f      	mov      	r0, r3
1101c51e:	e3fffa6f 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101c522:	4450      	lsli      	r2, r4, 16
1101c524:	9880      	ld.w      	r4, (r14, 0x0)
1101c526:	9821      	ld.w      	r1, (r14, 0x4)
1101c528:	4c90      	lsri      	r4, r4, 16
1101c52a:	c4018423 	mult      	r3, r1, r0
1101c52e:	6d08      	or      	r4, r2
1101c530:	b802      	st.w      	r0, (r14, 0x8)
1101c532:	64d0      	cmphs      	r4, r3
1101c534:	0807      	bt      	0x1101c542	// 1101c542 <__udivdi3+0x252>
1101c536:	9823      	ld.w      	r1, (r14, 0xc)
1101c538:	6104      	addu      	r4, r1
1101c53a:	6450      	cmphs      	r4, r1
1101c53c:	5843      	subi      	r2, r0, 1
1101c53e:	08a2      	bt      	0x1101c682	// 1101c682 <__udivdi3+0x392>
1101c540:	b842      	st.w      	r2, (r14, 0x8)
1101c542:	610e      	subu      	r4, r3
1101c544:	6c5b      	mov      	r1, r6
1101c546:	6c13      	mov      	r0, r4
1101c548:	e3fffaa8 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101c54c:	6c5b      	mov      	r1, r6
1101c54e:	b805      	st.w      	r0, (r14, 0x14)
1101c550:	6c13      	mov      	r0, r4
1101c552:	e3fffa55 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101c556:	9865      	ld.w      	r3, (r14, 0x14)
1101c558:	d82e1000 	ld.h      	r1, (r14, 0x0)
1101c55c:	9841      	ld.w      	r2, (r14, 0x4)
1101c55e:	4370      	lsli      	r3, r3, 16
1101c560:	7445      	zexth      	r1, r1
1101c562:	7c80      	mult      	r2, r0
1101c564:	6cc4      	or      	r3, r1
1101c566:	648c      	cmphs      	r3, r2
1101c568:	0807      	bt      	0x1101c576	// 1101c576 <__udivdi3+0x286>
1101c56a:	9883      	ld.w      	r4, (r14, 0xc)
1101c56c:	60d0      	addu      	r3, r4
1101c56e:	650c      	cmphs      	r3, r4
1101c570:	5823      	subi      	r1, r0, 1
1101c572:	0883      	bt      	0x1101c678	// 1101c678 <__udivdi3+0x388>
1101c574:	6c07      	mov      	r0, r1
1101c576:	60ca      	subu      	r3, r2
1101c578:	b860      	st.w      	r3, (r14, 0x0)
1101c57a:	9862      	ld.w      	r3, (r14, 0x8)
1101c57c:	43d0      	lsli      	r6, r3, 16
1101c57e:	6c18      	or      	r0, r6
1101c580:	98c4      	ld.w      	r6, (r14, 0x10)
1101c582:	7519      	zexth      	r4, r6
1101c584:	7481      	zexth      	r2, r0
1101c586:	4830      	lsri      	r1, r0, 16
1101c588:	c4828423 	mult      	r3, r2, r4
1101c58c:	7d04      	mult      	r4, r1
1101c58e:	4ed0      	lsri      	r6, r6, 16
1101c590:	7c98      	mult      	r2, r6
1101c592:	7c58      	mult      	r1, r6
1101c594:	6090      	addu      	r2, r4
1101c596:	4bd0      	lsri      	r6, r3, 16
1101c598:	6098      	addu      	r2, r6
1101c59a:	6508      	cmphs      	r2, r4
1101c59c:	b861      	st.w      	r3, (r14, 0x4)
1101c59e:	0804      	bt      	0x1101c5a6	// 1101c5a6 <__udivdi3+0x2b6>
1101c5a0:	ea230001 	movih      	r3, 1
1101c5a4:	604c      	addu      	r1, r3
1101c5a6:	9860      	ld.w      	r3, (r14, 0x0)
1101c5a8:	4a90      	lsri      	r4, r2, 16
1101c5aa:	6050      	addu      	r1, r4
1101c5ac:	644c      	cmphs      	r3, r1
1101c5ae:	0c60      	bf      	0x1101c66e	// 1101c66e <__udivdi3+0x37e>
1101c5b0:	644e      	cmpne      	r3, r1
1101c5b2:	0c56      	bf      	0x1101c65e	// 1101c65e <__udivdi3+0x36e>
1101c5b4:	3600      	movi      	r6, 0
1101c5b6:	6c5b      	mov      	r1, r6
1101c5b8:	1406      	addi      	r14, r14, 24
1101c5ba:	1494      	pop      	r4-r7, r15
1101c5bc:	7148      	lsl      	r5, r2
1101c5be:	c4664044 	lsr      	r4, r6, r3
1101c5c2:	7188      	lsl      	r6, r2
1101c5c4:	c4674043 	lsr      	r3, r7, r3
1101c5c8:	c4474022 	lsl      	r2, r7, r2
1101c5cc:	4df0      	lsri      	r7, r5, 16
1101c5ce:	b840      	st.w      	r2, (r14, 0x0)
1101c5d0:	6c5f      	mov      	r1, r7
1101c5d2:	7495      	zexth      	r2, r5
1101c5d4:	6c13      	mov      	r0, r4
1101c5d6:	6cd8      	or      	r3, r6
1101c5d8:	b862      	st.w      	r3, (r14, 0x8)
1101c5da:	b841      	st.w      	r2, (r14, 0x4)
1101c5dc:	e3fffa5e 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101c5e0:	6d83      	mov      	r6, r0
1101c5e2:	6c5f      	mov      	r1, r7
1101c5e4:	6c13      	mov      	r0, r4
1101c5e6:	e3fffa0b 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101c5ea:	7495      	zexth      	r2, r5
1101c5ec:	c4028423 	mult      	r3, r2, r0
1101c5f0:	6c43      	mov      	r1, r0
1101c5f2:	b803      	st.w      	r0, (r14, 0xc)
1101c5f4:	9802      	ld.w      	r0, (r14, 0x8)
1101c5f6:	4650      	lsli      	r2, r6, 16
1101c5f8:	48d0      	lsri      	r6, r0, 16
1101c5fa:	6d88      	or      	r6, r2
1101c5fc:	64d8      	cmphs      	r6, r3
1101c5fe:	080c      	bt      	0x1101c616	// 1101c616 <__udivdi3+0x326>
1101c600:	6194      	addu      	r6, r5
1101c602:	6558      	cmphs      	r6, r5
1101c604:	6c87      	mov      	r2, r1
1101c606:	2a00      	subi      	r2, 1
1101c608:	0c45      	bf      	0x1101c692	// 1101c692 <__udivdi3+0x3a2>
1101c60a:	64d8      	cmphs      	r6, r3
1101c60c:	0843      	bt      	0x1101c692	// 1101c692 <__udivdi3+0x3a2>
1101c60e:	6c87      	mov      	r2, r1
1101c610:	2a01      	subi      	r2, 2
1101c612:	b843      	st.w      	r2, (r14, 0xc)
1101c614:	6194      	addu      	r6, r5
1101c616:	618e      	subu      	r6, r3
1101c618:	6c5f      	mov      	r1, r7
1101c61a:	6c1b      	mov      	r0, r6
1101c61c:	e3fffa3e 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101c620:	6d03      	mov      	r4, r0
1101c622:	6c5f      	mov      	r1, r7
1101c624:	6c1b      	mov      	r0, r6
1101c626:	4490      	lsli      	r4, r4, 16
1101c628:	e3fff9ea 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101c62c:	d84e1004 	ld.h      	r2, (r14, 0x8)
1101c630:	74d5      	zexth      	r3, r5
1101c632:	7589      	zexth      	r6, r2
1101c634:	7cc0      	mult      	r3, r0
1101c636:	6d90      	or      	r6, r4
1101c638:	64d8      	cmphs      	r6, r3
1101c63a:	0809      	bt      	0x1101c64c	// 1101c64c <__udivdi3+0x35c>
1101c63c:	6194      	addu      	r6, r5
1101c63e:	6558      	cmphs      	r6, r5
1101c640:	5843      	subi      	r2, r0, 1
1101c642:	0c26      	bf      	0x1101c68e	// 1101c68e <__udivdi3+0x39e>
1101c644:	64d8      	cmphs      	r6, r3
1101c646:	0824      	bt      	0x1101c68e	// 1101c68e <__udivdi3+0x39e>
1101c648:	2801      	subi      	r0, 2
1101c64a:	6194      	addu      	r6, r5
1101c64c:	5e8d      	subu      	r4, r6, r3
1101c64e:	9863      	ld.w      	r3, (r14, 0xc)
1101c650:	43d0      	lsli      	r6, r3, 16
1101c652:	6d80      	or      	r6, r0
1101c654:	06f4      	br      	0x1101c43c	// 1101c43c <__udivdi3+0x14c>
1101c656:	6c0b      	mov      	r0, r2
1101c658:	072a      	br      	0x1101c4ac	// 1101c4ac <__udivdi3+0x1bc>
1101c65a:	6c0f      	mov      	r0, r3
1101c65c:	06ab      	br      	0x1101c3b2	// 1101c3b2 <__udivdi3+0xc2>
1101c65e:	71d4      	lsl      	r7, r5
1101c660:	d86e1002 	ld.h      	r3, (r14, 0x4)
1101c664:	4250      	lsli      	r2, r2, 16
1101c666:	754d      	zexth      	r5, r3
1101c668:	6094      	addu      	r2, r5
1101c66a:	649c      	cmphs      	r7, r2
1101c66c:	0ba4      	bt      	0x1101c5b4	// 1101c5b4 <__udivdi3+0x2c4>
1101c66e:	2800      	subi      	r0, 1
1101c670:	07a2      	br      	0x1101c5b4	// 1101c5b4 <__udivdi3+0x2c4>
1101c672:	3600      	movi      	r6, 0
1101c674:	3001      	movi      	r0, 1
1101c676:	0722      	br      	0x1101c4ba	// 1101c4ba <__udivdi3+0x1ca>
1101c678:	648c      	cmphs      	r3, r2
1101c67a:	0b7d      	bt      	0x1101c574	// 1101c574 <__udivdi3+0x284>
1101c67c:	2801      	subi      	r0, 2
1101c67e:	60d0      	addu      	r3, r4
1101c680:	077b      	br      	0x1101c576	// 1101c576 <__udivdi3+0x286>
1101c682:	64d0      	cmphs      	r4, r3
1101c684:	0b5e      	bt      	0x1101c540	// 1101c540 <__udivdi3+0x250>
1101c686:	5847      	subi      	r2, r0, 2
1101c688:	6104      	addu      	r4, r1
1101c68a:	b842      	st.w      	r2, (r14, 0x8)
1101c68c:	075b      	br      	0x1101c542	// 1101c542 <__udivdi3+0x252>
1101c68e:	6c0b      	mov      	r0, r2
1101c690:	07de      	br      	0x1101c64c	// 1101c64c <__udivdi3+0x35c>
1101c692:	b843      	st.w      	r2, (r14, 0xc)
1101c694:	07c1      	br      	0x1101c616	// 1101c616 <__udivdi3+0x326>
1101c696:	2c01      	subi      	r4, 2
1101c698:	60d4      	addu      	r3, r5
1101c69a:	06ec      	br      	0x1101c472	// 1101c472 <__udivdi3+0x182>
1101c69c:	2c01      	subi      	r4, 2
1101c69e:	60d4      	addu      	r3, r5
1101c6a0:	066d      	br      	0x1101c37a	// 1101c37a <__udivdi3+0x8a>
1101c6a2:	0000      	bkpt
1101c6a4:	110110e4 	.long	0x110110e4

1101c6a8 <__muldf3>:
1101c6a8:	14d4      	push      	r4-r7, r15
1101c6aa:	143b      	subi      	r14, r14, 108
1101c6ac:	b86b      	st.w      	r3, (r14, 0x2c)
1101c6ae:	b808      	st.w      	r0, (r14, 0x20)
1101c6b0:	b829      	st.w      	r1, (r14, 0x24)
1101c6b2:	b84a      	st.w      	r2, (r14, 0x28)
1101c6b4:	190c      	addi      	r1, r14, 48
1101c6b6:	1808      	addi      	r0, r14, 32
1101c6b8:	e00002a4 	bsr      	0x1101cc00	// 1101cc00 <__unpack_d>
1101c6bc:	1911      	addi      	r1, r14, 68
1101c6be:	180a      	addi      	r0, r14, 40
1101c6c0:	e00002a0 	bsr      	0x1101cc00	// 1101cc00 <__unpack_d>
1101c6c4:	986c      	ld.w      	r3, (r14, 0x30)
1101c6c6:	3b01      	cmphsi      	r3, 2
1101c6c8:	0cad      	bf      	0x1101c822	// 1101c822 <__muldf3+0x17a>
1101c6ca:	9851      	ld.w      	r2, (r14, 0x44)
1101c6cc:	3a01      	cmphsi      	r2, 2
1101c6ce:	0c9d      	bf      	0x1101c808	// 1101c808 <__muldf3+0x160>
1101c6d0:	3b44      	cmpnei      	r3, 4
1101c6d2:	0ca6      	bf      	0x1101c81e	// 1101c81e <__muldf3+0x176>
1101c6d4:	3a44      	cmpnei      	r2, 4
1101c6d6:	0c97      	bf      	0x1101c804	// 1101c804 <__muldf3+0x15c>
1101c6d8:	3b42      	cmpnei      	r3, 2
1101c6da:	0ca4      	bf      	0x1101c822	// 1101c822 <__muldf3+0x17a>
1101c6dc:	3a42      	cmpnei      	r2, 2
1101c6de:	0c95      	bf      	0x1101c808	// 1101c808 <__muldf3+0x160>
1101c6e0:	98ef      	ld.w      	r7, (r14, 0x3c)
1101c6e2:	98b4      	ld.w      	r5, (r14, 0x50)
1101c6e4:	9875      	ld.w      	r3, (r14, 0x54)
1101c6e6:	6d8f      	mov      	r6, r3
1101c6e8:	6c9f      	mov      	r2, r7
1101c6ea:	3300      	movi      	r3, 0
1101c6ec:	6c17      	mov      	r0, r5
1101c6ee:	3100      	movi      	r1, 0
1101c6f0:	9890      	ld.w      	r4, (r14, 0x40)
1101c6f2:	e3fff9eb 	bsr      	0x1101bac8	// 1101bac8 <__muldi3>
1101c6f6:	6c9f      	mov      	r2, r7
1101c6f8:	b804      	st.w      	r0, (r14, 0x10)
1101c6fa:	b825      	st.w      	r1, (r14, 0x14)
1101c6fc:	3300      	movi      	r3, 0
1101c6fe:	6c1b      	mov      	r0, r6
1101c700:	3100      	movi      	r1, 0
1101c702:	b8c2      	st.w      	r6, (r14, 0x8)
1101c704:	e3fff9e2 	bsr      	0x1101bac8	// 1101bac8 <__muldi3>
1101c708:	6d83      	mov      	r6, r0
1101c70a:	6dc7      	mov      	r7, r1
1101c70c:	9842      	ld.w      	r2, (r14, 0x8)
1101c70e:	3300      	movi      	r3, 0
1101c710:	6c13      	mov      	r0, r4
1101c712:	3100      	movi      	r1, 0
1101c714:	e3fff9da 	bsr      	0x1101bac8	// 1101bac8 <__muldi3>
1101c718:	6c97      	mov      	r2, r5
1101c71a:	b806      	st.w      	r0, (r14, 0x18)
1101c71c:	b827      	st.w      	r1, (r14, 0x1c)
1101c71e:	3300      	movi      	r3, 0
1101c720:	6c13      	mov      	r0, r4
1101c722:	3100      	movi      	r1, 0
1101c724:	e3fff9d2 	bsr      	0x1101bac8	// 1101bac8 <__muldi3>
1101c728:	6401      	cmplt      	r0, r0
1101c72a:	6019      	addc      	r0, r6
1101c72c:	605d      	addc      	r1, r7
1101c72e:	65c4      	cmphs      	r1, r7
1101c730:	0c91      	bf      	0x1101c852	// 1101c852 <__muldf3+0x1aa>
1101c732:	645e      	cmpne      	r7, r1
1101c734:	0c8d      	bf      	0x1101c84e	// 1101c84e <__muldf3+0x1a6>
1101c736:	3300      	movi      	r3, 0
1101c738:	3400      	movi      	r4, 0
1101c73a:	b862      	st.w      	r3, (r14, 0x8)
1101c73c:	b883      	st.w      	r4, (r14, 0xc)
1101c73e:	9884      	ld.w      	r4, (r14, 0x10)
1101c740:	98a5      	ld.w      	r5, (r14, 0x14)
1101c742:	3600      	movi      	r6, 0
1101c744:	6dc3      	mov      	r7, r0
1101c746:	6c93      	mov      	r2, r4
1101c748:	6cd7      	mov      	r3, r5
1101c74a:	6489      	cmplt      	r2, r2
1101c74c:	6099      	addc      	r2, r6
1101c74e:	60dd      	addc      	r3, r7
1101c750:	6d8b      	mov      	r6, r2
1101c752:	6dcf      	mov      	r7, r3
1101c754:	6c93      	mov      	r2, r4
1101c756:	6cd7      	mov      	r3, r5
1101c758:	64dc      	cmphs      	r7, r3
1101c75a:	0c71      	bf      	0x1101c83c	// 1101c83c <__muldf3+0x194>
1101c75c:	65ce      	cmpne      	r3, r7
1101c75e:	0c6d      	bf      	0x1101c838	// 1101c838 <__muldf3+0x190>
1101c760:	6c87      	mov      	r2, r1
1101c762:	3300      	movi      	r3, 0
1101c764:	9806      	ld.w      	r0, (r14, 0x18)
1101c766:	9827      	ld.w      	r1, (r14, 0x1c)
1101c768:	6401      	cmplt      	r0, r0
1101c76a:	6009      	addc      	r0, r2
1101c76c:	604d      	addc      	r1, r3
1101c76e:	6c83      	mov      	r2, r0
1101c770:	6cc7      	mov      	r3, r1
1101c772:	9802      	ld.w      	r0, (r14, 0x8)
1101c774:	9823      	ld.w      	r1, (r14, 0xc)
1101c776:	6401      	cmplt      	r0, r0
1101c778:	6009      	addc      	r0, r2
1101c77a:	604d      	addc      	r1, r3
1101c77c:	6c83      	mov      	r2, r0
1101c77e:	6cc7      	mov      	r3, r1
1101c780:	988e      	ld.w      	r4, (r14, 0x38)
1101c782:	9833      	ld.w      	r1, (r14, 0x4c)
1101c784:	980d      	ld.w      	r0, (r14, 0x34)
1101c786:	6104      	addu      	r4, r1
1101c788:	5c2e      	addi      	r1, r4, 4
1101c78a:	b838      	st.w      	r1, (r14, 0x60)
1101c78c:	9832      	ld.w      	r1, (r14, 0x48)
1101c78e:	c7805025 	bmaski      	r5, 29
1101c792:	6442      	cmpne      	r0, r1
1101c794:	c4000501 	mvc      	r1
1101c798:	64d4      	cmphs      	r5, r3
1101c79a:	b837      	st.w      	r1, (r14, 0x5c)
1101c79c:	0877      	bt      	0x1101c88a	// 1101c88a <__muldf3+0x1e2>
1101c79e:	b8a4      	st.w      	r5, (r14, 0x10)
1101c7a0:	2404      	addi      	r4, 5
1101c7a2:	3001      	movi      	r0, 1
1101c7a4:	3100      	movi      	r1, 0
1101c7a6:	6808      	and      	r0, r2
1101c7a8:	684c      	and      	r1, r3
1101c7aa:	6c04      	or      	r0, r1
1101c7ac:	b882      	st.w      	r4, (r14, 0x8)
1101c7ae:	3840      	cmpnei      	r0, 0
1101c7b0:	0c0e      	bf      	0x1101c7cc	// 1101c7cc <__muldf3+0x124>
1101c7b2:	473f      	lsli      	r1, r7, 31
1101c7b4:	4e01      	lsri      	r0, r6, 1
1101c7b6:	6c04      	or      	r0, r1
1101c7b8:	4f21      	lsri      	r1, r7, 1
1101c7ba:	b800      	st.w      	r0, (r14, 0x0)
1101c7bc:	b821      	st.w      	r1, (r14, 0x4)
1101c7be:	3000      	movi      	r0, 0
1101c7c0:	98c0      	ld.w      	r6, (r14, 0x0)
1101c7c2:	98e1      	ld.w      	r7, (r14, 0x4)
1101c7c4:	ea218000 	movih      	r1, 32768
1101c7c8:	6d80      	or      	r6, r0
1101c7ca:	6dc4      	or      	r7, r1
1101c7cc:	4b21      	lsri      	r1, r3, 1
1101c7ce:	43bf      	lsli      	r5, r3, 31
1101c7d0:	6cc7      	mov      	r3, r1
1101c7d2:	9824      	ld.w      	r1, (r14, 0x10)
1101c7d4:	4a01      	lsri      	r0, r2, 1
1101c7d6:	64c4      	cmphs      	r1, r3
1101c7d8:	c4052422 	or      	r2, r5, r0
1101c7dc:	2400      	addi      	r4, 1
1101c7de:	0fe2      	bf      	0x1101c7a2	// 1101c7a2 <__muldf3+0xfa>
1101c7e0:	9822      	ld.w      	r1, (r14, 0x8)
1101c7e2:	b838      	st.w      	r1, (r14, 0x60)
1101c7e4:	30ff      	movi      	r0, 255
1101c7e6:	3100      	movi      	r1, 0
1101c7e8:	6808      	and      	r0, r2
1101c7ea:	684c      	and      	r1, r3
1101c7ec:	eb400080 	cmpnei      	r0, 128
1101c7f0:	0c36      	bf      	0x1101c85c	// 1101c85c <__muldf3+0x1b4>
1101c7f2:	b859      	st.w      	r2, (r14, 0x64)
1101c7f4:	b87a      	st.w      	r3, (r14, 0x68)
1101c7f6:	3303      	movi      	r3, 3
1101c7f8:	1816      	addi      	r0, r14, 88
1101c7fa:	b876      	st.w      	r3, (r14, 0x58)
1101c7fc:	e0000136 	bsr      	0x1101ca68	// 1101ca68 <__pack_d>
1101c800:	141b      	addi      	r14, r14, 108
1101c802:	1494      	pop      	r4-r7, r15
1101c804:	3b42      	cmpnei      	r3, 2
1101c806:	0c40      	bf      	0x1101c886	// 1101c886 <__muldf3+0x1de>
1101c808:	9872      	ld.w      	r3, (r14, 0x48)
1101c80a:	984d      	ld.w      	r2, (r14, 0x34)
1101c80c:	1811      	addi      	r0, r14, 68
1101c80e:	64ca      	cmpne      	r2, r3
1101c810:	c4000503 	mvc      	r3
1101c814:	b872      	st.w      	r3, (r14, 0x48)
1101c816:	e0000129 	bsr      	0x1101ca68	// 1101ca68 <__pack_d>
1101c81a:	141b      	addi      	r14, r14, 108
1101c81c:	1494      	pop      	r4-r7, r15
1101c81e:	3a42      	cmpnei      	r2, 2
1101c820:	0c33      	bf      	0x1101c886	// 1101c886 <__muldf3+0x1de>
1101c822:	984d      	ld.w      	r2, (r14, 0x34)
1101c824:	9872      	ld.w      	r3, (r14, 0x48)
1101c826:	180c      	addi      	r0, r14, 48
1101c828:	64ca      	cmpne      	r2, r3
1101c82a:	c4000503 	mvc      	r3
1101c82e:	b86d      	st.w      	r3, (r14, 0x34)
1101c830:	e000011c 	bsr      	0x1101ca68	// 1101ca68 <__pack_d>
1101c834:	141b      	addi      	r14, r14, 108
1101c836:	1494      	pop      	r4-r7, r15
1101c838:	6498      	cmphs      	r6, r2
1101c83a:	0b93      	bt      	0x1101c760	// 1101c760 <__muldf3+0xb8>
1101c83c:	9862      	ld.w      	r3, (r14, 0x8)
1101c83e:	9883      	ld.w      	r4, (r14, 0xc)
1101c840:	2300      	addi      	r3, 1
1101c842:	3b40      	cmpnei      	r3, 0
1101c844:	c4840c21 	incf      	r4, r4, 1
1101c848:	b862      	st.w      	r3, (r14, 0x8)
1101c84a:	b883      	st.w      	r4, (r14, 0xc)
1101c84c:	078a      	br      	0x1101c760	// 1101c760 <__muldf3+0xb8>
1101c84e:	6580      	cmphs      	r0, r6
1101c850:	0b73      	bt      	0x1101c736	// 1101c736 <__muldf3+0x8e>
1101c852:	3300      	movi      	r3, 0
1101c854:	3401      	movi      	r4, 1
1101c856:	b862      	st.w      	r3, (r14, 0x8)
1101c858:	b883      	st.w      	r4, (r14, 0xc)
1101c85a:	0772      	br      	0x1101c73e	// 1101c73e <__muldf3+0x96>
1101c85c:	3940      	cmpnei      	r1, 0
1101c85e:	0bca      	bt      	0x1101c7f2	// 1101c7f2 <__muldf3+0x14a>
1101c860:	e4222100 	andi      	r1, r2, 256
1101c864:	3940      	cmpnei      	r1, 0
1101c866:	0bc6      	bt      	0x1101c7f2	// 1101c7f2 <__muldf3+0x14a>
1101c868:	c4e62421 	or      	r1, r6, r7
1101c86c:	3940      	cmpnei      	r1, 0
1101c86e:	0fc2      	bf      	0x1101c7f2	// 1101c7f2 <__muldf3+0x14a>
1101c870:	3080      	movi      	r0, 128
1101c872:	3100      	movi      	r1, 0
1101c874:	6401      	cmplt      	r0, r0
1101c876:	6009      	addc      	r0, r2
1101c878:	604d      	addc      	r1, r3
1101c87a:	3400      	movi      	r4, 0
1101c87c:	6cc7      	mov      	r3, r1
1101c87e:	2cff      	subi      	r4, 256
1101c880:	c4802022 	and      	r2, r0, r4
1101c884:	07b7      	br      	0x1101c7f2	// 1101c7f2 <__muldf3+0x14a>
1101c886:	1013      	lrw      	r0, 0x110110d0	// 1101c8d0 <__muldf3+0x228>
1101c888:	07ba      	br      	0x1101c7fc	// 1101c7fc <__muldf3+0x154>
1101c88a:	c7605020 	bmaski      	r0, 28
1101c88e:	64c0      	cmphs      	r0, r3
1101c890:	0faa      	bf      	0x1101c7e4	// 1101c7e4 <__muldf3+0x13c>
1101c892:	b802      	st.w      	r0, (r14, 0x8)
1101c894:	5c2a      	addi      	r1, r4, 3
1101c896:	3fdf      	btsti      	r7, 31
1101c898:	4a9f      	lsri      	r4, r2, 31
1101c89a:	4301      	lsli      	r0, r3, 1
1101c89c:	42a1      	lsli      	r5, r2, 1
1101c89e:	b820      	st.w      	r1, (r14, 0x0)
1101c8a0:	6c97      	mov      	r2, r5
1101c8a2:	c4042423 	or      	r3, r4, r0
1101c8a6:	0c07      	bf      	0x1101c8b4	// 1101c8b4 <__muldf3+0x20c>
1101c8a8:	3401      	movi      	r4, 1
1101c8aa:	3500      	movi      	r5, 0
1101c8ac:	6d08      	or      	r4, r2
1101c8ae:	6d4c      	or      	r5, r3
1101c8b0:	6c93      	mov      	r2, r4
1101c8b2:	6cd7      	mov      	r3, r5
1101c8b4:	4e9f      	lsri      	r4, r6, 31
1101c8b6:	4701      	lsli      	r0, r7, 1
1101c8b8:	c4042427 	or      	r7, r4, r0
1101c8bc:	9802      	ld.w      	r0, (r14, 0x8)
1101c8be:	46a1      	lsli      	r5, r6, 1
1101c8c0:	64c0      	cmphs      	r0, r3
1101c8c2:	6d97      	mov      	r6, r5
1101c8c4:	2900      	subi      	r1, 1
1101c8c6:	0be8      	bt      	0x1101c896	// 1101c896 <__muldf3+0x1ee>
1101c8c8:	9820      	ld.w      	r1, (r14, 0x0)
1101c8ca:	b838      	st.w      	r1, (r14, 0x60)
1101c8cc:	078c      	br      	0x1101c7e4	// 1101c7e4 <__muldf3+0x13c>
1101c8ce:	0000      	bkpt
1101c8d0:	110110d0 	.long	0x110110d0

1101c8d4 <__floatsidf>:
1101c8d4:	14d2      	push      	r4-r5, r15
1101c8d6:	1425      	subi      	r14, r14, 20
1101c8d8:	3303      	movi      	r3, 3
1101c8da:	3840      	cmpnei      	r0, 0
1101c8dc:	b860      	st.w      	r3, (r14, 0x0)
1101c8de:	487f      	lsri      	r3, r0, 31
1101c8e0:	b861      	st.w      	r3, (r14, 0x4)
1101c8e2:	0808      	bt      	0x1101c8f2	// 1101c8f2 <__floatsidf+0x1e>
1101c8e4:	3302      	movi      	r3, 2
1101c8e6:	b860      	st.w      	r3, (r14, 0x0)
1101c8e8:	6c3b      	mov      	r0, r14
1101c8ea:	e00000bf 	bsr      	0x1101ca68	// 1101ca68 <__pack_d>
1101c8ee:	1405      	addi      	r14, r14, 20
1101c8f0:	1492      	pop      	r4-r5, r15
1101c8f2:	38df      	btsti      	r0, 31
1101c8f4:	0c07      	bf      	0x1101c902	// 1101c902 <__floatsidf+0x2e>
1101c8f6:	ea238000 	movih      	r3, 32768
1101c8fa:	64c2      	cmpne      	r0, r3
1101c8fc:	0c1c      	bf      	0x1101c934	// 1101c934 <__floatsidf+0x60>
1101c8fe:	3300      	movi      	r3, 0
1101c900:	5b01      	subu      	r0, r3, r0
1101c902:	4841      	lsri      	r2, r0, 1
1101c904:	c4007c41 	ff1      	r1, r0
1101c908:	331f      	movi      	r3, 31
1101c90a:	e481001c 	addi      	r4, r1, 29
1101c90e:	2902      	subi      	r1, 3
1101c910:	60d2      	subu      	r3, r4
1101c912:	c4204025 	lsl      	r5, r0, r1
1101c916:	39df      	btsti      	r1, 31
1101c918:	c4624043 	lsr      	r3, r2, r3
1101c91c:	c4650c20 	incf      	r3, r5, 0
1101c920:	7010      	lsl      	r0, r4
1101c922:	b864      	st.w      	r3, (r14, 0x10)
1101c924:	3300      	movi      	r3, 0
1101c926:	c4030c20 	incf      	r0, r3, 0
1101c92a:	333c      	movi      	r3, 60
1101c92c:	60d2      	subu      	r3, r4
1101c92e:	b803      	st.w      	r0, (r14, 0xc)
1101c930:	b862      	st.w      	r3, (r14, 0x8)
1101c932:	07db      	br      	0x1101c8e8	// 1101c8e8 <__floatsidf+0x14>
1101c934:	3000      	movi      	r0, 0
1101c936:	ea21c1e0 	movih      	r1, 49632
1101c93a:	07da      	br      	0x1101c8ee	// 1101c8ee <__floatsidf+0x1a>

1101c93c <__truncdfsf2>:
1101c93c:	14d0      	push      	r15
1101c93e:	1427      	subi      	r14, r14, 28
1101c940:	b800      	st.w      	r0, (r14, 0x0)
1101c942:	6c3b      	mov      	r0, r14
1101c944:	b821      	st.w      	r1, (r14, 0x4)
1101c946:	1902      	addi      	r1, r14, 8
1101c948:	e000015c 	bsr      	0x1101cc00	// 1101cc00 <__unpack_d>
1101c94c:	9845      	ld.w      	r2, (r14, 0x14)
1101c94e:	4a3e      	lsri      	r1, r2, 30
1101c950:	4242      	lsli      	r2, r2, 2
1101c952:	9866      	ld.w      	r3, (r14, 0x18)
1101c954:	3a40      	cmpnei      	r2, 0
1101c956:	4362      	lsli      	r3, r3, 2
1101c958:	6cc4      	or      	r3, r1
1101c95a:	0c03      	bf      	0x1101c960	// 1101c960 <__truncdfsf2+0x24>
1101c95c:	ec630001 	ori      	r3, r3, 1
1101c960:	9844      	ld.w      	r2, (r14, 0x10)
1101c962:	9823      	ld.w      	r1, (r14, 0xc)
1101c964:	9802      	ld.w      	r0, (r14, 0x8)
1101c966:	e0000075 	bsr      	0x1101ca50	// 1101ca50 <__make_fp>
1101c96a:	1407      	addi      	r14, r14, 28
1101c96c:	1490      	pop      	r15
	...

1101c970 <__pack_f>:
1101c970:	14c1      	push      	r4
1101c972:	9040      	ld.w      	r2, (r0, 0x0)
1101c974:	9063      	ld.w      	r3, (r0, 0xc)
1101c976:	3a01      	cmphsi      	r2, 2
1101c978:	9021      	ld.w      	r1, (r0, 0x4)
1101c97a:	0c34      	bf      	0x1101c9e2	// 1101c9e2 <__pack_f+0x72>
1101c97c:	3a44      	cmpnei      	r2, 4
1101c97e:	0c29      	bf      	0x1101c9d0	// 1101c9d0 <__pack_f+0x60>
1101c980:	3a42      	cmpnei      	r2, 2
1101c982:	0c1e      	bf      	0x1101c9be	// 1101c9be <__pack_f+0x4e>
1101c984:	3b40      	cmpnei      	r3, 0
1101c986:	0c1c      	bf      	0x1101c9be	// 1101c9be <__pack_f+0x4e>
1101c988:	9042      	ld.w      	r2, (r0, 0x8)
1101c98a:	3000      	movi      	r0, 0
1101c98c:	287d      	subi      	r0, 126
1101c98e:	6409      	cmplt      	r2, r0
1101c990:	083e      	bt      	0x1101ca0c	// 1101ca0c <__pack_f+0x9c>
1101c992:	eb22007f 	cmplti      	r2, 128
1101c996:	0c1d      	bf      	0x1101c9d0	// 1101c9d0 <__pack_f+0x60>
1101c998:	e403207f 	andi      	r0, r3, 127
1101c99c:	eb400040 	cmpnei      	r0, 64
1101c9a0:	0c2c      	bf      	0x1101c9f8	// 1101c9f8 <__pack_f+0x88>
1101c9a2:	233e      	addi      	r3, 63
1101c9a4:	3bdf      	btsti      	r3, 31
1101c9a6:	0830      	bt      	0x1101ca06	// 1101ca06 <__pack_f+0x96>
1101c9a8:	227e      	addi      	r2, 127
1101c9aa:	4302      	lsli      	r0, r3, 2
1101c9ac:	4809      	lsri      	r0, r0, 9
1101c9ae:	74c8      	zextb      	r3, r2
1101c9b0:	4009      	lsli      	r0, r0, 9
1101c9b2:	4377      	lsli      	r3, r3, 23
1101c9b4:	4809      	lsri      	r0, r0, 9
1101c9b6:	413f      	lsli      	r1, r1, 31
1101c9b8:	6c0c      	or      	r0, r3
1101c9ba:	6c04      	or      	r0, r1
1101c9bc:	1481      	pop      	r4
1101c9be:	3000      	movi      	r0, 0
1101c9c0:	3300      	movi      	r3, 0
1101c9c2:	4009      	lsli      	r0, r0, 9
1101c9c4:	4377      	lsli      	r3, r3, 23
1101c9c6:	4809      	lsri      	r0, r0, 9
1101c9c8:	413f      	lsli      	r1, r1, 31
1101c9ca:	6c0c      	or      	r0, r3
1101c9cc:	6c04      	or      	r0, r1
1101c9ce:	1481      	pop      	r4
1101c9d0:	3000      	movi      	r0, 0
1101c9d2:	33ff      	movi      	r3, 255
1101c9d4:	4009      	lsli      	r0, r0, 9
1101c9d6:	4377      	lsli      	r3, r3, 23
1101c9d8:	4809      	lsri      	r0, r0, 9
1101c9da:	413f      	lsli      	r1, r1, 31
1101c9dc:	6c0c      	or      	r0, r3
1101c9de:	6c04      	or      	r0, r1
1101c9e0:	1481      	pop      	r4
1101c9e2:	4303      	lsli      	r0, r3, 3
1101c9e4:	480a      	lsri      	r0, r0, 10
1101c9e6:	38b6      	bseti      	r0, 22
1101c9e8:	33ff      	movi      	r3, 255
1101c9ea:	4009      	lsli      	r0, r0, 9
1101c9ec:	4377      	lsli      	r3, r3, 23
1101c9ee:	4809      	lsri      	r0, r0, 9
1101c9f0:	413f      	lsli      	r1, r1, 31
1101c9f2:	6c0c      	or      	r0, r3
1101c9f4:	6c04      	or      	r0, r1
1101c9f6:	1481      	pop      	r4
1101c9f8:	e4832080 	andi      	r4, r3, 128
1101c9fc:	600c      	addu      	r0, r3
1101c9fe:	3c40      	cmpnei      	r4, 0
1101ca00:	c4600c40 	inct      	r3, r0, 0
1101ca04:	07d0      	br      	0x1101c9a4	// 1101c9a4 <__pack_f+0x34>
1101ca06:	4b61      	lsri      	r3, r3, 1
1101ca08:	227f      	addi      	r2, 128
1101ca0a:	07d0      	br      	0x1101c9aa	// 1101c9aa <__pack_f+0x3a>
1101ca0c:	600a      	subu      	r0, r2
1101ca0e:	3839      	cmplti      	r0, 26
1101ca10:	0fd7      	bf      	0x1101c9be	// 1101c9be <__pack_f+0x4e>
1101ca12:	3201      	movi      	r2, 1
1101ca14:	c4034044 	lsr      	r4, r3, r0
1101ca18:	c4024020 	lsl      	r0, r2, r0
1101ca1c:	2800      	subi      	r0, 1
1101ca1e:	68c0      	and      	r3, r0
1101ca20:	3b40      	cmpnei      	r3, 0
1101ca22:	c4000503 	mvc      	r3
1101ca26:	6cd0      	or      	r3, r4
1101ca28:	e443207f 	andi      	r2, r3, 127
1101ca2c:	eb420040 	cmpnei      	r2, 64
1101ca30:	080e      	bt      	0x1101ca4c	// 1101ca4c <__pack_f+0xdc>
1101ca32:	e4032080 	andi      	r0, r3, 128
1101ca36:	3840      	cmpnei      	r0, 0
1101ca38:	0c02      	bf      	0x1101ca3c	// 1101ca3c <__pack_f+0xcc>
1101ca3a:	60c8      	addu      	r3, r2
1101ca3c:	c7a05022 	bmaski      	r2, 30
1101ca40:	4302      	lsli      	r0, r3, 2
1101ca42:	64c8      	cmphs      	r2, r3
1101ca44:	64c3      	mvcv      	r3
1101ca46:	4809      	lsri      	r0, r0, 9
1101ca48:	74cc      	zextb      	r3, r3
1101ca4a:	07b3      	br      	0x1101c9b0	// 1101c9b0 <__pack_f+0x40>
1101ca4c:	233e      	addi      	r3, 63
1101ca4e:	07f7      	br      	0x1101ca3c	// 1101ca3c <__pack_f+0xcc>

1101ca50 <__make_fp>:
1101ca50:	14d0      	push      	r15
1101ca52:	1424      	subi      	r14, r14, 16
1101ca54:	b800      	st.w      	r0, (r14, 0x0)
1101ca56:	6c3b      	mov      	r0, r14
1101ca58:	b821      	st.w      	r1, (r14, 0x4)
1101ca5a:	b842      	st.w      	r2, (r14, 0x8)
1101ca5c:	b863      	st.w      	r3, (r14, 0xc)
1101ca5e:	e3ffff89 	bsr      	0x1101c970	// 1101c970 <__pack_f>
1101ca62:	1404      	addi      	r14, r14, 16
1101ca64:	1490      	pop      	r15
	...

1101ca68 <__pack_d>:
1101ca68:	14c4      	push      	r4-r7
1101ca6a:	1423      	subi      	r14, r14, 12
1101ca6c:	9060      	ld.w      	r3, (r0, 0x0)
1101ca6e:	90c3      	ld.w      	r6, (r0, 0xc)
1101ca70:	90e4      	ld.w      	r7, (r0, 0x10)
1101ca72:	3b01      	cmphsi      	r3, 2
1101ca74:	9021      	ld.w      	r1, (r0, 0x4)
1101ca76:	0c47      	bf      	0x1101cb04	// 1101cb04 <__pack_d+0x9c>
1101ca78:	3b44      	cmpnei      	r3, 4
1101ca7a:	0c40      	bf      	0x1101cafa	// 1101cafa <__pack_d+0x92>
1101ca7c:	3b42      	cmpnei      	r3, 2
1101ca7e:	0c28      	bf      	0x1101cace	// 1101cace <__pack_d+0x66>
1101ca80:	c4e62423 	or      	r3, r6, r7
1101ca84:	3b40      	cmpnei      	r3, 0
1101ca86:	0c24      	bf      	0x1101cace	// 1101cace <__pack_d+0x66>
1101ca88:	9062      	ld.w      	r3, (r0, 0x8)
1101ca8a:	121d      	lrw      	r0, 0xfffffc02	// 1101cbfc <__pack_d+0x194>
1101ca8c:	640d      	cmplt      	r3, r0
1101ca8e:	0857      	bt      	0x1101cb3c	// 1101cb3c <__pack_d+0xd4>
1101ca90:	eb2303ff 	cmplti      	r3, 1024
1101ca94:	0c33      	bf      	0x1101cafa	// 1101cafa <__pack_d+0x92>
1101ca96:	34ff      	movi      	r4, 255
1101ca98:	3500      	movi      	r5, 0
1101ca9a:	6918      	and      	r4, r6
1101ca9c:	695c      	and      	r5, r7
1101ca9e:	eb440080 	cmpnei      	r4, 128
1101caa2:	0c41      	bf      	0x1101cb24	// 1101cb24 <__pack_d+0xbc>
1101caa4:	347f      	movi      	r4, 127
1101caa6:	3500      	movi      	r5, 0
1101caa8:	6599      	cmplt      	r6, r6
1101caaa:	6191      	addc      	r6, r4
1101caac:	61d5      	addc      	r7, r5
1101caae:	c7805022 	bmaski      	r2, 29
1101cab2:	65c8      	cmphs      	r2, r7
1101cab4:	0c1a      	bf      	0x1101cae8	// 1101cae8 <__pack_d+0x80>
1101cab6:	e48303fe 	addi      	r4, r3, 1023
1101caba:	4718      	lsli      	r0, r7, 24
1101cabc:	4f68      	lsri      	r3, r7, 8
1101cabe:	4e48      	lsri      	r2, r6, 8
1101cac0:	6c80      	or      	r2, r0
1101cac2:	430c      	lsli      	r0, r3, 12
1101cac4:	6d4b      	mov      	r5, r2
1101cac6:	486c      	lsri      	r3, r0, 12
1101cac8:	e48427ff 	andi      	r4, r4, 2047
1101cacc:	0404      	br      	0x1101cad4	// 1101cad4 <__pack_d+0x6c>
1101cace:	3400      	movi      	r4, 0
1101cad0:	3200      	movi      	r2, 0
1101cad2:	3300      	movi      	r3, 0
1101cad4:	430c      	lsli      	r0, r3, 12
1101cad6:	480c      	lsri      	r0, r0, 12
1101cad8:	4474      	lsli      	r3, r4, 20
1101cada:	419f      	lsli      	r4, r1, 31
1101cadc:	c4602421 	or      	r1, r0, r3
1101cae0:	6c50      	or      	r1, r4
1101cae2:	6c0b      	mov      	r0, r2
1101cae4:	1403      	addi      	r14, r14, 12
1101cae6:	1484      	pop      	r4-r7
1101cae8:	479f      	lsli      	r4, r7, 31
1101caea:	4e01      	lsri      	r0, r6, 1
1101caec:	4f41      	lsri      	r2, r7, 1
1101caee:	c4042426 	or      	r6, r4, r0
1101caf2:	6dcb      	mov      	r7, r2
1101caf4:	e48303ff 	addi      	r4, r3, 1024
1101caf8:	07e1      	br      	0x1101caba	// 1101caba <__pack_d+0x52>
1101cafa:	ea0407ff 	movi      	r4, 2047
1101cafe:	3200      	movi      	r2, 0
1101cb00:	3300      	movi      	r3, 0
1101cb02:	07e9      	br      	0x1101cad4	// 1101cad4 <__pack_d+0x6c>
1101cb04:	4798      	lsli      	r4, r7, 24
1101cb06:	4e08      	lsri      	r0, r6, 8
1101cb08:	c4042422 	or      	r2, r4, r0
1101cb0c:	4705      	lsli      	r0, r7, 5
1101cb0e:	486d      	lsri      	r3, r0, 13
1101cb10:	3400      	movi      	r4, 0
1101cb12:	ea250008 	movih      	r5, 8
1101cb16:	6c90      	or      	r2, r4
1101cb18:	6cd4      	or      	r3, r5
1101cb1a:	430c      	lsli      	r0, r3, 12
1101cb1c:	486c      	lsri      	r3, r0, 12
1101cb1e:	ea0407ff 	movi      	r4, 2047
1101cb22:	07d9      	br      	0x1101cad4	// 1101cad4 <__pack_d+0x6c>
1101cb24:	3d40      	cmpnei      	r5, 0
1101cb26:	0bbf      	bt      	0x1101caa4	// 1101caa4 <__pack_d+0x3c>
1101cb28:	e4462100 	andi      	r2, r6, 256
1101cb2c:	3a40      	cmpnei      	r2, 0
1101cb2e:	0fc0      	bf      	0x1101caae	// 1101caae <__pack_d+0x46>
1101cb30:	3480      	movi      	r4, 128
1101cb32:	3500      	movi      	r5, 0
1101cb34:	6599      	cmplt      	r6, r6
1101cb36:	6191      	addc      	r6, r4
1101cb38:	61d5      	addc      	r7, r5
1101cb3a:	07ba      	br      	0x1101caae	// 1101caae <__pack_d+0x46>
1101cb3c:	600e      	subu      	r0, r3
1101cb3e:	eb200038 	cmplti      	r0, 57
1101cb42:	0fc6      	bf      	0x1101cace	// 1101cace <__pack_d+0x66>
1101cb44:	e460101f 	subi      	r3, r0, 32
1101cb48:	c4674044 	lsr      	r4, r7, r3
1101cb4c:	47a1      	lsli      	r5, r7, 1
1101cb4e:	b882      	st.w      	r4, (r14, 0x8)
1101cb50:	321f      	movi      	r2, 31
1101cb52:	c4064044 	lsr      	r4, r6, r0
1101cb56:	6082      	subu      	r2, r0
1101cb58:	c4454022 	lsl      	r2, r5, r2
1101cb5c:	6c90      	or      	r2, r4
1101cb5e:	b840      	st.w      	r2, (r14, 0x0)
1101cb60:	c4074042 	lsr      	r2, r7, r0
1101cb64:	3bdf      	btsti      	r3, 31
1101cb66:	b841      	st.w      	r2, (r14, 0x4)
1101cb68:	9882      	ld.w      	r4, (r14, 0x8)
1101cb6a:	9840      	ld.w      	r2, (r14, 0x0)
1101cb6c:	c4440c20 	incf      	r2, r4, 0
1101cb70:	b840      	st.w      	r2, (r14, 0x0)
1101cb72:	3400      	movi      	r4, 0
1101cb74:	9841      	ld.w      	r2, (r14, 0x4)
1101cb76:	c4440c20 	incf      	r2, r4, 0
1101cb7a:	3401      	movi      	r4, 1
1101cb7c:	c4644025 	lsl      	r5, r4, r3
1101cb80:	b841      	st.w      	r2, (r14, 0x4)
1101cb82:	3300      	movi      	r3, 0
1101cb84:	c4044022 	lsl      	r2, r4, r0
1101cb88:	3000      	movi      	r0, 0
1101cb8a:	c4650c20 	incf      	r3, r5, 0
1101cb8e:	c4400c20 	incf      	r2, r0, 0
1101cb92:	3a40      	cmpnei      	r2, 0
1101cb94:	c4630c81 	decf      	r3, r3, 1
1101cb98:	2a00      	subi      	r2, 1
1101cb9a:	6898      	and      	r2, r6
1101cb9c:	68dc      	and      	r3, r7
1101cb9e:	6c8c      	or      	r2, r3
1101cba0:	3500      	movi      	r5, 0
1101cba2:	3a40      	cmpnei      	r2, 0
1101cba4:	c4000504 	mvc      	r4
1101cba8:	9840      	ld.w      	r2, (r14, 0x0)
1101cbaa:	9861      	ld.w      	r3, (r14, 0x4)
1101cbac:	6c90      	or      	r2, r4
1101cbae:	6cd4      	or      	r3, r5
1101cbb0:	6d0b      	mov      	r4, r2
1101cbb2:	6d4f      	mov      	r5, r3
1101cbb4:	32ff      	movi      	r2, 255
1101cbb6:	3300      	movi      	r3, 0
1101cbb8:	6890      	and      	r2, r4
1101cbba:	68d4      	and      	r3, r5
1101cbbc:	eb420080 	cmpnei      	r2, 128
1101cbc0:	081b      	bt      	0x1101cbf6	// 1101cbf6 <__pack_d+0x18e>
1101cbc2:	3b40      	cmpnei      	r3, 0
1101cbc4:	0819      	bt      	0x1101cbf6	// 1101cbf6 <__pack_d+0x18e>
1101cbc6:	e4642100 	andi      	r3, r4, 256
1101cbca:	3b40      	cmpnei      	r3, 0
1101cbcc:	0c06      	bf      	0x1101cbd8	// 1101cbd8 <__pack_d+0x170>
1101cbce:	3280      	movi      	r2, 128
1101cbd0:	3300      	movi      	r3, 0
1101cbd2:	6511      	cmplt      	r4, r4
1101cbd4:	6109      	addc      	r4, r2
1101cbd6:	614d      	addc      	r5, r3
1101cbd8:	4518      	lsli      	r0, r5, 24
1101cbda:	4c48      	lsri      	r2, r4, 8
1101cbdc:	4d68      	lsri      	r3, r5, 8
1101cbde:	6c80      	or      	r2, r0
1101cbe0:	430c      	lsli      	r0, r3, 12
1101cbe2:	486c      	lsri      	r3, r0, 12
1101cbe4:	c7605020 	bmaski      	r0, 28
1101cbe8:	3401      	movi      	r4, 1
1101cbea:	6540      	cmphs      	r0, r5
1101cbec:	0c02      	bf      	0x1101cbf0	// 1101cbf0 <__pack_d+0x188>
1101cbee:	3400      	movi      	r4, 0
1101cbf0:	e4842001 	andi      	r4, r4, 1
1101cbf4:	0770      	br      	0x1101cad4	// 1101cad4 <__pack_d+0x6c>
1101cbf6:	327f      	movi      	r2, 127
1101cbf8:	07ec      	br      	0x1101cbd0	// 1101cbd0 <__pack_d+0x168>
1101cbfa:	0000      	bkpt
1101cbfc:	fffffc02 	.long	0xfffffc02

1101cc00 <__unpack_d>:
1101cc00:	1423      	subi      	r14, r14, 12
1101cc02:	b880      	st.w      	r4, (r14, 0x0)
1101cc04:	b8c1      	st.w      	r6, (r14, 0x4)
1101cc06:	b8e2      	st.w      	r7, (r14, 0x8)
1101cc08:	8843      	ld.h      	r2, (r0, 0x6)
1101cc0a:	4251      	lsli      	r2, r2, 17
1101cc0c:	4a55      	lsri      	r2, r2, 21
1101cc0e:	9061      	ld.w      	r3, (r0, 0x4)
1101cc10:	9080      	ld.w      	r4, (r0, 0x0)
1101cc12:	3a40      	cmpnei      	r2, 0
1101cc14:	8007      	ld.b      	r0, (r0, 0x7)
1101cc16:	436c      	lsli      	r3, r3, 12
1101cc18:	4807      	lsri      	r0, r0, 7
1101cc1a:	4b6c      	lsri      	r3, r3, 12
1101cc1c:	b101      	st.w      	r0, (r1, 0x4)
1101cc1e:	081a      	bt      	0x1101cc52	// 1101cc52 <__unpack_d+0x52>
1101cc20:	c4642422 	or      	r2, r4, r3
1101cc24:	3a40      	cmpnei      	r2, 0
1101cc26:	0c2e      	bf      	0x1101cc82	// 1101cc82 <__unpack_d+0x82>
1101cc28:	4c58      	lsri      	r2, r4, 24
1101cc2a:	4368      	lsli      	r3, r3, 8
1101cc2c:	6cc8      	or      	r3, r2
1101cc2e:	3203      	movi      	r2, 3
1101cc30:	4408      	lsli      	r0, r4, 8
1101cc32:	b140      	st.w      	r2, (r1, 0x0)
1101cc34:	1180      	lrw      	r4, 0xfffffc01	// 1101ccb4 <__unpack_d+0xb4>
1101cc36:	c7605026 	bmaski      	r6, 28
1101cc3a:	485f      	lsri      	r2, r0, 31
1101cc3c:	4361      	lsli      	r3, r3, 1
1101cc3e:	6cc8      	or      	r3, r2
1101cc40:	4001      	lsli      	r0, r0, 1
1101cc42:	64d8      	cmphs      	r6, r3
1101cc44:	6c93      	mov      	r2, r4
1101cc46:	2c00      	subi      	r4, 1
1101cc48:	0bf9      	bt      	0x1101cc3a	// 1101cc3a <__unpack_d+0x3a>
1101cc4a:	b142      	st.w      	r2, (r1, 0x8)
1101cc4c:	b103      	st.w      	r0, (r1, 0xc)
1101cc4e:	b164      	st.w      	r3, (r1, 0x10)
1101cc50:	0414      	br      	0x1101cc78	// 1101cc78 <__unpack_d+0x78>
1101cc52:	eb4207ff 	cmpnei      	r2, 2047
1101cc56:	0c19      	bf      	0x1101cc88	// 1101cc88 <__unpack_d+0x88>
1101cc58:	e44213fe 	subi      	r2, r2, 1023
1101cc5c:	b142      	st.w      	r2, (r1, 0x8)
1101cc5e:	3203      	movi      	r2, 3
1101cc60:	43e8      	lsli      	r7, r3, 8
1101cc62:	b140      	st.w      	r2, (r1, 0x0)
1101cc64:	4c58      	lsri      	r2, r4, 24
1101cc66:	6dc8      	or      	r7, r2
1101cc68:	44c8      	lsli      	r6, r4, 8
1101cc6a:	3200      	movi      	r2, 0
1101cc6c:	ea231000 	movih      	r3, 4096
1101cc70:	6d88      	or      	r6, r2
1101cc72:	6dcc      	or      	r7, r3
1101cc74:	b1c3      	st.w      	r6, (r1, 0xc)
1101cc76:	b1e4      	st.w      	r7, (r1, 0x10)
1101cc78:	98e2      	ld.w      	r7, (r14, 0x8)
1101cc7a:	98c1      	ld.w      	r6, (r14, 0x4)
1101cc7c:	9880      	ld.w      	r4, (r14, 0x0)
1101cc7e:	1403      	addi      	r14, r14, 12
1101cc80:	783c      	jmp      	r15
1101cc82:	3302      	movi      	r3, 2
1101cc84:	b160      	st.w      	r3, (r1, 0x0)
1101cc86:	07f9      	br      	0x1101cc78	// 1101cc78 <__unpack_d+0x78>
1101cc88:	c4642422 	or      	r2, r4, r3
1101cc8c:	3a40      	cmpnei      	r2, 0
1101cc8e:	0c10      	bf      	0x1101ccae	// 1101ccae <__unpack_d+0xae>
1101cc90:	ea220008 	movih      	r2, 8
1101cc94:	688c      	and      	r2, r3
1101cc96:	4368      	lsli      	r3, r3, 8
1101cc98:	3a40      	cmpnei      	r2, 0
1101cc9a:	c4000502 	mvc      	r2
1101cc9e:	4408      	lsli      	r0, r4, 8
1101cca0:	b140      	st.w      	r2, (r1, 0x0)
1101cca2:	4c58      	lsri      	r2, r4, 24
1101cca4:	6cc8      	or      	r3, r2
1101cca6:	3b9b      	bclri      	r3, 27
1101cca8:	b103      	st.w      	r0, (r1, 0xc)
1101ccaa:	b164      	st.w      	r3, (r1, 0x10)
1101ccac:	07e6      	br      	0x1101cc78	// 1101cc78 <__unpack_d+0x78>
1101ccae:	3304      	movi      	r3, 4
1101ccb0:	b160      	st.w      	r3, (r1, 0x0)
1101ccb2:	07e3      	br      	0x1101cc78	// 1101cc78 <__unpack_d+0x78>
1101ccb4:	fffffc01 	.long	0xfffffc01

1101ccb8 <__GI_printf>:
1101ccb8:	1424      	subi      	r14, r14, 16
1101ccba:	b863      	st.w      	r3, (r14, 0xc)
1101ccbc:	b842      	st.w      	r2, (r14, 0x8)
1101ccbe:	b821      	st.w      	r1, (r14, 0x4)
1101ccc0:	b800      	st.w      	r0, (r14, 0x0)
1101ccc2:	14d0      	push      	r15
1101ccc4:	9801      	ld.w      	r0, (r14, 0x4)
1101ccc6:	1902      	addi      	r1, r14, 8
1101ccc8:	e00000a4 	bsr      	0x1101ce10	// 1101ce10 <__cskyvprintfvprintf>
1101cccc:	d9ee2000 	ld.w      	r15, (r14, 0x0)
1101ccd0:	1405      	addi      	r14, r14, 20
1101ccd2:	783c      	jmp      	r15

1101ccd4 <__stdio_outs>:
1101ccd4:	14d3      	push      	r4-r6, r15
1101ccd6:	10ac      	lrw      	r5, 0x1fffa4f8	// 1101cd04 <__stdio_outs+0x30>
1101ccd8:	6d03      	mov      	r4, r0
1101ccda:	6d87      	mov      	r6, r1
1101ccdc:	9500      	ld.w      	r0, (r5, 0x0)
1101ccde:	2017      	addi      	r0, 24
1101cce0:	e0002356 	bsr      	0x1102138c	// 1102138c <os_critical_enter>
1101cce4:	6190      	addu      	r6, r4
1101cce6:	6592      	cmpne      	r4, r6
1101cce8:	0807      	bt      	0x1101ccf6	// 1101ccf6 <__stdio_outs+0x22>
1101ccea:	9500      	ld.w      	r0, (r5, 0x0)
1101ccec:	2017      	addi      	r0, 24
1101ccee:	e0002354 	bsr      	0x11021396	// 11021396 <os_critical_exit>
1101ccf2:	3001      	movi      	r0, 1
1101ccf4:	1493      	pop      	r4-r6, r15
1101ccf6:	8400      	ld.b      	r0, (r4, 0x0)
1101ccf8:	9520      	ld.w      	r1, (r5, 0x0)
1101ccfa:	2400      	addi      	r4, 1
1101ccfc:	e0002a32 	bsr      	0x11022160	// 11022160 <fputc>
1101cd00:	07f3      	br      	0x1101cce6	// 1101cce6 <__stdio_outs+0x12>
1101cd02:	0000      	bkpt
1101cd04:	1fffa4f8 	.long	0x1fffa4f8

1101cd08 <__GI_vprintf>:
1101cd08:	14d0      	push      	r15
1101cd0a:	1422      	subi      	r14, r14, 8
1101cd0c:	6c87      	mov      	r2, r1
1101cd0e:	1026      	lrw      	r1, 0x1101ccd4	// 1101cd24 <__GI_vprintf+0x1c>
1101cd10:	3300      	movi      	r3, 0
1101cd12:	b821      	st.w      	r1, (r14, 0x4)
1101cd14:	6c43      	mov      	r1, r0
1101cd16:	6c3b      	mov      	r0, r14
1101cd18:	b860      	st.w      	r3, (r14, 0x0)
1101cd1a:	e000036d 	bsr      	0x1101d3f4	// 1101d3f4 <__v2_printf>
1101cd1e:	1402      	addi      	r14, r14, 8
1101cd20:	1490      	pop      	r15
1101cd22:	0000      	bkpt
1101cd24:	1101ccd4 	.long	0x1101ccd4

1101cd28 <swrite>:
1101cd28:	14d3      	push      	r4-r6, r15
1101cd2a:	6d4b      	mov      	r5, r2
1101cd2c:	9582      	ld.w      	r4, (r5, 0x8)
1101cd2e:	9241      	ld.w      	r2, (r2, 0x4)
1101cd30:	610a      	subu      	r4, r2
1101cd32:	3c40      	cmpnei      	r4, 0
1101cd34:	6cc3      	mov      	r3, r0
1101cd36:	6d87      	mov      	r6, r1
1101cd38:	0c15      	bf      	0x1101cd62	// 1101cd62 <swrite+0x3a>
1101cd3a:	9500      	ld.w      	r0, (r5, 0x0)
1101cd3c:	6504      	cmphs      	r1, r4
1101cd3e:	c4810c20 	incf      	r4, r1, 0
1101cd42:	3840      	cmpnei      	r0, 0
1101cd44:	0c0c      	bf      	0x1101cd5c	// 1101cd5c <swrite+0x34>
1101cd46:	6c4f      	mov      	r1, r3
1101cd48:	6008      	addu      	r0, r2
1101cd4a:	6c93      	mov      	r2, r4
1101cd4c:	e000613a 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
1101cd50:	9520      	ld.w      	r1, (r5, 0x0)
1101cd52:	5970      	addu      	r3, r1, r4
1101cd54:	3100      	movi      	r1, 0
1101cd56:	9541      	ld.w      	r2, (r5, 0x4)
1101cd58:	5b08      	addu      	r0, r3, r2
1101cd5a:	a020      	st.b      	r1, (r0, 0x0)
1101cd5c:	9541      	ld.w      	r2, (r5, 0x4)
1101cd5e:	6108      	addu      	r4, r2
1101cd60:	b581      	st.w      	r4, (r5, 0x4)
1101cd62:	6c1b      	mov      	r0, r6
1101cd64:	1493      	pop      	r4-r6, r15

1101cd66 <__GI_vsnprintf>:
1101cd66:	14d2      	push      	r4-r5, r15
1101cd68:	1425      	subi      	r14, r14, 20
1101cd6a:	6d07      	mov      	r4, r1
1101cd6c:	6d43      	mov      	r5, r0
1101cd6e:	6c4b      	mov      	r1, r2
1101cd70:	3200      	movi      	r2, 0
1101cd72:	3c40      	cmpnei      	r4, 0
1101cd74:	b802      	st.w      	r0, (r14, 0x8)
1101cd76:	b843      	st.w      	r2, (r14, 0xc)
1101cd78:	0c1d      	bf      	0x1101cdb2	// 1101cdb2 <__GI_vsnprintf+0x4c>
1101cd7a:	5c03      	subi      	r0, r4, 1
1101cd7c:	b804      	st.w      	r0, (r14, 0x10)
1101cd7e:	1a02      	addi      	r2, r14, 8
1101cd80:	100f      	lrw      	r0, 0x1101cd28	// 1101cdbc <__GI_vsnprintf+0x56>
1101cd82:	b840      	st.w      	r2, (r14, 0x0)
1101cd84:	b801      	st.w      	r0, (r14, 0x4)
1101cd86:	6c8f      	mov      	r2, r3
1101cd88:	6c3b      	mov      	r0, r14
1101cd8a:	e0000335 	bsr      	0x1101d3f4	// 1101d3f4 <__v2_printf>
1101cd8e:	3d40      	cmpnei      	r5, 0
1101cd90:	0c0f      	bf      	0x1101cdae	// 1101cdae <__GI_vsnprintf+0x48>
1101cd92:	3c40      	cmpnei      	r4, 0
1101cd94:	0c0d      	bf      	0x1101cdae	// 1101cdae <__GI_vsnprintf+0x48>
1101cd96:	38df      	btsti      	r0, 31
1101cd98:	080b      	bt      	0x1101cdae	// 1101cdae <__GI_vsnprintf+0x48>
1101cd9a:	3300      	movi      	r3, 0
1101cd9c:	2b00      	subi      	r3, 1
1101cd9e:	64d2      	cmpne      	r4, r3
1101cda0:	0c0b      	bf      	0x1101cdb6	// 1101cdb6 <__GI_vsnprintf+0x50>
1101cda2:	6500      	cmphs      	r0, r4
1101cda4:	0c09      	bf      	0x1101cdb6	// 1101cdb6 <__GI_vsnprintf+0x50>
1101cda6:	5d30      	addu      	r1, r5, r4
1101cda8:	2900      	subi      	r1, 1
1101cdaa:	3400      	movi      	r4, 0
1101cdac:	a180      	st.b      	r4, (r1, 0x0)
1101cdae:	1405      	addi      	r14, r14, 20
1101cdb0:	1492      	pop      	r4-r5, r15
1101cdb2:	3000      	movi      	r0, 0
1101cdb4:	07e4      	br      	0x1101cd7c	// 1101cd7c <__GI_vsnprintf+0x16>
1101cdb6:	5d20      	addu      	r1, r5, r0
1101cdb8:	07f9      	br      	0x1101cdaa	// 1101cdaa <__GI_vsnprintf+0x44>
1101cdba:	0000      	bkpt
1101cdbc:	1101cd28 	.long	0x1101cd28

1101cdc0 <__GI_sprintf>:
1101cdc0:	1423      	subi      	r14, r14, 12
1101cdc2:	b862      	st.w      	r3, (r14, 0x8)
1101cdc4:	b841      	st.w      	r2, (r14, 0x4)
1101cdc6:	b820      	st.w      	r1, (r14, 0x0)
1101cdc8:	14d0      	push      	r15
1101cdca:	9821      	ld.w      	r1, (r14, 0x4)
1101cdcc:	1a02      	addi      	r2, r14, 8
1101cdce:	e00002c7 	bsr      	0x1101d35c	// 1101d35c <__cskyvprintfvsprintf>
1101cdd2:	d9ee2000 	ld.w      	r15, (r14, 0x0)
1101cdd6:	1404      	addi      	r14, r14, 16
1101cdd8:	783c      	jmp      	r15
1101cdda:	0000      	bkpt
1101cddc:	14d3      	push      	r4-r6, r15
1101cdde:	10ac      	lrw      	r5, 0x1fffa4f8	// 1101ce0c <__GI_sprintf+0x4c>
1101cde0:	6d03      	mov      	r4, r0
1101cde2:	6d87      	mov      	r6, r1
1101cde4:	9500      	ld.w      	r0, (r5, 0x0)
1101cde6:	2017      	addi      	r0, 24
1101cde8:	e00022d2 	bsr      	0x1102138c	// 1102138c <os_critical_enter>
1101cdec:	6190      	addu      	r6, r4
1101cdee:	6592      	cmpne      	r4, r6
1101cdf0:	0807      	bt      	0x1101cdfe	// 1101cdfe <__GI_sprintf+0x3e>
1101cdf2:	9500      	ld.w      	r0, (r5, 0x0)
1101cdf4:	2017      	addi      	r0, 24
1101cdf6:	e00022d0 	bsr      	0x11021396	// 11021396 <os_critical_exit>
1101cdfa:	3001      	movi      	r0, 1
1101cdfc:	1493      	pop      	r4-r6, r15
1101cdfe:	8400      	ld.b      	r0, (r4, 0x0)
1101ce00:	9520      	ld.w      	r1, (r5, 0x0)
1101ce02:	2400      	addi      	r4, 1
1101ce04:	e00029ae 	bsr      	0x11022160	// 11022160 <fputc>
1101ce08:	07f3      	br      	0x1101cdee	// 1101cdee <__GI_sprintf+0x2e>
1101ce0a:	0000      	bkpt
1101ce0c:	1fffa4f8 	.long	0x1fffa4f8

1101ce10 <__cskyvprintfvprintf>:
1101ce10:	14d0      	push      	r15
1101ce12:	1422      	subi      	r14, r14, 8
1101ce14:	6c87      	mov      	r2, r1
1101ce16:	1026      	lrw      	r1, 0x1101ccd4	// 1101ce2c <__cskyvprintfvprintf+0x1c>
1101ce18:	3300      	movi      	r3, 0
1101ce1a:	b821      	st.w      	r1, (r14, 0x4)
1101ce1c:	6c43      	mov      	r1, r0
1101ce1e:	6c3b      	mov      	r0, r14
1101ce20:	b860      	st.w      	r3, (r14, 0x0)
1101ce22:	e00002e9 	bsr      	0x1101d3f4	// 1101d3f4 <__v2_printf>
1101ce26:	1402      	addi      	r14, r14, 8
1101ce28:	1490      	pop      	r15
1101ce2a:	0000      	bkpt
1101ce2c:	1101ccd4 	.long	0x1101ccd4

1101ce30 <__GI_sscanf>:
1101ce30:	1423      	subi      	r14, r14, 12
1101ce32:	b862      	st.w      	r3, (r14, 0x8)
1101ce34:	b841      	st.w      	r2, (r14, 0x4)
1101ce36:	b820      	st.w      	r1, (r14, 0x0)
1101ce38:	14d0      	push      	r15
1101ce3a:	9821      	ld.w      	r1, (r14, 0x4)
1101ce3c:	1a02      	addi      	r2, r14, 8
1101ce3e:	e00002ad 	bsr      	0x1101d398	// 1101d398 <__cskyvscanfvsscanf>
1101ce42:	d9ee2000 	ld.w      	r15, (r14, 0x0)
1101ce46:	1404      	addi      	r14, r14, 16
1101ce48:	783c      	jmp      	r15

1101ce4a <__GI_fflush>:
1101ce4a:	3000      	movi      	r0, 0
1101ce4c:	783c      	jmp      	r15

1101ce4e <__GI_snprintf>:
1101ce4e:	1422      	subi      	r14, r14, 8
1101ce50:	b861      	st.w      	r3, (r14, 0x4)
1101ce52:	b840      	st.w      	r2, (r14, 0x0)
1101ce54:	14d0      	push      	r15
1101ce56:	9841      	ld.w      	r2, (r14, 0x4)
1101ce58:	1b02      	addi      	r3, r14, 8
1101ce5a:	e0000026 	bsr      	0x1101cea6	// 1101cea6 <__cskyvprintfvsnprintf>
1101ce5e:	d9ee2000 	ld.w      	r15, (r14, 0x0)
1101ce62:	1403      	addi      	r14, r14, 12
1101ce64:	783c      	jmp      	r15
	...

1101ce68 <swrite>:
1101ce68:	14d3      	push      	r4-r6, r15
1101ce6a:	6d4b      	mov      	r5, r2
1101ce6c:	9582      	ld.w      	r4, (r5, 0x8)
1101ce6e:	9241      	ld.w      	r2, (r2, 0x4)
1101ce70:	610a      	subu      	r4, r2
1101ce72:	3c40      	cmpnei      	r4, 0
1101ce74:	6cc3      	mov      	r3, r0
1101ce76:	6d87      	mov      	r6, r1
1101ce78:	0c15      	bf      	0x1101cea2	// 1101cea2 <swrite+0x3a>
1101ce7a:	9500      	ld.w      	r0, (r5, 0x0)
1101ce7c:	6504      	cmphs      	r1, r4
1101ce7e:	c4810c20 	incf      	r4, r1, 0
1101ce82:	3840      	cmpnei      	r0, 0
1101ce84:	0c0c      	bf      	0x1101ce9c	// 1101ce9c <swrite+0x34>
1101ce86:	6c4f      	mov      	r1, r3
1101ce88:	6008      	addu      	r0, r2
1101ce8a:	6c93      	mov      	r2, r4
1101ce8c:	e000609a 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
1101ce90:	9520      	ld.w      	r1, (r5, 0x0)
1101ce92:	5970      	addu      	r3, r1, r4
1101ce94:	3100      	movi      	r1, 0
1101ce96:	9541      	ld.w      	r2, (r5, 0x4)
1101ce98:	5b08      	addu      	r0, r3, r2
1101ce9a:	a020      	st.b      	r1, (r0, 0x0)
1101ce9c:	9541      	ld.w      	r2, (r5, 0x4)
1101ce9e:	6108      	addu      	r4, r2
1101cea0:	b581      	st.w      	r4, (r5, 0x4)
1101cea2:	6c1b      	mov      	r0, r6
1101cea4:	1493      	pop      	r4-r6, r15

1101cea6 <__cskyvprintfvsnprintf>:
1101cea6:	14d2      	push      	r4-r5, r15
1101cea8:	1425      	subi      	r14, r14, 20
1101ceaa:	6d07      	mov      	r4, r1
1101ceac:	6c4b      	mov      	r1, r2
1101ceae:	3c40      	cmpnei      	r4, 0
1101ceb0:	3200      	movi      	r2, 0
1101ceb2:	6d43      	mov      	r5, r0
1101ceb4:	b802      	st.w      	r0, (r14, 0x8)
1101ceb6:	b843      	st.w      	r2, (r14, 0xc)
1101ceb8:	0c1d      	bf      	0x1101cef2	// 1101cef2 <__cskyvprintfvsnprintf+0x4c>
1101ceba:	5c03      	subi      	r0, r4, 1
1101cebc:	b804      	st.w      	r0, (r14, 0x10)
1101cebe:	1a02      	addi      	r2, r14, 8
1101cec0:	100f      	lrw      	r0, 0x1101ce68	// 1101cefc <__cskyvprintfvsnprintf+0x56>
1101cec2:	b840      	st.w      	r2, (r14, 0x0)
1101cec4:	b801      	st.w      	r0, (r14, 0x4)
1101cec6:	6c8f      	mov      	r2, r3
1101cec8:	6c3b      	mov      	r0, r14
1101ceca:	e0000295 	bsr      	0x1101d3f4	// 1101d3f4 <__v2_printf>
1101cece:	3d40      	cmpnei      	r5, 0
1101ced0:	0c0f      	bf      	0x1101ceee	// 1101ceee <__cskyvprintfvsnprintf+0x48>
1101ced2:	3c40      	cmpnei      	r4, 0
1101ced4:	0c0d      	bf      	0x1101ceee	// 1101ceee <__cskyvprintfvsnprintf+0x48>
1101ced6:	38df      	btsti      	r0, 31
1101ced8:	080b      	bt      	0x1101ceee	// 1101ceee <__cskyvprintfvsnprintf+0x48>
1101ceda:	3300      	movi      	r3, 0
1101cedc:	2b00      	subi      	r3, 1
1101cede:	64d2      	cmpne      	r4, r3
1101cee0:	0c0b      	bf      	0x1101cef6	// 1101cef6 <__cskyvprintfvsnprintf+0x50>
1101cee2:	6500      	cmphs      	r0, r4
1101cee4:	0c09      	bf      	0x1101cef6	// 1101cef6 <__cskyvprintfvsnprintf+0x50>
1101cee6:	5d30      	addu      	r1, r5, r4
1101cee8:	2900      	subi      	r1, 1
1101ceea:	3400      	movi      	r4, 0
1101ceec:	a180      	st.b      	r4, (r1, 0x0)
1101ceee:	1405      	addi      	r14, r14, 20
1101cef0:	1492      	pop      	r4-r5, r15
1101cef2:	3000      	movi      	r0, 0
1101cef4:	07e4      	br      	0x1101cebc	// 1101cebc <__cskyvprintfvsnprintf+0x16>
1101cef6:	5d20      	addu      	r1, r5, r0
1101cef8:	07f9      	br      	0x1101ceea	// 1101ceea <__cskyvprintfvsnprintf+0x44>
1101cefa:	0000      	bkpt
1101cefc:	1101ce68 	.long	0x1101ce68

1101cf00 <__GI_rand>:
1101cf00:	1065      	lrw      	r3, 0x41c64e6d	// 1101cf14 <__GI_rand+0x14>
1101cf02:	1046      	lrw      	r2, 0x1fffa538	// 1101cf18 <__GI_rand+0x18>
1101cf04:	9220      	ld.w      	r1, (r2, 0x0)
1101cf06:	7cc4      	mult      	r3, r1
1101cf08:	ea013039 	movi      	r1, 12345
1101cf0c:	5b04      	addu      	r0, r3, r1
1101cf0e:	b200      	st.w      	r0, (r2, 0x0)
1101cf10:	4801      	lsri      	r0, r0, 1
1101cf12:	783c      	jmp      	r15
1101cf14:	41c64e6d 	.long	0x41c64e6d
1101cf18:	1fffa538 	.long	0x1fffa538

1101cf1c <__GI_srand>:
1101cf1c:	1022      	lrw      	r1, 0x1fffa538	// 1101cf24 <__GI_srand+0x8>
1101cf1e:	b100      	st.w      	r0, (r1, 0x0)
1101cf20:	783c      	jmp      	r15
1101cf22:	0000      	.short	0x0000
1101cf24:	1fffa538 	.long	0x1fffa538

1101cf28 <atoi>:
1101cf28:	14d0      	push      	r15
1101cf2a:	320a      	movi      	r2, 10
1101cf2c:	3100      	movi      	r1, 0
1101cf2e:	e000589c 	bsr      	0x11028066	// 11028066 <strtol>
1101cf32:	1490      	pop      	r15

1101cf34 <__strcmp_fast>:
1101cf34:	6cc3      	mov      	r3, r0
1101cf36:	6c04      	or      	r0, r1
1101cf38:	e4002003 	andi      	r0, r0, 3
1101cf3c:	3840      	cmpnei      	r0, 0
1101cf3e:	085c      	bt      	0x1101cff6	// 1101cff6 <__strcmp_fast+0xc2>
1101cf40:	9300      	ld.w      	r0, (r3, 0x0)
1101cf42:	d9a12000 	ld.w      	r13, (r1, 0x0)
1101cf46:	6742      	cmpne      	r0, r13
1101cf48:	0837      	bt      	0x1101cfb6	// 1101cfb6 <__strcmp_fast+0x82>
1101cf4a:	6803      	tstnbz      	r0
1101cf4c:	0c53      	bf      	0x1101cff2	// 1101cff2 <__strcmp_fast+0xbe>
1101cf4e:	9301      	ld.w      	r0, (r3, 0x4)
1101cf50:	d9a12001 	ld.w      	r13, (r1, 0x4)
1101cf54:	6742      	cmpne      	r0, r13
1101cf56:	0830      	bt      	0x1101cfb6	// 1101cfb6 <__strcmp_fast+0x82>
1101cf58:	6803      	tstnbz      	r0
1101cf5a:	0c4c      	bf      	0x1101cff2	// 1101cff2 <__strcmp_fast+0xbe>
1101cf5c:	9302      	ld.w      	r0, (r3, 0x8)
1101cf5e:	d9a12002 	ld.w      	r13, (r1, 0x8)
1101cf62:	6742      	cmpne      	r0, r13
1101cf64:	0829      	bt      	0x1101cfb6	// 1101cfb6 <__strcmp_fast+0x82>
1101cf66:	6803      	tstnbz      	r0
1101cf68:	0c45      	bf      	0x1101cff2	// 1101cff2 <__strcmp_fast+0xbe>
1101cf6a:	9303      	ld.w      	r0, (r3, 0xc)
1101cf6c:	d9a12003 	ld.w      	r13, (r1, 0xc)
1101cf70:	6742      	cmpne      	r0, r13
1101cf72:	0822      	bt      	0x1101cfb6	// 1101cfb6 <__strcmp_fast+0x82>
1101cf74:	6803      	tstnbz      	r0
1101cf76:	0c3e      	bf      	0x1101cff2	// 1101cff2 <__strcmp_fast+0xbe>
1101cf78:	9304      	ld.w      	r0, (r3, 0x10)
1101cf7a:	d9a12004 	ld.w      	r13, (r1, 0x10)
1101cf7e:	6742      	cmpne      	r0, r13
1101cf80:	081b      	bt      	0x1101cfb6	// 1101cfb6 <__strcmp_fast+0x82>
1101cf82:	6803      	tstnbz      	r0
1101cf84:	0c37      	bf      	0x1101cff2	// 1101cff2 <__strcmp_fast+0xbe>
1101cf86:	9305      	ld.w      	r0, (r3, 0x14)
1101cf88:	d9a12005 	ld.w      	r13, (r1, 0x14)
1101cf8c:	6742      	cmpne      	r0, r13
1101cf8e:	0814      	bt      	0x1101cfb6	// 1101cfb6 <__strcmp_fast+0x82>
1101cf90:	6803      	tstnbz      	r0
1101cf92:	0c30      	bf      	0x1101cff2	// 1101cff2 <__strcmp_fast+0xbe>
1101cf94:	9306      	ld.w      	r0, (r3, 0x18)
1101cf96:	d9a12006 	ld.w      	r13, (r1, 0x18)
1101cf9a:	6742      	cmpne      	r0, r13
1101cf9c:	080d      	bt      	0x1101cfb6	// 1101cfb6 <__strcmp_fast+0x82>
1101cf9e:	6803      	tstnbz      	r0
1101cfa0:	0c29      	bf      	0x1101cff2	// 1101cff2 <__strcmp_fast+0xbe>
1101cfa2:	9307      	ld.w      	r0, (r3, 0x1c)
1101cfa4:	d9a12007 	ld.w      	r13, (r1, 0x1c)
1101cfa8:	6742      	cmpne      	r0, r13
1101cfaa:	0806      	bt      	0x1101cfb6	// 1101cfb6 <__strcmp_fast+0x82>
1101cfac:	6803      	tstnbz      	r0
1101cfae:	0c22      	bf      	0x1101cff2	// 1101cff2 <__strcmp_fast+0xbe>
1101cfb0:	231f      	addi      	r3, 32
1101cfb2:	211f      	addi      	r1, 32
1101cfb4:	07c6      	br      	0x1101cf40	// 1101cf40 <__strcmp_fast+0xc>
1101cfb6:	c4007102 	xtrb3      	r2, r0
1101cfba:	c40d7101 	xtrb3      	r1, r13
1101cfbe:	644a      	cmpne      	r2, r1
1101cfc0:	0817      	bt      	0x1101cfee	// 1101cfee <__strcmp_fast+0xba>
1101cfc2:	3a40      	cmpnei      	r2, 0
1101cfc4:	0c15      	bf      	0x1101cfee	// 1101cfee <__strcmp_fast+0xba>
1101cfc6:	c4007082 	xtrb2      	r2, r0
1101cfca:	c40d7081 	xtrb2      	r1, r13
1101cfce:	644a      	cmpne      	r2, r1
1101cfd0:	080f      	bt      	0x1101cfee	// 1101cfee <__strcmp_fast+0xba>
1101cfd2:	3a40      	cmpnei      	r2, 0
1101cfd4:	0c0d      	bf      	0x1101cfee	// 1101cfee <__strcmp_fast+0xba>
1101cfd6:	c4007042 	xtrb1      	r2, r0
1101cfda:	c40d7041 	xtrb1      	r1, r13
1101cfde:	644a      	cmpne      	r2, r1
1101cfe0:	0807      	bt      	0x1101cfee	// 1101cfee <__strcmp_fast+0xba>
1101cfe2:	3a40      	cmpnei      	r2, 0
1101cfe4:	0c05      	bf      	0x1101cfee	// 1101cfee <__strcmp_fast+0xba>
1101cfe6:	c4007022 	xtrb0      	r2, r0
1101cfea:	c40d7021 	xtrb0      	r1, r13
1101cfee:	5a05      	subu      	r0, r2, r1
1101cff0:	783c      	jmp      	r15
1101cff2:	6036      	subu      	r0, r13
1101cff4:	783c      	jmp      	r15
1101cff6:	8300      	ld.b      	r0, (r3, 0x0)
1101cff8:	d9a10000 	ld.b      	r13, (r1, 0x0)
1101cffc:	6742      	cmpne      	r0, r13
1101cffe:	0bfa      	bt      	0x1101cff2	// 1101cff2 <__strcmp_fast+0xbe>
1101d000:	2100      	addi      	r1, 1
1101d002:	2300      	addi      	r3, 1
1101d004:	3840      	cmpnei      	r0, 0
1101d006:	0bf8      	bt      	0x1101cff6	// 1101cff6 <__strcmp_fast+0xc2>
1101d008:	783c      	jmp      	r15
	...

1101d00c <__memset_fast>:
1101d00c:	7444      	zextb      	r1, r1
1101d00e:	3a40      	cmpnei      	r2, 0
1101d010:	0c25      	bf      	0x1101d05a	// 1101d05a <__memset_fast+0x4e>
1101d012:	6f43      	mov      	r13, r0
1101d014:	e5802003 	andi      	r12, r0, 3
1101d018:	eb4c0000 	cmpnei      	r12, 0
1101d01c:	0c20      	bf      	0x1101d05c	// 1101d05c <__memset_fast+0x50>
1101d01e:	dc2d0000 	st.b      	r1, (r13, 0x0)
1101d022:	2a00      	subi      	r2, 1
1101d024:	3a40      	cmpnei      	r2, 0
1101d026:	0c1a      	bf      	0x1101d05a	// 1101d05a <__memset_fast+0x4e>
1101d028:	e5ad0000 	addi      	r13, r13, 1
1101d02c:	e58d2003 	andi      	r12, r13, 3
1101d030:	eb4c0000 	cmpnei      	r12, 0
1101d034:	0c14      	bf      	0x1101d05c	// 1101d05c <__memset_fast+0x50>
1101d036:	dc2d0000 	st.b      	r1, (r13, 0x0)
1101d03a:	2a00      	subi      	r2, 1
1101d03c:	3a40      	cmpnei      	r2, 0
1101d03e:	0c0e      	bf      	0x1101d05a	// 1101d05a <__memset_fast+0x4e>
1101d040:	e5ad0000 	addi      	r13, r13, 1
1101d044:	e58d2003 	andi      	r12, r13, 3
1101d048:	eb4c0000 	cmpnei      	r12, 0
1101d04c:	0c08      	bf      	0x1101d05c	// 1101d05c <__memset_fast+0x50>
1101d04e:	dc2d0000 	st.b      	r1, (r13, 0x0)
1101d052:	2a00      	subi      	r2, 1
1101d054:	e5ad0000 	addi      	r13, r13, 1
1101d058:	0402      	br      	0x1101d05c	// 1101d05c <__memset_fast+0x50>
1101d05a:	783c      	jmp      	r15
1101d05c:	4168      	lsli      	r3, r1, 8
1101d05e:	6c4c      	or      	r1, r3
1101d060:	4170      	lsli      	r3, r1, 16
1101d062:	6c4c      	or      	r1, r3
1101d064:	3a2f      	cmplti      	r2, 16
1101d066:	080e      	bt      	0x1101d082	// 1101d082 <__memset_fast+0x76>
1101d068:	dc2d2000 	st.w      	r1, (r13, 0x0)
1101d06c:	dc2d2001 	st.w      	r1, (r13, 0x4)
1101d070:	dc2d2002 	st.w      	r1, (r13, 0x8)
1101d074:	dc2d2003 	st.w      	r1, (r13, 0xc)
1101d078:	2a0f      	subi      	r2, 16
1101d07a:	e5ad000f 	addi      	r13, r13, 16
1101d07e:	3a2f      	cmplti      	r2, 16
1101d080:	0ff4      	bf      	0x1101d068	// 1101d068 <__memset_fast+0x5c>
1101d082:	3a23      	cmplti      	r2, 4
1101d084:	0808      	bt      	0x1101d094	// 1101d094 <__memset_fast+0x88>
1101d086:	2a03      	subi      	r2, 4
1101d088:	dc2d2000 	st.w      	r1, (r13, 0x0)
1101d08c:	e5ad0003 	addi      	r13, r13, 4
1101d090:	3a23      	cmplti      	r2, 4
1101d092:	0ffa      	bf      	0x1101d086	// 1101d086 <__memset_fast+0x7a>
1101d094:	3a40      	cmpnei      	r2, 0
1101d096:	0fe2      	bf      	0x1101d05a	// 1101d05a <__memset_fast+0x4e>
1101d098:	2a00      	subi      	r2, 1
1101d09a:	dc2d0000 	st.b      	r1, (r13, 0x0)
1101d09e:	3a40      	cmpnei      	r2, 0
1101d0a0:	0fdd      	bf      	0x1101d05a	// 1101d05a <__memset_fast+0x4e>
1101d0a2:	2a00      	subi      	r2, 1
1101d0a4:	dc2d0001 	st.b      	r1, (r13, 0x1)
1101d0a8:	3a40      	cmpnei      	r2, 0
1101d0aa:	0fd8      	bf      	0x1101d05a	// 1101d05a <__memset_fast+0x4e>
1101d0ac:	dc2d0002 	st.b      	r1, (r13, 0x2)
1101d0b0:	783c      	jmp      	r15
	...

1101d0b4 <__strlen_fast>:
1101d0b4:	6c43      	mov      	r1, r0
1101d0b6:	e4002003 	andi      	r0, r0, 3
1101d0ba:	3840      	cmpnei      	r0, 0
1101d0bc:	0c08      	bf      	0x1101d0cc	// 1101d0cc <__strlen_fast+0x18>
1101d0be:	3000      	movi      	r0, 0
1101d0c0:	8140      	ld.b      	r2, (r1, 0x0)
1101d0c2:	3a40      	cmpnei      	r2, 0
1101d0c4:	0c16      	bf      	0x1101d0f0	// 1101d0f0 <__strlen_fast+0x3c>
1101d0c6:	2100      	addi      	r1, 1
1101d0c8:	2000      	addi      	r0, 1
1101d0ca:	07fb      	br      	0x1101d0c0	// 1101d0c0 <__strlen_fast+0xc>
1101d0cc:	9140      	ld.w      	r2, (r1, 0x0)
1101d0ce:	680b      	tstnbz      	r2
1101d0d0:	0c04      	bf      	0x1101d0d8	// 1101d0d8 <__strlen_fast+0x24>
1101d0d2:	2103      	addi      	r1, 4
1101d0d4:	2003      	addi      	r0, 4
1101d0d6:	07fb      	br      	0x1101d0cc	// 1101d0cc <__strlen_fast+0x18>
1101d0d8:	c4027103 	xtrb3      	r3, r2
1101d0dc:	0c0a      	bf      	0x1101d0f0	// 1101d0f0 <__strlen_fast+0x3c>
1101d0de:	2000      	addi      	r0, 1
1101d0e0:	c4027083 	xtrb2      	r3, r2
1101d0e4:	0c06      	bf      	0x1101d0f0	// 1101d0f0 <__strlen_fast+0x3c>
1101d0e6:	2000      	addi      	r0, 1
1101d0e8:	c4027043 	xtrb1      	r3, r2
1101d0ec:	0c02      	bf      	0x1101d0f0	// 1101d0f0 <__strlen_fast+0x3c>
1101d0ee:	2000      	addi      	r0, 1
1101d0f0:	783c      	jmp      	r15
	...

1101d0f4 <__strcpy_fast>:
1101d0f4:	6f03      	mov      	r12, r0
1101d0f6:	c5812422 	or      	r2, r1, r12
1101d0fa:	e4422003 	andi      	r2, r2, 3
1101d0fe:	3a40      	cmpnei      	r2, 0
1101d100:	0c0a      	bf      	0x1101d114	// 1101d114 <__strcpy_fast+0x20>
1101d102:	8160      	ld.b      	r3, (r1, 0x0)
1101d104:	dc6c0000 	st.b      	r3, (r12, 0x0)
1101d108:	2100      	addi      	r1, 1
1101d10a:	e58c0000 	addi      	r12, r12, 1
1101d10e:	3b40      	cmpnei      	r3, 0
1101d110:	0bf9      	bt      	0x1101d102	// 1101d102 <__strcpy_fast+0xe>
1101d112:	783c      	jmp      	r15
1101d114:	9160      	ld.w      	r3, (r1, 0x0)
1101d116:	680f      	tstnbz      	r3
1101d118:	0c3e      	bf      	0x1101d194	// 1101d194 <__strcpy_fast+0xa0>
1101d11a:	dc6c2000 	st.w      	r3, (r12, 0x0)
1101d11e:	9161      	ld.w      	r3, (r1, 0x4)
1101d120:	680f      	tstnbz      	r3
1101d122:	0c25      	bf      	0x1101d16c	// 1101d16c <__strcpy_fast+0x78>
1101d124:	dc6c2001 	st.w      	r3, (r12, 0x4)
1101d128:	9162      	ld.w      	r3, (r1, 0x8)
1101d12a:	680f      	tstnbz      	r3
1101d12c:	0c23      	bf      	0x1101d172	// 1101d172 <__strcpy_fast+0x7e>
1101d12e:	dc6c2002 	st.w      	r3, (r12, 0x8)
1101d132:	9163      	ld.w      	r3, (r1, 0xc)
1101d134:	680f      	tstnbz      	r3
1101d136:	0c21      	bf      	0x1101d178	// 1101d178 <__strcpy_fast+0x84>
1101d138:	dc6c2003 	st.w      	r3, (r12, 0xc)
1101d13c:	9164      	ld.w      	r3, (r1, 0x10)
1101d13e:	680f      	tstnbz      	r3
1101d140:	0c1f      	bf      	0x1101d17e	// 1101d17e <__strcpy_fast+0x8a>
1101d142:	dc6c2004 	st.w      	r3, (r12, 0x10)
1101d146:	9165      	ld.w      	r3, (r1, 0x14)
1101d148:	680f      	tstnbz      	r3
1101d14a:	0c1d      	bf      	0x1101d184	// 1101d184 <__strcpy_fast+0x90>
1101d14c:	dc6c2005 	st.w      	r3, (r12, 0x14)
1101d150:	9166      	ld.w      	r3, (r1, 0x18)
1101d152:	680f      	tstnbz      	r3
1101d154:	0c1b      	bf      	0x1101d18a	// 1101d18a <__strcpy_fast+0x96>
1101d156:	dc6c2006 	st.w      	r3, (r12, 0x18)
1101d15a:	9167      	ld.w      	r3, (r1, 0x1c)
1101d15c:	680f      	tstnbz      	r3
1101d15e:	0c19      	bf      	0x1101d190	// 1101d190 <__strcpy_fast+0x9c>
1101d160:	dc6c2007 	st.w      	r3, (r12, 0x1c)
1101d164:	e58c001f 	addi      	r12, r12, 32
1101d168:	211f      	addi      	r1, 32
1101d16a:	07d5      	br      	0x1101d114	// 1101d114 <__strcpy_fast+0x20>
1101d16c:	e58c0003 	addi      	r12, r12, 4
1101d170:	0412      	br      	0x1101d194	// 1101d194 <__strcpy_fast+0xa0>
1101d172:	e58c0007 	addi      	r12, r12, 8
1101d176:	040f      	br      	0x1101d194	// 1101d194 <__strcpy_fast+0xa0>
1101d178:	e58c000b 	addi      	r12, r12, 12
1101d17c:	040c      	br      	0x1101d194	// 1101d194 <__strcpy_fast+0xa0>
1101d17e:	e58c000f 	addi      	r12, r12, 16
1101d182:	0409      	br      	0x1101d194	// 1101d194 <__strcpy_fast+0xa0>
1101d184:	e58c0013 	addi      	r12, r12, 20
1101d188:	0406      	br      	0x1101d194	// 1101d194 <__strcpy_fast+0xa0>
1101d18a:	e58c0017 	addi      	r12, r12, 24
1101d18e:	0403      	br      	0x1101d194	// 1101d194 <__strcpy_fast+0xa0>
1101d190:	e58c001b 	addi      	r12, r12, 28
1101d194:	c4037102 	xtrb3      	r2, r3
1101d198:	dc4c0000 	st.b      	r2, (r12, 0x0)
1101d19c:	3a40      	cmpnei      	r2, 0
1101d19e:	0c0f      	bf      	0x1101d1bc	// 1101d1bc <__strcpy_fast+0xc8>
1101d1a0:	c4037082 	xtrb2      	r2, r3
1101d1a4:	dc4c0001 	st.b      	r2, (r12, 0x1)
1101d1a8:	3a40      	cmpnei      	r2, 0
1101d1aa:	0c09      	bf      	0x1101d1bc	// 1101d1bc <__strcpy_fast+0xc8>
1101d1ac:	c4037042 	xtrb1      	r2, r3
1101d1b0:	dc4c0002 	st.b      	r2, (r12, 0x2)
1101d1b4:	3a40      	cmpnei      	r2, 0
1101d1b6:	0c03      	bf      	0x1101d1bc	// 1101d1bc <__strcpy_fast+0xc8>
1101d1b8:	dc6c2000 	st.w      	r3, (r12, 0x0)
1101d1bc:	783c      	jmp      	r15
	...

1101d1c0 <__GI_strchr>:
1101d1c0:	8040      	ld.b      	r2, (r0, 0x0)
1101d1c2:	644a      	cmpne      	r2, r1
1101d1c4:	0c06      	bf      	0x1101d1d0	// 1101d1d0 <__GI_strchr+0x10>
1101d1c6:	3a40      	cmpnei      	r2, 0
1101d1c8:	0c03      	bf      	0x1101d1ce	// 1101d1ce <__GI_strchr+0xe>
1101d1ca:	2000      	addi      	r0, 1
1101d1cc:	07fa      	br      	0x1101d1c0	// 1101d1c0 <__GI_strchr>
1101d1ce:	6c0b      	mov      	r0, r2
1101d1d0:	783c      	jmp      	r15
	...

1101d1d4 <__memcmp_fast>:
1101d1d4:	14c1      	push      	r4
1101d1d6:	3a40      	cmpnei      	r2, 0
1101d1d8:	0ca1      	bf      	0x1101d31a	// 1101d31a <__memcmp_fast+0x146>
1101d1da:	6f03      	mov      	r12, r0
1101d1dc:	6c04      	or      	r0, r1
1101d1de:	e4002003 	andi      	r0, r0, 3
1101d1e2:	3840      	cmpnei      	r0, 0
1101d1e4:	0872      	bt      	0x1101d2c8	// 1101d2c8 <__memcmp_fast+0xf4>
1101d1e6:	d80c2000 	ld.w      	r0, (r12, 0x0)
1101d1ea:	d9a12000 	ld.w      	r13, (r1, 0x0)
1101d1ee:	6742      	cmpne      	r0, r13
1101d1f0:	0847      	bt      	0x1101d27e	// 1101d27e <__memcmp_fast+0xaa>
1101d1f2:	3a24      	cmplti      	r2, 5
1101d1f4:	0868      	bt      	0x1101d2c4	// 1101d2c4 <__memcmp_fast+0xf0>
1101d1f6:	2a03      	subi      	r2, 4
1101d1f8:	d80c2001 	ld.w      	r0, (r12, 0x4)
1101d1fc:	d9a12001 	ld.w      	r13, (r1, 0x4)
1101d200:	6742      	cmpne      	r0, r13
1101d202:	083e      	bt      	0x1101d27e	// 1101d27e <__memcmp_fast+0xaa>
1101d204:	3a24      	cmplti      	r2, 5
1101d206:	085f      	bt      	0x1101d2c4	// 1101d2c4 <__memcmp_fast+0xf0>
1101d208:	2a03      	subi      	r2, 4
1101d20a:	d80c2002 	ld.w      	r0, (r12, 0x8)
1101d20e:	d9a12002 	ld.w      	r13, (r1, 0x8)
1101d212:	6742      	cmpne      	r0, r13
1101d214:	0835      	bt      	0x1101d27e	// 1101d27e <__memcmp_fast+0xaa>
1101d216:	3a24      	cmplti      	r2, 5
1101d218:	0856      	bt      	0x1101d2c4	// 1101d2c4 <__memcmp_fast+0xf0>
1101d21a:	2a03      	subi      	r2, 4
1101d21c:	d80c2003 	ld.w      	r0, (r12, 0xc)
1101d220:	d9a12003 	ld.w      	r13, (r1, 0xc)
1101d224:	6742      	cmpne      	r0, r13
1101d226:	082c      	bt      	0x1101d27e	// 1101d27e <__memcmp_fast+0xaa>
1101d228:	3a24      	cmplti      	r2, 5
1101d22a:	084d      	bt      	0x1101d2c4	// 1101d2c4 <__memcmp_fast+0xf0>
1101d22c:	2a03      	subi      	r2, 4
1101d22e:	d80c2004 	ld.w      	r0, (r12, 0x10)
1101d232:	d9a12004 	ld.w      	r13, (r1, 0x10)
1101d236:	6742      	cmpne      	r0, r13
1101d238:	0823      	bt      	0x1101d27e	// 1101d27e <__memcmp_fast+0xaa>
1101d23a:	3a24      	cmplti      	r2, 5
1101d23c:	0844      	bt      	0x1101d2c4	// 1101d2c4 <__memcmp_fast+0xf0>
1101d23e:	2a03      	subi      	r2, 4
1101d240:	d80c2005 	ld.w      	r0, (r12, 0x14)
1101d244:	d9a12005 	ld.w      	r13, (r1, 0x14)
1101d248:	6742      	cmpne      	r0, r13
1101d24a:	081a      	bt      	0x1101d27e	// 1101d27e <__memcmp_fast+0xaa>
1101d24c:	3a24      	cmplti      	r2, 5
1101d24e:	083b      	bt      	0x1101d2c4	// 1101d2c4 <__memcmp_fast+0xf0>
1101d250:	2a03      	subi      	r2, 4
1101d252:	d80c2006 	ld.w      	r0, (r12, 0x18)
1101d256:	d9a12006 	ld.w      	r13, (r1, 0x18)
1101d25a:	6742      	cmpne      	r0, r13
1101d25c:	0811      	bt      	0x1101d27e	// 1101d27e <__memcmp_fast+0xaa>
1101d25e:	3a24      	cmplti      	r2, 5
1101d260:	0832      	bt      	0x1101d2c4	// 1101d2c4 <__memcmp_fast+0xf0>
1101d262:	2a03      	subi      	r2, 4
1101d264:	d80c2007 	ld.w      	r0, (r12, 0x1c)
1101d268:	d9a12007 	ld.w      	r13, (r1, 0x1c)
1101d26c:	6742      	cmpne      	r0, r13
1101d26e:	0808      	bt      	0x1101d27e	// 1101d27e <__memcmp_fast+0xaa>
1101d270:	3a24      	cmplti      	r2, 5
1101d272:	0829      	bt      	0x1101d2c4	// 1101d2c4 <__memcmp_fast+0xf0>
1101d274:	2a03      	subi      	r2, 4
1101d276:	e58c001f 	addi      	r12, r12, 32
1101d27a:	211f      	addi      	r1, 32
1101d27c:	07b5      	br      	0x1101d1e6	// 1101d1e6 <__memcmp_fast+0x12>
1101d27e:	3a40      	cmpnei      	r2, 0
1101d280:	0c4c      	bf      	0x1101d318	// 1101d318 <__memcmp_fast+0x144>
1101d282:	c4007103 	xtrb3      	r3, r0
1101d286:	c40d7104 	xtrb3      	r4, r13
1101d28a:	650e      	cmpne      	r3, r4
1101d28c:	081a      	bt      	0x1101d2c0	// 1101d2c0 <__memcmp_fast+0xec>
1101d28e:	2a00      	subi      	r2, 1
1101d290:	3a40      	cmpnei      	r2, 0
1101d292:	0c17      	bf      	0x1101d2c0	// 1101d2c0 <__memcmp_fast+0xec>
1101d294:	c4007083 	xtrb2      	r3, r0
1101d298:	c40d7084 	xtrb2      	r4, r13
1101d29c:	650e      	cmpne      	r3, r4
1101d29e:	0811      	bt      	0x1101d2c0	// 1101d2c0 <__memcmp_fast+0xec>
1101d2a0:	2a00      	subi      	r2, 1
1101d2a2:	3a40      	cmpnei      	r2, 0
1101d2a4:	0c0e      	bf      	0x1101d2c0	// 1101d2c0 <__memcmp_fast+0xec>
1101d2a6:	c4007043 	xtrb1      	r3, r0
1101d2aa:	c40d7044 	xtrb1      	r4, r13
1101d2ae:	650e      	cmpne      	r3, r4
1101d2b0:	0808      	bt      	0x1101d2c0	// 1101d2c0 <__memcmp_fast+0xec>
1101d2b2:	2a00      	subi      	r2, 1
1101d2b4:	3a40      	cmpnei      	r2, 0
1101d2b6:	0c05      	bf      	0x1101d2c0	// 1101d2c0 <__memcmp_fast+0xec>
1101d2b8:	c4007023 	xtrb0      	r3, r0
1101d2bc:	c40d7024 	xtrb0      	r4, r13
1101d2c0:	5b11      	subu      	r0, r3, r4
1101d2c2:	1481      	pop      	r4
1101d2c4:	6036      	subu      	r0, r13
1101d2c6:	1481      	pop      	r4
1101d2c8:	d80c0000 	ld.b      	r0, (r12, 0x0)
1101d2cc:	d9a10000 	ld.b      	r13, (r1, 0x0)
1101d2d0:	6742      	cmpne      	r0, r13
1101d2d2:	0bf9      	bt      	0x1101d2c4	// 1101d2c4 <__memcmp_fast+0xf0>
1101d2d4:	2a00      	subi      	r2, 1
1101d2d6:	3a40      	cmpnei      	r2, 0
1101d2d8:	0ff6      	bf      	0x1101d2c4	// 1101d2c4 <__memcmp_fast+0xf0>
1101d2da:	d80c0001 	ld.b      	r0, (r12, 0x1)
1101d2de:	d9a10001 	ld.b      	r13, (r1, 0x1)
1101d2e2:	6742      	cmpne      	r0, r13
1101d2e4:	0bf0      	bt      	0x1101d2c4	// 1101d2c4 <__memcmp_fast+0xf0>
1101d2e6:	2a00      	subi      	r2, 1
1101d2e8:	3a40      	cmpnei      	r2, 0
1101d2ea:	0fed      	bf      	0x1101d2c4	// 1101d2c4 <__memcmp_fast+0xf0>
1101d2ec:	d80c0002 	ld.b      	r0, (r12, 0x2)
1101d2f0:	d9a10002 	ld.b      	r13, (r1, 0x2)
1101d2f4:	6742      	cmpne      	r0, r13
1101d2f6:	0be7      	bt      	0x1101d2c4	// 1101d2c4 <__memcmp_fast+0xf0>
1101d2f8:	2a00      	subi      	r2, 1
1101d2fa:	3a40      	cmpnei      	r2, 0
1101d2fc:	0fe4      	bf      	0x1101d2c4	// 1101d2c4 <__memcmp_fast+0xf0>
1101d2fe:	d80c0003 	ld.b      	r0, (r12, 0x3)
1101d302:	d9a10003 	ld.b      	r13, (r1, 0x3)
1101d306:	6742      	cmpne      	r0, r13
1101d308:	0bde      	bt      	0x1101d2c4	// 1101d2c4 <__memcmp_fast+0xf0>
1101d30a:	2a00      	subi      	r2, 1
1101d30c:	3a40      	cmpnei      	r2, 0
1101d30e:	0fdb      	bf      	0x1101d2c4	// 1101d2c4 <__memcmp_fast+0xf0>
1101d310:	e58c0003 	addi      	r12, r12, 4
1101d314:	2103      	addi      	r1, 4
1101d316:	07d9      	br      	0x1101d2c8	// 1101d2c8 <__memcmp_fast+0xf4>
1101d318:	3000      	movi      	r0, 0
1101d31a:	3000      	movi      	r0, 0
1101d31c:	1481      	pop      	r4

1101d31e <__GI_strrchr>:
1101d31e:	6cc3      	mov      	r3, r0
1101d320:	7444      	zextb      	r1, r1
1101d322:	3000      	movi      	r0, 0
1101d324:	8340      	ld.b      	r2, (r3, 0x0)
1101d326:	6486      	cmpne      	r1, r2
1101d328:	c4030c20 	incf      	r0, r3, 0
1101d32c:	3a40      	cmpnei      	r2, 0
1101d32e:	0c03      	bf      	0x1101d334	// 1101d334 <__GI_strrchr+0x16>
1101d330:	2300      	addi      	r3, 1
1101d332:	07f9      	br      	0x1101d324	// 1101d324 <__GI_strrchr+0x6>
1101d334:	783c      	jmp      	r15
	...

1101d338 <__GI_strncmp>:
1101d338:	14c1      	push      	r4
1101d33a:	6cc3      	mov      	r3, r0
1101d33c:	6080      	addu      	r2, r0
1101d33e:	040b      	br      	0x1101d354	// 1101d354 <__GI_strncmp+0x1c>
1101d340:	8380      	ld.b      	r4, (r3, 0x0)
1101d342:	8100      	ld.b      	r0, (r1, 0x0)
1101d344:	c4040080 	subu      	r0, r4, r0
1101d348:	3840      	cmpnei      	r0, 0
1101d34a:	0808      	bt      	0x1101d35a	// 1101d35a <__GI_strncmp+0x22>
1101d34c:	3c40      	cmpnei      	r4, 0
1101d34e:	0c06      	bf      	0x1101d35a	// 1101d35a <__GI_strncmp+0x22>
1101d350:	2300      	addi      	r3, 1
1101d352:	2100      	addi      	r1, 1
1101d354:	648c      	cmphs      	r3, r2
1101d356:	0ff5      	bf      	0x1101d340	// 1101d340 <__GI_strncmp+0x8>
1101d358:	3000      	movi      	r0, 0
1101d35a:	1481      	pop      	r4

1101d35c <__cskyvprintfvsprintf>:
1101d35c:	14d1      	push      	r4, r15
1101d35e:	6d07      	mov      	r4, r1
1101d360:	6ccb      	mov      	r3, r2
1101d362:	6c93      	mov      	r2, r4
1101d364:	3100      	movi      	r1, 0
1101d366:	2900      	subi      	r1, 1
1101d368:	e3fffd9f 	bsr      	0x1101cea6	// 1101cea6 <__cskyvprintfvsnprintf>
1101d36c:	1491      	pop      	r4, r15
	...

1101d370 <sgetc>:
1101d370:	3100      	movi      	r1, 0
1101d372:	9060      	ld.w      	r3, (r0, 0x0)
1101d374:	5b42      	addi      	r2, r3, 1
1101d376:	b040      	st.w      	r2, (r0, 0x0)
1101d378:	2900      	subi      	r1, 1
1101d37a:	8300      	ld.b      	r0, (r3, 0x0)
1101d37c:	3840      	cmpnei      	r0, 0
1101d37e:	c4010c20 	incf      	r0, r1, 0
1101d382:	783c      	jmp      	r15

1101d384 <sputc>:
1101d384:	9160      	ld.w      	r3, (r1, 0x0)
1101d386:	2b00      	subi      	r3, 1
1101d388:	b160      	st.w      	r3, (r1, 0x0)
1101d38a:	3100      	movi      	r1, 0
1101d38c:	8340      	ld.b      	r2, (r3, 0x0)
1101d38e:	2900      	subi      	r1, 1
1101d390:	640a      	cmpne      	r2, r0
1101d392:	c4010c40 	inct      	r0, r1, 0
1101d396:	783c      	jmp      	r15

1101d398 <__cskyvscanfvsscanf>:
1101d398:	14d0      	push      	r15
1101d39a:	1424      	subi      	r14, r14, 16
1101d39c:	1066      	lrw      	r3, 0x1101d370	// 1101d3b4 <__cskyvscanfvsscanf+0x1c>
1101d39e:	ddce2001 	st.w      	r14, (r14, 0x4)
1101d3a2:	b800      	st.w      	r0, (r14, 0x0)
1101d3a4:	b862      	st.w      	r3, (r14, 0x8)
1101d3a6:	1005      	lrw      	r0, 0x1101d384	// 1101d3b8 <__cskyvscanfvsscanf+0x20>
1101d3a8:	b803      	st.w      	r0, (r14, 0xc)
1101d3aa:	1801      	addi      	r0, r14, 4
1101d3ac:	e00003a4 	bsr      	0x1101daf4	// 1101daf4 <__v2_scanf>
1101d3b0:	1404      	addi      	r14, r14, 16
1101d3b2:	1490      	pop      	r15
1101d3b4:	1101d370 	.long	0x1101d370
1101d3b8:	1101d384 	.long	0x1101d384

1101d3bc <PAD.1851>:
1101d3bc:	14d4      	push      	r4-r7, r15
1101d3be:	6d03      	mov      	r4, r0
1101d3c0:	3820      	cmplti      	r0, 1
1101d3c2:	6d47      	mov      	r5, r1
1101d3c4:	6df3      	mov      	r7, r12
1101d3c6:	080f      	bt      	0x1101d3e4	// 1101d3e4 <PAD.1851+0x28>
1101d3c8:	6d83      	mov      	r6, r0
1101d3ca:	3e30      	cmplti      	r6, 17
1101d3cc:	9760      	ld.w      	r3, (r7, 0x0)
1101d3ce:	0c0c      	bf      	0x1101d3e6	// 1101d3e6 <PAD.1851+0x2a>
1101d3d0:	5c23      	subi      	r1, r4, 1
1101d3d2:	3200      	movi      	r2, 0
1101d3d4:	2a0f      	subi      	r2, 16
1101d3d6:	c4412020 	and      	r0, r1, r2
1101d3da:	9340      	ld.w      	r2, (r3, 0x0)
1101d3dc:	5c21      	subu      	r1, r4, r0
1101d3de:	9381      	ld.w      	r4, (r3, 0x4)
1101d3e0:	6c17      	mov      	r0, r5
1101d3e2:	7bd1      	jsr      	r4
1101d3e4:	1494      	pop      	r4-r7, r15
1101d3e6:	9340      	ld.w      	r2, (r3, 0x0)
1101d3e8:	9361      	ld.w      	r3, (r3, 0x4)
1101d3ea:	3110      	movi      	r1, 16
1101d3ec:	6c17      	mov      	r0, r5
1101d3ee:	7bcd      	jsr      	r3
1101d3f0:	2e0f      	subi      	r6, 16
1101d3f2:	07ec      	br      	0x1101d3ca	// 1101d3ca <PAD.1851+0xe>

1101d3f4 <__v2_printf>:
1101d3f4:	14d4      	push      	r4-r7, r15
1101d3f6:	143a      	subi      	r14, r14, 104
1101d3f8:	6d8b      	mov      	r6, r2
1101d3fa:	b80e      	st.w      	r0, (r14, 0x38)
1101d3fc:	3000      	movi      	r0, 0
1101d3fe:	b826      	st.w      	r1, (r14, 0x18)
1101d400:	1910      	addi      	r1, r14, 64
1101d402:	2100      	addi      	r1, 1
1101d404:	1b1f      	addi      	r3, r14, 124
1101d406:	b809      	st.w      	r0, (r14, 0x24)
1101d408:	b86f      	st.w      	r3, (r14, 0x3c)
1101d40a:	b808      	st.w      	r0, (r14, 0x20)
1101d40c:	b82a      	st.w      	r1, (r14, 0x28)
1101d40e:	9886      	ld.w      	r4, (r14, 0x18)
1101d410:	8440      	ld.b      	r2, (r4, 0x0)
1101d412:	3a40      	cmpnei      	r2, 0
1101d414:	0c04      	bf      	0x1101d41c	// 1101d41c <__v2_printf+0x28>
1101d416:	eb420025 	cmpnei      	r2, 37
1101d41a:	0842      	bt      	0x1101d49e	// 1101d49e <__v2_printf+0xaa>
1101d41c:	98a6      	ld.w      	r5, (r14, 0x18)
1101d41e:	5cb5      	subu      	r5, r4, r5
1101d420:	3d40      	cmpnei      	r5, 0
1101d422:	0c0a      	bf      	0x1101d436	// 1101d436 <__v2_printf+0x42>
1101d424:	986e      	ld.w      	r3, (r14, 0x38)
1101d426:	9806      	ld.w      	r0, (r14, 0x18)
1101d428:	9340      	ld.w      	r2, (r3, 0x0)
1101d42a:	9361      	ld.w      	r3, (r3, 0x4)
1101d42c:	6c57      	mov      	r1, r5
1101d42e:	7bcd      	jsr      	r3
1101d430:	9808      	ld.w      	r0, (r14, 0x20)
1101d432:	5834      	addu      	r1, r0, r5
1101d434:	b828      	st.w      	r1, (r14, 0x20)
1101d436:	8440      	ld.b      	r2, (r4, 0x0)
1101d438:	3a40      	cmpnei      	r2, 0
1101d43a:	e8400356 	bf      	0x1101dae6	// 1101dae6 <__v2_printf+0x6f2>
1101d43e:	3700      	movi      	r7, 0
1101d440:	3000      	movi      	r0, 0
1101d442:	dcee0033 	st.b      	r7, (r14, 0x33)
1101d446:	3200      	movi      	r2, 0
1101d448:	3300      	movi      	r3, 0
1101d44a:	b805      	st.w      	r0, (r14, 0x14)
1101d44c:	3700      	movi      	r7, 0
1101d44e:	3500      	movi      	r5, 0
1101d450:	2400      	addi      	r4, 1
1101d452:	2d00      	subi      	r5, 1
1101d454:	5c22      	addi      	r1, r4, 1
1101d456:	8480      	ld.b      	r4, (r4, 0x0)
1101d458:	b826      	st.w      	r1, (r14, 0x18)
1101d45a:	eb440064 	cmpnei      	r4, 100
1101d45e:	0d8e      	bf      	0x1101d77a	// 1101d77a <__v2_printf+0x386>
1101d460:	eb240064 	cmplti      	r4, 101
1101d464:	0c4d      	bf      	0x1101d4fe	// 1101d4fe <__v2_printf+0x10a>
1101d466:	eb44002e 	cmpnei      	r4, 46
1101d46a:	0d40      	bf      	0x1101d6ea	// 1101d6ea <__v2_printf+0x2f6>
1101d46c:	eb24002e 	cmplti      	r4, 47
1101d470:	0c28      	bf      	0x1101d4c0	// 1101d4c0 <__v2_printf+0xcc>
1101d472:	eb44002a 	cmpnei      	r4, 42
1101d476:	0d2f      	bf      	0x1101d6d4	// 1101d6d4 <__v2_printf+0x2e0>
1101d478:	eb24002a 	cmplti      	r4, 43
1101d47c:	0c19      	bf      	0x1101d4ae	// 1101d4ae <__v2_printf+0xba>
1101d47e:	eb440020 	cmpnei      	r4, 32
1101d482:	0d21      	bf      	0x1101d6c4	// 1101d6c4 <__v2_printf+0x2d0>
1101d484:	eb440023 	cmpnei      	r4, 35
1101d488:	0d23      	bf      	0x1101d6ce	// 1101d6ce <__v2_printf+0x2da>
1101d48a:	3c40      	cmpnei      	r4, 0
1101d48c:	e840032d 	bf      	0x1101dae6	// 1101dae6 <__v2_printf+0x6f2>
1101d490:	3500      	movi      	r5, 0
1101d492:	dc8e0040 	st.b      	r4, (r14, 0x40)
1101d496:	dcae0033 	st.b      	r5, (r14, 0x33)
1101d49a:	b8c4      	st.w      	r6, (r14, 0x10)
1101d49c:	042c      	br      	0x1101d4f4	// 1101d4f4 <__v2_printf+0x100>
1101d49e:	2400      	addi      	r4, 1
1101d4a0:	07b8      	br      	0x1101d410	// 1101d410 <__v2_printf+0x1c>
1101d4a2:	3201      	movi      	r2, 1
1101d4a4:	332b      	movi      	r3, 43
1101d4a6:	9886      	ld.w      	r4, (r14, 0x18)
1101d4a8:	07d6      	br      	0x1101d454	// 1101d454 <__v2_printf+0x60>
1101d4aa:	6d87      	mov      	r6, r1
1101d4ac:	07fd      	br      	0x1101d4a6	// 1101d4a6 <__v2_printf+0xb2>
1101d4ae:	eb44002b 	cmpnei      	r4, 43
1101d4b2:	0ff8      	bf      	0x1101d4a2	// 1101d4a2 <__v2_printf+0xae>
1101d4b4:	eb44002d 	cmpnei      	r4, 45
1101d4b8:	0be9      	bt      	0x1101d48a	// 1101d48a <__v2_printf+0x96>
1101d4ba:	ece70004 	ori      	r7, r7, 4
1101d4be:	07f4      	br      	0x1101d4a6	// 1101d4a6 <__v2_printf+0xb2>
1101d4c0:	eb240039 	cmplti      	r4, 58
1101d4c4:	0c0a      	bf      	0x1101d4d8	// 1101d4d8 <__v2_printf+0xe4>
1101d4c6:	eb240030 	cmplti      	r4, 49
1101d4ca:	0d32      	bf      	0x1101d72e	// 1101d72e <__v2_printf+0x33a>
1101d4cc:	eb440030 	cmpnei      	r4, 48
1101d4d0:	0bdd      	bt      	0x1101d48a	// 1101d48a <__v2_printf+0x96>
1101d4d2:	ece70080 	ori      	r7, r7, 128
1101d4d6:	07e8      	br      	0x1101d4a6	// 1101d4a6 <__v2_printf+0xb2>
1101d4d8:	eb440058 	cmpnei      	r4, 88
1101d4dc:	0cd3      	bf      	0x1101d682	// 1101d682 <__v2_printf+0x28e>
1101d4de:	eb440063 	cmpnei      	r4, 99
1101d4e2:	0bd4      	bt      	0x1101d48a	// 1101d48a <__v2_printf+0x96>
1101d4e4:	8660      	ld.b      	r3, (r6, 0x0)
1101d4e6:	3200      	movi      	r2, 0
1101d4e8:	5eae      	addi      	r5, r6, 4
1101d4ea:	dc6e0040 	st.b      	r3, (r14, 0x40)
1101d4ee:	b8a4      	st.w      	r5, (r14, 0x10)
1101d4f0:	dc4e0033 	st.b      	r2, (r14, 0x33)
1101d4f4:	3501      	movi      	r5, 1
1101d4f6:	3600      	movi      	r6, 0
1101d4f8:	1c10      	addi      	r4, r14, 64
1101d4fa:	e800028d 	br      	0x1101da14	// 1101da14 <__v2_printf+0x620>
1101d4fe:	eb44006d 	cmpnei      	r4, 109
1101d502:	0d2d      	bf      	0x1101d75c	// 1101d75c <__v2_printf+0x368>
1101d504:	eb24006d 	cmplti      	r4, 110
1101d508:	0c86      	bf      	0x1101d614	// 1101d614 <__v2_printf+0x220>
1101d50a:	eb440068 	cmpnei      	r4, 104
1101d50e:	0d21      	bf      	0x1101d750	// 1101d750 <__v2_printf+0x35c>
1101d510:	eb240068 	cmplti      	r4, 105
1101d514:	0c6f      	bf      	0x1101d5f2	// 1101d5f2 <__v2_printf+0x1fe>
1101d516:	eb240065 	cmplti      	r4, 102
1101d51a:	0bb8      	bt      	0x1101d48a	// 1101d48a <__v2_printf+0x96>
1101d51c:	3a40      	cmpnei      	r2, 0
1101d51e:	0c03      	bf      	0x1101d524	// 1101d524 <__v2_printf+0x130>
1101d520:	dc6e0033 	st.b      	r3, (r14, 0x33)
1101d524:	9621      	ld.w      	r1, (r6, 0x4)
1101d526:	9600      	ld.w      	r0, (r6, 0x0)
1101d528:	5e5e      	addi      	r2, r6, 8
1101d52a:	98c5      	ld.w      	r6, (r14, 0x14)
1101d52c:	3301      	movi      	r3, 1
1101d52e:	3e40      	cmpnei      	r6, 0
1101d530:	c4c30c20 	incf      	r6, r3, 0
1101d534:	b8c5      	st.w      	r6, (r14, 0x14)
1101d536:	b844      	st.w      	r2, (r14, 0x10)
1101d538:	9865      	ld.w      	r3, (r14, 0x14)
1101d53a:	3200      	movi      	r2, 0
1101d53c:	3606      	movi      	r6, 6
1101d53e:	2a00      	subi      	r2, 1
1101d540:	6496      	cmpne      	r5, r2
1101d542:	c4c50c40 	inct      	r6, r5, 0
1101d546:	b860      	st.w      	r3, (r14, 0x0)
1101d548:	b8c1      	st.w      	r6, (r14, 0x4)
1101d54a:	3328      	movi      	r3, 40
1101d54c:	b847      	st.w      	r2, (r14, 0x1c)
1101d54e:	1a10      	addi      	r2, r14, 64
1101d550:	e0000b17 	bsr      	0x1101eb7e	// 1101eb7e <__GI___dtostr>
1101d554:	9827      	ld.w      	r1, (r14, 0x1c)
1101d556:	b80b      	st.w      	r0, (r14, 0x2c)
1101d558:	6456      	cmpne      	r5, r1
1101d55a:	0c1a      	bf      	0x1101d58e	// 1101d58e <__v2_printf+0x19a>
1101d55c:	312e      	movi      	r1, 46
1101d55e:	980a      	ld.w      	r0, (r14, 0x28)
1101d560:	e3fffe30 	bsr      	0x1101d1c0	// 1101d1c0 <__GI_strchr>
1101d564:	984b      	ld.w      	r2, (r14, 0x2c)
1101d566:	3840      	cmpnei      	r0, 0
1101d568:	0d40      	bf      	0x1101d7e8	// 1101d7e8 <__v2_printf+0x3f4>
1101d56a:	3e40      	cmpnei      	r6, 0
1101d56c:	0805      	bt      	0x1101d576	// 1101d576 <__v2_printf+0x182>
1101d56e:	e4472001 	andi      	r2, r7, 1
1101d572:	3a40      	cmpnei      	r2, 0
1101d574:	0d38      	bf      	0x1101d7e4	// 1101d7e4 <__v2_printf+0x3f0>
1101d576:	58a2      	addi      	r5, r0, 1
1101d578:	2600      	addi      	r6, 1
1101d57a:	5e75      	subu      	r3, r6, r5
1101d57c:	582c      	addu      	r1, r0, r3
1101d57e:	3920      	cmplti      	r1, 1
1101d580:	0805      	bt      	0x1101d58a	// 1101d58a <__v2_printf+0x196>
1101d582:	2500      	addi      	r5, 1
1101d584:	8540      	ld.b      	r2, (r5, 0x0)
1101d586:	3a40      	cmpnei      	r2, 0
1101d588:	0bf9      	bt      	0x1101d57a	// 1101d57a <__v2_printf+0x186>
1101d58a:	3600      	movi      	r6, 0
1101d58c:	a5c0      	st.b      	r6, (r5, 0x0)
1101d58e:	eb440067 	cmpnei      	r4, 103
1101d592:	0822      	bt      	0x1101d5d6	// 1101d5d6 <__v2_printf+0x1e2>
1101d594:	312e      	movi      	r1, 46
1101d596:	1810      	addi      	r0, r14, 64
1101d598:	e3fffe14 	bsr      	0x1101d1c0	// 1101d1c0 <__GI_strchr>
1101d59c:	6d03      	mov      	r4, r0
1101d59e:	3840      	cmpnei      	r0, 0
1101d5a0:	0c1b      	bf      	0x1101d5d6	// 1101d5d6 <__v2_printf+0x1e2>
1101d5a2:	3165      	movi      	r1, 101
1101d5a4:	e3fffe0e 	bsr      	0x1101d1c0	// 1101d1c0 <__GI_strchr>
1101d5a8:	6c43      	mov      	r1, r0
1101d5aa:	8400      	ld.b      	r0, (r4, 0x0)
1101d5ac:	3840      	cmpnei      	r0, 0
1101d5ae:	0928      	bt      	0x1101d7fe	// 1101d7fe <__v2_printf+0x40a>
1101d5b0:	3940      	cmpnei      	r1, 0
1101d5b2:	c4810c40 	inct      	r4, r1, 0
1101d5b6:	5ca3      	subi      	r5, r4, 1
1101d5b8:	8560      	ld.b      	r3, (r5, 0x0)
1101d5ba:	eb430030 	cmpnei      	r3, 48
1101d5be:	0d22      	bf      	0x1101d802	// 1101d802 <__v2_printf+0x40e>
1101d5c0:	eb43002e 	cmpnei      	r3, 46
1101d5c4:	c4850c20 	incf      	r4, r5, 0
1101d5c8:	3200      	movi      	r2, 0
1101d5ca:	3940      	cmpnei      	r1, 0
1101d5cc:	a440      	st.b      	r2, (r4, 0x0)
1101d5ce:	0c04      	bf      	0x1101d5d6	// 1101d5d6 <__v2_printf+0x1e2>
1101d5d0:	6c13      	mov      	r0, r4
1101d5d2:	e3fffd91 	bsr      	0x1101d0f4	// 1101d0f4 <__strcpy_fast>
1101d5d6:	d88e0040 	ld.b      	r4, (r14, 0x40)
1101d5da:	eb44002d 	cmpnei      	r4, 45
1101d5de:	09e6      	bt      	0x1101d9aa	// 1101d9aa <__v2_printf+0x5b6>
1101d5e0:	dc8e0033 	st.b      	r4, (r14, 0x33)
1101d5e4:	1e10      	addi      	r6, r14, 64
1101d5e6:	5e82      	addi      	r4, r6, 1
1101d5e8:	6c13      	mov      	r0, r4
1101d5ea:	e3fffd65 	bsr      	0x1101d0b4	// 1101d0b4 <__strlen_fast>
1101d5ee:	6d43      	mov      	r5, r0
1101d5f0:	04c3      	br      	0x1101d776	// 1101d776 <__v2_printf+0x382>
1101d5f2:	eb440069 	cmpnei      	r4, 105
1101d5f6:	0cc2      	bf      	0x1101d77a	// 1101d77a <__v2_printf+0x386>
1101d5f8:	eb44006c 	cmpnei      	r4, 108
1101d5fc:	0b47      	bt      	0x1101d48a	// 1101d48a <__v2_printf+0x96>
1101d5fe:	9806      	ld.w      	r0, (r14, 0x18)
1101d600:	8020      	ld.b      	r1, (r0, 0x0)
1101d602:	eb41006c 	cmpnei      	r1, 108
1101d606:	08a8      	bt      	0x1101d756	// 1101d756 <__v2_printf+0x362>
1101d608:	9886      	ld.w      	r4, (r14, 0x18)
1101d60a:	2400      	addi      	r4, 1
1101d60c:	b886      	st.w      	r4, (r14, 0x18)
1101d60e:	ece70020 	ori      	r7, r7, 32
1101d612:	074a      	br      	0x1101d4a6	// 1101d4a6 <__v2_printf+0xb2>
1101d614:	eb440071 	cmpnei      	r4, 113
1101d618:	0ffb      	bf      	0x1101d60e	// 1101d60e <__v2_printf+0x21a>
1101d61a:	eb240071 	cmplti      	r4, 114
1101d61e:	0c19      	bf      	0x1101d650	// 1101d650 <__v2_printf+0x25c>
1101d620:	eb44006f 	cmpnei      	r4, 111
1101d624:	0cf1      	bf      	0x1101d806	// 1101d806 <__v2_printf+0x412>
1101d626:	eb440070 	cmpnei      	r4, 112
1101d62a:	0b30      	bt      	0x1101d48a	// 1101d48a <__v2_printf+0x96>
1101d62c:	5e6e      	addi      	r3, r6, 4
1101d62e:	9640      	ld.w      	r2, (r6, 0x0)
1101d630:	3030      	movi      	r0, 48
1101d632:	3600      	movi      	r6, 0
1101d634:	3178      	movi      	r1, 120
1101d636:	0285      	lrw      	r4, 0x1101229f	// 1101d91c <__v2_printf+0x528>
1101d638:	ece70002 	ori      	r7, r7, 2
1101d63c:	b864      	st.w      	r3, (r14, 0x10)
1101d63e:	b842      	st.w      	r2, (r14, 0x8)
1101d640:	b8c3      	st.w      	r6, (r14, 0xc)
1101d642:	dc0e0034 	st.b      	r0, (r14, 0x34)
1101d646:	dc2e0035 	st.b      	r1, (r14, 0x35)
1101d64a:	b889      	st.w      	r4, (r14, 0x24)
1101d64c:	3602      	movi      	r6, 2
1101d64e:	04e7      	br      	0x1101d81c	// 1101d81c <__v2_printf+0x428>
1101d650:	eb440075 	cmpnei      	r4, 117
1101d654:	0d1c      	bf      	0x1101d88c	// 1101d88c <__v2_printf+0x498>
1101d656:	eb440078 	cmpnei      	r4, 120
1101d65a:	0d38      	bf      	0x1101d8ca	// 1101d8ca <__v2_printf+0x4d6>
1101d65c:	eb440073 	cmpnei      	r4, 115
1101d660:	0b15      	bt      	0x1101d48a	// 1101d48a <__v2_printf+0x96>
1101d662:	5e0e      	addi      	r0, r6, 4
1101d664:	9680      	ld.w      	r4, (r6, 0x0)
1101d666:	3100      	movi      	r1, 0
1101d668:	3600      	movi      	r6, 0
1101d66a:	2e00      	subi      	r6, 1
1101d66c:	6596      	cmpne      	r5, r6
1101d66e:	b804      	st.w      	r0, (r14, 0x10)
1101d670:	dc2e0033 	st.b      	r1, (r14, 0x33)
1101d674:	0901      	bt      	0x1101d876	// 1101d876 <__v2_printf+0x482>
1101d676:	6cd3      	mov      	r3, r4
1101d678:	8340      	ld.b      	r2, (r3, 0x0)
1101d67a:	3a40      	cmpnei      	r2, 0
1101d67c:	0906      	bt      	0x1101d888	// 1101d888 <__v2_printf+0x494>
1101d67e:	5bb1      	subu      	r5, r3, r4
1101d680:	047b      	br      	0x1101d776	// 1101d776 <__v2_printf+0x382>
1101d682:	3a40      	cmpnei      	r2, 0
1101d684:	0c03      	bf      	0x1101d68a	// 1101d68a <__v2_printf+0x296>
1101d686:	dc6e0033 	st.b      	r3, (r14, 0x33)
1101d68a:	0259      	lrw      	r2, 0x1101228e	// 1101d920 <__v2_printf+0x52c>
1101d68c:	e4672020 	andi      	r3, r7, 32
1101d690:	b849      	st.w      	r2, (r14, 0x24)
1101d692:	3b40      	cmpnei      	r3, 0
1101d694:	0d21      	bf      	0x1101d8d6	// 1101d8d6 <__v2_printf+0x4e2>
1101d696:	9640      	ld.w      	r2, (r6, 0x0)
1101d698:	9661      	ld.w      	r3, (r6, 0x4)
1101d69a:	5e3e      	addi      	r1, r6, 8
1101d69c:	b842      	st.w      	r2, (r14, 0x8)
1101d69e:	b863      	st.w      	r3, (r14, 0xc)
1101d6a0:	b824      	st.w      	r1, (r14, 0x10)
1101d6a2:	e4672001 	andi      	r3, r7, 1
1101d6a6:	3b40      	cmpnei      	r3, 0
1101d6a8:	0fd2      	bf      	0x1101d64c	// 1101d64c <__v2_printf+0x258>
1101d6aa:	98c2      	ld.w      	r6, (r14, 0x8)
1101d6ac:	9803      	ld.w      	r0, (r14, 0xc)
1101d6ae:	6d80      	or      	r6, r0
1101d6b0:	3e40      	cmpnei      	r6, 0
1101d6b2:	0fcd      	bf      	0x1101d64c	// 1101d64c <__v2_printf+0x258>
1101d6b4:	3130      	movi      	r1, 48
1101d6b6:	dc8e0035 	st.b      	r4, (r14, 0x35)
1101d6ba:	dc2e0034 	st.b      	r1, (r14, 0x34)
1101d6be:	ece70002 	ori      	r7, r7, 2
1101d6c2:	07c5      	br      	0x1101d64c	// 1101d64c <__v2_printf+0x258>
1101d6c4:	3b40      	cmpnei      	r3, 0
1101d6c6:	0af0      	bt      	0x1101d4a6	// 1101d4a6 <__v2_printf+0xb2>
1101d6c8:	3201      	movi      	r2, 1
1101d6ca:	3320      	movi      	r3, 32
1101d6cc:	06ed      	br      	0x1101d4a6	// 1101d4a6 <__v2_printf+0xb2>
1101d6ce:	ece70001 	ori      	r7, r7, 1
1101d6d2:	06ea      	br      	0x1101d4a6	// 1101d4a6 <__v2_printf+0xb2>
1101d6d4:	9680      	ld.w      	r4, (r6, 0x0)
1101d6d6:	5e2e      	addi      	r1, r6, 4
1101d6d8:	3cdf      	btsti      	r4, 31
1101d6da:	b885      	st.w      	r4, (r14, 0x14)
1101d6dc:	0ee7      	bf      	0x1101d4aa	// 1101d4aa <__v2_printf+0xb6>
1101d6de:	3600      	movi      	r6, 0
1101d6e0:	9805      	ld.w      	r0, (r14, 0x14)
1101d6e2:	5e81      	subu      	r4, r6, r0
1101d6e4:	6d87      	mov      	r6, r1
1101d6e6:	b885      	st.w      	r4, (r14, 0x14)
1101d6e8:	06e9      	br      	0x1101d4ba	// 1101d4ba <__v2_printf+0xc6>
1101d6ea:	9806      	ld.w      	r0, (r14, 0x18)
1101d6ec:	9826      	ld.w      	r1, (r14, 0x18)
1101d6ee:	8080      	ld.b      	r4, (r0, 0x0)
1101d6f0:	2100      	addi      	r1, 1
1101d6f2:	eb44002a 	cmpnei      	r4, 42
1101d6f6:	0c0a      	bf      	0x1101d70a	// 1101d70a <__v2_printf+0x316>
1101d6f8:	b824      	st.w      	r1, (r14, 0x10)
1101d6fa:	3500      	movi      	r5, 0
1101d6fc:	e424102f 	subi      	r1, r4, 48
1101d700:	3909      	cmphsi      	r1, 10
1101d702:	9804      	ld.w      	r0, (r14, 0x10)
1101d704:	0c0c      	bf      	0x1101d71c	// 1101d71c <__v2_printf+0x328>
1101d706:	b806      	st.w      	r0, (r14, 0x18)
1101d708:	06a9      	br      	0x1101d45a	// 1101d45a <__v2_printf+0x66>
1101d70a:	9680      	ld.w      	r4, (r6, 0x0)
1101d70c:	3500      	movi      	r5, 0
1101d70e:	3cdf      	btsti      	r4, 31
1101d710:	2d00      	subi      	r5, 1
1101d712:	2603      	addi      	r6, 4
1101d714:	c4a40c20 	incf      	r5, r4, 0
1101d718:	b826      	st.w      	r1, (r14, 0x18)
1101d71a:	06c6      	br      	0x1101d4a6	// 1101d4a6 <__v2_printf+0xb2>
1101d71c:	340a      	movi      	r4, 10
1101d71e:	c4858420 	mult      	r0, r5, r4
1101d722:	59a0      	addu      	r5, r1, r0
1101d724:	9804      	ld.w      	r0, (r14, 0x10)
1101d726:	8080      	ld.b      	r4, (r0, 0x0)
1101d728:	2000      	addi      	r0, 1
1101d72a:	b804      	st.w      	r0, (r14, 0x10)
1101d72c:	07e8      	br      	0x1101d6fc	// 1101d6fc <__v2_printf+0x308>
1101d72e:	3100      	movi      	r1, 0
1101d730:	b825      	st.w      	r1, (r14, 0x14)
1101d732:	9825      	ld.w      	r1, (r14, 0x14)
1101d734:	300a      	movi      	r0, 10
1101d736:	7c40      	mult      	r1, r0
1101d738:	2c2f      	subi      	r4, 48
1101d73a:	6104      	addu      	r4, r1
1101d73c:	9826      	ld.w      	r1, (r14, 0x18)
1101d73e:	b885      	st.w      	r4, (r14, 0x14)
1101d740:	5902      	addi      	r0, r1, 1
1101d742:	8180      	ld.b      	r4, (r1, 0x0)
1101d744:	e424102f 	subi      	r1, r4, 48
1101d748:	3909      	cmphsi      	r1, 10
1101d74a:	b806      	st.w      	r0, (r14, 0x18)
1101d74c:	0ff3      	bf      	0x1101d732	// 1101d732 <__v2_printf+0x33e>
1101d74e:	07dc      	br      	0x1101d706	// 1101d706 <__v2_printf+0x312>
1101d750:	ece70040 	ori      	r7, r7, 64
1101d754:	06a9      	br      	0x1101d4a6	// 1101d4a6 <__v2_printf+0xb2>
1101d756:	ece70010 	ori      	r7, r7, 16
1101d75a:	06a6      	br      	0x1101d4a6	// 1101d4a6 <__v2_printf+0xb2>
1101d75c:	3a40      	cmpnei      	r2, 0
1101d75e:	0c03      	bf      	0x1101d764	// 1101d764 <__v2_printf+0x370>
1101d760:	dc6e0033 	st.b      	r3, (r14, 0x33)
1101d764:	13b0      	lrw      	r5, 0x1fffdad8	// 1101d924 <__v2_printf+0x530>
1101d766:	9500      	ld.w      	r0, (r5, 0x0)
1101d768:	e00054a2 	bsr      	0x110280ac	// 110280ac <strerror>
1101d76c:	6d03      	mov      	r4, r0
1101d76e:	e3fffca3 	bsr      	0x1101d0b4	// 1101d0b4 <__strlen_fast>
1101d772:	6d43      	mov      	r5, r0
1101d774:	b8c4      	st.w      	r6, (r14, 0x10)
1101d776:	3600      	movi      	r6, 0
1101d778:	054e      	br      	0x1101da14	// 1101da14 <__v2_printf+0x620>
1101d77a:	3a40      	cmpnei      	r2, 0
1101d77c:	0c03      	bf      	0x1101d782	// 1101d782 <__v2_printf+0x38e>
1101d77e:	dc6e0033 	st.b      	r3, (r14, 0x33)
1101d782:	e4272020 	andi      	r1, r7, 32
1101d786:	3940      	cmpnei      	r1, 0
1101d788:	0c1a      	bf      	0x1101d7bc	// 1101d7bc <__v2_printf+0x3c8>
1101d78a:	9660      	ld.w      	r3, (r6, 0x0)
1101d78c:	9681      	ld.w      	r4, (r6, 0x4)
1101d78e:	5e5e      	addi      	r2, r6, 8
1101d790:	b862      	st.w      	r3, (r14, 0x8)
1101d792:	b883      	st.w      	r4, (r14, 0xc)
1101d794:	b844      	st.w      	r2, (r14, 0x10)
1101d796:	9803      	ld.w      	r0, (r14, 0xc)
1101d798:	38df      	btsti      	r0, 31
1101d79a:	0c0f      	bf      	0x1101d7b8	// 1101d7b8 <__v2_printf+0x3c4>
1101d79c:	9802      	ld.w      	r0, (r14, 0x8)
1101d79e:	9823      	ld.w      	r1, (r14, 0xc)
1101d7a0:	3200      	movi      	r2, 0
1101d7a2:	3300      	movi      	r3, 0
1101d7a4:	342d      	movi      	r4, 45
1101d7a6:	6400      	cmphs      	r0, r0
1101d7a8:	c4020100 	subc      	r0, r2, r0
1101d7ac:	c4230101 	subc      	r1, r3, r1
1101d7b0:	b802      	st.w      	r0, (r14, 0x8)
1101d7b2:	b823      	st.w      	r1, (r14, 0xc)
1101d7b4:	dc8e0033 	st.b      	r4, (r14, 0x33)
1101d7b8:	3601      	movi      	r6, 1
1101d7ba:	0434      	br      	0x1101d822	// 1101d822 <__v2_printf+0x42e>
1101d7bc:	e4472010 	andi      	r2, r7, 16
1101d7c0:	3a40      	cmpnei      	r2, 0
1101d7c2:	0c08      	bf      	0x1101d7d2	// 1101d7d2 <__v2_printf+0x3de>
1101d7c4:	5e2e      	addi      	r1, r6, 4
1101d7c6:	9680      	ld.w      	r4, (r6, 0x0)
1101d7c8:	b824      	st.w      	r1, (r14, 0x10)
1101d7ca:	54df      	asri      	r6, r4, 31
1101d7cc:	b882      	st.w      	r4, (r14, 0x8)
1101d7ce:	b8c3      	st.w      	r6, (r14, 0xc)
1101d7d0:	07e3      	br      	0x1101d796	// 1101d796 <__v2_printf+0x3a2>
1101d7d2:	e4672040 	andi      	r3, r7, 64
1101d7d6:	5e0e      	addi      	r0, r6, 4
1101d7d8:	3b40      	cmpnei      	r3, 0
1101d7da:	9680      	ld.w      	r4, (r6, 0x0)
1101d7dc:	b804      	st.w      	r0, (r14, 0x10)
1101d7de:	0ff6      	bf      	0x1101d7ca	// 1101d7ca <__v2_printf+0x3d6>
1101d7e0:	7513      	sexth      	r4, r4
1101d7e2:	07f4      	br      	0x1101d7ca	// 1101d7ca <__v2_printf+0x3d6>
1101d7e4:	6d43      	mov      	r5, r0
1101d7e6:	06d2      	br      	0x1101d58a	// 1101d58a <__v2_printf+0x196>
1101d7e8:	e4a72001 	andi      	r5, r7, 1
1101d7ec:	3d40      	cmpnei      	r5, 0
1101d7ee:	0ed0      	bf      	0x1101d58e	// 1101d58e <__v2_printf+0x19a>
1101d7f0:	332e      	movi      	r3, 46
1101d7f2:	3100      	movi      	r1, 0
1101d7f4:	1e10      	addi      	r6, r14, 64
1101d7f6:	5e08      	addu      	r0, r6, r2
1101d7f8:	a060      	st.b      	r3, (r0, 0x0)
1101d7fa:	a021      	st.b      	r1, (r0, 0x1)
1101d7fc:	06c9      	br      	0x1101d58e	// 1101d58e <__v2_printf+0x19a>
1101d7fe:	2400      	addi      	r4, 1
1101d800:	06d5      	br      	0x1101d5aa	// 1101d5aa <__v2_printf+0x1b6>
1101d802:	6d17      	mov      	r4, r5
1101d804:	06d9      	br      	0x1101d5b6	// 1101d5b6 <__v2_printf+0x1c2>
1101d806:	e4672020 	andi      	r3, r7, 32
1101d80a:	3b40      	cmpnei      	r3, 0
1101d80c:	0c22      	bf      	0x1101d850	// 1101d850 <__v2_printf+0x45c>
1101d80e:	5e7e      	addi      	r3, r6, 8
1101d810:	b864      	st.w      	r3, (r14, 0x10)
1101d812:	9640      	ld.w      	r2, (r6, 0x0)
1101d814:	9661      	ld.w      	r3, (r6, 0x4)
1101d816:	3600      	movi      	r6, 0
1101d818:	b842      	st.w      	r2, (r14, 0x8)
1101d81a:	b863      	st.w      	r3, (r14, 0xc)
1101d81c:	3000      	movi      	r0, 0
1101d81e:	dc0e0033 	st.b      	r0, (r14, 0x33)
1101d822:	3100      	movi      	r1, 0
1101d824:	2900      	subi      	r1, 1
1101d826:	6456      	cmpne      	r5, r1
1101d828:	9842      	ld.w      	r2, (r14, 0x8)
1101d82a:	9863      	ld.w      	r3, (r14, 0xc)
1101d82c:	6c8c      	or      	r2, r3
1101d82e:	0cc6      	bf      	0x1101d9ba	// 1101d9ba <__v2_printf+0x5c6>
1101d830:	c4e72820 	bclri      	r0, r7, 7
1101d834:	3a40      	cmpnei      	r2, 0
1101d836:	b807      	st.w      	r0, (r14, 0x1c)
1101d838:	08c4      	bt      	0x1101d9c0	// 1101d9c0 <__v2_printf+0x5cc>
1101d83a:	3d40      	cmpnei      	r5, 0
1101d83c:	0cad      	bf      	0x1101d996	// 1101d996 <__v2_printf+0x5a2>
1101d83e:	3e41      	cmpnei      	r6, 1
1101d840:	0c66      	bf      	0x1101d90c	// 1101d90c <__v2_printf+0x518>
1101d842:	3e42      	cmpnei      	r6, 2
1101d844:	0c8b      	bf      	0x1101d95a	// 1101d95a <__v2_printf+0x566>
1101d846:	3300      	movi      	r3, 0
1101d848:	3400      	movi      	r4, 0
1101d84a:	b862      	st.w      	r3, (r14, 0x8)
1101d84c:	b883      	st.w      	r4, (r14, 0xc)
1101d84e:	04bd      	br      	0x1101d9c8	// 1101d9c8 <__v2_printf+0x5d4>
1101d850:	e4472010 	andi      	r2, r7, 16
1101d854:	3a40      	cmpnei      	r2, 0
1101d856:	0c05      	bf      	0x1101d860	// 1101d860 <__v2_printf+0x46c>
1101d858:	5e8e      	addi      	r4, r6, 4
1101d85a:	b884      	st.w      	r4, (r14, 0x10)
1101d85c:	96c0      	ld.w      	r6, (r6, 0x0)
1101d85e:	0408      	br      	0x1101d86e	// 1101d86e <__v2_printf+0x47a>
1101d860:	e4072040 	andi      	r0, r7, 64
1101d864:	5e2e      	addi      	r1, r6, 4
1101d866:	3840      	cmpnei      	r0, 0
1101d868:	b824      	st.w      	r1, (r14, 0x10)
1101d86a:	0ff9      	bf      	0x1101d85c	// 1101d85c <__v2_printf+0x468>
1101d86c:	8ec0      	ld.h      	r6, (r6, 0x0)
1101d86e:	b8c2      	st.w      	r6, (r14, 0x8)
1101d870:	3600      	movi      	r6, 0
1101d872:	b8c3      	st.w      	r6, (r14, 0xc)
1101d874:	07d4      	br      	0x1101d81c	// 1101d81c <__v2_printf+0x428>
1101d876:	6cd3      	mov      	r3, r4
1101d878:	5c14      	addu      	r0, r4, r5
1101d87a:	640e      	cmpne      	r3, r0
1101d87c:	0f7d      	bf      	0x1101d776	// 1101d776 <__v2_printf+0x382>
1101d87e:	8320      	ld.b      	r1, (r3, 0x0)
1101d880:	3940      	cmpnei      	r1, 0
1101d882:	0efe      	bf      	0x1101d67e	// 1101d67e <__v2_printf+0x28a>
1101d884:	2300      	addi      	r3, 1
1101d886:	07fa      	br      	0x1101d87a	// 1101d87a <__v2_printf+0x486>
1101d888:	2300      	addi      	r3, 1
1101d88a:	06f7      	br      	0x1101d678	// 1101d678 <__v2_printf+0x284>
1101d88c:	e4872020 	andi      	r4, r7, 32
1101d890:	3c40      	cmpnei      	r4, 0
1101d892:	0c09      	bf      	0x1101d8a4	// 1101d8a4 <__v2_printf+0x4b0>
1101d894:	9660      	ld.w      	r3, (r6, 0x0)
1101d896:	9681      	ld.w      	r4, (r6, 0x4)
1101d898:	5e5e      	addi      	r2, r6, 8
1101d89a:	b862      	st.w      	r3, (r14, 0x8)
1101d89c:	b883      	st.w      	r4, (r14, 0xc)
1101d89e:	b844      	st.w      	r2, (r14, 0x10)
1101d8a0:	3601      	movi      	r6, 1
1101d8a2:	07bd      	br      	0x1101d81c	// 1101d81c <__v2_printf+0x428>
1101d8a4:	e4472010 	andi      	r2, r7, 16
1101d8a8:	3a40      	cmpnei      	r2, 0
1101d8aa:	0c05      	bf      	0x1101d8b4	// 1101d8b4 <__v2_printf+0x4c0>
1101d8ac:	5e2e      	addi      	r1, r6, 4
1101d8ae:	b824      	st.w      	r1, (r14, 0x10)
1101d8b0:	96c0      	ld.w      	r6, (r6, 0x0)
1101d8b2:	0408      	br      	0x1101d8c2	// 1101d8c2 <__v2_printf+0x4ce>
1101d8b4:	e4672040 	andi      	r3, r7, 64
1101d8b8:	5e0e      	addi      	r0, r6, 4
1101d8ba:	3b40      	cmpnei      	r3, 0
1101d8bc:	b804      	st.w      	r0, (r14, 0x10)
1101d8be:	0ff9      	bf      	0x1101d8b0	// 1101d8b0 <__v2_printf+0x4bc>
1101d8c0:	8ec0      	ld.h      	r6, (r6, 0x0)
1101d8c2:	3400      	movi      	r4, 0
1101d8c4:	b8c2      	st.w      	r6, (r14, 0x8)
1101d8c6:	b883      	st.w      	r4, (r14, 0xc)
1101d8c8:	07ec      	br      	0x1101d8a0	// 1101d8a0 <__v2_printf+0x4ac>
1101d8ca:	3a40      	cmpnei      	r2, 0
1101d8cc:	0c03      	bf      	0x1101d8d2	// 1101d8d2 <__v2_printf+0x4de>
1101d8ce:	dc6e0033 	st.b      	r3, (r14, 0x33)
1101d8d2:	1053      	lrw      	r2, 0x1101229f	// 1101d91c <__v2_printf+0x528>
1101d8d4:	06dc      	br      	0x1101d68c	// 1101d68c <__v2_printf+0x298>
1101d8d6:	e4072010 	andi      	r0, r7, 16
1101d8da:	3840      	cmpnei      	r0, 0
1101d8dc:	0c05      	bf      	0x1101d8e6	// 1101d8e6 <__v2_printf+0x4f2>
1101d8de:	5e6e      	addi      	r3, r6, 4
1101d8e0:	b864      	st.w      	r3, (r14, 0x10)
1101d8e2:	96c0      	ld.w      	r6, (r6, 0x0)
1101d8e4:	0408      	br      	0x1101d8f4	// 1101d8f4 <__v2_printf+0x500>
1101d8e6:	e4272040 	andi      	r1, r7, 64
1101d8ea:	5e4e      	addi      	r2, r6, 4
1101d8ec:	3940      	cmpnei      	r1, 0
1101d8ee:	b844      	st.w      	r2, (r14, 0x10)
1101d8f0:	0ff9      	bf      	0x1101d8e2	// 1101d8e2 <__v2_printf+0x4ee>
1101d8f2:	8ec0      	ld.h      	r6, (r6, 0x0)
1101d8f4:	3000      	movi      	r0, 0
1101d8f6:	b8c2      	st.w      	r6, (r14, 0x8)
1101d8f8:	b803      	st.w      	r0, (r14, 0xc)
1101d8fa:	06d4      	br      	0x1101d6a2	// 1101d6a2 <__v2_printf+0x2ae>
1101d8fc:	6cd3      	mov      	r3, r4
1101d8fe:	0467      	br      	0x1101d9cc	// 1101d9cc <__v2_printf+0x5d8>
1101d900:	9883      	ld.w      	r4, (r14, 0xc)
1101d902:	3c40      	cmpnei      	r4, 0
1101d904:	0812      	bt      	0x1101d928	// 1101d928 <__v2_printf+0x534>
1101d906:	9842      	ld.w      	r2, (r14, 0x8)
1101d908:	3a09      	cmphsi      	r2, 10
1101d90a:	080f      	bt      	0x1101d928	// 1101d928 <__v2_printf+0x534>
1101d90c:	9882      	ld.w      	r4, (r14, 0x8)
1101d90e:	242f      	addi      	r4, 48
1101d910:	dc8e0067 	st.b      	r4, (r14, 0x67)
1101d914:	e48e0066 	addi      	r4, r14, 103
1101d918:	047a      	br      	0x1101da0c	// 1101da0c <__v2_printf+0x618>
1101d91a:	0000      	bkpt
1101d91c:	1101229f 	.long	0x1101229f
1101d920:	1101228e 	.long	0x1101228e
1101d924:	1fffdad8 	.long	0x1fffdad8
1101d928:	3630      	movi      	r6, 48
1101d92a:	1c1a      	addi      	r4, r14, 104
1101d92c:	320a      	movi      	r2, 10
1101d92e:	3300      	movi      	r3, 0
1101d930:	9802      	ld.w      	r0, (r14, 0x8)
1101d932:	9823      	ld.w      	r1, (r14, 0xc)
1101d934:	2c00      	subi      	r4, 1
1101d936:	e00004e3 	bsr      	0x1101e2fc	// 1101e2fc <__umoddi3>
1101d93a:	3300      	movi      	r3, 0
1101d93c:	58f8      	addu      	r7, r0, r6
1101d93e:	320a      	movi      	r2, 10
1101d940:	9802      	ld.w      	r0, (r14, 0x8)
1101d942:	9823      	ld.w      	r1, (r14, 0xc)
1101d944:	a4e0      	st.b      	r7, (r4, 0x0)
1101d946:	e3fff4d5 	bsr      	0x1101c2f0	// 1101c2f0 <__udivdi3>
1101d94a:	b802      	st.w      	r0, (r14, 0x8)
1101d94c:	b823      	st.w      	r1, (r14, 0xc)
1101d94e:	9862      	ld.w      	r3, (r14, 0x8)
1101d950:	9803      	ld.w      	r0, (r14, 0xc)
1101d952:	6cc0      	or      	r3, r0
1101d954:	3b40      	cmpnei      	r3, 0
1101d956:	0beb      	bt      	0x1101d92c	// 1101d92c <__v2_printf+0x538>
1101d958:	045a      	br      	0x1101da0c	// 1101da0c <__v2_printf+0x618>
1101d95a:	3300      	movi      	r3, 0
1101d95c:	3400      	movi      	r4, 0
1101d95e:	b862      	st.w      	r3, (r14, 0x8)
1101d960:	b883      	st.w      	r4, (r14, 0xc)
1101d962:	320f      	movi      	r2, 15
1101d964:	1c1a      	addi      	r4, r14, 104
1101d966:	9822      	ld.w      	r1, (r14, 0x8)
1101d968:	c4222020 	and      	r0, r2, r1
1101d96c:	98e9      	ld.w      	r7, (r14, 0x24)
1101d96e:	58dc      	addu      	r6, r0, r7
1101d970:	8660      	ld.b      	r3, (r6, 0x0)
1101d972:	2c00      	subi      	r4, 1
1101d974:	98e2      	ld.w      	r7, (r14, 0x8)
1101d976:	a460      	st.b      	r3, (r4, 0x0)
1101d978:	9863      	ld.w      	r3, (r14, 0xc)
1101d97a:	4fc4      	lsri      	r6, r7, 4
1101d97c:	4be4      	lsri      	r7, r3, 4
1101d97e:	9823      	ld.w      	r1, (r14, 0xc)
1101d980:	411c      	lsli      	r0, r1, 28
1101d982:	b8e3      	st.w      	r7, (r14, 0xc)
1101d984:	c4c02423 	or      	r3, r0, r6
1101d988:	6c0f      	mov      	r0, r3
1101d98a:	9823      	ld.w      	r1, (r14, 0xc)
1101d98c:	6c04      	or      	r0, r1
1101d98e:	b862      	st.w      	r3, (r14, 0x8)
1101d990:	3840      	cmpnei      	r0, 0
1101d992:	0bea      	bt      	0x1101d966	// 1101d966 <__v2_printf+0x572>
1101d994:	043c      	br      	0x1101da0c	// 1101da0c <__v2_printf+0x618>
1101d996:	3e40      	cmpnei      	r6, 0
1101d998:	0807      	bt      	0x1101d9a6	// 1101d9a6 <__v2_printf+0x5b2>
1101d99a:	e4e72001 	andi      	r7, r7, 1
1101d99e:	3f40      	cmpnei      	r7, 0
1101d9a0:	0c03      	bf      	0x1101d9a6	// 1101d9a6 <__v2_printf+0x5b2>
1101d9a2:	3430      	movi      	r4, 48
1101d9a4:	07b6      	br      	0x1101d910	// 1101d910 <__v2_printf+0x51c>
1101d9a6:	1c1a      	addi      	r4, r14, 104
1101d9a8:	0432      	br      	0x1101da0c	// 1101da0c <__v2_printf+0x618>
1101d9aa:	eb44002b 	cmpnei      	r4, 43
1101d9ae:	1910      	addi      	r1, r14, 64
1101d9b0:	c4810c40 	inct      	r4, r1, 0
1101d9b4:	c4810c21 	incf      	r4, r1, 1
1101d9b8:	0618      	br      	0x1101d5e8	// 1101d5e8 <__v2_printf+0x1f4>
1101d9ba:	3a40      	cmpnei      	r2, 0
1101d9bc:	b8e7      	st.w      	r7, (r14, 0x1c)
1101d9be:	0f40      	bf      	0x1101d83e	// 1101d83e <__v2_printf+0x44a>
1101d9c0:	3e41      	cmpnei      	r6, 1
1101d9c2:	0f9f      	bf      	0x1101d900	// 1101d900 <__v2_printf+0x50c>
1101d9c4:	3e42      	cmpnei      	r6, 2
1101d9c6:	0fce      	bf      	0x1101d962	// 1101d962 <__v2_printf+0x56e>
1101d9c8:	3630      	movi      	r6, 48
1101d9ca:	1b1a      	addi      	r3, r14, 104
1101d9cc:	9822      	ld.w      	r1, (r14, 0x8)
1101d9ce:	e4412007 	andi      	r2, r1, 7
1101d9d2:	9822      	ld.w      	r1, (r14, 0x8)
1101d9d4:	5a18      	addu      	r0, r2, r6
1101d9d6:	7480      	zextb      	r2, r0
1101d9d8:	4903      	lsri      	r0, r1, 3
1101d9da:	9823      	ld.w      	r1, (r14, 0xc)
1101d9dc:	98e3      	ld.w      	r7, (r14, 0xc)
1101d9de:	4923      	lsri      	r1, r1, 3
1101d9e0:	b823      	st.w      	r1, (r14, 0xc)
1101d9e2:	47fd      	lsli      	r7, r7, 29
1101d9e4:	6dc0      	or      	r7, r0
1101d9e6:	6c5f      	mov      	r1, r7
1101d9e8:	9803      	ld.w      	r0, (r14, 0xc)
1101d9ea:	6c40      	or      	r1, r0
1101d9ec:	5b83      	subi      	r4, r3, 1
1101d9ee:	3940      	cmpnei      	r1, 0
1101d9f0:	a440      	st.b      	r2, (r4, 0x0)
1101d9f2:	b8e2      	st.w      	r7, (r14, 0x8)
1101d9f4:	0b84      	bt      	0x1101d8fc	// 1101d8fc <__v2_printf+0x508>
1101d9f6:	98c7      	ld.w      	r6, (r14, 0x1c)
1101d9f8:	e4e62001 	andi      	r7, r6, 1
1101d9fc:	3f40      	cmpnei      	r7, 0
1101d9fe:	0c07      	bf      	0x1101da0c	// 1101da0c <__v2_printf+0x618>
1101da00:	eb420030 	cmpnei      	r2, 48
1101da04:	0c04      	bf      	0x1101da0c	// 1101da0c <__v2_printf+0x618>
1101da06:	5b87      	subi      	r4, r3, 2
1101da08:	3330      	movi      	r3, 48
1101da0a:	a460      	st.b      	r3, (r4, 0x0)
1101da0c:	98e7      	ld.w      	r7, (r14, 0x1c)
1101da0e:	6d97      	mov      	r6, r5
1101da10:	1d1a      	addi      	r5, r14, 104
1101da12:	6152      	subu      	r5, r4
1101da14:	6559      	cmplt      	r6, r5
1101da16:	6c57      	mov      	r1, r5
1101da18:	c4260c20 	incf      	r1, r6, 0
1101da1c:	b827      	st.w      	r1, (r14, 0x1c)
1101da1e:	d84e0033 	ld.b      	r2, (r14, 0x33)
1101da22:	9867      	ld.w      	r3, (r14, 0x1c)
1101da24:	3a40      	cmpnei      	r2, 0
1101da26:	e4272002 	andi      	r1, r7, 2
1101da2a:	c4030c20 	incf      	r0, r3, 0
1101da2e:	c4030c41 	inct      	r0, r3, 1
1101da32:	b807      	st.w      	r0, (r14, 0x1c)
1101da34:	e4072084 	andi      	r0, r7, 132
1101da38:	3940      	cmpnei      	r1, 0
1101da3a:	9847      	ld.w      	r2, (r14, 0x1c)
1101da3c:	c4620c20 	incf      	r3, r2, 0
1101da40:	c4620c42 	inct      	r3, r2, 2
1101da44:	3840      	cmpnei      	r0, 0
1101da46:	b867      	st.w      	r3, (r14, 0x1c)
1101da48:	0809      	bt      	0x1101da5a	// 1101da5a <__v2_printf+0x666>
1101da4a:	9825      	ld.w      	r1, (r14, 0x14)
1101da4c:	9847      	ld.w      	r2, (r14, 0x1c)
1101da4e:	5909      	subu      	r0, r1, r2
1101da50:	1127      	lrw      	r1, 0x110111e4	// 1101daec <__v2_printf+0x6f8>
1101da52:	e58e0037 	addi      	r12, r14, 56
1101da56:	e3fffcb3 	bsr      	0x1101d3bc	// 1101d3bc <PAD.1851>
1101da5a:	d86e0033 	ld.b      	r3, (r14, 0x33)
1101da5e:	3b40      	cmpnei      	r3, 0
1101da60:	0c08      	bf      	0x1101da70	// 1101da70 <__v2_printf+0x67c>
1101da62:	980e      	ld.w      	r0, (r14, 0x38)
1101da64:	3101      	movi      	r1, 1
1101da66:	9040      	ld.w      	r2, (r0, 0x0)
1101da68:	9061      	ld.w      	r3, (r0, 0x4)
1101da6a:	e40e0032 	addi      	r0, r14, 51
1101da6e:	7bcd      	jsr      	r3
1101da70:	e4272002 	andi      	r1, r7, 2
1101da74:	3940      	cmpnei      	r1, 0
1101da76:	0c07      	bf      	0x1101da84	// 1101da84 <__v2_printf+0x690>
1101da78:	980e      	ld.w      	r0, (r14, 0x38)
1101da7a:	3102      	movi      	r1, 2
1101da7c:	9040      	ld.w      	r2, (r0, 0x0)
1101da7e:	9061      	ld.w      	r3, (r0, 0x4)
1101da80:	180d      	addi      	r0, r14, 52
1101da82:	7bcd      	jsr      	r3
1101da84:	e4472084 	andi      	r2, r7, 132
1101da88:	eb420080 	cmpnei      	r2, 128
1101da8c:	0809      	bt      	0x1101da9e	// 1101da9e <__v2_printf+0x6aa>
1101da8e:	9825      	ld.w      	r1, (r14, 0x14)
1101da90:	9807      	ld.w      	r0, (r14, 0x1c)
1101da92:	5901      	subu      	r0, r1, r0
1101da94:	1037      	lrw      	r1, 0x110111f4	// 1101daf0 <__v2_printf+0x6fc>
1101da96:	e58e0037 	addi      	r12, r14, 56
1101da9a:	e3fffc91 	bsr      	0x1101d3bc	// 1101d3bc <PAD.1851>
1101da9e:	1035      	lrw      	r1, 0x110111f4	// 1101daf0 <__v2_printf+0x6fc>
1101daa0:	5e15      	subu      	r0, r6, r5
1101daa2:	e58e0037 	addi      	r12, r14, 56
1101daa6:	6db3      	mov      	r6, r12
1101daa8:	e3fffc8a 	bsr      	0x1101d3bc	// 1101d3bc <PAD.1851>
1101daac:	9660      	ld.w      	r3, (r6, 0x0)
1101daae:	6c13      	mov      	r0, r4
1101dab0:	9340      	ld.w      	r2, (r3, 0x0)
1101dab2:	e4872004 	andi      	r4, r7, 4
1101dab6:	9361      	ld.w      	r3, (r3, 0x4)
1101dab8:	6c57      	mov      	r1, r5
1101daba:	7bcd      	jsr      	r3
1101dabc:	3c40      	cmpnei      	r4, 0
1101dabe:	0c08      	bf      	0x1101dace	// 1101dace <__v2_printf+0x6da>
1101dac0:	6f1b      	mov      	r12, r6
1101dac2:	102b      	lrw      	r1, 0x110111e4	// 1101daec <__v2_printf+0x6f8>
1101dac4:	98a5      	ld.w      	r5, (r14, 0x14)
1101dac6:	9847      	ld.w      	r2, (r14, 0x1c)
1101dac8:	5d09      	subu      	r0, r5, r2
1101daca:	e3fffc79 	bsr      	0x1101d3bc	// 1101d3bc <PAD.1851>
1101dace:	98a5      	ld.w      	r5, (r14, 0x14)
1101dad0:	9867      	ld.w      	r3, (r14, 0x1c)
1101dad2:	6c57      	mov      	r1, r5
1101dad4:	64d5      	cmplt      	r5, r3
1101dad6:	98c8      	ld.w      	r6, (r14, 0x20)
1101dad8:	c4230c40 	inct      	r1, r3, 0
1101dadc:	5e84      	addu      	r4, r6, r1
1101dade:	98c4      	ld.w      	r6, (r14, 0x10)
1101dae0:	b888      	st.w      	r4, (r14, 0x20)
1101dae2:	e800fc96 	br      	0x1101d40e	// 1101d40e <__v2_printf+0x1a>
1101dae6:	9808      	ld.w      	r0, (r14, 0x20)
1101dae8:	141a      	addi      	r14, r14, 104
1101daea:	1494      	pop      	r4-r7, r15
1101daec:	110111e4 	.long	0x110111e4
1101daf0:	110111f4 	.long	0x110111f4

1101daf4 <__v2_scanf>:
1101daf4:	14d4      	push      	r4-r7, r15
1101daf6:	1632      	subi      	r14, r14, 328
1101daf8:	6d43      	mov      	r5, r0
1101dafa:	9061      	ld.w      	r3, (r0, 0x4)
1101dafc:	9000      	ld.w      	r0, (r0, 0x0)
1101dafe:	b825      	st.w      	r1, (r14, 0x14)
1101db00:	b841      	st.w      	r2, (r14, 0x4)
1101db02:	7bcd      	jsr      	r3
1101db04:	6d03      	mov      	r4, r0
1101db06:	3001      	movi      	r0, 1
1101db08:	3100      	movi      	r1, 0
1101db0a:	b800      	st.w      	r0, (r14, 0x0)
1101db0c:	b824      	st.w      	r1, (r14, 0x10)
1101db0e:	041d      	br      	0x1101db48	// 1101db48 <__v2_scanf+0x54>
1101db10:	eb430020 	cmpnei      	r3, 32
1101db14:	9845      	ld.w      	r2, (r14, 0x14)
1101db16:	2200      	addi      	r2, 1
1101db18:	b845      	st.w      	r2, (r14, 0x14)
1101db1a:	0c0a      	bf      	0x1101db2e	// 1101db2e <__v2_scanf+0x3a>
1101db1c:	eb030020 	cmphsi      	r3, 33
1101db20:	0819      	bt      	0x1101db52	// 1101db52 <__v2_scanf+0x5e>
1101db22:	3104      	movi      	r1, 4
1101db24:	e4031008 	subi      	r0, r3, 9
1101db28:	6404      	cmphs      	r1, r0
1101db2a:	e84003da 	bf      	0x1101e2de	// 1101e2de <__v2_scanf+0x7ea>
1101db2e:	9865      	ld.w      	r3, (r14, 0x14)
1101db30:	8300      	ld.b      	r0, (r3, 0x0)
1101db32:	3840      	cmpnei      	r0, 0
1101db34:	0c05      	bf      	0x1101db3e	// 1101db3e <__v2_scanf+0x4a>
1101db36:	e0000807 	bsr      	0x1101eb44	// 1101eb44 <__GI_isspace>
1101db3a:	3840      	cmpnei      	r0, 0
1101db3c:	0846      	bt      	0x1101dbc8	// 1101dbc8 <__v2_scanf+0xd4>
1101db3e:	7410      	zextb      	r0, r4
1101db40:	e0000802 	bsr      	0x1101eb44	// 1101eb44 <__GI_isspace>
1101db44:	3840      	cmpnei      	r0, 0
1101db46:	0845      	bt      	0x1101dbd0	// 1101dbd0 <__v2_scanf+0xdc>
1101db48:	9825      	ld.w      	r1, (r14, 0x14)
1101db4a:	8160      	ld.b      	r3, (r1, 0x0)
1101db4c:	3b40      	cmpnei      	r3, 0
1101db4e:	0be1      	bt      	0x1101db10	// 1101db10 <__v2_scanf+0x1c>
1101db50:	0431      	br      	0x1101dbb2	// 1101dbb2 <__v2_scanf+0xbe>
1101db52:	eb430025 	cmpnei      	r3, 37
1101db56:	e86003c4 	bt      	0x1101e2de	// 1101e2de <__v2_scanf+0x7ea>
1101db5a:	3600      	movi      	r6, 0
1101db5c:	3700      	movi      	r7, 0
1101db5e:	b8cb      	st.w      	r6, (r14, 0x2c)
1101db60:	2f00      	subi      	r7, 1
1101db62:	b8ca      	st.w      	r6, (r14, 0x28)
1101db64:	b8cd      	st.w      	r6, (r14, 0x34)
1101db66:	b8c8      	st.w      	r6, (r14, 0x20)
1101db68:	b8c6      	st.w      	r6, (r14, 0x18)
1101db6a:	9825      	ld.w      	r1, (r14, 0x14)
1101db6c:	6cdf      	mov      	r3, r7
1101db6e:	3209      	movi      	r2, 9
1101db70:	81c0      	ld.b      	r6, (r1, 0x0)
1101db72:	9805      	ld.w      	r0, (r14, 0x14)
1101db74:	eb46006e 	cmpnei      	r6, 110
1101db78:	2000      	addi      	r0, 1
1101db7a:	b805      	st.w      	r0, (r14, 0x14)
1101db7c:	0ca2      	bf      	0x1101dcc0	// 1101dcc0 <__v2_scanf+0x1cc>
1101db7e:	64d2      	cmpne      	r4, r3
1101db80:	0c1b      	bf      	0x1101dbb6	// 1101dbb6 <__v2_scanf+0xc2>
1101db82:	eb060067 	cmphsi      	r6, 104
1101db86:	088b      	bt      	0x1101dc9c	// 1101dc9c <__v2_scanf+0x1a8>
1101db88:	eb060064 	cmphsi      	r6, 101
1101db8c:	08e9      	bt      	0x1101dd5e	// 1101dd5e <__v2_scanf+0x26a>
1101db8e:	eb460045 	cmpnei      	r6, 69
1101db92:	0ce6      	bf      	0x1101dd5e	// 1101dd5e <__v2_scanf+0x26a>
1101db94:	eb060045 	cmphsi      	r6, 70
1101db98:	083a      	bt      	0x1101dc0c	// 1101dc0c <__v2_scanf+0x118>
1101db9a:	eb46002a 	cmpnei      	r6, 42
1101db9e:	0c21      	bf      	0x1101dbe0	// 1101dbe0 <__v2_scanf+0xec>
1101dba0:	eb06002a 	cmphsi      	r6, 43
1101dba4:	0825      	bt      	0x1101dbee	// 1101dbee <__v2_scanf+0xfa>
1101dba6:	3e40      	cmpnei      	r6, 0
1101dba8:	e84003a3 	bf      	0x1101e2ee	// 1101e2ee <__v2_scanf+0x7fa>
1101dbac:	eb460025 	cmpnei      	r6, 37
1101dbb0:	0d32      	bf      	0x1101de14	// 1101de14 <__v2_scanf+0x320>
1101dbb2:	3cdf      	btsti      	r4, 31
1101dbb4:	0c05      	bf      	0x1101dbbe	// 1101dbbe <__v2_scanf+0xca>
1101dbb6:	9804      	ld.w      	r0, (r14, 0x10)
1101dbb8:	3840      	cmpnei      	r0, 0
1101dbba:	e840039e 	bf      	0x1101e2f6	// 1101e2f6 <__v2_scanf+0x802>
1101dbbe:	9520      	ld.w      	r1, (r5, 0x0)
1101dbc0:	9542      	ld.w      	r2, (r5, 0x8)
1101dbc2:	6c13      	mov      	r0, r4
1101dbc4:	7bc9      	jsr      	r2
1101dbc6:	0524      	br      	0x1101de0e	// 1101de0e <__v2_scanf+0x31a>
1101dbc8:	9805      	ld.w      	r0, (r14, 0x14)
1101dbca:	2000      	addi      	r0, 1
1101dbcc:	b805      	st.w      	r0, (r14, 0x14)
1101dbce:	07b0      	br      	0x1101db2e	// 1101db2e <__v2_scanf+0x3a>
1101dbd0:	9541      	ld.w      	r2, (r5, 0x4)
1101dbd2:	9500      	ld.w      	r0, (r5, 0x0)
1101dbd4:	9880      	ld.w      	r4, (r14, 0x0)
1101dbd6:	2400      	addi      	r4, 1
1101dbd8:	b880      	st.w      	r4, (r14, 0x0)
1101dbda:	7bc9      	jsr      	r2
1101dbdc:	6d03      	mov      	r4, r0
1101dbde:	07b0      	br      	0x1101db3e	// 1101db3e <__v2_scanf+0x4a>
1101dbe0:	3101      	movi      	r1, 1
1101dbe2:	b828      	st.w      	r1, (r14, 0x20)
1101dbe4:	9825      	ld.w      	r1, (r14, 0x14)
1101dbe6:	07c5      	br      	0x1101db70	// 1101db70 <__v2_scanf+0x7c>
1101dbe8:	3601      	movi      	r6, 1
1101dbea:	b8ca      	st.w      	r6, (r14, 0x28)
1101dbec:	07fc      	br      	0x1101dbe4	// 1101dbe4 <__v2_scanf+0xf0>
1101dbee:	e406102f 	subi      	r0, r6, 48
1101dbf2:	6408      	cmphs      	r2, r0
1101dbf4:	0fdf      	bf      	0x1101dbb2	// 1101dbb2 <__v2_scanf+0xbe>
1101dbf6:	3fdf      	btsti      	r7, 31
1101dbf8:	3100      	movi      	r1, 0
1101dbfa:	c4e10c40 	inct      	r7, r1, 0
1101dbfe:	300a      	movi      	r0, 10
1101dc00:	7dc0      	mult      	r7, r0
1101dc02:	2f2f      	subi      	r7, 48
1101dc04:	61d8      	addu      	r7, r6
1101dc06:	3601      	movi      	r6, 1
1101dc08:	b8c6      	st.w      	r6, (r14, 0x18)
1101dc0a:	07ed      	br      	0x1101dbe4	// 1101dbe4 <__v2_scanf+0xf0>
1101dc0c:	eb46005b 	cmpnei      	r6, 91
1101dc10:	0c7c      	bf      	0x1101dd08	// 1101dd08 <__v2_scanf+0x214>
1101dc12:	eb06005b 	cmphsi      	r6, 92
1101dc16:	0809      	bt      	0x1101dc28	// 1101dc28 <__v2_scanf+0x134>
1101dc18:	eb46004c 	cmpnei      	r6, 76
1101dc1c:	0c6b      	bf      	0x1101dcf2	// 1101dcf2 <__v2_scanf+0x1fe>
1101dc1e:	eb460058 	cmpnei      	r6, 88
1101dc22:	0bc8      	bt      	0x1101dbb2	// 1101dbb2 <__v2_scanf+0xbe>
1101dc24:	3006      	movi      	r0, 6
1101dc26:	0409      	br      	0x1101dc38	// 1101dc38 <__v2_scanf+0x144>
1101dc28:	eb460063 	cmpnei      	r6, 99
1101dc2c:	e8400285 	bf      	0x1101e136	// 1101e136 <__v2_scanf+0x642>
1101dc30:	eb460064 	cmpnei      	r6, 100
1101dc34:	0bbf      	bt      	0x1101dbb2	// 1101dbb2 <__v2_scanf+0xbe>
1101dc36:	3000      	movi      	r0, 0
1101dc38:	2001      	addi      	r0, 2
1101dc3a:	2007      	addi      	r0, 8
1101dc3c:	b809      	st.w      	r0, (r14, 0x24)
1101dc3e:	9800      	ld.w      	r0, (r14, 0x0)
1101dc40:	b803      	st.w      	r0, (r14, 0xc)
1101dc42:	7410      	zextb      	r0, r4
1101dc44:	e0000780 	bsr      	0x1101eb44	// 1101eb44 <__GI_isspace>
1101dc48:	3840      	cmpnei      	r0, 0
1101dc4a:	b80c      	st.w      	r0, (r14, 0x30)
1101dc4c:	08f9      	bt      	0x1101de3e	// 1101de3e <__v2_scanf+0x34a>
1101dc4e:	7450      	zextb      	r1, r4
1101dc50:	eb41002d 	cmpnei      	r1, 45
1101dc54:	080a      	bt      	0x1101dc68	// 1101dc68 <__v2_scanf+0x174>
1101dc56:	9561      	ld.w      	r3, (r5, 0x4)
1101dc58:	9500      	ld.w      	r0, (r5, 0x0)
1101dc5a:	9883      	ld.w      	r4, (r14, 0xc)
1101dc5c:	2400      	addi      	r4, 1
1101dc5e:	b883      	st.w      	r4, (r14, 0xc)
1101dc60:	7bcd      	jsr      	r3
1101dc62:	3201      	movi      	r2, 1
1101dc64:	6d03      	mov      	r4, r0
1101dc66:	b84c      	st.w      	r2, (r14, 0x30)
1101dc68:	eb44002b 	cmpnei      	r4, 43
1101dc6c:	0808      	bt      	0x1101dc7c	// 1101dc7c <__v2_scanf+0x188>
1101dc6e:	9803      	ld.w      	r0, (r14, 0xc)
1101dc70:	2000      	addi      	r0, 1
1101dc72:	b803      	st.w      	r0, (r14, 0xc)
1101dc74:	9521      	ld.w      	r1, (r5, 0x4)
1101dc76:	9500      	ld.w      	r0, (r5, 0x0)
1101dc78:	7bc5      	jsr      	r1
1101dc7a:	6d03      	mov      	r4, r0
1101dc7c:	3300      	movi      	r3, 0
1101dc7e:	2b00      	subi      	r3, 1
1101dc80:	64d2      	cmpne      	r4, r3
1101dc82:	0cc6      	bf      	0x1101de0e	// 1101de0e <__v2_scanf+0x31a>
1101dc84:	9846      	ld.w      	r2, (r14, 0x18)
1101dc86:	9809      	ld.w      	r0, (r14, 0x24)
1101dc88:	3a40      	cmpnei      	r2, 0
1101dc8a:	0900      	bt      	0x1101de8a	// 1101de8a <__v2_scanf+0x396>
1101dc8c:	3850      	cmpnei      	r0, 16
1101dc8e:	08e0      	bt      	0x1101de4e	// 1101de4e <__v2_scanf+0x35a>
1101dc90:	eb440030 	cmpnei      	r4, 48
1101dc94:	0ce5      	bf      	0x1101de5e	// 1101de5e <__v2_scanf+0x36a>
1101dc96:	9823      	ld.w      	r1, (r14, 0xc)
1101dc98:	b820      	st.w      	r1, (r14, 0x0)
1101dc9a:	0516      	br      	0x1101dec6	// 1101dec6 <__v2_scanf+0x3d2>
1101dc9c:	eb46006f 	cmpnei      	r6, 111
1101dca0:	0ccb      	bf      	0x1101de36	// 1101de36 <__v2_scanf+0x342>
1101dca2:	eb06006f 	cmphsi      	r6, 112
1101dca6:	0819      	bt      	0x1101dcd8	// 1101dcd8 <__v2_scanf+0x1e4>
1101dca8:	eb460069 	cmpnei      	r6, 105
1101dcac:	0cc7      	bf      	0x1101de3a	// 1101de3a <__v2_scanf+0x346>
1101dcae:	eb060068 	cmphsi      	r6, 105
1101dcb2:	0c28      	bf      	0x1101dd02	// 1101dd02 <__v2_scanf+0x20e>
1101dcb4:	eb46006c 	cmpnei      	r6, 108
1101dcb8:	0cba      	bf      	0x1101de2c	// 1101de2c <__v2_scanf+0x338>
1101dcba:	eb46006e 	cmpnei      	r6, 110
1101dcbe:	0b7a      	bt      	0x1101dbb2	// 1101dbb2 <__v2_scanf+0xbe>
1101dcc0:	9808      	ld.w      	r0, (r14, 0x20)
1101dcc2:	3840      	cmpnei      	r0, 0
1101dcc4:	0b42      	bt      	0x1101db48	// 1101db48 <__v2_scanf+0x54>
1101dcc6:	9821      	ld.w      	r1, (r14, 0x4)
1101dcc8:	9801      	ld.w      	r0, (r14, 0x4)
1101dcca:	9160      	ld.w      	r3, (r1, 0x0)
1101dccc:	9840      	ld.w      	r2, (r14, 0x0)
1101dcce:	2003      	addi      	r0, 4
1101dcd0:	2a00      	subi      	r2, 1
1101dcd2:	b340      	st.w      	r2, (r3, 0x0)
1101dcd4:	b801      	st.w      	r0, (r14, 0x4)
1101dcd6:	0739      	br      	0x1101db48	// 1101db48 <__v2_scanf+0x54>
1101dcd8:	eb460073 	cmpnei      	r6, 115
1101dcdc:	e8400258 	bf      	0x1101e18c	// 1101e18c <__v2_scanf+0x698>
1101dce0:	eb060073 	cmphsi      	r6, 116
1101dce4:	0809      	bt      	0x1101dcf6	// 1101dcf6 <__v2_scanf+0x202>
1101dce6:	eb460070 	cmpnei      	r6, 112
1101dcea:	0f9d      	bf      	0x1101dc24	// 1101dc24 <__v2_scanf+0x130>
1101dcec:	eb460071 	cmpnei      	r6, 113
1101dcf0:	0b61      	bt      	0x1101dbb2	// 1101dbb2 <__v2_scanf+0xbe>
1101dcf2:	3601      	movi      	r6, 1
1101dcf4:	049f      	br      	0x1101de32	// 1101de32 <__v2_scanf+0x33e>
1101dcf6:	eb460075 	cmpnei      	r6, 117
1101dcfa:	0f9e      	bf      	0x1101dc36	// 1101dc36 <__v2_scanf+0x142>
1101dcfc:	eb460078 	cmpnei      	r6, 120
1101dd00:	0791      	br      	0x1101dc22	// 1101dc22 <__v2_scanf+0x12e>
1101dd02:	3101      	movi      	r1, 1
1101dd04:	b82d      	st.w      	r1, (r14, 0x34)
1101dd06:	076f      	br      	0x1101dbe4	// 1101dbe4 <__v2_scanf+0xf0>
1101dd08:	3680      	movi      	r6, 128
1101dd0a:	4661      	lsli      	r3, r6, 1
1101dd0c:	3200      	movi      	r2, 0
1101dd0e:	2a00      	subi      	r2, 1
1101dd10:	2b00      	subi      	r3, 1
1101dd12:	648e      	cmpne      	r3, r2
1101dd14:	e8600281 	bt      	0x1101e216	// 1101e216 <__v2_scanf+0x722>
1101dd18:	9805      	ld.w      	r0, (r14, 0x14)
1101dd1a:	8060      	ld.b      	r3, (r0, 0x0)
1101dd1c:	eb43005e 	cmpnei      	r3, 94
1101dd20:	e8400281 	bf      	0x1101e222	// 1101e222 <__v2_scanf+0x72e>
1101dd24:	59c6      	addi      	r6, r1, 2
1101dd26:	3100      	movi      	r1, 0
1101dd28:	eb43002d 	cmpnei      	r3, 45
1101dd2c:	b823      	st.w      	r1, (r14, 0xc)
1101dd2e:	0c04      	bf      	0x1101dd36	// 1101dd36 <__v2_scanf+0x242>
1101dd30:	eb43005d 	cmpnei      	r3, 93
1101dd34:	0807      	bt      	0x1101dd42	// 1101dd42 <__v2_scanf+0x24e>
1101dd36:	3201      	movi      	r2, 1
1101dd38:	1812      	addi      	r0, r14, 72
1101dd3a:	60c0      	addu      	r3, r0
1101dd3c:	a340      	st.b      	r2, (r3, 0x0)
1101dd3e:	8660      	ld.b      	r3, (r6, 0x0)
1101dd40:	2600      	addi      	r6, 1
1101dd42:	3100      	movi      	r1, 0
1101dd44:	8640      	ld.b      	r2, (r6, 0x0)
1101dd46:	3a40      	cmpnei      	r2, 0
1101dd48:	e8600284 	bt      	0x1101e250	// 1101e250 <__v2_scanf+0x75c>
1101dd4c:	3940      	cmpnei      	r1, 0
1101dd4e:	e860028f 	bt      	0x1101e26c	// 1101e26c <__v2_scanf+0x778>
1101dd52:	1912      	addi      	r1, r14, 72
1101dd54:	5b04      	addu      	r0, r3, r1
1101dd56:	3301      	movi      	r3, 1
1101dd58:	a060      	st.b      	r3, (r0, 0x0)
1101dd5a:	e800028c 	br      	0x1101e272	// 1101e272 <__v2_scanf+0x77e>
1101dd5e:	98c0      	ld.w      	r6, (r14, 0x0)
1101dd60:	7410      	zextb      	r0, r4
1101dd62:	e00006f1 	bsr      	0x1101eb44	// 1101eb44 <__GI_isspace>
1101dd66:	3840      	cmpnei      	r0, 0
1101dd68:	b809      	st.w      	r0, (r14, 0x24)
1101dd6a:	093e      	bt      	0x1101dfe6	// 1101dfe6 <__v2_scanf+0x4f2>
1101dd6c:	eb44002d 	cmpnei      	r4, 45
1101dd70:	0808      	bt      	0x1101dd80	// 1101dd80 <__v2_scanf+0x28c>
1101dd72:	95e1      	ld.w      	r7, (r5, 0x4)
1101dd74:	9500      	ld.w      	r0, (r5, 0x0)
1101dd76:	2600      	addi      	r6, 1
1101dd78:	7bdd      	jsr      	r7
1101dd7a:	3101      	movi      	r1, 1
1101dd7c:	6d03      	mov      	r4, r0
1101dd7e:	b829      	st.w      	r1, (r14, 0x24)
1101dd80:	eb44002b 	cmpnei      	r4, 43
1101dd84:	0806      	bt      	0x1101dd90	// 1101dd90 <__v2_scanf+0x29c>
1101dd86:	9581      	ld.w      	r4, (r5, 0x4)
1101dd88:	9500      	ld.w      	r0, (r5, 0x0)
1101dd8a:	2600      	addi      	r6, 1
1101dd8c:	7bd1      	jsr      	r4
1101dd8e:	6d03      	mov      	r4, r0
1101dd90:	3200      	movi      	r2, 0
1101dd92:	b8c0      	st.w      	r6, (r14, 0x0)
1101dd94:	b843      	st.w      	r2, (r14, 0xc)
1101dd96:	3700      	movi      	r7, 0
1101dd98:	6c13      	mov      	r0, r4
1101dd9a:	e00006d1 	bsr      	0x1101eb3c	// 1101eb3c <__GI_isdigit>
1101dd9e:	3840      	cmpnei      	r0, 0
1101dda0:	b806      	st.w      	r0, (r14, 0x18)
1101dda2:	0928      	bt      	0x1101dff2	// 1101dff2 <__v2_scanf+0x4fe>
1101dda4:	eb44002e 	cmpnei      	r4, 46
1101dda8:	0812      	bt      	0x1101ddcc	// 1101ddcc <__v2_scanf+0x2d8>
1101ddaa:	9521      	ld.w      	r1, (r5, 0x4)
1101ddac:	9500      	ld.w      	r0, (r5, 0x0)
1101ddae:	9860      	ld.w      	r3, (r14, 0x0)
1101ddb0:	2300      	addi      	r3, 1
1101ddb2:	b860      	st.w      	r3, (r14, 0x0)
1101ddb4:	7bc5      	jsr      	r1
1101ddb6:	6d03      	mov      	r4, r0
1101ddb8:	015a      	lrw      	r2, 0x9999999a	// 1101e0cc <__v2_scanf+0x5d8>
1101ddba:	0119      	lrw      	r0, 0x3fb99999	// 1101e0d0 <__v2_scanf+0x5dc>
1101ddbc:	b84b      	st.w      	r2, (r14, 0x2c)
1101ddbe:	b80c      	st.w      	r0, (r14, 0x30)
1101ddc0:	2600      	addi      	r6, 1
1101ddc2:	6c13      	mov      	r0, r4
1101ddc4:	e00006bc 	bsr      	0x1101eb3c	// 1101eb3c <__GI_isdigit>
1101ddc8:	3840      	cmpnei      	r0, 0
1101ddca:	092f      	bt      	0x1101e028	// 1101e028 <__v2_scanf+0x534>
1101ddcc:	9860      	ld.w      	r3, (r14, 0x0)
1101ddce:	658e      	cmpne      	r3, r6
1101ddd0:	0c1f      	bf      	0x1101de0e	// 1101de0e <__v2_scanf+0x31a>
1101ddd2:	ec240020 	ori      	r1, r4, 32
1101ddd6:	eb410065 	cmpnei      	r1, 101
1101ddda:	0960      	bt      	0x1101e09a	// 1101e09a <__v2_scanf+0x5a6>
1101dddc:	9541      	ld.w      	r2, (r5, 0x4)
1101ddde:	9500      	ld.w      	r0, (r5, 0x0)
1101dde0:	7bc9      	jsr      	r2
1101dde2:	eb40002d 	cmpnei      	r0, 45
1101dde6:	0942      	bt      	0x1101e06a	// 1101e06a <__v2_scanf+0x576>
1101dde8:	9521      	ld.w      	r1, (r5, 0x4)
1101ddea:	9500      	ld.w      	r0, (r5, 0x0)
1101ddec:	9860      	ld.w      	r3, (r14, 0x0)
1101ddee:	5bc6      	addi      	r6, r3, 2
1101ddf0:	7bc5      	jsr      	r1
1101ddf2:	0248      	lrw      	r2, 0x9999999a	// 1101e0cc <__v2_scanf+0x5d8>
1101ddf4:	6d03      	mov      	r4, r0
1101ddf6:	b84b      	st.w      	r2, (r14, 0x2c)
1101ddf8:	0209      	lrw      	r0, 0x3fb99999	// 1101e0d0 <__v2_scanf+0x5dc>
1101ddfa:	b80c      	st.w      	r0, (r14, 0x30)
1101ddfc:	b8c0      	st.w      	r6, (r14, 0x0)
1101ddfe:	6c13      	mov      	r0, r4
1101de00:	e000069e 	bsr      	0x1101eb3c	// 1101eb3c <__GI_isdigit>
1101de04:	3840      	cmpnei      	r0, 0
1101de06:	096b      	bt      	0x1101e0dc	// 1101e0dc <__v2_scanf+0x5e8>
1101de08:	9800      	ld.w      	r0, (r14, 0x0)
1101de0a:	641a      	cmpne      	r6, r0
1101de0c:	0981      	bt      	0x1101e10e	// 1101e10e <__v2_scanf+0x61a>
1101de0e:	9804      	ld.w      	r0, (r14, 0x10)
1101de10:	1612      	addi      	r14, r14, 328
1101de12:	1494      	pop      	r4-r7, r15
1101de14:	74d0      	zextb      	r3, r4
1101de16:	eb430025 	cmpnei      	r3, 37
1101de1a:	0acc      	bt      	0x1101dbb2	// 1101dbb2 <__v2_scanf+0xbe>
1101de1c:	9880      	ld.w      	r4, (r14, 0x0)
1101de1e:	9521      	ld.w      	r1, (r5, 0x4)
1101de20:	2400      	addi      	r4, 1
1101de22:	9500      	ld.w      	r0, (r5, 0x0)
1101de24:	b880      	st.w      	r4, (r14, 0x0)
1101de26:	7bc5      	jsr      	r1
1101de28:	6d03      	mov      	r4, r0
1101de2a:	068f      	br      	0x1101db48	// 1101db48 <__v2_scanf+0x54>
1101de2c:	98ca      	ld.w      	r6, (r14, 0x28)
1101de2e:	3e40      	cmpnei      	r6, 0
1101de30:	0edc      	bf      	0x1101dbe8	// 1101dbe8 <__v2_scanf+0xf4>
1101de32:	b8cb      	st.w      	r6, (r14, 0x2c)
1101de34:	06d8      	br      	0x1101dbe4	// 1101dbe4 <__v2_scanf+0xf0>
1101de36:	3000      	movi      	r0, 0
1101de38:	0701      	br      	0x1101dc3a	// 1101dc3a <__v2_scanf+0x146>
1101de3a:	3000      	movi      	r0, 0
1101de3c:	0700      	br      	0x1101dc3c	// 1101dc3c <__v2_scanf+0x148>
1101de3e:	9561      	ld.w      	r3, (r5, 0x4)
1101de40:	9500      	ld.w      	r0, (r5, 0x0)
1101de42:	9883      	ld.w      	r4, (r14, 0xc)
1101de44:	2400      	addi      	r4, 1
1101de46:	b883      	st.w      	r4, (r14, 0xc)
1101de48:	7bcd      	jsr      	r3
1101de4a:	6d03      	mov      	r4, r0
1101de4c:	06fb      	br      	0x1101dc42	// 1101dc42 <__v2_scanf+0x14e>
1101de4e:	9869      	ld.w      	r3, (r14, 0x24)
1101de50:	3b40      	cmpnei      	r3, 0
1101de52:	0b22      	bt      	0x1101dc96	// 1101dc96 <__v2_scanf+0x1a2>
1101de54:	eb440030 	cmpnei      	r4, 48
1101de58:	087d      	bt      	0x1101df52	// 1101df52 <__v2_scanf+0x45e>
1101de5a:	3408      	movi      	r4, 8
1101de5c:	b889      	st.w      	r4, (r14, 0x24)
1101de5e:	9541      	ld.w      	r2, (r5, 0x4)
1101de60:	9500      	ld.w      	r0, (r5, 0x0)
1101de62:	9863      	ld.w      	r3, (r14, 0xc)
1101de64:	2300      	addi      	r3, 1
1101de66:	b860      	st.w      	r3, (r14, 0x0)
1101de68:	7bc9      	jsr      	r2
1101de6a:	6d03      	mov      	r4, r0
1101de6c:	ec000020 	ori      	r0, r0, 32
1101de70:	eb400078 	cmpnei      	r0, 120
1101de74:	0829      	bt      	0x1101dec6	// 1101dec6 <__v2_scanf+0x3d2>
1101de76:	9521      	ld.w      	r1, (r5, 0x4)
1101de78:	9500      	ld.w      	r0, (r5, 0x0)
1101de7a:	9883      	ld.w      	r4, (r14, 0xc)
1101de7c:	2401      	addi      	r4, 2
1101de7e:	b880      	st.w      	r4, (r14, 0x0)
1101de80:	7bc5      	jsr      	r1
1101de82:	6d03      	mov      	r4, r0
1101de84:	3010      	movi      	r0, 16
1101de86:	b809      	st.w      	r0, (r14, 0x24)
1101de88:	041f      	br      	0x1101dec6	// 1101dec6 <__v2_scanf+0x3d2>
1101de8a:	3850      	cmpnei      	r0, 16
1101de8c:	0b05      	bt      	0x1101dc96	// 1101dc96 <__v2_scanf+0x1a2>
1101de8e:	eb440030 	cmpnei      	r4, 48
1101de92:	0b02      	bt      	0x1101dc96	// 1101dc96 <__v2_scanf+0x1a2>
1101de94:	c4a62821 	bclri      	r1, r6, 5
1101de98:	9863      	ld.w      	r3, (r14, 0xc)
1101de9a:	eb410058 	cmpnei      	r1, 88
1101de9e:	0c58      	bf      	0x1101df4e	// 1101df4e <__v2_scanf+0x45a>
1101dea0:	9581      	ld.w      	r4, (r5, 0x4)
1101dea2:	9500      	ld.w      	r0, (r5, 0x0)
1101dea4:	2300      	addi      	r3, 1
1101dea6:	b860      	st.w      	r3, (r14, 0x0)
1101dea8:	7bd1      	jsr      	r4
1101deaa:	6d03      	mov      	r4, r0
1101deac:	ec440020 	ori      	r2, r4, 32
1101deb0:	eb420078 	cmpnei      	r2, 120
1101deb4:	0809      	bt      	0x1101dec6	// 1101dec6 <__v2_scanf+0x3d2>
1101deb6:	9800      	ld.w      	r0, (r14, 0x0)
1101deb8:	2000      	addi      	r0, 1
1101deba:	b800      	st.w      	r0, (r14, 0x0)
1101debc:	9521      	ld.w      	r1, (r5, 0x4)
1101debe:	9500      	ld.w      	r0, (r5, 0x0)
1101dec0:	2f01      	subi      	r7, 2
1101dec2:	7bc5      	jsr      	r1
1101dec4:	6d03      	mov      	r4, r0
1101dec6:	9860      	ld.w      	r3, (r14, 0x0)
1101dec8:	3200      	movi      	r2, 0
1101deca:	61cc      	addu      	r7, r3
1101decc:	3300      	movi      	r3, 0
1101dece:	b8f0      	st.w      	r7, (r14, 0x40)
1101ded0:	b846      	st.w      	r2, (r14, 0x18)
1101ded2:	b867      	st.w      	r3, (r14, 0x1c)
1101ded4:	3200      	movi      	r2, 0
1101ded6:	2a00      	subi      	r2, 1
1101ded8:	b851      	st.w      	r2, (r14, 0x44)
1101deda:	9800      	ld.w      	r0, (r14, 0x0)
1101dedc:	9830      	ld.w      	r1, (r14, 0x40)
1101dede:	6442      	cmpne      	r0, r1
1101dee0:	0c04      	bf      	0x1101dee8	// 1101dee8 <__v2_scanf+0x3f4>
1101dee2:	9871      	ld.w      	r3, (r14, 0x44)
1101dee4:	64d2      	cmpne      	r4, r3
1101dee6:	083a      	bt      	0x1101df5a	// 1101df5a <__v2_scanf+0x466>
1101dee8:	9803      	ld.w      	r0, (r14, 0xc)
1101deea:	9860      	ld.w      	r3, (r14, 0x0)
1101deec:	64c2      	cmpne      	r0, r3
1101deee:	0f90      	bf      	0x1101de0e	// 1101de0e <__v2_scanf+0x31a>
1101def0:	ecc60020 	ori      	r6, r6, 32
1101def4:	eb06006f 	cmphsi      	r6, 112
1101def8:	0812      	bt      	0x1101df1c	// 1101df1c <__v2_scanf+0x428>
1101defa:	9847      	ld.w      	r2, (r14, 0x1c)
1101defc:	3adf      	btsti      	r2, 31
1101defe:	080f      	bt      	0x1101df1c	// 1101df1c <__v2_scanf+0x428>
1101df00:	982c      	ld.w      	r1, (r14, 0x30)
1101df02:	3940      	cmpnei      	r1, 0
1101df04:	0c0c      	bf      	0x1101df1c	// 1101df1c <__v2_scanf+0x428>
1101df06:	9806      	ld.w      	r0, (r14, 0x18)
1101df08:	9827      	ld.w      	r1, (r14, 0x1c)
1101df0a:	3200      	movi      	r2, 0
1101df0c:	3300      	movi      	r3, 0
1101df0e:	6400      	cmphs      	r0, r0
1101df10:	c4020100 	subc      	r0, r2, r0
1101df14:	c4230101 	subc      	r1, r3, r1
1101df18:	b806      	st.w      	r0, (r14, 0x18)
1101df1a:	b827      	st.w      	r1, (r14, 0x1c)
1101df1c:	9868      	ld.w      	r3, (r14, 0x20)
1101df1e:	3b40      	cmpnei      	r3, 0
1101df20:	0a14      	bt      	0x1101db48	// 1101db48 <__v2_scanf+0x54>
1101df22:	984b      	ld.w      	r2, (r14, 0x2c)
1101df24:	9861      	ld.w      	r3, (r14, 0x4)
1101df26:	3a40      	cmpnei      	r2, 0
1101df28:	2303      	addi      	r3, 4
1101df2a:	0c4d      	bf      	0x1101dfc4	// 1101dfc4 <__v2_scanf+0x4d0>
1101df2c:	9801      	ld.w      	r0, (r14, 0x4)
1101df2e:	9040      	ld.w      	r2, (r0, 0x0)
1101df30:	9806      	ld.w      	r0, (r14, 0x18)
1101df32:	9827      	ld.w      	r1, (r14, 0x1c)
1101df34:	b200      	st.w      	r0, (r2, 0x0)
1101df36:	b221      	st.w      	r1, (r2, 0x4)
1101df38:	9820      	ld.w      	r1, (r14, 0x0)
1101df3a:	b861      	st.w      	r3, (r14, 0x4)
1101df3c:	9863      	ld.w      	r3, (r14, 0xc)
1101df3e:	9844      	ld.w      	r2, (r14, 0x10)
1101df40:	644c      	cmphs      	r3, r1
1101df42:	c4220c40 	inct      	r1, r2, 0
1101df46:	c4220c21 	incf      	r1, r2, 1
1101df4a:	e800fde1 	br      	0x1101db0c	// 1101db0c <__v2_scanf+0x18>
1101df4e:	b860      	st.w      	r3, (r14, 0x0)
1101df50:	07ae      	br      	0x1101deac	// 1101deac <__v2_scanf+0x3b8>
1101df52:	9843      	ld.w      	r2, (r14, 0xc)
1101df54:	300a      	movi      	r0, 10
1101df56:	b840      	st.w      	r2, (r14, 0x0)
1101df58:	0797      	br      	0x1101de86	// 1101de86 <__v2_scanf+0x392>
1101df5a:	75d0      	zextb      	r7, r4
1101df5c:	ec470020 	ori      	r2, r7, 32
1101df60:	eb020060 	cmphsi      	r2, 97
1101df64:	0c26      	bf      	0x1101dfb0	// 1101dfb0 <__v2_scanf+0x4bc>
1101df66:	e4e21056 	subi      	r7, r2, 87
1101df6a:	9809      	ld.w      	r0, (r14, 0x24)
1101df6c:	641c      	cmphs      	r7, r0
1101df6e:	0bbd      	bt      	0x1101dee8	// 1101dee8 <__v2_scanf+0x3f4>
1101df70:	9846      	ld.w      	r2, (r14, 0x18)
1101df72:	9867      	ld.w      	r3, (r14, 0x1c)
1101df74:	9809      	ld.w      	r0, (r14, 0x24)
1101df76:	3100      	movi      	r1, 0
1101df78:	e3ffeda8 	bsr      	0x1101bac8	// 1101bac8 <__muldi3>
1101df7c:	9887      	ld.w      	r4, (r14, 0x1c)
1101df7e:	6504      	cmphs      	r1, r4
1101df80:	0c1d      	bf      	0x1101dfba	// 1101dfba <__v2_scanf+0x4c6>
1101df82:	6452      	cmpne      	r4, r1
1101df84:	0804      	bt      	0x1101df8c	// 1101df8c <__v2_scanf+0x498>
1101df86:	9866      	ld.w      	r3, (r14, 0x18)
1101df88:	64c0      	cmphs      	r0, r3
1101df8a:	0c18      	bf      	0x1101dfba	// 1101dfba <__v2_scanf+0x4c6>
1101df8c:	3200      	movi      	r2, 0
1101df8e:	b8ee      	st.w      	r7, (r14, 0x38)
1101df90:	b84f      	st.w      	r2, (r14, 0x3c)
1101df92:	986e      	ld.w      	r3, (r14, 0x38)
1101df94:	988f      	ld.w      	r4, (r14, 0x3c)
1101df96:	64cd      	cmplt      	r3, r3
1101df98:	60c1      	addc      	r3, r0
1101df9a:	6105      	addc      	r4, r1
1101df9c:	b866      	st.w      	r3, (r14, 0x18)
1101df9e:	b887      	st.w      	r4, (r14, 0x1c)
1101dfa0:	9500      	ld.w      	r0, (r5, 0x0)
1101dfa2:	9581      	ld.w      	r4, (r5, 0x4)
1101dfa4:	9820      	ld.w      	r1, (r14, 0x0)
1101dfa6:	2100      	addi      	r1, 1
1101dfa8:	b820      	st.w      	r1, (r14, 0x0)
1101dfaa:	7bd1      	jsr      	r4
1101dfac:	6d03      	mov      	r4, r0
1101dfae:	0796      	br      	0x1101deda	// 1101deda <__v2_scanf+0x3e6>
1101dfb0:	eb070039 	cmphsi      	r7, 58
1101dfb4:	0b9a      	bt      	0x1101dee8	// 1101dee8 <__v2_scanf+0x3f4>
1101dfb6:	2f2f      	subi      	r7, 48
1101dfb8:	07d9      	br      	0x1101df6a	// 1101df6a <__v2_scanf+0x476>
1101dfba:	3300      	movi      	r3, 0
1101dfbc:	3400      	movi      	r4, 0
1101dfbe:	2b00      	subi      	r3, 1
1101dfc0:	2c00      	subi      	r4, 1
1101dfc2:	07ed      	br      	0x1101df9c	// 1101df9c <__v2_scanf+0x4a8>
1101dfc4:	982a      	ld.w      	r1, (r14, 0x28)
1101dfc6:	3940      	cmpnei      	r1, 0
1101dfc8:	0c06      	bf      	0x1101dfd4	// 1101dfd4 <__v2_scanf+0x4e0>
1101dfca:	9841      	ld.w      	r2, (r14, 0x4)
1101dfcc:	9200      	ld.w      	r0, (r2, 0x0)
1101dfce:	9826      	ld.w      	r1, (r14, 0x18)
1101dfd0:	b020      	st.w      	r1, (r0, 0x0)
1101dfd2:	07b3      	br      	0x1101df38	// 1101df38 <__v2_scanf+0x444>
1101dfd4:	980d      	ld.w      	r0, (r14, 0x34)
1101dfd6:	9841      	ld.w      	r2, (r14, 0x4)
1101dfd8:	3840      	cmpnei      	r0, 0
1101dfda:	9200      	ld.w      	r0, (r2, 0x0)
1101dfdc:	0ff9      	bf      	0x1101dfce	// 1101dfce <__v2_scanf+0x4da>
1101dfde:	d82e100c 	ld.h      	r1, (r14, 0x18)
1101dfe2:	a820      	st.h      	r1, (r0, 0x0)
1101dfe4:	07aa      	br      	0x1101df38	// 1101df38 <__v2_scanf+0x444>
1101dfe6:	9541      	ld.w      	r2, (r5, 0x4)
1101dfe8:	9500      	ld.w      	r0, (r5, 0x0)
1101dfea:	2600      	addi      	r6, 1
1101dfec:	7bc9      	jsr      	r2
1101dfee:	6d03      	mov      	r4, r0
1101dff0:	06b8      	br      	0x1101dd60	// 1101dd60 <__v2_scanf+0x26c>
1101dff2:	9803      	ld.w      	r0, (r14, 0xc)
1101dff4:	3200      	movi      	r2, 0
1101dff6:	ea234024 	movih      	r3, 16420
1101dffa:	6c5f      	mov      	r1, r7
1101dffc:	e3fff356 	bsr      	0x1101c6a8	// 1101c6a8 <__muldf3>
1101e000:	6dc3      	mov      	r7, r0
1101e002:	b823      	st.w      	r1, (r14, 0xc)
1101e004:	e404102f 	subi      	r0, r4, 48
1101e008:	e3fff466 	bsr      	0x1101c8d4	// 1101c8d4 <__floatsidf>
1101e00c:	9863      	ld.w      	r3, (r14, 0xc)
1101e00e:	6c9f      	mov      	r2, r7
1101e010:	e00004b6 	bsr      	0x1101e97c	// 1101e97c <__adddf3>
1101e014:	9561      	ld.w      	r3, (r5, 0x4)
1101e016:	b803      	st.w      	r0, (r14, 0xc)
1101e018:	9500      	ld.w      	r0, (r5, 0x0)
1101e01a:	9880      	ld.w      	r4, (r14, 0x0)
1101e01c:	2400      	addi      	r4, 1
1101e01e:	b880      	st.w      	r4, (r14, 0x0)
1101e020:	6dc7      	mov      	r7, r1
1101e022:	7bcd      	jsr      	r3
1101e024:	6d03      	mov      	r4, r0
1101e026:	06b9      	br      	0x1101dd98	// 1101dd98 <__v2_scanf+0x2a4>
1101e028:	e404102f 	subi      	r0, r4, 48
1101e02c:	e3fff454 	bsr      	0x1101c8d4	// 1101c8d4 <__floatsidf>
1101e030:	984b      	ld.w      	r2, (r14, 0x2c)
1101e032:	986c      	ld.w      	r3, (r14, 0x30)
1101e034:	e3fff33a 	bsr      	0x1101c6a8	// 1101c6a8 <__muldf3>
1101e038:	6c83      	mov      	r2, r0
1101e03a:	6cc7      	mov      	r3, r1
1101e03c:	9803      	ld.w      	r0, (r14, 0xc)
1101e03e:	6c5f      	mov      	r1, r7
1101e040:	e000049e 	bsr      	0x1101e97c	// 1101e97c <__adddf3>
1101e044:	6dc7      	mov      	r7, r1
1101e046:	b803      	st.w      	r0, (r14, 0xc)
1101e048:	982c      	ld.w      	r1, (r14, 0x30)
1101e04a:	980b      	ld.w      	r0, (r14, 0x2c)
1101e04c:	3200      	movi      	r2, 0
1101e04e:	ea234024 	movih      	r3, 16420
1101e052:	e00004c9 	bsr      	0x1101e9e4	// 1101e9e4 <__divdf3>
1101e056:	9541      	ld.w      	r2, (r5, 0x4)
1101e058:	b80b      	st.w      	r0, (r14, 0x2c)
1101e05a:	9800      	ld.w      	r0, (r14, 0x0)
1101e05c:	2000      	addi      	r0, 1
1101e05e:	b800      	st.w      	r0, (r14, 0x0)
1101e060:	9500      	ld.w      	r0, (r5, 0x0)
1101e062:	b82c      	st.w      	r1, (r14, 0x30)
1101e064:	7bc9      	jsr      	r2
1101e066:	6d03      	mov      	r4, r0
1101e068:	06ad      	br      	0x1101ddc2	// 1101ddc2 <__v2_scanf+0x2ce>
1101e06a:	eb40002b 	cmpnei      	r0, 43
1101e06e:	080c      	bt      	0x1101e086	// 1101e086 <__v2_scanf+0x592>
1101e070:	9581      	ld.w      	r4, (r5, 0x4)
1101e072:	9500      	ld.w      	r0, (r5, 0x0)
1101e074:	98c0      	ld.w      	r6, (r14, 0x0)
1101e076:	7bd1      	jsr      	r4
1101e078:	3200      	movi      	r2, 0
1101e07a:	6d03      	mov      	r4, r0
1101e07c:	2601      	addi      	r6, 2
1101e07e:	b84b      	st.w      	r2, (r14, 0x2c)
1101e080:	ea204024 	movih      	r0, 16420
1101e084:	06bb      	br      	0x1101ddfa	// 1101ddfa <__v2_scanf+0x306>
1101e086:	3700      	movi      	r7, 0
1101e088:	2f00      	subi      	r7, 1
1101e08a:	65c2      	cmpne      	r0, r7
1101e08c:	0824      	bt      	0x1101e0d4	// 1101e0d4 <__v2_scanf+0x5e0>
1101e08e:	9800      	ld.w      	r0, (r14, 0x0)
1101e090:	2000      	addi      	r0, 1
1101e092:	b800      	st.w      	r0, (r14, 0x0)
1101e094:	3100      	movi      	r1, 0
1101e096:	3700      	movi      	r7, 0
1101e098:	b823      	st.w      	r1, (r14, 0xc)
1101e09a:	9828      	ld.w      	r1, (r14, 0x20)
1101e09c:	3940      	cmpnei      	r1, 0
1101e09e:	e860fd55 	bt      	0x1101db48	// 1101db48 <__v2_scanf+0x54>
1101e0a2:	98ca      	ld.w      	r6, (r14, 0x28)
1101e0a4:	9841      	ld.w      	r2, (r14, 0x4)
1101e0a6:	3e40      	cmpnei      	r6, 0
1101e0a8:	5ace      	addi      	r6, r2, 4
1101e0aa:	0c36      	bf      	0x1101e116	// 1101e116 <__v2_scanf+0x622>
1101e0ac:	9220      	ld.w      	r1, (r2, 0x0)
1101e0ae:	9849      	ld.w      	r2, (r14, 0x24)
1101e0b0:	3a40      	cmpnei      	r2, 0
1101e0b2:	0c04      	bf      	0x1101e0ba	// 1101e0ba <__v2_scanf+0x5c6>
1101e0b4:	3080      	movi      	r0, 128
1101e0b6:	4078      	lsli      	r3, r0, 24
1101e0b8:	61cc      	addu      	r7, r3
1101e0ba:	9843      	ld.w      	r2, (r14, 0xc)
1101e0bc:	b1e1      	st.w      	r7, (r1, 0x4)
1101e0be:	b140      	st.w      	r2, (r1, 0x0)
1101e0c0:	b8c1      	st.w      	r6, (r14, 0x4)
1101e0c2:	9824      	ld.w      	r1, (r14, 0x10)
1101e0c4:	2100      	addi      	r1, 1
1101e0c6:	e800fd23 	br      	0x1101db0c	// 1101db0c <__v2_scanf+0x18>
1101e0ca:	0000      	bkpt
1101e0cc:	9999999a 	.long	0x9999999a
1101e0d0:	3fb99999 	.long	0x3fb99999
1101e0d4:	9562      	ld.w      	r3, (r5, 0x8)
1101e0d6:	9520      	ld.w      	r1, (r5, 0x0)
1101e0d8:	7bcd      	jsr      	r3
1101e0da:	07dd      	br      	0x1101e094	// 1101e094 <__v2_scanf+0x5a0>
1101e0dc:	9866      	ld.w      	r3, (r14, 0x18)
1101e0de:	300a      	movi      	r0, 10
1101e0e0:	7cc0      	mult      	r3, r0
1101e0e2:	2c2f      	subi      	r4, 48
1101e0e4:	9500      	ld.w      	r0, (r5, 0x0)
1101e0e6:	610c      	addu      	r4, r3
1101e0e8:	9561      	ld.w      	r3, (r5, 0x4)
1101e0ea:	9820      	ld.w      	r1, (r14, 0x0)
1101e0ec:	2100      	addi      	r1, 1
1101e0ee:	b886      	st.w      	r4, (r14, 0x18)
1101e0f0:	b820      	st.w      	r1, (r14, 0x0)
1101e0f2:	7bcd      	jsr      	r3
1101e0f4:	6d03      	mov      	r4, r0
1101e0f6:	0684      	br      	0x1101ddfe	// 1101ddfe <__v2_scanf+0x30a>
1101e0f8:	9803      	ld.w      	r0, (r14, 0xc)
1101e0fa:	6c5f      	mov      	r1, r7
1101e0fc:	984b      	ld.w      	r2, (r14, 0x2c)
1101e0fe:	986c      	ld.w      	r3, (r14, 0x30)
1101e100:	e3fff2d4 	bsr      	0x1101c6a8	// 1101c6a8 <__muldf3>
1101e104:	6dc7      	mov      	r7, r1
1101e106:	9826      	ld.w      	r1, (r14, 0x18)
1101e108:	2900      	subi      	r1, 1
1101e10a:	b803      	st.w      	r0, (r14, 0xc)
1101e10c:	b826      	st.w      	r1, (r14, 0x18)
1101e10e:	9866      	ld.w      	r3, (r14, 0x18)
1101e110:	3b40      	cmpnei      	r3, 0
1101e112:	0bf3      	bt      	0x1101e0f8	// 1101e0f8 <__v2_scanf+0x604>
1101e114:	07c3      	br      	0x1101e09a	// 1101e09a <__v2_scanf+0x5a6>
1101e116:	9829      	ld.w      	r1, (r14, 0x24)
1101e118:	9801      	ld.w      	r0, (r14, 0x4)
1101e11a:	3940      	cmpnei      	r1, 0
1101e11c:	9060      	ld.w      	r3, (r0, 0x0)
1101e11e:	0c04      	bf      	0x1101e126	// 1101e126 <__v2_scanf+0x632>
1101e120:	3280      	movi      	r2, 128
1101e122:	4218      	lsli      	r0, r2, 24
1101e124:	61c0      	addu      	r7, r0
1101e126:	9803      	ld.w      	r0, (r14, 0xc)
1101e128:	6c5f      	mov      	r1, r7
1101e12a:	b861      	st.w      	r3, (r14, 0x4)
1101e12c:	e3fff408 	bsr      	0x1101c93c	// 1101c93c <__truncdfsf2>
1101e130:	9861      	ld.w      	r3, (r14, 0x4)
1101e132:	b300      	st.w      	r0, (r3, 0x0)
1101e134:	07c6      	br      	0x1101e0c0	// 1101e0c0 <__v2_scanf+0x5cc>
1101e136:	9848      	ld.w      	r2, (r14, 0x20)
1101e138:	3a40      	cmpnei      	r2, 0
1101e13a:	080a      	bt      	0x1101e14e	// 1101e14e <__v2_scanf+0x65a>
1101e13c:	9861      	ld.w      	r3, (r14, 0x4)
1101e13e:	98c4      	ld.w      	r6, (r14, 0x10)
1101e140:	9300      	ld.w      	r0, (r3, 0x0)
1101e142:	9821      	ld.w      	r1, (r14, 0x4)
1101e144:	2600      	addi      	r6, 1
1101e146:	2103      	addi      	r1, 4
1101e148:	b802      	st.w      	r0, (r14, 0x8)
1101e14a:	b8c4      	st.w      	r6, (r14, 0x10)
1101e14c:	b821      	st.w      	r1, (r14, 0x4)
1101e14e:	9846      	ld.w      	r2, (r14, 0x18)
1101e150:	3301      	movi      	r3, 1
1101e152:	3a40      	cmpnei      	r2, 0
1101e154:	c4e30c20 	incf      	r7, r3, 0
1101e158:	9800      	ld.w      	r0, (r14, 0x0)
1101e15a:	3600      	movi      	r6, 0
1101e15c:	61c0      	addu      	r7, r0
1101e15e:	2e00      	subi      	r6, 1
1101e160:	9820      	ld.w      	r1, (r14, 0x0)
1101e162:	65c6      	cmpne      	r1, r7
1101e164:	e840fcf2 	bf      	0x1101db48	// 1101db48 <__v2_scanf+0x54>
1101e168:	6592      	cmpne      	r4, r6
1101e16a:	e840fcef 	bf      	0x1101db48	// 1101db48 <__v2_scanf+0x54>
1101e16e:	9848      	ld.w      	r2, (r14, 0x20)
1101e170:	3a40      	cmpnei      	r2, 0
1101e172:	0805      	bt      	0x1101e17c	// 1101e17c <__v2_scanf+0x688>
1101e174:	9862      	ld.w      	r3, (r14, 0x8)
1101e176:	a380      	st.b      	r4, (r3, 0x0)
1101e178:	2300      	addi      	r3, 1
1101e17a:	b862      	st.w      	r3, (r14, 0x8)
1101e17c:	9521      	ld.w      	r1, (r5, 0x4)
1101e17e:	9500      	ld.w      	r0, (r5, 0x0)
1101e180:	9880      	ld.w      	r4, (r14, 0x0)
1101e182:	2400      	addi      	r4, 1
1101e184:	b880      	st.w      	r4, (r14, 0x0)
1101e186:	7bc5      	jsr      	r1
1101e188:	6d03      	mov      	r4, r0
1101e18a:	07eb      	br      	0x1101e160	// 1101e160 <__v2_scanf+0x66c>
1101e18c:	9848      	ld.w      	r2, (r14, 0x20)
1101e18e:	3a40      	cmpnei      	r2, 0
1101e190:	082b      	bt      	0x1101e1e6	// 1101e1e6 <__v2_scanf+0x6f2>
1101e192:	9861      	ld.w      	r3, (r14, 0x4)
1101e194:	93c0      	ld.w      	r6, (r3, 0x0)
1101e196:	2303      	addi      	r3, 4
1101e198:	b861      	st.w      	r3, (r14, 0x4)
1101e19a:	9820      	ld.w      	r1, (r14, 0x0)
1101e19c:	7410      	zextb      	r0, r4
1101e19e:	b820      	st.w      	r1, (r14, 0x0)
1101e1a0:	e00004d2 	bsr      	0x1101eb44	// 1101eb44 <__GI_isspace>
1101e1a4:	3840      	cmpnei      	r0, 0
1101e1a6:	9800      	ld.w      	r0, (r14, 0x0)
1101e1a8:	0821      	bt      	0x1101e1ea	// 1101e1ea <__v2_scanf+0x6f6>
1101e1aa:	3200      	movi      	r2, 0
1101e1ac:	2a00      	subi      	r2, 1
1101e1ae:	6492      	cmpne      	r4, r2
1101e1b0:	0c9b      	bf      	0x1101e2e6	// 1101e2e6 <__v2_scanf+0x7f2>
1101e1b2:	b843      	st.w      	r2, (r14, 0xc)
1101e1b4:	61d8      	addu      	r7, r6
1101e1b6:	b8c2      	st.w      	r6, (r14, 0x8)
1101e1b8:	58d9      	subu      	r6, r0, r6
1101e1ba:	9802      	ld.w      	r0, (r14, 0x8)
1101e1bc:	9862      	ld.w      	r3, (r14, 0x8)
1101e1be:	65c2      	cmpne      	r0, r7
1101e1c0:	5b38      	addu      	r1, r3, r6
1101e1c2:	b820      	st.w      	r1, (r14, 0x0)
1101e1c4:	0c09      	bf      	0x1101e1d6	// 1101e1d6 <__v2_scanf+0x6e2>
1101e1c6:	9843      	ld.w      	r2, (r14, 0xc)
1101e1c8:	6492      	cmpne      	r4, r2
1101e1ca:	0c06      	bf      	0x1101e1d6	// 1101e1d6 <__v2_scanf+0x6e2>
1101e1cc:	7410      	zextb      	r0, r4
1101e1ce:	e00004bb 	bsr      	0x1101eb44	// 1101eb44 <__GI_isspace>
1101e1d2:	3840      	cmpnei      	r0, 0
1101e1d4:	0c12      	bf      	0x1101e1f8	// 1101e1f8 <__v2_scanf+0x704>
1101e1d6:	9808      	ld.w      	r0, (r14, 0x20)
1101e1d8:	3840      	cmpnei      	r0, 0
1101e1da:	e860fcb7 	bt      	0x1101db48	// 1101db48 <__v2_scanf+0x54>
1101e1de:	9862      	ld.w      	r3, (r14, 0x8)
1101e1e0:	3200      	movi      	r2, 0
1101e1e2:	a340      	st.b      	r2, (r3, 0x0)
1101e1e4:	076f      	br      	0x1101e0c2	// 1101e0c2 <__v2_scanf+0x5ce>
1101e1e6:	98c2      	ld.w      	r6, (r14, 0x8)
1101e1e8:	07d9      	br      	0x1101e19a	// 1101e19a <__v2_scanf+0x6a6>
1101e1ea:	2000      	addi      	r0, 1
1101e1ec:	b800      	st.w      	r0, (r14, 0x0)
1101e1ee:	9541      	ld.w      	r2, (r5, 0x4)
1101e1f0:	9500      	ld.w      	r0, (r5, 0x0)
1101e1f2:	7bc9      	jsr      	r2
1101e1f4:	6d03      	mov      	r4, r0
1101e1f6:	07d2      	br      	0x1101e19a	// 1101e19a <__v2_scanf+0x6a6>
1101e1f8:	9868      	ld.w      	r3, (r14, 0x20)
1101e1fa:	3b40      	cmpnei      	r3, 0
1101e1fc:	0803      	bt      	0x1101e202	// 1101e202 <__v2_scanf+0x70e>
1101e1fe:	9822      	ld.w      	r1, (r14, 0x8)
1101e200:	a180      	st.b      	r4, (r1, 0x0)
1101e202:	3c40      	cmpnei      	r4, 0
1101e204:	0fe9      	bf      	0x1101e1d6	// 1101e1d6 <__v2_scanf+0x6e2>
1101e206:	9561      	ld.w      	r3, (r5, 0x4)
1101e208:	9500      	ld.w      	r0, (r5, 0x0)
1101e20a:	9882      	ld.w      	r4, (r14, 0x8)
1101e20c:	2400      	addi      	r4, 1
1101e20e:	b882      	st.w      	r4, (r14, 0x8)
1101e210:	7bcd      	jsr      	r3
1101e212:	6d03      	mov      	r4, r0
1101e214:	07d3      	br      	0x1101e1ba	// 1101e1ba <__v2_scanf+0x6c6>
1101e216:	1e12      	addi      	r6, r14, 72
1101e218:	5b18      	addu      	r0, r3, r6
1101e21a:	3600      	movi      	r6, 0
1101e21c:	a0c0      	st.b      	r6, (r0, 0x0)
1101e21e:	e800fd79 	br      	0x1101dd10	// 1101dd10 <__v2_scanf+0x21c>
1101e222:	9845      	ld.w      	r2, (r14, 0x14)
1101e224:	3101      	movi      	r1, 1
1101e226:	5ac6      	addi      	r6, r2, 2
1101e228:	8261      	ld.b      	r3, (r2, 0x1)
1101e22a:	e800fd7f 	br      	0x1101dd28	// 1101dd28 <__v2_scanf+0x234>
1101e22e:	1812      	addi      	r0, r14, 72
1101e230:	5960      	addu      	r3, r1, r0
1101e232:	3001      	movi      	r0, 1
1101e234:	2100      	addi      	r1, 1
1101e236:	a300      	st.b      	r0, (r3, 0x0)
1101e238:	0413      	br      	0x1101e25e	// 1101e25e <__v2_scanf+0x76a>
1101e23a:	eb42002d 	cmpnei      	r2, 45
1101e23e:	0c07      	bf      	0x1101e24c	// 1101e24c <__v2_scanf+0x758>
1101e240:	1812      	addi      	r0, r14, 72
1101e242:	60c0      	addu      	r3, r0
1101e244:	3001      	movi      	r0, 1
1101e246:	a300      	st.b      	r0, (r3, 0x0)
1101e248:	6ccb      	mov      	r3, r2
1101e24a:	040e      	br      	0x1101e266	// 1101e266 <__v2_scanf+0x772>
1101e24c:	3101      	movi      	r1, 1
1101e24e:	040c      	br      	0x1101e266	// 1101e266 <__v2_scanf+0x772>
1101e250:	eb42005d 	cmpnei      	r2, 93
1101e254:	e840fd7c 	bf      	0x1101dd4c	// 1101dd4c <__v2_scanf+0x258>
1101e258:	3940      	cmpnei      	r1, 0
1101e25a:	0ff0      	bf      	0x1101e23a	// 1101e23a <__v2_scanf+0x746>
1101e25c:	6c4f      	mov      	r1, r3
1101e25e:	6448      	cmphs      	r2, r1
1101e260:	6ccb      	mov      	r3, r2
1101e262:	0be6      	bt      	0x1101e22e	// 1101e22e <__v2_scanf+0x73a>
1101e264:	3100      	movi      	r1, 0
1101e266:	2600      	addi      	r6, 1
1101e268:	e800fd6e 	br      	0x1101dd44	// 1101dd44 <__v2_scanf+0x250>
1101e26c:	3201      	movi      	r2, 1
1101e26e:	dc4e0075 	st.b      	r2, (r14, 0x75)
1101e272:	9828      	ld.w      	r1, (r14, 0x20)
1101e274:	3940      	cmpnei      	r1, 0
1101e276:	080a      	bt      	0x1101e28a	// 1101e28a <__v2_scanf+0x796>
1101e278:	9801      	ld.w      	r0, (r14, 0x4)
1101e27a:	9844      	ld.w      	r2, (r14, 0x10)
1101e27c:	9060      	ld.w      	r3, (r0, 0x0)
1101e27e:	9821      	ld.w      	r1, (r14, 0x4)
1101e280:	2200      	addi      	r2, 1
1101e282:	2103      	addi      	r1, 4
1101e284:	b862      	st.w      	r3, (r14, 0x8)
1101e286:	b844      	st.w      	r2, (r14, 0x10)
1101e288:	b821      	st.w      	r1, (r14, 0x4)
1101e28a:	9802      	ld.w      	r0, (r14, 0x8)
1101e28c:	9860      	ld.w      	r3, (r14, 0x0)
1101e28e:	585c      	addu      	r2, r0, r7
1101e290:	98e2      	ld.w      	r7, (r14, 0x8)
1101e292:	5b3d      	subu      	r1, r3, r7
1101e294:	649e      	cmpne      	r7, r2
1101e296:	5f04      	addu      	r0, r7, r1
1101e298:	b800      	st.w      	r0, (r14, 0x0)
1101e29a:	0c09      	bf      	0x1101e2ac	// 1101e2ac <__v2_scanf+0x7b8>
1101e29c:	3cdf      	btsti      	r4, 31
1101e29e:	0807      	bt      	0x1101e2ac	// 1101e2ac <__v2_scanf+0x7b8>
1101e2a0:	1b12      	addi      	r3, r14, 72
1101e2a2:	5c0c      	addu      	r0, r4, r3
1101e2a4:	8000      	ld.b      	r0, (r0, 0x0)
1101e2a6:	9863      	ld.w      	r3, (r14, 0xc)
1101e2a8:	640e      	cmpne      	r3, r0
1101e2aa:	080a      	bt      	0x1101e2be	// 1101e2be <__v2_scanf+0x7ca>
1101e2ac:	9848      	ld.w      	r2, (r14, 0x20)
1101e2ae:	3a40      	cmpnei      	r2, 0
1101e2b0:	0802      	bt      	0x1101e2b4	// 1101e2b4 <__v2_scanf+0x7c0>
1101e2b2:	a740      	st.b      	r2, (r7, 0x0)
1101e2b4:	5e22      	addi      	r1, r6, 1
1101e2b6:	b8e2      	st.w      	r7, (r14, 0x8)
1101e2b8:	b825      	st.w      	r1, (r14, 0x14)
1101e2ba:	e800fc47 	br      	0x1101db48	// 1101db48 <__v2_scanf+0x54>
1101e2be:	9808      	ld.w      	r0, (r14, 0x20)
1101e2c0:	3840      	cmpnei      	r0, 0
1101e2c2:	0802      	bt      	0x1101e2c6	// 1101e2c6 <__v2_scanf+0x7d2>
1101e2c4:	a780      	st.b      	r4, (r7, 0x0)
1101e2c6:	3c40      	cmpnei      	r4, 0
1101e2c8:	b825      	st.w      	r1, (r14, 0x14)
1101e2ca:	b842      	st.w      	r2, (r14, 0x8)
1101e2cc:	0ff0      	bf      	0x1101e2ac	// 1101e2ac <__v2_scanf+0x7b8>
1101e2ce:	9581      	ld.w      	r4, (r5, 0x4)
1101e2d0:	9500      	ld.w      	r0, (r5, 0x0)
1101e2d2:	2700      	addi      	r7, 1
1101e2d4:	7bd1      	jsr      	r4
1101e2d6:	6d03      	mov      	r4, r0
1101e2d8:	9825      	ld.w      	r1, (r14, 0x14)
1101e2da:	9842      	ld.w      	r2, (r14, 0x8)
1101e2dc:	07dc      	br      	0x1101e294	// 1101e294 <__v2_scanf+0x7a0>
1101e2de:	7490      	zextb      	r2, r4
1101e2e0:	648e      	cmpne      	r3, r2
1101e2e2:	e800fd9c 	br      	0x1101de1a	// 1101de1a <__v2_scanf+0x326>
1101e2e6:	b800      	st.w      	r0, (r14, 0x0)
1101e2e8:	b8c2      	st.w      	r6, (r14, 0x8)
1101e2ea:	e800fc2f 	br      	0x1101db48	// 1101db48 <__v2_scanf+0x54>
1101e2ee:	3100      	movi      	r1, 0
1101e2f0:	b824      	st.w      	r1, (r14, 0x10)
1101e2f2:	e800fd8e 	br      	0x1101de0e	// 1101de0e <__v2_scanf+0x31a>
1101e2f6:	3100      	movi      	r1, 0
1101e2f8:	2900      	subi      	r1, 1
1101e2fa:	07fb      	br      	0x1101e2f0	// 1101e2f0 <__v2_scanf+0x7fc>

1101e2fc <__umoddi3>:
1101e2fc:	14d4      	push      	r4-r7, r15
1101e2fe:	1427      	subi      	r14, r14, 28
1101e300:	6d03      	mov      	r4, r0
1101e302:	3b40      	cmpnei      	r3, 0
1101e304:	6d47      	mov      	r5, r1
1101e306:	6d8b      	mov      	r6, r2
1101e308:	6c4b      	mov      	r1, r2
1101e30a:	6c0f      	mov      	r0, r3
1101e30c:	6dcf      	mov      	r7, r3
1101e30e:	b880      	st.w      	r4, (r14, 0x0)
1101e310:	6c97      	mov      	r2, r5
1101e312:	085e      	bt      	0x1101e3ce	// 1101e3ce <__umoddi3+0xd2>
1101e314:	6454      	cmphs      	r5, r1
1101e316:	0880      	bt      	0x1101e416	// 1101e416 <__umoddi3+0x11a>
1101e318:	eb01ffff 	cmphsi      	r1, 65536
1101e31c:	0cda      	bf      	0x1101e4d0	// 1101e4d0 <__umoddi3+0x1d4>
1101e31e:	c6e05020 	bmaski      	r0, 24
1101e322:	3718      	movi      	r7, 24
1101e324:	6440      	cmphs      	r0, r1
1101e326:	3010      	movi      	r0, 16
1101e328:	c4e00c40 	inct      	r7, r0, 0
1101e32c:	c4e14040 	lsr      	r0, r1, r7
1101e330:	0164      	lrw      	r3, 0x110110e4	// 1101e69c <__umoddi3+0x3a0>
1101e332:	600c      	addu      	r0, r3
1101e334:	8000      	ld.b      	r0, (r0, 0x0)
1101e336:	61c0      	addu      	r7, r0
1101e338:	3020      	movi      	r0, 32
1101e33a:	587d      	subu      	r3, r0, r7
1101e33c:	3b40      	cmpnei      	r3, 0
1101e33e:	b861      	st.w      	r3, (r14, 0x4)
1101e340:	0c0b      	bf      	0x1101e356	// 1101e356 <__umoddi3+0x5a>
1101e342:	714c      	lsl      	r5, r3
1101e344:	c4614026 	lsl      	r6, r1, r3
1101e348:	c4e44047 	lsr      	r7, r4, r7
1101e34c:	c4644023 	lsl      	r3, r4, r3
1101e350:	c4a72422 	or      	r2, r7, r5
1101e354:	b860      	st.w      	r3, (r14, 0x0)
1101e356:	4ef0      	lsri      	r7, r6, 16
1101e358:	6c5f      	mov      	r1, r7
1101e35a:	6c0b      	mov      	r0, r2
1101e35c:	b842      	st.w      	r2, (r14, 0x8)
1101e35e:	e3ffeb9d 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101e362:	9842      	ld.w      	r2, (r14, 0x8)
1101e364:	6d03      	mov      	r4, r0
1101e366:	6c5f      	mov      	r1, r7
1101e368:	6c0b      	mov      	r0, r2
1101e36a:	7559      	zexth      	r5, r6
1101e36c:	e3ffeb48 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101e370:	9860      	ld.w      	r3, (r14, 0x0)
1101e372:	4450      	lsli      	r2, r4, 16
1101e374:	4b90      	lsri      	r4, r3, 16
1101e376:	7c14      	mult      	r0, r5
1101e378:	6c90      	or      	r2, r4
1101e37a:	6408      	cmphs      	r2, r0
1101e37c:	0808      	bt      	0x1101e38c	// 1101e38c <__umoddi3+0x90>
1101e37e:	6098      	addu      	r2, r6
1101e380:	6588      	cmphs      	r2, r6
1101e382:	0c05      	bf      	0x1101e38c	// 1101e38c <__umoddi3+0x90>
1101e384:	6408      	cmphs      	r2, r0
1101e386:	5a38      	addu      	r1, r2, r6
1101e388:	c4410c20 	incf      	r2, r1, 0
1101e38c:	6082      	subu      	r2, r0
1101e38e:	6c5f      	mov      	r1, r7
1101e390:	6c0b      	mov      	r0, r2
1101e392:	b842      	st.w      	r2, (r14, 0x8)
1101e394:	e3ffeb82 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101e398:	9842      	ld.w      	r2, (r14, 0x8)
1101e39a:	6d03      	mov      	r4, r0
1101e39c:	6c5f      	mov      	r1, r7
1101e39e:	6c0b      	mov      	r0, r2
1101e3a0:	4490      	lsli      	r4, r4, 16
1101e3a2:	e3ffeb2d 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101e3a6:	d86e1000 	ld.h      	r3, (r14, 0x0)
1101e3aa:	7d40      	mult      	r5, r0
1101e3ac:	740d      	zexth      	r0, r3
1101e3ae:	6c10      	or      	r0, r4
1101e3b0:	6540      	cmphs      	r0, r5
1101e3b2:	0808      	bt      	0x1101e3c2	// 1101e3c2 <__umoddi3+0xc6>
1101e3b4:	6018      	addu      	r0, r6
1101e3b6:	6580      	cmphs      	r0, r6
1101e3b8:	0c05      	bf      	0x1101e3c2	// 1101e3c2 <__umoddi3+0xc6>
1101e3ba:	6540      	cmphs      	r0, r5
1101e3bc:	5878      	addu      	r3, r0, r6
1101e3be:	c4030c20 	incf      	r0, r3, 0
1101e3c2:	6016      	subu      	r0, r5
1101e3c4:	9861      	ld.w      	r3, (r14, 0x4)
1101e3c6:	700d      	lsr      	r0, r3
1101e3c8:	3100      	movi      	r1, 0
1101e3ca:	1407      	addi      	r14, r14, 28
1101e3cc:	1494      	pop      	r4-r7, r15
1101e3ce:	64d4      	cmphs      	r5, r3
1101e3d0:	0c76      	bf      	0x1101e4bc	// 1101e4bc <__umoddi3+0x1c0>
1101e3d2:	eb03ffff 	cmphsi      	r3, 65536
1101e3d6:	0c77      	bf      	0x1101e4c4	// 1101e4c4 <__umoddi3+0x1c8>
1101e3d8:	c6e05023 	bmaski      	r3, 24
1101e3dc:	3618      	movi      	r6, 24
1101e3de:	640c      	cmphs      	r3, r0
1101e3e0:	3310      	movi      	r3, 16
1101e3e2:	c4660c20 	incf      	r3, r6, 0
1101e3e6:	02f1      	lrw      	r7, 0x110110e4	// 1101e69c <__umoddi3+0x3a0>
1101e3e8:	c4604046 	lsr      	r6, r0, r3
1101e3ec:	619c      	addu      	r6, r7
1101e3ee:	86c0      	ld.b      	r6, (r6, 0x0)
1101e3f0:	3720      	movi      	r7, 32
1101e3f2:	618c      	addu      	r6, r3
1101e3f4:	61da      	subu      	r7, r6
1101e3f6:	3f40      	cmpnei      	r7, 0
1101e3f8:	b8c0      	st.w      	r6, (r14, 0x0)
1101e3fa:	0877      	bt      	0x1101e4e8	// 1101e4e8 <__umoddi3+0x1ec>
1101e3fc:	6540      	cmphs      	r0, r5
1101e3fe:	0c03      	bf      	0x1101e404	// 1101e404 <__umoddi3+0x108>
1101e400:	6450      	cmphs      	r4, r1
1101e402:	0d44      	bf      	0x1101e68a	// 1101e68a <__umoddi3+0x38e>
1101e404:	5cc5      	subu      	r6, r4, r1
1101e406:	6590      	cmphs      	r4, r6
1101e408:	6142      	subu      	r5, r0
1101e40a:	64c3      	mvcv      	r3
1101e40c:	5d4d      	subu      	r2, r5, r3
1101e40e:	6c1b      	mov      	r0, r6
1101e410:	6c4b      	mov      	r1, r2
1101e412:	1407      	addi      	r14, r14, 28
1101e414:	1494      	pop      	r4-r7, r15
1101e416:	3940      	cmpnei      	r1, 0
1101e418:	0805      	bt      	0x1101e422	// 1101e422 <__umoddi3+0x126>
1101e41a:	3001      	movi      	r0, 1
1101e41c:	e3ffeaf0 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101e420:	6d83      	mov      	r6, r0
1101e422:	eb06ffff 	cmphsi      	r6, 65536
1101e426:	0c5b      	bf      	0x1101e4dc	// 1101e4dc <__umoddi3+0x1e0>
1101e428:	c6e05022 	bmaski      	r2, 24
1101e42c:	3718      	movi      	r7, 24
1101e42e:	6588      	cmphs      	r2, r6
1101e430:	3210      	movi      	r2, 16
1101e432:	c4e20c40 	inct      	r7, r2, 0
1101e436:	0365      	lrw      	r3, 0x110110e4	// 1101e69c <__umoddi3+0x3a0>
1101e438:	c4e64042 	lsr      	r2, r6, r7
1101e43c:	608c      	addu      	r2, r3
1101e43e:	8240      	ld.b      	r2, (r2, 0x0)
1101e440:	3020      	movi      	r0, 32
1101e442:	609c      	addu      	r2, r7
1101e444:	5869      	subu      	r3, r0, r2
1101e446:	3b40      	cmpnei      	r3, 0
1101e448:	b861      	st.w      	r3, (r14, 0x4)
1101e44a:	08c9      	bt      	0x1101e5dc	// 1101e5dc <__umoddi3+0x2e0>
1101e44c:	74d9      	zexth      	r3, r6
1101e44e:	4e90      	lsri      	r4, r6, 16
1101e450:	b862      	st.w      	r3, (r14, 0x8)
1101e452:	615a      	subu      	r5, r6
1101e454:	6c53      	mov      	r1, r4
1101e456:	6c17      	mov      	r0, r5
1101e458:	e3ffeb20 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101e45c:	6dc3      	mov      	r7, r0
1101e45e:	6c53      	mov      	r1, r4
1101e460:	6c17      	mov      	r0, r5
1101e462:	47f0      	lsli      	r7, r7, 16
1101e464:	e3ffeacc 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101e468:	9862      	ld.w      	r3, (r14, 0x8)
1101e46a:	7c0c      	mult      	r0, r3
1101e46c:	9860      	ld.w      	r3, (r14, 0x0)
1101e46e:	4b50      	lsri      	r2, r3, 16
1101e470:	6dc8      	or      	r7, r2
1101e472:	641c      	cmphs      	r7, r0
1101e474:	0808      	bt      	0x1101e484	// 1101e484 <__umoddi3+0x188>
1101e476:	61d8      	addu      	r7, r6
1101e478:	659c      	cmphs      	r7, r6
1101e47a:	0c05      	bf      	0x1101e484	// 1101e484 <__umoddi3+0x188>
1101e47c:	641c      	cmphs      	r7, r0
1101e47e:	5f58      	addu      	r2, r7, r6
1101e480:	c4e20c20 	incf      	r7, r2, 0
1101e484:	61c2      	subu      	r7, r0
1101e486:	6c53      	mov      	r1, r4
1101e488:	6c1f      	mov      	r0, r7
1101e48a:	e3ffeb07 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101e48e:	6d43      	mov      	r5, r0
1101e490:	6c53      	mov      	r1, r4
1101e492:	6c1f      	mov      	r0, r7
1101e494:	45b0      	lsli      	r5, r5, 16
1101e496:	e3ffeab3 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101e49a:	9842      	ld.w      	r2, (r14, 0x8)
1101e49c:	d86e1000 	ld.h      	r3, (r14, 0x0)
1101e4a0:	7c80      	mult      	r2, r0
1101e4a2:	740d      	zexth      	r0, r3
1101e4a4:	6c14      	or      	r0, r5
1101e4a6:	6480      	cmphs      	r0, r2
1101e4a8:	0808      	bt      	0x1101e4b8	// 1101e4b8 <__umoddi3+0x1bc>
1101e4aa:	6018      	addu      	r0, r6
1101e4ac:	6580      	cmphs      	r0, r6
1101e4ae:	0c05      	bf      	0x1101e4b8	// 1101e4b8 <__umoddi3+0x1bc>
1101e4b0:	6480      	cmphs      	r0, r2
1101e4b2:	5878      	addu      	r3, r0, r6
1101e4b4:	c4030c20 	incf      	r0, r3, 0
1101e4b8:	600a      	subu      	r0, r2
1101e4ba:	0785      	br      	0x1101e3c4	// 1101e3c4 <__umoddi3+0xc8>
1101e4bc:	6c13      	mov      	r0, r4
1101e4be:	6c57      	mov      	r1, r5
1101e4c0:	1407      	addi      	r14, r14, 28
1101e4c2:	1494      	pop      	r4-r7, r15
1101e4c4:	eb0300ff 	cmphsi      	r3, 256
1101e4c8:	c4000503 	mvc      	r3
1101e4cc:	4363      	lsli      	r3, r3, 3
1101e4ce:	078c      	br      	0x1101e3e6	// 1101e3e6 <__umoddi3+0xea>
1101e4d0:	eb0100ff 	cmphsi      	r1, 256
1101e4d4:	3008      	movi      	r0, 8
1101e4d6:	c4e00c40 	inct      	r7, r0, 0
1101e4da:	0729      	br      	0x1101e32c	// 1101e32c <__umoddi3+0x30>
1101e4dc:	eb0600ff 	cmphsi      	r6, 256
1101e4e0:	3208      	movi      	r2, 8
1101e4e2:	c4e20c40 	inct      	r7, r2, 0
1101e4e6:	07a8      	br      	0x1101e436	// 1101e436 <__umoddi3+0x13a>
1101e4e8:	98c0      	ld.w      	r6, (r14, 0x0)
1101e4ea:	c4c14043 	lsr      	r3, r1, r6
1101e4ee:	701c      	lsl      	r0, r7
1101e4f0:	6cc0      	or      	r3, r0
1101e4f2:	6c8f      	mov      	r2, r3
1101e4f4:	c4e14023 	lsl      	r3, r1, r7
1101e4f8:	c4e44021 	lsl      	r1, r4, r7
1101e4fc:	b864      	st.w      	r3, (r14, 0x10)
1101e4fe:	6cdb      	mov      	r3, r6
1101e500:	c4644043 	lsr      	r3, r4, r3
1101e504:	c4c54046 	lsr      	r6, r5, r6
1101e508:	4a90      	lsri      	r4, r2, 16
1101e50a:	715c      	lsl      	r5, r7
1101e50c:	b825      	st.w      	r1, (r14, 0x14)
1101e50e:	6c1b      	mov      	r0, r6
1101e510:	6c53      	mov      	r1, r4
1101e512:	6cd4      	or      	r3, r5
1101e514:	b843      	st.w      	r2, (r14, 0xc)
1101e516:	7489      	zexth      	r2, r2
1101e518:	b861      	st.w      	r3, (r14, 0x4)
1101e51a:	b842      	st.w      	r2, (r14, 0x8)
1101e51c:	e3ffeabe 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101e520:	6d43      	mov      	r5, r0
1101e522:	6c53      	mov      	r1, r4
1101e524:	6c1b      	mov      	r0, r6
1101e526:	e3ffea6b 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101e52a:	9842      	ld.w      	r2, (r14, 0x8)
1101e52c:	c4028423 	mult      	r3, r2, r0
1101e530:	6d83      	mov      	r6, r0
1101e532:	9801      	ld.w      	r0, (r14, 0x4)
1101e534:	4550      	lsli      	r2, r5, 16
1101e536:	48b0      	lsri      	r5, r0, 16
1101e538:	6d48      	or      	r5, r2
1101e53a:	64d4      	cmphs      	r5, r3
1101e53c:	0807      	bt      	0x1101e54a	// 1101e54a <__umoddi3+0x24e>
1101e53e:	9823      	ld.w      	r1, (r14, 0xc)
1101e540:	6144      	addu      	r5, r1
1101e542:	6454      	cmphs      	r5, r1
1101e544:	5e43      	subi      	r2, r6, 1
1101e546:	0898      	bt      	0x1101e676	// 1101e676 <__umoddi3+0x37a>
1101e548:	6d8b      	mov      	r6, r2
1101e54a:	614e      	subu      	r5, r3
1101e54c:	6c53      	mov      	r1, r4
1101e54e:	6c17      	mov      	r0, r5
1101e550:	e3ffeaa4 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101e554:	6c53      	mov      	r1, r4
1101e556:	b806      	st.w      	r0, (r14, 0x18)
1101e558:	6c17      	mov      	r0, r5
1101e55a:	e3ffea51 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101e55e:	9866      	ld.w      	r3, (r14, 0x18)
1101e560:	d84e1002 	ld.h      	r2, (r14, 0x4)
1101e564:	9882      	ld.w      	r4, (r14, 0x8)
1101e566:	4370      	lsli      	r3, r3, 16
1101e568:	7549      	zexth      	r5, r2
1101e56a:	7d00      	mult      	r4, r0
1101e56c:	6cd4      	or      	r3, r5
1101e56e:	650c      	cmphs      	r3, r4
1101e570:	0807      	bt      	0x1101e57e	// 1101e57e <__umoddi3+0x282>
1101e572:	9823      	ld.w      	r1, (r14, 0xc)
1101e574:	60c4      	addu      	r3, r1
1101e576:	644c      	cmphs      	r3, r1
1101e578:	5843      	subi      	r2, r0, 1
1101e57a:	0879      	bt      	0x1101e66c	// 1101e66c <__umoddi3+0x370>
1101e57c:	6c0b      	mov      	r0, r2
1101e57e:	4650      	lsli      	r2, r6, 16
1101e580:	6c80      	or      	r2, r0
1101e582:	60d2      	subu      	r3, r4
1101e584:	9884      	ld.w      	r4, (r14, 0x10)
1101e586:	7449      	zexth      	r1, r2
1101e588:	7411      	zexth      	r0, r4
1101e58a:	4a50      	lsri      	r2, r2, 16
1101e58c:	4cb0      	lsri      	r5, r4, 16
1101e58e:	c4018424 	mult      	r4, r1, r0
1101e592:	7c08      	mult      	r0, r2
1101e594:	7c54      	mult      	r1, r5
1101e596:	7c94      	mult      	r2, r5
1101e598:	6040      	addu      	r1, r0
1101e59a:	4cb0      	lsri      	r5, r4, 16
1101e59c:	6054      	addu      	r1, r5
1101e59e:	6404      	cmphs      	r1, r0
1101e5a0:	0804      	bt      	0x1101e5a8	// 1101e5a8 <__umoddi3+0x2ac>
1101e5a2:	ea200001 	movih      	r0, 1
1101e5a6:	6080      	addu      	r2, r0
1101e5a8:	4910      	lsri      	r0, r1, 16
1101e5aa:	6080      	addu      	r2, r0
1101e5ac:	648c      	cmphs      	r3, r2
1101e5ae:	4130      	lsli      	r1, r1, 16
1101e5b0:	7511      	zexth      	r4, r4
1101e5b2:	6104      	addu      	r4, r1
1101e5b4:	0c53      	bf      	0x1101e65a	// 1101e65a <__umoddi3+0x35e>
1101e5b6:	648e      	cmpne      	r3, r2
1101e5b8:	0c6b      	bf      	0x1101e68e	// 1101e68e <__umoddi3+0x392>
1101e5ba:	6d93      	mov      	r6, r4
1101e5bc:	60ca      	subu      	r3, r2
1101e5be:	9845      	ld.w      	r2, (r14, 0x14)
1101e5c0:	5ad9      	subu      	r6, r2, r6
1101e5c2:	6588      	cmphs      	r2, r6
1101e5c4:	6483      	mvcv      	r2
1101e5c6:	60ca      	subu      	r3, r2
1101e5c8:	9840      	ld.w      	r2, (r14, 0x0)
1101e5ca:	c4434024 	lsl      	r4, r3, r2
1101e5ce:	c4e64040 	lsr      	r0, r6, r7
1101e5d2:	6c10      	or      	r0, r4
1101e5d4:	c4e34041 	lsr      	r1, r3, r7
1101e5d8:	1407      	addi      	r14, r14, 28
1101e5da:	1494      	pop      	r4-r7, r15
1101e5dc:	9861      	ld.w      	r3, (r14, 0x4)
1101e5de:	718c      	lsl      	r6, r3
1101e5e0:	c4454047 	lsr      	r7, r5, r2
1101e5e4:	714c      	lsl      	r5, r3
1101e5e6:	c4444042 	lsr      	r2, r4, r2
1101e5ea:	c4644023 	lsl      	r3, r4, r3
1101e5ee:	4e90      	lsri      	r4, r6, 16
1101e5f0:	b860      	st.w      	r3, (r14, 0x0)
1101e5f2:	6c53      	mov      	r1, r4
1101e5f4:	74d9      	zexth      	r3, r6
1101e5f6:	6c1f      	mov      	r0, r7
1101e5f8:	6c94      	or      	r2, r5
1101e5fa:	b843      	st.w      	r2, (r14, 0xc)
1101e5fc:	b862      	st.w      	r3, (r14, 0x8)
1101e5fe:	e3ffea4d 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101e602:	6d43      	mov      	r5, r0
1101e604:	6c53      	mov      	r1, r4
1101e606:	6c1f      	mov      	r0, r7
1101e608:	45f0      	lsli      	r7, r5, 16
1101e60a:	e3ffe9f9 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101e60e:	9843      	ld.w      	r2, (r14, 0xc)
1101e610:	74d9      	zexth      	r3, r6
1101e612:	4ab0      	lsri      	r5, r2, 16
1101e614:	7c0c      	mult      	r0, r3
1101e616:	6dd4      	or      	r7, r5
1101e618:	641c      	cmphs      	r7, r0
1101e61a:	0804      	bt      	0x1101e622	// 1101e622 <__umoddi3+0x326>
1101e61c:	61d8      	addu      	r7, r6
1101e61e:	659c      	cmphs      	r7, r6
1101e620:	0830      	bt      	0x1101e680	// 1101e680 <__umoddi3+0x384>
1101e622:	61c2      	subu      	r7, r0
1101e624:	6c53      	mov      	r1, r4
1101e626:	6c1f      	mov      	r0, r7
1101e628:	e3ffea38 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
1101e62c:	6d43      	mov      	r5, r0
1101e62e:	6c53      	mov      	r1, r4
1101e630:	6c1f      	mov      	r0, r7
1101e632:	45b0      	lsli      	r5, r5, 16
1101e634:	e3ffe9e4 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1101e638:	74d9      	zexth      	r3, r6
1101e63a:	7c0c      	mult      	r0, r3
1101e63c:	d86e1006 	ld.h      	r3, (r14, 0xc)
1101e640:	748d      	zexth      	r2, r3
1101e642:	6d48      	or      	r5, r2
1101e644:	6414      	cmphs      	r5, r0
1101e646:	0808      	bt      	0x1101e656	// 1101e656 <__umoddi3+0x35a>
1101e648:	6158      	addu      	r5, r6
1101e64a:	6594      	cmphs      	r5, r6
1101e64c:	0c05      	bf      	0x1101e656	// 1101e656 <__umoddi3+0x35a>
1101e64e:	6414      	cmphs      	r5, r0
1101e650:	5d58      	addu      	r2, r5, r6
1101e652:	c4a20c20 	incf      	r5, r2, 0
1101e656:	6142      	subu      	r5, r0
1101e658:	06fe      	br      	0x1101e454	// 1101e454 <__umoddi3+0x158>
1101e65a:	9824      	ld.w      	r1, (r14, 0x10)
1101e65c:	5cc5      	subu      	r6, r4, r1
1101e65e:	6590      	cmphs      	r4, r6
1101e660:	9823      	ld.w      	r1, (r14, 0xc)
1101e662:	6086      	subu      	r2, r1
1101e664:	6443      	mvcv      	r1
1101e666:	6086      	subu      	r2, r1
1101e668:	60ca      	subu      	r3, r2
1101e66a:	07aa      	br      	0x1101e5be	// 1101e5be <__umoddi3+0x2c2>
1101e66c:	650c      	cmphs      	r3, r4
1101e66e:	0b87      	bt      	0x1101e57c	// 1101e57c <__umoddi3+0x280>
1101e670:	2801      	subi      	r0, 2
1101e672:	60c4      	addu      	r3, r1
1101e674:	0785      	br      	0x1101e57e	// 1101e57e <__umoddi3+0x282>
1101e676:	64d4      	cmphs      	r5, r3
1101e678:	0b68      	bt      	0x1101e548	// 1101e548 <__umoddi3+0x24c>
1101e67a:	2e01      	subi      	r6, 2
1101e67c:	6144      	addu      	r5, r1
1101e67e:	0766      	br      	0x1101e54a	// 1101e54a <__umoddi3+0x24e>
1101e680:	641c      	cmphs      	r7, r0
1101e682:	5f58      	addu      	r2, r7, r6
1101e684:	c4e20c20 	incf      	r7, r2, 0
1101e688:	07cd      	br      	0x1101e622	// 1101e622 <__umoddi3+0x326>
1101e68a:	6d93      	mov      	r6, r4
1101e68c:	06c1      	br      	0x1101e40e	// 1101e40e <__umoddi3+0x112>
1101e68e:	9825      	ld.w      	r1, (r14, 0x14)
1101e690:	6504      	cmphs      	r1, r4
1101e692:	0fe4      	bf      	0x1101e65a	// 1101e65a <__umoddi3+0x35e>
1101e694:	6d93      	mov      	r6, r4
1101e696:	3300      	movi      	r3, 0
1101e698:	0793      	br      	0x1101e5be	// 1101e5be <__umoddi3+0x2c2>
1101e69a:	0000      	bkpt
1101e69c:	110110e4 	.long	0x110110e4

1101e6a0 <_fpadd_parts>:
1101e6a0:	14c4      	push      	r4-r7
1101e6a2:	1429      	subi      	r14, r14, 36
1101e6a4:	9060      	ld.w      	r3, (r0, 0x0)
1101e6a6:	3b01      	cmphsi      	r3, 2
1101e6a8:	0c6b      	bf      	0x1101e77e	// 1101e77e <_fpadd_parts+0xde>
1101e6aa:	9180      	ld.w      	r4, (r1, 0x0)
1101e6ac:	3c01      	cmphsi      	r4, 2
1101e6ae:	0c6a      	bf      	0x1101e782	// 1101e782 <_fpadd_parts+0xe2>
1101e6b0:	3b44      	cmpnei      	r3, 4
1101e6b2:	0cfb      	bf      	0x1101e8a8	// 1101e8a8 <_fpadd_parts+0x208>
1101e6b4:	3c44      	cmpnei      	r4, 4
1101e6b6:	0c66      	bf      	0x1101e782	// 1101e782 <_fpadd_parts+0xe2>
1101e6b8:	3c42      	cmpnei      	r4, 2
1101e6ba:	0cd4      	bf      	0x1101e862	// 1101e862 <_fpadd_parts+0x1c2>
1101e6bc:	3b42      	cmpnei      	r3, 2
1101e6be:	0c62      	bf      	0x1101e782	// 1101e782 <_fpadd_parts+0xe2>
1101e6c0:	90c3      	ld.w      	r6, (r0, 0xc)
1101e6c2:	90e4      	ld.w      	r7, (r0, 0x10)
1101e6c4:	9062      	ld.w      	r3, (r0, 0x8)
1101e6c6:	91a2      	ld.w      	r5, (r1, 0x8)
1101e6c8:	b8c5      	st.w      	r6, (r14, 0x14)
1101e6ca:	b8e6      	st.w      	r7, (r14, 0x18)
1101e6cc:	5b95      	subu      	r4, r3, r5
1101e6ce:	91c3      	ld.w      	r6, (r1, 0xc)
1101e6d0:	91e4      	ld.w      	r7, (r1, 0x10)
1101e6d2:	3cdf      	btsti      	r4, 31
1101e6d4:	b864      	st.w      	r3, (r14, 0x10)
1101e6d6:	b8c0      	st.w      	r6, (r14, 0x0)
1101e6d8:	b8e1      	st.w      	r7, (r14, 0x4)
1101e6da:	6cd3      	mov      	r3, r4
1101e6dc:	08ef      	bt      	0x1101e8ba	// 1101e8ba <_fpadd_parts+0x21a>
1101e6de:	eb23003f 	cmplti      	r3, 64
1101e6e2:	0853      	bt      	0x1101e788	// 1101e788 <_fpadd_parts+0xe8>
1101e6e4:	9864      	ld.w      	r3, (r14, 0x10)
1101e6e6:	64d5      	cmplt      	r5, r3
1101e6e8:	0cda      	bf      	0x1101e89c	// 1101e89c <_fpadd_parts+0x1fc>
1101e6ea:	3300      	movi      	r3, 0
1101e6ec:	3400      	movi      	r4, 0
1101e6ee:	b860      	st.w      	r3, (r14, 0x0)
1101e6f0:	b881      	st.w      	r4, (r14, 0x4)
1101e6f2:	9061      	ld.w      	r3, (r0, 0x4)
1101e6f4:	9121      	ld.w      	r1, (r1, 0x4)
1101e6f6:	644e      	cmpne      	r3, r1
1101e6f8:	0c8f      	bf      	0x1101e816	// 1101e816 <_fpadd_parts+0x176>
1101e6fa:	3b40      	cmpnei      	r3, 0
1101e6fc:	9885      	ld.w      	r4, (r14, 0x14)
1101e6fe:	98a6      	ld.w      	r5, (r14, 0x18)
1101e700:	9800      	ld.w      	r0, (r14, 0x0)
1101e702:	9821      	ld.w      	r1, (r14, 0x4)
1101e704:	0cc4      	bf      	0x1101e88c	// 1101e88c <_fpadd_parts+0x1ec>
1101e706:	6400      	cmphs      	r0, r0
1101e708:	6013      	subc      	r0, r4
1101e70a:	6057      	subc      	r1, r5
1101e70c:	6d03      	mov      	r4, r0
1101e70e:	6d47      	mov      	r5, r1
1101e710:	3ddf      	btsti      	r5, 31
1101e712:	08d7      	bt      	0x1101e8c0	// 1101e8c0 <_fpadd_parts+0x220>
1101e714:	3300      	movi      	r3, 0
1101e716:	b283      	st.w      	r4, (r2, 0xc)
1101e718:	b2a4      	st.w      	r5, (r2, 0x10)
1101e71a:	b261      	st.w      	r3, (r2, 0x4)
1101e71c:	9864      	ld.w      	r3, (r14, 0x10)
1101e71e:	b262      	st.w      	r3, (r2, 0x8)
1101e720:	6c13      	mov      	r0, r4
1101e722:	6c57      	mov      	r1, r5
1101e724:	3840      	cmpnei      	r0, 0
1101e726:	c4210c81 	decf      	r1, r1, 1
1101e72a:	2800      	subi      	r0, 1
1101e72c:	c7605023 	bmaski      	r3, 28
1101e730:	644c      	cmphs      	r3, r1
1101e732:	0c80      	bf      	0x1101e832	// 1101e832 <_fpadd_parts+0x192>
1101e734:	64c6      	cmpne      	r1, r3
1101e736:	0d1c      	bf      	0x1101e96e	// 1101e96e <_fpadd_parts+0x2ce>
1101e738:	3100      	movi      	r1, 0
1101e73a:	2901      	subi      	r1, 2
1101e73c:	9262      	ld.w      	r3, (r2, 0x8)
1101e73e:	c7605026 	bmaski      	r6, 28
1101e742:	2b00      	subi      	r3, 1
1101e744:	b822      	st.w      	r1, (r14, 0x8)
1101e746:	b840      	st.w      	r2, (r14, 0x0)
1101e748:	0403      	br      	0x1101e74e	// 1101e74e <_fpadd_parts+0xae>
1101e74a:	6586      	cmpne      	r1, r6
1101e74c:	0c9c      	bf      	0x1101e884	// 1101e884 <_fpadd_parts+0x1e4>
1101e74e:	4c1f      	lsri      	r0, r4, 31
1101e750:	4521      	lsli      	r1, r5, 1
1101e752:	44e1      	lsli      	r7, r4, 1
1101e754:	c4202425 	or      	r5, r0, r1
1101e758:	6d1f      	mov      	r4, r7
1101e75a:	3000      	movi      	r0, 0
1101e75c:	3100      	movi      	r1, 0
1101e75e:	2800      	subi      	r0, 1
1101e760:	2900      	subi      	r1, 1
1101e762:	6401      	cmplt      	r0, r0
1101e764:	6011      	addc      	r0, r4
1101e766:	6055      	addc      	r1, r5
1101e768:	6dcf      	mov      	r7, r3
1101e76a:	6458      	cmphs      	r6, r1
1101e76c:	2b00      	subi      	r3, 1
1101e76e:	0bee      	bt      	0x1101e74a	// 1101e74a <_fpadd_parts+0xaa>
1101e770:	9840      	ld.w      	r2, (r14, 0x0)
1101e772:	3303      	movi      	r3, 3
1101e774:	b283      	st.w      	r4, (r2, 0xc)
1101e776:	b2a4      	st.w      	r5, (r2, 0x10)
1101e778:	b2e2      	st.w      	r7, (r2, 0x8)
1101e77a:	b260      	st.w      	r3, (r2, 0x0)
1101e77c:	6c0b      	mov      	r0, r2
1101e77e:	1409      	addi      	r14, r14, 36
1101e780:	1484      	pop      	r4-r7
1101e782:	6c07      	mov      	r0, r1
1101e784:	1409      	addi      	r14, r14, 36
1101e786:	1484      	pop      	r4-r7
1101e788:	3c20      	cmplti      	r4, 1
1101e78a:	08a9      	bt      	0x1101e8dc	// 1101e8dc <_fpadd_parts+0x23c>
1101e78c:	98a1      	ld.w      	r5, (r14, 0x4)
1101e78e:	e483101f 	subi      	r4, r3, 32
1101e792:	6dd3      	mov      	r7, r4
1101e794:	7151      	lsr      	r5, r4
1101e796:	9881      	ld.w      	r4, (r14, 0x4)
1101e798:	4481      	lsli      	r4, r4, 1
1101e79a:	b8a7      	st.w      	r5, (r14, 0x1c)
1101e79c:	351f      	movi      	r5, 31
1101e79e:	614e      	subu      	r5, r3
1101e7a0:	7114      	lsl      	r4, r5
1101e7a2:	98a0      	ld.w      	r5, (r14, 0x0)
1101e7a4:	c4654046 	lsr      	r6, r5, r3
1101e7a8:	6d90      	or      	r6, r4
1101e7aa:	9881      	ld.w      	r4, (r14, 0x4)
1101e7ac:	b8c2      	st.w      	r6, (r14, 0x8)
1101e7ae:	c4644046 	lsr      	r6, r4, r3
1101e7b2:	3fdf      	btsti      	r7, 31
1101e7b4:	b8c3      	st.w      	r6, (r14, 0xc)
1101e7b6:	98a7      	ld.w      	r5, (r14, 0x1c)
1101e7b8:	98c2      	ld.w      	r6, (r14, 0x8)
1101e7ba:	c4a60c40 	inct      	r5, r6, 0
1101e7be:	b8a2      	st.w      	r5, (r14, 0x8)
1101e7c0:	3600      	movi      	r6, 0
1101e7c2:	98a3      	ld.w      	r5, (r14, 0xc)
1101e7c4:	c4a60c20 	incf      	r5, r6, 0
1101e7c8:	b8a3      	st.w      	r5, (r14, 0xc)
1101e7ca:	3501      	movi      	r5, 1
1101e7cc:	c4e54024 	lsl      	r4, r5, r7
1101e7d0:	3701      	movi      	r7, 1
1101e7d2:	6d93      	mov      	r6, r4
1101e7d4:	3500      	movi      	r5, 0
1101e7d6:	c4674024 	lsl      	r4, r7, r3
1101e7da:	3300      	movi      	r3, 0
1101e7dc:	c4a60c20 	incf      	r5, r6, 0
1101e7e0:	c4830c20 	incf      	r4, r3, 0
1101e7e4:	3c40      	cmpnei      	r4, 0
1101e7e6:	c4a50c81 	decf      	r5, r5, 1
1101e7ea:	2c00      	subi      	r4, 1
1101e7ec:	98c0      	ld.w      	r6, (r14, 0x0)
1101e7ee:	98e1      	ld.w      	r7, (r14, 0x4)
1101e7f0:	6990      	and      	r6, r4
1101e7f2:	69d4      	and      	r7, r5
1101e7f4:	6d1b      	mov      	r4, r6
1101e7f6:	6d5f      	mov      	r5, r7
1101e7f8:	6d14      	or      	r4, r5
1101e7fa:	3700      	movi      	r7, 0
1101e7fc:	3c40      	cmpnei      	r4, 0
1101e7fe:	c4000506 	mvc      	r6
1101e802:	9862      	ld.w      	r3, (r14, 0x8)
1101e804:	9883      	ld.w      	r4, (r14, 0xc)
1101e806:	6cd8      	or      	r3, r6
1101e808:	6d1c      	or      	r4, r7
1101e80a:	b860      	st.w      	r3, (r14, 0x0)
1101e80c:	b881      	st.w      	r4, (r14, 0x4)
1101e80e:	9121      	ld.w      	r1, (r1, 0x4)
1101e810:	9061      	ld.w      	r3, (r0, 0x4)
1101e812:	644e      	cmpne      	r3, r1
1101e814:	0b73      	bt      	0x1101e6fa	// 1101e6fa <_fpadd_parts+0x5a>
1101e816:	9885      	ld.w      	r4, (r14, 0x14)
1101e818:	98a6      	ld.w      	r5, (r14, 0x18)
1101e81a:	b261      	st.w      	r3, (r2, 0x4)
1101e81c:	9800      	ld.w      	r0, (r14, 0x0)
1101e81e:	9821      	ld.w      	r1, (r14, 0x4)
1101e820:	9864      	ld.w      	r3, (r14, 0x10)
1101e822:	6401      	cmplt      	r0, r0
1101e824:	6011      	addc      	r0, r4
1101e826:	6055      	addc      	r1, r5
1101e828:	b262      	st.w      	r3, (r2, 0x8)
1101e82a:	6d03      	mov      	r4, r0
1101e82c:	6d47      	mov      	r5, r1
1101e82e:	b203      	st.w      	r0, (r2, 0xc)
1101e830:	b224      	st.w      	r1, (r2, 0x10)
1101e832:	3303      	movi      	r3, 3
1101e834:	b260      	st.w      	r3, (r2, 0x0)
1101e836:	c7805023 	bmaski      	r3, 29
1101e83a:	654c      	cmphs      	r3, r5
1101e83c:	0810      	bt      	0x1101e85c	// 1101e85c <_fpadd_parts+0x1bc>
1101e83e:	457f      	lsli      	r3, r5, 31
1101e840:	4cc1      	lsri      	r6, r4, 1
1101e842:	3001      	movi      	r0, 1
1101e844:	3100      	movi      	r1, 0
1101e846:	6d8c      	or      	r6, r3
1101e848:	4de1      	lsri      	r7, r5, 1
1101e84a:	6900      	and      	r4, r0
1101e84c:	6944      	and      	r5, r1
1101e84e:	9262      	ld.w      	r3, (r2, 0x8)
1101e850:	6d18      	or      	r4, r6
1101e852:	6d5c      	or      	r5, r7
1101e854:	2300      	addi      	r3, 1
1101e856:	b283      	st.w      	r4, (r2, 0xc)
1101e858:	b2a4      	st.w      	r5, (r2, 0x10)
1101e85a:	b262      	st.w      	r3, (r2, 0x8)
1101e85c:	6c0b      	mov      	r0, r2
1101e85e:	1409      	addi      	r14, r14, 36
1101e860:	1484      	pop      	r4-r7
1101e862:	3b42      	cmpnei      	r3, 2
1101e864:	0b8d      	bt      	0x1101e77e	// 1101e77e <_fpadd_parts+0xde>
1101e866:	b260      	st.w      	r3, (r2, 0x0)
1101e868:	9061      	ld.w      	r3, (r0, 0x4)
1101e86a:	b261      	st.w      	r3, (r2, 0x4)
1101e86c:	9062      	ld.w      	r3, (r0, 0x8)
1101e86e:	9121      	ld.w      	r1, (r1, 0x4)
1101e870:	b262      	st.w      	r3, (r2, 0x8)
1101e872:	9063      	ld.w      	r3, (r0, 0xc)
1101e874:	b263      	st.w      	r3, (r2, 0xc)
1101e876:	9064      	ld.w      	r3, (r0, 0x10)
1101e878:	b264      	st.w      	r3, (r2, 0x10)
1101e87a:	9061      	ld.w      	r3, (r0, 0x4)
1101e87c:	68c4      	and      	r3, r1
1101e87e:	b261      	st.w      	r3, (r2, 0x4)
1101e880:	6c0b      	mov      	r0, r2
1101e882:	077e      	br      	0x1101e77e	// 1101e77e <_fpadd_parts+0xde>
1101e884:	9842      	ld.w      	r2, (r14, 0x8)
1101e886:	6408      	cmphs      	r2, r0
1101e888:	0b63      	bt      	0x1101e74e	// 1101e74e <_fpadd_parts+0xae>
1101e88a:	0773      	br      	0x1101e770	// 1101e770 <_fpadd_parts+0xd0>
1101e88c:	6400      	cmphs      	r0, r0
1101e88e:	c4040100 	subc      	r0, r4, r0
1101e892:	c4250101 	subc      	r1, r5, r1
1101e896:	6d03      	mov      	r4, r0
1101e898:	6d47      	mov      	r5, r1
1101e89a:	073b      	br      	0x1101e710	// 1101e710 <_fpadd_parts+0x70>
1101e89c:	3300      	movi      	r3, 0
1101e89e:	3400      	movi      	r4, 0
1101e8a0:	b8a4      	st.w      	r5, (r14, 0x10)
1101e8a2:	b865      	st.w      	r3, (r14, 0x14)
1101e8a4:	b886      	st.w      	r4, (r14, 0x18)
1101e8a6:	0726      	br      	0x1101e6f2	// 1101e6f2 <_fpadd_parts+0x52>
1101e8a8:	3c44      	cmpnei      	r4, 4
1101e8aa:	0b6a      	bt      	0x1101e77e	// 1101e77e <_fpadd_parts+0xde>
1101e8ac:	9041      	ld.w      	r2, (r0, 0x4)
1101e8ae:	9161      	ld.w      	r3, (r1, 0x4)
1101e8b0:	64ca      	cmpne      	r2, r3
1101e8b2:	1152      	lrw      	r2, 0x110110d0	// 1101e978 <_fpadd_parts+0x2d8>
1101e8b4:	c4020c40 	inct      	r0, r2, 0
1101e8b8:	0763      	br      	0x1101e77e	// 1101e77e <_fpadd_parts+0xde>
1101e8ba:	3300      	movi      	r3, 0
1101e8bc:	60d2      	subu      	r3, r4
1101e8be:	0710      	br      	0x1101e6de	// 1101e6de <_fpadd_parts+0x3e>
1101e8c0:	3301      	movi      	r3, 1
1101e8c2:	3000      	movi      	r0, 0
1101e8c4:	b261      	st.w      	r3, (r2, 0x4)
1101e8c6:	3100      	movi      	r1, 0
1101e8c8:	9864      	ld.w      	r3, (r14, 0x10)
1101e8ca:	6510      	cmphs      	r4, r4
1101e8cc:	c4800104 	subc      	r4, r0, r4
1101e8d0:	c4a10105 	subc      	r5, r1, r5
1101e8d4:	b262      	st.w      	r3, (r2, 0x8)
1101e8d6:	b283      	st.w      	r4, (r2, 0xc)
1101e8d8:	b2a4      	st.w      	r5, (r2, 0x10)
1101e8da:	0723      	br      	0x1101e720	// 1101e720 <_fpadd_parts+0x80>
1101e8dc:	3c40      	cmpnei      	r4, 0
1101e8de:	0f0a      	bf      	0x1101e6f2	// 1101e6f2 <_fpadd_parts+0x52>
1101e8e0:	98c5      	ld.w      	r6, (r14, 0x14)
1101e8e2:	98e6      	ld.w      	r7, (r14, 0x18)
1101e8e4:	9884      	ld.w      	r4, (r14, 0x10)
1101e8e6:	6d5f      	mov      	r5, r7
1101e8e8:	610c      	addu      	r4, r3
1101e8ea:	b884      	st.w      	r4, (r14, 0x10)
1101e8ec:	e483101f 	subi      	r4, r3, 32
1101e8f0:	7151      	lsr      	r5, r4
1101e8f2:	b887      	st.w      	r4, (r14, 0x1c)
1101e8f4:	4781      	lsli      	r4, r7, 1
1101e8f6:	98c5      	ld.w      	r6, (r14, 0x14)
1101e8f8:	98e6      	ld.w      	r7, (r14, 0x18)
1101e8fa:	b8a8      	st.w      	r5, (r14, 0x20)
1101e8fc:	351f      	movi      	r5, 31
1101e8fe:	614e      	subu      	r5, r3
1101e900:	7114      	lsl      	r4, r5
1101e902:	6d5b      	mov      	r5, r6
1101e904:	714d      	lsr      	r5, r3
1101e906:	6d50      	or      	r5, r4
1101e908:	b8a2      	st.w      	r5, (r14, 0x8)
1101e90a:	9887      	ld.w      	r4, (r14, 0x1c)
1101e90c:	6d5f      	mov      	r5, r7
1101e90e:	714d      	lsr      	r5, r3
1101e910:	3cdf      	btsti      	r4, 31
1101e912:	b8a3      	st.w      	r5, (r14, 0xc)
1101e914:	98e2      	ld.w      	r7, (r14, 0x8)
1101e916:	98a8      	ld.w      	r5, (r14, 0x20)
1101e918:	c4a70c40 	inct      	r5, r7, 0
1101e91c:	b8a2      	st.w      	r5, (r14, 0x8)
1101e91e:	3700      	movi      	r7, 0
1101e920:	98a3      	ld.w      	r5, (r14, 0xc)
1101e922:	c4a70c20 	incf      	r5, r7, 0
1101e926:	b8a3      	st.w      	r5, (r14, 0xc)
1101e928:	3501      	movi      	r5, 1
1101e92a:	c4854024 	lsl      	r4, r5, r4
1101e92e:	3601      	movi      	r6, 1
1101e930:	6dd3      	mov      	r7, r4
1101e932:	3500      	movi      	r5, 0
1101e934:	c4664024 	lsl      	r4, r6, r3
1101e938:	3300      	movi      	r3, 0
1101e93a:	c4a70c20 	incf      	r5, r7, 0
1101e93e:	c4830c20 	incf      	r4, r3, 0
1101e942:	3c40      	cmpnei      	r4, 0
1101e944:	c4a50c81 	decf      	r5, r5, 1
1101e948:	2c00      	subi      	r4, 1
1101e94a:	98c5      	ld.w      	r6, (r14, 0x14)
1101e94c:	98e6      	ld.w      	r7, (r14, 0x18)
1101e94e:	6990      	and      	r6, r4
1101e950:	69d4      	and      	r7, r5
1101e952:	6d1b      	mov      	r4, r6
1101e954:	6d5f      	mov      	r5, r7
1101e956:	6d14      	or      	r4, r5
1101e958:	98c2      	ld.w      	r6, (r14, 0x8)
1101e95a:	98e3      	ld.w      	r7, (r14, 0xc)
1101e95c:	3c40      	cmpnei      	r4, 0
1101e95e:	c4000504 	mvc      	r4
1101e962:	3500      	movi      	r5, 0
1101e964:	6d90      	or      	r6, r4
1101e966:	6dd4      	or      	r7, r5
1101e968:	b8c5      	st.w      	r6, (r14, 0x14)
1101e96a:	b8e6      	st.w      	r7, (r14, 0x18)
1101e96c:	06c3      	br      	0x1101e6f2	// 1101e6f2 <_fpadd_parts+0x52>
1101e96e:	3300      	movi      	r3, 0
1101e970:	2b01      	subi      	r3, 2
1101e972:	640c      	cmphs      	r3, r0
1101e974:	0ae2      	bt      	0x1101e738	// 1101e738 <_fpadd_parts+0x98>
1101e976:	075e      	br      	0x1101e832	// 1101e832 <_fpadd_parts+0x192>
1101e978:	110110d0 	.long	0x110110d0

1101e97c <__adddf3>:
1101e97c:	14d0      	push      	r15
1101e97e:	1433      	subi      	r14, r14, 76
1101e980:	b800      	st.w      	r0, (r14, 0x0)
1101e982:	6c3b      	mov      	r0, r14
1101e984:	b863      	st.w      	r3, (r14, 0xc)
1101e986:	b842      	st.w      	r2, (r14, 0x8)
1101e988:	b821      	st.w      	r1, (r14, 0x4)
1101e98a:	1904      	addi      	r1, r14, 16
1101e98c:	e3fff13a 	bsr      	0x1101cc00	// 1101cc00 <__unpack_d>
1101e990:	1909      	addi      	r1, r14, 36
1101e992:	1802      	addi      	r0, r14, 8
1101e994:	e3fff136 	bsr      	0x1101cc00	// 1101cc00 <__unpack_d>
1101e998:	1a0e      	addi      	r2, r14, 56
1101e99a:	1909      	addi      	r1, r14, 36
1101e99c:	1804      	addi      	r0, r14, 16
1101e99e:	e3fffe81 	bsr      	0x1101e6a0	// 1101e6a0 <_fpadd_parts>
1101e9a2:	e3fff063 	bsr      	0x1101ca68	// 1101ca68 <__pack_d>
1101e9a6:	1413      	addi      	r14, r14, 76
1101e9a8:	1490      	pop      	r15
	...

1101e9ac <__subdf3>:
1101e9ac:	14d0      	push      	r15
1101e9ae:	1433      	subi      	r14, r14, 76
1101e9b0:	b800      	st.w      	r0, (r14, 0x0)
1101e9b2:	6c3b      	mov      	r0, r14
1101e9b4:	b842      	st.w      	r2, (r14, 0x8)
1101e9b6:	b863      	st.w      	r3, (r14, 0xc)
1101e9b8:	b821      	st.w      	r1, (r14, 0x4)
1101e9ba:	1904      	addi      	r1, r14, 16
1101e9bc:	e3fff122 	bsr      	0x1101cc00	// 1101cc00 <__unpack_d>
1101e9c0:	1909      	addi      	r1, r14, 36
1101e9c2:	1802      	addi      	r0, r14, 8
1101e9c4:	e3fff11e 	bsr      	0x1101cc00	// 1101cc00 <__unpack_d>
1101e9c8:	986a      	ld.w      	r3, (r14, 0x28)
1101e9ca:	e4634001 	xori      	r3, r3, 1
1101e9ce:	b86a      	st.w      	r3, (r14, 0x28)
1101e9d0:	1a0e      	addi      	r2, r14, 56
1101e9d2:	1909      	addi      	r1, r14, 36
1101e9d4:	1804      	addi      	r0, r14, 16
1101e9d6:	e3fffe65 	bsr      	0x1101e6a0	// 1101e6a0 <_fpadd_parts>
1101e9da:	e3fff047 	bsr      	0x1101ca68	// 1101ca68 <__pack_d>
1101e9de:	1413      	addi      	r14, r14, 76
1101e9e0:	1490      	pop      	r15
	...

1101e9e4 <__divdf3>:
1101e9e4:	14d4      	push      	r4-r7, r15
1101e9e6:	1432      	subi      	r14, r14, 72
1101e9e8:	b867      	st.w      	r3, (r14, 0x1c)
1101e9ea:	b804      	st.w      	r0, (r14, 0x10)
1101e9ec:	b825      	st.w      	r1, (r14, 0x14)
1101e9ee:	b846      	st.w      	r2, (r14, 0x18)
1101e9f0:	1908      	addi      	r1, r14, 32
1101e9f2:	1804      	addi      	r0, r14, 16
1101e9f4:	e3fff106 	bsr      	0x1101cc00	// 1101cc00 <__unpack_d>
1101e9f8:	190d      	addi      	r1, r14, 52
1101e9fa:	1806      	addi      	r0, r14, 24
1101e9fc:	e3fff102 	bsr      	0x1101cc00	// 1101cc00 <__unpack_d>
1101ea00:	9868      	ld.w      	r3, (r14, 0x20)
1101ea02:	3b01      	cmphsi      	r3, 2
1101ea04:	0c6a      	bf      	0x1101ead8	// 1101ead8 <__divdf3+0xf4>
1101ea06:	982d      	ld.w      	r1, (r14, 0x34)
1101ea08:	3901      	cmphsi      	r1, 2
1101ea0a:	0c95      	bf      	0x1101eb34	// 1101eb34 <__divdf3+0x150>
1101ea0c:	9849      	ld.w      	r2, (r14, 0x24)
1101ea0e:	980e      	ld.w      	r0, (r14, 0x38)
1101ea10:	3b44      	cmpnei      	r3, 4
1101ea12:	6c81      	xor      	r2, r0
1101ea14:	b849      	st.w      	r2, (r14, 0x24)
1101ea16:	0c66      	bf      	0x1101eae2	// 1101eae2 <__divdf3+0xfe>
1101ea18:	3b42      	cmpnei      	r3, 2
1101ea1a:	0c64      	bf      	0x1101eae2	// 1101eae2 <__divdf3+0xfe>
1101ea1c:	3944      	cmpnei      	r1, 4
1101ea1e:	0c66      	bf      	0x1101eaea	// 1101eaea <__divdf3+0x106>
1101ea20:	3942      	cmpnei      	r1, 2
1101ea22:	0c85      	bf      	0x1101eb2c	// 1101eb2c <__divdf3+0x148>
1101ea24:	982a      	ld.w      	r1, (r14, 0x28)
1101ea26:	986f      	ld.w      	r3, (r14, 0x3c)
1101ea28:	9890      	ld.w      	r4, (r14, 0x40)
1101ea2a:	98b1      	ld.w      	r5, (r14, 0x44)
1101ea2c:	604e      	subu      	r1, r3
1101ea2e:	984b      	ld.w      	r2, (r14, 0x2c)
1101ea30:	986c      	ld.w      	r3, (r14, 0x30)
1101ea32:	b82a      	st.w      	r1, (r14, 0x28)
1101ea34:	654c      	cmphs      	r3, r5
1101ea36:	6d93      	mov      	r6, r4
1101ea38:	6dd7      	mov      	r7, r5
1101ea3a:	0c05      	bf      	0x1101ea44	// 1101ea44 <__divdf3+0x60>
1101ea3c:	64d6      	cmpne      	r5, r3
1101ea3e:	080b      	bt      	0x1101ea54	// 1101ea54 <__divdf3+0x70>
1101ea40:	6508      	cmphs      	r2, r4
1101ea42:	0809      	bt      	0x1101ea54	// 1101ea54 <__divdf3+0x70>
1101ea44:	4a9f      	lsri      	r4, r2, 31
1101ea46:	4301      	lsli      	r0, r3, 1
1101ea48:	42a1      	lsli      	r5, r2, 1
1101ea4a:	2900      	subi      	r1, 1
1101ea4c:	6c97      	mov      	r2, r5
1101ea4e:	c4042423 	or      	r3, r4, r0
1101ea52:	b82a      	st.w      	r1, (r14, 0x28)
1101ea54:	3000      	movi      	r0, 0
1101ea56:	3100      	movi      	r1, 0
1101ea58:	343d      	movi      	r4, 61
1101ea5a:	b802      	st.w      	r0, (r14, 0x8)
1101ea5c:	b823      	st.w      	r1, (r14, 0xc)
1101ea5e:	b8c0      	st.w      	r6, (r14, 0x0)
1101ea60:	b8e1      	st.w      	r7, (r14, 0x4)
1101ea62:	3000      	movi      	r0, 0
1101ea64:	ea211000 	movih      	r1, 4096
1101ea68:	98a0      	ld.w      	r5, (r14, 0x0)
1101ea6a:	98c1      	ld.w      	r6, (r14, 0x4)
1101ea6c:	658c      	cmphs      	r3, r6
1101ea6e:	0c14      	bf      	0x1101ea96	// 1101ea96 <__divdf3+0xb2>
1101ea70:	64da      	cmpne      	r6, r3
1101ea72:	0803      	bt      	0x1101ea78	// 1101ea78 <__divdf3+0x94>
1101ea74:	6548      	cmphs      	r2, r5
1101ea76:	0c10      	bf      	0x1101ea96	// 1101ea96 <__divdf3+0xb2>
1101ea78:	98a2      	ld.w      	r5, (r14, 0x8)
1101ea7a:	98c3      	ld.w      	r6, (r14, 0xc)
1101ea7c:	6d40      	or      	r5, r0
1101ea7e:	6d84      	or      	r6, r1
1101ea80:	b8a2      	st.w      	r5, (r14, 0x8)
1101ea82:	b8c3      	st.w      	r6, (r14, 0xc)
1101ea84:	98a0      	ld.w      	r5, (r14, 0x0)
1101ea86:	98c1      	ld.w      	r6, (r14, 0x4)
1101ea88:	6554      	cmphs      	r5, r5
1101ea8a:	c4a20105 	subc      	r5, r2, r5
1101ea8e:	c4c30106 	subc      	r6, r3, r6
1101ea92:	6c97      	mov      	r2, r5
1101ea94:	6cdb      	mov      	r3, r6
1101ea96:	41bf      	lsli      	r5, r1, 31
1101ea98:	6d97      	mov      	r6, r5
1101ea9a:	49a1      	lsri      	r5, r1, 1
1101ea9c:	48e1      	lsri      	r7, r0, 1
1101ea9e:	6c57      	mov      	r1, r5
1101eaa0:	2c00      	subi      	r4, 1
1101eaa2:	4abf      	lsri      	r5, r2, 31
1101eaa4:	3c40      	cmpnei      	r4, 0
1101eaa6:	c4e62420 	or      	r0, r6, r7
1101eaaa:	6d97      	mov      	r6, r5
1101eaac:	43a1      	lsli      	r5, r3, 1
1101eaae:	4261      	lsli      	r3, r2, 1
1101eab0:	6dcf      	mov      	r7, r3
1101eab2:	6c8f      	mov      	r2, r3
1101eab4:	c4a62423 	or      	r3, r6, r5
1101eab8:	0bd8      	bt      	0x1101ea68	// 1101ea68 <__divdf3+0x84>
1101eaba:	30ff      	movi      	r0, 255
1101eabc:	3100      	movi      	r1, 0
1101eabe:	9882      	ld.w      	r4, (r14, 0x8)
1101eac0:	98a3      	ld.w      	r5, (r14, 0xc)
1101eac2:	6900      	and      	r4, r0
1101eac4:	6944      	and      	r5, r1
1101eac6:	6c13      	mov      	r0, r4
1101eac8:	6c57      	mov      	r1, r5
1101eaca:	eb440080 	cmpnei      	r4, 128
1101eace:	0c15      	bf      	0x1101eaf8	// 1101eaf8 <__divdf3+0x114>
1101ead0:	9862      	ld.w      	r3, (r14, 0x8)
1101ead2:	9883      	ld.w      	r4, (r14, 0xc)
1101ead4:	b86b      	st.w      	r3, (r14, 0x2c)
1101ead6:	b88c      	st.w      	r4, (r14, 0x30)
1101ead8:	1808      	addi      	r0, r14, 32
1101eada:	e3ffefc7 	bsr      	0x1101ca68	// 1101ca68 <__pack_d>
1101eade:	1412      	addi      	r14, r14, 72
1101eae0:	1494      	pop      	r4-r7, r15
1101eae2:	644e      	cmpne      	r3, r1
1101eae4:	0bfa      	bt      	0x1101ead8	// 1101ead8 <__divdf3+0xf4>
1101eae6:	1015      	lrw      	r0, 0x110110d0	// 1101eb38 <__divdf3+0x154>
1101eae8:	07f9      	br      	0x1101eada	// 1101eada <__divdf3+0xf6>
1101eaea:	3300      	movi      	r3, 0
1101eaec:	3400      	movi      	r4, 0
1101eaee:	b86a      	st.w      	r3, (r14, 0x28)
1101eaf0:	b86b      	st.w      	r3, (r14, 0x2c)
1101eaf2:	b88c      	st.w      	r4, (r14, 0x30)
1101eaf4:	1808      	addi      	r0, r14, 32
1101eaf6:	07f2      	br      	0x1101eada	// 1101eada <__divdf3+0xf6>
1101eaf8:	3940      	cmpnei      	r1, 0
1101eafa:	0beb      	bt      	0x1101ead0	// 1101ead0 <__divdf3+0xec>
1101eafc:	9882      	ld.w      	r4, (r14, 0x8)
1101eafe:	98a3      	ld.w      	r5, (r14, 0xc)
1101eb00:	e4242100 	andi      	r1, r4, 256
1101eb04:	3940      	cmpnei      	r1, 0
1101eb06:	0be5      	bt      	0x1101ead0	// 1101ead0 <__divdf3+0xec>
1101eb08:	6c8c      	or      	r2, r3
1101eb0a:	3a40      	cmpnei      	r2, 0
1101eb0c:	0fe2      	bf      	0x1101ead0	// 1101ead0 <__divdf3+0xec>
1101eb0e:	3280      	movi      	r2, 128
1101eb10:	3300      	movi      	r3, 0
1101eb12:	6c13      	mov      	r0, r4
1101eb14:	6c57      	mov      	r1, r5
1101eb16:	6401      	cmplt      	r0, r0
1101eb18:	6009      	addc      	r0, r2
1101eb1a:	604d      	addc      	r1, r3
1101eb1c:	6c83      	mov      	r2, r0
1101eb1e:	6cc7      	mov      	r3, r1
1101eb20:	3100      	movi      	r1, 0
1101eb22:	29ff      	subi      	r1, 256
1101eb24:	6848      	and      	r1, r2
1101eb26:	b822      	st.w      	r1, (r14, 0x8)
1101eb28:	b863      	st.w      	r3, (r14, 0xc)
1101eb2a:	07d3      	br      	0x1101ead0	// 1101ead0 <__divdf3+0xec>
1101eb2c:	3304      	movi      	r3, 4
1101eb2e:	1808      	addi      	r0, r14, 32
1101eb30:	b868      	st.w      	r3, (r14, 0x20)
1101eb32:	07d4      	br      	0x1101eada	// 1101eada <__divdf3+0xf6>
1101eb34:	180d      	addi      	r0, r14, 52
1101eb36:	07d2      	br      	0x1101eada	// 1101eada <__divdf3+0xf6>
1101eb38:	110110d0 	.long	0x110110d0

1101eb3c <__GI_isdigit>:
1101eb3c:	282f      	subi      	r0, 48
1101eb3e:	3809      	cmphsi      	r0, 10
1101eb40:	6403      	mvcv      	r0
1101eb42:	783c      	jmp      	r15

1101eb44 <__GI_isspace>:
1101eb44:	7400      	zextb      	r0, r0
1101eb46:	eb400020 	cmpnei      	r0, 32
1101eb4a:	0c05      	bf      	0x1101eb54	// 1101eb54 <__GI_isspace+0x10>
1101eb4c:	2808      	subi      	r0, 9
1101eb4e:	3804      	cmphsi      	r0, 5
1101eb50:	6403      	mvcv      	r0
1101eb52:	783c      	jmp      	r15
1101eb54:	3001      	movi      	r0, 1
1101eb56:	783c      	jmp      	r15

1101eb58 <copystring>:
1101eb58:	14c2      	push      	r4-r5
1101eb5a:	3300      	movi      	r3, 0
1101eb5c:	644d      	cmplt      	r3, r1
1101eb5e:	0803      	bt      	0x1101eb64	// 1101eb64 <copystring+0xc>
1101eb60:	6c0f      	mov      	r0, r3
1101eb62:	1482      	pop      	r4-r5
1101eb64:	5aac      	addu      	r5, r2, r3
1101eb66:	588c      	addu      	r4, r0, r3
1101eb68:	2300      	addi      	r3, 1
1101eb6a:	3b43      	cmpnei      	r3, 3
1101eb6c:	85a0      	ld.b      	r5, (r5, 0x0)
1101eb6e:	a4a0      	st.b      	r5, (r4, 0x0)
1101eb70:	0bf6      	bt      	0x1101eb5c	// 1101eb5c <copystring+0x4>
1101eb72:	3923      	cmplti      	r1, 4
1101eb74:	0bf6      	bt      	0x1101eb60	// 1101eb60 <copystring+0x8>
1101eb76:	3300      	movi      	r3, 0
1101eb78:	a063      	st.b      	r3, (r0, 0x3)
1101eb7a:	3304      	movi      	r3, 4
1101eb7c:	07f2      	br      	0x1101eb60	// 1101eb60 <copystring+0x8>

1101eb7e <__GI___dtostr>:
1101eb7e:	14d4      	push      	r4-r7, r15
1101eb80:	142c      	subi      	r14, r14, 48
1101eb82:	6d8f      	mov      	r6, r3
1101eb84:	9871      	ld.w      	r3, (r14, 0x44)
1101eb86:	b80a      	st.w      	r0, (r14, 0x28)
1101eb88:	b824      	st.w      	r1, (r14, 0x10)
1101eb8a:	b842      	st.w      	r2, (r14, 0x8)
1101eb8c:	b86b      	st.w      	r3, (r14, 0x2c)
1101eb8e:	98f2      	ld.w      	r7, (r14, 0x48)
1101eb90:	e00001aa 	bsr      	0x1101eee4	// 1101eee4 <__isinf>
1101eb94:	3840      	cmpnei      	r0, 0
1101eb96:	0c0a      	bf      	0x1101ebaa	// 1101ebaa <__GI___dtostr+0x2c>
1101eb98:	0240      	lrw      	r2, 0x110122b0	// 1101ee94 <__GI___dtostr+0x316>
1101eb9a:	6c5b      	mov      	r1, r6
1101eb9c:	9802      	ld.w      	r0, (r14, 0x8)
1101eb9e:	e3ffffdd 	bsr      	0x1101eb58	// 1101eb58 <copystring>
1101eba2:	b809      	st.w      	r0, (r14, 0x24)
1101eba4:	9809      	ld.w      	r0, (r14, 0x24)
1101eba6:	140c      	addi      	r14, r14, 48
1101eba8:	1494      	pop      	r4-r7, r15
1101ebaa:	980a      	ld.w      	r0, (r14, 0x28)
1101ebac:	9824      	ld.w      	r1, (r14, 0x10)
1101ebae:	e0000185 	bsr      	0x1101eeb8	// 1101eeb8 <__isnan>
1101ebb2:	3840      	cmpnei      	r0, 0
1101ebb4:	b809      	st.w      	r0, (r14, 0x24)
1101ebb6:	0c03      	bf      	0x1101ebbc	// 1101ebbc <__GI___dtostr+0x3e>
1101ebb8:	0247      	lrw      	r2, 0x110122b4	// 1101ee98 <__GI___dtostr+0x31a>
1101ebba:	07f0      	br      	0x1101eb9a	// 1101eb9a <__GI___dtostr+0x1c>
1101ebbc:	3200      	movi      	r2, 0
1101ebbe:	3300      	movi      	r3, 0
1101ebc0:	980a      	ld.w      	r0, (r14, 0x28)
1101ebc2:	9824      	ld.w      	r1, (r14, 0x10)
1101ebc4:	e00001a6 	bsr      	0x1101ef10	// 1101ef10 <__eqdf2>
1101ebc8:	3840      	cmpnei      	r0, 0
1101ebca:	082d      	bt      	0x1101ec24	// 1101ec24 <__GI___dtostr+0xa6>
1101ebcc:	3f40      	cmpnei      	r7, 0
1101ebce:	0d5d      	bf      	0x1101ee88	// 1101ee88 <__GI___dtostr+0x30a>
1101ebd0:	5fa6      	addi      	r5, r7, 2
1101ebd2:	6558      	cmphs      	r6, r5
1101ebd4:	0c1d      	bf      	0x1101ec0e	// 1101ec0e <__GI___dtostr+0x90>
1101ebd6:	3d40      	cmpnei      	r5, 0
1101ebd8:	0c0b      	bf      	0x1101ebee	// 1101ebee <__GI___dtostr+0x70>
1101ebda:	9804      	ld.w      	r0, (r14, 0x10)
1101ebdc:	38df      	btsti      	r0, 31
1101ebde:	0c1a      	bf      	0x1101ec12	// 1101ec12 <__GI___dtostr+0x94>
1101ebe0:	9882      	ld.w      	r4, (r14, 0x8)
1101ebe2:	322d      	movi      	r2, 45
1101ebe4:	5d62      	addi      	r3, r5, 1
1101ebe6:	a440      	st.b      	r2, (r4, 0x0)
1101ebe8:	3501      	movi      	r5, 1
1101ebea:	64d4      	cmphs      	r5, r3
1101ebec:	0c16      	bf      	0x1101ec18	// 1101ec18 <__GI___dtostr+0x9a>
1101ebee:	9862      	ld.w      	r3, (r14, 0x8)
1101ebf0:	9882      	ld.w      	r4, (r14, 0x8)
1101ebf2:	8320      	ld.b      	r1, (r3, 0x0)
1101ebf4:	322e      	movi      	r2, 46
1101ebf6:	eb410030 	cmpnei      	r1, 48
1101ebfa:	c4000500 	mvc      	r0
1101ebfe:	5870      	addu      	r3, r0, r4
1101ec00:	3400      	movi      	r4, 0
1101ec02:	9822      	ld.w      	r1, (r14, 0x8)
1101ec04:	5914      	addu      	r0, r1, r5
1101ec06:	a341      	st.b      	r2, (r3, 0x1)
1101ec08:	b8a9      	st.w      	r5, (r14, 0x24)
1101ec0a:	a080      	st.b      	r4, (r0, 0x0)
1101ec0c:	07cc      	br      	0x1101eba4	// 1101eba4 <__GI___dtostr+0x26>
1101ec0e:	3508      	movi      	r5, 8
1101ec10:	07e5      	br      	0x1101ebda	// 1101ebda <__GI___dtostr+0x5c>
1101ec12:	6cd7      	mov      	r3, r5
1101ec14:	3500      	movi      	r5, 0
1101ec16:	07ea      	br      	0x1101ebea	// 1101ebea <__GI___dtostr+0x6c>
1101ec18:	3130      	movi      	r1, 48
1101ec1a:	9842      	ld.w      	r2, (r14, 0x8)
1101ec1c:	5a14      	addu      	r0, r2, r5
1101ec1e:	a020      	st.b      	r1, (r0, 0x0)
1101ec20:	2500      	addi      	r5, 1
1101ec22:	07e4      	br      	0x1101ebea	// 1101ebea <__GI___dtostr+0x6c>
1101ec24:	3200      	movi      	r2, 0
1101ec26:	3300      	movi      	r3, 0
1101ec28:	980a      	ld.w      	r0, (r14, 0x28)
1101ec2a:	9824      	ld.w      	r1, (r14, 0x10)
1101ec2c:	e00001ae 	bsr      	0x1101ef88	// 1101ef88 <__ltdf2>
1101ec30:	38df      	btsti      	r0, 31
1101ec32:	0c92      	bf      	0x1101ed56	// 1101ed56 <__GI___dtostr+0x1d8>
1101ec34:	98a2      	ld.w      	r5, (r14, 0x8)
1101ec36:	332d      	movi      	r3, 45
1101ec38:	3180      	movi      	r1, 128
1101ec3a:	9884      	ld.w      	r4, (r14, 0x10)
1101ec3c:	4158      	lsli      	r2, r1, 24
1101ec3e:	a560      	st.b      	r3, (r5, 0x0)
1101ec40:	6108      	addu      	r4, r2
1101ec42:	2e00      	subi      	r6, 1
1101ec44:	2500      	addi      	r5, 1
1101ec46:	3000      	movi      	r0, 0
1101ec48:	ea213fe0 	movih      	r1, 16352
1101ec4c:	3300      	movi      	r3, 0
1101ec4e:	b865      	st.w      	r3, (r14, 0x14)
1101ec50:	9845      	ld.w      	r2, (r14, 0x14)
1101ec52:	65ca      	cmpne      	r2, r7
1101ec54:	0884      	bt      	0x1101ed5c	// 1101ed5c <__GI___dtostr+0x1de>
1101ec56:	6c83      	mov      	r2, r0
1101ec58:	6cc7      	mov      	r3, r1
1101ec5a:	980a      	ld.w      	r0, (r14, 0x28)
1101ec5c:	6c53      	mov      	r1, r4
1101ec5e:	e3fffe8f 	bsr      	0x1101e97c	// 1101e97c <__adddf3>
1101ec62:	3200      	movi      	r2, 0
1101ec64:	ea233ff0 	movih      	r3, 16368
1101ec68:	b806      	st.w      	r0, (r14, 0x18)
1101ec6a:	b827      	st.w      	r1, (r14, 0x1c)
1101ec6c:	e000018e 	bsr      	0x1101ef88	// 1101ef88 <__ltdf2>
1101ec70:	38df      	btsti      	r0, 31
1101ec72:	0c05      	bf      	0x1101ec7c	// 1101ec7c <__GI___dtostr+0xfe>
1101ec74:	3030      	movi      	r0, 48
1101ec76:	2e00      	subi      	r6, 1
1101ec78:	a500      	st.b      	r0, (r5, 0x0)
1101ec7a:	2500      	addi      	r5, 1
1101ec7c:	9884      	ld.w      	r4, (r14, 0x10)
1101ec7e:	4c34      	lsri      	r1, r4, 20
1101ec80:	e46127ff 	andi      	r3, r1, 2047
1101ec84:	e40313fe 	subi      	r0, r3, 1023
1101ec88:	e3ffee26 	bsr      	0x1101c8d4	// 1101c8d4 <__floatsidf>
1101ec8c:	035b      	lrw      	r2, 0x509f79ff	// 1101ee9c <__GI___dtostr+0x31e>
1101ec8e:	037a      	lrw      	r3, 0x3fd34413	// 1101eea0 <__GI___dtostr+0x322>
1101ec90:	e3ffed0c 	bsr      	0x1101c6a8	// 1101c6a8 <__muldf3>
1101ec94:	e0000198 	bsr      	0x1101efc4	// 1101efc4 <__fixdfsi>
1101ec98:	5842      	addi      	r2, r0, 1
1101ec9a:	3a20      	cmplti      	r2, 1
1101ec9c:	b848      	st.w      	r2, (r14, 0x20)
1101ec9e:	08ea      	bt      	0x1101ee72	// 1101ee72 <__GI___dtostr+0x2f4>
1101eca0:	ea214024 	movih      	r1, 16420
1101eca4:	6dcb      	mov      	r7, r2
1101eca6:	3400      	movi      	r4, 0
1101eca8:	b823      	st.w      	r1, (r14, 0xc)
1101ecaa:	3f0a      	cmphsi      	r7, 11
1101ecac:	085f      	bt      	0x1101ed6a	// 1101ed6a <__GI___dtostr+0x1ec>
1101ecae:	3f41      	cmpnei      	r7, 1
1101ecb0:	0868      	bt      	0x1101ed80	// 1101ed80 <__GI___dtostr+0x202>
1101ecb2:	135d      	lrw      	r2, 0xcccccccd	// 1101eea4 <__GI___dtostr+0x326>
1101ecb4:	137d      	lrw      	r3, 0x3feccccc	// 1101eea8 <__GI___dtostr+0x32a>
1101ecb6:	6c13      	mov      	r0, r4
1101ecb8:	9823      	ld.w      	r1, (r14, 0xc)
1101ecba:	e0000149 	bsr      	0x1101ef4c	// 1101ef4c <__gtdf2>
1101ecbe:	3820      	cmplti      	r0, 1
1101ecc0:	0c6b      	bf      	0x1101ed96	// 1101ed96 <__GI___dtostr+0x218>
1101ecc2:	9862      	ld.w      	r3, (r14, 0x8)
1101ecc4:	64d6      	cmpne      	r5, r3
1101ecc6:	0807      	bt      	0x1101ecd4	// 1101ecd4 <__GI___dtostr+0x156>
1101ecc8:	3e40      	cmpnei      	r6, 0
1101ecca:	0f6d      	bf      	0x1101eba4	// 1101eba4 <__GI___dtostr+0x26>
1101eccc:	3230      	movi      	r2, 48
1101ecce:	2e00      	subi      	r6, 1
1101ecd0:	a540      	st.b      	r2, (r5, 0x0)
1101ecd2:	2500      	addi      	r5, 1
1101ecd4:	9805      	ld.w      	r0, (r14, 0x14)
1101ecd6:	3840      	cmpnei      	r0, 0
1101ecd8:	08d1      	bt      	0x1101ee7a	// 1101ee7a <__GI___dtostr+0x2fc>
1101ecda:	984b      	ld.w      	r2, (r14, 0x2c)
1101ecdc:	9822      	ld.w      	r1, (r14, 0x8)
1101ecde:	5d65      	subu      	r3, r5, r1
1101ece0:	2300      	addi      	r3, 1
1101ece2:	648c      	cmphs      	r3, r2
1101ece4:	08a6      	bt      	0x1101ee30	// 1101ee30 <__GI___dtostr+0x2b2>
1101ece6:	3e40      	cmpnei      	r6, 0
1101ece8:	0f5e      	bf      	0x1101eba4	// 1101eba4 <__GI___dtostr+0x26>
1101ecea:	372e      	movi      	r7, 46
1101ecec:	980b      	ld.w      	r0, (r14, 0x2c)
1101ecee:	a5e0      	st.b      	r7, (r5, 0x0)
1101ecf0:	5822      	addi      	r1, r0, 1
1101ecf2:	5de2      	addi      	r7, r5, 1
1101ecf4:	9862      	ld.w      	r3, (r14, 0x8)
1101ecf6:	5f4d      	subu      	r2, r7, r3
1101ecf8:	5909      	subu      	r0, r1, r2
1101ecfa:	b805      	st.w      	r0, (r14, 0x14)
1101ecfc:	2e00      	subi      	r6, 1
1101ecfe:	9825      	ld.w      	r1, (r14, 0x14)
1101ed00:	6458      	cmphs      	r6, r1
1101ed02:	0f51      	bf      	0x1101eba4	// 1101eba4 <__GI___dtostr+0x26>
1101ed04:	36ff      	movi      	r6, 255
1101ed06:	59bc      	addu      	r5, r1, r7
1101ed08:	655e      	cmpne      	r7, r5
1101ed0a:	0c93      	bf      	0x1101ee30	// 1101ee30 <__GI___dtostr+0x2b2>
1101ed0c:	9863      	ld.w      	r3, (r14, 0xc)
1101ed0e:	6c93      	mov      	r2, r4
1101ed10:	9806      	ld.w      	r0, (r14, 0x18)
1101ed12:	9827      	ld.w      	r1, (r14, 0x1c)
1101ed14:	e3fffe68 	bsr      	0x1101e9e4	// 1101e9e4 <__divdf3>
1101ed18:	e0000156 	bsr      	0x1101efc4	// 1101efc4 <__fixdfsi>
1101ed1c:	e440002f 	addi      	r2, r0, 48
1101ed20:	6818      	and      	r0, r6
1101ed22:	a740      	st.b      	r2, (r7, 0x0)
1101ed24:	2700      	addi      	r7, 1
1101ed26:	e3ffedd7 	bsr      	0x1101c8d4	// 1101c8d4 <__floatsidf>
1101ed2a:	6c93      	mov      	r2, r4
1101ed2c:	9863      	ld.w      	r3, (r14, 0xc)
1101ed2e:	e3ffecbd 	bsr      	0x1101c6a8	// 1101c6a8 <__muldf3>
1101ed32:	6c83      	mov      	r2, r0
1101ed34:	6cc7      	mov      	r3, r1
1101ed36:	9806      	ld.w      	r0, (r14, 0x18)
1101ed38:	9827      	ld.w      	r1, (r14, 0x1c)
1101ed3a:	e3fffe39 	bsr      	0x1101e9ac	// 1101e9ac <__subdf3>
1101ed3e:	3200      	movi      	r2, 0
1101ed40:	b806      	st.w      	r0, (r14, 0x18)
1101ed42:	b827      	st.w      	r1, (r14, 0x1c)
1101ed44:	6c13      	mov      	r0, r4
1101ed46:	9823      	ld.w      	r1, (r14, 0xc)
1101ed48:	ea234024 	movih      	r3, 16420
1101ed4c:	e3fffe4c 	bsr      	0x1101e9e4	// 1101e9e4 <__divdf3>
1101ed50:	6d03      	mov      	r4, r0
1101ed52:	b823      	st.w      	r1, (r14, 0xc)
1101ed54:	07da      	br      	0x1101ed08	// 1101ed08 <__GI___dtostr+0x18a>
1101ed56:	98a2      	ld.w      	r5, (r14, 0x8)
1101ed58:	9884      	ld.w      	r4, (r14, 0x10)
1101ed5a:	0776      	br      	0x1101ec46	// 1101ec46 <__GI___dtostr+0xc8>
1101ed5c:	1274      	lrw      	r3, 0x3fb99999	// 1101eeac <__GI___dtostr+0x32e>
1101ed5e:	1255      	lrw      	r2, 0x9999999a	// 1101eeb0 <__GI___dtostr+0x332>
1101ed60:	e3ffeca4 	bsr      	0x1101c6a8	// 1101c6a8 <__muldf3>
1101ed64:	9865      	ld.w      	r3, (r14, 0x14)
1101ed66:	2300      	addi      	r3, 1
1101ed68:	0773      	br      	0x1101ec4e	// 1101ec4e <__GI___dtostr+0xd0>
1101ed6a:	3280      	movi      	r2, 128
1101ed6c:	6c13      	mov      	r0, r4
1101ed6e:	9823      	ld.w      	r1, (r14, 0xc)
1101ed70:	4256      	lsli      	r2, r2, 22
1101ed72:	1271      	lrw      	r3, 0x4202a05f	// 1101eeb4 <__GI___dtostr+0x336>
1101ed74:	2f09      	subi      	r7, 10
1101ed76:	e3ffec99 	bsr      	0x1101c6a8	// 1101c6a8 <__muldf3>
1101ed7a:	6d03      	mov      	r4, r0
1101ed7c:	b823      	st.w      	r1, (r14, 0xc)
1101ed7e:	0796      	br      	0x1101ecaa	// 1101ecaa <__GI___dtostr+0x12c>
1101ed80:	6c13      	mov      	r0, r4
1101ed82:	9823      	ld.w      	r1, (r14, 0xc)
1101ed84:	3200      	movi      	r2, 0
1101ed86:	ea234024 	movih      	r3, 16420
1101ed8a:	2f00      	subi      	r7, 1
1101ed8c:	e3ffec8e 	bsr      	0x1101c6a8	// 1101c6a8 <__muldf3>
1101ed90:	6d03      	mov      	r4, r0
1101ed92:	b823      	st.w      	r1, (r14, 0xc)
1101ed94:	078d      	br      	0x1101ecae	// 1101ecae <__GI___dtostr+0x130>
1101ed96:	6c93      	mov      	r2, r4
1101ed98:	9863      	ld.w      	r3, (r14, 0xc)
1101ed9a:	9806      	ld.w      	r0, (r14, 0x18)
1101ed9c:	9827      	ld.w      	r1, (r14, 0x1c)
1101ed9e:	e3fffe23 	bsr      	0x1101e9e4	// 1101e9e4 <__divdf3>
1101eda2:	e0000111 	bsr      	0x1101efc4	// 1101efc4 <__fixdfsi>
1101eda6:	3f40      	cmpnei      	r7, 0
1101eda8:	7440      	zextb      	r1, r0
1101edaa:	0c03      	bf      	0x1101edb0	// 1101edb0 <__GI___dtostr+0x232>
1101edac:	3940      	cmpnei      	r1, 0
1101edae:	0c58      	bf      	0x1101ee5e	// 1101ee5e <__GI___dtostr+0x2e0>
1101edb0:	3e40      	cmpnei      	r6, 0
1101edb2:	212f      	addi      	r1, 48
1101edb4:	a520      	st.b      	r1, (r5, 0x0)
1101edb6:	2500      	addi      	r5, 1
1101edb8:	0842      	bt      	0x1101ee3c	// 1101ee3c <__GI___dtostr+0x2be>
1101edba:	6c93      	mov      	r2, r4
1101edbc:	9863      	ld.w      	r3, (r14, 0xc)
1101edbe:	980a      	ld.w      	r0, (r14, 0x28)
1101edc0:	9824      	ld.w      	r1, (r14, 0x10)
1101edc2:	e3fffe11 	bsr      	0x1101e9e4	// 1101e9e4 <__divdf3>
1101edc6:	986b      	ld.w      	r3, (r14, 0x2c)
1101edc8:	9885      	ld.w      	r4, (r14, 0x14)
1101edca:	b860      	st.w      	r3, (r14, 0x0)
1101edcc:	b881      	st.w      	r4, (r14, 0x4)
1101edce:	3300      	movi      	r3, 0
1101edd0:	9842      	ld.w      	r2, (r14, 0x8)
1101edd2:	e3fffed6 	bsr      	0x1101eb7e	// 1101eb7e <__GI___dtostr>
1101edd6:	3840      	cmpnei      	r0, 0
1101edd8:	0ee6      	bf      	0x1101eba4	// 1101eba4 <__GI___dtostr+0x26>
1101edda:	5dc0      	addu      	r6, r5, r0
1101eddc:	3565      	movi      	r5, 101
1101edde:	c4002484 	nor      	r4, r0, r0
1101ede2:	30fa      	movi      	r0, 250
1101ede4:	a6a0      	st.b      	r5, (r6, 0x0)
1101ede6:	3101      	movi      	r1, 1
1101ede8:	5ea2      	addi      	r5, r6, 1
1101edea:	40e2      	lsli      	r7, r0, 2
1101edec:	3604      	movi      	r6, 4
1101edee:	9848      	ld.w      	r2, (r14, 0x20)
1101edf0:	65c9      	cmplt      	r2, r7
1101edf2:	0c03      	bf      	0x1101edf8	// 1101edf8 <__GI___dtostr+0x27a>
1101edf4:	3940      	cmpnei      	r1, 0
1101edf6:	0811      	bt      	0x1101ee18	// 1101ee18 <__GI___dtostr+0x29a>
1101edf8:	3c40      	cmpnei      	r4, 0
1101edfa:	0c08      	bf      	0x1101ee0a	// 1101ee0a <__GI___dtostr+0x28c>
1101edfc:	6c5f      	mov      	r1, r7
1101edfe:	9808      	ld.w      	r0, (r14, 0x20)
1101ee00:	e3ffe5c8 	bsr      	0x1101b990	// 1101b990 <__div32>
1101ee04:	202f      	addi      	r0, 48
1101ee06:	a500      	st.b      	r0, (r5, 0x0)
1101ee08:	2500      	addi      	r5, 1
1101ee0a:	6c5f      	mov      	r1, r7
1101ee0c:	9808      	ld.w      	r0, (r14, 0x20)
1101ee0e:	2c00      	subi      	r4, 1
1101ee10:	e3ffe61c 	bsr      	0x1101ba48	// 1101ba48 <__modsi3>
1101ee14:	3100      	movi      	r1, 0
1101ee16:	b808      	st.w      	r0, (r14, 0x20)
1101ee18:	b823      	st.w      	r1, (r14, 0xc)
1101ee1a:	6c1f      	mov      	r0, r7
1101ee1c:	310a      	movi      	r1, 10
1101ee1e:	2e00      	subi      	r6, 1
1101ee20:	e3ffe5b8 	bsr      	0x1101b990	// 1101b990 <__div32>
1101ee24:	3e40      	cmpnei      	r6, 0
1101ee26:	6dc3      	mov      	r7, r0
1101ee28:	9823      	ld.w      	r1, (r14, 0xc)
1101ee2a:	0be2      	bt      	0x1101edee	// 1101edee <__GI___dtostr+0x270>
1101ee2c:	3c40      	cmpnei      	r4, 0
1101ee2e:	0ebb      	bf      	0x1101eba4	// 1101eba4 <__GI___dtostr+0x26>
1101ee30:	3300      	movi      	r3, 0
1101ee32:	9882      	ld.w      	r4, (r14, 0x8)
1101ee34:	a560      	st.b      	r3, (r5, 0x0)
1101ee36:	5d11      	subu      	r0, r5, r4
1101ee38:	b809      	st.w      	r0, (r14, 0x24)
1101ee3a:	06b5      	br      	0x1101eba4	// 1101eba4 <__GI___dtostr+0x26>
1101ee3c:	7400      	zextb      	r0, r0
1101ee3e:	3700      	movi      	r7, 0
1101ee40:	e3ffed4a 	bsr      	0x1101c8d4	// 1101c8d4 <__floatsidf>
1101ee44:	6c93      	mov      	r2, r4
1101ee46:	9863      	ld.w      	r3, (r14, 0xc)
1101ee48:	2e00      	subi      	r6, 1
1101ee4a:	e3ffec2f 	bsr      	0x1101c6a8	// 1101c6a8 <__muldf3>
1101ee4e:	6c83      	mov      	r2, r0
1101ee50:	6cc7      	mov      	r3, r1
1101ee52:	9806      	ld.w      	r0, (r14, 0x18)
1101ee54:	9827      	ld.w      	r1, (r14, 0x1c)
1101ee56:	e3fffdab 	bsr      	0x1101e9ac	// 1101e9ac <__subdf3>
1101ee5a:	b806      	st.w      	r0, (r14, 0x18)
1101ee5c:	b827      	st.w      	r1, (r14, 0x1c)
1101ee5e:	6c13      	mov      	r0, r4
1101ee60:	9823      	ld.w      	r1, (r14, 0xc)
1101ee62:	3200      	movi      	r2, 0
1101ee64:	ea234024 	movih      	r3, 16420
1101ee68:	e3fffdbe 	bsr      	0x1101e9e4	// 1101e9e4 <__divdf3>
1101ee6c:	6d03      	mov      	r4, r0
1101ee6e:	b823      	st.w      	r1, (r14, 0xc)
1101ee70:	0721      	br      	0x1101ecb2	// 1101ecb2 <__GI___dtostr+0x134>
1101ee72:	100f      	lrw      	r0, 0x3fb99999	// 1101eeac <__GI___dtostr+0x32e>
1101ee74:	108f      	lrw      	r4, 0x9999999a	// 1101eeb0 <__GI___dtostr+0x332>
1101ee76:	b803      	st.w      	r0, (r14, 0xc)
1101ee78:	0725      	br      	0x1101ecc2	// 1101ecc2 <__GI___dtostr+0x144>
1101ee7a:	3e40      	cmpnei      	r6, 0
1101ee7c:	0e94      	bf      	0x1101eba4	// 1101eba4 <__GI___dtostr+0x26>
1101ee7e:	372e      	movi      	r7, 46
1101ee80:	2e00      	subi      	r6, 1
1101ee82:	a5e0      	st.b      	r7, (r5, 0x0)
1101ee84:	5de2      	addi      	r7, r5, 1
1101ee86:	073c      	br      	0x1101ecfe	// 1101ecfe <__GI___dtostr+0x180>
1101ee88:	3e40      	cmpnei      	r6, 0
1101ee8a:	3108      	movi      	r1, 8
1101ee8c:	3501      	movi      	r5, 1
1101ee8e:	c4a10c20 	incf      	r5, r1, 0
1101ee92:	06a4      	br      	0x1101ebda	// 1101ebda <__GI___dtostr+0x5c>
1101ee94:	110122b0 	.long	0x110122b0
1101ee98:	110122b4 	.long	0x110122b4
1101ee9c:	509f79ff 	.long	0x509f79ff
1101eea0:	3fd34413 	.long	0x3fd34413
1101eea4:	cccccccd 	.long	0xcccccccd
1101eea8:	3feccccc 	.long	0x3feccccc
1101eeac:	3fb99999 	.long	0x3fb99999
1101eeb0:	9999999a 	.long	0x9999999a
1101eeb4:	4202a05f 	.long	0x4202a05f

1101eeb8 <__isnan>:
1101eeb8:	6c83      	mov      	r2, r0
1101eeba:	6cc7      	mov      	r3, r1
1101eebc:	3a40      	cmpnei      	r2, 0
1101eebe:	c6612820 	bclri      	r0, r1, 19
1101eec2:	0805      	bt      	0x1101eecc	// 1101eecc <__isnan+0x14>
1101eec4:	ea217ff0 	movih      	r1, 32752
1101eec8:	6442      	cmpne      	r0, r1
1101eeca:	0c0b      	bf      	0x1101eee0	// 1101eee0 <__isnan+0x28>
1101eecc:	3000      	movi      	r0, 0
1101eece:	ea21fff8 	movih      	r1, 65528
1101eed2:	6c81      	xor      	r2, r0
1101eed4:	6cc5      	xor      	r3, r1
1101eed6:	6c8c      	or      	r2, r3
1101eed8:	3a40      	cmpnei      	r2, 0
1101eeda:	6483      	mvcv      	r2
1101eedc:	7408      	zextb      	r0, r2
1101eede:	783c      	jmp      	r15
1101eee0:	3001      	movi      	r0, 1
1101eee2:	07fe      	br      	0x1101eede	// 1101eede <__isnan+0x26>

1101eee4 <__isinf>:
1101eee4:	6c83      	mov      	r2, r0
1101eee6:	3840      	cmpnei      	r0, 0
1101eee8:	6cc7      	mov      	r3, r1
1101eeea:	0805      	bt      	0x1101eef4	// 1101eef4 <__isinf+0x10>
1101eeec:	ea217ff0 	movih      	r1, 32752
1101eef0:	644e      	cmpne      	r3, r1
1101eef2:	0c0c      	bf      	0x1101ef0a	// 1101ef0a <__isinf+0x26>
1101eef4:	3000      	movi      	r0, 0
1101eef6:	ea21fff0 	movih      	r1, 65520
1101eefa:	6c81      	xor      	r2, r0
1101eefc:	6cc5      	xor      	r3, r1
1101eefe:	6c8c      	or      	r2, r3
1101ef00:	3000      	movi      	r0, 0
1101ef02:	3a40      	cmpnei      	r2, 0
1101ef04:	64c3      	mvcv      	r3
1101ef06:	600e      	subu      	r0, r3
1101ef08:	783c      	jmp      	r15
1101ef0a:	3001      	movi      	r0, 1
1101ef0c:	07fe      	br      	0x1101ef08	// 1101ef08 <__isinf+0x24>
	...

1101ef10 <__eqdf2>:
1101ef10:	14d0      	push      	r15
1101ef12:	142e      	subi      	r14, r14, 56
1101ef14:	b800      	st.w      	r0, (r14, 0x0)
1101ef16:	6c3b      	mov      	r0, r14
1101ef18:	b863      	st.w      	r3, (r14, 0xc)
1101ef1a:	b821      	st.w      	r1, (r14, 0x4)
1101ef1c:	b842      	st.w      	r2, (r14, 0x8)
1101ef1e:	1904      	addi      	r1, r14, 16
1101ef20:	e3ffee70 	bsr      	0x1101cc00	// 1101cc00 <__unpack_d>
1101ef24:	1909      	addi      	r1, r14, 36
1101ef26:	1802      	addi      	r0, r14, 8
1101ef28:	e3ffee6c 	bsr      	0x1101cc00	// 1101cc00 <__unpack_d>
1101ef2c:	9864      	ld.w      	r3, (r14, 0x10)
1101ef2e:	3b01      	cmphsi      	r3, 2
1101ef30:	0c0a      	bf      	0x1101ef44	// 1101ef44 <__eqdf2+0x34>
1101ef32:	9869      	ld.w      	r3, (r14, 0x24)
1101ef34:	3b01      	cmphsi      	r3, 2
1101ef36:	0c07      	bf      	0x1101ef44	// 1101ef44 <__eqdf2+0x34>
1101ef38:	1909      	addi      	r1, r14, 36
1101ef3a:	1804      	addi      	r0, r14, 16
1101ef3c:	e000007c 	bsr      	0x1101f034	// 1101f034 <__fpcmp_parts_d>
1101ef40:	140e      	addi      	r14, r14, 56
1101ef42:	1490      	pop      	r15
1101ef44:	3001      	movi      	r0, 1
1101ef46:	140e      	addi      	r14, r14, 56
1101ef48:	1490      	pop      	r15
	...

1101ef4c <__gtdf2>:
1101ef4c:	14d0      	push      	r15
1101ef4e:	142e      	subi      	r14, r14, 56
1101ef50:	b800      	st.w      	r0, (r14, 0x0)
1101ef52:	6c3b      	mov      	r0, r14
1101ef54:	b863      	st.w      	r3, (r14, 0xc)
1101ef56:	b821      	st.w      	r1, (r14, 0x4)
1101ef58:	b842      	st.w      	r2, (r14, 0x8)
1101ef5a:	1904      	addi      	r1, r14, 16
1101ef5c:	e3ffee52 	bsr      	0x1101cc00	// 1101cc00 <__unpack_d>
1101ef60:	1909      	addi      	r1, r14, 36
1101ef62:	1802      	addi      	r0, r14, 8
1101ef64:	e3ffee4e 	bsr      	0x1101cc00	// 1101cc00 <__unpack_d>
1101ef68:	9864      	ld.w      	r3, (r14, 0x10)
1101ef6a:	3b01      	cmphsi      	r3, 2
1101ef6c:	0c0a      	bf      	0x1101ef80	// 1101ef80 <__gtdf2+0x34>
1101ef6e:	9869      	ld.w      	r3, (r14, 0x24)
1101ef70:	3b01      	cmphsi      	r3, 2
1101ef72:	0c07      	bf      	0x1101ef80	// 1101ef80 <__gtdf2+0x34>
1101ef74:	1909      	addi      	r1, r14, 36
1101ef76:	1804      	addi      	r0, r14, 16
1101ef78:	e000005e 	bsr      	0x1101f034	// 1101f034 <__fpcmp_parts_d>
1101ef7c:	140e      	addi      	r14, r14, 56
1101ef7e:	1490      	pop      	r15
1101ef80:	3000      	movi      	r0, 0
1101ef82:	2800      	subi      	r0, 1
1101ef84:	140e      	addi      	r14, r14, 56
1101ef86:	1490      	pop      	r15

1101ef88 <__ltdf2>:
1101ef88:	14d0      	push      	r15
1101ef8a:	142e      	subi      	r14, r14, 56
1101ef8c:	b800      	st.w      	r0, (r14, 0x0)
1101ef8e:	6c3b      	mov      	r0, r14
1101ef90:	b863      	st.w      	r3, (r14, 0xc)
1101ef92:	b821      	st.w      	r1, (r14, 0x4)
1101ef94:	b842      	st.w      	r2, (r14, 0x8)
1101ef96:	1904      	addi      	r1, r14, 16
1101ef98:	e3ffee34 	bsr      	0x1101cc00	// 1101cc00 <__unpack_d>
1101ef9c:	1909      	addi      	r1, r14, 36
1101ef9e:	1802      	addi      	r0, r14, 8
1101efa0:	e3ffee30 	bsr      	0x1101cc00	// 1101cc00 <__unpack_d>
1101efa4:	9864      	ld.w      	r3, (r14, 0x10)
1101efa6:	3b01      	cmphsi      	r3, 2
1101efa8:	0c0a      	bf      	0x1101efbc	// 1101efbc <__ltdf2+0x34>
1101efaa:	9869      	ld.w      	r3, (r14, 0x24)
1101efac:	3b01      	cmphsi      	r3, 2
1101efae:	0c07      	bf      	0x1101efbc	// 1101efbc <__ltdf2+0x34>
1101efb0:	1909      	addi      	r1, r14, 36
1101efb2:	1804      	addi      	r0, r14, 16
1101efb4:	e0000040 	bsr      	0x1101f034	// 1101f034 <__fpcmp_parts_d>
1101efb8:	140e      	addi      	r14, r14, 56
1101efba:	1490      	pop      	r15
1101efbc:	3001      	movi      	r0, 1
1101efbe:	140e      	addi      	r14, r14, 56
1101efc0:	1490      	pop      	r15
	...

1101efc4 <__fixdfsi>:
1101efc4:	14d1      	push      	r4, r15
1101efc6:	1427      	subi      	r14, r14, 28
1101efc8:	b800      	st.w      	r0, (r14, 0x0)
1101efca:	6c3b      	mov      	r0, r14
1101efcc:	b821      	st.w      	r1, (r14, 0x4)
1101efce:	1902      	addi      	r1, r14, 8
1101efd0:	e3ffee18 	bsr      	0x1101cc00	// 1101cc00 <__unpack_d>
1101efd4:	9862      	ld.w      	r3, (r14, 0x8)
1101efd6:	3b02      	cmphsi      	r3, 3
1101efd8:	0c2a      	bf      	0x1101f02c	// 1101f02c <__fixdfsi+0x68>
1101efda:	3b44      	cmpnei      	r3, 4
1101efdc:	0c06      	bf      	0x1101efe8	// 1101efe8 <__fixdfsi+0x24>
1101efde:	9864      	ld.w      	r3, (r14, 0x10)
1101efe0:	3bdf      	btsti      	r3, 31
1101efe2:	0825      	bt      	0x1101f02c	// 1101f02c <__fixdfsi+0x68>
1101efe4:	3b3e      	cmplti      	r3, 31
1101efe6:	080a      	bt      	0x1101effa	// 1101effa <__fixdfsi+0x36>
1101efe8:	9863      	ld.w      	r3, (r14, 0xc)
1101efea:	3b40      	cmpnei      	r3, 0
1101efec:	c4000500 	mvc      	r0
1101eff0:	c7c05023 	bmaski      	r3, 31
1101eff4:	600c      	addu      	r0, r3
1101eff6:	1407      	addi      	r14, r14, 28
1101eff8:	1491      	pop      	r4, r15
1101effa:	323c      	movi      	r2, 60
1101effc:	5a2d      	subu      	r1, r2, r3
1101effe:	9866      	ld.w      	r3, (r14, 0x18)
1101f000:	4341      	lsli      	r2, r3, 1
1101f002:	e481101f 	subi      	r4, r1, 32
1101f006:	c4834040 	lsr      	r0, r3, r4
1101f00a:	331f      	movi      	r3, 31
1101f00c:	60c6      	subu      	r3, r1
1101f00e:	c4624023 	lsl      	r3, r2, r3
1101f012:	9845      	ld.w      	r2, (r14, 0x14)
1101f014:	7085      	lsr      	r2, r1
1101f016:	6c8c      	or      	r2, r3
1101f018:	9863      	ld.w      	r3, (r14, 0xc)
1101f01a:	3cdf      	btsti      	r4, 31
1101f01c:	c4020c40 	inct      	r0, r2, 0
1101f020:	3b40      	cmpnei      	r3, 0
1101f022:	0fea      	bf      	0x1101eff6	// 1101eff6 <__fixdfsi+0x32>
1101f024:	3300      	movi      	r3, 0
1101f026:	5b01      	subu      	r0, r3, r0
1101f028:	1407      	addi      	r14, r14, 28
1101f02a:	1491      	pop      	r4, r15
1101f02c:	3000      	movi      	r0, 0
1101f02e:	1407      	addi      	r14, r14, 28
1101f030:	1491      	pop      	r4, r15
	...

1101f034 <__fpcmp_parts_d>:
1101f034:	14c1      	push      	r4
1101f036:	9060      	ld.w      	r3, (r0, 0x0)
1101f038:	3b01      	cmphsi      	r3, 2
1101f03a:	0c2b      	bf      	0x1101f090	// 1101f090 <__fpcmp_parts_d+0x5c>
1101f03c:	9140      	ld.w      	r2, (r1, 0x0)
1101f03e:	3a01      	cmphsi      	r2, 2
1101f040:	0c28      	bf      	0x1101f090	// 1101f090 <__fpcmp_parts_d+0x5c>
1101f042:	3b44      	cmpnei      	r3, 4
1101f044:	0c1c      	bf      	0x1101f07c	// 1101f07c <__fpcmp_parts_d+0x48>
1101f046:	3a44      	cmpnei      	r2, 4
1101f048:	0c12      	bf      	0x1101f06c	// 1101f06c <__fpcmp_parts_d+0x38>
1101f04a:	3b42      	cmpnei      	r3, 2
1101f04c:	0c0e      	bf      	0x1101f068	// 1101f068 <__fpcmp_parts_d+0x34>
1101f04e:	3a42      	cmpnei      	r2, 2
1101f050:	0c18      	bf      	0x1101f080	// 1101f080 <__fpcmp_parts_d+0x4c>
1101f052:	9061      	ld.w      	r3, (r0, 0x4)
1101f054:	9141      	ld.w      	r2, (r1, 0x4)
1101f056:	648e      	cmpne      	r3, r2
1101f058:	0c1e      	bf      	0x1101f094	// 1101f094 <__fpcmp_parts_d+0x60>
1101f05a:	3b40      	cmpnei      	r3, 0
1101f05c:	3001      	movi      	r0, 1
1101f05e:	3200      	movi      	r2, 0
1101f060:	2a00      	subi      	r2, 1
1101f062:	c4020c40 	inct      	r0, r2, 0
1101f066:	1481      	pop      	r4
1101f068:	3a42      	cmpnei      	r2, 2
1101f06a:	0c2b      	bf      	0x1101f0c0	// 1101f0c0 <__fpcmp_parts_d+0x8c>
1101f06c:	9161      	ld.w      	r3, (r1, 0x4)
1101f06e:	3b40      	cmpnei      	r3, 0
1101f070:	3301      	movi      	r3, 1
1101f072:	3000      	movi      	r0, 0
1101f074:	2800      	subi      	r0, 1
1101f076:	c4030c40 	inct      	r0, r3, 0
1101f07a:	1481      	pop      	r4
1101f07c:	3a44      	cmpnei      	r2, 4
1101f07e:	0c23      	bf      	0x1101f0c4	// 1101f0c4 <__fpcmp_parts_d+0x90>
1101f080:	9041      	ld.w      	r2, (r0, 0x4)
1101f082:	3001      	movi      	r0, 1
1101f084:	3a40      	cmpnei      	r2, 0
1101f086:	3300      	movi      	r3, 0
1101f088:	2b00      	subi      	r3, 1
1101f08a:	c4030c40 	inct      	r0, r3, 0
1101f08e:	1481      	pop      	r4
1101f090:	3001      	movi      	r0, 1
1101f092:	1481      	pop      	r4
1101f094:	9082      	ld.w      	r4, (r0, 0x8)
1101f096:	9142      	ld.w      	r2, (r1, 0x8)
1101f098:	6509      	cmplt      	r2, r4
1101f09a:	0be0      	bt      	0x1101f05a	// 1101f05a <__fpcmp_parts_d+0x26>
1101f09c:	6491      	cmplt      	r4, r2
1101f09e:	0be8      	bt      	0x1101f06e	// 1101f06e <__fpcmp_parts_d+0x3a>
1101f0a0:	9044      	ld.w      	r2, (r0, 0x10)
1101f0a2:	9083      	ld.w      	r4, (r0, 0xc)
1101f0a4:	9103      	ld.w      	r0, (r1, 0xc)
1101f0a6:	9124      	ld.w      	r1, (r1, 0x10)
1101f0a8:	6484      	cmphs      	r1, r2
1101f0aa:	0fd8      	bf      	0x1101f05a	// 1101f05a <__fpcmp_parts_d+0x26>
1101f0ac:	644a      	cmpne      	r2, r1
1101f0ae:	0803      	bt      	0x1101f0b4	// 1101f0b4 <__fpcmp_parts_d+0x80>
1101f0b0:	6500      	cmphs      	r0, r4
1101f0b2:	0fd4      	bf      	0x1101f05a	// 1101f05a <__fpcmp_parts_d+0x26>
1101f0b4:	6448      	cmphs      	r2, r1
1101f0b6:	0fdc      	bf      	0x1101f06e	// 1101f06e <__fpcmp_parts_d+0x3a>
1101f0b8:	6486      	cmpne      	r1, r2
1101f0ba:	0803      	bt      	0x1101f0c0	// 1101f0c0 <__fpcmp_parts_d+0x8c>
1101f0bc:	6410      	cmphs      	r4, r0
1101f0be:	0fd8      	bf      	0x1101f06e	// 1101f06e <__fpcmp_parts_d+0x3a>
1101f0c0:	3000      	movi      	r0, 0
1101f0c2:	1481      	pop      	r4
1101f0c4:	9161      	ld.w      	r3, (r1, 0x4)
1101f0c6:	9041      	ld.w      	r2, (r0, 0x4)
1101f0c8:	5b09      	subu      	r0, r3, r2
1101f0ca:	1481      	pop      	r4

1101f0cc <LL_SetExtAdvEnable.part.8>:
__attribute__((section(".__xip.code"))) llStatus_t LL_SetExtAdvEnable(uint8  enable,
1101f0cc:	14d4      	push      	r4-r7, r15
1101f0ce:	e5ce1237 	subi      	r14, r14, 568
                if (g_pPeriodicAdvInfo[j].advHandle == pExtAdv[i]->advHandle) {
1101f0d2:	3600      	movi      	r6, 0
__attribute__((section(".__xip.code"))) llStatus_t LL_SetExtAdvEnable(uint8  enable,
1101f0d4:	b849      	st.w      	r2, (r14, 0x24)
1101f0d6:	b86a      	st.w      	r3, (r14, 0x28)
1101f0d8:	9c73      	ld.w      	r3, (r14, 0x24c)
1101f0da:	b821      	st.w      	r1, (r14, 0x4)
1101f0dc:	b86b      	st.w      	r3, (r14, 0x2c)
1101f0de:	b802      	st.w      	r0, (r14, 0x8)
        for (j = 0; j < g_extAdvNumber; j++) {
1101f0e0:	0154      	lrw      	r2, 0x1fff11b0	// 1101f40c <LL_SetExtAdvEnable.part.8+0x340>
1101f0e2:	8260      	ld.b      	r3, (r2, 0x0)
1101f0e4:	b844      	st.w      	r2, (r14, 0x10)
1101f0e6:	b866      	st.w      	r3, (r14, 0x18)
            if (g_pExtendedAdvInfo[j].advHandle == advertising_handle[i]) {
1101f0e8:	0175      	lrw      	r3, 0x1fff0de0	// 1101f410 <LL_SetExtAdvEnable.part.8+0x344>
1101f0ea:	9360      	ld.w      	r3, (r3, 0x0)
1101f0ec:	b865      	st.w      	r3, (r14, 0x14)
            pGlobal_config[LL_EXT_ADV_INTER_PRI_CHN_INT] = 500;//450;
1101f0ee:	0175      	lrw      	r3, 0x1fffa670	// 1101f414 <LL_SetExtAdvEnable.part.8+0x348>
1101f0f0:	9360      	ld.w      	r3, (r3, 0x0)
1101f0f2:	b863      	st.w      	r3, (r14, 0xc)
            for (j = 0; j < g_perioAdvNumber; j ++) {
1101f0f4:	0176      	lrw      	r3, 0x1fff0f88	// 1101f418 <LL_SetExtAdvEnable.part.8+0x34c>
1101f0f6:	8320      	ld.b      	r1, (r3, 0x0)
1101f0f8:	b86d      	st.w      	r3, (r14, 0x34)
1101f0fa:	b828      	st.w      	r1, (r14, 0x20)
                if (g_pPeriodicAdvInfo[j].advHandle == pExtAdv[i]->advHandle) {
1101f0fc:	0137      	lrw      	r1, 0x1fff0de4	// 1101f41c <LL_SetExtAdvEnable.part.8+0x350>
1101f0fe:	9120      	ld.w      	r1, (r1, 0x0)
1101f100:	b827      	st.w      	r1, (r14, 0x1c)
1101f102:	194e      	addi      	r1, r14, 312
1101f104:	b820      	st.w      	r1, (r14, 0x0)
    for (i = 0; i < number_of_sets; i++) {
1101f106:	9861      	ld.w      	r3, (r14, 0x4)
1101f108:	64d9      	cmplt      	r6, r3
1101f10a:	0822      	bt      	0x1101f14e	// 1101f14e <LL_SetExtAdvEnable.part.8+0x82>
1101f10c:	984a      	ld.w      	r2, (r14, 0x28)
1101f10e:	3300      	movi      	r3, 0
            pExtAdv[i]->duration = duration[i] * 10000;     // 10000: unit 10ms, convert to us
1101f110:	ea042710 	movi      	r4, 10000
    for (i = 0; i < number_of_sets; i++) {
1101f114:	9821      	ld.w      	r1, (r14, 0x4)
1101f116:	64c6      	cmpne      	r1, r3
1101f118:	089b      	bt      	0x1101f24e	// 1101f24e <LL_SetExtAdvEnable.part.8+0x182>
    extscanrsp_offset = 0;
1101f11a:	017d      	lrw      	r3, 0x1fffb8bc	// 1101f420 <LL_SetExtAdvEnable.part.8+0x354>
1101f11c:	3200      	movi      	r2, 0
1101f11e:	ab40      	st.h      	r2, (r3, 0x0)
    __ASM volatile("mfcr %0, psr" : "=r"(result));
1101f120:	c0006023 	mfcr      	r3, cr<0, 0>
1101f124:	b863      	st.w      	r3, (r14, 0xc)
    __ASM volatile("psrclr ie");
1101f126:	c0807020 	psrclr      	ie
    if (enable == FALSE) {
1101f12a:	9862      	ld.w      	r3, (r14, 0x8)
1101f12c:	3b40      	cmpnei      	r3, 0
1101f12e:	0ca6      	bf      	0x1101f27a	// 1101f27a <LL_SetExtAdvEnable.part.8+0x1ae>
1101f130:	1b0e      	addi      	r3, r14, 56
1101f132:	b860      	st.w      	r3, (r14, 0x0)
1101f134:	3500      	movi      	r5, 0
                if (g_pAdvSchInfo[j].adv_handler == pExtAdv[i]->advHandle) {  // the adv in the scheduler list
1101f136:	0263      	lrw      	r3, 0x1fff1198	// 1101f424 <LL_SetExtAdvEnable.part.8+0x358>
            for (j = 0; j < g_schExtAdvNum; j++) {
1101f138:	02c3      	lrw      	r6, 0x1fff0f9c	// 1101f428 <LL_SetExtAdvEnable.part.8+0x35c>
                if (g_pAdvSchInfo[j].adv_handler == pExtAdv[i]->advHandle) {  // the adv in the scheduler list
1101f13a:	b862      	st.w      	r3, (r14, 0x8)
        for (i = 0; i < number_of_sets; i++) {
1101f13c:	9861      	ld.w      	r3, (r14, 0x4)
1101f13e:	654e      	cmpne      	r3, r5
1101f140:	0d58      	bf      	0x1101f3f0	// 1101f3f0 <LL_SetExtAdvEnable.part.8+0x324>
1101f142:	9862      	ld.w      	r3, (r14, 0x8)
            for (j = 0; j < g_schExtAdvNum; j++) {
1101f144:	8640      	ld.b      	r2, (r6, 0x0)
1101f146:	9360      	ld.w      	r3, (r3, 0x0)
                if (g_pAdvSchInfo[j].adv_handler == pExtAdv[i]->advHandle) {  // the adv in the scheduler list
1101f148:	3400      	movi      	r4, 0
1101f14a:	3110      	movi      	r1, 16
1101f14c:	0521      	br      	0x1101f38e	// 1101f38e <LL_SetExtAdvEnable.part.8+0x2c2>
1101f14e:	1a0e      	addi      	r2, r14, 56
1101f150:	4662      	lsli      	r3, r6, 2
1101f152:	60c8      	addu      	r3, r2
        pExtAdv[i] = NULL;
1101f154:	3200      	movi      	r2, 0
        pPrdAdv[i] = NULL;
1101f156:	3100      	movi      	r1, 0
        pExtAdv[i] = NULL;
1101f158:	b340      	st.w      	r2, (r3, 0x0)
        pPrdAdv[i] = NULL;
1101f15a:	9840      	ld.w      	r2, (r14, 0x0)
            if (g_pExtendedAdvInfo[j].advHandle == advertising_handle[i]) {
1101f15c:	9889      	ld.w      	r4, (r14, 0x24)
        pPrdAdv[i] = NULL;
1101f15e:	b220      	st.w      	r1, (r2, 0x0)
1101f160:	9825      	ld.w      	r1, (r14, 0x14)
        for (j = 0; j < g_extAdvNumber; j++) {
1101f162:	3200      	movi      	r2, 0
            if (g_pExtendedAdvInfo[j].advHandle == advertising_handle[i]) {
1101f164:	6118      	addu      	r4, r6
        for (j = 0; j < g_extAdvNumber; j++) {
1101f166:	9806      	ld.w      	r0, (r14, 0x18)
1101f168:	6409      	cmplt      	r2, r0
1101f16a:	0c09      	bf      	0x1101f17c	// 1101f17c <LL_SetExtAdvEnable.part.8+0xb0>
            if (g_pExtendedAdvInfo[j].advHandle == advertising_handle[i]) {
1101f16c:	6c07      	mov      	r0, r1
1101f16e:	80a0      	ld.b      	r5, (r0, 0x0)
1101f170:	6dd7      	mov      	r7, r5
1101f172:	84a0      	ld.b      	r5, (r4, 0x0)
1101f174:	2157      	addi      	r1, 88
1101f176:	655e      	cmpne      	r7, r5
1101f178:	0809      	bt      	0x1101f18a	// 1101f18a <LL_SetExtAdvEnable.part.8+0xbe>
                pExtAdv[i] = &g_pExtendedAdvInfo[j];
1101f17a:	b300      	st.w      	r0, (r3, 0x0)
        if (pExtAdv[i] == NULL) {   // adv handle not found
1101f17c:	9380      	ld.w      	r4, (r3, 0x0)
1101f17e:	3c40      	cmpnei      	r4, 0
1101f180:	0807      	bt      	0x1101f18e	// 1101f18e <LL_SetExtAdvEnable.part.8+0xc2>
            return LL_STATUS_ERROR_UNKNOWN_ADV_ID;
1101f182:	3042      	movi      	r0, 66
}
1101f184:	e5ce0237 	addi      	r14, r14, 568
1101f188:	1494      	pop      	r4-r7, r15
        for (j = 0; j < g_extAdvNumber; j++) {
1101f18a:	2200      	addi      	r2, 1
1101f18c:	07ed      	br      	0x1101f166	// 1101f166 <LL_SetExtAdvEnable.part.8+0x9a>
        if (ll_isLegacyAdv(pExtAdv[i])) {
1101f18e:	6c13      	mov      	r0, r4
1101f190:	e0004f42 	bsr      	0x11029014	// 11029014 <cpu_task_stack_init+0x66c>
1101f194:	3840      	cmpnei      	r0, 0
1101f196:	0c3a      	bf      	0x1101f20a	// 1101f20a <LL_SetExtAdvEnable.part.8+0x13e>
            if (pExtAdv[i]->data.advertisingDataLength > 31) {
1101f198:	8c75      	ld.h      	r3, (r4, 0x2a)
1101f19a:	3b1f      	cmphsi      	r3, 32
1101f19c:	0c03      	bf      	0x1101f1a2	// 1101f1a2 <LL_SetExtAdvEnable.part.8+0xd6>
                return LL_STATUS_ERROR_ILLEGAL_PARAM_COMBINATION;
1101f19e:	3012      	movi      	r0, 18
1101f1a0:	07f2      	br      	0x1101f184	// 1101f184 <LL_SetExtAdvEnable.part.8+0xb8>
            pGlobal_config[LL_EXT_ADV_INTER_PRI_CHN_INT] = 1500;    // 5000
1101f1a2:	9863      	ld.w      	r3, (r14, 0xc)
1101f1a4:	ea0205dc 	movi      	r2, 1500
            pGlobal_config[LL_EXT_ADV_INTER_PRI_CHN_INT] = 500;//450;
1101f1a8:	dc432051 	st.w      	r2, (r3, 0x144)
        if ((pExtAdv[i]->parameter.ownAddrType == LL_DEV_ADDR_TYPE_RANDOM
1101f1ac:	8471      	ld.b      	r3, (r4, 0x11)
1101f1ae:	e46320fd 	andi      	r3, r3, 253
1101f1b2:	3b41      	cmpnei      	r3, 1
1101f1b4:	0804      	bt      	0x1101f1bc	// 1101f1bc <LL_SetExtAdvEnable.part.8+0xf0>
            && pExtAdv[i]->parameter.isOwnRandomAddressSet == FALSE) {
1101f1b6:	8472      	ld.b      	r3, (r4, 0x12)
1101f1b8:	3b40      	cmpnei      	r3, 0
1101f1ba:	0ff2      	bf      	0x1101f19e	// 1101f19e <LL_SetExtAdvEnable.part.8+0xd2>
        if (pExtAdv[i]->isPeriodic == TRUE) {
1101f1bc:	d8a40041 	ld.b      	r5, (r4, 0x41)
1101f1c0:	3d41      	cmpnei      	r5, 1
1101f1c2:	0c28      	bf      	0x1101f212	// 1101f212 <LL_SetExtAdvEnable.part.8+0x146>
        if (enable == TRUE) {
1101f1c4:	9862      	ld.w      	r3, (r14, 0x8)
1101f1c6:	3b41      	cmpnei      	r3, 1
1101f1c8:	081c      	bt      	0x1101f200	// 1101f200 <LL_SetExtAdvEnable.part.8+0x134>
            if ((!ll_isLegacyAdv(pExtAdv[i]))          // no legacy adv(legacy adv, scan rsp with len = 0 scan data is allowed)
1101f1ca:	6c13      	mov      	r0, r4
1101f1cc:	e0004f24 	bsr      	0x11029014	// 11029014 <cpu_task_stack_init+0x66c>
1101f1d0:	3840      	cmpnei      	r0, 0
1101f1d2:	080c      	bt      	0x1101f1ea	// 1101f1ea <LL_SetExtAdvEnable.part.8+0x11e>
                && (pExtAdv[i]->parameter.advEventProperties & LE_ADV_PROP_SCAN_BITMASK)   // scannable adv
1101f1d4:	8c63      	ld.h      	r3, (r4, 0x6)
1101f1d6:	e4632002 	andi      	r3, r3, 2
1101f1da:	3b40      	cmpnei      	r3, 0
1101f1dc:	0c07      	bf      	0x1101f1ea	// 1101f1ea <LL_SetExtAdvEnable.part.8+0x11e>
                && (pExtAdv[i]->scanRspData == NULL || pExtAdv[i]->scanRspMaxLength == 0)) {   // no scan rsp data
1101f1de:	946e      	ld.w      	r3, (r4, 0x38)
1101f1e0:	3b40      	cmpnei      	r3, 0
1101f1e2:	0d36      	bf      	0x1101f44e	// 1101f44e <LL_SetExtAdvEnable.part.8+0x382>
1101f1e4:	8c7a      	ld.h      	r3, (r4, 0x34)
1101f1e6:	3b40      	cmpnei      	r3, 0
1101f1e8:	0d33      	bf      	0x1101f44e	// 1101f44e <LL_SetExtAdvEnable.part.8+0x382>
            if ((pExtAdv[i]->isPeriodic == FALSE
1101f1ea:	3d40      	cmpnei      	r5, 0
1101f1ec:	082b      	bt      	0x1101f242	// 1101f242 <LL_SetExtAdvEnable.part.8+0x176>
                 && pExtAdv[i]->data.dataComplete == FALSE
1101f1ee:	d8640028 	ld.b      	r3, (r4, 0x28)
1101f1f2:	3b40      	cmpnei      	r3, 0
1101f1f4:	0806      	bt      	0x1101f200	// 1101f200 <LL_SetExtAdvEnable.part.8+0x134>
                 && !(pExtAdv[i]->parameter.advEventProperties & LE_ADV_PROP_SCAN_BITMASK))   // no adv data for scan adv
1101f1f6:	8c63      	ld.h      	r3, (r4, 0x6)
1101f1f8:	e4632002 	andi      	r3, r3, 2
                || (pExtAdv[i]->isPeriodic == TRUE && pPrdAdv[i]->data.dataComplete == FALSE)) {
1101f1fc:	3b40      	cmpnei      	r3, 0
1101f1fe:	0d28      	bf      	0x1101f44e	// 1101f44e <LL_SetExtAdvEnable.part.8+0x382>
1101f200:	9860      	ld.w      	r3, (r14, 0x0)
1101f202:	2303      	addi      	r3, 4
    for (i = 0; i < number_of_sets; i++) {
1101f204:	2600      	addi      	r6, 1
1101f206:	b860      	st.w      	r3, (r14, 0x0)
1101f208:	077f      	br      	0x1101f106	// 1101f106 <LL_SetExtAdvEnable.part.8+0x3a>
            pGlobal_config[LL_EXT_ADV_INTER_PRI_CHN_INT] = 500;//450;
1101f20a:	32fa      	movi      	r2, 250
1101f20c:	9863      	ld.w      	r3, (r14, 0xc)
1101f20e:	4241      	lsli      	r2, r2, 1
1101f210:	07cc      	br      	0x1101f1a8	// 1101f1a8 <LL_SetExtAdvEnable.part.8+0xdc>
1101f212:	9847      	ld.w      	r2, (r14, 0x1c)
        if (pExtAdv[i]->isPeriodic == TRUE) {
1101f214:	3300      	movi      	r3, 0
            for (j = 0; j < g_perioAdvNumber; j ++) {
1101f216:	9828      	ld.w      	r1, (r14, 0x20)
1101f218:	644d      	cmplt      	r3, r1
1101f21a:	0c0d      	bf      	0x1101f234	// 1101f234 <LL_SetExtAdvEnable.part.8+0x168>
                if (g_pPeriodicAdvInfo[j].advHandle == pExtAdv[i]->advHandle) {
1101f21c:	6c4b      	mov      	r1, r2
1101f21e:	81e0      	ld.b      	r7, (r1, 0x0)
1101f220:	6c1f      	mov      	r0, r7
1101f222:	84e0      	ld.b      	r7, (r4, 0x0)
1101f224:	2273      	addi      	r2, 116
1101f226:	b8ec      	st.w      	r7, (r14, 0x30)
1101f228:	6dc3      	mov      	r7, r0
1101f22a:	980c      	ld.w      	r0, (r14, 0x30)
1101f22c:	641e      	cmpne      	r7, r0
1101f22e:	0808      	bt      	0x1101f23e	// 1101f23e <LL_SetExtAdvEnable.part.8+0x172>
                    pPrdAdv[i] = &g_pPeriodicAdvInfo[j];
1101f230:	9860      	ld.w      	r3, (r14, 0x0)
1101f232:	b320      	st.w      	r1, (r3, 0x0)
            if (pPrdAdv[i] == NULL) {
1101f234:	9860      	ld.w      	r3, (r14, 0x0)
1101f236:	9360      	ld.w      	r3, (r3, 0x0)
1101f238:	3b40      	cmpnei      	r3, 0
1101f23a:	0bc5      	bt      	0x1101f1c4	// 1101f1c4 <LL_SetExtAdvEnable.part.8+0xf8>
1101f23c:	07a3      	br      	0x1101f182	// 1101f182 <LL_SetExtAdvEnable.part.8+0xb6>
            for (j = 0; j < g_perioAdvNumber; j ++) {
1101f23e:	2300      	addi      	r3, 1
1101f240:	07eb      	br      	0x1101f216	// 1101f216 <LL_SetExtAdvEnable.part.8+0x14a>
                || (pExtAdv[i]->isPeriodic == TRUE && pPrdAdv[i]->data.dataComplete == FALSE)) {
1101f242:	3d41      	cmpnei      	r5, 1
1101f244:	0bde      	bt      	0x1101f200	// 1101f200 <LL_SetExtAdvEnable.part.8+0x134>
1101f246:	9860      	ld.w      	r3, (r14, 0x0)
1101f248:	9360      	ld.w      	r3, (r3, 0x0)
1101f24a:	8364      	ld.b      	r3, (r3, 0x4)
1101f24c:	07d8      	br      	0x1101f1fc	// 1101f1fc <LL_SetExtAdvEnable.part.8+0x130>
        pExtAdv[i]->active = enable;
1101f24e:	180e      	addi      	r0, r14, 56
1101f250:	4322      	lsli      	r1, r3, 2
1101f252:	6040      	addu      	r1, r0
1101f254:	9120      	ld.w      	r1, (r1, 0x0)
1101f256:	d80e0008 	ld.b      	r0, (r14, 0x8)
1101f25a:	dc010042 	st.b      	r0, (r1, 0x42)
        if (enable == TRUE) {
1101f25e:	9802      	ld.w      	r0, (r14, 0x8)
1101f260:	3841      	cmpnei      	r0, 1
1101f262:	0809      	bt      	0x1101f274	// 1101f274 <LL_SetExtAdvEnable.part.8+0x1a8>
            pExtAdv[i]->duration = duration[i] * 10000;     // 10000: unit 10ms, convert to us
1101f264:	8a00      	ld.h      	r0, (r2, 0x0)
1101f266:	7c10      	mult      	r0, r4
1101f268:	b10f      	st.w      	r0, (r1, 0x3c)
            pExtAdv[i]->maxExtAdvEvents = max_extended_advertising_events[i];
1101f26a:	980b      	ld.w      	r0, (r14, 0x2c)
1101f26c:	600c      	addu      	r0, r3
1101f26e:	8000      	ld.b      	r0, (r0, 0x0)
1101f270:	dc010040 	st.b      	r0, (r1, 0x40)
    for (i = 0; i < number_of_sets; i++) {
1101f274:	2300      	addi      	r3, 1
1101f276:	2201      	addi      	r2, 2
1101f278:	074e      	br      	0x1101f114	// 1101f114 <LL_SetExtAdvEnable.part.8+0x48>
        if (number_of_sets == 0) {
1101f27a:	9861      	ld.w      	r3, (r14, 0x4)
1101f27c:	3b40      	cmpnei      	r3, 0
1101f27e:	0818      	bt      	0x1101f2ae	// 1101f2ae <LL_SetExtAdvEnable.part.8+0x1e2>
1101f280:	3400      	movi      	r4, 0
                if (g_pAdvSchInfo[i].adv_handler == LL_INVALID_ADV_SET_HANDLE) {
1101f282:	13a9      	lrw      	r5, 0x1fff1198	// 1101f424 <LL_SetExtAdvEnable.part.8+0x358>
            for (i = 0; i < g_extAdvNumber; i ++) {    // bug fixed 04-07
1101f284:	9864      	ld.w      	r3, (r14, 0x10)
1101f286:	8360      	ld.b      	r3, (r3, 0x0)
1101f288:	64d1      	cmplt      	r4, r3
1101f28a:	0834      	bt      	0x1101f2f2	// 1101f2f2 <LL_SetExtAdvEnable.part.8+0x226>
1101f28c:	3400      	movi      	r4, 0
                if (g_pAdvSchInfo_periodic[i].adv_handler == LL_INVALID_ADV_SET_HANDLE) {
1101f28e:	13a8      	lrw      	r5, 0x1fff1180	// 1101f42c <LL_SetExtAdvEnable.part.8+0x360>
            for (i = 0; i < g_perioAdvNumber; i ++) {
1101f290:	986d      	ld.w      	r3, (r14, 0x34)
1101f292:	8360      	ld.b      	r3, (r3, 0x0)
1101f294:	64d1      	cmplt      	r4, r3
1101f296:	083a      	bt      	0x1101f30a	// 1101f30a <LL_SetExtAdvEnable.part.8+0x23e>
        osal_stop_timerEx(LL_TaskID, LL_EVT_RPA_TIMEOUT);
1101f298:	1366      	lrw      	r3, 0x1fff14ac	// 1101f430 <LL_SetExtAdvEnable.part.8+0x364>
1101f29a:	3180      	movi      	r1, 128
1101f29c:	8300      	ld.b      	r0, (r3, 0x0)
1101f29e:	4128      	lsli      	r1, r1, 8
1101f2a0:	e0005082 	bsr      	0x110293a4	// 110293a4 <cpu_task_stack_init+0x9fc>
    __ASM volatile("mtcr %0, psr" : : "r"(psr));
1101f2a4:	9863      	ld.w      	r3, (r14, 0xc)
1101f2a6:	c0036420 	mtcr      	r3, cr<0, 0>
    return (LL_STATUS_SUCCESS);
1101f2aa:	3000      	movi      	r0, 0
1101f2ac:	076c      	br      	0x1101f184	// 1101f184 <LL_SetExtAdvEnable.part.8+0xb8>
1101f2ae:	9861      	ld.w      	r3, (r14, 0x4)
1101f2b0:	4362      	lsli      	r3, r3, 2
1101f2b2:	b861      	st.w      	r3, (r14, 0x4)
        if (number_of_sets == 0) {
1101f2b4:	3400      	movi      	r4, 0
                    for (j = 0; j < g_schExtAdvNum_periodic; j ++) {
1101f2b6:	1360      	lrw      	r3, 0x1fff154f	// 1101f434 <LL_SetExtAdvEnable.part.8+0x368>
1101f2b8:	b862      	st.w      	r3, (r14, 0x8)
            for (i = 0; i < number_of_sets; i ++) {
1101f2ba:	9861      	ld.w      	r3, (r14, 0x4)
1101f2bc:	650e      	cmpne      	r3, r4
1101f2be:	0fed      	bf      	0x1101f298	// 1101f298 <LL_SetExtAdvEnable.part.8+0x1cc>
                if (pExtAdv[i]->isPeriodic == FALSE) {
1101f2c0:	1a0e      	addi      	r2, r14, 56
1101f2c2:	5c68      	addu      	r3, r4, r2
1101f2c4:	9360      	ld.w      	r3, (r3, 0x0)
1101f2c6:	d8430041 	ld.b      	r2, (r3, 0x41)
1101f2ca:	3a40      	cmpnei      	r2, 0
1101f2cc:	0837      	bt      	0x1101f33a	// 1101f33a <LL_SetExtAdvEnable.part.8+0x26e>
                    for (j = 0; j < g_schExtAdvNum; j++) {
1101f2ce:	1257      	lrw      	r2, 0x1fff0f9c	// 1101f428 <LL_SetExtAdvEnable.part.8+0x35c>
                        if (g_pAdvSchInfo[j].adv_handler == pExtAdv[i]->advHandle) {
1101f2d0:	3000      	movi      	r0, 0
                    for (j = 0; j < g_schExtAdvNum; j++) {
1101f2d2:	8220      	ld.b      	r1, (r2, 0x0)
                        if (g_pAdvSchInfo[j].adv_handler == pExtAdv[i]->advHandle) {
1101f2d4:	1254      	lrw      	r2, 0x1fff1198	// 1101f424 <LL_SetExtAdvEnable.part.8+0x358>
1101f2d6:	3510      	movi      	r5, 16
1101f2d8:	9240      	ld.w      	r2, (r2, 0x0)
                    for (j = 0; j < g_schExtAdvNum; j++) {
1101f2da:	6441      	cmplt      	r0, r1
1101f2dc:	0c09      	bf      	0x1101f2ee	// 1101f2ee <LL_SetExtAdvEnable.part.8+0x222>
                        if (g_pAdvSchInfo[j].adv_handler == pExtAdv[i]->advHandle) {
1101f2de:	82c0      	ld.b      	r6, (r2, 0x0)
1101f2e0:	83e0      	ld.b      	r7, (r3, 0x0)
1101f2e2:	6094      	addu      	r2, r5
1101f2e4:	659e      	cmpne      	r7, r6
1101f2e6:	0828      	bt      	0x1101f336	// 1101f336 <LL_SetExtAdvEnable.part.8+0x26a>
                            ll_delete_adv_task(j);
1101f2e8:	7400      	zextb      	r0, r0
1101f2ea:	e0004e53 	bsr      	0x11028f90	// 11028f90 <cpu_task_stack_init+0x5e8>
1101f2ee:	2403      	addi      	r4, 4
1101f2f0:	07e5      	br      	0x1101f2ba	// 1101f2ba <LL_SetExtAdvEnable.part.8+0x1ee>
                if (g_pAdvSchInfo[i].adv_handler == LL_INVALID_ADV_SET_HANDLE) {
1101f2f2:	4444      	lsli      	r2, r4, 4
1101f2f4:	9560      	ld.w      	r3, (r5, 0x0)
1101f2f6:	60c8      	addu      	r3, r2
1101f2f8:	8360      	ld.b      	r3, (r3, 0x0)
1101f2fa:	eb4300ff 	cmpnei      	r3, 255
1101f2fe:	0c04      	bf      	0x1101f306	// 1101f306 <LL_SetExtAdvEnable.part.8+0x23a>
                ll_delete_adv_task(i);
1101f300:	7410      	zextb      	r0, r4
1101f302:	e0004e47 	bsr      	0x11028f90	// 11028f90 <cpu_task_stack_init+0x5e8>
            for (i = 0; i < g_extAdvNumber; i ++) {    // bug fixed 04-07
1101f306:	2400      	addi      	r4, 1
1101f308:	07be      	br      	0x1101f284	// 1101f284 <LL_SetExtAdvEnable.part.8+0x1b8>
                if (g_pAdvSchInfo_periodic[i].adv_handler == LL_INVALID_ADV_SET_HANDLE) {
1101f30a:	4462      	lsli      	r3, r4, 2
1101f30c:	60d0      	addu      	r3, r4
1101f30e:	4342      	lsli      	r2, r3, 2
1101f310:	9560      	ld.w      	r3, (r5, 0x0)
1101f312:	60c8      	addu      	r3, r2
1101f314:	8340      	ld.b      	r2, (r3, 0x0)
1101f316:	eb4200ff 	cmpnei      	r2, 255
1101f31a:	0c0c      	bf      	0x1101f332	// 1101f332 <LL_SetExtAdvEnable.part.8+0x266>
                g_pAdvSchInfo_periodic[i].pAdvInfo->active = FALSE;
1101f31c:	9342      	ld.w      	r2, (r3, 0x8)
1101f31e:	3100      	movi      	r1, 0
1101f320:	dc220042 	st.b      	r1, (r2, 0x42)
                if (g_pAdvSchInfo_periodic[i].pAdvInfo_prd->active == FALSE) {
1101f324:	9361      	ld.w      	r3, (r3, 0x4)
1101f326:	8372      	ld.b      	r3, (r3, 0x12)
1101f328:	3b40      	cmpnei      	r3, 0
1101f32a:	0804      	bt      	0x1101f332	// 1101f332 <LL_SetExtAdvEnable.part.8+0x266>
                    ll_delete_adv_task_periodic(i);
1101f32c:	7410      	zextb      	r0, r4
1101f32e:	e0004df5 	bsr      	0x11028f18	// 11028f18 <cpu_task_stack_init+0x570>
            for (i = 0; i < g_perioAdvNumber; i ++) {
1101f332:	2400      	addi      	r4, 1
1101f334:	07ae      	br      	0x1101f290	// 1101f290 <LL_SetExtAdvEnable.part.8+0x1c4>
                    for (j = 0; j < g_schExtAdvNum; j++) {
1101f336:	2000      	addi      	r0, 1
1101f338:	07d1      	br      	0x1101f2da	// 1101f2da <LL_SetExtAdvEnable.part.8+0x20e>
                    pExtAdv[i]->active = FALSE;
1101f33a:	3200      	movi      	r2, 0
                    for (j = 0; j < g_schExtAdvNum_periodic; j ++) {
1101f33c:	3000      	movi      	r0, 0
                    pExtAdv[i]->active = FALSE;
1101f33e:	dc430042 	st.b      	r2, (r3, 0x42)
                    for (j = 0; j < g_schExtAdvNum_periodic; j ++) {
1101f342:	9842      	ld.w      	r2, (r14, 0x8)
1101f344:	3514      	movi      	r5, 20
1101f346:	8240      	ld.b      	r2, (r2, 0x0)
1101f348:	b840      	st.w      	r2, (r14, 0x0)
                        if (g_pAdvSchInfo_periodic[j].adv_handler == pExtAdv[i]->advHandle) {
1101f34a:	1159      	lrw      	r2, 0x1fff1180	// 1101f42c <LL_SetExtAdvEnable.part.8+0x360>
1101f34c:	9240      	ld.w      	r2, (r2, 0x0)
                    for (j = 0; j < g_schExtAdvNum_periodic; j ++) {
1101f34e:	9820      	ld.w      	r1, (r14, 0x0)
1101f350:	6441      	cmplt      	r0, r1
1101f352:	0fce      	bf      	0x1101f2ee	// 1101f2ee <LL_SetExtAdvEnable.part.8+0x222>
                        if (g_pAdvSchInfo_periodic[j].adv_handler == pExtAdv[i]->advHandle) {
1101f354:	6c4b      	mov      	r1, r2
1101f356:	81e0      	ld.b      	r7, (r1, 0x0)
1101f358:	83c0      	ld.b      	r6, (r3, 0x0)
1101f35a:	6094      	addu      	r2, r5
1101f35c:	659e      	cmpne      	r7, r6
1101f35e:	080e      	bt      	0x1101f37a	// 1101f37a <LL_SetExtAdvEnable.part.8+0x2ae>
                            g_pAdvSchInfo_periodic[j].nextEventRemainder = LL_INVALID_TIME;
1101f360:	3300      	movi      	r3, 0
1101f362:	2b00      	subi      	r3, 1
1101f364:	b163      	st.w      	r3, (r1, 0xc)
                            if (pPrdAdv[i]->active == FALSE) {
1101f366:	1b4e      	addi      	r3, r14, 312
1101f368:	60d0      	addu      	r3, r4
1101f36a:	9360      	ld.w      	r3, (r3, 0x0)
1101f36c:	8372      	ld.b      	r3, (r3, 0x12)
1101f36e:	3b40      	cmpnei      	r3, 0
1101f370:	0bbf      	bt      	0x1101f2ee	// 1101f2ee <LL_SetExtAdvEnable.part.8+0x222>
                                ll_delete_adv_task_periodic(j);
1101f372:	7400      	zextb      	r0, r0
1101f374:	e0004dd2 	bsr      	0x11028f18	// 11028f18 <cpu_task_stack_init+0x570>
1101f378:	07bb      	br      	0x1101f2ee	// 1101f2ee <LL_SetExtAdvEnable.part.8+0x222>
                    for (j = 0; j < g_schExtAdvNum_periodic; j ++) {
1101f37a:	2000      	addi      	r0, 1
1101f37c:	07e9      	br      	0x1101f34e	// 1101f34e <LL_SetExtAdvEnable.part.8+0x282>
                if (g_pAdvSchInfo[j].adv_handler == pExtAdv[i]->advHandle) {  // the adv in the scheduler list
1101f37e:	98e0      	ld.w      	r7, (r14, 0x0)
1101f380:	8300      	ld.b      	r0, (r3, 0x0)
1101f382:	97e0      	ld.w      	r7, (r7, 0x0)
1101f384:	60c4      	addu      	r3, r1
1101f386:	87e0      	ld.b      	r7, (r7, 0x0)
1101f388:	641e      	cmpne      	r7, r0
1101f38a:	0c2c      	bf      	0x1101f3e2	// 1101f3e2 <LL_SetExtAdvEnable.part.8+0x316>
            for (j = 0; j < g_schExtAdvNum; j++) {
1101f38c:	2400      	addi      	r4, 1
1101f38e:	6491      	cmplt      	r4, r2
1101f390:	0bf7      	bt      	0x1101f37e	// 1101f37e <LL_SetExtAdvEnable.part.8+0x2b2>
            if (j == g_schExtAdvNum && pExtAdv[i]->isPeriodic == FALSE) {
1101f392:	6492      	cmpne      	r4, r2
1101f394:	0827      	bt      	0x1101f3e2	// 1101f3e2 <LL_SetExtAdvEnable.part.8+0x316>
1101f396:	9860      	ld.w      	r3, (r14, 0x0)
1101f398:	9300      	ld.w      	r0, (r3, 0x0)
1101f39a:	d8600041 	ld.b      	r3, (r0, 0x41)
1101f39e:	3b40      	cmpnei      	r3, 0
1101f3a0:	0812      	bt      	0x1101f3c4	// 1101f3c4 <LL_SetExtAdvEnable.part.8+0x2f8>
                if (/*!ll_isLegacyAdv(pExtAdv[i]) &&*/ g_schExtAdvNum == 0) { // TODO: check legacy/aux PDU required
1101f3a2:	3c40      	cmpnei      	r4, 0
1101f3a4:	080b      	bt      	0x1101f3ba	// 1101f3ba <LL_SetExtAdvEnable.part.8+0x2ee>
                    g_advSlotPeriodic = pExtAdv[i]->primary_advertising_interval;
1101f3a6:	1145      	lrw      	r2, 0x1fff13a8	// 1101f438 <LL_SetExtAdvEnable.part.8+0x36c>
1101f3a8:	9071      	ld.w      	r3, (r0, 0x44)
1101f3aa:	b260      	st.w      	r3, (r2, 0x0)
                    if (g_extAdvNumber > 4) {
1101f3ac:	9844      	ld.w      	r2, (r14, 0x10)
1101f3ae:	8240      	ld.b      	r2, (r2, 0x0)
1101f3b0:	3a04      	cmphsi      	r2, 5
1101f3b2:	1143      	lrw      	r2, 0x1fff1540	// 1101f43c <LL_SetExtAdvEnable.part.8+0x370>
1101f3b4:	0c1c      	bf      	0x1101f3ec	// 1101f3ec <LL_SetExtAdvEnable.part.8+0x320>
                        g_advPerSlotTick = g_advSlotPeriodic >> 3;
1101f3b6:	4b63      	lsri      	r3, r3, 3
                        g_advPerSlotTick = g_advSlotPeriodic >> 2;
1101f3b8:	b260      	st.w      	r3, (r2, 0x0)
                ll_add_adv_task(pExtAdv[i]);      // TODO: if add adv task failed, return failure to host
1101f3ba:	e0004cf5 	bsr      	0x11028da4	// 11028da4 <cpu_task_stack_init+0x3fc>
            if (j == g_schExtAdvNum && pExtAdv[i]->isPeriodic == TRUE) {
1101f3be:	8660      	ld.b      	r3, (r6, 0x0)
1101f3c0:	64d2      	cmpne      	r4, r3
1101f3c2:	0810      	bt      	0x1101f3e2	// 1101f3e2 <LL_SetExtAdvEnable.part.8+0x316>
1101f3c4:	9860      	ld.w      	r3, (r14, 0x0)
1101f3c6:	9320      	ld.w      	r1, (r3, 0x0)
1101f3c8:	d8610041 	ld.b      	r3, (r1, 0x41)
1101f3cc:	3b41      	cmpnei      	r3, 1
1101f3ce:	080a      	bt      	0x1101f3e2	// 1101f3e2 <LL_SetExtAdvEnable.part.8+0x316>
                if (pPrdAdv[i]->active == TRUE) {
1101f3d0:	4562      	lsli      	r3, r5, 2
1101f3d2:	1a4e      	addi      	r2, r14, 312
1101f3d4:	60c8      	addu      	r3, r2
1101f3d6:	9300      	ld.w      	r0, (r3, 0x0)
1101f3d8:	8072      	ld.b      	r3, (r0, 0x12)
1101f3da:	3b41      	cmpnei      	r3, 1
1101f3dc:	0803      	bt      	0x1101f3e2	// 1101f3e2 <LL_SetExtAdvEnable.part.8+0x316>
                    ll_add_adv_task_periodic(pPrdAdv[i], pExtAdv[i]);    // TODO: if add adv task failed, return failure to host
1101f3de:	e0004ee7 	bsr      	0x110291ac	// 110291ac <cpu_task_stack_init+0x804>
1101f3e2:	9860      	ld.w      	r3, (r14, 0x0)
1101f3e4:	2303      	addi      	r3, 4
        for (i = 0; i < number_of_sets; i++) {
1101f3e6:	2500      	addi      	r5, 1
1101f3e8:	b860      	st.w      	r3, (r14, 0x0)
1101f3ea:	06a9      	br      	0x1101f13c	// 1101f13c <LL_SetExtAdvEnable.part.8+0x70>
                        g_advPerSlotTick = g_advSlotPeriodic >> 2;
1101f3ec:	4b62      	lsri      	r3, r3, 2
1101f3ee:	07e5      	br      	0x1101f3b8	// 1101f3b8 <LL_SetExtAdvEnable.part.8+0x2ec>
        if (g_llRlDeviceNum > 0) {
1101f3f0:	1074      	lrw      	r3, 0x1fff119c	// 1101f440 <LL_SetExtAdvEnable.part.8+0x374>
1101f3f2:	8360      	ld.b      	r3, (r3, 0x0)
1101f3f4:	3b40      	cmpnei      	r3, 0
1101f3f6:	0f57      	bf      	0x1101f2a4	// 1101f2a4 <LL_SetExtAdvEnable.part.8+0x1d8>
            osal_start_timerEx(LL_TaskID, LL_EVT_RPA_TIMEOUT, g_llRlTimeout * 1000);
1101f3f8:	1073      	lrw      	r3, 0x1fff088a	// 1101f444 <LL_SetExtAdvEnable.part.8+0x378>
1101f3fa:	3180      	movi      	r1, 128
1101f3fc:	8b40      	ld.h      	r2, (r3, 0x0)
1101f3fe:	33fa      	movi      	r3, 250
1101f400:	4362      	lsli      	r3, r3, 2
1101f402:	7c8c      	mult      	r2, r3
1101f404:	106b      	lrw      	r3, 0x1fff14ac	// 1101f430 <LL_SetExtAdvEnable.part.8+0x364>
1101f406:	4128      	lsli      	r1, r1, 8
1101f408:	8300      	ld.b      	r0, (r3, 0x0)
1101f40a:	041f      	br      	0x1101f448	// 1101f448 <LL_SetExtAdvEnable.part.8+0x37c>
1101f40c:	1fff11b0 	.long	0x1fff11b0
1101f410:	1fff0de0 	.long	0x1fff0de0
1101f414:	1fffa670 	.long	0x1fffa670
1101f418:	1fff0f88 	.long	0x1fff0f88
1101f41c:	1fff0de4 	.long	0x1fff0de4
1101f420:	1fffb8bc 	.long	0x1fffb8bc
1101f424:	1fff1198 	.long	0x1fff1198
1101f428:	1fff0f9c 	.long	0x1fff0f9c
1101f42c:	1fff1180 	.long	0x1fff1180
1101f430:	1fff14ac 	.long	0x1fff14ac
1101f434:	1fff154f 	.long	0x1fff154f
1101f438:	1fff13a8 	.long	0x1fff13a8
1101f43c:	1fff1540 	.long	0x1fff1540
1101f440:	1fff119c 	.long	0x1fff119c
1101f444:	1fff088a 	.long	0x1fff088a
1101f448:	e0004cde 	bsr      	0x11028e04	// 11028e04 <cpu_task_stack_init+0x45c>
1101f44c:	072c      	br      	0x1101f2a4	// 1101f2a4 <LL_SetExtAdvEnable.part.8+0x1d8>
                return    LL_STATUS_ERROR_COMMAND_DISALLOWED;
1101f44e:	300c      	movi      	r0, 12
1101f450:	069a      	br      	0x1101f184	// 1101f184 <LL_SetExtAdvEnable.part.8+0xb8>

1101f452 <ll_allocAuxAdvTimeSlot>:
{
1101f452:	14d4      	push      	r4-r7, r15
1101f454:	1422      	subi      	r14, r14, 8
    p_scheduler = &g_pAdvSchInfo[index];
1101f456:	10fd      	lrw      	r7, 0x1fff1198	// 1101f4c8 <ll_allocAuxAdvTimeSlot+0x76>
    pri_adv_duration = pGlobal_config[LL_EXT_ADV_INTER_PRI_CHN_INT] * 3 + (pGlobal_config[LL_EXT_ADV_PROCESS_TARGET]);
1101f458:	10dd      	lrw      	r6, 0x1fffa670	// 1101f4cc <ll_allocAuxAdvTimeSlot+0x7a>
    p_scheduler = &g_pAdvSchInfo[index];
1101f45a:	4064      	lsli      	r3, r0, 4
1101f45c:	97a0      	ld.w      	r5, (r7, 0x0)
1101f45e:	614c      	addu      	r5, r3
    pri_adv_duration = pGlobal_config[LL_EXT_ADV_INTER_PRI_CHN_INT] * 3 + (pGlobal_config[LL_EXT_ADV_PROCESS_TARGET]);
1101f460:	9660      	ld.w      	r3, (r6, 0x0)
{
1101f462:	6d03      	mov      	r4, r0
    pri_adv_duration = pGlobal_config[LL_EXT_ADV_INTER_PRI_CHN_INT] * 3 + (pGlobal_config[LL_EXT_ADV_PROCESS_TARGET]);
1101f464:	d8432051 	ld.w      	r2, (r3, 0x144)
1101f468:	d8632063 	ld.w      	r3, (r3, 0x18c)
1101f46c:	b841      	st.w      	r2, (r14, 0x4)
1101f46e:	b860      	st.w      	r3, (r14, 0x0)
    if (!isTimer4Running()) {
1101f470:	e0004eda 	bsr      	0x11029224	// 11029224 <cpu_task_stack_init+0x87c>
1101f474:	9860      	ld.w      	r3, (r14, 0x0)
1101f476:	3840      	cmpnei      	r0, 0
1101f478:	9841      	ld.w      	r2, (r14, 0x4)
1101f47a:	0813      	bt      	0x1101f4a0	// 1101f4a0 <ll_allocAuxAdvTimeSlot+0x4e>
    pri_adv_duration = pGlobal_config[LL_EXT_ADV_INTER_PRI_CHN_INT] * 3 + (pGlobal_config[LL_EXT_ADV_PROCESS_TARGET]);
1101f47c:	4281      	lsli      	r4, r2, 1
1101f47e:	6108      	addu      	r4, r2
1101f480:	610c      	addu      	r4, r3
        if (isTimer1Running()) {
1101f482:	e0004c49 	bsr      	0x11028d14	// 11028d14 <cpu_task_stack_init+0x36c>
1101f486:	3840      	cmpnei      	r0, 0
1101f488:	0c19      	bf      	0x1101f4ba	// 1101f4ba <ll_allocAuxAdvTimeSlot+0x68>
            p_scheduler->auxPduRemainder = read_LL_remainder_time1() + pri_adv_duration + pGlobal_config[LL_CONN_TASK_DURATION];
1101f48a:	e0004db3 	bsr      	0x11028ff0	// 11028ff0 <cpu_task_stack_init+0x648>
1101f48e:	9660      	ld.w      	r3, (r6, 0x0)
1101f490:	d8632058 	ld.w      	r3, (r3, 0x160)
1101f494:	610c      	addu      	r4, r3
1101f496:	6010      	addu      	r0, r4
1101f498:	b503      	st.w      	r0, (r5, 0xc)
}
1101f49a:	3001      	movi      	r0, 1
1101f49c:	1402      	addi      	r14, r14, 8
1101f49e:	1494      	pop      	r4-r7, r15
    p_current_scheduler = &g_pAdvSchInfo[g_currentExtAdv];
1101f4a0:	106c      	lrw      	r3, 0x1fff12dc	// 1101f4d0 <ll_allocAuxAdvTimeSlot+0x7e>
    p_scheduler->auxPduRemainder = p_current_scheduler->auxPduRemainder +
1101f4a2:	9740      	ld.w      	r2, (r7, 0x0)
    p_current_scheduler = &g_pAdvSchInfo[g_currentExtAdv];
1101f4a4:	8360      	ld.b      	r3, (r3, 0x0)
    p_scheduler->auxPduRemainder = p_current_scheduler->auxPduRemainder +
1101f4a6:	4324      	lsli      	r1, r3, 4
                                   (index > g_currentExtAdv ? ((index - g_currentExtAdv) * g_advPerSlotTick) : (g_advSlotPeriodic + (index - g_currentExtAdv) * g_advPerSlotTick));
1101f4a8:	650c      	cmphs      	r3, r4
1101f4aa:	610e      	subu      	r4, r3
1101f4ac:	106a      	lrw      	r3, 0x1fff1540	// 1101f4d4 <ll_allocAuxAdvTimeSlot+0x82>
    p_scheduler->auxPduRemainder = p_current_scheduler->auxPduRemainder +
1101f4ae:	6084      	addu      	r2, r1
                                   (index > g_currentExtAdv ? ((index - g_currentExtAdv) * g_advPerSlotTick) : (g_advSlotPeriodic + (index - g_currentExtAdv) * g_advPerSlotTick));
1101f4b0:	9360      	ld.w      	r3, (r3, 0x0)
    p_scheduler->auxPduRemainder = p_current_scheduler->auxPduRemainder +
1101f4b2:	9243      	ld.w      	r2, (r2, 0xc)
                                   (index > g_currentExtAdv ? ((index - g_currentExtAdv) * g_advPerSlotTick) : (g_advSlotPeriodic + (index - g_currentExtAdv) * g_advPerSlotTick));
1101f4b4:	7d0c      	mult      	r4, r3
1101f4b6:	0804      	bt      	0x1101f4be	// 1101f4be <ll_allocAuxAdvTimeSlot+0x6c>
    p_scheduler->auxPduRemainder = p_current_scheduler->auxPduRemainder +
1101f4b8:	6108      	addu      	r4, r2
1101f4ba:	b583      	st.w      	r4, (r5, 0xc)
    return ret;
1101f4bc:	07ef      	br      	0x1101f49a	// 1101f49a <ll_allocAuxAdvTimeSlot+0x48>
                                   (index > g_currentExtAdv ? ((index - g_currentExtAdv) * g_advPerSlotTick) : (g_advSlotPeriodic + (index - g_currentExtAdv) * g_advPerSlotTick));
1101f4be:	1067      	lrw      	r3, 0x1fff13a8	// 1101f4d8 <ll_allocAuxAdvTimeSlot+0x86>
1101f4c0:	9360      	ld.w      	r3, (r3, 0x0)
1101f4c2:	610c      	addu      	r4, r3
1101f4c4:	07fa      	br      	0x1101f4b8	// 1101f4b8 <ll_allocAuxAdvTimeSlot+0x66>
1101f4c6:	0000      	bkpt
1101f4c8:	1fff1198 	.long	0x1fff1198
1101f4cc:	1fffa670 	.long	0x1fffa670
1101f4d0:	1fff12dc 	.long	0x1fff12dc
1101f4d4:	1fff1540 	.long	0x1fff1540
1101f4d8:	1fff13a8 	.long	0x1fff13a8

1101f4dc <ll_add_adv_task1>:
{
1101f4dc:	14d4      	push      	r4-r7, r15
1101f4de:	1423      	subi      	r14, r14, 12
1101f4e0:	6d03      	mov      	r4, r0
    uint8   isLegacy = ll_isLegacyAdv(pExtAdv);
1101f4e2:	e0004d99 	bsr      	0x11029014	// 11029014 <cpu_task_stack_init+0x66c>
    temp = pExtAdv->parameter.priAdvChnMap;
1101f4e6:	84b0      	ld.b      	r5, (r4, 0x10)
    pExtAdv->currentChn = ((temp & ((~temp) + 1)) >> 1) + 37;       // calculate 1st adv channel
1101f4e8:	3200      	movi      	r2, 0
    if (g_currentExtAdv == LL_INVALID_ADV_SET_HANDLE) {   //    if (!isTimer4Running())
1101f4ea:	12df      	lrw      	r6, 0x1fff12dc	// 1101f664 <ll_add_adv_task1+0x188>
    pExtAdv->currentChn = ((temp & ((~temp) + 1)) >> 1) + 37;       // calculate 1st adv channel
1101f4ec:	6096      	subu      	r2, r5
1101f4ee:	6894      	and      	r2, r5
1101f4f0:	5241      	asri      	r2, r2, 1
1101f4f2:	2224      	addi      	r2, 37
    pExtAdv->adv_event_counter = 0;
1101f4f4:	3300      	movi      	r3, 0
    pExtAdv->currentChn = ((temp & ((~temp) + 1)) >> 1) + 37;       // calculate 1st adv channel
1101f4f6:	dc440052 	st.b      	r2, (r4, 0x52)
    if (g_currentExtAdv == LL_INVALID_ADV_SET_HANDLE) {   //    if (!isTimer4Running())
1101f4fa:	8640      	ld.b      	r2, (r6, 0x0)
    pExtAdv->adv_event_counter = 0;
1101f4fc:	dc641024 	st.h      	r3, (r4, 0x48)
    pExtAdv->currentAdvOffset = 0;
1101f500:	dc64102a 	st.h      	r3, (r4, 0x54)
    if (g_currentExtAdv == LL_INVALID_ADV_SET_HANDLE) {   //    if (!isTimer4Running())
1101f504:	eb4200ff 	cmpnei      	r2, 255
    pExtAdv->adv_event_duration = 0;
1101f508:	3300      	movi      	r3, 0
    uint8   isLegacy = ll_isLegacyAdv(pExtAdv);
1101f50a:	b800      	st.w      	r0, (r14, 0x0)
    pExtAdv->adv_event_duration = 0;
1101f50c:	b473      	st.w      	r3, (r4, 0x4c)
1101f50e:	1237      	lrw      	r1, 0x1fff1198	// 1101f668 <ll_add_adv_task1+0x18c>
    if (g_currentExtAdv == LL_INVALID_ADV_SET_HANDLE) {   //    if (!isTimer4Running())
1101f510:	0862      	bt      	0x1101f5d4	// 1101f5d4 <ll_add_adv_task1+0xf8>
        g_schExtAdvNum = 1;
1101f512:	1257      	lrw      	r2, 0x1fff0f9c	// 1101f66c <ll_add_adv_task1+0x190>
1101f514:	3301      	movi      	r3, 1
        p_current_scheduler = &g_pAdvSchInfo[g_currentExtAdv];
1101f516:	91e0      	ld.w      	r7, (r1, 0x0)
        g_schExtAdvNum = 1;
1101f518:	a260      	st.b      	r3, (r2, 0x0)
        g_currentExtAdv = 0;          // scheduler index = 0
1101f51a:	3300      	movi      	r3, 0
        p_current_scheduler = &g_pAdvSchInfo[g_currentExtAdv];
1101f51c:	b821      	st.w      	r1, (r14, 0x4)
        g_currentExtAdv = 0;          // scheduler index = 0
1101f51e:	a660      	st.b      	r3, (r6, 0x0)
        g_timerExpiryTick = read_current_fine_time();                 // fake timer expiry tick
1101f520:	e0004de0 	bsr      	0x110290e0	// 110290e0 <cpu_task_stack_init+0x738>
        if (isLegacy
1101f524:	9860      	ld.w      	r3, (r14, 0x0)
1101f526:	9821      	ld.w      	r1, (r14, 0x4)
1101f528:	3b40      	cmpnei      	r3, 0
        g_timerExpiryTick = read_current_fine_time();                 // fake timer expiry tick
1101f52a:	1252      	lrw      	r2, 0x1fff0f8c	// 1101f670 <ll_add_adv_task1+0x194>
1101f52c:	b200      	st.w      	r0, (r2, 0x0)
        if (isLegacy
1101f52e:	0809      	bt      	0x1101f540	// 1101f540 <ll_add_adv_task1+0x64>
            || (pExtAdv->data.advertisingDataLength == 0
1101f530:	8c75      	ld.h      	r3, (r4, 0x2a)
1101f532:	3b40      	cmpnei      	r3, 0
1101f534:	0821      	bt      	0x1101f576	// 1101f576 <ll_add_adv_task1+0x9a>
                && !(pExtAdv->parameter.advEventProperties & LE_ADV_PROP_CONN_BITMASK))) {  // adv data length == 0, no aux PDU is required. to test
1101f536:	8c63      	ld.h      	r3, (r4, 0x6)
1101f538:	e4632003 	andi      	r3, r3, 3
1101f53c:	3b40      	cmpnei      	r3, 0
1101f53e:	081c      	bt      	0x1101f576	// 1101f576 <ll_add_adv_task1+0x9a>
            g_pAdvSchInfo[g_currentExtAdv].auxPduRemainder = LL_INVALID_TIME;
1101f540:	8640      	ld.b      	r2, (r6, 0x0)
1101f542:	4244      	lsli      	r2, r2, 4
1101f544:	9160      	ld.w      	r3, (r1, 0x0)
1101f546:	60c8      	addu      	r3, r2
1101f548:	3200      	movi      	r2, 0
1101f54a:	2a00      	subi      	r2, 1
1101f54c:	b343      	st.w      	r2, (r3, 0xc)
        if (llWaitingIrq) {  // 1. conn IRQ ongoing
1101f54e:	126a      	lrw      	r3, 0x1fff0df8	// 1101f674 <ll_add_adv_task1+0x198>
1101f550:	12ca      	lrw      	r6, 0x1fff0f98	// 1101f678 <ll_add_adv_task1+0x19c>
1101f552:	9360      	ld.w      	r3, (r3, 0x0)
1101f554:	3b40      	cmpnei      	r3, 0
1101f556:	0c14      	bf      	0x1101f57e	// 1101f57e <ll_add_adv_task1+0xa2>
            g_currentAdvTimer = pGlobal_config[LL_CONN_TASK_DURATION];
1101f558:	1269      	lrw      	r3, 0x1fffa670	// 1101f67c <ll_add_adv_task1+0x1a0>
1101f55a:	9360      	ld.w      	r3, (r3, 0x0)
1101f55c:	d8632058 	ld.w      	r3, (r3, 0x160)
1101f560:	b660      	st.w      	r3, (r6, 0x0)
        p_current_scheduler->pAdvInfo = pExtAdv;
1101f562:	b781      	st.w      	r4, (r7, 0x4)
        p_current_scheduler->adv_handler = pExtAdv->advHandle;
1101f564:	8460      	ld.b      	r3, (r4, 0x0)
1101f566:	a760      	st.b      	r3, (r7, 0x0)
        p_current_scheduler->nextEventRemainder = p_current_scheduler->pAdvInfo->primary_advertising_interval;  // add some random delay between 0-10ms?
1101f568:	9471      	ld.w      	r3, (r4, 0x44)
1101f56a:	b762      	st.w      	r3, (r7, 0x8)
        pExtAdv->active = TRUE;
1101f56c:	3301      	movi      	r3, 1
1101f56e:	dc640042 	st.b      	r3, (r4, 0x42)
}
1101f572:	1403      	addi      	r14, r14, 12
1101f574:	1494      	pop      	r4-r7, r15
            ll_allocAuxAdvTimeSlot(g_currentExtAdv);
1101f576:	8600      	ld.b      	r0, (r6, 0x0)
1101f578:	e3ffff6d 	bsr      	0x1101f452	// 1101f452 <ll_allocAuxAdvTimeSlot>
1101f57c:	07e9      	br      	0x1101f54e	// 1101f54e <ll_add_adv_task1+0x72>
        } else if (isTimer1Running() // 2. conn task scheduled
1101f57e:	e0004bcb 	bsr      	0x11028d14	// 11028d14 <cpu_task_stack_init+0x36c>
1101f582:	3840      	cmpnei      	r0, 0
1101f584:	0c0e      	bf      	0x1101f5a0	// 1101f5a0 <ll_add_adv_task1+0xc4>
                   && ((remainder = read_LL_remainder_time1()) < pGlobal_config[LL_EXT_ADV_TASK_DURATION])) {   // timer1 for connection or legacy adv
1101f586:	e0004d35 	bsr      	0x11028ff0	// 11028ff0 <cpu_task_stack_init+0x648>
1101f58a:	117d      	lrw      	r3, 0x1fffa670	// 1101f67c <ll_add_adv_task1+0x1a0>
1101f58c:	9360      	ld.w      	r3, (r3, 0x0)
1101f58e:	d8432056 	ld.w      	r2, (r3, 0x158)
1101f592:	6480      	cmphs      	r0, r2
1101f594:	0806      	bt      	0x1101f5a0	// 1101f5a0 <ll_add_adv_task1+0xc4>
            g_currentAdvTimer =  remainder + pGlobal_config[LL_CONN_TASK_DURATION];   // no enough time for adv case
1101f596:	d8632058 	ld.w      	r3, (r3, 0x160)
1101f59a:	600c      	addu      	r0, r3
1101f59c:	b600      	st.w      	r0, (r6, 0x0)
1101f59e:	07e2      	br      	0x1101f562	// 1101f562 <ll_add_adv_task1+0x86>
    chanNumber = (temp & 0x01) + ((temp & 0x02) >> 1) + ((temp & 0x04) >> 2);
1101f5a0:	3101      	movi      	r1, 1
1101f5a2:	5561      	asri      	r3, r5, 1
1101f5a4:	5542      	asri      	r2, r5, 2
1101f5a6:	68c4      	and      	r3, r1
1101f5a8:	6884      	and      	r2, r1
1101f5aa:	6944      	and      	r5, r1
1101f5ac:	60c8      	addu      	r3, r2
            if (chanNumber > 1) {
1101f5ae:	614c      	addu      	r5, r3
1101f5b0:	3d01      	cmphsi      	r5, 2
1101f5b2:	0c0a      	bf      	0x1101f5c6	// 1101f5c6 <ll_add_adv_task1+0xea>
                g_currentAdvTimer = pGlobal_config[LL_EXT_ADV_INTER_PRI_CHN_INT];
1101f5b4:	1172      	lrw      	r3, 0x1fffa670	// 1101f67c <ll_add_adv_task1+0x1a0>
1101f5b6:	9360      	ld.w      	r3, (r3, 0x0)
1101f5b8:	d8632051 	ld.w      	r3, (r3, 0x144)
            llSetupExtAdvEvent(pExtAdv);
1101f5bc:	6c13      	mov      	r0, r4
                g_currentAdvTimer = (p_current_scheduler->auxPduRemainder < p_current_scheduler->pAdvInfo->primary_advertising_interval) ?
1101f5be:	b660      	st.w      	r3, (r6, 0x0)
            llSetupExtAdvEvent(pExtAdv);
1101f5c0:	e0004e62 	bsr      	0x11029284	// 11029284 <cpu_task_stack_init+0x8dc>
1101f5c4:	07cf      	br      	0x1101f562	// 1101f562 <ll_add_adv_task1+0x86>
                                    p_current_scheduler->auxPduRemainder : p_current_scheduler->pAdvInfo->primary_advertising_interval;
1101f5c6:	9761      	ld.w      	r3, (r7, 0x4)
1101f5c8:	9743      	ld.w      	r2, (r7, 0xc)
1101f5ca:	9371      	ld.w      	r3, (r3, 0x44)
1101f5cc:	64c8      	cmphs      	r2, r3
1101f5ce:	c4620c20 	incf      	r3, r2, 0
1101f5d2:	07f5      	br      	0x1101f5bc	// 1101f5bc <ll_add_adv_task1+0xe0>
    p_current_scheduler = &g_pAdvSchInfo[g_currentExtAdv];
1101f5d4:	9120      	ld.w      	r1, (r1, 0x0)
1101f5d6:	4244      	lsli      	r2, r2, 4
1101f5d8:	6084      	addu      	r2, r1
1101f5da:	b841      	st.w      	r2, (r14, 0x4)
    for (i = 0; i < g_extAdvNumber; i++) {  // bug fixed 04-07
1101f5dc:	3500      	movi      	r5, 0
1101f5de:	1149      	lrw      	r2, 0x1fff11b0	// 1101f680 <ll_add_adv_task1+0x1a4>
1101f5e0:	8260      	ld.b      	r3, (r2, 0x0)
1101f5e2:	b842      	st.w      	r2, (r14, 0x8)
1101f5e4:	64d5      	cmplt      	r5, r3
1101f5e6:	0fc6      	bf      	0x1101f572	// 1101f572 <ll_add_adv_task1+0x96>
        if (g_pAdvSchInfo[i].adv_handler == LL_INVALID_ADV_SET_HANDLE) {
1101f5e8:	6dc7      	mov      	r7, r1
1101f5ea:	8700      	ld.b      	r0, (r7, 0x0)
1101f5ec:	32ff      	movi      	r2, 255
1101f5ee:	210f      	addi      	r1, 16
1101f5f0:	6482      	cmpne      	r0, r2
1101f5f2:	0c0b      	bf      	0x1101f608	// 1101f608 <ll_add_adv_task1+0x12c>
    for (i = 0; i < g_extAdvNumber; i++) {  // bug fixed 04-07
1101f5f4:	2500      	addi      	r5, 1
1101f5f6:	07f7      	br      	0x1101f5e4	// 1101f5e4 <ll_add_adv_task1+0x108>
        ll_allocAuxAdvTimeSlot(spare);
1101f5f8:	7414      	zextb      	r0, r5
1101f5fa:	e3ffff2c 	bsr      	0x1101f452	// 1101f452 <ll_allocAuxAdvTimeSlot>
1101f5fe:	0415      	br      	0x1101f628	// 1101f628 <ll_add_adv_task1+0x14c>
                                          + (spare > g_currentExtAdv ? (spare - g_currentExtAdv) : (g_extAdvNumber + spare - g_currentExtAdv)) * (g_advSlotPeriodic >> 2);
1101f600:	9862      	ld.w      	r3, (r14, 0x8)
1101f602:	8360      	ld.b      	r3, (r3, 0x0)
1101f604:	614c      	addu      	r5, r3
1101f606:	0424      	br      	0x1101f64e	// 1101f64e <ll_add_adv_task1+0x172>
    pExtAdv->active = TRUE;
1101f608:	3301      	movi      	r3, 1
    g_schExtAdvNum ++;
1101f60a:	1039      	lrw      	r1, 0x1fff0f9c	// 1101f66c <ll_add_adv_task1+0x190>
    pExtAdv->active = TRUE;
1101f60c:	dc640042 	st.b      	r3, (r4, 0x42)
    if (isLegacy || pExtAdv->data.advertisingDataLength == 0) {  // adv data length == 0, no aux PDU is required. to test
1101f610:	9860      	ld.w      	r3, (r14, 0x0)
    g_schExtAdvNum ++;
1101f612:	8140      	ld.b      	r2, (r1, 0x0)
    if (isLegacy || pExtAdv->data.advertisingDataLength == 0) {  // adv data length == 0, no aux PDU is required. to test
1101f614:	3b40      	cmpnei      	r3, 0
    g_schExtAdvNum ++;
1101f616:	2200      	addi      	r2, 1
1101f618:	a140      	st.b      	r2, (r1, 0x0)
    if (isLegacy || pExtAdv->data.advertisingDataLength == 0) {  // adv data length == 0, no aux PDU is required. to test
1101f61a:	0804      	bt      	0x1101f622	// 1101f622 <ll_add_adv_task1+0x146>
1101f61c:	8c75      	ld.h      	r3, (r4, 0x2a)
1101f61e:	3b40      	cmpnei      	r3, 0
1101f620:	0bec      	bt      	0x1101f5f8	// 1101f5f8 <ll_add_adv_task1+0x11c>
        g_pAdvSchInfo[spare].auxPduRemainder = LL_INVALID_TIME;
1101f622:	3300      	movi      	r3, 0
1101f624:	2b00      	subi      	r3, 1
1101f626:	b763      	st.w      	r3, (r7, 0xc)
    if (isTimer4Running()) {
1101f628:	e0004dfe 	bsr      	0x11029224	// 11029224 <cpu_task_stack_init+0x87c>
1101f62c:	3840      	cmpnei      	r0, 0
1101f62e:	0c05      	bf      	0x1101f638	// 1101f638 <ll_add_adv_task1+0x15c>
        remainder = read_ll_adv_remainder_time();
1101f630:	e0004d46 	bsr      	0x110290bc	// 110290bc <cpu_task_stack_init+0x714>
        T1   = read_current_fine_time();
1101f634:	e0004d56 	bsr      	0x110290e0	// 110290e0 <cpu_task_stack_init+0x738>
    if (isTimer1Running()) {
1101f638:	e0004b6e 	bsr      	0x11028d14	// 11028d14 <cpu_task_stack_init+0x36c>
1101f63c:	3840      	cmpnei      	r0, 0
1101f63e:	0c03      	bf      	0x1101f644	// 1101f644 <ll_add_adv_task1+0x168>
        uint32 temp = read_LL_remainder_time1();
1101f640:	e0004cd8 	bsr      	0x11028ff0	// 11028ff0 <cpu_task_stack_init+0x648>
                                          + (spare > g_currentExtAdv ? (spare - g_currentExtAdv) : (g_extAdvNumber + spare - g_currentExtAdv)) * (g_advSlotPeriodic >> 2);
1101f644:	8620      	ld.b      	r1, (r6, 0x0)
        p_scheduler->nextEventRemainder = p_current_scheduler->nextEventRemainder
1101f646:	9861      	ld.w      	r3, (r14, 0x4)
                                          + (spare > g_currentExtAdv ? (spare - g_currentExtAdv) : (g_extAdvNumber + spare - g_currentExtAdv)) * (g_advSlotPeriodic >> 2);
1101f648:	6545      	cmplt      	r1, r5
        p_scheduler->nextEventRemainder = p_current_scheduler->nextEventRemainder
1101f64a:	9342      	ld.w      	r2, (r3, 0x8)
                                          + (spare > g_currentExtAdv ? (spare - g_currentExtAdv) : (g_extAdvNumber + spare - g_currentExtAdv)) * (g_advSlotPeriodic >> 2);
1101f64c:	0fda      	bf      	0x1101f600	// 1101f600 <ll_add_adv_task1+0x124>
1101f64e:	106e      	lrw      	r3, 0x1fff13a8	// 1101f684 <ll_add_adv_task1+0x1a8>
1101f650:	6146      	subu      	r5, r1
1101f652:	9360      	ld.w      	r3, (r3, 0x0)
1101f654:	4b62      	lsri      	r3, r3, 2
1101f656:	7d4c      	mult      	r5, r3
1101f658:	6148      	addu      	r5, r2
        p_scheduler->nextEventRemainder = p_current_scheduler->nextEventRemainder
1101f65a:	b7a2      	st.w      	r5, (r7, 0x8)
    p_scheduler->adv_handler = pExtAdv->advHandle;
1101f65c:	8460      	ld.b      	r3, (r4, 0x0)
    p_scheduler->pAdvInfo    = pExtAdv;
1101f65e:	b781      	st.w      	r4, (r7, 0x4)
    p_scheduler->adv_handler = pExtAdv->advHandle;
1101f660:	a760      	st.b      	r3, (r7, 0x0)
1101f662:	0788      	br      	0x1101f572	// 1101f572 <ll_add_adv_task1+0x96>
1101f664:	1fff12dc 	.long	0x1fff12dc
1101f668:	1fff1198 	.long	0x1fff1198
1101f66c:	1fff0f9c 	.long	0x1fff0f9c
1101f670:	1fff0f8c 	.long	0x1fff0f8c
1101f674:	1fff0df8 	.long	0x1fff0df8
1101f678:	1fff0f98 	.long	0x1fff0f98
1101f67c:	1fffa670 	.long	0x1fffa670
1101f680:	1fff11b0 	.long	0x1fff11b0
1101f684:	1fff13a8 	.long	0x1fff13a8

1101f688 <ll_delete_adv_task1>:
{
1101f688:	14d4      	push      	r4-r7, r15
1101f68a:	1424      	subi      	r14, r14, 16
    if (index >= g_extAdvNumber) {
1101f68c:	11fb      	lrw      	r7, 0x1fff11b0	// 1101f778 <ll_delete_adv_task1+0xf0>
1101f68e:	8760      	ld.b      	r3, (r7, 0x0)
1101f690:	64c0      	cmphs      	r0, r3
1101f692:	081c      	bt      	0x1101f6ca	// 1101f6ca <ll_delete_adv_task1+0x42>
    g_pAdvSchInfo[index].adv_handler        = LL_INVALID_ADV_SET_HANDLE;
1101f694:	119a      	lrw      	r4, 0x1fff1198	// 1101f77c <ll_delete_adv_task1+0xf4>
1101f696:	4064      	lsli      	r3, r0, 4
1101f698:	9420      	ld.w      	r1, (r4, 0x0)
1101f69a:	6c8f      	mov      	r2, r3
1101f69c:	60c4      	addu      	r3, r1
1101f69e:	3100      	movi      	r1, 0
1101f6a0:	2900      	subi      	r1, 1
1101f6a2:	a320      	st.b      	r1, (r3, 0x0)
1101f6a4:	11d7      	lrw      	r6, 0x1fff12dc	// 1101f780 <ll_delete_adv_task1+0xf8>
    g_schExtAdvNum --;
1101f6a6:	1138      	lrw      	r1, 0x1fff0f9c	// 1101f784 <ll_delete_adv_task1+0xfc>
    g_pAdvSchInfo[index].pAdvInfo           = NULL;
1101f6a8:	9460      	ld.w      	r3, (r4, 0x0)
1101f6aa:	60c8      	addu      	r3, r2
1101f6ac:	3200      	movi      	r2, 0
1101f6ae:	b341      	st.w      	r2, (r3, 0x4)
    g_pAdvSchInfo[index].auxPduRemainder    = LL_INVALID_TIME;
1101f6b0:	2a00      	subi      	r2, 1
1101f6b2:	b343      	st.w      	r2, (r3, 0xc)
    g_pAdvSchInfo[index].nextEventRemainder = LL_INVALID_TIME;
1101f6b4:	b342      	st.w      	r2, (r3, 0x8)
    g_schExtAdvNum --;
1101f6b6:	8160      	ld.b      	r3, (r1, 0x0)
1101f6b8:	2b00      	subi      	r3, 1
1101f6ba:	74cc      	zextb      	r3, r3
1101f6bc:	a160      	st.b      	r3, (r1, 0x0)
    if (g_schExtAdvNum == 0) {
1101f6be:	3b40      	cmpnei      	r3, 0
1101f6c0:	0807      	bt      	0x1101f6ce	// 1101f6ce <ll_delete_adv_task1+0x46>
        clear_timer(AP_TIM4);
1101f6c2:	1112      	lrw      	r0, 0x4000103c	// 1101f788 <ll_delete_adv_task1+0x100>
        g_currentExtAdv = LL_INVALID_ADV_SET_HANDLE;
1101f6c4:	a640      	st.b      	r2, (r6, 0x0)
        clear_timer(AP_TIM4);
1101f6c6:	e0004b21 	bsr      	0x11028d08	// 11028d08 <cpu_task_stack_init+0x360>
}
1101f6ca:	1404      	addi      	r14, r14, 16
1101f6cc:	1494      	pop      	r4-r7, r15
    if (index == g_currentExtAdv
1101f6ce:	8660      	ld.b      	r3, (r6, 0x0)
1101f6d0:	640e      	cmpne      	r3, r0
1101f6d2:	0bfc      	bt      	0x1101f6ca	// 1101f6ca <ll_delete_adv_task1+0x42>
        && isTimer4Running()) { // 2020-7-7
1101f6d4:	e0004da8 	bsr      	0x11029224	// 11029224 <cpu_task_stack_init+0x87c>
1101f6d8:	3840      	cmpnei      	r0, 0
1101f6da:	0ff8      	bf      	0x1101f6ca	// 1101f6ca <ll_delete_adv_task1+0x42>
        remainder = read_ll_adv_remainder_time();
1101f6dc:	e0004cf0 	bsr      	0x110290bc	// 110290bc <cpu_task_stack_init+0x714>
1101f6e0:	6d43      	mov      	r5, r0
        T1  = read_current_fine_time();
1101f6e2:	e0004cff 	bsr      	0x110290e0	// 110290e0 <cpu_task_stack_init+0x738>
        minAuxPduTime = g_pAdvSchInfo[g_currentExtAdv].auxPduRemainder;      // LL_INVALID_TIME
1101f6e6:	8640      	ld.b      	r2, (r6, 0x0)
        elapse_time = g_currentAdvTimer - remainder;
1101f6e8:	1169      	lrw      	r3, 0x1fff0f98	// 1101f78c <ll_delete_adv_task1+0x104>
        T1  = read_current_fine_time();
1101f6ea:	6c43      	mov      	r1, r0
        minAuxPduTime = g_pAdvSchInfo[g_currentExtAdv].auxPduRemainder;      // LL_INVALID_TIME
1101f6ec:	b840      	st.w      	r2, (r14, 0x0)
        elapse_time = g_currentAdvTimer - remainder;
1101f6ee:	9300      	ld.w      	r0, (r3, 0x0)
1101f6f0:	5875      	subu      	r3, r0, r5
        minAuxPduTime = g_pAdvSchInfo[g_currentExtAdv].auxPduRemainder;      // LL_INVALID_TIME
1101f6f2:	4204      	lsli      	r0, r2, 4
        elapse_time = g_currentAdvTimer - remainder;
1101f6f4:	b861      	st.w      	r3, (r14, 0x4)
        minAuxPduTime = g_pAdvSchInfo[g_currentExtAdv].auxPduRemainder;      // LL_INVALID_TIME
1101f6f6:	9460      	ld.w      	r3, (r4, 0x0)
1101f6f8:	600c      	addu      	r0, r3
1101f6fa:	90a3      	ld.w      	r5, (r0, 0xc)
        minPriPduTime = g_pAdvSchInfo[g_currentExtAdv].nextEventRemainder;
1101f6fc:	9082      	ld.w      	r4, (r0, 0x8)
        for (i = 0; i < g_extAdvNumber; i++) {
1101f6fe:	8740      	ld.b      	r2, (r7, 0x0)
        minIndexPri = g_currentExtAdv;
1101f700:	9800      	ld.w      	r0, (r14, 0x0)
        for (i = 0; i < g_extAdvNumber; i++) {
1101f702:	b843      	st.w      	r2, (r14, 0xc)
        minIndexPri = g_currentExtAdv;
1101f704:	b802      	st.w      	r0, (r14, 0x8)
        for (i = 0; i < g_extAdvNumber; i++) {
1101f706:	3000      	movi      	r0, 0
1101f708:	9843      	ld.w      	r2, (r14, 0xc)
1101f70a:	6481      	cmplt      	r0, r2
1101f70c:	0817      	bt      	0x1101f73a	// 1101f73a <ll_delete_adv_task1+0xb2>
1101f70e:	6dc7      	mov      	r7, r1
        T2  = read_current_fine_time();
1101f710:	e0004ce8 	bsr      	0x110290e0	// 110290e0 <cpu_task_stack_init+0x738>
        delta = LL_TIME_DELTA(T1, T2);
1101f714:	6c5f      	mov      	r1, r7
1101f716:	58fd      	subu      	r7, r0, r7
1101f718:	6440      	cmphs      	r0, r1
1101f71a:	0c23      	bf      	0x1101f760	// 1101f760 <ll_delete_adv_task1+0xd8>
        if (minAuxPduTime < minPriPduTime) { // next schedule task is aux PDU
1101f71c:	6514      	cmphs      	r5, r4
            ll_ext_adv_schedule_next_event(minAuxPduTime - elapse_time - delta);
1101f71e:	9861      	ld.w      	r3, (r14, 0x4)
        if (minAuxPduTime < minPriPduTime) { // next schedule task is aux PDU
1101f720:	0824      	bt      	0x1101f768	// 1101f768 <ll_delete_adv_task1+0xe0>
            ll_ext_adv_schedule_next_event(minAuxPduTime - elapse_time - delta);
1101f722:	5d0d      	subu      	r0, r5, r3
1101f724:	601e      	subu      	r0, r7
1101f726:	e0004ce9 	bsr      	0x110290f8	// 110290f8 <cpu_task_stack_init+0x750>
            g_currentExtAdv   = minIndexAux;
1101f72a:	d86e0000 	ld.b      	r3, (r14, 0x0)
        ll_updateExtAdvRemainderTime(elapse_time + delta);
1101f72e:	9801      	ld.w      	r0, (r14, 0x4)
            g_currentExtAdv   = minIndexPri;
1101f730:	a660      	st.b      	r3, (r6, 0x0)
        ll_updateExtAdvRemainderTime(elapse_time + delta);
1101f732:	601c      	addu      	r0, r7
1101f734:	e0004e6e 	bsr      	0x11029410	// 11029410 <cpu_task_stack_init+0xa68>
1101f738:	07c9      	br      	0x1101f6ca	// 1101f6ca <ll_delete_adv_task1+0x42>
            if (g_pAdvSchInfo[i].adv_handler != LL_INVALID_ADV_SET_HANDLE) {
1101f73a:	83e0      	ld.b      	r7, (r3, 0x0)
1101f73c:	32ff      	movi      	r2, 255
1101f73e:	649e      	cmpne      	r7, r2
1101f740:	0c0d      	bf      	0x1101f75a	// 1101f75a <ll_delete_adv_task1+0xd2>
                if (g_pAdvSchInfo[i].auxPduRemainder < minAuxPduTime) {
1101f742:	93e3      	ld.w      	r7, (r3, 0xc)
1101f744:	655c      	cmphs      	r7, r5
1101f746:	0804      	bt      	0x1101f74e	// 1101f74e <ll_delete_adv_task1+0xc6>
                    minIndexAux = i;
1101f748:	7480      	zextb      	r2, r0
1101f74a:	6d5f      	mov      	r5, r7
1101f74c:	b840      	st.w      	r2, (r14, 0x0)
                if (g_pAdvSchInfo[i].nextEventRemainder < minPriPduTime) {
1101f74e:	93e2      	ld.w      	r7, (r3, 0x8)
1101f750:	651c      	cmphs      	r7, r4
1101f752:	0804      	bt      	0x1101f75a	// 1101f75a <ll_delete_adv_task1+0xd2>
                    minIndexPri = i;
1101f754:	7480      	zextb      	r2, r0
1101f756:	6d1f      	mov      	r4, r7
1101f758:	b842      	st.w      	r2, (r14, 0x8)
        for (i = 0; i < g_extAdvNumber; i++) {
1101f75a:	2000      	addi      	r0, 1
1101f75c:	230f      	addi      	r3, 16
1101f75e:	07d5      	br      	0x1101f708	// 1101f708 <ll_delete_adv_task1+0x80>
        delta = LL_TIME_DELTA(T1, T2);
1101f760:	c6a05023 	bmaski      	r3, 22
1101f764:	61cc      	addu      	r7, r3
1101f766:	07db      	br      	0x1101f71c	// 1101f71c <ll_delete_adv_task1+0x94>
            ll_ext_adv_schedule_next_event(minPriPduTime - elapse_time - delta);
1101f768:	5c0d      	subu      	r0, r4, r3
1101f76a:	601e      	subu      	r0, r7
1101f76c:	e0004cc6 	bsr      	0x110290f8	// 110290f8 <cpu_task_stack_init+0x750>
            g_currentExtAdv   = minIndexPri;
1101f770:	d86e0008 	ld.b      	r3, (r14, 0x8)
1101f774:	07dd      	br      	0x1101f72e	// 1101f72e <ll_delete_adv_task1+0xa6>
1101f776:	0000      	bkpt
1101f778:	1fff11b0 	.long	0x1fff11b0
1101f77c:	1fff1198 	.long	0x1fff1198
1101f780:	1fff12dc 	.long	0x1fff12dc
1101f784:	1fff0f9c 	.long	0x1fff0f9c
1101f788:	4000103c 	.long	0x4000103c
1101f78c:	1fff0f98 	.long	0x1fff0f98

1101f790 <ll_delete_adv_task_periodic1>:
{
1101f790:	14d4      	push      	r4-r7, r15
1101f792:	1426      	subi      	r14, r14, 24
    g_pAdvSchInfo_periodic[index].adv_handler        = LL_INVALID_ADV_SET_HANDLE;
1101f794:	1228      	lrw      	r1, 0x1fff1180	// 1101f8b4 <ll_delete_adv_task_periodic1+0x124>
1101f796:	4062      	lsli      	r3, r0, 2
1101f798:	9140      	ld.w      	r2, (r1, 0x0)
1101f79a:	60c0      	addu      	r3, r0
1101f79c:	3400      	movi      	r4, 0
1101f79e:	4362      	lsli      	r3, r3, 2
1101f7a0:	2c00      	subi      	r4, 1
1101f7a2:	608c      	addu      	r2, r3
1101f7a4:	a280      	st.b      	r4, (r2, 0x0)
1101f7a6:	b823      	st.w      	r1, (r14, 0xc)
    g_pAdvSchInfo_periodic[index].pAdvInfo           = NULL;
1101f7a8:	9140      	ld.w      	r2, (r1, 0x0)
1101f7aa:	60c8      	addu      	r3, r2
1101f7ac:	3200      	movi      	r2, 0
    g_schExtAdvNum_periodic --;
1101f7ae:	1283      	lrw      	r4, 0x1fff154f	// 1101f8b8 <ll_delete_adv_task_periodic1+0x128>
1101f7b0:	12c3      	lrw      	r6, 0x1fff118b	// 1101f8bc <ll_delete_adv_task_periodic1+0x12c>
    g_pAdvSchInfo_periodic[index].pAdvInfo           = NULL;
1101f7b2:	b342      	st.w      	r2, (r3, 0x8)
    g_pAdvSchInfo_periodic[index].auxPduRemainder    = LL_INVALID_TIME;
1101f7b4:	2a00      	subi      	r2, 1
1101f7b6:	b344      	st.w      	r2, (r3, 0x10)
    g_pAdvSchInfo_periodic[index].nextEventRemainder = LL_INVALID_TIME;
1101f7b8:	b343      	st.w      	r2, (r3, 0xc)
    g_schExtAdvNum_periodic --;
1101f7ba:	8460      	ld.b      	r3, (r4, 0x0)
1101f7bc:	2b00      	subi      	r3, 1
1101f7be:	74cc      	zextb      	r3, r3
1101f7c0:	a460      	st.b      	r3, (r4, 0x0)
    if (g_schExtAdvNum_periodic == 0) {
1101f7c2:	3b40      	cmpnei      	r3, 0
1101f7c4:	0807      	bt      	0x1101f7d2	// 1101f7d2 <ll_delete_adv_task_periodic1+0x42>
        clear_timer(AP_TIM4);
1101f7c6:	111f      	lrw      	r0, 0x4000103c	// 1101f8c0 <ll_delete_adv_task_periodic1+0x130>
        g_currentExtAdv_periodic = LL_INVALID_ADV_SET_HANDLE ;
1101f7c8:	a640      	st.b      	r2, (r6, 0x0)
        clear_timer(AP_TIM4);
1101f7ca:	e0004a9f 	bsr      	0x11028d08	// 11028d08 <cpu_task_stack_init+0x360>
}
1101f7ce:	1406      	addi      	r14, r14, 24
1101f7d0:	1494      	pop      	r4-r7, r15
    if (index == g_currentExtAdv_periodic) {
1101f7d2:	8660      	ld.b      	r3, (r6, 0x0)
1101f7d4:	640e      	cmpne      	r3, r0
1101f7d6:	0bfc      	bt      	0x1101f7ce	// 1101f7ce <ll_delete_adv_task_periodic1+0x3e>
        remainder = read_ll_adv_remainder_time();
1101f7d8:	e0004c72 	bsr      	0x110290bc	// 110290bc <cpu_task_stack_init+0x714>
1101f7dc:	6d03      	mov      	r4, r0
        T1  = read_current_fine_time();
1101f7de:	e0004c81 	bsr      	0x110290e0	// 110290e0 <cpu_task_stack_init+0x738>
        elapse_time = g_currentAdvTimer - remainder;
1101f7e2:	1179      	lrw      	r3, 0x1fff0f98	// 1101f8c4 <ll_delete_adv_task_periodic1+0x134>
        T1  = read_current_fine_time();
1101f7e4:	6c43      	mov      	r1, r0
        elapse_time = g_currentAdvTimer - remainder;
1101f7e6:	9300      	ld.w      	r0, (r3, 0x0)
1101f7e8:	5871      	subu      	r3, r0, r4
1101f7ea:	b861      	st.w      	r3, (r14, 0x4)
        minAuxPduTime = g_pAdvSchInfo_periodic[g_currentExtAdv_periodic].auxPduRemainder;      // LL_INVALID_TIME
1101f7ec:	9863      	ld.w      	r3, (r14, 0xc)
1101f7ee:	86e0      	ld.b      	r7, (r6, 0x0)
        for (i = 0; i < g_extAdvNumber; i++) {
1101f7f0:	1116      	lrw      	r0, 0x1fff11b0	// 1101f8c8 <ll_delete_adv_task_periodic1+0x138>
        minAuxPduTime = g_pAdvSchInfo_periodic[g_currentExtAdv_periodic].auxPduRemainder;      // LL_INVALID_TIME
1101f7f2:	4742      	lsli      	r2, r7, 2
1101f7f4:	9360      	ld.w      	r3, (r3, 0x0)
1101f7f6:	609c      	addu      	r2, r7
1101f7f8:	4242      	lsli      	r2, r2, 2
1101f7fa:	608c      	addu      	r2, r3
1101f7fc:	92a4      	ld.w      	r5, (r2, 0x10)
        minPriPduTime = g_pAdvSchInfo_periodic[g_currentExtAdv_periodic].nextEventRemainder;
1101f7fe:	9283      	ld.w      	r4, (r2, 0xc)
        for (i = 0; i < g_extAdvNumber; i++) {
1101f800:	8040      	ld.b      	r2, (r0, 0x0)
1101f802:	b860      	st.w      	r3, (r14, 0x0)
1101f804:	b844      	st.w      	r2, (r14, 0x10)
        minIndexPri = g_currentExtAdv_periodic;
1101f806:	b8e2      	st.w      	r7, (r14, 0x8)
        for (i = 0; i < g_extAdvNumber; i++) {
1101f808:	3200      	movi      	r2, 0
1101f80a:	b805      	st.w      	r0, (r14, 0x14)
1101f80c:	9864      	ld.w      	r3, (r14, 0x10)
1101f80e:	64c9      	cmplt      	r2, r3
1101f810:	082d      	bt      	0x1101f86a	// 1101f86a <ll_delete_adv_task_periodic1+0xda>
1101f812:	b820      	st.w      	r1, (r14, 0x0)
        T2  = read_current_fine_time();
1101f814:	e0004c66 	bsr      	0x110290e0	// 110290e0 <cpu_task_stack_init+0x738>
        delta = LL_TIME_DELTA(T1, T2);
1101f818:	9820      	ld.w      	r1, (r14, 0x0)
1101f81a:	5865      	subu      	r3, r0, r1
1101f81c:	6440      	cmphs      	r0, r1
1101f81e:	0c3d      	bf      	0x1101f898	// 1101f898 <ll_delete_adv_task_periodic1+0x108>
        if (minAuxPduTime < minPriPduTime) { // next schedule task is aux PDU
1101f820:	6514      	cmphs      	r5, r4
            ll_prd_adv_schedule_next_event(minAuxPduTime - elapse_time - delta);
1101f822:	9841      	ld.w      	r2, (r14, 0x4)
        if (minAuxPduTime < minPriPduTime) { // next schedule task is aux PDU
1101f824:	083e      	bt      	0x1101f8a0	// 1101f8a0 <ll_delete_adv_task_periodic1+0x110>
            ll_prd_adv_schedule_next_event(minAuxPduTime - elapse_time - delta);
1101f826:	5d09      	subu      	r0, r5, r2
1101f828:	6d0f      	mov      	r4, r3
1101f82a:	600e      	subu      	r0, r3
1101f82c:	e0004c9c 	bsr      	0x11029164	// 11029164 <cpu_task_stack_init+0x7bc>
            g_currentExtAdv_periodic   = minIndexAux;
1101f830:	a6e0      	st.b      	r7, (r6, 0x0)
        for (i = 0; i < g_extAdvNumber; i++) {
1101f832:	9845      	ld.w      	r2, (r14, 0x14)
                g_pAdvSchInfo_periodic[i].auxPduRemainder -= (elapse_time + delta);
1101f834:	9801      	ld.w      	r0, (r14, 0x4)
        for (i = 0; i < g_extAdvNumber; i++) {
1101f836:	82a0      	ld.b      	r5, (r2, 0x0)
1101f838:	9843      	ld.w      	r2, (r14, 0xc)
                g_pAdvSchInfo_periodic[i].auxPduRemainder -= (elapse_time + delta);
1101f83a:	5c60      	addu      	r3, r4, r0
1101f83c:	9240      	ld.w      	r2, (r2, 0x0)
            if (g_pAdvSchInfo_periodic[i].adv_handler != LL_INVALID_ADV_SET_HANDLE) {
1101f83e:	3100      	movi      	r1, 0
1101f840:	36ff      	movi      	r6, 255
1101f842:	3014      	movi      	r0, 20
        for (i = 0; i < g_extAdvNumber; i++) {
1101f844:	6545      	cmplt      	r1, r5
1101f846:	0fc4      	bf      	0x1101f7ce	// 1101f7ce <ll_delete_adv_task_periodic1+0x3e>
            if (g_pAdvSchInfo_periodic[i].adv_handler != LL_INVALID_ADV_SET_HANDLE) {
1101f848:	8280      	ld.b      	r4, (r2, 0x0)
1101f84a:	6592      	cmpne      	r4, r6
1101f84c:	0c0c      	bf      	0x1101f864	// 1101f864 <ll_delete_adv_task_periodic1+0xd4>
                g_pAdvSchInfo_periodic[i].auxPduRemainder -= (elapse_time + delta);
1101f84e:	9284      	ld.w      	r4, (r2, 0x10)
1101f850:	610e      	subu      	r4, r3
1101f852:	b284      	st.w      	r4, (r2, 0x10)
                if (g_pAdvSchInfo_periodic[i].pAdvInfo->active == TRUE) {
1101f854:	9282      	ld.w      	r4, (r2, 0x8)
1101f856:	d8840042 	ld.b      	r4, (r4, 0x42)
1101f85a:	3c41      	cmpnei      	r4, 1
1101f85c:	0804      	bt      	0x1101f864	// 1101f864 <ll_delete_adv_task_periodic1+0xd4>
                    g_pAdvSchInfo_periodic[i].nextEventRemainder -= (elapse_time + delta);
1101f85e:	9283      	ld.w      	r4, (r2, 0xc)
1101f860:	610e      	subu      	r4, r3
1101f862:	b283      	st.w      	r4, (r2, 0xc)
        for (i = 0; i < g_extAdvNumber; i++) {
1101f864:	2100      	addi      	r1, 1
1101f866:	6080      	addu      	r2, r0
1101f868:	07ee      	br      	0x1101f844	// 1101f844 <ll_delete_adv_task_periodic1+0xb4>
            if (g_pAdvSchInfo_periodic[i].adv_handler != LL_INVALID_ADV_SET_HANDLE) {
1101f86a:	9860      	ld.w      	r3, (r14, 0x0)
1101f86c:	8300      	ld.b      	r0, (r3, 0x0)
1101f86e:	33ff      	movi      	r3, 255
1101f870:	64c2      	cmpne      	r0, r3
1101f872:	0c0e      	bf      	0x1101f88e	// 1101f88e <ll_delete_adv_task_periodic1+0xfe>
                if (g_pAdvSchInfo_periodic[i].auxPduRemainder < minAuxPduTime) {
1101f874:	9860      	ld.w      	r3, (r14, 0x0)
1101f876:	9304      	ld.w      	r0, (r3, 0x10)
1101f878:	6540      	cmphs      	r0, r5
1101f87a:	0803      	bt      	0x1101f880	// 1101f880 <ll_delete_adv_task_periodic1+0xf0>
                    minIndexAux = i;
1101f87c:	75c8      	zextb      	r7, r2
1101f87e:	6d43      	mov      	r5, r0
                if (g_pAdvSchInfo_periodic[i].nextEventRemainder < minPriPduTime) {
1101f880:	9860      	ld.w      	r3, (r14, 0x0)
1101f882:	9303      	ld.w      	r0, (r3, 0xc)
1101f884:	6500      	cmphs      	r0, r4
1101f886:	0804      	bt      	0x1101f88e	// 1101f88e <ll_delete_adv_task_periodic1+0xfe>
                    minIndexPri = i;
1101f888:	74c8      	zextb      	r3, r2
1101f88a:	6d03      	mov      	r4, r0
1101f88c:	b862      	st.w      	r3, (r14, 0x8)
1101f88e:	9860      	ld.w      	r3, (r14, 0x0)
1101f890:	2313      	addi      	r3, 20
        for (i = 0; i < g_extAdvNumber; i++) {
1101f892:	2200      	addi      	r2, 1
1101f894:	b860      	st.w      	r3, (r14, 0x0)
1101f896:	07bb      	br      	0x1101f80c	// 1101f80c <ll_delete_adv_task_periodic1+0x7c>
        delta = LL_TIME_DELTA(T1, T2);
1101f898:	c6a05022 	bmaski      	r2, 22
1101f89c:	60c8      	addu      	r3, r2
1101f89e:	07c1      	br      	0x1101f820	// 1101f820 <ll_delete_adv_task_periodic1+0x90>
            ll_prd_adv_schedule_next_event(minPriPduTime - elapse_time - delta);
1101f8a0:	5c09      	subu      	r0, r4, r2
1101f8a2:	6d0f      	mov      	r4, r3
1101f8a4:	600e      	subu      	r0, r3
1101f8a6:	e0004c5f 	bsr      	0x11029164	// 11029164 <cpu_task_stack_init+0x7bc>
            g_currentExtAdv_periodic   = minIndexPri;
1101f8aa:	d86e0008 	ld.b      	r3, (r14, 0x8)
1101f8ae:	a660      	st.b      	r3, (r6, 0x0)
1101f8b0:	07c1      	br      	0x1101f832	// 1101f832 <ll_delete_adv_task_periodic1+0xa2>
1101f8b2:	0000      	bkpt
1101f8b4:	1fff1180 	.long	0x1fff1180
1101f8b8:	1fff154f 	.long	0x1fff154f
1101f8bc:	1fff118b 	.long	0x1fff118b
1101f8c0:	4000103c 	.long	0x4000103c
1101f8c4:	1fff0f98 	.long	0x1fff0f98
1101f8c8:	1fff11b0 	.long	0x1fff11b0

1101f8cc <HCI_LE_SetExtAdvParamCmd>:
{
1101f8cc:	14d4      	push      	r4-r7, r15
1101f8ce:	142f      	subi      	r14, r14, 60
1101f8d0:	9897      	ld.w      	r4, (r14, 0x5c)
1101f8d2:	d8ae0068 	ld.b      	r5, (r14, 0x68)
1101f8d6:	b88c      	st.w      	r4, (r14, 0x30)
1101f8d8:	d88e0050 	ld.b      	r4, (r14, 0x50)
1101f8dc:	b8a6      	st.w      	r5, (r14, 0x18)
1101f8de:	b880      	st.w      	r4, (r14, 0x0)
1101f8e0:	d88e0054 	ld.b      	r4, (r14, 0x54)
1101f8e4:	d8ae006c 	ld.b      	r5, (r14, 0x6c)
1101f8e8:	b881      	st.w      	r4, (r14, 0x4)
1101f8ea:	d88e0058 	ld.b      	r4, (r14, 0x58)
1101f8ee:	b8a7      	st.w      	r5, (r14, 0x1c)
1101f8f0:	b882      	st.w      	r4, (r14, 0x8)
1101f8f2:	d88e0060 	ld.b      	r4, (r14, 0x60)
1101f8f6:	d8ae0070 	ld.b      	r5, (r14, 0x70)
1101f8fa:	b884      	st.w      	r4, (r14, 0x10)
1101f8fc:	d88e0064 	ld.b      	r4, (r14, 0x64)
    rtnParam[0] = LL_SetExtAdvParam(adv_handle,
1101f900:	7512      	sextb      	r4, r4
1101f902:	b885      	st.w      	r4, (r14, 0x14)
1101f904:	988c      	ld.w      	r4, (r14, 0x30)
{
1101f906:	d8ce0074 	ld.b      	r6, (r14, 0x74)
1101f90a:	d8ee0078 	ld.b      	r7, (r14, 0x78)
    rtnParam[0] = LL_SetExtAdvParam(adv_handle,
1101f90e:	b883      	st.w      	r4, (r14, 0xc)
{
1101f910:	b8a8      	st.w      	r5, (r14, 0x20)
    rtnParam[0] = LL_SetExtAdvParam(adv_handle,
1101f912:	b8ea      	st.w      	r7, (r14, 0x28)
1101f914:	e4ae0036 	addi      	r5, r14, 55
1101f918:	b8c9      	st.w      	r6, (r14, 0x24)
1101f91a:	b8ab      	st.w      	r5, (r14, 0x2c)
1101f91c:	e0000602 	bsr      	0x11020520	// 11020520 <LL_SetExtAdvParam>
    rtnParam[1] = selectTxPower;
1101f920:	d86e0037 	ld.b      	r3, (r14, 0x37)
    rtnParam[0] = LL_SetExtAdvParam(adv_handle,
1101f924:	dc0e0038 	st.b      	r0, (r14, 0x38)
    HCI_CommandCompleteEvent(HCI_LE_SET_EXTENDER_ADVERTISING_PARAMETERS, sizeof(rtnParam), rtnParam);
1101f928:	3102      	movi      	r1, 2
1101f92a:	ea002036 	movi      	r0, 8246
    rtnParam[1] = selectTxPower;
1101f92e:	dc6e0039 	st.b      	r3, (r14, 0x39)
    HCI_CommandCompleteEvent(HCI_LE_SET_EXTENDER_ADVERTISING_PARAMETERS, sizeof(rtnParam), rtnParam);
1101f932:	1a0e      	addi      	r2, r14, 56
1101f934:	e0004b3a 	bsr      	0x11028fa8	// 11028fa8 <cpu_task_stack_init+0x600>
}
1101f938:	3000      	movi      	r0, 0
1101f93a:	140f      	addi      	r14, r14, 60
1101f93c:	1494      	pop      	r4-r7, r15

1101f93e <LL_SetExtAdvData>:
{
1101f93e:	14d4      	push      	r4-r7, r15
1101f940:	1424      	subi      	r14, r14, 16
1101f942:	6d8f      	mov      	r6, r3
1101f944:	9869      	ld.w      	r3, (r14, 0x24)
1101f946:	b841      	st.w      	r2, (r14, 0x4)
1101f948:	b862      	st.w      	r3, (r14, 0x8)
1101f94a:	6dc3      	mov      	r7, r0
    if (g_llAdvMode == LL_MODE_LEGACY) {
1101f94c:	1177      	lrw      	r3, 0x1fff0888	// 1101fa28 <LL_SetExtAdvData+0xea>
{
1101f94e:	6d07      	mov      	r4, r1
    if (g_llAdvMode == LL_MODE_LEGACY) {
1101f950:	8340      	ld.b      	r2, (r3, 0x0)
1101f952:	3a40      	cmpnei      	r2, 0
1101f954:	0c65      	bf      	0x1101fa1e	// 1101fa1e <LL_SetExtAdvData+0xe0>
    g_llAdvMode = LL_MODE_EXTENDED;
1101f956:	3201      	movi      	r2, 1
    if (operation > BLE_EXT_ADV_OP_UNCHANGED_DATA) {
1101f958:	3904      	cmphsi      	r1, 5
    g_llAdvMode = LL_MODE_EXTENDED;
1101f95a:	a340      	st.b      	r2, (r3, 0x0)
    if (operation > BLE_EXT_ADV_OP_UNCHANGED_DATA) {
1101f95c:	0864      	bt      	0x1101fa24	// 1101fa24 <LL_SetExtAdvData+0xe6>
    if (advertising_data_length > 251) {
1101f95e:	33fb      	movi      	r3, 251
1101f960:	658c      	cmphs      	r3, r6
1101f962:	0c61      	bf      	0x1101fa24	// 1101fa24 <LL_SetExtAdvData+0xe6>
    if (g_pExtendedAdvInfo == NULL) {
1101f964:	1172      	lrw      	r3, 0x1fff0de0	// 1101fa2c <LL_SetExtAdvData+0xee>
1101f966:	b860      	st.w      	r3, (r14, 0x0)
1101f968:	9300      	ld.w      	r0, (r3, 0x0)
1101f96a:	3840      	cmpnei      	r0, 0
1101f96c:	0c27      	bf      	0x1101f9ba	// 1101f9ba <LL_SetExtAdvData+0x7c>
    for (i = 0; i < g_extAdvNumber; i ++) {
1101f96e:	1151      	lrw      	r2, 0x1fff11b0	// 1101fa30 <LL_SetExtAdvData+0xf2>
1101f970:	6cc3      	mov      	r3, r0
1101f972:	8240      	ld.b      	r2, (r2, 0x0)
1101f974:	3500      	movi      	r5, 0
1101f976:	6495      	cmplt      	r5, r2
1101f978:	0805      	bt      	0x1101f982	// 1101f982 <LL_SetExtAdvData+0x44>
    if (i == g_extAdvNumber) {
1101f97a:	6496      	cmpne      	r5, r2
1101f97c:	0809      	bt      	0x1101f98e	// 1101f98e <LL_SetExtAdvData+0x50>
        return LL_STATUS_ERROR_UNKNOWN_ADV_ID;
1101f97e:	3042      	movi      	r0, 66
1101f980:	0450      	br      	0x1101fa20	// 1101fa20 <LL_SetExtAdvData+0xe2>
1101f982:	2357      	addi      	r3, 88
        if (g_pExtendedAdvInfo[i].advHandle == adv_handle) {
1101f984:	e4231057 	subi      	r1, r3, 88
1101f988:	8120      	ld.b      	r1, (r1, 0x0)
1101f98a:	65c6      	cmpne      	r1, r7
1101f98c:	0819      	bt      	0x1101f9be	// 1101f9be <LL_SetExtAdvData+0x80>
    if (ll_isLegacyAdv(&g_pExtendedAdvInfo[i])
1101f98e:	3258      	movi      	r2, 88
1101f990:	7d48      	mult      	r5, r2
1101f992:	5854      	addu      	r2, r0, r5
1101f994:	6c0b      	mov      	r0, r2
1101f996:	b843      	st.w      	r2, (r14, 0xc)
1101f998:	e0004b3e 	bsr      	0x11029014	// 11029014 <cpu_task_stack_init+0x66c>
1101f99c:	9843      	ld.w      	r2, (r14, 0xc)
1101f99e:	3840      	cmpnei      	r0, 0
1101f9a0:	0811      	bt      	0x1101f9c2	// 1101f9c2 <LL_SetExtAdvData+0x84>
    if (operation == BLE_EXT_ADV_OP_FIRST_FRAG ||
1101f9a2:	e42420fd 	andi      	r1, r4, 253
1101f9a6:	3941      	cmpnei      	r1, 1
1101f9a8:	0c11      	bf      	0x1101f9ca	// 1101f9ca <LL_SetExtAdvData+0x8c>
    if (g_pExtendedAdvInfo[i].data.advertisingDataLength + advertising_data_length > g_advSetMaximumLen) {
1101f9aa:	1103      	lrw      	r0, 0x1fff0f90	// 1101fa34 <LL_SetExtAdvData+0xf6>
1101f9ac:	8a35      	ld.h      	r1, (r2, 0x2a)
1101f9ae:	8800      	ld.h      	r0, (r0, 0x0)
1101f9b0:	6058      	addu      	r1, r6
1101f9b2:	6441      	cmplt      	r0, r1
1101f9b4:	0c10      	bf      	0x1101f9d4	// 1101f9d4 <LL_SetExtAdvData+0x96>
        g_pExtendedAdvInfo[i].data.advertisingDataLength = 0;
1101f9b6:	3300      	movi      	r3, 0
1101f9b8:	aa75      	st.h      	r3, (r2, 0x2a)
        return LL_STATUS_ERROR_OUT_OF_HEAP;
1101f9ba:	3007      	movi      	r0, 7
1101f9bc:	0432      	br      	0x1101fa20	// 1101fa20 <LL_SetExtAdvData+0xe2>
    for (i = 0; i < g_extAdvNumber; i ++) {
1101f9be:	2500      	addi      	r5, 1
1101f9c0:	07db      	br      	0x1101f976	// 1101f976 <LL_SetExtAdvData+0x38>
        && (operation != BLE_EXT_ADV_OP_COMPLETE_DATA
1101f9c2:	3c43      	cmpnei      	r4, 3
1101f9c4:	0830      	bt      	0x1101fa24	// 1101fa24 <LL_SetExtAdvData+0xe6>
            || advertising_data_length > 31)) {
1101f9c6:	3e1f      	cmphsi      	r6, 32
1101f9c8:	082e      	bt      	0x1101fa24	// 1101fa24 <LL_SetExtAdvData+0xe6>
        g_pExtendedAdvInfo[i].data.advertisingDataLength = 0;
1101f9ca:	3300      	movi      	r3, 0
1101f9cc:	aa75      	st.h      	r3, (r2, 0x2a)
        g_pExtendedAdvInfo[i].data.dataComplete = FALSE;
1101f9ce:	dc620028 	st.b      	r3, (r2, 0x28)
1101f9d2:	07ec      	br      	0x1101f9aa	// 1101f9aa <LL_SetExtAdvData+0x6c>
    g_pExtendedAdvInfo[i].data.fragmentPreference = fragment_preference;
1101f9d4:	9860      	ld.w      	r3, (r14, 0x0)
    g_pExtendedAdvInfo[i].advHandle          = adv_handle;
1101f9d6:	a2e0      	st.b      	r7, (r2, 0x0)
    if (operation == BLE_EXT_ADV_OP_LAST_FRAG     ||
1101f9d8:	2c01      	subi      	r4, 2
    g_pExtendedAdvInfo[i].data.fragmentPreference = fragment_preference;
1101f9da:	9340      	ld.w      	r2, (r3, 0x0)
1101f9dc:	d86e0004 	ld.b      	r3, (r14, 0x4)
1101f9e0:	6094      	addu      	r2, r5
    osal_memcpy(&g_pExtendedAdvInfo[i].data.advertisingData[g_pExtendedAdvInfo[i].data.advertisingDataLength],
1101f9e2:	8a35      	ld.h      	r1, (r2, 0x2a)
    g_pExtendedAdvInfo[i].data.fragmentPreference = fragment_preference;
1101f9e4:	dc620029 	st.b      	r3, (r2, 0x29)
    osal_memcpy(&g_pExtendedAdvInfo[i].data.advertisingData[g_pExtendedAdvInfo[i].data.advertisingDataLength],
1101f9e8:	920b      	ld.w      	r0, (r2, 0x2c)
1101f9ea:	6c9b      	mov      	r2, r6
1101f9ec:	6004      	addu      	r0, r1
1101f9ee:	9822      	ld.w      	r1, (r14, 0x8)
    if (operation == BLE_EXT_ADV_OP_LAST_FRAG     ||
1101f9f0:	7510      	zextb      	r4, r4
    osal_memcpy(&g_pExtendedAdvInfo[i].data.advertisingData[g_pExtendedAdvInfo[i].data.advertisingDataLength],
1101f9f2:	e000496d 	bsr      	0x11028ccc	// 11028ccc <cpu_task_stack_init+0x324>
    g_pExtendedAdvInfo[i].data.advertisingDataLength += advertising_data_length;
1101f9f6:	9860      	ld.w      	r3, (r14, 0x0)
    if (operation == BLE_EXT_ADV_OP_LAST_FRAG     ||
1101f9f8:	3c01      	cmphsi      	r4, 2
    g_pExtendedAdvInfo[i].data.advertisingDataLength += advertising_data_length;
1101f9fa:	9360      	ld.w      	r3, (r3, 0x0)
1101f9fc:	614c      	addu      	r5, r3
1101f9fe:	8d75      	ld.h      	r3, (r5, 0x2a)
1101fa00:	618c      	addu      	r6, r3
1101fa02:	add5      	st.h      	r6, (r5, 0x2a)
    if (operation == BLE_EXT_ADV_OP_LAST_FRAG     ||
1101fa04:	0809      	bt      	0x1101fa16	// 1101fa16 <LL_SetExtAdvData+0xd8>
        g_pExtendedAdvInfo[i].data.dataComplete = TRUE;
1101fa06:	3301      	movi      	r3, 1
1101fa08:	dc650028 	st.b      	r3, (r5, 0x28)
        g_pExtendedAdvInfo[i].data.DIDInfo = ll_generateExtAdvDid(g_pExtendedAdvInfo[i].data.DIDInfo);
1101fa0c:	8d18      	ld.h      	r0, (r5, 0x30)
1101fa0e:	e0004c83 	bsr      	0x11029314	// 11029314 <cpu_task_stack_init+0x96c>
1101fa12:	ad18      	st.h      	r0, (r5, 0x30)
1101fa14:	0403      	br      	0x1101fa1a	// 1101fa1a <LL_SetExtAdvData+0xdc>
    if (operation == BLE_EXT_ADV_OP_LAST_FRAG     ||
1101fa16:	3c42      	cmpnei      	r4, 2
1101fa18:	0ffa      	bf      	0x1101fa0c	// 1101fa0c <LL_SetExtAdvData+0xce>
    return (LL_STATUS_SUCCESS);
1101fa1a:	3000      	movi      	r0, 0
1101fa1c:	0402      	br      	0x1101fa20	// 1101fa20 <LL_SetExtAdvData+0xe2>
        return LL_STATUS_ERROR_COMMAND_DISALLOWED;
1101fa1e:	300c      	movi      	r0, 12
}
1101fa20:	1404      	addi      	r14, r14, 16
1101fa22:	1494      	pop      	r4-r7, r15
        return LL_STATUS_ERROR_BAD_PARAMETER;
1101fa24:	3012      	movi      	r0, 18
1101fa26:	07fd      	br      	0x1101fa20	// 1101fa20 <LL_SetExtAdvData+0xe2>
1101fa28:	1fff0888 	.long	0x1fff0888
1101fa2c:	1fff0de0 	.long	0x1fff0de0
1101fa30:	1fff11b0 	.long	0x1fff11b0
1101fa34:	1fff0f90 	.long	0x1fff0f90

1101fa38 <HCI_LE_SetExtAdvDataCmd>:
{
1101fa38:	14d1      	push      	r4, r15
1101fa3a:	1422      	subi      	r14, r14, 8
    status = LL_SetExtAdvData(adv_handle,
1101fa3c:	9884      	ld.w      	r4, (r14, 0x10)
1101fa3e:	b880      	st.w      	r4, (r14, 0x0)
1101fa40:	e3ffff7f 	bsr      	0x1101f93e	// 1101f93e <LL_SetExtAdvData>
    HCI_CommandCompleteEvent(HCI_LE_SET_EXTENDED_ADVERTISING_DATA, sizeof(status), &status);
1101fa44:	3101      	movi      	r1, 1
    status = LL_SetExtAdvData(adv_handle,
1101fa46:	dc0e0007 	st.b      	r0, (r14, 0x7)
    HCI_CommandCompleteEvent(HCI_LE_SET_EXTENDED_ADVERTISING_DATA, sizeof(status), &status);
1101fa4a:	ea002037 	movi      	r0, 8247
1101fa4e:	e44e0006 	addi      	r2, r14, 7
1101fa52:	e0004aab 	bsr      	0x11028fa8	// 11028fa8 <cpu_task_stack_init+0x600>
}
1101fa56:	3000      	movi      	r0, 0
1101fa58:	1402      	addi      	r14, r14, 8
1101fa5a:	1491      	pop      	r4, r15

1101fa5c <LL_SetExtAdvEnable>:
{
1101fa5c:	14d3      	push      	r4-r6, r15
1101fa5e:	1421      	subi      	r14, r14, 4
1101fa60:	9885      	ld.w      	r4, (r14, 0x14)
1101fa62:	6d93      	mov      	r6, r4
    if (g_llAdvMode == LL_MODE_LEGACY) {
1101fa64:	108a      	lrw      	r4, 0x1fff0888	// 1101fa8c <LL_SetExtAdvEnable+0x30>
1101fa66:	84a0      	ld.b      	r5, (r4, 0x0)
1101fa68:	3d40      	cmpnei      	r5, 0
1101fa6a:	0c0c      	bf      	0x1101fa82	// 1101fa82 <LL_SetExtAdvEnable+0x26>
    g_llAdvMode = LL_MODE_EXTENDED;
1101fa6c:	3501      	movi      	r5, 1
    if (number_of_sets == 0 && enable == TRUE) {
1101fa6e:	3940      	cmpnei      	r1, 0
    g_llAdvMode = LL_MODE_EXTENDED;
1101fa70:	a4a0      	st.b      	r5, (r4, 0x0)
    if (number_of_sets == 0 && enable == TRUE) {
1101fa72:	0803      	bt      	0x1101fa78	// 1101fa78 <LL_SetExtAdvEnable+0x1c>
1101fa74:	3841      	cmpnei      	r0, 1
1101fa76:	0c08      	bf      	0x1101fa86	// 1101fa86 <LL_SetExtAdvEnable+0x2a>
1101fa78:	b8c0      	st.w      	r6, (r14, 0x0)
1101fa7a:	e3fffb29 	bsr      	0x1101f0cc	// 1101f0cc <LL_SetExtAdvEnable.part.8>
}
1101fa7e:	1401      	addi      	r14, r14, 4
1101fa80:	1493      	pop      	r4-r6, r15
        return LL_STATUS_ERROR_COMMAND_DISALLOWED;
1101fa82:	300c      	movi      	r0, 12
1101fa84:	07fd      	br      	0x1101fa7e	// 1101fa7e <LL_SetExtAdvEnable+0x22>
        return LL_STATUS_ERROR_UNEXPECTED_PARAMETER;
1101fa86:	3012      	movi      	r0, 18
1101fa88:	07fb      	br      	0x1101fa7e	// 1101fa7e <LL_SetExtAdvEnable+0x22>
1101fa8a:	0000      	bkpt
1101fa8c:	1fff0888 	.long	0x1fff0888

1101fa90 <HCI_LE_SetExtAdvEnableCmd>:
{
1101fa90:	14d1      	push      	r4, r15
1101fa92:	1422      	subi      	r14, r14, 8
    status = LL_SetExtAdvEnable(enable, number_of_sets, advertising_handle, duration, max_extended_advertising_events);
1101fa94:	9884      	ld.w      	r4, (r14, 0x10)
1101fa96:	b880      	st.w      	r4, (r14, 0x0)
1101fa98:	e3ffffe2 	bsr      	0x1101fa5c	// 1101fa5c <LL_SetExtAdvEnable>
    HCI_CommandCompleteEvent(HCI_LE_Set_EXTENDED_ADVERTISING_ENABLE, sizeof(status), &status);
1101fa9c:	3101      	movi      	r1, 1
    status = LL_SetExtAdvEnable(enable, number_of_sets, advertising_handle, duration, max_extended_advertising_events);
1101fa9e:	dc0e0007 	st.b      	r0, (r14, 0x7)
    HCI_CommandCompleteEvent(HCI_LE_Set_EXTENDED_ADVERTISING_ENABLE, sizeof(status), &status);
1101faa2:	ea002039 	movi      	r0, 8249
1101faa6:	e44e0006 	addi      	r2, r14, 7
1101faaa:	e0004a7f 	bsr      	0x11028fa8	// 11028fa8 <cpu_task_stack_init+0x600>
}
1101faae:	3000      	movi      	r0, 0
1101fab0:	1402      	addi      	r14, r14, 8
1101fab2:	1491      	pop      	r4, r15

1101fab4 <LL_ReadMaximumAdvDataLength>:
    *length = g_advSetMaximumLen;
1101fab4:	1067      	lrw      	r3, 0x1fff0f90	// 1101fad0 <LL_ReadMaximumAdvDataLength+0x1c>
1101fab6:	8b60      	ld.h      	r3, (r3, 0x0)
1101fab8:	a860      	st.h      	r3, (r0, 0x0)
    if (g_llAdvMode == LL_MODE_LEGACY) {
1101faba:	1067      	lrw      	r3, 0x1fff0888	// 1101fad4 <LL_ReadMaximumAdvDataLength+0x20>
1101fabc:	8340      	ld.b      	r2, (r3, 0x0)
1101fabe:	3a40      	cmpnei      	r2, 0
1101fac0:	0c05      	bf      	0x1101faca	// 1101faca <LL_ReadMaximumAdvDataLength+0x16>
    g_llAdvMode = LL_MODE_EXTENDED;
1101fac2:	3201      	movi      	r2, 1
    return (LL_STATUS_SUCCESS);
1101fac4:	3000      	movi      	r0, 0
    g_llAdvMode = LL_MODE_EXTENDED;
1101fac6:	a340      	st.b      	r2, (r3, 0x0)
}
1101fac8:	783c      	jmp      	r15
        return LL_STATUS_ERROR_COMMAND_DISALLOWED;
1101faca:	300c      	movi      	r0, 12
1101facc:	07fe      	br      	0x1101fac8	// 1101fac8 <LL_ReadMaximumAdvDataLength+0x14>
1101face:	0000      	bkpt
1101fad0:	1fff0f90 	.long	0x1fff0f90
1101fad4:	1fff0888 	.long	0x1fff0888

1101fad8 <HCI_LE_ReadMaximumAdvDataLengthCmd>:
{
1101fad8:	14d0      	push      	r15
1101fada:	1422      	subi      	r14, r14, 8
    rtnParam[0] = LL_ReadMaximumAdvDataLength(&len);
1101fadc:	e40e0001 	addi      	r0, r14, 2
1101fae0:	e3ffffea 	bsr      	0x1101fab4	// 1101fab4 <LL_ReadMaximumAdvDataLength>
    rtnParam[1] = LO_UINT16(len);
1101fae4:	d86e1001 	ld.h      	r3, (r14, 0x2)
    rtnParam[0] = LL_ReadMaximumAdvDataLength(&len);
1101fae8:	dc0e0004 	st.b      	r0, (r14, 0x4)
    HCI_CommandCompleteEvent(HCI_LE_READ_MAXIMUM_ADVERTISING_DATA_LENGTH, sizeof(rtnParam), rtnParam);
1101faec:	3103      	movi      	r1, 3
1101faee:	ea00203a 	movi      	r0, 8250
    rtnParam[1] = LO_UINT16(len);
1101faf2:	dc6e0005 	st.b      	r3, (r14, 0x5)
    rtnParam[2] = HI_UINT16(len);
1101faf6:	4b68      	lsri      	r3, r3, 8
1101faf8:	dc6e0006 	st.b      	r3, (r14, 0x6)
    HCI_CommandCompleteEvent(HCI_LE_READ_MAXIMUM_ADVERTISING_DATA_LENGTH, sizeof(rtnParam), rtnParam);
1101fafc:	1a01      	addi      	r2, r14, 4
1101fafe:	e0004a55 	bsr      	0x11028fa8	// 11028fa8 <cpu_task_stack_init+0x600>
}
1101fb02:	3000      	movi      	r0, 0
1101fb04:	1402      	addi      	r14, r14, 8
1101fb06:	1490      	pop      	r15

1101fb08 <LL_RemoveAdvSet>:
{
1101fb08:	14c4      	push      	r4-r7
1101fb0a:	1422      	subi      	r14, r14, 8
    if (g_llAdvMode == LL_MODE_LEGACY) {
1101fb0c:	1263      	lrw      	r3, 0x1fff0888	// 1101fc18 <LL_RemoveAdvSet+0x110>
1101fb0e:	8340      	ld.b      	r2, (r3, 0x0)
1101fb10:	3a40      	cmpnei      	r2, 0
1101fb12:	0804      	bt      	0x1101fb1a	// 1101fb1a <LL_RemoveAdvSet+0x12>
        return LL_STATUS_ERROR_COMMAND_DISALLOWED;
1101fb14:	300c      	movi      	r0, 12
}
1101fb16:	1402      	addi      	r14, r14, 8
1101fb18:	1484      	pop      	r4-r7
    g_llAdvMode = LL_MODE_EXTENDED;
1101fb1a:	3201      	movi      	r2, 1
        if (g_pExtendedAdvInfo[i].advHandle == adv_handle) {
1101fb1c:	1280      	lrw      	r4, 0x1fff0de0	// 1101fc1c <LL_RemoveAdvSet+0x114>
    g_llAdvMode = LL_MODE_EXTENDED;
1101fb1e:	a340      	st.b      	r2, (r3, 0x0)
        if (g_pExtendedAdvInfo[i].advHandle == adv_handle) {
1101fb20:	9420      	ld.w      	r1, (r4, 0x0)
1101fb22:	b881      	st.w      	r4, (r14, 0x4)
1101fb24:	6c87      	mov      	r2, r1
    for (i = 0; i < g_extAdvNumber; i ++) {
1101fb26:	117f      	lrw      	r3, 0x1fff11b0	// 1101fc20 <LL_RemoveAdvSet+0x118>
1101fb28:	3458      	movi      	r4, 88
1101fb2a:	83a0      	ld.b      	r5, (r3, 0x0)
1101fb2c:	3300      	movi      	r3, 0
1101fb2e:	654e      	cmpne      	r3, r5
1101fb30:	0811      	bt      	0x1101fb52	// 1101fb52 <LL_RemoveAdvSet+0x4a>
    uint8 extIndex = 0xFF, prdIndex = 0xFF;
1101fb32:	33ff      	movi      	r3, 255
    for (i = 0; i < g_perioAdvNumber; i ++) {
1101fb34:	115c      	lrw      	r2, 0x1fff0f88	// 1101fc24 <LL_RemoveAdvSet+0x11c>
        if (g_pPeriodicAdvInfo[i].advHandle == adv_handle) {
1101fb36:	119d      	lrw      	r4, 0x1fff0de4	// 1101fc28 <LL_RemoveAdvSet+0x120>
    for (i = 0; i < g_perioAdvNumber; i ++) {
1101fb38:	8240      	ld.b      	r2, (r2, 0x0)
        if (g_pPeriodicAdvInfo[i].advHandle == adv_handle) {
1101fb3a:	94c0      	ld.w      	r6, (r4, 0x0)
    for (i = 0; i < g_perioAdvNumber; i ++) {
1101fb3c:	b840      	st.w      	r2, (r14, 0x0)
1101fb3e:	6d5b      	mov      	r5, r6
1101fb40:	3200      	movi      	r2, 0
1101fb42:	98e0      	ld.w      	r7, (r14, 0x0)
1101fb44:	65ca      	cmpne      	r2, r7
1101fb46:	080f      	bt      	0x1101fb64	// 1101fb64 <LL_RemoveAdvSet+0x5c>
    if (extIndex == 0xFF && prdIndex == 0xFF) {
1101fb48:	eb4300ff 	cmpnei      	r3, 255
1101fb4c:	0c64      	bf      	0x1101fc14	// 1101fc14 <LL_RemoveAdvSet+0x10c>
    uint8 extIndex = 0xFF, prdIndex = 0xFF;
1101fb4e:	30ff      	movi      	r0, 255
1101fb50:	0421      	br      	0x1101fb92	// 1101fb92 <LL_RemoveAdvSet+0x8a>
1101fb52:	6090      	addu      	r2, r4
        if (g_pExtendedAdvInfo[i].advHandle == adv_handle) {
1101fb54:	e4c21057 	subi      	r6, r2, 88
1101fb58:	86c0      	ld.b      	r6, (r6, 0x0)
1101fb5a:	641a      	cmpne      	r6, r0
1101fb5c:	0fec      	bf      	0x1101fb34	// 1101fb34 <LL_RemoveAdvSet+0x2c>
    for (i = 0; i < g_extAdvNumber; i ++) {
1101fb5e:	2300      	addi      	r3, 1
1101fb60:	74cc      	zextb      	r3, r3
1101fb62:	07e6      	br      	0x1101fb2e	// 1101fb2e <LL_RemoveAdvSet+0x26>
1101fb64:	2573      	addi      	r5, 116
        if (g_pPeriodicAdvInfo[i].advHandle == adv_handle) {
1101fb66:	e4e51073 	subi      	r7, r5, 116
1101fb6a:	87e0      	ld.b      	r7, (r7, 0x0)
1101fb6c:	641e      	cmpne      	r7, r0
1101fb6e:	0c04      	bf      	0x1101fb76	// 1101fb76 <LL_RemoveAdvSet+0x6e>
    for (i = 0; i < g_perioAdvNumber; i ++) {
1101fb70:	2200      	addi      	r2, 1
1101fb72:	7488      	zextb      	r2, r2
1101fb74:	07e7      	br      	0x1101fb42	// 1101fb42 <LL_RemoveAdvSet+0x3a>
    if (extIndex == 0xFF && prdIndex == 0xFF) {
1101fb76:	eb4300ff 	cmpnei      	r3, 255
1101fb7a:	080b      	bt      	0x1101fb90	// 1101fb90 <LL_RemoveAdvSet+0x88>
1101fb7c:	64ca      	cmpne      	r2, r3
1101fb7e:	0c4b      	bf      	0x1101fc14	// 1101fc14 <LL_RemoveAdvSet+0x10c>
1101fb80:	6c0b      	mov      	r0, r2
        || (prdIndex != 0xFF && g_pPeriodicAdvInfo[prdIndex].active == TRUE)) {
1101fb82:	3574      	movi      	r5, 116
1101fb84:	7d40      	mult      	r5, r0
1101fb86:	6194      	addu      	r6, r5
1101fb88:	86b2      	ld.b      	r5, (r6, 0x12)
1101fb8a:	3d41      	cmpnei      	r5, 1
1101fb8c:	080d      	bt      	0x1101fba6	// 1101fba6 <LL_RemoveAdvSet+0x9e>
1101fb8e:	07c3      	br      	0x1101fb14	// 1101fb14 <LL_RemoveAdvSet+0xc>
    if (extIndex == 0xFF && prdIndex == 0xFF) {
1101fb90:	6c0b      	mov      	r0, r2
    if ((extIndex != 0xFF && g_pExtendedAdvInfo[extIndex].active == TRUE)
1101fb92:	3558      	movi      	r5, 88
1101fb94:	7d4c      	mult      	r5, r3
1101fb96:	6144      	addu      	r5, r1
1101fb98:	d8a50042 	ld.b      	r5, (r5, 0x42)
1101fb9c:	3d41      	cmpnei      	r5, 1
1101fb9e:	0fbb      	bf      	0x1101fb14	// 1101fb14 <LL_RemoveAdvSet+0xc>
        || (prdIndex != 0xFF && g_pPeriodicAdvInfo[prdIndex].active == TRUE)) {
1101fba0:	eb4000ff 	cmpnei      	r0, 255
1101fba4:	0bef      	bt      	0x1101fb82	// 1101fb82 <LL_RemoveAdvSet+0x7a>
    if (extIndex != 0xFF) {
1101fba6:	eb4300ff 	cmpnei      	r3, 255
1101fbaa:	3500      	movi      	r5, 0
1101fbac:	2d00      	subi      	r5, 1
1101fbae:	0c18      	bf      	0x1101fbde	// 1101fbde <LL_RemoveAdvSet+0xd6>
        g_pExtendedAdvInfo[i].advHandle = LL_INVALID_ADV_SET_HANDLE;
1101fbb0:	3358      	movi      	r3, 88
1101fbb2:	c4628426 	mult      	r6, r2, r3
1101fbb6:	6058      	addu      	r1, r6
1101fbb8:	a1a0      	st.b      	r5, (r1, 0x0)
        g_pExtendedAdvInfo[i].parameter.isOwnRandomAddressSet = FALSE;
1101fbba:	9861      	ld.w      	r3, (r14, 0x4)
1101fbbc:	3100      	movi      	r1, 0
1101fbbe:	9360      	ld.w      	r3, (r3, 0x0)
1101fbc0:	60d8      	addu      	r3, r6
1101fbc2:	a332      	st.b      	r1, (r3, 0x12)
        g_pExtendedAdvInfo[i].adv_event_counter = 0;
1101fbc4:	3100      	movi      	r1, 0
        g_pExtendedAdvInfo[i].data.fragmentPreference = 0xFF;
1101fbc6:	dca30029 	st.b      	r5, (r3, 0x29)
        g_pExtendedAdvInfo[i].adv_event_counter = 0;
1101fbca:	dc231024 	st.h      	r1, (r3, 0x48)
        g_pExtendedAdvInfo[i].data.advertisingDataLength = 0;        // no adv data
1101fbce:	ab35      	st.h      	r1, (r3, 0x2a)
        g_pExtendedAdvInfo[i].data.dataComplete = TRUE;
1101fbd0:	3101      	movi      	r1, 1
1101fbd2:	dc230028 	st.b      	r1, (r3, 0x28)
        g_pExtendedAdvInfo[i].scanRspMaxLength = 0;                  // no scan rsp data
1101fbd6:	3100      	movi      	r1, 0
1101fbd8:	ab3a      	st.h      	r1, (r3, 0x34)
        g_pExtendedAdvInfo[i].isPeriodic = FALSE;
1101fbda:	dc230041 	st.b      	r1, (r3, 0x41)
    if (prdIndex != 0xFF) {
1101fbde:	eb4000ff 	cmpnei      	r0, 255
1101fbe2:	3300      	movi      	r3, 0
1101fbe4:	2b00      	subi      	r3, 1
1101fbe6:	0c15      	bf      	0x1101fc10	// 1101fc10 <LL_RemoveAdvSet+0x108>
        g_pPeriodicAdvInfo[i].advHandle                       = LL_INVALID_ADV_SET_HANDLE;
1101fbe8:	3174      	movi      	r1, 116
1101fbea:	7c48      	mult      	r1, r2
1101fbec:	9440      	ld.w      	r2, (r4, 0x0)
1101fbee:	6084      	addu      	r2, r1
1101fbf0:	a260      	st.b      	r3, (r2, 0x0)
        g_pPeriodicAdvInfo[i].active            = FALSE;
1101fbf2:	3300      	movi      	r3, 0
1101fbf4:	9440      	ld.w      	r2, (r4, 0x0)
1101fbf6:	6084      	addu      	r2, r1
1101fbf8:	a272      	st.b      	r3, (r2, 0x12)
        g_pPeriodicAdvInfo[i].periodic_adv_event_counter = 0;
1101fbfa:	3300      	movi      	r3, 0
1101fbfc:	dc621029 	st.h      	r3, (r2, 0x52)
        g_pPeriodicAdvInfo[i].currentAdvOffset  = 0;
1101fc00:	dc62102b 	st.h      	r3, (r2, 0x56)
        g_pPeriodicAdvInfo[i].data.advertisingDataLength = 0;        // no data
1101fc04:	aa63      	st.h      	r3, (r2, 0x6)
        g_pPeriodicAdvInfo[i].data.dataComplete = TRUE;
1101fc06:	3301      	movi      	r3, 1
1101fc08:	a264      	st.b      	r3, (r2, 0x4)
        g_pPeriodicAdvInfo[i].PrdCTEInfo.enable = FALSE;
1101fc0a:	3300      	movi      	r3, 0
1101fc0c:	dc620058 	st.b      	r3, (r2, 0x58)
    return (LL_STATUS_SUCCESS);
1101fc10:	3000      	movi      	r0, 0
1101fc12:	0782      	br      	0x1101fb16	// 1101fb16 <LL_RemoveAdvSet+0xe>
        return LL_STATUS_ERROR_UNKNOWN_ADV_ID;
1101fc14:	3042      	movi      	r0, 66
1101fc16:	0780      	br      	0x1101fb16	// 1101fb16 <LL_RemoveAdvSet+0xe>
1101fc18:	1fff0888 	.long	0x1fff0888
1101fc1c:	1fff0de0 	.long	0x1fff0de0
1101fc20:	1fff11b0 	.long	0x1fff11b0
1101fc24:	1fff0f88 	.long	0x1fff0f88
1101fc28:	1fff0de4 	.long	0x1fff0de4

1101fc2c <HCI_LE_RemoveAdvSetCmd>:
{
1101fc2c:	14d0      	push      	r15
1101fc2e:	1421      	subi      	r14, r14, 4
    status = LL_RemoveAdvSet(adv_handle);
1101fc30:	e3ffff6c 	bsr      	0x1101fb08	// 1101fb08 <LL_RemoveAdvSet>
    HCI_CommandCompleteEvent(HCI_LE_REMOVE_ADVERTISING_SET, sizeof(status), &status);
1101fc34:	3101      	movi      	r1, 1
    status = LL_RemoveAdvSet(adv_handle);
1101fc36:	dc0e0003 	st.b      	r0, (r14, 0x3)
    HCI_CommandCompleteEvent(HCI_LE_REMOVE_ADVERTISING_SET, sizeof(status), &status);
1101fc3a:	ea00203c 	movi      	r0, 8252
1101fc3e:	e44e0002 	addi      	r2, r14, 3
1101fc42:	e00049b3 	bsr      	0x11028fa8	// 11028fa8 <cpu_task_stack_init+0x600>
}
1101fc46:	3000      	movi      	r0, 0
1101fc48:	1401      	addi      	r14, r14, 4
1101fc4a:	1490      	pop      	r15

1101fc4c <LL_ClearAdvSets>:
{
1101fc4c:	14c4      	push      	r4-r7
1101fc4e:	1422      	subi      	r14, r14, 8
    if (g_llAdvMode == LL_MODE_LEGACY) {
1101fc50:	117a      	lrw      	r3, 0x1fff0888	// 1101fd38 <LL_ClearAdvSets+0xec>
1101fc52:	8340      	ld.b      	r2, (r3, 0x0)
1101fc54:	3a40      	cmpnei      	r2, 0
1101fc56:	0804      	bt      	0x1101fc5e	// 1101fc5e <LL_ClearAdvSets+0x12>
        return LL_STATUS_ERROR_COMMAND_DISALLOWED;
1101fc58:	300c      	movi      	r0, 12
}
1101fc5a:	1402      	addi      	r14, r14, 8
1101fc5c:	1484      	pop      	r4-r7
    g_llAdvMode = LL_MODE_EXTENDED;
1101fc5e:	3201      	movi      	r2, 1
    for (i = 0; i < g_extAdvNumber; i ++) {
1101fc60:	1117      	lrw      	r0, 0x1fff11b0	// 1101fd3c <LL_ClearAdvSets+0xf0>
1101fc62:	3558      	movi      	r5, 88
    g_llAdvMode = LL_MODE_EXTENDED;
1101fc64:	a340      	st.b      	r2, (r3, 0x0)
    for (i = 0; i < g_extAdvNumber; i ++) {
1101fc66:	8080      	ld.b      	r4, (r0, 0x0)
        if (g_pExtendedAdvInfo[i].advHandle != LL_INVALID_ADV_SET_HANDLE
1101fc68:	1156      	lrw      	r2, 0x1fff0de0	// 1101fd40 <LL_ClearAdvSets+0xf4>
    for (i = 0; i < g_extAdvNumber; i ++) {
1101fc6a:	3300      	movi      	r3, 0
1101fc6c:	b800      	st.w      	r0, (r14, 0x0)
1101fc6e:	9220      	ld.w      	r1, (r2, 0x0)
        if (g_pExtendedAdvInfo[i].advHandle != LL_INVALID_ADV_SET_HANDLE
1101fc70:	30ff      	movi      	r0, 255
    for (i = 0; i < g_extAdvNumber; i ++) {
1101fc72:	650e      	cmpne      	r3, r4
1101fc74:	081d      	bt      	0x1101fcae	// 1101fcae <LL_ClearAdvSets+0x62>
    for (i = 0; i < g_perioAdvNumber; i ++) {
1101fc76:	11b4      	lrw      	r5, 0x1fff0f88	// 1101fd44 <LL_ClearAdvSets+0xf8>
        if (g_pPeriodicAdvInfo[i].advHandle != LL_INVALID_ADV_SET_HANDLE
1101fc78:	1174      	lrw      	r3, 0x1fff0de4	// 1101fd48 <LL_ClearAdvSets+0xfc>
    for (i = 0; i < g_perioAdvNumber; i ++) {
1101fc7a:	8580      	ld.b      	r4, (r5, 0x0)
1101fc7c:	b8a1      	st.w      	r5, (r14, 0x4)
1101fc7e:	9300      	ld.w      	r0, (r3, 0x0)
        if (g_pPeriodicAdvInfo[i].advHandle != LL_INVALID_ADV_SET_HANDLE
1101fc80:	3100      	movi      	r1, 0
1101fc82:	35ff      	movi      	r5, 255
1101fc84:	3674      	movi      	r6, 116
    for (i = 0; i < g_perioAdvNumber; i ++) {
1101fc86:	6506      	cmpne      	r1, r4
1101fc88:	081e      	bt      	0x1101fcc4	// 1101fcc4 <LL_ClearAdvSets+0x78>
1101fc8a:	3000      	movi      	r0, 0
        g_pExtendedAdvInfo[i].advHandle = LL_INVALID_ADV_SET_HANDLE;
1101fc8c:	3658      	movi      	r6, 88
1101fc8e:	3400      	movi      	r4, 0
1101fc90:	2c00      	subi      	r4, 1
    for (i = 0; i < g_extAdvNumber; i ++) {
1101fc92:	9820      	ld.w      	r1, (r14, 0x0)
1101fc94:	8120      	ld.b      	r1, (r1, 0x0)
1101fc96:	6440      	cmphs      	r0, r1
1101fc98:	0c20      	bf      	0x1101fcd8	// 1101fcd8 <LL_ClearAdvSets+0x8c>
1101fc9a:	3100      	movi      	r1, 0
        g_pPeriodicAdvInfo[i].advHandle                       = LL_INVALID_ADV_SET_HANDLE;
1101fc9c:	3574      	movi      	r5, 116
1101fc9e:	3000      	movi      	r0, 0
1101fca0:	2800      	subi      	r0, 1
    for (i = 0; i < g_perioAdvNumber; i ++) {
1101fca2:	9841      	ld.w      	r2, (r14, 0x4)
1101fca4:	8240      	ld.b      	r2, (r2, 0x0)
1101fca6:	6484      	cmphs      	r1, r2
1101fca8:	0c31      	bf      	0x1101fd0a	// 1101fd0a <LL_ClearAdvSets+0xbe>
1101fcaa:	3000      	movi      	r0, 0
1101fcac:	07d7      	br      	0x1101fc5a	// 1101fc5a <LL_ClearAdvSets+0xe>
        if (g_pExtendedAdvInfo[i].advHandle != LL_INVALID_ADV_SET_HANDLE
1101fcae:	81c0      	ld.b      	r6, (r1, 0x0)
1101fcb0:	641a      	cmpne      	r6, r0
1101fcb2:	0c05      	bf      	0x1101fcbc	// 1101fcbc <LL_ClearAdvSets+0x70>
            && g_pExtendedAdvInfo[i].active == TRUE) {
1101fcb4:	d8c10042 	ld.b      	r6, (r1, 0x42)
1101fcb8:	3e41      	cmpnei      	r6, 1
1101fcba:	0fcf      	bf      	0x1101fc58	// 1101fc58 <LL_ClearAdvSets+0xc>
    for (i = 0; i < g_extAdvNumber; i ++) {
1101fcbc:	2300      	addi      	r3, 1
1101fcbe:	6054      	addu      	r1, r5
1101fcc0:	74cc      	zextb      	r3, r3
1101fcc2:	07d8      	br      	0x1101fc72	// 1101fc72 <LL_ClearAdvSets+0x26>
        if (g_pPeriodicAdvInfo[i].advHandle != LL_INVALID_ADV_SET_HANDLE
1101fcc4:	80e0      	ld.b      	r7, (r0, 0x0)
1101fcc6:	655e      	cmpne      	r7, r5
1101fcc8:	0c04      	bf      	0x1101fcd0	// 1101fcd0 <LL_ClearAdvSets+0x84>
            && g_pPeriodicAdvInfo[i].active == TRUE) {
1101fcca:	80f2      	ld.b      	r7, (r0, 0x12)
1101fccc:	3f41      	cmpnei      	r7, 1
1101fcce:	0fc5      	bf      	0x1101fc58	// 1101fc58 <LL_ClearAdvSets+0xc>
    for (i = 0; i < g_perioAdvNumber; i ++) {
1101fcd0:	2100      	addi      	r1, 1
1101fcd2:	6018      	addu      	r0, r6
1101fcd4:	7444      	zextb      	r1, r1
1101fcd6:	07d8      	br      	0x1101fc86	// 1101fc86 <LL_ClearAdvSets+0x3a>
        g_pExtendedAdvInfo[i].advHandle = LL_INVALID_ADV_SET_HANDLE;
1101fcd8:	c4c08425 	mult      	r5, r0, r6
1101fcdc:	9220      	ld.w      	r1, (r2, 0x0)
1101fcde:	6054      	addu      	r1, r5
1101fce0:	a180      	st.b      	r4, (r1, 0x0)
    for (i = 0; i < g_extAdvNumber; i ++) {
1101fce2:	2000      	addi      	r0, 1
        g_pExtendedAdvInfo[i].parameter.isOwnRandomAddressSet = FALSE;
1101fce4:	9220      	ld.w      	r1, (r2, 0x0)
1101fce6:	6054      	addu      	r1, r5
1101fce8:	3500      	movi      	r5, 0
        g_pExtendedAdvInfo[i].data.fragmentPreference = 0xFF;
1101fcea:	dc810029 	st.b      	r4, (r1, 0x29)
        g_pExtendedAdvInfo[i].parameter.isOwnRandomAddressSet = FALSE;
1101fcee:	a1b2      	st.b      	r5, (r1, 0x12)
        g_pExtendedAdvInfo[i].adv_event_counter = 0;
1101fcf0:	3500      	movi      	r5, 0
    for (i = 0; i < g_extAdvNumber; i ++) {
1101fcf2:	7400      	zextb      	r0, r0
        g_pExtendedAdvInfo[i].adv_event_counter = 0;
1101fcf4:	dca11024 	st.h      	r5, (r1, 0x48)
        g_pExtendedAdvInfo[i].data.advertisingDataLength = 0;        // no adv data
1101fcf8:	a9b5      	st.h      	r5, (r1, 0x2a)
        g_pExtendedAdvInfo[i].data.dataComplete = TRUE;
1101fcfa:	3501      	movi      	r5, 1
1101fcfc:	dca10028 	st.b      	r5, (r1, 0x28)
        g_pExtendedAdvInfo[i].scanRspMaxLength = 0;                  // no scan rsp data
1101fd00:	3500      	movi      	r5, 0
1101fd02:	a9ba      	st.h      	r5, (r1, 0x34)
        g_pExtendedAdvInfo[i].isPeriodic = FALSE;
1101fd04:	dca10041 	st.b      	r5, (r1, 0x41)
1101fd08:	07c5      	br      	0x1101fc92	// 1101fc92 <LL_ClearAdvSets+0x46>
        g_pPeriodicAdvInfo[i].advHandle                       = LL_INVALID_ADV_SET_HANDLE;
1101fd0a:	c4a18426 	mult      	r6, r1, r5
1101fd0e:	9380      	ld.w      	r4, (r3, 0x0)
1101fd10:	6118      	addu      	r4, r6
1101fd12:	a400      	st.b      	r0, (r4, 0x0)
        g_pPeriodicAdvInfo[i].active            = FALSE;
1101fd14:	3400      	movi      	r4, 0
1101fd16:	9340      	ld.w      	r2, (r3, 0x0)
1101fd18:	6098      	addu      	r2, r6
1101fd1a:	a292      	st.b      	r4, (r2, 0x12)
        g_pPeriodicAdvInfo[i].periodic_adv_event_counter = 0;
1101fd1c:	3400      	movi      	r4, 0
    for (i = 0; i < g_perioAdvNumber; i ++) {
1101fd1e:	2100      	addi      	r1, 1
        g_pPeriodicAdvInfo[i].periodic_adv_event_counter = 0;
1101fd20:	dc821029 	st.h      	r4, (r2, 0x52)
        g_pPeriodicAdvInfo[i].currentAdvOffset  = 0;
1101fd24:	dc82102b 	st.h      	r4, (r2, 0x56)
        g_pPeriodicAdvInfo[i].data.advertisingDataLength = 0;        // no data
1101fd28:	aa83      	st.h      	r4, (r2, 0x6)
        g_pPeriodicAdvInfo[i].data.dataComplete = TRUE;
1101fd2a:	3401      	movi      	r4, 1
    for (i = 0; i < g_perioAdvNumber; i ++) {
1101fd2c:	7444      	zextb      	r1, r1
        g_pPeriodicAdvInfo[i].data.dataComplete = TRUE;
1101fd2e:	a284      	st.b      	r4, (r2, 0x4)
        g_pPeriodicAdvInfo[i].PrdCTEInfo.enable = FALSE;
1101fd30:	3400      	movi      	r4, 0
1101fd32:	dc820058 	st.b      	r4, (r2, 0x58)
1101fd36:	07b6      	br      	0x1101fca2	// 1101fca2 <LL_ClearAdvSets+0x56>
1101fd38:	1fff0888 	.long	0x1fff0888
1101fd3c:	1fff11b0 	.long	0x1fff11b0
1101fd40:	1fff0de0 	.long	0x1fff0de0
1101fd44:	1fff0f88 	.long	0x1fff0f88
1101fd48:	1fff0de4 	.long	0x1fff0de4

1101fd4c <HCI_LE_ClearAdvSetsCmd>:
{
1101fd4c:	14d0      	push      	r15
1101fd4e:	1421      	subi      	r14, r14, 4
    status = LL_ClearAdvSets();
1101fd50:	e3ffff7e 	bsr      	0x1101fc4c	// 1101fc4c <LL_ClearAdvSets>
    HCI_CommandCompleteEvent(HCI_LE_CLEAR_ADVERTISING_SETS, sizeof(status), &status);
1101fd54:	3101      	movi      	r1, 1
    status = LL_ClearAdvSets();
1101fd56:	dc0e0003 	st.b      	r0, (r14, 0x3)
    HCI_CommandCompleteEvent(HCI_LE_CLEAR_ADVERTISING_SETS, sizeof(status), &status);
1101fd5a:	ea00203d 	movi      	r0, 8253
1101fd5e:	e44e0002 	addi      	r2, r14, 3
1101fd62:	e0004923 	bsr      	0x11028fa8	// 11028fa8 <cpu_task_stack_init+0x600>
}
1101fd66:	3000      	movi      	r0, 0
1101fd68:	1401      	addi      	r14, r14, 4
1101fd6a:	1490      	pop      	r15

1101fd6c <LL_InitialExtendedAdv>:
{
1101fd6c:	14d3      	push      	r4-r6, r15
1101fd6e:	6d03      	mov      	r4, r0
1101fd70:	6d8b      	mov      	r6, r2
1101fd72:	6d47      	mov      	r5, r1
    LL_InitExtendedAdv(extAdvInfo, extAdvSetNumber, advSetMaxLen);
1101fd74:	e0004980 	bsr      	0x11029074	// 11029074 <cpu_task_stack_init+0x6cc>
    g_pExtendedAdvInfo  = extAdvInfo;
1101fd78:	1069      	lrw      	r3, 0x1fff0de0	// 1101fd9c <LL_InitialExtendedAdv+0x30>
1101fd7a:	3258      	movi      	r2, 88
1101fd7c:	b380      	st.w      	r4, (r3, 0x0)
1101fd7e:	2427      	addi      	r4, 40
    g_extAdvNumber      = extAdvSetNumber;
1101fd80:	1068      	lrw      	r3, 0x1fff11b0	// 1101fda0 <LL_InitialExtendedAdv+0x34>
1101fd82:	a3a0      	st.b      	r5, (r3, 0x0)
    g_advSetMaximumLen  = advSetMaxLen;
1101fd84:	1068      	lrw      	r3, 0x1fff0f90	// 1101fda4 <LL_InitialExtendedAdv+0x38>
1101fd86:	abc0      	st.h      	r6, (r3, 0x0)
    for (i = 0; i < g_extAdvNumber; i ++) {
1101fd88:	3300      	movi      	r3, 0
1101fd8a:	654d      	cmplt      	r3, r5
1101fd8c:	0803      	bt      	0x1101fd92	// 1101fd92 <LL_InitialExtendedAdv+0x26>
}
1101fd8e:	3000      	movi      	r0, 0
1101fd90:	1493      	pop      	r4-r6, r15
        g_pExtendedAdvInfo[i].data.dataComplete = TRUE;
1101fd92:	3101      	movi      	r1, 1
    for (i = 0; i < g_extAdvNumber; i ++) {
1101fd94:	2300      	addi      	r3, 1
        g_pExtendedAdvInfo[i].data.dataComplete = TRUE;
1101fd96:	a420      	st.b      	r1, (r4, 0x0)
1101fd98:	6108      	addu      	r4, r2
1101fd9a:	07f8      	br      	0x1101fd8a	// 1101fd8a <LL_InitialExtendedAdv+0x1e>
1101fd9c:	1fff0de0 	.long	0x1fff0de0
1101fda0:	1fff11b0 	.long	0x1fff11b0
1101fda4:	1fff0f90 	.long	0x1fff0f90

1101fda8 <LL_SetPeriodicAdvParameter>:
{
1101fda8:	14c4      	push      	r4-r7
1101fdaa:	1425      	subi      	r14, r14, 20
1101fdac:	b863      	st.w      	r3, (r14, 0xc)
1101fdae:	b842      	st.w      	r2, (r14, 0x8)
1101fdb0:	b800      	st.w      	r0, (r14, 0x0)
1101fdb2:	b821      	st.w      	r1, (r14, 0x4)
    if (g_llAdvMode == LL_MODE_LEGACY) {
1101fdb4:	117b      	lrw      	r3, 0x1fff0888	// 1101fea0 <LL_SetPeriodicAdvParameter+0xf8>
1101fdb6:	8340      	ld.b      	r2, (r3, 0x0)
1101fdb8:	3a40      	cmpnei      	r2, 0
1101fdba:	0c70      	bf      	0x1101fe9a	// 1101fe9a <LL_SetPeriodicAdvParameter+0xf2>
    g_llAdvMode = LL_MODE_EXTENDED;
1101fdbc:	3201      	movi      	r2, 1
1101fdbe:	a340      	st.b      	r2, (r3, 0x0)
    if (g_pPeriodicAdvInfo == NULL) {
1101fdc0:	1179      	lrw      	r3, 0x1fff0de4	// 1101fea4 <LL_SetPeriodicAdvParameter+0xfc>
1101fdc2:	b864      	st.w      	r3, (r14, 0x10)
1101fdc4:	93e0      	ld.w      	r7, (r3, 0x0)
1101fdc6:	3f40      	cmpnei      	r7, 0
1101fdc8:	0c3a      	bf      	0x1101fe3c	// 1101fe3c <LL_SetPeriodicAdvParameter+0x94>
    for (i = 0; i < g_perioAdvNumber; i ++) {
1101fdca:	1178      	lrw      	r3, 0x1fff0f88	// 1101fea8 <LL_SetPeriodicAdvParameter+0x100>
1101fdcc:	6c1f      	mov      	r0, r7
1101fdce:	8380      	ld.b      	r4, (r3, 0x0)
1101fdd0:	3100      	movi      	r1, 0
1101fdd2:	6cdf      	mov      	r3, r7
1101fdd4:	3274      	movi      	r2, 116
1101fdd6:	6505      	cmplt      	r1, r4
1101fdd8:	0810      	bt      	0x1101fdf8	// 1101fdf8 <LL_SetPeriodicAdvParameter+0x50>
    if (i == g_perioAdvNumber) {
1101fdda:	6506      	cmpne      	r1, r4
1101fddc:	3300      	movi      	r3, 0
1101fdde:	0c32      	bf      	0x1101fe42	// 1101fe42 <LL_SetPeriodicAdvParameter+0x9a>
    for (i = 0; i < g_extAdvNumber; i ++) {
1101fde0:	1153      	lrw      	r2, 0x1fff11b0	// 1101feac <LL_SetPeriodicAdvParameter+0x104>
1101fde2:	8200      	ld.b      	r0, (r2, 0x0)
        if (g_pExtendedAdvInfo[i].advHandle == adv_handle) {
1101fde4:	1153      	lrw      	r2, 0x1fff0de0	// 1101feb0 <LL_SetPeriodicAdvParameter+0x108>
1101fde6:	9280      	ld.w      	r4, (r2, 0x0)
1101fde8:	6c53      	mov      	r1, r4
1101fdea:	3200      	movi      	r2, 0
    for (i = 0; i < g_extAdvNumber; i ++) {
1101fdec:	6409      	cmplt      	r2, r0
1101fdee:	082e      	bt      	0x1101fe4a	// 1101fe4a <LL_SetPeriodicAdvParameter+0xa2>
    if (i == g_extAdvNumber) {
1101fdf0:	640a      	cmpne      	r2, r0
1101fdf2:	0833      	bt      	0x1101fe58	// 1101fe58 <LL_SetPeriodicAdvParameter+0xb0>
        return LL_STATUS_ERROR_UNKNOWN_ADV_ID;
1101fdf4:	3042      	movi      	r0, 66
1101fdf6:	0424      	br      	0x1101fe3e	// 1101fe3e <LL_SetPeriodicAdvParameter+0x96>
1101fdf8:	60c8      	addu      	r3, r2
        if (g_pPeriodicAdvInfo[i].advHandle == adv_handle) {
1101fdfa:	e4a31073 	subi      	r5, r3, 116
1101fdfe:	85a0      	ld.b      	r5, (r5, 0x0)
1101fe00:	98c0      	ld.w      	r6, (r14, 0x0)
1101fe02:	6596      	cmpne      	r5, r6
1101fe04:	0c21      	bf      	0x1101fe46	// 1101fe46 <LL_SetPeriodicAdvParameter+0x9e>
    for (i = 0; i < g_perioAdvNumber; i ++) {
1101fe06:	2100      	addi      	r1, 1
1101fe08:	07e7      	br      	0x1101fdd6	// 1101fdd6 <LL_SetPeriodicAdvParameter+0x2e>
        for (i = 0; i < g_perioAdvNumber; i ++) {
1101fe0a:	2300      	addi      	r3, 1
1101fe0c:	64c6      	cmpne      	r1, r3
1101fe0e:	0c17      	bf      	0x1101fe3c	// 1101fe3c <LL_SetPeriodicAdvParameter+0x94>
            if (g_pPeriodicAdvInfo[i].advHandle == LL_INVALID_ADV_SET_HANDLE) {
1101fe10:	6c83      	mov      	r2, r0
1101fe12:	2073      	addi      	r0, 116
1101fe14:	e4a01073 	subi      	r5, r0, 116
1101fe18:	85a0      	ld.b      	r5, (r5, 0x0)
1101fe1a:	6596      	cmpne      	r5, r6
1101fe1c:	0bf7      	bt      	0x1101fe0a	// 1101fe0a <LL_SetPeriodicAdvParameter+0x62>
                g_pPeriodicAdvInfo[i].active            = FALSE;
1101fe1e:	3100      	movi      	r1, 0
    if (i == g_perioAdvNumber) {
1101fe20:	64d2      	cmpne      	r4, r3
                g_pPeriodicAdvInfo[i].active            = FALSE;
1101fe22:	a232      	st.b      	r1, (r2, 0x12)
                g_pPeriodicAdvInfo[i].periodic_adv_event_counter = 0;
1101fe24:	3100      	movi      	r1, 0
1101fe26:	dc221029 	st.h      	r1, (r2, 0x52)
                g_pPeriodicAdvInfo[i].currentAdvOffset  = 0;
1101fe2a:	dc22102b 	st.h      	r1, (r2, 0x56)
                g_pPeriodicAdvInfo[i].data.advertisingDataLength = 0;        // no data
1101fe2e:	aa23      	st.h      	r1, (r2, 0x6)
                g_pPeriodicAdvInfo[i].data.dataComplete = TRUE;
1101fe30:	3101      	movi      	r1, 1
1101fe32:	a224      	st.b      	r1, (r2, 0x4)
                g_pPeriodicAdvInfo[i].PrdCTEInfo.enable = FALSE;
1101fe34:	3100      	movi      	r1, 0
1101fe36:	dc220058 	st.b      	r1, (r2, 0x58)
    if (i == g_perioAdvNumber) {
1101fe3a:	0bd3      	bt      	0x1101fde0	// 1101fde0 <LL_SetPeriodicAdvParameter+0x38>
        return LL_STATUS_ERROR_OUT_OF_HEAP;
1101fe3c:	3007      	movi      	r0, 7
}
1101fe3e:	1405      	addi      	r14, r14, 20
1101fe40:	1484      	pop      	r4-r7
            if (g_pPeriodicAdvInfo[i].advHandle == LL_INVALID_ADV_SET_HANDLE) {
1101fe42:	36ff      	movi      	r6, 255
1101fe44:	07e4      	br      	0x1101fe0c	// 1101fe0c <LL_SetPeriodicAdvParameter+0x64>
        if (g_pPeriodicAdvInfo[i].advHandle == adv_handle) {
1101fe46:	3300      	movi      	r3, 0
1101fe48:	07cc      	br      	0x1101fde0	// 1101fde0 <LL_SetPeriodicAdvParameter+0x38>
1101fe4a:	2157      	addi      	r1, 88
        if (g_pExtendedAdvInfo[i].advHandle == adv_handle) {
1101fe4c:	e4c11057 	subi      	r6, r1, 88
1101fe50:	86c0      	ld.b      	r6, (r6, 0x0)
1101fe52:	98a0      	ld.w      	r5, (r14, 0x0)
1101fe54:	655a      	cmpne      	r6, r5
1101fe56:	0820      	bt      	0x1101fe96	// 1101fe96 <LL_SetPeriodicAdvParameter+0xee>
        g_pExtendedAdvInfo[i].isPeriodic = TRUE;
1101fe58:	3158      	movi      	r1, 88
1101fe5a:	7c84      	mult      	r2, r1
1101fe5c:	3101      	movi      	r1, 1
1101fe5e:	6090      	addu      	r2, r4
1101fe60:	dc220041 	st.b      	r1, (r2, 0x41)
    g_pPeriodicAdvInfo[prdIdx].advHandle  = adv_handle;
1101fe64:	d82e0000 	ld.b      	r1, (r14, 0x0)
1101fe68:	3274      	movi      	r2, 116
1101fe6a:	7c8c      	mult      	r2, r3
1101fe6c:	5f68      	addu      	r3, r7, r2
1101fe6e:	a320      	st.b      	r1, (r3, 0x0)
    g_pPeriodicAdvInfo[prdIdx].adv_event_properties = adv_event_properties;
1101fe70:	9864      	ld.w      	r3, (r14, 0x10)
    g_pPeriodicAdvInfo[prdIdx].adv_interval = interval_min * 1250;   // TO be refined. e.g. algin to 20, 40, 80ms, ...
1101fe72:	ea0104e2 	movi      	r1, 1250
    g_pPeriodicAdvInfo[prdIdx].adv_event_properties = adv_event_properties;
1101fe76:	9360      	ld.w      	r3, (r3, 0x0)
1101fe78:	60c8      	addu      	r3, r2
1101fe7a:	d84e1006 	ld.h      	r2, (r14, 0xc)
    return LL_STATUS_SUCCESS;
1101fe7e:	3000      	movi      	r0, 0
    g_pPeriodicAdvInfo[prdIdx].adv_event_properties = adv_event_properties;
1101fe80:	ab48      	st.h      	r2, (r3, 0x10)
    g_pPeriodicAdvInfo[prdIdx].adv_interval_max     = interval_max;
1101fe82:	d84e1004 	ld.h      	r2, (r14, 0x8)
1101fe86:	ab47      	st.h      	r2, (r3, 0xe)
    g_pPeriodicAdvInfo[prdIdx].adv_interval_min     = interval_min;
1101fe88:	d84e1002 	ld.h      	r2, (r14, 0x4)
1101fe8c:	ab46      	st.h      	r2, (r3, 0xc)
    g_pPeriodicAdvInfo[prdIdx].adv_interval = interval_min * 1250;   // TO be refined. e.g. algin to 20, 40, 80ms, ...
1101fe8e:	9841      	ld.w      	r2, (r14, 0x4)
1101fe90:	7c84      	mult      	r2, r1
1101fe92:	b345      	st.w      	r2, (r3, 0x14)
1101fe94:	07d5      	br      	0x1101fe3e	// 1101fe3e <LL_SetPeriodicAdvParameter+0x96>
    for (i = 0; i < g_extAdvNumber; i ++) {
1101fe96:	2200      	addi      	r2, 1
1101fe98:	07aa      	br      	0x1101fdec	// 1101fdec <LL_SetPeriodicAdvParameter+0x44>
        return LL_STATUS_ERROR_COMMAND_DISALLOWED;
1101fe9a:	300c      	movi      	r0, 12
1101fe9c:	07d1      	br      	0x1101fe3e	// 1101fe3e <LL_SetPeriodicAdvParameter+0x96>
1101fe9e:	0000      	bkpt
1101fea0:	1fff0888 	.long	0x1fff0888
1101fea4:	1fff0de4 	.long	0x1fff0de4
1101fea8:	1fff0f88 	.long	0x1fff0f88
1101feac:	1fff11b0 	.long	0x1fff11b0
1101feb0:	1fff0de0 	.long	0x1fff0de0

1101feb4 <HCI_LE_SetPeriodicAdvParameterCmd>:
{
1101feb4:	14d0      	push      	r15
1101feb6:	1421      	subi      	r14, r14, 4
    status = LL_SetPeriodicAdvParameter(adv_handle,
1101feb8:	e3ffff78 	bsr      	0x1101fda8	// 1101fda8 <LL_SetPeriodicAdvParameter>
    HCI_CommandCompleteEvent(0x203E, sizeof(status), &status);
1101febc:	3101      	movi      	r1, 1
    status = LL_SetPeriodicAdvParameter(adv_handle,
1101febe:	dc0e0003 	st.b      	r0, (r14, 0x3)
    HCI_CommandCompleteEvent(0x203E, sizeof(status), &status);
1101fec2:	ea00203e 	movi      	r0, 8254
1101fec6:	e44e0002 	addi      	r2, r14, 3
1101feca:	e000486f 	bsr      	0x11028fa8	// 11028fa8 <cpu_task_stack_init+0x600>
}
1101fece:	3000      	movi      	r0, 0
1101fed0:	1401      	addi      	r14, r14, 4
1101fed2:	1490      	pop      	r15

1101fed4 <ll_allocAuxAdvTimeSlot_prd>:
{
1101fed4:	14d4      	push      	r4-r7, r15
1101fed6:	1421      	subi      	r14, r14, 4
    p_scheduler = &g_pAdvSchInfo_periodic[index];
1101fed8:	10dc      	lrw      	r6, 0x1fff1180	// 1101ff48 <ll_allocAuxAdvTimeSlot_prd+0x74>
    ext_adv_part_duration = pGlobal_config[LL_EXT_ADV_INTER_PRI_CHN_INT] * 5 ;
1101feda:	10fd      	lrw      	r7, 0x1fffa670	// 1101ff4c <ll_allocAuxAdvTimeSlot_prd+0x78>
    p_scheduler = &g_pAdvSchInfo_periodic[index];
1101fedc:	40a2      	lsli      	r5, r0, 2
1101fede:	6140      	addu      	r5, r0
1101fee0:	4562      	lsli      	r3, r5, 2
1101fee2:	96a0      	ld.w      	r5, (r6, 0x0)
1101fee4:	614c      	addu      	r5, r3
    ext_adv_part_duration = pGlobal_config[LL_EXT_ADV_INTER_PRI_CHN_INT] * 5 ;
1101fee6:	9760      	ld.w      	r3, (r7, 0x0)
{
1101fee8:	6d03      	mov      	r4, r0
    ext_adv_part_duration = pGlobal_config[LL_EXT_ADV_INTER_PRI_CHN_INT] * 5 ;
1101feea:	d8632051 	ld.w      	r3, (r3, 0x144)
1101feee:	b860      	st.w      	r3, (r14, 0x0)
    if (!isTimer4Running()) {
1101fef0:	e000499a 	bsr      	0x11029224	// 11029224 <cpu_task_stack_init+0x87c>
1101fef4:	9860      	ld.w      	r3, (r14, 0x0)
1101fef6:	3840      	cmpnei      	r0, 0
1101fef8:	0812      	bt      	0x1101ff1c	// 1101ff1c <ll_allocAuxAdvTimeSlot_prd+0x48>
    ext_adv_part_duration = pGlobal_config[LL_EXT_ADV_INTER_PRI_CHN_INT] * 5 ;
1101fefa:	4382      	lsli      	r4, r3, 2
1101fefc:	610c      	addu      	r4, r3
        if (isTimer1Running()) {
1101fefe:	e000470b 	bsr      	0x11028d14	// 11028d14 <cpu_task_stack_init+0x36c>
1101ff02:	3840      	cmpnei      	r0, 0
1101ff04:	0c1b      	bf      	0x1101ff3a	// 1101ff3a <ll_allocAuxAdvTimeSlot_prd+0x66>
            p_scheduler->auxPduRemainder = read_LL_remainder_time1() + ext_adv_part_duration + pGlobal_config[LL_CONN_TASK_DURATION];
1101ff06:	e0004875 	bsr      	0x11028ff0	// 11028ff0 <cpu_task_stack_init+0x648>
1101ff0a:	9760      	ld.w      	r3, (r7, 0x0)
1101ff0c:	d8632058 	ld.w      	r3, (r3, 0x160)
1101ff10:	60d0      	addu      	r3, r4
1101ff12:	600c      	addu      	r0, r3
1101ff14:	b504      	st.w      	r0, (r5, 0x10)
}
1101ff16:	3001      	movi      	r0, 1
1101ff18:	1401      	addi      	r14, r14, 4
1101ff1a:	1494      	pop      	r4-r7, r15
    p_current_scheduler = &g_pAdvSchInfo_periodic[g_currentExtAdv_periodic];
1101ff1c:	106d      	lrw      	r3, 0x1fff118b	// 1101ff50 <ll_allocAuxAdvTimeSlot_prd+0x7c>
    p_scheduler->auxPduRemainder = p_current_scheduler->auxPduRemainder +
1101ff1e:	9600      	ld.w      	r0, (r6, 0x0)
    p_current_scheduler = &g_pAdvSchInfo_periodic[g_currentExtAdv_periodic];
1101ff20:	8320      	ld.b      	r1, (r3, 0x0)
    p_scheduler->auxPduRemainder = p_current_scheduler->auxPduRemainder +
1101ff22:	4142      	lsli      	r2, r1, 2
1101ff24:	6084      	addu      	r2, r1
1101ff26:	4262      	lsli      	r3, r2, 2
1101ff28:	60c0      	addu      	r3, r0
1101ff2a:	9344      	ld.w      	r2, (r3, 0x10)
                                    ((index - g_currentExtAdv_periodic) * g_advPerSlotTick) :
1101ff2c:	6504      	cmphs      	r1, r4
1101ff2e:	106a      	lrw      	r3, 0x1fff1540	// 1101ff54 <ll_allocAuxAdvTimeSlot_prd+0x80>
1101ff30:	6106      	subu      	r4, r1
1101ff32:	9360      	ld.w      	r3, (r3, 0x0)
1101ff34:	7d0c      	mult      	r4, r3
1101ff36:	0804      	bt      	0x1101ff3e	// 1101ff3e <ll_allocAuxAdvTimeSlot_prd+0x6a>
    p_scheduler->auxPduRemainder = p_current_scheduler->auxPduRemainder +
1101ff38:	6108      	addu      	r4, r2
1101ff3a:	b584      	st.w      	r4, (r5, 0x10)
    return ret;
1101ff3c:	07ed      	br      	0x1101ff16	// 1101ff16 <ll_allocAuxAdvTimeSlot_prd+0x42>
                                    (g_advSlotPeriodic + (index - g_currentExtAdv_periodic) * g_advPerSlotTick));
1101ff3e:	1067      	lrw      	r3, 0x1fff13a8	// 1101ff58 <ll_allocAuxAdvTimeSlot_prd+0x84>
                                    ((index - g_currentExtAdv_periodic) * g_advPerSlotTick) :
1101ff40:	9360      	ld.w      	r3, (r3, 0x0)
1101ff42:	610c      	addu      	r4, r3
1101ff44:	07fa      	br      	0x1101ff38	// 1101ff38 <ll_allocAuxAdvTimeSlot_prd+0x64>
1101ff46:	0000      	bkpt
1101ff48:	1fff1180 	.long	0x1fff1180
1101ff4c:	1fffa670 	.long	0x1fffa670
1101ff50:	1fff118b 	.long	0x1fff118b
1101ff54:	1fff1540 	.long	0x1fff1540
1101ff58:	1fff13a8 	.long	0x1fff13a8

1101ff5c <ll_add_adv_task_periodic1>:
{
1101ff5c:	14d4      	push      	r4-r7, r15
1101ff5e:	1428      	subi      	r14, r14, 32
1101ff60:	6d07      	mov      	r4, r1
    temp = pExtAdv->parameter.priAdvChnMap;
1101ff62:	8150      	ld.b      	r2, (r1, 0x10)
{
1101ff64:	b800      	st.w      	r0, (r14, 0x0)
    chanNumber = (temp & 0x01) + ((temp & 0x02) >> 1) + ((temp & 0x04) >> 2);
1101ff66:	3301      	movi      	r3, 1
1101ff68:	5221      	asri      	r1, r2, 1
1101ff6a:	5202      	asri      	r0, r2, 2
1101ff6c:	680c      	and      	r0, r3
1101ff6e:	684c      	and      	r1, r3
1101ff70:	68c8      	and      	r3, r2
1101ff72:	6040      	addu      	r1, r0
1101ff74:	604c      	addu      	r1, r3
    pPrdAdv->currentChn = ((temp & ((~temp) + 1)) >> 1) + 37;       // calculate 1st adv channel
1101ff76:	3300      	movi      	r3, 0
1101ff78:	60ca      	subu      	r3, r2
1101ff7a:	68c8      	and      	r3, r2
1101ff7c:	9840      	ld.w      	r2, (r14, 0x0)
1101ff7e:	5361      	asri      	r3, r3, 1
1101ff80:	2324      	addi      	r3, 37
1101ff82:	dc620055 	st.b      	r3, (r2, 0x55)
    pPrdAdv->currentAdvOffset = 0;
1101ff86:	6ccb      	mov      	r3, r2
1101ff88:	3200      	movi      	r2, 0
    chanNumber = (temp & 0x01) + ((temp & 0x02) >> 1) + ((temp & 0x04) >> 2);
1101ff8a:	b823      	st.w      	r1, (r14, 0xc)
    pPrdAdv->currentAdvOffset = 0;
1101ff8c:	dc43102b 	st.h      	r2, (r3, 0x56)
    pPrdAdv->periodic_adv_event_counter = 0;
1101ff90:	dc431029 	st.h      	r2, (r3, 0x52)
    pExtAdv->adv_event_duration = 0;
1101ff94:	3300      	movi      	r3, 0
1101ff96:	135b      	lrw      	r2, 0x1fff1180	// 11020180 <ll_add_adv_task_periodic1+0x224>
1101ff98:	133b      	lrw      	r1, 0x1fff154f	// 11020184 <ll_add_adv_task_periodic1+0x228>
1101ff9a:	b847      	st.w      	r2, (r14, 0x1c)
1101ff9c:	b473      	st.w      	r3, (r4, 0x4c)
    pExtAdv->adv_event_counter  = 0;
1101ff9e:	dc641024 	st.h      	r3, (r4, 0x48)
    if (g_currentExtAdv_periodic == LL_INVALID_ADV_SET_HANDLE) {
1101ffa2:	137a      	lrw      	r3, 0x1fff118b	// 11020188 <ll_add_adv_task_periodic1+0x22c>
1101ffa4:	8300      	ld.b      	r0, (r3, 0x0)
1101ffa6:	b866      	st.w      	r3, (r14, 0x18)
1101ffa8:	eb4000ff 	cmpnei      	r0, 255
1101ffac:	0847      	bt      	0x1102003a	// 1102003a <ll_add_adv_task_periodic1+0xde>
        g_schExtAdvNum_periodic = 1;
1101ffae:	3201      	movi      	r2, 1
        ll_allocAuxAdvTimeSlot_prd(g_currentExtAdv_periodic);
1101ffb0:	3000      	movi      	r0, 0
        g_schExtAdvNum_periodic = 1;
1101ffb2:	a140      	st.b      	r2, (r1, 0x0)
        g_currentExtAdv_periodic = 0;          // scheduler index = 0
1101ffb4:	3200      	movi      	r2, 0
1101ffb6:	13d6      	lrw      	r6, 0x1fff0f98	// 1102018c <ll_add_adv_task_periodic1+0x230>
1101ffb8:	13f6      	lrw      	r7, 0x1fffa670	// 11020190 <ll_add_adv_task_periodic1+0x234>
1101ffba:	a340      	st.b      	r2, (r3, 0x0)
        p_current_scheduler = &g_pAdvSchInfo_periodic[g_currentExtAdv_periodic];
1101ffbc:	1371      	lrw      	r3, 0x1fff1180	// 11020180 <ll_add_adv_task_periodic1+0x224>
1101ffbe:	93a0      	ld.w      	r5, (r3, 0x0)
        ll_allocAuxAdvTimeSlot_prd(g_currentExtAdv_periodic);
1101ffc0:	e3ffff8a 	bsr      	0x1101fed4	// 1101fed4 <ll_allocAuxAdvTimeSlot_prd>
        p_current_scheduler->pAdvInfo_prd = pPrdAdv;
1101ffc4:	9860      	ld.w      	r3, (r14, 0x0)
        p_current_scheduler->pAdvInfo     = pExtAdv;
1101ffc6:	b582      	st.w      	r4, (r5, 0x8)
        p_current_scheduler->pAdvInfo_prd = pPrdAdv;
1101ffc8:	b561      	st.w      	r3, (r5, 0x4)
        p_current_scheduler->adv_handler  = pExtAdv->advHandle;
1101ffca:	8460      	ld.b      	r3, (r4, 0x0)
1101ffcc:	a560      	st.b      	r3, (r5, 0x0)
        if (llWaitingIrq) {
1101ffce:	1372      	lrw      	r3, 0x1fff0df8	// 11020194 <ll_add_adv_task_periodic1+0x238>
1101ffd0:	9360      	ld.w      	r3, (r3, 0x0)
1101ffd2:	3b40      	cmpnei      	r3, 0
1101ffd4:	0c14      	bf      	0x1101fffc	// 1101fffc <ll_add_adv_task_periodic1+0xa0>
            g_currentAdvTimer = pGlobal_config[LL_CONN_TASK_DURATION];
1101ffd6:	9760      	ld.w      	r3, (r7, 0x0)
1101ffd8:	d8632058 	ld.w      	r3, (r3, 0x160)
1101ffdc:	b660      	st.w      	r3, (r6, 0x0)
        ll_prd_adv_schedule_next_event(g_currentAdvTimer);
1101ffde:	9600      	ld.w      	r0, (r6, 0x0)
1101ffe0:	e00048c2 	bsr      	0x11029164	// 11029164 <cpu_task_stack_init+0x7bc>
        g_timerExpiryTick = read_current_fine_time();                 // fake timer expiry tick
1101ffe4:	e000487e 	bsr      	0x110290e0	// 110290e0 <cpu_task_stack_init+0x738>
1101ffe8:	136c      	lrw      	r3, 0x1fff0f8c	// 11020198 <ll_add_adv_task_periodic1+0x23c>
1101ffea:	b300      	st.w      	r0, (r3, 0x0)
        p_current_scheduler->nextEventRemainder = p_current_scheduler->pAdvInfo->primary_advertising_interval;  // add some random delay between 0-10ms?
1101ffec:	9562      	ld.w      	r3, (r5, 0x8)
1101ffee:	9371      	ld.w      	r3, (r3, 0x44)
1101fff0:	b563      	st.w      	r3, (r5, 0xc)
        pExtAdv->active = TRUE;
1101fff2:	3301      	movi      	r3, 1
1101fff4:	dc640042 	st.b      	r3, (r4, 0x42)
}
1101fff8:	1408      	addi      	r14, r14, 32
1101fffa:	1494      	pop      	r4-r7, r15
        } else if (isTimer1Running()
1101fffc:	e000468c 	bsr      	0x11028d14	// 11028d14 <cpu_task_stack_init+0x36c>
11020000:	3840      	cmpnei      	r0, 0
11020002:	0c0d      	bf      	0x1102001c	// 1102001c <ll_add_adv_task_periodic1+0xc0>
                   && ((remainder = read_LL_remainder_time1()) < pGlobal_config[LL_PRD_ADV_TASK_DURATION])) {   // timer1 for connection or legacy adv
11020004:	e00047f6 	bsr      	0x11028ff0	// 11028ff0 <cpu_task_stack_init+0x648>
11020008:	9760      	ld.w      	r3, (r7, 0x0)
1102000a:	d8432057 	ld.w      	r2, (r3, 0x15c)
1102000e:	6480      	cmphs      	r0, r2
11020010:	0806      	bt      	0x1102001c	// 1102001c <ll_add_adv_task_periodic1+0xc0>
            g_currentAdvTimer =  remainder + pGlobal_config[LL_CONN_TASK_DURATION];   // no enough time for adv case
11020012:	d8632058 	ld.w      	r3, (r3, 0x160)
11020016:	600c      	addu      	r0, r3
11020018:	b600      	st.w      	r0, (r6, 0x0)
1102001a:	07e2      	br      	0x1101ffde	// 1101ffde <ll_add_adv_task_periodic1+0x82>
            if (chanNumber > 1) {
1102001c:	9863      	ld.w      	r3, (r14, 0xc)
1102001e:	3b01      	cmphsi      	r3, 2
                g_currentAdvTimer = pGlobal_config[LL_EXT_ADV_INTER_PRI_CHN_INT];
11020020:	9760      	ld.w      	r3, (r7, 0x0)
            if (chanNumber > 1) {
11020022:	0c09      	bf      	0x11020034	// 11020034 <ll_add_adv_task_periodic1+0xd8>
                g_currentAdvTimer = pGlobal_config[LL_EXT_ADV_INTER_PRI_CHN_INT];
11020024:	d8632051 	ld.w      	r3, (r3, 0x144)
            llSetupPrdAdvEvent(pPrdAdv, pExtAdv);              /// TODO
11020028:	6c53      	mov      	r1, r4
1102002a:	9800      	ld.w      	r0, (r14, 0x0)
                g_currentAdvTimer = pGlobal_config[LL_EXT_ADV_PRI_2_SEC_CHN_INT];
1102002c:	b660      	st.w      	r3, (r6, 0x0)
            llSetupPrdAdvEvent(pPrdAdv, pExtAdv);              /// TODO
1102002e:	e000471b 	bsr      	0x11028e64	// 11028e64 <cpu_task_stack_init+0x4bc>
11020032:	07d6      	br      	0x1101ffde	// 1101ffde <ll_add_adv_task_periodic1+0x82>
                g_currentAdvTimer = pGlobal_config[LL_EXT_ADV_PRI_2_SEC_CHN_INT];
11020034:	d863205e 	ld.w      	r3, (r3, 0x178)
11020038:	07f8      	br      	0x11020028	// 11020028 <ll_add_adv_task_periodic1+0xcc>
    p_current_scheduler = &g_pAdvSchInfo_periodic[g_currentExtAdv_periodic];
1102003a:	1272      	lrw      	r3, 0x1fff1180	// 11020180 <ll_add_adv_task_periodic1+0x224>
1102003c:	4042      	lsli      	r2, r0, 2
1102003e:	9360      	ld.w      	r3, (r3, 0x0)
11020040:	6080      	addu      	r2, r0
11020042:	4242      	lsli      	r2, r2, 2
11020044:	608c      	addu      	r2, r3
11020046:	b841      	st.w      	r2, (r14, 0x4)
    for (i = 0; i < g_schExtAdvNum_periodic; i++) {
11020048:	3500      	movi      	r5, 0
1102004a:	8140      	ld.b      	r2, (r1, 0x0)
1102004c:	3014      	movi      	r0, 20
        if (g_pAdvSchInfo_periodic[i].adv_handler == LL_INVALID_ADV_SET_HANDLE) {
1102004e:	36ff      	movi      	r6, 255
    for (i = 0; i < g_schExtAdvNum_periodic; i++) {
11020050:	6495      	cmplt      	r5, r2
11020052:	0fd3      	bf      	0x1101fff8	// 1101fff8 <ll_add_adv_task_periodic1+0x9c>
        if (g_pAdvSchInfo_periodic[i].adv_handler == LL_INVALID_ADV_SET_HANDLE) {
11020054:	b864      	st.w      	r3, (r14, 0x10)
11020056:	60c0      	addu      	r3, r0
11020058:	98e4      	ld.w      	r7, (r14, 0x10)
1102005a:	87e0      	ld.b      	r7, (r7, 0x0)
1102005c:	659e      	cmpne      	r7, r6
1102005e:	0c7e      	bf      	0x1102015a	// 1102015a <ll_add_adv_task_periodic1+0x1fe>
    for (i = 0; i < g_schExtAdvNum_periodic; i++) {
11020060:	2500      	addi      	r5, 1
11020062:	07f7      	br      	0x11020050	// 11020050 <ll_add_adv_task_periodic1+0xf4>
        remainder = read_ll_adv_remainder_time();
11020064:	e000482c 	bsr      	0x110290bc	// 110290bc <cpu_task_stack_init+0x714>
11020068:	6d83      	mov      	r6, r0
        T1   = read_current_fine_time();
1102006a:	e000483b 	bsr      	0x110290e0	// 110290e0 <cpu_task_stack_init+0x738>
        elapse_time = g_currentAdvTimer - remainder;
1102006e:	1248      	lrw      	r2, 0x1fff0f98	// 1102018c <ll_add_adv_task_periodic1+0x230>
        T1   = read_current_fine_time();
11020070:	b802      	st.w      	r0, (r14, 0x8)
        elapse_time = g_currentAdvTimer - remainder;
11020072:	92e0      	ld.w      	r7, (r2, 0x0)
11020074:	61da      	subu      	r7, r6
    if (isTimer1Running()) {
11020076:	e000464f 	bsr      	0x11028d14	// 11028d14 <cpu_task_stack_init+0x36c>
1102007a:	3840      	cmpnei      	r0, 0
1102007c:	0c06      	bf      	0x11020088	// 11020088 <ll_add_adv_task_periodic1+0x12c>
        uint32 temp = read_LL_remainder_time1();
1102007e:	e00047b9 	bsr      	0x11028ff0	// 11028ff0 <cpu_task_stack_init+0x648>
        remainder = (temp < remainder) ? temp : remainder;
11020082:	6580      	cmphs      	r0, r6
11020084:	c4c00c20 	incf      	r6, r0, 0
    if (llWaitingIrq) {         // there is ongoing LL IRQ, not setup adv
11020088:	1243      	lrw      	r2, 0x1fff0df8	// 11020194 <ll_add_adv_task_periodic1+0x238>
1102008a:	9240      	ld.w      	r2, (r2, 0x0)
        remainder = 0;
1102008c:	3a40      	cmpnei      	r2, 0
1102008e:	3200      	movi      	r2, 0
11020090:	c4c20c40 	inct      	r6, r2, 0
    if (remainder > pGlobal_config[LL_EXT_ADV_TASK_DURATION]) {
11020094:	115f      	lrw      	r2, 0x1fffa670	// 11020190 <ll_add_adv_task_periodic1+0x234>
11020096:	9240      	ld.w      	r2, (r2, 0x0)
11020098:	d8222056 	ld.w      	r1, (r2, 0x158)
1102009c:	6584      	cmphs      	r1, r6
1102009e:	084c      	bt      	0x11020136	// 11020136 <ll_add_adv_task_periodic1+0x1da>
        g_currentExtAdv = spare;
110200a0:	117f      	lrw      	r3, 0x1fff12dc	// 1102019c <ll_add_adv_task_periodic1+0x240>
110200a2:	d82e0014 	ld.b      	r1, (r14, 0x14)
110200a6:	a320      	st.b      	r1, (r3, 0x0)
        if (chanNumber > 1) {
110200a8:	9863      	ld.w      	r3, (r14, 0xc)
110200aa:	3b01      	cmphsi      	r3, 2
110200ac:	1178      	lrw      	r3, 0x1fff0f98	// 1102018c <ll_add_adv_task_periodic1+0x230>
110200ae:	0c04      	bf      	0x110200b6	// 110200b6 <ll_add_adv_task_periodic1+0x15a>
            g_currentAdvTimer = pGlobal_config[LL_EXT_ADV_INTER_PRI_CHN_INT];
110200b0:	d8422051 	ld.w      	r2, (r2, 0x144)
110200b4:	b340      	st.w      	r2, (r3, 0x0)
        ll_prd_adv_schedule_next_event(g_currentAdvTimer);
110200b6:	9300      	ld.w      	r0, (r3, 0x0)
110200b8:	e0004856 	bsr      	0x11029164	// 11029164 <cpu_task_stack_init+0x7bc>
        llSetupPrdAdvEvent(pPrdAdv, pExtAdv);
110200bc:	6c53      	mov      	r1, r4
110200be:	9800      	ld.w      	r0, (r14, 0x0)
110200c0:	e00046d2 	bsr      	0x11028e64	// 11028e64 <cpu_task_stack_init+0x4bc>
        T2 = read_current_fine_time();
110200c4:	e000480e 	bsr      	0x110290e0	// 110290e0 <cpu_task_stack_init+0x738>
        delta = LL_TIME_DELTA(T1, T2);
110200c8:	9862      	ld.w      	r3, (r14, 0x8)
110200ca:	64c0      	cmphs      	r0, r3
110200cc:	0c1c      	bf      	0x11020104	// 11020104 <ll_add_adv_task_periodic1+0x1a8>
110200ce:	600e      	subu      	r0, r3
        p_current_scheduler->nextEventRemainder = p_current_scheduler->pAdvInfo->primary_advertising_interval;  // add some random delay between 0-10ms?
110200d0:	9861      	ld.w      	r3, (r14, 0x4)
110200d2:	9841      	ld.w      	r2, (r14, 0x4)
110200d4:	9362      	ld.w      	r3, (r3, 0x8)
                g_pAdvSchInfo_periodic[i].auxPduRemainder    -= (elapse_time + delta);
110200d6:	61c0      	addu      	r7, r0
        p_current_scheduler->nextEventRemainder = p_current_scheduler->pAdvInfo->primary_advertising_interval;  // add some random delay between 0-10ms?
110200d8:	9371      	ld.w      	r3, (r3, 0x44)
110200da:	b263      	st.w      	r3, (r2, 0xc)
            if (g_pAdvSchInfo_periodic[i].adv_handler != LL_INVALID_ADV_SET_HANDLE &&
110200dc:	35ff      	movi      	r5, 255
        for (i = 0; i < g_extAdvNumber; i++) {
110200de:	1171      	lrw      	r3, 0x1fff11b0	// 110201a0 <ll_add_adv_task_periodic1+0x244>
110200e0:	3200      	movi      	r2, 0
110200e2:	8360      	ld.b      	r3, (r3, 0x0)
110200e4:	b862      	st.w      	r3, (r14, 0x8)
                i != g_currentExtAdv_periodic) {
110200e6:	9866      	ld.w      	r3, (r14, 0x18)
110200e8:	3014      	movi      	r0, 20
110200ea:	83c0      	ld.b      	r6, (r3, 0x0)
110200ec:	9867      	ld.w      	r3, (r14, 0x1c)
110200ee:	9360      	ld.w      	r3, (r3, 0x0)
        for (i = 0; i < g_extAdvNumber; i++) {
110200f0:	9822      	ld.w      	r1, (r14, 0x8)
110200f2:	6449      	cmplt      	r2, r1
110200f4:	080e      	bt      	0x11020110	// 11020110 <ll_add_adv_task_periodic1+0x1b4>
    p_current_scheduler->pAdvInfo = pExtAdv;
110200f6:	9861      	ld.w      	r3, (r14, 0x4)
    p_current_scheduler->pAdvInfo_prd = pPrdAdv;
110200f8:	9840      	ld.w      	r2, (r14, 0x0)
    p_current_scheduler->pAdvInfo = pExtAdv;
110200fa:	b382      	st.w      	r4, (r3, 0x8)
    p_current_scheduler->pAdvInfo_prd = pPrdAdv;
110200fc:	b341      	st.w      	r2, (r3, 0x4)
    p_current_scheduler->adv_handler = pExtAdv->advHandle;
110200fe:	8440      	ld.b      	r2, (r4, 0x0)
11020100:	a340      	st.b      	r2, (r3, 0x0)
11020102:	077b      	br      	0x1101fff8	// 1101fff8 <ll_add_adv_task_periodic1+0x9c>
        delta = LL_TIME_DELTA(T1, T2);
11020104:	9862      	ld.w      	r3, (r14, 0x8)
11020106:	600e      	subu      	r0, r3
11020108:	c6a05023 	bmaski      	r3, 22
1102010c:	600c      	addu      	r0, r3
1102010e:	07e1      	br      	0x110200d0	// 110200d0 <ll_add_adv_task_periodic1+0x174>
            if (g_pAdvSchInfo_periodic[i].adv_handler != LL_INVALID_ADV_SET_HANDLE &&
11020110:	8320      	ld.b      	r1, (r3, 0x0)
11020112:	6546      	cmpne      	r1, r5
11020114:	0c0e      	bf      	0x11020130	// 11020130 <ll_add_adv_task_periodic1+0x1d4>
11020116:	658a      	cmpne      	r2, r6
11020118:	0c0c      	bf      	0x11020130	// 11020130 <ll_add_adv_task_periodic1+0x1d4>
                if (g_pAdvSchInfo_periodic[i].pAdvInfo->active == TRUE) {
1102011a:	9322      	ld.w      	r1, (r3, 0x8)
1102011c:	d8210042 	ld.b      	r1, (r1, 0x42)
11020120:	3941      	cmpnei      	r1, 1
11020122:	0804      	bt      	0x1102012a	// 1102012a <ll_add_adv_task_periodic1+0x1ce>
                    g_pAdvSchInfo_periodic[i].nextEventRemainder -= (elapse_time + delta);
11020124:	9323      	ld.w      	r1, (r3, 0xc)
11020126:	605e      	subu      	r1, r7
11020128:	b323      	st.w      	r1, (r3, 0xc)
                g_pAdvSchInfo_periodic[i].auxPduRemainder    -= (elapse_time + delta);
1102012a:	9324      	ld.w      	r1, (r3, 0x10)
1102012c:	605e      	subu      	r1, r7
1102012e:	b324      	st.w      	r1, (r3, 0x10)
        for (i = 0; i < g_extAdvNumber; i++) {
11020130:	2200      	addi      	r2, 1
11020132:	60c0      	addu      	r3, r0
11020134:	07de      	br      	0x110200f0	// 110200f0 <ll_add_adv_task_periodic1+0x194>
        p_scheduler->nextEventRemainder = p_current_scheduler->nextEventRemainder
11020136:	9861      	ld.w      	r3, (r14, 0x4)
11020138:	9303      	ld.w      	r0, (r3, 0xc)
                                          + (spare > g_currentExtAdv_periodic ?
1102013a:	9866      	ld.w      	r3, (r14, 0x18)
1102013c:	8320      	ld.b      	r1, (r3, 0x0)
                                             (spare - g_currentExtAdv_periodic) :
1102013e:	6545      	cmplt      	r1, r5
11020140:	0c09      	bf      	0x11020152	// 11020152 <ll_add_adv_task_periodic1+0x1f6>
                                             (g_extAdvNumber + spare - g_currentExtAdv_periodic)) * pGlobal_config[LL_PRD_ADV_TASK_DURATION];
11020142:	d8622057 	ld.w      	r3, (r2, 0x15c)
11020146:	6146      	subu      	r5, r1
11020148:	7d4c      	mult      	r5, r3
        p_scheduler->nextEventRemainder = p_current_scheduler->nextEventRemainder
1102014a:	9864      	ld.w      	r3, (r14, 0x10)
                                          + (spare > g_currentExtAdv_periodic ?
1102014c:	6014      	addu      	r0, r5
        p_scheduler->nextEventRemainder = p_current_scheduler->nextEventRemainder
1102014e:	b303      	st.w      	r0, (r3, 0xc)
11020150:	07d3      	br      	0x110200f6	// 110200f6 <ll_add_adv_task_periodic1+0x19a>
                                             (g_extAdvNumber + spare - g_currentExtAdv_periodic)) * pGlobal_config[LL_PRD_ADV_TASK_DURATION];
11020152:	1074      	lrw      	r3, 0x1fff11b0	// 110201a0 <ll_add_adv_task_periodic1+0x244>
11020154:	8360      	ld.b      	r3, (r3, 0x0)
11020156:	614c      	addu      	r5, r3
11020158:	07f5      	br      	0x11020142	// 11020142 <ll_add_adv_task_periodic1+0x1e6>
    pExtAdv->active = TRUE;
1102015a:	3301      	movi      	r3, 1
    g_schExtAdvNum_periodic ++;
1102015c:	2200      	addi      	r2, 1
    pExtAdv->active = TRUE;
1102015e:	dc640042 	st.b      	r3, (r4, 0x42)
    ll_allocAuxAdvTimeSlot_prd(spare);
11020162:	74d4      	zextb      	r3, r5
11020164:	6c0f      	mov      	r0, r3
    g_schExtAdvNum_periodic ++;
11020166:	a140      	st.b      	r2, (r1, 0x0)
    ll_allocAuxAdvTimeSlot_prd(spare);
11020168:	b865      	st.w      	r3, (r14, 0x14)
1102016a:	e3fffeb5 	bsr      	0x1101fed4	// 1101fed4 <ll_allocAuxAdvTimeSlot_prd>
    if (isTimer4Running()) {
1102016e:	e000485b 	bsr      	0x11029224	// 11029224 <cpu_task_stack_init+0x87c>
11020172:	3840      	cmpnei      	r0, 0
11020174:	0b78      	bt      	0x11020064	// 11020064 <ll_add_adv_task_periodic1+0x108>
    uint32  T1 = 0, T2, delta, remainder, elapse_time = 0;
11020176:	3300      	movi      	r3, 0
11020178:	3700      	movi      	r7, 0
        remainder = 0;
1102017a:	3600      	movi      	r6, 0
    uint32  T1 = 0, T2, delta, remainder, elapse_time = 0;
1102017c:	b862      	st.w      	r3, (r14, 0x8)
1102017e:	077c      	br      	0x11020076	// 11020076 <ll_add_adv_task_periodic1+0x11a>
11020180:	1fff1180 	.long	0x1fff1180
11020184:	1fff154f 	.long	0x1fff154f
11020188:	1fff118b 	.long	0x1fff118b
1102018c:	1fff0f98 	.long	0x1fff0f98
11020190:	1fffa670 	.long	0x1fffa670
11020194:	1fff0df8 	.long	0x1fff0df8
11020198:	1fff0f8c 	.long	0x1fff0f8c
1102019c:	1fff12dc 	.long	0x1fff12dc
110201a0:	1fff11b0 	.long	0x1fff11b0

110201a4 <LL_SetPeriodicAdvEnable>:
{
110201a4:	14d4      	push      	r4-r7, r15
110201a6:	1423      	subi      	r14, r14, 12
    if (g_llAdvMode == LL_MODE_LEGACY) {
110201a8:	1368      	lrw      	r3, 0x1fff0888	// 11020348 <LL_SetPeriodicAdvEnable+0x1a4>
{
110201aa:	b800      	st.w      	r0, (r14, 0x0)
    if (g_llAdvMode == LL_MODE_LEGACY) {
110201ac:	8340      	ld.b      	r2, (r3, 0x0)
110201ae:	3a40      	cmpnei      	r2, 0
110201b0:	0804      	bt      	0x110201b8	// 110201b8 <LL_SetPeriodicAdvEnable+0x14>
        return LL_STATUS_ERROR_COMMAND_DISALLOWED;
110201b2:	300c      	movi      	r0, 12
}
110201b4:	1403      	addi      	r14, r14, 12
110201b6:	1494      	pop      	r4-r7, r15
    g_llAdvMode = LL_MODE_EXTENDED;
110201b8:	3201      	movi      	r2, 1
110201ba:	a340      	st.b      	r2, (r3, 0x0)
    if (g_pPeriodicAdvInfo == NULL) {
110201bc:	1364      	lrw      	r3, 0x1fff0de4	// 1102034c <LL_SetPeriodicAdvEnable+0x1a8>
110201be:	9340      	ld.w      	r2, (r3, 0x0)
110201c0:	3a40      	cmpnei      	r2, 0
110201c2:	0cbe      	bf      	0x1102033e	// 1102033e <LL_SetPeriodicAdvEnable+0x19a>
    for (i = 0; i < g_perioAdvNumber; i ++) {
110201c4:	1363      	lrw      	r3, 0x1fff0f88	// 11020350 <LL_SetPeriodicAdvEnable+0x1ac>
110201c6:	6c0b      	mov      	r0, r2
110201c8:	8380      	ld.b      	r4, (r3, 0x0)
110201ca:	3574      	movi      	r5, 116
110201cc:	3300      	movi      	r3, 0
110201ce:	650d      	cmplt      	r3, r4
110201d0:	0838      	bt      	0x11020240	// 11020240 <LL_SetPeriodicAdvEnable+0x9c>
    if (i == g_perioAdvNumber) {
110201d2:	650e      	cmpne      	r3, r4
110201d4:	0cb7      	bf      	0x11020342	// 11020342 <LL_SetPeriodicAdvEnable+0x19e>
    periodicAdvInfo_t *pPrdAdv = NULL;
110201d6:	3700      	movi      	r7, 0
    if (g_pPeriodicAdvInfo[i].data.dataComplete == FALSE
110201d8:	3074      	movi      	r0, 116
110201da:	7cc0      	mult      	r3, r0
110201dc:	60c8      	addu      	r3, r2
110201de:	8364      	ld.b      	r3, (r3, 0x4)
110201e0:	3b40      	cmpnei      	r3, 0
110201e2:	0804      	bt      	0x110201ea	// 110201ea <LL_SetPeriodicAdvEnable+0x46>
        && enable == TRUE) {
110201e4:	9860      	ld.w      	r3, (r14, 0x0)
110201e6:	3b41      	cmpnei      	r3, 1
110201e8:	0fe5      	bf      	0x110201b2	// 110201b2 <LL_SetPeriodicAdvEnable+0xe>
    if (enable == FALSE) {
110201ea:	9860      	ld.w      	r3, (r14, 0x0)
110201ec:	3b40      	cmpnei      	r3, 0
110201ee:	8772      	ld.b      	r3, (r7, 0x12)
110201f0:	0833      	bt      	0x11020256	// 11020256 <LL_SetPeriodicAdvEnable+0xb2>
        if (pPrdAdv->active == FALSE) { // already disable, do nothing
110201f2:	3b40      	cmpnei      	r3, 0
110201f4:	0c24      	bf      	0x1102023c	// 1102023c <LL_SetPeriodicAdvEnable+0x98>
        for (i = 0; i < g_schExtAdvNum_periodic; i++) {
110201f6:	1278      	lrw      	r3, 0x1fff154f	// 11020354 <LL_SetPeriodicAdvEnable+0x1b0>
110201f8:	6c5f      	mov      	r1, r7
110201fa:	8360      	ld.b      	r3, (r3, 0x0)
110201fc:	b861      	st.w      	r3, (r14, 0x4)
            if (g_pAdvSchInfo_periodic[i].adv_handler == pPrdAdv[i].advHandle) {
110201fe:	3000      	movi      	r0, 0
11020200:	1276      	lrw      	r3, 0x1fff1180	// 11020358 <LL_SetPeriodicAdvEnable+0x1b4>
11020202:	3574      	movi      	r5, 116
11020204:	9340      	ld.w      	r2, (r3, 0x0)
        for (i = 0; i < g_schExtAdvNum_periodic; i++) {
11020206:	9861      	ld.w      	r3, (r14, 0x4)
11020208:	64c1      	cmplt      	r0, r3
1102020a:	0c16      	bf      	0x11020236	// 11020236 <LL_SetPeriodicAdvEnable+0x92>
            if (g_pAdvSchInfo_periodic[i].adv_handler == pPrdAdv[i].advHandle) {
1102020c:	6ccb      	mov      	r3, r2
1102020e:	81c0      	ld.b      	r6, (r1, 0x0)
11020210:	8380      	ld.b      	r4, (r3, 0x0)
11020212:	2213      	addi      	r2, 20
11020214:	6592      	cmpne      	r4, r6
11020216:	6054      	addu      	r1, r5
11020218:	081d      	bt      	0x11020252	// 11020252 <LL_SetPeriodicAdvEnable+0xae>
                g_pAdvSchInfo_periodic[i].pAdvInfo_prd->active = FALSE;
1102021a:	9341      	ld.w      	r2, (r3, 0x4)
1102021c:	3100      	movi      	r1, 0
1102021e:	a232      	st.b      	r1, (r2, 0x12)
                g_pAdvSchInfo_periodic[i].auxPduRemainder = LL_INVALID_TIME;
11020220:	3200      	movi      	r2, 0
11020222:	2a00      	subi      	r2, 1
11020224:	b344      	st.w      	r2, (r3, 0x10)
                if (g_pAdvSchInfo_periodic[i].pAdvInfo->active == FALSE) {
11020226:	9362      	ld.w      	r3, (r3, 0x8)
11020228:	d8630042 	ld.b      	r3, (r3, 0x42)
1102022c:	3b40      	cmpnei      	r3, 0
1102022e:	0804      	bt      	0x11020236	// 11020236 <LL_SetPeriodicAdvEnable+0x92>
                    ll_delete_adv_task_periodic(i);
11020230:	7400      	zextb      	r0, r0
11020232:	e0004673 	bsr      	0x11028f18	// 11028f18 <cpu_task_stack_init+0x570>
    pPrdAdv->active = enable;
11020236:	d86e0000 	ld.b      	r3, (r14, 0x0)
1102023a:	a772      	st.b      	r3, (r7, 0x12)
            return  LL_STATUS_SUCCESS;
1102023c:	3000      	movi      	r0, 0
1102023e:	07bb      	br      	0x110201b4	// 110201b4 <LL_SetPeriodicAdvEnable+0x10>
        if (g_pPeriodicAdvInfo[i].advHandle == advertising_handle) {
11020240:	6dc3      	mov      	r7, r0
11020242:	6014      	addu      	r0, r5
11020244:	e4c01073 	subi      	r6, r0, 116
11020248:	86c0      	ld.b      	r6, (r6, 0x0)
1102024a:	645a      	cmpne      	r6, r1
1102024c:	0fc6      	bf      	0x110201d8	// 110201d8 <LL_SetPeriodicAdvEnable+0x34>
    for (i = 0; i < g_perioAdvNumber; i ++) {
1102024e:	2300      	addi      	r3, 1
11020250:	07bf      	br      	0x110201ce	// 110201ce <LL_SetPeriodicAdvEnable+0x2a>
        for (i = 0; i < g_schExtAdvNum_periodic; i++) {
11020252:	2000      	addi      	r0, 1
11020254:	07d9      	br      	0x11020206	// 11020206 <LL_SetPeriodicAdvEnable+0x62>
        if (pPrdAdv->active == TRUE) {
11020256:	3b41      	cmpnei      	r3, 1
11020258:	0ff2      	bf      	0x1102023c	// 1102023c <LL_SetPeriodicAdvEnable+0x98>
        for (i = 0; i < g_extAdvNumber; i ++) {
1102025a:	1261      	lrw      	r3, 0x1fff11b0	// 1102035c <LL_SetPeriodicAdvEnable+0x1b8>
            if (g_pExtendedAdvInfo[i].advHandle == advertising_handle) {
1102025c:	3200      	movi      	r2, 0
        for (i = 0; i < g_extAdvNumber; i ++) {
1102025e:	8300      	ld.b      	r0, (r3, 0x0)
            if (g_pExtendedAdvInfo[i].advHandle == advertising_handle) {
11020260:	1260      	lrw      	r3, 0x1fff0de0	// 11020360 <LL_SetPeriodicAdvEnable+0x1bc>
11020262:	3558      	movi      	r5, 88
11020264:	9360      	ld.w      	r3, (r3, 0x0)
        for (i = 0; i < g_extAdvNumber; i ++) {
11020266:	6409      	cmplt      	r2, r0
11020268:	084f      	bt      	0x11020306	// 11020306 <LL_SetPeriodicAdvEnable+0x162>
    extAdvInfo_t *pExtAdv = NULL;
1102026a:	3400      	movi      	r4, 0
        pPrdAdv->crcInit = llGenerateCRC();
1102026c:	e0004848 	bsr      	0x110292fc	// 110292fc <cpu_task_stack_init+0x954>
11020270:	e4a70018 	addi      	r5, r7, 25
11020274:	b713      	st.w      	r0, (r7, 0x4c)
        pPrdAdv->AA = llGenerateValidAccessAddr();
11020276:	e000471d 	bsr      	0x110290b0	// 110290b0 <cpu_task_stack_init+0x708>
        pPrdAdv->sca = LL_SCA_MASTER_DEFAULT;
1102027a:	3300      	movi      	r3, 0
        pPrdAdv->AA = llGenerateValidAccessAddr();
1102027c:	b712      	st.w      	r0, (r7, 0x48)
        pPrdAdv->sca = LL_SCA_MASTER_DEFAULT;
1102027e:	dc670044 	st.b      	r3, (r7, 0x44)
        pPrdAdv->chn_map[0] =  chanMapUpdate.chanMap[0];
11020282:	1179      	lrw      	r3, 0x1fff0f92	// 11020364 <LL_SetPeriodicAdvEnable+0x1c0>
11020284:	8340      	ld.b      	r2, (r3, 0x0)
11020286:	a759      	st.b      	r2, (r7, 0x19)
        pPrdAdv->chn_map[1] =  chanMapUpdate.chanMap[1];
11020288:	8341      	ld.b      	r2, (r3, 0x1)
1102028a:	a75a      	st.b      	r2, (r7, 0x1a)
        pPrdAdv->chn_map[2] =  chanMapUpdate.chanMap[2];
1102028c:	8342      	ld.b      	r2, (r3, 0x2)
1102028e:	a75b      	st.b      	r2, (r7, 0x1b)
        pPrdAdv->chn_map[3] =  chanMapUpdate.chanMap[3];
11020290:	8343      	ld.b      	r2, (r3, 0x3)
        pPrdAdv->chn_map[4] =  chanMapUpdate.chanMap[4];
11020292:	8364      	ld.b      	r3, (r3, 0x4)
        pPrdAdv->chn_map[3] =  chanMapUpdate.chanMap[3];
11020294:	a75c      	st.b      	r2, (r7, 0x1c)
        pPrdAdv->chn_map[4] =  chanMapUpdate.chanMap[4];
11020296:	a77d      	st.b      	r3, (r7, 0x1d)
11020298:	3200      	movi      	r2, 0
                if ((pPrdAdv->chn_map[i] >> j) & 1) {
1102029a:	8560      	ld.b      	r3, (r5, 0x0)
1102029c:	6c4b      	mov      	r1, r2
1102029e:	b861      	st.w      	r3, (r14, 0x4)
110202a0:	3000      	movi      	r0, 0
            pPrdAdv->numUsedChans = 0;
110202a2:	3300      	movi      	r3, 0
                if ((pPrdAdv->chn_map[i] >> j) & 1) {
110202a4:	98c1      	ld.w      	r6, (r14, 0x4)
110202a6:	7182      	asr      	r6, r0
110202a8:	e4c62001 	andi      	r6, r6, 1
110202ac:	3e40      	cmpnei      	r6, 0
110202ae:	0c05      	bf      	0x110202b8	// 110202b8 <LL_SetPeriodicAdvEnable+0x114>
                    pPrdAdv->chanMapTable[pPrdAdv->numUsedChans] = (i * 8U) + j;
110202b0:	5fcc      	addu      	r6, r7, r3
110202b2:	a63e      	st.b      	r1, (r6, 0x1e)
                    pPrdAdv->numUsedChans++;
110202b4:	2300      	addi      	r3, 1
110202b6:	74cc      	zextb      	r3, r3
110202b8:	2000      	addi      	r0, 1
            for (uint8 j = 0; j < 8; j++) {
110202ba:	3848      	cmpnei      	r0, 8
110202bc:	2100      	addi      	r1, 1
110202be:	7444      	zextb      	r1, r1
110202c0:	0bf2      	bt      	0x110202a4	// 110202a4 <LL_SetPeriodicAdvEnable+0x100>
110202c2:	2207      	addi      	r2, 8
110202c4:	7488      	zextb      	r2, r2
110202c6:	2500      	addi      	r5, 1
        for (i = 0; i < LL_NUM_BYTES_FOR_CHAN_MAP; i++) {
110202c8:	eb420028 	cmpnei      	r2, 40
110202cc:	0be7      	bt      	0x1102029a	// 1102029a <LL_SetPeriodicAdvEnable+0xf6>
        if (pExtAdv == NULL || pExtAdv->active == FALSE) {
110202ce:	3c40      	cmpnei      	r4, 0
110202d0:	dc670043 	st.b      	r3, (r7, 0x43)
110202d4:	0fb1      	bf      	0x11020236	// 11020236 <LL_SetPeriodicAdvEnable+0x92>
110202d6:	d8640042 	ld.b      	r3, (r4, 0x42)
110202da:	3b40      	cmpnei      	r3, 0
110202dc:	0fad      	bf      	0x11020236	// 11020236 <LL_SetPeriodicAdvEnable+0x92>
            pExtAdv->data.DIDInfo = ll_generateExtAdvDid(pExtAdv->data.DIDInfo);
110202de:	8c18      	ld.h      	r0, (r4, 0x30)
110202e0:	e000481a 	bsr      	0x11029314	// 11029314 <cpu_task_stack_init+0x96c>
                if (g_pAdvSchInfo_periodic[j].adv_handler == pPrdAdv->advHandle) {
110202e4:	103d      	lrw      	r1, 0x1fff1180	// 11020358 <LL_SetPeriodicAdvEnable+0x1b4>
            for (uint8 j = 0; j < g_schExtAdvNum_periodic; j ++) {
110202e6:	107c      	lrw      	r3, 0x1fff154f	// 11020354 <LL_SetPeriodicAdvEnable+0x1b0>
110202e8:	b822      	st.w      	r1, (r14, 0x8)
110202ea:	8360      	ld.b      	r3, (r3, 0x0)
110202ec:	9140      	ld.w      	r2, (r1, 0x0)
            pExtAdv->data.DIDInfo = ll_generateExtAdvDid(pExtAdv->data.DIDInfo);
110202ee:	ac18      	st.h      	r0, (r4, 0x30)
            for (uint8 j = 0; j < g_schExtAdvNum_periodic; j ++) {
110202f0:	b861      	st.w      	r3, (r14, 0x4)
110202f2:	3000      	movi      	r0, 0
                if (g_pAdvSchInfo_periodic[j].adv_handler == pPrdAdv->advHandle) {
110202f4:	6ccb      	mov      	r3, r2
            for (uint8 j = 0; j < g_schExtAdvNum_periodic; j ++) {
110202f6:	9821      	ld.w      	r1, (r14, 0x4)
110202f8:	6442      	cmpne      	r0, r1
110202fa:	080f      	bt      	0x11020318	// 11020318 <LL_SetPeriodicAdvEnable+0x174>
                ll_add_adv_task_periodic(pPrdAdv, pExtAdv);
110202fc:	6c53      	mov      	r1, r4
110202fe:	6c1f      	mov      	r0, r7
11020300:	e0004756 	bsr      	0x110291ac	// 110291ac <cpu_task_stack_init+0x804>
11020304:	0799      	br      	0x11020236	// 11020236 <LL_SetPeriodicAdvEnable+0x92>
            if (g_pExtendedAdvInfo[i].advHandle == advertising_handle) {
11020306:	6d0f      	mov      	r4, r3
11020308:	60d4      	addu      	r3, r5
1102030a:	e4c31057 	subi      	r6, r3, 88
1102030e:	86c0      	ld.b      	r6, (r6, 0x0)
11020310:	645a      	cmpne      	r6, r1
11020312:	0fad      	bf      	0x1102026c	// 1102026c <LL_SetPeriodicAdvEnable+0xc8>
        for (i = 0; i < g_extAdvNumber; i ++) {
11020314:	2200      	addi      	r2, 1
11020316:	07a8      	br      	0x11020266	// 11020266 <LL_SetPeriodicAdvEnable+0xc2>
                if (g_pAdvSchInfo_periodic[j].adv_handler == pPrdAdv->advHandle) {
11020318:	8320      	ld.b      	r1, (r3, 0x0)
1102031a:	87c0      	ld.b      	r6, (r7, 0x0)
1102031c:	5ba9      	subu      	r5, r3, r2
1102031e:	645a      	cmpne      	r6, r1
11020320:	2313      	addi      	r3, 20
11020322:	080b      	bt      	0x11020338	// 11020338 <LL_SetPeriodicAdvEnable+0x194>
                    ll_allocAuxAdvTimeSlot_prd(j);
11020324:	e3fffdd8 	bsr      	0x1101fed4	// 1101fed4 <ll_allocAuxAdvTimeSlot_prd>
                    g_pAdvSchInfo_periodic[j].auxPduRemainder += g_pAdvSchInfo_periodic[j].nextEventRemainder;
11020328:	9862      	ld.w      	r3, (r14, 0x8)
1102032a:	9360      	ld.w      	r3, (r3, 0x0)
1102032c:	614c      	addu      	r5, r3
1102032e:	9564      	ld.w      	r3, (r5, 0x10)
11020330:	9543      	ld.w      	r2, (r5, 0xc)
11020332:	60c8      	addu      	r3, r2
11020334:	b564      	st.w      	r3, (r5, 0x10)
11020336:	0780      	br      	0x11020236	// 11020236 <LL_SetPeriodicAdvEnable+0x92>
            for (uint8 j = 0; j < g_schExtAdvNum_periodic; j ++) {
11020338:	2000      	addi      	r0, 1
1102033a:	7400      	zextb      	r0, r0
1102033c:	07dd      	br      	0x110202f6	// 110202f6 <LL_SetPeriodicAdvEnable+0x152>
        return LL_STATUS_ERROR_OUT_OF_HEAP;
1102033e:	3007      	movi      	r0, 7
11020340:	073a      	br      	0x110201b4	// 110201b4 <LL_SetPeriodicAdvEnable+0x10>
        return LL_STATUS_ERROR_UNKNOWN_ADV_ID;
11020342:	3042      	movi      	r0, 66
11020344:	0738      	br      	0x110201b4	// 110201b4 <LL_SetPeriodicAdvEnable+0x10>
11020346:	0000      	bkpt
11020348:	1fff0888 	.long	0x1fff0888
1102034c:	1fff0de4 	.long	0x1fff0de4
11020350:	1fff0f88 	.long	0x1fff0f88
11020354:	1fff154f 	.long	0x1fff154f
11020358:	1fff1180 	.long	0x1fff1180
1102035c:	1fff11b0 	.long	0x1fff11b0
11020360:	1fff0de0 	.long	0x1fff0de0
11020364:	1fff0f92 	.long	0x1fff0f92

11020368 <HCI_LE_SetPeriodicAdvEnableCmd>:
{
11020368:	14d0      	push      	r15
1102036a:	1421      	subi      	r14, r14, 4
    status = LL_SetPeriodicAdvEnable(enable, advertising_handle);
1102036c:	e3ffff1c 	bsr      	0x110201a4	// 110201a4 <LL_SetPeriodicAdvEnable>
    HCI_CommandCompleteEvent(0x2040, sizeof(status), &status);
11020370:	3101      	movi      	r1, 1
    status = LL_SetPeriodicAdvEnable(enable, advertising_handle);
11020372:	dc0e0003 	st.b      	r0, (r14, 0x3)
    HCI_CommandCompleteEvent(0x2040, sizeof(status), &status);
11020376:	3081      	movi      	r0, 129
11020378:	4006      	lsli      	r0, r0, 6
1102037a:	e44e0002 	addi      	r2, r14, 3
1102037e:	e0004615 	bsr      	0x11028fa8	// 11028fa8 <cpu_task_stack_init+0x600>
}
11020382:	3000      	movi      	r0, 0
11020384:	1401      	addi      	r14, r14, 4
11020386:	1490      	pop      	r15

11020388 <LL_SetExtScanRspData>:
{
11020388:	14d4      	push      	r4-r7, r15
1102038a:	1422      	subi      	r14, r14, 8
1102038c:	6d0f      	mov      	r4, r3
1102038e:	9867      	ld.w      	r3, (r14, 0x1c)
11020390:	6d47      	mov      	r5, r1
11020392:	b860      	st.w      	r3, (r14, 0x0)
    if (g_llAdvMode == LL_MODE_LEGACY) {
11020394:	116b      	lrw      	r3, 0x1fff0888	// 11020440 <LL_SetExtScanRspData+0xb8>
11020396:	8340      	ld.b      	r2, (r3, 0x0)
11020398:	3a40      	cmpnei      	r2, 0
1102039a:	0804      	bt      	0x110203a2	// 110203a2 <LL_SetExtScanRspData+0x1a>
        return LL_STATUS_ERROR_COMMAND_DISALLOWED;
1102039c:	300c      	movi      	r0, 12
}
1102039e:	1402      	addi      	r14, r14, 8
110203a0:	1494      	pop      	r4-r7, r15
    g_llAdvMode = LL_MODE_EXTENDED;
110203a2:	3201      	movi      	r2, 1
    if ((operation != BLE_EXT_ADV_OP_INTERM_FRAG)
110203a4:	3903      	cmphsi      	r1, 4
    g_llAdvMode = LL_MODE_EXTENDED;
110203a6:	a340      	st.b      	r2, (r3, 0x0)
    if ((operation != BLE_EXT_ADV_OP_INTERM_FRAG)
110203a8:	0bfa      	bt      	0x1102039c	// 1102039c <LL_SetExtScanRspData+0x14>
    if (g_pExtendedAdvInfo == NULL) {
110203aa:	1167      	lrw      	r3, 0x1fff0de0	// 11020444 <LL_SetExtScanRspData+0xbc>
110203ac:	b861      	st.w      	r3, (r14, 0x4)
110203ae:	9340      	ld.w      	r2, (r3, 0x0)
110203b0:	3a40      	cmpnei      	r2, 0
110203b2:	0c45      	bf      	0x1102043c	// 1102043c <LL_SetExtScanRspData+0xb4>
    for (i = 0; i < g_extAdvNumber; i ++) {
110203b4:	1165      	lrw      	r3, 0x1fff11b0	// 11020448 <LL_SetExtScanRspData+0xc0>
110203b6:	6c4b      	mov      	r1, r2
110203b8:	83c0      	ld.b      	r6, (r3, 0x0)
110203ba:	3300      	movi      	r3, 0
110203bc:	658d      	cmplt      	r3, r6
110203be:	0805      	bt      	0x110203c8	// 110203c8 <LL_SetExtScanRspData+0x40>
    if (i == g_extAdvNumber) {
110203c0:	658e      	cmpne      	r3, r6
110203c2:	0809      	bt      	0x110203d4	// 110203d4 <LL_SetExtScanRspData+0x4c>
        return LL_STATUS_ERROR_UNKNOWN_ADV_ID;
110203c4:	3042      	movi      	r0, 66
110203c6:	07ec      	br      	0x1102039e	// 1102039e <LL_SetExtScanRspData+0x16>
110203c8:	2157      	addi      	r1, 88
        if (g_pExtendedAdvInfo[i].advHandle == adv_handle) {
110203ca:	e4e11057 	subi      	r7, r1, 88
110203ce:	87e0      	ld.b      	r7, (r7, 0x0)
110203d0:	641e      	cmpne      	r7, r0
110203d2:	080f      	bt      	0x110203f0	// 110203f0 <LL_SetExtScanRspData+0x68>
    if (ll_isLegacyAdv(&g_pExtendedAdvInfo[i])
110203d4:	3658      	movi      	r6, 88
110203d6:	7d8c      	mult      	r6, r3
110203d8:	5af8      	addu      	r7, r2, r6
110203da:	6c1f      	mov      	r0, r7
110203dc:	e000461c 	bsr      	0x11029014	// 11029014 <cpu_task_stack_init+0x66c>
110203e0:	3840      	cmpnei      	r0, 0
110203e2:	0809      	bt      	0x110203f4	// 110203f4 <LL_SetExtScanRspData+0x6c>
    if ((operation == BLE_EXT_ADV_OP_FIRST_FRAG) && (g_pExtendedAdvInfo[i].scanRspMaxLength != 0)) {
110203e4:	3d41      	cmpnei      	r5, 1
110203e6:	080b      	bt      	0x110203fc	// 110203fc <LL_SetExtScanRspData+0x74>
110203e8:	8f7a      	ld.h      	r3, (r7, 0x34)
110203ea:	3b40      	cmpnei      	r3, 0
110203ec:	0bd8      	bt      	0x1102039c	// 1102039c <LL_SetExtScanRspData+0x14>
110203ee:	0407      	br      	0x110203fc	// 110203fc <LL_SetExtScanRspData+0x74>
    for (i = 0; i < g_extAdvNumber; i ++) {
110203f0:	2300      	addi      	r3, 1
110203f2:	07e5      	br      	0x110203bc	// 110203bc <LL_SetExtScanRspData+0x34>
        && (operation != BLE_EXT_ADV_OP_COMPLETE_DATA
110203f4:	3d43      	cmpnei      	r5, 3
110203f6:	0821      	bt      	0x11020438	// 11020438 <LL_SetExtScanRspData+0xb0>
            || scan_rsp_data_length > 31)) {
110203f8:	3c1f      	cmphsi      	r4, 32
110203fa:	081f      	bt      	0x11020438	// 11020438 <LL_SetExtScanRspData+0xb0>
    if (g_pExtendedAdvInfo[i].scanRspData == NULL || g_advSetMaximumLen < g_pExtendedAdvInfo[i].scanRspMaxLength + scan_rsp_data_length) {
110203fc:	976e      	ld.w      	r3, (r7, 0x38)
110203fe:	3b40      	cmpnei      	r3, 0
11020400:	0c1e      	bf      	0x1102043c	// 1102043c <LL_SetExtScanRspData+0xb4>
11020402:	1053      	lrw      	r2, 0x1fff0f90	// 1102044c <LL_SetExtScanRspData+0xc4>
11020404:	8a20      	ld.h      	r1, (r2, 0x0)
11020406:	8f5a      	ld.h      	r2, (r7, 0x34)
11020408:	6090      	addu      	r2, r4
1102040a:	6485      	cmplt      	r1, r2
1102040c:	0818      	bt      	0x1102043c	// 1102043c <LL_SetExtScanRspData+0xb4>
    if (ll_isLegacyAdv(&g_pExtendedAdvInfo[i]))
1102040e:	3840      	cmpnei      	r0, 0
11020410:	0c03      	bf      	0x11020416	// 11020416 <LL_SetExtScanRspData+0x8e>
        g_pExtendedAdvInfo[i].scanRspMaxLength = 0;
11020412:	3200      	movi      	r2, 0
11020414:	af5a      	st.h      	r2, (r7, 0x34)
    osal_memcpy(&g_pExtendedAdvInfo[i].scanRspData[g_pExtendedAdvInfo[i].scanRspMaxLength], scan_rsp_data, scan_rsp_data_length);
11020416:	6c93      	mov      	r2, r4
11020418:	9820      	ld.w      	r1, (r14, 0x0)
1102041a:	8f1a      	ld.h      	r0, (r7, 0x34)
1102041c:	600c      	addu      	r0, r3
1102041e:	e0004457 	bsr      	0x11028ccc	// 11028ccc <cpu_task_stack_init+0x324>
    g_pExtendedAdvInfo[i].scanRspMaxLength += scan_rsp_data_length;
11020422:	9861      	ld.w      	r3, (r14, 0x4)
    return (LL_STATUS_SUCCESS);
11020424:	3000      	movi      	r0, 0
    g_pExtendedAdvInfo[i].scanRspMaxLength += scan_rsp_data_length;
11020426:	9360      	ld.w      	r3, (r3, 0x0)
11020428:	60d8      	addu      	r3, r6
1102042a:	8b5a      	ld.h      	r2, (r3, 0x34)
1102042c:	6108      	addu      	r4, r2
1102042e:	ab9a      	st.h      	r4, (r3, 0x34)
    extscanrsp_offset = 0;
11020430:	3200      	movi      	r2, 0
11020432:	1068      	lrw      	r3, 0x1fffb8bc	// 11020450 <LL_SetExtScanRspData+0xc8>
11020434:	ab40      	st.h      	r2, (r3, 0x0)
11020436:	07b4      	br      	0x1102039e	// 1102039e <LL_SetExtScanRspData+0x16>
        return LL_STATUS_ERROR_BAD_PARAMETER;
11020438:	3012      	movi      	r0, 18
1102043a:	07b2      	br      	0x1102039e	// 1102039e <LL_SetExtScanRspData+0x16>
        return LL_STATUS_ERROR_OUT_OF_HEAP;
1102043c:	3007      	movi      	r0, 7
1102043e:	07b0      	br      	0x1102039e	// 1102039e <LL_SetExtScanRspData+0x16>
11020440:	1fff0888 	.long	0x1fff0888
11020444:	1fff0de0 	.long	0x1fff0de0
11020448:	1fff11b0 	.long	0x1fff11b0
1102044c:	1fff0f90 	.long	0x1fff0f90
11020450:	1fffb8bc 	.long	0x1fffb8bc

11020454 <HCI_LE_SetExtScanRspDataCmd>:
{
11020454:	14d1      	push      	r4, r15
11020456:	1422      	subi      	r14, r14, 8
    status = LL_SetExtScanRspData(adv_handle,
11020458:	9884      	ld.w      	r4, (r14, 0x10)
1102045a:	b880      	st.w      	r4, (r14, 0x0)
1102045c:	e3ffff96 	bsr      	0x11020388	// 11020388 <LL_SetExtScanRspData>
    HCI_CommandCompleteEvent(0x2038, sizeof(status), &status);
11020460:	3101      	movi      	r1, 1
    status = LL_SetExtScanRspData(adv_handle,
11020462:	dc0e0007 	st.b      	r0, (r14, 0x7)
    HCI_CommandCompleteEvent(0x2038, sizeof(status), &status);
11020466:	ea002038 	movi      	r0, 8248
1102046a:	e44e0006 	addi      	r2, r14, 7
1102046e:	e000459d 	bsr      	0x11028fa8	// 11028fa8 <cpu_task_stack_init+0x600>
}
11020472:	3000      	movi      	r0, 0
11020474:	1402      	addi      	r14, r14, 8
11020476:	1491      	pop      	r4, r15

11020478 <LL_AdvSetTerminatedCback>:
{
11020478:	14d4      	push      	r4-r7, r15
1102047a:	1421      	subi      	r14, r14, 4
1102047c:	6d0f      	mov      	r4, r3
    if (hciGapTaskID != 0) {
1102047e:	1165      	lrw      	r3, 0x1fff0f82	// 11020510 <LL_AdvSetTerminatedCback+0x98>
{
11020480:	6dcb      	mov      	r7, r2
    if (hciGapTaskID != 0) {
11020482:	8340      	ld.b      	r2, (r3, 0x0)
{
11020484:	6d43      	mov      	r5, r0
    if (hciGapTaskID != 0) {
11020486:	3a40      	cmpnei      	r2, 0
{
11020488:	6d87      	mov      	r6, r1
    if (hciGapTaskID != 0) {
1102048a:	0c19      	bf      	0x110204bc	// 110204bc <LL_AdvSetTerminatedCback+0x44>
        pkt = (hciEvt_AdvSetTerminated_t *)osal_msg_allocate(sizeof(hciEvt_AdvSetTerminated_t));
1102048c:	300a      	movi      	r0, 10
1102048e:	b860      	st.w      	r3, (r14, 0x0)
11020490:	e000447e 	bsr      	0x11028d8c	// 11028d8c <cpu_task_stack_init+0x3e4>
11020494:	6c43      	mov      	r1, r0
        if (pkt) {
11020496:	3840      	cmpnei      	r0, 0
11020498:	0c10      	bf      	0x110204b8	// 110204b8 <LL_AdvSetTerminatedCback+0x40>
            pkt->hdr.event = HCI_GAP_EVENT_EVENT;
1102049a:	3300      	movi      	r3, 0
1102049c:	2b6e      	subi      	r3, 111
1102049e:	a060      	st.b      	r3, (r0, 0x0)
            pkt->hdr.status = HCI_LE_EVENT_CODE;
110204a0:	333e      	movi      	r3, 62
            pkt->status      = status;
110204a2:	a0a3      	st.b      	r5, (r0, 0x3)
            pkt->hdr.status = HCI_LE_EVENT_CODE;
110204a4:	a061      	st.b      	r3, (r0, 0x1)
            pkt->BLEEventCode = HCI_LE_ADVERTISING_SET_TERMINATED;
110204a6:	3312      	movi      	r3, 18
            pkt->adv_handle  = adv_handle;
110204a8:	a0c4      	st.b      	r6, (r0, 0x4)
            pkt->BLEEventCode = HCI_LE_ADVERTISING_SET_TERMINATED;
110204aa:	a062      	st.b      	r3, (r0, 0x2)
            pkt->connHandle  = connHandle;
110204ac:	a8e3      	st.h      	r7, (r0, 0x6)
            pkt->Num_Completed_Extended_Advertising_Events = Num_Completed_Extended_Advertising_Events;
110204ae:	a088      	st.b      	r4, (r0, 0x8)
            (void)osal_msg_send(hciGapTaskID, (uint8 *)pkt);
110204b0:	9860      	ld.w      	r3, (r14, 0x0)
            (void)osal_msg_send(hciTaskID, (uint8 *)msg);
110204b2:	8300      	ld.b      	r0, (r3, 0x0)
110204b4:	e00045aa 	bsr      	0x11029008	// 11029008 <cpu_task_stack_init+0x660>
}
110204b8:	1401      	addi      	r14, r14, 4
110204ba:	1494      	pop      	r4-r7, r15
        if (((pHciEvtMask[HCI_EVT_INDEX_LE] & HCI_EVT_MASK_LE) == 0) ||
110204bc:	1076      	lrw      	r3, 0x1fff0f78	// 11020514 <LL_AdvSetTerminatedCback+0x9c>
110204be:	8367      	ld.b      	r3, (r3, 0x7)
110204c0:	e4632020 	andi      	r3, r3, 32
110204c4:	3b40      	cmpnei      	r3, 0
110204c6:	0ff9      	bf      	0x110204b8	// 110204b8 <LL_AdvSetTerminatedCback+0x40>
            (((bleEvtMask & LE_EVT_MASK_ADV_SET_TERM) == 0))) {
110204c8:	1074      	lrw      	r3, 0x1fff0f74	// 11020518 <LL_AdvSetTerminatedCback+0xa0>
110204ca:	3280      	movi      	r2, 128
110204cc:	9360      	ld.w      	r3, (r3, 0x0)
110204ce:	424a      	lsli      	r2, r2, 10
110204d0:	68c8      	and      	r3, r2
        if (((pHciEvtMask[HCI_EVT_INDEX_LE] & HCI_EVT_MASK_LE) == 0) ||
110204d2:	3b40      	cmpnei      	r3, 0
110204d4:	0ff2      	bf      	0x110204b8	// 110204b8 <LL_AdvSetTerminatedCback+0x40>
        msg = (hciPacket_t *)osal_msg_allocate(totalLength);
110204d6:	3011      	movi      	r0, 17
110204d8:	e000445a 	bsr      	0x11028d8c	// 11028d8c <cpu_task_stack_init+0x3e4>
110204dc:	6c43      	mov      	r1, r0
        if (msg) {
110204de:	3840      	cmpnei      	r0, 0
110204e0:	0fec      	bf      	0x110204b8	// 110204b8 <LL_AdvSetTerminatedCback+0x40>
            msg->hdr.event  = HCI_CTRL_TO_HOST_EVENT;
110204e2:	3301      	movi      	r3, 1
            msg->pData[6] = LO_UINT16(connHandle);
110204e4:	a0ee      	st.b      	r7, (r0, 0xe)
            msg->hdr.event  = HCI_CTRL_TO_HOST_EVENT;
110204e6:	a060      	st.b      	r3, (r0, 0x0)
            msg->hdr.status = 0xFF;
110204e8:	3300      	movi      	r3, 0
110204ea:	2b00      	subi      	r3, 1
110204ec:	a061      	st.b      	r3, (r0, 0x1)
            msg->pData    = (uint8 *)(msg + 1);
110204ee:	587e      	addi      	r3, r0, 8
110204f0:	b061      	st.w      	r3, (r0, 0x4)
            msg->pData[0] = HCI_EVENT_PACKET;
110204f2:	3304      	movi      	r3, 4
            msg->pData[7] = HI_UINT16(connHandle);
110204f4:	4fe8      	lsri      	r7, r7, 8
            msg->pData[0] = HCI_EVENT_PACKET;
110204f6:	a068      	st.b      	r3, (r0, 0x8)
            msg->pData[1] = HCI_LE_EVENT_CODE;
110204f8:	333e      	movi      	r3, 62
            msg->pData[4] = status;
110204fa:	a0ac      	st.b      	r5, (r0, 0xc)
            msg->pData[1] = HCI_LE_EVENT_CODE;
110204fc:	a069      	st.b      	r3, (r0, 0x9)
            msg->pData[2] = dataLength;
110204fe:	3306      	movi      	r3, 6
            msg->pData[5] = adv_handle;
11020500:	a0cd      	st.b      	r6, (r0, 0xd)
            msg->pData[2] = dataLength;
11020502:	a06a      	st.b      	r3, (r0, 0xa)
            msg->pData[3] = HCI_LE_ADVERTISING_SET_TERMINATED;     // event code
11020504:	3312      	movi      	r3, 18
            msg->pData[7] = HI_UINT16(connHandle);
11020506:	a0ef      	st.b      	r7, (r0, 0xf)
            msg->pData[3] = HCI_LE_ADVERTISING_SET_TERMINATED;     // event code
11020508:	a06b      	st.b      	r3, (r0, 0xb)
            msg->pData[8] = Num_Completed_Extended_Advertising_Events;
1102050a:	a090      	st.b      	r4, (r0, 0x10)
            (void)osal_msg_send(hciTaskID, (uint8 *)msg);
1102050c:	1064      	lrw      	r3, 0x1fff0f80	// 1102051c <LL_AdvSetTerminatedCback+0xa4>
1102050e:	07d2      	br      	0x110204b2	// 110204b2 <LL_AdvSetTerminatedCback+0x3a>
11020510:	1fff0f82 	.long	0x1fff0f82
11020514:	1fff0f78 	.long	0x1fff0f78
11020518:	1fff0f74 	.long	0x1fff0f74
1102051c:	1fff0f80 	.long	0x1fff0f80

11020520 <LL_SetExtAdvParam>:
{
11020520:	14d4      	push      	r4-r7, r15
11020522:	1436      	subi      	r14, r14, 88
11020524:	6d87      	mov      	r6, r1
11020526:	b864      	st.w      	r3, (r14, 0x10)
11020528:	9966      	ld.w      	r3, (r14, 0x98)
1102052a:	b841      	st.w      	r2, (r14, 0x4)
1102052c:	b870      	st.w      	r3, (r14, 0x40)
1102052e:	d86e006c 	ld.b      	r3, (r14, 0x6c)
11020532:	b808      	st.w      	r0, (r14, 0x20)
11020534:	b86a      	st.w      	r3, (r14, 0x28)
11020536:	d86e0070 	ld.b      	r3, (r14, 0x70)
1102053a:	98be      	ld.w      	r5, (r14, 0x78)
1102053c:	b860      	st.w      	r3, (r14, 0x0)
1102053e:	d86e0074 	ld.b      	r3, (r14, 0x74)
11020542:	b865      	st.w      	r3, (r14, 0x14)
11020544:	d86e007c 	ld.b      	r3, (r14, 0x7c)
11020548:	b86b      	st.w      	r3, (r14, 0x2c)
1102054a:	d86e4080 	ld.bs      	r3, (r14, 0x80)
1102054e:	b867      	st.w      	r3, (r14, 0x1c)
11020550:	d86e0084 	ld.b      	r3, (r14, 0x84)
11020554:	b86c      	st.w      	r3, (r14, 0x30)
11020556:	d86e0088 	ld.b      	r3, (r14, 0x88)
1102055a:	b869      	st.w      	r3, (r14, 0x24)
1102055c:	d86e008c 	ld.b      	r3, (r14, 0x8c)
11020560:	b86d      	st.w      	r3, (r14, 0x34)
11020562:	d86e0090 	ld.b      	r3, (r14, 0x90)
11020566:	b86e      	st.w      	r3, (r14, 0x38)
11020568:	d86e0094 	ld.b      	r3, (r14, 0x94)
1102056c:	b86f      	st.w      	r3, (r14, 0x3c)
    if (g_llAdvMode == LL_MODE_LEGACY) {
1102056e:	0175      	lrw      	r3, 0x1fff0888	// 11020894 <LL_SetExtAdvParam+0x374>
11020570:	8340      	ld.b      	r2, (r3, 0x0)
11020572:	3a40      	cmpnei      	r2, 0
11020574:	0d8b      	bf      	0x1102088a	// 1102088a <LL_SetExtAdvParam+0x36a>
    g_llAdvMode = LL_MODE_EXTENDED;
11020576:	3201      	movi      	r2, 1
11020578:	a340      	st.b      	r2, (r3, 0x0)
    if ((adv_event_properties & LE_ADV_PROP_LEGACY_BITMASK)           // Legacy Adv
1102057a:	e4612010 	andi      	r3, r1, 16
1102057e:	3b40      	cmpnei      	r3, 0
11020580:	0c0b      	bf      	0x11020596	// 11020596 <LL_SetExtAdvParam+0x76>
        && (adv_event_properties != LL_EXT_ADV_PROP_ADV_NOCONN_IND)) {
11020582:	391d      	cmphsi      	r1, 30
11020584:	0985      	bt      	0x1102088e	// 1102088e <LL_SetExtAdvParam+0x36e>
11020586:	ea23202d 	movih      	r3, 8237
1102058a:	70c5      	lsr      	r3, r1
1102058c:	c4622043 	andn      	r3, r2, r3
11020590:	74cc      	zextb      	r3, r3
11020592:	3b40      	cmpnei      	r3, 0
11020594:	097d      	bt      	0x1102088e	// 1102088e <LL_SetExtAdvParam+0x36e>
    if (primary_advertising_interval_Max < primary_advertising_interval_Min
11020596:	9864      	ld.w      	r3, (r14, 0x10)
11020598:	9841      	ld.w      	r2, (r14, 0x4)
1102059a:	648c      	cmphs      	r3, r2
1102059c:	0d79      	bf      	0x1102088e	// 1102088e <LL_SetExtAdvParam+0x36e>
        || primary_advertising_interval_Min < 0x20
1102059e:	3a1f      	cmphsi      	r2, 32
110205a0:	0d77      	bf      	0x1102088e	// 1102088e <LL_SetExtAdvParam+0x36e>
        || primary_advertising_interval_Max < 0x20) {
110205a2:	9864      	ld.w      	r3, (r14, 0x10)
110205a4:	3b1f      	cmphsi      	r3, 32
110205a6:	0d74      	bf      	0x1102088e	// 1102088e <LL_SetExtAdvParam+0x36e>
    if (!(adv_event_properties & LE_ADV_PROP_LEGACY_BITMASK)
110205a8:	e4662012 	andi      	r3, r6, 18
110205ac:	3b42      	cmpnei      	r3, 2
110205ae:	0805      	bt      	0x110205b8	// 110205b8 <LL_SetExtAdvParam+0x98>
        && (adv_event_properties & LE_ADV_PROP_CONN_BITMASK)) {
110205b0:	e4662001 	andi      	r3, r6, 1
110205b4:	3b40      	cmpnei      	r3, 0
110205b6:	096c      	bt      	0x1102088e	// 1102088e <LL_SetExtAdvParam+0x36e>
    if (g_pExtendedAdvInfo == NULL) {
110205b8:	0267      	lrw      	r3, 0x1fff0de0	// 11020898 <LL_SetExtAdvParam+0x378>
110205ba:	6dcf      	mov      	r7, r3
110205bc:	9340      	ld.w      	r2, (r3, 0x0)
110205be:	3a40      	cmpnei      	r2, 0
110205c0:	b842      	st.w      	r2, (r14, 0x8)
110205c2:	0cda      	bf      	0x11020776	// 11020776 <LL_SetExtAdvParam+0x256>
    for (i = 0; i < g_extAdvNumber; i ++) {
110205c4:	0269      	lrw      	r3, 0x1fff11b0	// 1102089c <LL_SetExtAdvParam+0x37c>
110205c6:	3158      	movi      	r1, 88
110205c8:	8360      	ld.b      	r3, (r3, 0x0)
110205ca:	b866      	st.w      	r3, (r14, 0x18)
110205cc:	b843      	st.w      	r2, (r14, 0xc)
110205ce:	3300      	movi      	r3, 0
110205d0:	9806      	ld.w      	r0, (r14, 0x18)
110205d2:	640d      	cmplt      	r3, r0
110205d4:	08a4      	bt      	0x1102071c	// 1102071c <LL_SetExtAdvParam+0x1fc>
    if (i == g_extAdvNumber) {
110205d6:	640e      	cmpne      	r3, r0
110205d8:	0cd2      	bf      	0x1102077c	// 1102077c <LL_SetExtAdvParam+0x25c>
    g_pExtendedAdvInfo[i].advHandle = adv_handle;
110205da:	d84e0020 	ld.b      	r2, (r14, 0x20)
110205de:	3458      	movi      	r4, 88
110205e0:	7d0c      	mult      	r4, r3
110205e2:	9862      	ld.w      	r3, (r14, 0x8)
110205e4:	60d0      	addu      	r3, r4
110205e6:	a340      	st.b      	r2, (r3, 0x0)
    g_pExtendedAdvInfo[i].parameter.priAdvIntMin       = primary_advertising_interval_Min;
110205e8:	9861      	ld.w      	r3, (r14, 0x4)
    g_pExtendedAdvInfo[i].parameter.advEventProperties = adv_event_properties;
110205ea:	9700      	ld.w      	r0, (r7, 0x0)
110205ec:	6010      	addu      	r0, r4
    g_pExtendedAdvInfo[i].parameter.priAdvIntMin       = primary_advertising_interval_Min;
110205ee:	b062      	st.w      	r3, (r0, 0x8)
    g_pExtendedAdvInfo[i].parameter.priAdvgIntMax      = primary_advertising_interval_Max;
110205f0:	9864      	ld.w      	r3, (r14, 0x10)
    g_pExtendedAdvInfo[i].parameter.advEventProperties = adv_event_properties;
110205f2:	a8c3      	st.h      	r6, (r0, 0x6)
    g_pExtendedAdvInfo[i].parameter.priAdvgIntMax      = primary_advertising_interval_Max;
110205f4:	b063      	st.w      	r3, (r0, 0xc)
    g_pExtendedAdvInfo[i].parameter.priAdvChnMap       = primary_advertising_channel_map;
110205f6:	d86e0028 	ld.b      	r3, (r14, 0x28)
    osal_memcpy(g_pExtendedAdvInfo[i].parameter.peerAddress, peer_address, LL_DEVICE_ADDR_LEN);
110205fa:	3206      	movi      	r2, 6
    g_pExtendedAdvInfo[i].parameter.priAdvChnMap       = primary_advertising_channel_map;
110205fc:	a070      	st.b      	r3, (r0, 0x10)
    g_pExtendedAdvInfo[i].parameter.ownAddrType        = own_address_type;
110205fe:	d86e0000 	ld.b      	r3, (r14, 0x0)
    osal_memcpy(g_pExtendedAdvInfo[i].parameter.peerAddress, peer_address, LL_DEVICE_ADDR_LEN);
11020602:	6c57      	mov      	r1, r5
    g_pExtendedAdvInfo[i].parameter.ownAddrType        = own_address_type;
11020604:	a071      	st.b      	r3, (r0, 0x11)
    g_pExtendedAdvInfo[i].parameter.peerAddrType       = peer_address_type;
11020606:	d86e0014 	ld.b      	r3, (r14, 0x14)
1102060a:	a079      	st.b      	r3, (r0, 0x19)
    osal_memcpy(g_pExtendedAdvInfo[i].parameter.peerAddress, peer_address, LL_DEVICE_ADDR_LEN);
1102060c:	2019      	addi      	r0, 26
1102060e:	e000435f 	bsr      	0x11028ccc	// 11028ccc <cpu_task_stack_init+0x324>
    g_pExtendedAdvInfo[i].parameter.wlPolicy           = advertising_filter_policy;
11020612:	d84e002c 	ld.b      	r2, (r14, 0x2c)
11020616:	9760      	ld.w      	r3, (r7, 0x0)
11020618:	60d0      	addu      	r3, r4
1102061a:	dc430020 	st.b      	r2, (r3, 0x20)
    g_pExtendedAdvInfo[i].parameter.advTxPower         = advertising_tx_power;
1102061e:	d84e001c 	ld.b      	r2, (r14, 0x1c)
    osal_memset(&g_currentPeerRpa[0],  0, 6);
11020622:	3100      	movi      	r1, 0
    g_pExtendedAdvInfo[i].parameter.advTxPower         = advertising_tx_power;
11020624:	dc430021 	st.b      	r2, (r3, 0x21)
    g_pExtendedAdvInfo[i].parameter.primaryAdvPHY      = primary_advertising_PHY;
11020628:	d84e0030 	ld.b      	r2, (r14, 0x30)
    osal_memset(&g_currentPeerRpa[0],  0, 6);
1102062c:	0302      	lrw      	r0, 0x1fff15d7	// 110208a0 <LL_SetExtAdvParam+0x380>
    g_pExtendedAdvInfo[i].parameter.primaryAdvPHY      = primary_advertising_PHY;
1102062e:	dc430022 	st.b      	r2, (r3, 0x22)
    g_pExtendedAdvInfo[i].parameter.secondaryAdvPHY    = secondary_advertising_PHY;
11020632:	d84e0034 	ld.b      	r2, (r14, 0x34)
11020636:	dc430023 	st.b      	r2, (r3, 0x23)
    g_pExtendedAdvInfo[i].parameter.secondaryAdvMaxSkip = secondary_advertising_max_skip;
1102063a:	d84e0024 	ld.b      	r2, (r14, 0x24)
1102063e:	dc430024 	st.b      	r2, (r3, 0x24)
    g_pExtendedAdvInfo[i].parameter.advertisingSID     = advertising_SID;
11020642:	d84e0038 	ld.b      	r2, (r14, 0x38)
11020646:	a344      	st.b      	r2, (r3, 0x4)
    g_pExtendedAdvInfo[i].parameter.scanReqNotificationEnable  = scan_request_notification_enable;
11020648:	d84e003c 	ld.b      	r2, (r14, 0x3c)
1102064c:	dc430025 	st.b      	r2, (r3, 0x25)
    osal_memset(&g_currentPeerRpa[0],  0, 6);
11020650:	3206      	movi      	r2, 6
11020652:	e0004301 	bsr      	0x11028c54	// 11028c54 <cpu_task_stack_init+0x2ac>
    adv_param.ownAddrType = own_address_type;           // for RPA timeout process
11020656:	036b      	lrw      	r3, 0x1fff1528	// 110208a4 <LL_SetExtAdvParam+0x384>
11020658:	d84e0000 	ld.b      	r2, (r14, 0x0)
1102065c:	a346      	st.b      	r2, (r3, 0x6)
1102065e:	e4462004 	andi      	r2, r6, 4
11020662:	6d8f      	mov      	r6, r3
    if (adv_event_properties & LE_ADV_PROP_DIRECT_BITMASK) { // for RPA timeout process
11020664:	3a40      	cmpnei      	r2, 0
11020666:	b842      	st.w      	r2, (r14, 0x8)
11020668:	0c03      	bf      	0x1102066e	// 1102066e <LL_SetExtAdvParam+0x14e>
        adv_param.advEvtType = LL_ADV_CONNECTABLE_LDC_DIRECTED_EVT;
1102066a:	3304      	movi      	r3, 4
1102066c:	a66e      	st.b      	r3, (r6, 0xe)
    if (g_llRlDeviceNum > 0) {
1102066e:	0370      	lrw      	r3, 0x1fff119c	// 110208a8 <LL_SetExtAdvParam+0x388>
11020670:	8360      	ld.b      	r3, (r3, 0x0)
11020672:	3b40      	cmpnei      	r3, 0
        if (own_address_type == LL_DEV_ADDR_TYPE_PUBLIC) {
11020674:	9860      	ld.w      	r3, (r14, 0x0)
    if (g_llRlDeviceNum > 0) {
11020676:	0ce4      	bf      	0x1102083e	// 1102083e <LL_SetExtAdvParam+0x31e>
        if (own_address_type == LL_DEV_ADDR_TYPE_PUBLIC) {
11020678:	3b40      	cmpnei      	r3, 0
1102067a:	0887      	bt      	0x11020788	// 11020788 <LL_SetExtAdvParam+0x268>
            g_currentLocalAddrType = LL_DEV_ADDR_TYPE_PUBLIC;
1102067c:	0373      	lrw      	r3, 0x1fff1904	// 110208ac <LL_SetExtAdvParam+0x38c>
1102067e:	3200      	movi      	r2, 0
11020680:	a340      	st.b      	r2, (r3, 0x0)
            LL_COPY_DEV_ADDR_LE(adv_param.ownAddr, ownPublicAddr);
11020682:	0373      	lrw      	r3, 0x1fff1185	// 110208b0 <LL_SetExtAdvParam+0x390>
            LL_COPY_DEV_ADDR_LE(adv_param.ownAddr, ownRandomAddr);
11020684:	8340      	ld.b      	r2, (r3, 0x0)
11020686:	a647      	st.b      	r2, (r6, 0x7)
11020688:	8341      	ld.b      	r2, (r3, 0x1)
1102068a:	a648      	st.b      	r2, (r6, 0x8)
1102068c:	8342      	ld.b      	r2, (r3, 0x2)
1102068e:	a649      	st.b      	r2, (r6, 0x9)
11020690:	8343      	ld.b      	r2, (r3, 0x3)
11020692:	a64a      	st.b      	r2, (r6, 0xa)
11020694:	8344      	ld.b      	r2, (r3, 0x4)
11020696:	a64b      	st.b      	r2, (r6, 0xb)
11020698:	8365      	ld.b      	r3, (r3, 0x5)
1102069a:	a66c      	st.b      	r3, (r6, 0xc)
        if (adv_event_properties & LE_ADV_PROP_DIRECT_BITMASK) {
1102069c:	9862      	ld.w      	r3, (r14, 0x8)
1102069e:	3b40      	cmpnei      	r3, 0
110206a0:	0c19      	bf      	0x110206d2	// 110206d2 <LL_SetExtAdvParam+0x1b2>
            if (ll_readPeerIRK(&peerIrk, peer_address, peer_address_type) == TRUE) {
110206a2:	9845      	ld.w      	r2, (r14, 0x14)
110206a4:	6c57      	mov      	r1, r5
110206a6:	1813      	addi      	r0, r14, 76
110206a8:	e000429a 	bsr      	0x11028bdc	// 11028bdc <cpu_task_stack_init+0x234>
110206ac:	3841      	cmpnei      	r0, 1
110206ae:	0812      	bt      	0x110206d2	// 110206d2 <LL_SetExtAdvParam+0x1b2>
                if (!ll_isIrkAllZero(peerIrk)) {          // for all-zero local IRK, not RPA used
110206b0:	9873      	ld.w      	r3, (r14, 0x4c)
110206b2:	6c0f      	mov      	r0, r3
110206b4:	e000453a 	bsr      	0x11029128	// 11029128 <cpu_task_stack_init+0x780>
110206b8:	3840      	cmpnei      	r0, 0
110206ba:	080c      	bt      	0x110206d2	// 110206d2 <LL_SetExtAdvParam+0x1b2>
                    if (ll_CalcRandomAddr(peerIrk, resolve_address) == SUCCESS) {
110206bc:	9813      	ld.w      	r0, (r14, 0x4c)
110206be:	1914      	addi      	r1, r14, 80
110206c0:	e0004342 	bsr      	0x11028d44	// 11028d44 <cpu_task_stack_init+0x39c>
110206c4:	3840      	cmpnei      	r0, 0
110206c6:	0806      	bt      	0x110206d2	// 110206d2 <LL_SetExtAdvParam+0x1b2>
                        osal_memcpy(&g_currentPeerRpa[0],  resolve_address, 6);
110206c8:	3206      	movi      	r2, 6
110206ca:	1316      	lrw      	r0, 0x1fff15d7	// 110208a0 <LL_SetExtAdvParam+0x380>
110206cc:	1914      	addi      	r1, r14, 80
110206ce:	e00042ff 	bsr      	0x11028ccc	// 11028ccc <cpu_task_stack_init+0x324>
    if (primary_advertising_interval_Min * (secondary_advertising_max_skip + 1) * 625 > g_advSlotPeriodic) {
110206d2:	9869      	ld.w      	r3, (r14, 0x24)
110206d4:	5b42      	addi      	r2, r3, 1
110206d6:	ea030271 	movi      	r3, 625
110206da:	9821      	ld.w      	r1, (r14, 0x4)
110206dc:	7c8c      	mult      	r2, r3
110206de:	7c84      	mult      	r2, r1
110206e0:	1335      	lrw      	r1, 0x1fff13a8	// 110208b4 <LL_SetExtAdvParam+0x394>
110206e2:	9120      	ld.w      	r1, (r1, 0x0)
110206e4:	6484      	cmphs      	r1, r2
        g_pExtendedAdvInfo[i].primary_advertising_interval = primary_advertising_interval_Min * 625;    // bug fixed 04-08, * 1250 -> * 625
110206e6:	9740      	ld.w      	r2, (r7, 0x0)
110206e8:	6090      	addu      	r2, r4
    if (primary_advertising_interval_Min * (secondary_advertising_max_skip + 1) * 625 > g_advSlotPeriodic) {
110206ea:	08ce      	bt      	0x11020886	// 11020886 <LL_SetExtAdvParam+0x366>
        g_pExtendedAdvInfo[i].primary_advertising_interval = primary_advertising_interval_Min * 625;    // bug fixed 04-08, * 1250 -> * 625
110206ec:	9821      	ld.w      	r1, (r14, 0x4)
        g_pExtendedAdvInfo[i].primary_advertising_interval = primary_advertising_interval_Max * 625;
110206ee:	7c4c      	mult      	r1, r3
110206f0:	b231      	st.w      	r1, (r2, 0x44)
    return (LL_STATUS_SUCCESS);
110206f2:	3000      	movi      	r0, 0
    g_interAuxPduDuration = pGlobal_config[LL_EXT_ADV_INTER_SEC_CHN_INT];
110206f4:	1371      	lrw      	r3, 0x1fffa670	// 110208b8 <LL_SetExtAdvParam+0x398>
110206f6:	9340      	ld.w      	r2, (r3, 0x0)
110206f8:	1371      	lrw      	r3, 0x1fff0894	// 110208bc <LL_SetExtAdvParam+0x39c>
110206fa:	d842205d 	ld.w      	r2, (r2, 0x174)
110206fe:	b340      	st.w      	r2, (r3, 0x0)
    g_pExtendedAdvInfo[i].tx_power = advertising_tx_power;
11020700:	d84e001c 	ld.b      	r2, (r14, 0x1c)
11020704:	9760      	ld.w      	r3, (r7, 0x0)
11020706:	60d0      	addu      	r3, r4
11020708:	dc430050 	st.b      	r2, (r3, 0x50)
    *selectTxPwr = advertising_tx_power;
1102070c:	9870      	ld.w      	r3, (r14, 0x40)
1102070e:	a340      	st.b      	r2, (r3, 0x0)
    g_pExtendedAdvInfo[i].isPeriodic = FALSE;
11020710:	3200      	movi      	r2, 0
11020712:	9760      	ld.w      	r3, (r7, 0x0)
11020714:	60d0      	addu      	r3, r4
11020716:	dc430041 	st.b      	r2, (r3, 0x41)
1102071a:	042f      	br      	0x11020778	// 11020778 <LL_SetExtAdvParam+0x258>
1102071c:	6084      	addu      	r2, r1
        if (g_pExtendedAdvInfo[i].advHandle == adv_handle) {
1102071e:	e4021057 	subi      	r0, r2, 88
11020722:	8000      	ld.b      	r0, (r0, 0x0)
11020724:	9888      	ld.w      	r4, (r14, 0x20)
11020726:	6502      	cmpne      	r0, r4
11020728:	0f59      	bf      	0x110205da	// 110205da <LL_SetExtAdvParam+0xba>
    for (i = 0; i < g_extAdvNumber; i ++) {
1102072a:	2300      	addi      	r3, 1
1102072c:	0752      	br      	0x110205d0	// 110205d0 <LL_SetExtAdvParam+0xb0>
            if (g_pExtendedAdvInfo[i].advHandle == LL_INVALID_ADV_SET_HANDLE) {
1102072e:	9843      	ld.w      	r2, (r14, 0xc)
11020730:	6c0b      	mov      	r0, r2
11020732:	2057      	addi      	r0, 88
11020734:	e4801057 	subi      	r4, r0, 88
11020738:	b803      	st.w      	r0, (r14, 0xc)
1102073a:	8480      	ld.b      	r4, (r4, 0x0)
1102073c:	30ff      	movi      	r0, 255
1102073e:	6412      	cmpne      	r4, r0
11020740:	0818      	bt      	0x11020770	// 11020770 <LL_SetExtAdvParam+0x250>
                g_pExtendedAdvInfo[i].parameter.isOwnRandomAddressSet = FALSE;
11020742:	3300      	movi      	r3, 0
11020744:	a272      	st.b      	r3, (r2, 0x12)
                g_pExtendedAdvInfo[i].adv_event_counter = 0;
11020746:	3300      	movi      	r3, 0
11020748:	dc621024 	st.h      	r3, (r2, 0x48)
                g_pExtendedAdvInfo[i].data.fragmentPreference = 0xFF;
1102074c:	d86e0047 	ld.b      	r3, (r14, 0x47)
11020750:	dc620029 	st.b      	r3, (r2, 0x29)
                g_pExtendedAdvInfo[i].data.advertisingDataLength = 0;        // no adv data
11020754:	3300      	movi      	r3, 0
11020756:	aa75      	st.h      	r3, (r2, 0x2a)
                g_pExtendedAdvInfo[i].data.dataComplete = TRUE;
11020758:	3301      	movi      	r3, 1
1102075a:	dc620028 	st.b      	r3, (r2, 0x28)
                g_pExtendedAdvInfo[i].scanRspMaxLength = 0;                  // no scan rsp data
1102075e:	3300      	movi      	r3, 0
11020760:	aa7a      	st.h      	r3, (r2, 0x34)
                g_pExtendedAdvInfo[i].isPeriodic = FALSE;
11020762:	dc620041 	st.b      	r3, (r2, 0x41)
    if (i == g_extAdvNumber) {
11020766:	9866      	ld.w      	r3, (r14, 0x18)
11020768:	644e      	cmpne      	r3, r1
1102076a:	0c06      	bf      	0x11020776	// 11020776 <LL_SetExtAdvParam+0x256>
1102076c:	6cc7      	mov      	r3, r1
1102076e:	0736      	br      	0x110205da	// 110205da <LL_SetExtAdvParam+0xba>
        for (i = 0; i < g_extAdvNumber; i ++) {
11020770:	2100      	addi      	r1, 1
11020772:	644e      	cmpne      	r3, r1
11020774:	0bdd      	bt      	0x1102072e	// 1102072e <LL_SetExtAdvParam+0x20e>
        return LL_STATUS_ERROR_OUT_OF_HEAP;
11020776:	3007      	movi      	r0, 7
}
11020778:	1416      	addi      	r14, r14, 88
1102077a:	1494      	pop      	r4-r7, r15
            if (g_pExtendedAdvInfo[i].advHandle == LL_INVALID_ADV_SET_HANDLE) {
1102077c:	3000      	movi      	r0, 0
1102077e:	2800      	subi      	r0, 1
    if (i == g_extAdvNumber) {
11020780:	3100      	movi      	r1, 0
            if (g_pExtendedAdvInfo[i].advHandle == LL_INVALID_ADV_SET_HANDLE) {
11020782:	dc0e0047 	st.b      	r0, (r14, 0x47)
11020786:	07f6      	br      	0x11020772	// 11020772 <LL_SetExtAdvParam+0x252>
        } else if (own_address_type == LL_DEV_ADDR_TYPE_RANDOM) {
11020788:	9860      	ld.w      	r3, (r14, 0x0)
1102078a:	3b41      	cmpnei      	r3, 1
1102078c:	0806      	bt      	0x11020798	// 11020798 <LL_SetExtAdvParam+0x278>
            g_currentLocalAddrType  = LL_DEV_ADDR_TYPE_RANDOM;
1102078e:	1268      	lrw      	r3, 0x1fff1904	// 110208ac <LL_SetExtAdvParam+0x38c>
11020790:	3201      	movi      	r2, 1
11020792:	a340      	st.b      	r2, (r3, 0x0)
            LL_COPY_DEV_ADDR_LE(adv_param.ownAddr, ownRandomAddr);
11020794:	126b      	lrw      	r3, 0x1fff1548	// 110208c0 <LL_SetExtAdvParam+0x3a0>
11020796:	0777      	br      	0x11020684	// 11020684 <LL_SetExtAdvParam+0x164>
        else if (own_address_type == LL_DEV_ADDR_TYPE_RPA_PUBLIC ||
11020798:	9860      	ld.w      	r3, (r14, 0x0)
1102079a:	2b01      	subi      	r3, 2
1102079c:	74cc      	zextb      	r3, r3
1102079e:	3b01      	cmphsi      	r3, 2
110207a0:	0b7e      	bt      	0x1102069c	// 1102069c <LL_SetExtAdvParam+0x17c>
            if (ll_readLocalIRK(&localIrk, peer_address, peer_address_type) == TRUE) {
110207a2:	9845      	ld.w      	r2, (r14, 0x14)
110207a4:	6c57      	mov      	r1, r5
110207a6:	1812      	addi      	r0, r14, 72
110207a8:	e00045e6 	bsr      	0x11029374	// 11029374 <cpu_task_stack_init+0x9cc>
110207ac:	3841      	cmpnei      	r0, 1
110207ae:	088f      	bt      	0x110208cc	// 110208cc <LL_SetExtAdvParam+0x3ac>
                if (!ll_isIrkAllZero(localIrk)) {          // for all-zero local IRK, not RPA used
110207b0:	9872      	ld.w      	r3, (r14, 0x48)
110207b2:	6c0f      	mov      	r0, r3
110207b4:	e00044ba 	bsr      	0x11029128	// 11029128 <cpu_task_stack_init+0x780>
110207b8:	3840      	cmpnei      	r0, 0
110207ba:	0889      	bt      	0x110208cc	// 110208cc <LL_SetExtAdvParam+0x3ac>
                    if (ll_CalcRandomAddr(localIrk, resolve_address) == SUCCESS) {
110207bc:	9812      	ld.w      	r0, (r14, 0x48)
110207be:	1914      	addi      	r1, r14, 80
110207c0:	e00042c2 	bsr      	0x11028d44	// 11028d44 <cpu_task_stack_init+0x39c>
110207c4:	3840      	cmpnei      	r0, 0
110207c6:	0883      	bt      	0x110208cc	// 110208cc <LL_SetExtAdvParam+0x3ac>
                        LL_COPY_DEV_ADDR_LE(adv_param.ownAddr, resolve_address);
110207c8:	d86e0050 	ld.b      	r3, (r14, 0x50)
                        osal_memcpy(&g_currentLocalRpa[0],  resolve_address, 6);
110207cc:	3206      	movi      	r2, 6
                        LL_COPY_DEV_ADDR_LE(adv_param.ownAddr, resolve_address);
110207ce:	a667      	st.b      	r3, (r6, 0x7)
110207d0:	d86e0051 	ld.b      	r3, (r14, 0x51)
                        osal_memcpy(&g_currentLocalRpa[0],  resolve_address, 6);
110207d4:	111c      	lrw      	r0, 0x1fff15d1	// 110208c4 <LL_SetExtAdvParam+0x3a4>
110207d6:	1914      	addi      	r1, r14, 80
                        LL_COPY_DEV_ADDR_LE(adv_param.ownAddr, resolve_address);
110207d8:	a668      	st.b      	r3, (r6, 0x8)
110207da:	d86e0052 	ld.b      	r3, (r14, 0x52)
110207de:	a669      	st.b      	r3, (r6, 0x9)
110207e0:	d86e0053 	ld.b      	r3, (r14, 0x53)
110207e4:	a66a      	st.b      	r3, (r6, 0xa)
110207e6:	d86e0054 	ld.b      	r3, (r14, 0x54)
110207ea:	a66b      	st.b      	r3, (r6, 0xb)
110207ec:	d86e0055 	ld.b      	r3, (r14, 0x55)
110207f0:	a66c      	st.b      	r3, (r6, 0xc)
                        osal_memcpy(&g_currentLocalRpa[0],  resolve_address, 6);
110207f2:	e000426d 	bsr      	0x11028ccc	// 11028ccc <cpu_task_stack_init+0x324>
                        g_currentLocalAddrType = LL_DEV_ADDR_TYPE_RPA_RANDOM;
110207f6:	116e      	lrw      	r3, 0x1fff1904	// 110208ac <LL_SetExtAdvParam+0x38c>
110207f8:	3203      	movi      	r2, 3
                    g_currentLocalAddrType  = LL_DEV_ADDR_TYPE_RANDOM;
110207fa:	a340      	st.b      	r2, (r3, 0x0)
            LL_COPY_DEV_ADDR_LE(peerInfo.peerAddr, peer_address);
110207fc:	1173      	lrw      	r3, 0x1fff11ba	// 110208c8 <LL_SetExtAdvParam+0x3a8>
110207fe:	8540      	ld.b      	r2, (r5, 0x0)
11020800:	a341      	st.b      	r2, (r3, 0x1)
11020802:	8541      	ld.b      	r2, (r5, 0x1)
11020804:	a342      	st.b      	r2, (r3, 0x2)
11020806:	8542      	ld.b      	r2, (r5, 0x2)
11020808:	a343      	st.b      	r2, (r3, 0x3)
1102080a:	8543      	ld.b      	r2, (r5, 0x3)
1102080c:	a344      	st.b      	r2, (r3, 0x4)
1102080e:	8544      	ld.b      	r2, (r5, 0x4)
11020810:	a345      	st.b      	r2, (r3, 0x5)
11020812:	8545      	ld.b      	r2, (r5, 0x5)
11020814:	a346      	st.b      	r2, (r3, 0x6)
            peerInfo.peerAddrType = peer_address_type;
11020816:	d84e0014 	ld.b      	r2, (r14, 0x14)
1102081a:	a340      	st.b      	r2, (r3, 0x0)
1102081c:	0740      	br      	0x1102069c	// 1102069c <LL_SetExtAdvParam+0x17c>
                    LL_COPY_DEV_ADDR_LE(adv_param.ownAddr, ownRandomAddr);
1102081e:	1169      	lrw      	r3, 0x1fff1548	// 110208c0 <LL_SetExtAdvParam+0x3a0>
11020820:	8340      	ld.b      	r2, (r3, 0x0)
11020822:	a647      	st.b      	r2, (r6, 0x7)
11020824:	8341      	ld.b      	r2, (r3, 0x1)
11020826:	a648      	st.b      	r2, (r6, 0x8)
11020828:	8342      	ld.b      	r2, (r3, 0x2)
1102082a:	a649      	st.b      	r2, (r6, 0x9)
1102082c:	8343      	ld.b      	r2, (r3, 0x3)
1102082e:	a64a      	st.b      	r2, (r6, 0xa)
11020830:	8344      	ld.b      	r2, (r3, 0x4)
11020832:	8365      	ld.b      	r3, (r3, 0x5)
11020834:	a64b      	st.b      	r2, (r6, 0xb)
11020836:	a66c      	st.b      	r3, (r6, 0xc)
                    g_currentLocalAddrType  = LL_DEV_ADDR_TYPE_RANDOM;
11020838:	3201      	movi      	r2, 1
1102083a:	107d      	lrw      	r3, 0x1fff1904	// 110208ac <LL_SetExtAdvParam+0x38c>
1102083c:	07df      	br      	0x110207fa	// 110207fa <LL_SetExtAdvParam+0x2da>
            || own_address_type == LL_DEV_ADDR_TYPE_PUBLIC) {
1102083e:	e46320fd 	andi      	r3, r3, 253
11020842:	105b      	lrw      	r2, 0x1fff1904	// 110208ac <LL_SetExtAdvParam+0x38c>
11020844:	3b40      	cmpnei      	r3, 0
11020846:	0811      	bt      	0x11020868	// 11020868 <LL_SetExtAdvParam+0x348>
            LL_COPY_DEV_ADDR_LE(adv_param.ownAddr, ownPublicAddr);
11020848:	107a      	lrw      	r3, 0x1fff1185	// 110208b0 <LL_SetExtAdvParam+0x390>
1102084a:	8320      	ld.b      	r1, (r3, 0x0)
1102084c:	a627      	st.b      	r1, (r6, 0x7)
1102084e:	8321      	ld.b      	r1, (r3, 0x1)
11020850:	a628      	st.b      	r1, (r6, 0x8)
11020852:	8322      	ld.b      	r1, (r3, 0x2)
11020854:	a629      	st.b      	r1, (r6, 0x9)
11020856:	8323      	ld.b      	r1, (r3, 0x3)
11020858:	a62a      	st.b      	r1, (r6, 0xa)
1102085a:	8324      	ld.b      	r1, (r3, 0x4)
1102085c:	8365      	ld.b      	r3, (r3, 0x5)
1102085e:	a66c      	st.b      	r3, (r6, 0xc)
11020860:	a62b      	st.b      	r1, (r6, 0xb)
            g_currentLocalAddrType = LL_DEV_ADDR_TYPE_PUBLIC;
11020862:	3300      	movi      	r3, 0
            g_currentLocalAddrType  = LL_DEV_ADDR_TYPE_RANDOM;
11020864:	a260      	st.b      	r3, (r2, 0x0)
11020866:	0736      	br      	0x110206d2	// 110206d2 <LL_SetExtAdvParam+0x1b2>
            LL_COPY_DEV_ADDR_LE(adv_param.ownAddr, ownRandomAddr);
11020868:	1076      	lrw      	r3, 0x1fff1548	// 110208c0 <LL_SetExtAdvParam+0x3a0>
1102086a:	8320      	ld.b      	r1, (r3, 0x0)
1102086c:	a627      	st.b      	r1, (r6, 0x7)
1102086e:	8321      	ld.b      	r1, (r3, 0x1)
11020870:	a628      	st.b      	r1, (r6, 0x8)
11020872:	8322      	ld.b      	r1, (r3, 0x2)
11020874:	a629      	st.b      	r1, (r6, 0x9)
11020876:	8323      	ld.b      	r1, (r3, 0x3)
11020878:	a62a      	st.b      	r1, (r6, 0xa)
1102087a:	8324      	ld.b      	r1, (r3, 0x4)
1102087c:	8365      	ld.b      	r3, (r3, 0x5)
1102087e:	a66c      	st.b      	r3, (r6, 0xc)
11020880:	a62b      	st.b      	r1, (r6, 0xb)
            g_currentLocalAddrType  = LL_DEV_ADDR_TYPE_RANDOM;
11020882:	3301      	movi      	r3, 1
11020884:	07f0      	br      	0x11020864	// 11020864 <LL_SetExtAdvParam+0x344>
        g_pExtendedAdvInfo[i].primary_advertising_interval = primary_advertising_interval_Max * 625;
11020886:	9824      	ld.w      	r1, (r14, 0x10)
11020888:	0733      	br      	0x110206ee	// 110206ee <LL_SetExtAdvParam+0x1ce>
        return LL_STATUS_ERROR_COMMAND_DISALLOWED;
1102088a:	300c      	movi      	r0, 12
1102088c:	0776      	br      	0x11020778	// 11020778 <LL_SetExtAdvParam+0x258>
        return LL_STATUS_ERROR_BAD_PARAMETER;
1102088e:	3012      	movi      	r0, 18
11020890:	0774      	br      	0x11020778	// 11020778 <LL_SetExtAdvParam+0x258>
11020892:	0000      	bkpt
11020894:	1fff0888 	.long	0x1fff0888
11020898:	1fff0de0 	.long	0x1fff0de0
1102089c:	1fff11b0 	.long	0x1fff11b0
110208a0:	1fff15d7 	.long	0x1fff15d7
110208a4:	1fff1528 	.long	0x1fff1528
110208a8:	1fff119c 	.long	0x1fff119c
110208ac:	1fff1904 	.long	0x1fff1904
110208b0:	1fff1185 	.long	0x1fff1185
110208b4:	1fff13a8 	.long	0x1fff13a8
110208b8:	1fffa670 	.long	0x1fffa670
110208bc:	1fff0894 	.long	0x1fff0894
110208c0:	1fff1548 	.long	0x1fff1548
110208c4:	1fff15d1 	.long	0x1fff15d1
110208c8:	1fff11ba 	.long	0x1fff11ba
                if (own_address_type == LL_DEV_ADDR_TYPE_RPA_PUBLIC) {
110208cc:	9860      	ld.w      	r3, (r14, 0x0)
110208ce:	3b42      	cmpnei      	r3, 2
110208d0:	0ba7      	bt      	0x1102081e	// 1102081e <LL_SetExtAdvParam+0x2fe>
                    LL_COPY_DEV_ADDR_LE(adv_param.ownAddr, ownPublicAddr);
110208d2:	1069      	lrw      	r3, 0x1fff1185	// 110208f4 <LL_SetExtAdvParam+0x3d4>
110208d4:	8340      	ld.b      	r2, (r3, 0x0)
110208d6:	a647      	st.b      	r2, (r6, 0x7)
110208d8:	8341      	ld.b      	r2, (r3, 0x1)
110208da:	a648      	st.b      	r2, (r6, 0x8)
110208dc:	8342      	ld.b      	r2, (r3, 0x2)
110208de:	a649      	st.b      	r2, (r6, 0x9)
110208e0:	8343      	ld.b      	r2, (r3, 0x3)
110208e2:	a64a      	st.b      	r2, (r6, 0xa)
110208e4:	8344      	ld.b      	r2, (r3, 0x4)
110208e6:	8365      	ld.b      	r3, (r3, 0x5)
110208e8:	a64b      	st.b      	r2, (r6, 0xb)
110208ea:	a66c      	st.b      	r3, (r6, 0xc)
                    g_currentLocalAddrType = LL_DEV_ADDR_TYPE_PUBLIC;
110208ec:	3200      	movi      	r2, 0
110208ee:	1063      	lrw      	r3, 0x1fff1904	// 110208f8 <LL_SetExtAdvParam+0x3d8>
110208f0:	0785      	br      	0x110207fa	// 110207fa <LL_SetExtAdvParam+0x2da>
110208f2:	0000      	bkpt
110208f4:	1fff1185 	.long	0x1fff1185
110208f8:	1fff1904 	.long	0x1fff1904

110208fc <ble_ota_status_report>:

    ble_ota_ctx.ota_ready = 1;
}

void ble_ota_status_report(void)
{
110208fc:	14d0      	push      	r15
110208fe:	1424      	subi      	r14, r14, 16
    uint8_t plaine_data[GENIE_CRYPTO_UNIT_SIZE];
    //uint8_t encrypt_data[GENIE_CRYPTO_UNIT_SIZE];

    ais_ota_status_report_t *p_status_report = (ais_ota_status_report_t *)plaine_data;

    memset(plaine_data, 11, sizeof(plaine_data));
11020900:	6c3b      	mov      	r0, r14
11020902:	3210      	movi      	r2, 16
11020904:	310b      	movi      	r1, 11
11020906:	e3ffe383 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
    p_status_report->last_seq = ble_ota_ctx.last_seq;
1102090a:	106f      	lrw      	r3, 0x1fffcbd4	// 11020944 <ble_ota_status_report+0x48>
    p_status_report->rx_size = ble_ota_ctx.rx_size;

    LOGD(TAG,"last[%d] total[%d] size[%d] err[%d]", p_status_report->last_seq, p_status_report->total_frame, p_status_report->rx_size, ble_ota_ctx.err_count);
    //fix me
    //ble_crypto_encrypt(plaine_data, encrypt_data);
    ble_ais_notify(0, AIS_OTA_STATUS, plaine_data, GENIE_CRYPTO_UNIT_SIZE);
1102090c:	3000      	movi      	r0, 0
    p_status_report->last_seq = ble_ota_ctx.last_seq;
1102090e:	8341      	ld.b      	r2, (r3, 0x1)
    p_status_report->total_frame = ble_ota_ctx.total_frame;
11020910:	8322      	ld.b      	r1, (r3, 0x2)
11020912:	4124      	lsli      	r1, r1, 4
11020914:	e442200f 	andi      	r2, r2, 15
11020918:	6c84      	or      	r2, r1
    p_status_report->rx_size = ble_ota_ctx.rx_size;
1102091a:	8324      	ld.b      	r1, (r3, 0x4)
    p_status_report->total_frame = ble_ota_ctx.total_frame;
1102091c:	dc4e0000 	st.b      	r2, (r14, 0x0)
    p_status_report->rx_size = ble_ota_ctx.rx_size;
11020920:	dc2e0001 	st.b      	r1, (r14, 0x1)
11020924:	8325      	ld.b      	r1, (r3, 0x5)
    ble_ais_notify(0, AIS_OTA_STATUS, plaine_data, GENIE_CRYPTO_UNIT_SIZE);
11020926:	6cbb      	mov      	r2, r14
    p_status_report->rx_size = ble_ota_ctx.rx_size;
11020928:	dc2e0002 	st.b      	r1, (r14, 0x2)
1102092c:	8326      	ld.b      	r1, (r3, 0x6)
1102092e:	8367      	ld.b      	r3, (r3, 0x7)
11020930:	dc2e0003 	st.b      	r1, (r14, 0x3)
11020934:	dc6e0004 	st.b      	r3, (r14, 0x4)
    ble_ais_notify(0, AIS_OTA_STATUS, plaine_data, GENIE_CRYPTO_UNIT_SIZE);
11020938:	3124      	movi      	r1, 36
1102093a:	3310      	movi      	r3, 16
1102093c:	e0000240 	bsr      	0x11020dbc	// 11020dbc <ble_ais_notify>
}
11020940:	1404      	addi      	r14, r14, 16
11020942:	1490      	pop      	r15
11020944:	1fffcbd4 	.long	0x1fffcbd4

11020948 <ble_ota_handle_version_request>:

bool ble_ota_handle_version_request(uint8_t msg_id, ais_ota_ver_req_t *p_ver_req)
{
11020948:	14d2      	push      	r4-r5, r15
1102094a:	1424      	subi      	r14, r14, 16
1102094c:	6d47      	mov      	r5, r1
1102094e:	6d03      	mov      	r4, r0
    uint8_t plaine_data[GENIE_CRYPTO_UNIT_SIZE];
    //uint8_t encrypt_data[GENIE_CRYPTO_UNIT_SIZE];

    ais_ota_ver_resp_t *p_ver_resp = (ais_ota_ver_resp_t *)plaine_data;

    printf("image type %d\r\n",p_ver_req->image_type);
11020950:	8120      	ld.b      	r1, (r1, 0x0)
11020952:	1018      	lrw      	r0, 0x1101128a	// 110209b0 <ble_ota_handle_version_request+0x68>
11020954:	e3ffe1b2 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
    if (p_ver_req->image_type == 0)
11020958:	8560      	ld.b      	r3, (r5, 0x0)
1102095a:	3b40      	cmpnei      	r3, 0
1102095c:	0828      	bt      	0x110209ac	// 110209ac <ble_ota_handle_version_request+0x64>
    {
        memset(plaine_data, 11, sizeof(plaine_data));
1102095e:	3210      	movi      	r2, 16
11020960:	310b      	movi      	r1, 11
11020962:	6c3b      	mov      	r0, r14
11020964:	e3ffe354 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
        p_ver_resp->image_type = 0;
11020968:	3300      	movi      	r3, 0
1102096a:	dc6e0000 	st.b      	r3, (r14, 0x0)
        p_ver_resp->ver = ble_version_appver_get();
1102096e:	e0000373 	bsr      	0x11021054	// 11021054 <ble_version_appver_get>
11020972:	c4007082 	xtrb2      	r2, r0
11020976:	dc0e0001 	st.b      	r0, (r14, 0x1)
1102097a:	dc4e0002 	st.b      	r2, (r14, 0x2)
1102097e:	c4007042 	xtrb1      	r2, r0
11020982:	4818      	lsri      	r0, r0, 24
11020984:	dc4e0003 	st.b      	r2, (r14, 0x3)
11020988:	dc0e0004 	st.b      	r0, (r14, 0x4)

        if (ble_ais_state_get() == AIS_STATE_IDLE)
1102098c:	e0000342 	bsr      	0x11021010	// 11021010 <ble_ais_state_get>
11020990:	3843      	cmpnei      	r0, 3
11020992:	0804      	bt      	0x1102099a	// 1102099a <ble_ota_handle_version_request+0x52>
        {
            printf("idle state\r\n");
11020994:	1008      	lrw      	r0, 0x1101129a	// 110209b4 <ble_ota_handle_version_request+0x6c>
11020996:	e3ffe191 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
            //ble_crypto_encrypt(plaine_data, encrypt_data);
            ble_ais_notify(msg_id, AIS_OTA_VER_RESP, plaine_data, 5);
        }
        else
        {
            ble_ais_notify(msg_id, AIS_OTA_VER_RESP, plaine_data, 5); //5=sizeof(ais_ota_ver_resp_t)
1102099a:	6c13      	mov      	r0, r4
1102099c:	3305      	movi      	r3, 5
1102099e:	6cbb      	mov      	r2, r14
110209a0:	3121      	movi      	r1, 33
110209a2:	e000020d 	bsr      	0x11020dbc	// 11020dbc <ble_ais_notify>
        }

        return true;
110209a6:	3001      	movi      	r0, 1
    }

    return false;
}
110209a8:	1404      	addi      	r14, r14, 16
110209aa:	1492      	pop      	r4-r5, r15
    return false;
110209ac:	3000      	movi      	r0, 0
110209ae:	07fd      	br      	0x110209a8	// 110209a8 <ble_ota_handle_version_request+0x60>
110209b0:	1101128a 	.long	0x1101128a
110209b4:	1101129a 	.long	0x1101129a

110209b8 <ble_ota_handle_update_request>:

bool ble_ota_handle_update_request(uint8_t msg_id, ais_ota_upd_req_t *p_ota_req)
{
110209b8:	14d4      	push      	r4-r7, r15
110209ba:	1428      	subi      	r14, r14, 32
    //uint8_t encrypt_data[GENIE_CRYPTO_UNIT_SIZE];

    ais_ota_upd_resp_t *p_upd_resp = (ais_ota_upd_resp_t *)plaine_data;

    LOGD(TAG,"%d ota_ver %08x %08x size %d color_temperature: %d %d",p_ota_req->image_type, p_ota_req->ver,ble_version_appver_get(),p_ota_req->fw_size, dfu_get_ota_partition_max_size(),ble_ota_ctx.ota_ready);
    if (ble_ota_ctx.ota_ready == 1)
110209bc:	12ae      	lrw      	r5, 0x1fffcbd4	// 11020af4 <ble_ota_handle_update_request+0x13c>
{
110209be:	6d83      	mov      	r6, r0
    if (ble_ota_ctx.ota_ready == 1)
110209c0:	8577      	ld.b      	r3, (r5, 0x17)
110209c2:	e4632002 	andi      	r3, r3, 2
{
110209c6:	6d07      	mov      	r4, r1
    if (ble_ota_ctx.ota_ready == 1)
110209c8:	3b40      	cmpnei      	r3, 0
110209ca:	0892      	bt      	0x11020aee	// 11020aee <ble_ota_handle_update_request+0x136>
    {
        return false;
    }
    memset(plaine_data, 10, sizeof(plaine_data));
110209cc:	3210      	movi      	r2, 16
110209ce:	310a      	movi      	r1, 10
110209d0:	1804      	addi      	r0, r14, 16
110209d2:	e3ffe31d 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
#ifdef CONFIG_ALLOW_OTA_FOR_HIGH_VERSION
    if (p_ota_req->image_type != 0 || p_ota_req->ver == ble_version_appver_get() || \
110209d6:	8460      	ld.b      	r3, (r4, 0x0)
110209d8:	3b40      	cmpnei      	r3, 0
110209da:	0c39      	bf      	0x11020a4c	// 11020a4c <ble_ota_handle_update_request+0x94>
#else
     if (p_ota_req->image_type != 0 || p_ota_req->ver <= ble_version_appver_get() || \
        dfu_get_ota_partition_max_size() < p_ota_req->fw_size || 0 == p_ota_req->fw_size)
#endif
    {
        LOGE(TAG,"ver:0x%08x imgT:%d imgS:%d", p_ota_req->ver, p_ota_req->image_type, p_ota_req->fw_size);
110209dc:	8446      	ld.b      	r2, (r4, 0x6)
110209de:	8465      	ld.b      	r3, (r4, 0x5)
110209e0:	4248      	lsli      	r2, r2, 8
110209e2:	6c8c      	or      	r2, r3
110209e4:	8467      	ld.b      	r3, (r4, 0x7)
110209e6:	4370      	lsli      	r3, r3, 16
110209e8:	6c8c      	or      	r2, r3
110209ea:	8468      	ld.b      	r3, (r4, 0x8)
110209ec:	4378      	lsli      	r3, r3, 24
110209ee:	6cc8      	or      	r3, r2
110209f0:	b863      	st.w      	r3, (r14, 0xc)
110209f2:	8460      	ld.b      	r3, (r4, 0x0)
110209f4:	8442      	ld.b      	r2, (r4, 0x2)
110209f6:	b862      	st.w      	r3, (r14, 0x8)
110209f8:	4248      	lsli      	r2, r2, 8
110209fa:	8461      	ld.b      	r3, (r4, 0x1)
110209fc:	6c8c      	or      	r2, r3
110209fe:	8463      	ld.b      	r3, (r4, 0x3)
11020a00:	4370      	lsli      	r3, r3, 16
11020a02:	6c8c      	or      	r2, r3
11020a04:	8464      	ld.b      	r3, (r4, 0x4)
11020a06:	4378      	lsli      	r3, r3, 24
11020a08:	6cc8      	or      	r3, r2
11020a0a:	b861      	st.w      	r3, (r14, 0x4)
11020a0c:	3003      	movi      	r0, 3
11020a0e:	117b      	lrw      	r3, 0x11011260	// 11020af8 <ble_ota_handle_update_request+0x140>
11020a10:	115b      	lrw      	r2, 0x11011234	// 11020afc <ble_ota_handle_update_request+0x144>
11020a12:	113c      	lrw      	r1, 0x11011258	// 11020b00 <ble_ota_handle_update_request+0x148>
11020a14:	b860      	st.w      	r3, (r14, 0x0)
11020a16:	33aa      	movi      	r3, 170
11020a18:	e000104a 	bsr      	0x11022aac	// 11022aac <ulog>
        p_upd_resp->state = 0;
11020a1c:	3300      	movi      	r3, 0
11020a1e:	dc6e0010 	st.b      	r3, (r14, 0x10)
        ble_ota_ctx.image_size = p_ota_req->fw_size;
        ble_ota_ctx.image_crc16 = p_ota_req->crc16;
        ble_ota_ctx.ota_flag = p_ota_req->ota_flag;
        p_upd_resp->state = 1;
        /*If support breakpoint continue,you should set rx_size*/
        p_upd_resp->rx_size = 0;
11020a22:	dc6e0011 	st.b      	r3, (r14, 0x11)
    }

    p_upd_resp->total_frame = CONFIG_AIS_TOTAL_FRAME - 1;
11020a26:	3307      	movi      	r3, 7
        p_upd_resp->rx_size = 0;
11020a28:	3200      	movi      	r2, 0
    p_upd_resp->total_frame = CONFIG_AIS_TOTAL_FRAME - 1;
11020a2a:	dc6e0015 	st.b      	r3, (r14, 0x15)
    //genie_crypto_encrypt(plaine_data, encrypt_data);

    ble_ais_notify(msg_id, AIS_OTA_UPD_RESP, plaine_data, GENIE_CRYPTO_UNIT_SIZE);
11020a2e:	6c1b      	mov      	r0, r6
11020a30:	3310      	movi      	r3, 16
11020a32:	3123      	movi      	r1, 35
        p_upd_resp->rx_size = 0;
11020a34:	dc4e0012 	st.b      	r2, (r14, 0x12)
11020a38:	dc4e0013 	st.b      	r2, (r14, 0x13)
11020a3c:	dc4e0014 	st.b      	r2, (r14, 0x14)
    ble_ais_notify(msg_id, AIS_OTA_UPD_RESP, plaine_data, GENIE_CRYPTO_UNIT_SIZE);
11020a40:	1a04      	addi      	r2, r14, 16
11020a42:	e00001bd 	bsr      	0x11020dbc	// 11020dbc <ble_ais_notify>

    //GENIE_LOG_INFO("OTA Start:Size:%d Ver:0x%08x", p_ota_req->fw_size, p_ota_req->ver);

    return true;
11020a46:	3001      	movi      	r0, 1
}
11020a48:	1408      	addi      	r14, r14, 32
11020a4a:	1494      	pop      	r4-r7, r15
    if (p_ota_req->image_type != 0 || p_ota_req->ver == ble_version_appver_get() || \
11020a4c:	8462      	ld.b      	r3, (r4, 0x2)
11020a4e:	84e1      	ld.b      	r7, (r4, 0x1)
11020a50:	4368      	lsli      	r3, r3, 8
11020a52:	6cdc      	or      	r3, r7
11020a54:	84e3      	ld.b      	r7, (r4, 0x3)
11020a56:	47f0      	lsli      	r7, r7, 16
11020a58:	6cdc      	or      	r3, r7
11020a5a:	84e4      	ld.b      	r7, (r4, 0x4)
11020a5c:	47f8      	lsli      	r7, r7, 24
11020a5e:	6dcc      	or      	r7, r3
11020a60:	e00002fa 	bsr      	0x11021054	// 11021054 <ble_version_appver_get>
11020a64:	641e      	cmpne      	r7, r0
11020a66:	0fbb      	bf      	0x110209dc	// 110209dc <ble_ota_handle_update_request+0x24>
        dfu_get_ota_partition_max_size() < p_ota_req->fw_size || 0 == p_ota_req->fw_size) //Is illeagal
11020a68:	e0000404 	bsr      	0x11021270	// 11021270 <dfu_get_ota_partition_max_size>
11020a6c:	8446      	ld.b      	r2, (r4, 0x6)
11020a6e:	8465      	ld.b      	r3, (r4, 0x5)
11020a70:	4248      	lsli      	r2, r2, 8
11020a72:	6c8c      	or      	r2, r3
11020a74:	8467      	ld.b      	r3, (r4, 0x7)
11020a76:	4370      	lsli      	r3, r3, 16
11020a78:	6c8c      	or      	r2, r3
11020a7a:	8468      	ld.b      	r3, (r4, 0x8)
11020a7c:	4378      	lsli      	r3, r3, 24
11020a7e:	6cc8      	or      	r3, r2
    if (p_ota_req->image_type != 0 || p_ota_req->ver == ble_version_appver_get() || \
11020a80:	64c0      	cmphs      	r0, r3
11020a82:	0fad      	bf      	0x110209dc	// 110209dc <ble_ota_handle_update_request+0x24>
        dfu_get_ota_partition_max_size() < p_ota_req->fw_size || 0 == p_ota_req->fw_size) //Is illeagal
11020a84:	3b40      	cmpnei      	r3, 0
11020a86:	0fab      	bf      	0x110209dc	// 110209dc <ble_ota_handle_update_request+0x24>
        ble_ais_state_set(AIS_STATE_OTA);
11020a88:	3004      	movi      	r0, 4
11020a8a:	e00002bd 	bsr      	0x11021004	// 11021004 <ble_ais_state_set>
        printf("ais satte %d\r\n",ble_ais_state_get());
11020a8e:	e00002c1 	bsr      	0x11021010	// 11021010 <ble_ais_state_get>
11020a92:	6c43      	mov      	r1, r0
11020a94:	101c      	lrw      	r0, 0x1101127b	// 11020b04 <ble_ota_handle_update_request+0x14c>
11020a96:	e3ffe111 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
        memset(&ble_ota_ctx, 0, sizeof(ble_ota_ctx));
11020a9a:	32a7      	movi      	r2, 167
11020a9c:	4242      	lsli      	r2, r2, 2
11020a9e:	3100      	movi      	r1, 0
11020aa0:	6c17      	mov      	r0, r5
11020aa2:	e3ffe2b5 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
        ble_ota_ctx.image_type = p_ota_req->image_type;
11020aa6:	8460      	ld.b      	r3, (r4, 0x0)
11020aa8:	a568      	st.b      	r3, (r5, 0x8)
        ble_ota_ctx.image_ver = p_ota_req->ver;
11020aaa:	8442      	ld.b      	r2, (r4, 0x2)
11020aac:	8461      	ld.b      	r3, (r4, 0x1)
11020aae:	4248      	lsli      	r2, r2, 8
11020ab0:	6c8c      	or      	r2, r3
11020ab2:	8463      	ld.b      	r3, (r4, 0x3)
11020ab4:	4370      	lsli      	r3, r3, 16
11020ab6:	6c8c      	or      	r2, r3
11020ab8:	8464      	ld.b      	r3, (r4, 0x4)
11020aba:	4378      	lsli      	r3, r3, 24
11020abc:	6cc8      	or      	r3, r2
11020abe:	b563      	st.w      	r3, (r5, 0xc)
        ble_ota_ctx.image_size = p_ota_req->fw_size;
11020ac0:	8446      	ld.b      	r2, (r4, 0x6)
11020ac2:	8465      	ld.b      	r3, (r4, 0x5)
11020ac4:	4248      	lsli      	r2, r2, 8
11020ac6:	6c8c      	or      	r2, r3
11020ac8:	8467      	ld.b      	r3, (r4, 0x7)
11020aca:	4370      	lsli      	r3, r3, 16
11020acc:	6c8c      	or      	r2, r3
11020ace:	8468      	ld.b      	r3, (r4, 0x8)
11020ad0:	4378      	lsli      	r3, r3, 24
11020ad2:	6cc8      	or      	r3, r2
11020ad4:	b564      	st.w      	r3, (r5, 0x10)
        ble_ota_ctx.image_crc16 = p_ota_req->crc16;
11020ad6:	846a      	ld.b      	r3, (r4, 0xa)
11020ad8:	8449      	ld.b      	r2, (r4, 0x9)
11020ada:	4368      	lsli      	r3, r3, 8
11020adc:	6cc8      	or      	r3, r2
11020ade:	ad6a      	st.h      	r3, (r5, 0x14)
        ble_ota_ctx.ota_flag = p_ota_req->ota_flag;
11020ae0:	846b      	ld.b      	r3, (r4, 0xb)
11020ae2:	a576      	st.b      	r3, (r5, 0x16)
        p_upd_resp->state = 1;
11020ae4:	3301      	movi      	r3, 1
11020ae6:	dc6e0010 	st.b      	r3, (r14, 0x10)
        p_upd_resp->rx_size = 0;
11020aea:	3300      	movi      	r3, 0
11020aec:	079b      	br      	0x11020a22	// 11020a22 <ble_ota_handle_update_request+0x6a>
        return false;
11020aee:	3000      	movi      	r0, 0
11020af0:	07ac      	br      	0x11020a48	// 11020a48 <ble_ota_handle_update_request+0x90>
11020af2:	0000      	bkpt
11020af4:	1fffcbd4 	.long	0x1fffcbd4
11020af8:	11011260 	.long	0x11011260
11020afc:	11011234 	.long	0x11011234
11020b00:	11011258 	.long	0x11011258
11020b04:	1101127b 	.long	0x1101127b

11020b08 <ble_ota_parse_pdu>:

bool ble_ota_parse_pdu(ais_pdu_t *p_msg)
{
11020b08:	14d4      	push      	r4-r7, r15
11020b0a:	1424      	subi      	r14, r14, 16
11020b0c:	6d43      	mov      	r5, r0
    int ret = 0 ;
    uint8_t offset = 0;
    uint8_t *p_payload = p_msg->payload;
    uint16_t payload_len = p_msg->header.payload_len;

    if (p_msg->header.seq > p_msg->header.total_frame)
11020b0e:	8062      	ld.b      	r3, (r0, 0x2)
11020b10:	e443200f 	andi      	r2, r3, 15
11020b14:	4b24      	lsri      	r1, r3, 4
11020b16:	6485      	cmplt      	r1, r2
11020b18:	0c0a      	bf      	0x11020b2c	// 11020b2c <ble_ota_parse_pdu+0x24>
    {
        LOGE(TAG,"invalid");
11020b1a:	1261      	lrw      	r3, 0x110112a7	// 11020c1c <ble_ota_parse_pdu+0x114>
11020b1c:	b860      	st.w      	r3, (r14, 0x0)
11020b1e:	33d0      	movi      	r3, 208
    {
        ret = dfu_image_update(ble_ota_ctx.image_type,
                             ble_ota_ctx.rx_size - ble_ota_ctx.rx_len, ble_ota_ctx.rx_len,
                             (int *)ble_ota_ctx.recv_buf);
        if(ret) {
          LOGE(TAG,"Dfu image update faild");
11020b20:	1240      	lrw      	r2, 0x11011234	// 11020c20 <ble_ota_parse_pdu+0x118>
11020b22:	1221      	lrw      	r1, 0x11011258	// 11020c24 <ble_ota_parse_pdu+0x11c>
11020b24:	3003      	movi      	r0, 3
11020b26:	e0000fc3 	bsr      	0x11022aac	// 11022aac <ulog>
11020b2a:	042b      	br      	0x11020b80	// 11020b80 <ble_ota_parse_pdu+0x78>
    if (p_msg->header.seq != ble_ota_ctx.except_seq)
11020b2c:	11df      	lrw      	r6, 0x1fffcbd4	// 11020c28 <ble_ota_parse_pdu+0x120>
    uint16_t payload_len = p_msg->header.payload_len;
11020b2e:	80e3      	ld.b      	r7, (r0, 0x3)
    if (p_msg->header.seq != ble_ota_ctx.except_seq)
11020b30:	8623      	ld.b      	r1, (r6, 0x3)
11020b32:	6d1b      	mov      	r4, r6
11020b34:	644a      	cmpne      	r2, r1
11020b36:	0c16      	bf      	0x11020b62	// 11020b62 <ble_ota_parse_pdu+0x5a>
        LOGW(TAG,"expected %d, rx %d, len %d", ble_ota_ctx.except_seq, p_msg->header.seq, p_msg->header.payload_len);
11020b38:	117d      	lrw      	r3, 0x110112af	// 11020c2c <ble_ota_parse_pdu+0x124>
11020b3a:	3004      	movi      	r0, 4
11020b3c:	b842      	st.w      	r2, (r14, 0x8)
11020b3e:	b821      	st.w      	r1, (r14, 0x4)
11020b40:	b860      	st.w      	r3, (r14, 0x0)
11020b42:	b8e3      	st.w      	r7, (r14, 0xc)
11020b44:	33d6      	movi      	r3, 214
11020b46:	1157      	lrw      	r2, 0x11011234	// 11020c20 <ble_ota_parse_pdu+0x118>
11020b48:	1137      	lrw      	r1, 0x11011258	// 11020c24 <ble_ota_parse_pdu+0x11c>
11020b4a:	e0000fb1 	bsr      	0x11022aac	// 11022aac <ulog>
        if (ble_ota_ctx.err_count++ == 0)
11020b4e:	8660      	ld.b      	r3, (r6, 0x0)
11020b50:	5b42      	addi      	r2, r3, 1
11020b52:	3b40      	cmpnei      	r3, 0
11020b54:	a640      	st.b      	r2, (r6, 0x0)
11020b56:	0815      	bt      	0x11020b80	// 11020b80 <ble_ota_parse_pdu+0x78>
            ble_ota_status_report();
11020b58:	e3fffed2 	bsr      	0x110208fc	// 110208fc <ble_ota_status_report>
    if (ble_ota_ctx.rx_size == ble_ota_ctx.image_size || p_msg->header.seq == p_msg->header.total_frame)
    {
        ble_ota_status_report();
    }

    return true;
11020b5c:	3001      	movi      	r0, 1
}
11020b5e:	1404      	addi      	r14, r14, 16
11020b60:	1494      	pop      	r4-r7, r15
    if (ble_ota_ctx.rx_size + p_msg->header.payload_len > ble_ota_ctx.image_size)
11020b62:	9624      	ld.w      	r1, (r6, 0x10)
11020b64:	9641      	ld.w      	r2, (r6, 0x4)
11020b66:	5a1c      	addu      	r0, r2, r7
11020b68:	6404      	cmphs      	r1, r0
11020b6a:	080d      	bt      	0x11020b84	// 11020b84 <ble_ota_parse_pdu+0x7c>
        LOGE(TAG,"out of size, rx %ld, recv %d", ble_ota_ctx.rx_size, p_msg->header.payload_len);
11020b6c:	1171      	lrw      	r3, 0x110112ca	// 11020c30 <ble_ota_parse_pdu+0x128>
11020b6e:	112e      	lrw      	r1, 0x11011258	// 11020c24 <ble_ota_parse_pdu+0x11c>
11020b70:	3003      	movi      	r0, 3
11020b72:	b841      	st.w      	r2, (r14, 0x4)
11020b74:	b860      	st.w      	r3, (r14, 0x0)
11020b76:	b8e2      	st.w      	r7, (r14, 0x8)
11020b78:	33e4      	movi      	r3, 228
11020b7a:	114a      	lrw      	r2, 0x11011234	// 11020c20 <ble_ota_parse_pdu+0x118>
11020b7c:	e0000f98 	bsr      	0x11022aac	// 11022aac <ulog>
        return false;
11020b80:	3000      	movi      	r0, 0
11020b82:	07ee      	br      	0x11020b5e	// 11020b5e <ble_ota_parse_pdu+0x56>
    if (p_msg->header.seq == 0)
11020b84:	e463200f 	andi      	r3, r3, 15
    ble_ota_ctx.err_count = 0;
11020b88:	3200      	movi      	r2, 0
    if (p_msg->header.seq == 0)
11020b8a:	3b40      	cmpnei      	r3, 0
    ble_ota_ctx.err_count = 0;
11020b8c:	a640      	st.b      	r2, (r6, 0x0)
    if (p_msg->header.seq == 0)
11020b8e:	0809      	bt      	0x11020ba0	// 11020ba0 <ble_ota_parse_pdu+0x98>
        memset(ble_ota_ctx.recv_buf, 0, sizeof(ble_ota_ctx.recv_buf));
11020b90:	32a0      	movi      	r2, 160
11020b92:	4242      	lsli      	r2, r2, 2
11020b94:	3100      	movi      	r1, 0
        ble_ota_ctx.rx_len = 0;
11020b96:	ae6c      	st.h      	r3, (r6, 0x18)
        memset(ble_ota_ctx.recv_buf, 0, sizeof(ble_ota_ctx.recv_buf));
11020b98:	e4060019 	addi      	r0, r6, 26
11020b9c:	e3ffe238 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
    uint16_t payload_len = p_msg->header.payload_len;
11020ba0:	759d      	zexth      	r6, r7
    if (payload_len)
11020ba2:	3e40      	cmpnei      	r6, 0
11020ba4:	0c0f      	bf      	0x11020bc2	// 11020bc2 <ble_ota_parse_pdu+0xba>
        ble_ota_ctx.flash_clean = 1;
11020ba6:	8477      	ld.b      	r3, (r4, 0x17)
        memcpy(ble_ota_ctx.recv_buf + ble_ota_ctx.rx_len, p_payload, payload_len);
11020ba8:	6c9f      	mov      	r2, r7
        ble_ota_ctx.flash_clean = 1;
11020baa:	ec630001 	ori      	r3, r3, 1
11020bae:	a477      	st.b      	r3, (r4, 0x17)
        memcpy(ble_ota_ctx.recv_buf + ble_ota_ctx.rx_len, p_payload, payload_len);
11020bb0:	8c0c      	ld.h      	r0, (r4, 0x18)
11020bb2:	1161      	lrw      	r3, 0x1fffcbee	// 11020c34 <ble_ota_parse_pdu+0x12c>
    uint8_t *p_payload = p_msg->payload;
11020bb4:	5d2e      	addi      	r1, r5, 4
        memcpy(ble_ota_ctx.recv_buf + ble_ota_ctx.rx_len, p_payload, payload_len);
11020bb6:	600c      	addu      	r0, r3
11020bb8:	e0004204 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
        ble_ota_ctx.rx_len += payload_len;
11020bbc:	8c6c      	ld.h      	r3, (r4, 0x18)
11020bbe:	618c      	addu      	r6, r3
11020bc0:	accc      	st.h      	r6, (r4, 0x18)
    ble_ota_ctx.last_seq = p_msg->header.seq;
11020bc2:	8562      	ld.b      	r3, (r5, 0x2)
11020bc4:	e443200f 	andi      	r2, r3, 15
    ble_ota_ctx.total_frame = p_msg->header.total_frame;
11020bc8:	4b64      	lsri      	r3, r3, 4
11020bca:	a462      	st.b      	r3, (r4, 0x2)
    ble_ota_ctx.rx_size += p_msg->header.payload_len;
11020bcc:	8523      	ld.b      	r1, (r5, 0x3)
11020bce:	9461      	ld.w      	r3, (r4, 0x4)
11020bd0:	604c      	addu      	r1, r3
11020bd2:	b421      	st.w      	r1, (r4, 0x4)
    ble_ota_ctx.last_seq = p_msg->header.seq;
11020bd4:	a441      	st.b      	r2, (r4, 0x1)
    if (p_msg->header.seq == p_msg->header.total_frame)
11020bd6:	8542      	ld.b      	r2, (r5, 0x2)
11020bd8:	e462200f 	andi      	r3, r2, 15
11020bdc:	4a44      	lsri      	r2, r2, 4
11020bde:	64ca      	cmpne      	r2, r3
11020be0:	081c      	bt      	0x11020c18	// 11020c18 <ble_ota_parse_pdu+0x110>
                             ble_ota_ctx.rx_size - ble_ota_ctx.rx_len, ble_ota_ctx.rx_len,
11020be2:	8c4c      	ld.h      	r2, (r4, 0x18)
        ret = dfu_image_update(ble_ota_ctx.image_type,
11020be4:	8408      	ld.b      	r0, (r4, 0x8)
11020be6:	1074      	lrw      	r3, 0x1fffcbee	// 11020c34 <ble_ota_parse_pdu+0x12c>
                             ble_ota_ctx.rx_size - ble_ota_ctx.rx_len, ble_ota_ctx.rx_len,
11020be8:	604a      	subu      	r1, r2
        ret = dfu_image_update(ble_ota_ctx.image_type,
11020bea:	e0000269 	bsr      	0x110210bc	// 110210bc <dfu_image_update>
        if(ret) {
11020bee:	3840      	cmpnei      	r0, 0
11020bf0:	0c06      	bf      	0x11020bfc	// 11020bfc <ble_ota_parse_pdu+0xf4>
          LOGE(TAG,"Dfu image update faild");
11020bf2:	1072      	lrw      	r3, 0x110112e7	// 11020c38 <ble_ota_parse_pdu+0x130>
11020bf4:	b860      	st.w      	r3, (r14, 0x0)
11020bf6:	338d      	movi      	r3, 141
11020bf8:	4361      	lsli      	r3, r3, 1
11020bfa:	0793      	br      	0x11020b20	// 11020b20 <ble_ota_parse_pdu+0x18>
        ble_ota_ctx.rx_len = 0;
11020bfc:	3300      	movi      	r3, 0
11020bfe:	ac6c      	st.h      	r3, (r4, 0x18)
        ble_ota_ctx.except_seq = p_msg->header.seq + 1;
11020c00:	a463      	st.b      	r3, (r4, 0x3)
    if (ble_ota_ctx.rx_size == ble_ota_ctx.image_size || p_msg->header.seq == p_msg->header.total_frame)
11020c02:	9441      	ld.w      	r2, (r4, 0x4)
11020c04:	9464      	ld.w      	r3, (r4, 0x10)
11020c06:	64ca      	cmpne      	r2, r3
11020c08:	0fa8      	bf      	0x11020b58	// 11020b58 <ble_ota_parse_pdu+0x50>
11020c0a:	8562      	ld.b      	r3, (r5, 0x2)
11020c0c:	e443200f 	andi      	r2, r3, 15
11020c10:	4b64      	lsri      	r3, r3, 4
11020c12:	64ca      	cmpne      	r2, r3
11020c14:	0ba4      	bt      	0x11020b5c	// 11020b5c <ble_ota_parse_pdu+0x54>
11020c16:	07a1      	br      	0x11020b58	// 11020b58 <ble_ota_parse_pdu+0x50>
        ble_ota_ctx.except_seq = p_msg->header.seq + 1;
11020c18:	2300      	addi      	r3, 1
11020c1a:	07f3      	br      	0x11020c00	// 11020c00 <ble_ota_parse_pdu+0xf8>
11020c1c:	110112a7 	.long	0x110112a7
11020c20:	11011234 	.long	0x11011234
11020c24:	11011258 	.long	0x11011258
11020c28:	1fffcbd4 	.long	0x1fffcbd4
11020c2c:	110112af 	.long	0x110112af
11020c30:	110112ca 	.long	0x110112ca
11020c34:	1fffcbee 	.long	0x1fffcbee
11020c38:	110112e7 	.long	0x110112e7

11020c3c <ble_ota_check_firmware>:

bool ble_ota_check_firmware(uint8_t msg_id, ais_ota_check_req_t *p_check_req)
{
11020c3c:	14d2      	push      	r4-r5, r15
11020c3e:	1426      	subi      	r14, r14, 24
11020c40:	6d43      	mov      	r5, r0
    uint16_t crc16 = 0;
11020c42:	3300      	movi      	r3, 0
    uint8_t plaine_data[GENIE_CRYPTO_UNIT_SIZE];
    //uint8_t encrypt_data[GENIE_CRYPTO_UNIT_SIZE];
    ais_ota_check_resp_t *p_check_resp = (ais_ota_check_resp_t *)plaine_data;

    ble_ais_state_set(AIS_STATE_IDLE);
11020c44:	3003      	movi      	r0, 3
{
11020c46:	6d07      	mov      	r4, r1
    uint16_t crc16 = 0;
11020c48:	dc6e1003 	st.h      	r3, (r14, 0x6)
    ble_ais_state_set(AIS_STATE_IDLE);
11020c4c:	e00001dc 	bsr      	0x11021004	// 11021004 <ble_ais_state_set>

    if (p_check_req->state == 1)
11020c50:	8460      	ld.b      	r3, (r4, 0x0)
11020c52:	3b41      	cmpnei      	r3, 1
11020c54:	0846      	bt      	0x11020ce0	// 11020ce0 <ble_ota_check_firmware+0xa4>
    {
        memset(plaine_data, 15, sizeof(plaine_data));
11020c56:	3210      	movi      	r2, 16
11020c58:	310f      	movi      	r1, 15

        p_check_resp->state = dfu_check_checksum(ble_ota_ctx.image_type, &crc16);
11020c5a:	1183      	lrw      	r4, 0x1fffcbd4	// 11020ce4 <ble_ota_check_firmware+0xa8>
        memset(plaine_data, 15, sizeof(plaine_data));
11020c5c:	1802      	addi      	r0, r14, 8
11020c5e:	e3ffe1d7 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
        p_check_resp->state = dfu_check_checksum(ble_ota_ctx.image_type, &crc16);
11020c62:	8408      	ld.b      	r0, (r4, 0x8)
11020c64:	e42e0005 	addi      	r1, r14, 6
11020c68:	e000027a 	bsr      	0x1102115c	// 1102115c <dfu_check_checksum>

        LOGD(TAG,"check %d %04x %04x", p_check_resp->state, ble_ota_ctx.image_crc16, crc16);
        if (p_check_resp->state && crc16 != ble_ota_ctx.image_crc16)
11020c6c:	3840      	cmpnei      	r0, 0
        p_check_resp->state = dfu_check_checksum(ble_ota_ctx.image_type, &crc16);
11020c6e:	dc0e0008 	st.b      	r0, (r14, 0x8)
        if (p_check_resp->state && crc16 != ble_ota_ctx.image_crc16)
11020c72:	0c12      	bf      	0x11020c96	// 11020c96 <ble_ota_check_firmware+0x5a>
11020c74:	8c4a      	ld.h      	r2, (r4, 0x14)
11020c76:	d86e1003 	ld.h      	r3, (r14, 0x6)
11020c7a:	64ca      	cmpne      	r2, r3
11020c7c:	0c0d      	bf      	0x11020c96	// 11020c96 <ble_ota_check_firmware+0x5a>
        {
            p_check_resp->state = 0;
11020c7e:	3300      	movi      	r3, 0
            LOGE(TAG,"crc error");
11020c80:	105a      	lrw      	r2, 0x11011234	// 11020ce8 <ble_ota_check_firmware+0xac>
11020c82:	103b      	lrw      	r1, 0x11011258	// 11020cec <ble_ota_check_firmware+0xb0>
11020c84:	3003      	movi      	r0, 3
            p_check_resp->state = 0;
11020c86:	dc6e0008 	st.b      	r3, (r14, 0x8)
            LOGE(TAG,"crc error");
11020c8a:	107a      	lrw      	r3, 0x11011204	// 11020cf0 <ble_ota_check_firmware+0xb4>
11020c8c:	b860      	st.w      	r3, (r14, 0x0)
11020c8e:	33a0      	movi      	r3, 160
11020c90:	4361      	lsli      	r3, r3, 1
11020c92:	e0000f0d 	bsr      	0x11022aac	// 11022aac <ulog>
        }

        if (p_check_resp->state)
11020c96:	d86e0008 	ld.b      	r3, (r14, 0x8)
11020c9a:	3b40      	cmpnei      	r3, 0
11020c9c:	0c1a      	bf      	0x11020cd0	// 11020cd0 <ble_ota_check_firmware+0x94>
        {
            ble_ais_state_set(AIS_STATE_REBOOT);
11020c9e:	3005      	movi      	r0, 5
11020ca0:	e00001b2 	bsr      	0x11021004	// 11021004 <ble_ais_state_set>
    ble_ota_ctx.ota_ready = 1;
11020ca4:	8477      	ld.b      	r3, (r4, 0x17)
11020ca6:	ec630002 	ori      	r3, r3, 2
11020caa:	a477      	st.b      	r3, (r4, 0x17)
            _ais_set_ota_change();
            LOGW(TAG,"ota success, reboot in 3s!");
11020cac:	3004      	movi      	r0, 4
11020cae:	1072      	lrw      	r3, 0x1101120e	// 11020cf4 <ble_ota_check_firmware+0xb8>
11020cb0:	104e      	lrw      	r2, 0x11011234	// 11020ce8 <ble_ota_check_firmware+0xac>
11020cb2:	102f      	lrw      	r1, 0x11011258	// 11020cec <ble_ota_check_firmware+0xb0>
11020cb4:	b860      	st.w      	r3, (r14, 0x0)
11020cb6:	ea030147 	movi      	r3, 327
            
        }
        else
        {
            LOGE(TAG,"ota failed");
11020cba:	e0000ef9 	bsr      	0x11022aac	// 11022aac <ulog>
        }

        //genie_crypto_encrypt(plaine_data, encrypt_data);
        ble_ais_notify(msg_id, AIS_OTA_CHECK_RESP, plaine_data, GENIE_CRYPTO_UNIT_SIZE);
11020cbe:	6c17      	mov      	r0, r5
11020cc0:	3310      	movi      	r3, 16
11020cc2:	3126      	movi      	r1, 38
11020cc4:	1a02      	addi      	r2, r14, 8
11020cc6:	e000007b 	bsr      	0x11020dbc	// 11020dbc <ble_ais_notify>

        return true;
11020cca:	3001      	movi      	r0, 1
    }
    else
    {
        return false;
    }
}
11020ccc:	1406      	addi      	r14, r14, 24
11020cce:	1492      	pop      	r4-r5, r15
            LOGE(TAG,"ota failed");
11020cd0:	106a      	lrw      	r3, 0x11011229	// 11020cf8 <ble_ota_check_firmware+0xbc>
11020cd2:	1046      	lrw      	r2, 0x11011234	// 11020ce8 <ble_ota_check_firmware+0xac>
11020cd4:	1026      	lrw      	r1, 0x11011258	// 11020cec <ble_ota_check_firmware+0xb0>
11020cd6:	3003      	movi      	r0, 3
11020cd8:	b860      	st.w      	r3, (r14, 0x0)
11020cda:	33a6      	movi      	r3, 166
11020cdc:	4361      	lsli      	r3, r3, 1
11020cde:	07ee      	br      	0x11020cba	// 11020cba <ble_ota_check_firmware+0x7e>
        return false;
11020ce0:	3000      	movi      	r0, 0
11020ce2:	07f5      	br      	0x11020ccc	// 11020ccc <ble_ota_check_firmware+0x90>
11020ce4:	1fffcbd4 	.long	0x1fffcbd4
11020ce8:	11011234 	.long	0x11011234
11020cec:	11011258 	.long	0x11011258
11020cf0:	11011204 	.long	0x11011204
11020cf4:	1101120e 	.long	0x1101120e
11020cf8:	11011229 	.long	0x11011229

11020cfc <_ais_dis_timer_cb>:
    ble_ais_state_update();
}

static void _ais_dis_timer_cb(void *p_timer, void *args)
{
}
11020cfc:	783c      	jmp      	r15
	...

11020d00 <ble_ais_state_update>:
{
11020d00:	14d0      	push      	r15
    switch (ble_ais_ctx.state) {
11020d02:	1070      	lrw      	r3, 0x1fffb090	// 11020d40 <ble_ais_state_update+0x40>
11020d04:	8300      	ld.b      	r0, (r3, 0x0)
11020d06:	3805      	cmphsi      	r0, 6
11020d08:	0809      	bt      	0x11020d1a	// 11020d1a <ble_ais_state_update+0x1a>
11020d0a:	e0004377 	bsr      	0x110293f8	// 110293f8 <cpu_task_stack_init+0xa50>
11020d0e:	0603      	.short	0x0603
11020d10:	0f0d0607 	.long	0x0f0d0607
            k_timer_stop(&ble_ais_ctx.state_update_timer);
11020d14:	100c      	lrw      	r0, 0x1fffb094	// 11020d44 <ble_ais_state_update+0x44>
11020d16:	e0001042 	bsr      	0x11022d9a	// 11022d9a <k_timer_stop>
}
11020d1a:	1490      	pop      	r15
            k_timer_start(&ble_ais_ctx.state_update_timer, AIS_OTA_AUTH_TIMEOUT);
11020d1c:	ea012710 	movi      	r1, 10000
            k_timer_start(&ble_ais_ctx.state_update_timer, AIS_OTA_REPORT_TIMEOUT);
11020d20:	1009      	lrw      	r0, 0x1fffb094	// 11020d44 <ble_ais_state_update+0x44>
            k_timer_start(&ble_ais_ctx.disconnect_timer, AIS_DISCONNECT_TIMEOUT);
11020d22:	e0001021 	bsr      	0x11022d64	// 11022d64 <k_timer_start>
}
11020d26:	07fa      	br      	0x11020d1a	// 11020d1a <ble_ais_state_update+0x1a>
            k_timer_start(&ble_ais_ctx.state_update_timer, AIS_OTA_REPORT_TIMEOUT);
11020d28:	31a0      	movi      	r1, 160
11020d2a:	07fb      	br      	0x11020d20	// 11020d20 <ble_ais_state_update+0x20>
            k_timer_start(&ble_ais_ctx.state_update_timer, AIS_OTA_REBOOT_TIMEOUT);
11020d2c:	ea010bb8 	movi      	r1, 3000
11020d30:	1005      	lrw      	r0, 0x1fffb094	// 11020d44 <ble_ais_state_update+0x44>
11020d32:	e0001019 	bsr      	0x11022d64	// 11022d64 <k_timer_start>
            k_timer_start(&ble_ais_ctx.disconnect_timer, AIS_DISCONNECT_TIMEOUT);
11020d36:	31fa      	movi      	r1, 250
11020d38:	4122      	lsli      	r1, r1, 2
11020d3a:	1004      	lrw      	r0, 0x1fffb0e8	// 11020d48 <ble_ais_state_update+0x48>
11020d3c:	07f3      	br      	0x11020d22	// 11020d22 <ble_ais_state_update+0x22>
11020d3e:	0000      	bkpt
11020d40:	1fffb090 	.long	0x1fffb090
11020d44:	1fffb094 	.long	0x1fffb094
11020d48:	1fffb0e8 	.long	0x1fffb0e8

11020d4c <state_update_timer_cb>:
{
11020d4c:	14d2      	push      	r4-r5, r15
11020d4e:	1421      	subi      	r14, r14, 4
    switch (ble_ais_ctx.state) {
11020d50:	1096      	lrw      	r4, 0x1fffb090	// 11020da8 <state_update_timer_cb+0x5c>
11020d52:	8400      	ld.b      	r0, (r4, 0x0)
11020d54:	2800      	subi      	r0, 1
11020d56:	3804      	cmphsi      	r0, 5
11020d58:	0808      	bt      	0x11020d68	// 11020d68 <state_update_timer_cb+0x1c>
11020d5a:	e000434f 	bsr      	0x110293f8	// 110293f8 <cpu_task_stack_init+0xa50>
11020d5e:	0903      	.short	0x0903
11020d60:	00210b03 	.long	0x00210b03
            ble_ais_ctx.state = AIS_STATE_DISCON;
11020d64:	3300      	movi      	r3, 0
            ble_ais_ctx.state = AIS_STATE_CONNECT;
11020d66:	a460      	st.b      	r3, (r4, 0x0)
    ble_ais_state_update();
11020d68:	e3ffffcc 	bsr      	0x11020d00	// 11020d00 <ble_ais_state_update>
}
11020d6c:	1401      	addi      	r14, r14, 4
11020d6e:	1492      	pop      	r4-r5, r15
            ble_ais_ctx.state = AIS_STATE_CONNECT;
11020d70:	3301      	movi      	r3, 1
11020d72:	07fa      	br      	0x11020d66	// 11020d66 <state_update_timer_cb+0x1a>
            if (ble_ota_ctx.err_count++ >= OTA_RECV_MAX_ERR_COUNT) {
11020d74:	10ae      	lrw      	r5, 0x1fffcbd4	// 11020dac <state_update_timer_cb+0x60>
11020d76:	8560      	ld.b      	r3, (r5, 0x0)
11020d78:	5b42      	addi      	r2, r3, 1
11020d7a:	3b17      	cmphsi      	r3, 24
11020d7c:	a540      	st.b      	r2, (r5, 0x0)
11020d7e:	0c0e      	bf      	0x11020d9a	// 11020d9a <state_update_timer_cb+0x4e>
                LOGE(TAG, "OTA failed");
11020d80:	106c      	lrw      	r3, 0x1101136e	// 11020db0 <state_update_timer_cb+0x64>
11020d82:	104d      	lrw      	r2, 0x11011346	// 11020db4 <state_update_timer_cb+0x68>
11020d84:	102d      	lrw      	r1, 0x11011366	// 11020db8 <state_update_timer_cb+0x6c>
11020d86:	3003      	movi      	r0, 3
11020d88:	b860      	st.w      	r3, (r14, 0x0)
11020d8a:	33a0      	movi      	r3, 160
11020d8c:	e0000e90 	bsr      	0x11022aac	// 11022aac <ulog>
                ble_ais_ctx.state = AIS_STATE_IDLE;
11020d90:	3303      	movi      	r3, 3
11020d92:	a460      	st.b      	r3, (r4, 0x0)
                ble_ota_ctx.rx_len = 0;
11020d94:	3300      	movi      	r3, 0
11020d96:	ad6c      	st.h      	r3, (r5, 0x18)
11020d98:	07e8      	br      	0x11020d68	// 11020d68 <state_update_timer_cb+0x1c>
                ble_ota_status_report();
11020d9a:	e3fffdb1 	bsr      	0x110208fc	// 110208fc <ble_ota_status_report>
11020d9e:	07e5      	br      	0x11020d68	// 11020d68 <state_update_timer_cb+0x1c>
            dfu_reboot();
11020da0:	e00001e6 	bsr      	0x1102116c	// 1102116c <dfu_reboot>
            break;
11020da4:	07e2      	br      	0x11020d68	// 11020d68 <state_update_timer_cb+0x1c>
11020da6:	0000      	bkpt
11020da8:	1fffb090 	.long	0x1fffb090
11020dac:	1fffcbd4 	.long	0x1fffcbd4
11020db0:	1101136e 	.long	0x1101136e
11020db4:	11011346 	.long	0x11011346
11020db8:	11011366 	.long	0x11011366

11020dbc <ble_ais_notify>:
{
11020dbc:	14d4      	push      	r4-r7, r15
11020dbe:	1426      	subi      	r14, r14, 24
11020dc0:	6d8b      	mov      	r6, r2
11020dc2:	b820      	st.w      	r1, (r14, 0x0)
    memset(&msg, 0, sizeof(msg));
11020dc4:	3214      	movi      	r2, 20
11020dc6:	3100      	movi      	r1, 0
{
11020dc8:	6d43      	mov      	r5, r0
11020dca:	6dcf      	mov      	r7, r3
    fw_upgrade_cmd_status status = {
11020dcc:	750c      	zextb      	r4, r3
    memset(&msg, 0, sizeof(msg));
11020dce:	1801      	addi      	r0, r14, 4
11020dd0:	e3ffe11e 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
    if (ble_ais_ctx.state >= AIS_STATE_IDLE && ble_ais_ctx.state <= AIS_STATE_REBOOT) {
11020dd4:	105c      	lrw      	r2, 0x1fffb090	// 11020e44 <ble_ais_notify+0x88>
11020dd6:	8240      	ld.b      	r2, (r2, 0x0)
11020dd8:	2a02      	subi      	r2, 3
11020dda:	7488      	zextb      	r2, r2
11020ddc:	3a02      	cmphsi      	r2, 3
11020dde:	d84e0004 	ld.b      	r2, (r14, 0x4)
11020de2:	082e      	bt      	0x11020e3e	// 11020e3e <ble_ais_notify+0x82>
        msg.header.enc = 1;
11020de4:	ec420010 	ori      	r2, r2, 16
        msg.header.enc = 0;
11020de8:	dc4e0004 	st.b      	r2, (r14, 0x4)
    msg.header.cmd = cmd;
11020dec:	d86e0000 	ld.b      	r3, (r14, 0x0)
    msg.header.msg_id = msg_id;
11020df0:	e445200f 	andi      	r2, r5, 15
11020df4:	d8ae0004 	ld.b      	r5, (r14, 0x4)
    msg.header.cmd = cmd;
11020df8:	dc6e0005 	st.b      	r3, (r14, 0x5)
    if (p_msg) {
11020dfc:	3e40      	cmpnei      	r6, 0
    msg.header.msg_id = msg_id;
11020dfe:	3300      	movi      	r3, 0
11020e00:	2b0f      	subi      	r3, 16
11020e02:	694c      	and      	r5, r3
11020e04:	6d48      	or      	r5, r2
11020e06:	dcae0004 	st.b      	r5, (r14, 0x4)
    msg.header.payload_len = len;
11020e0a:	dc8e0007 	st.b      	r4, (r14, 0x7)
    if (p_msg) {
11020e0e:	0c06      	bf      	0x11020e1a	// 11020e1a <ble_ais_notify+0x5e>
        memcpy(msg.payload, p_msg, len);
11020e10:	6c9f      	mov      	r2, r7
11020e12:	6c5b      	mov      	r1, r6
11020e14:	1802      	addi      	r0, r14, 8
11020e16:	e00040d5 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
    buffer[0] = status.ops_status;
11020e1a:	10ac      	lrw      	r5, 0x1fffb13c	// 11020e48 <ble_ais_notify+0x8c>
    buffer[1] = status.ops;
11020e1c:	3303      	movi      	r3, 3
    memcpy(buffer + 2, &msg, len + 4);
11020e1e:	5f4e      	addi      	r2, r7, 4
    buffer[1] = status.ops;
11020e20:	a561      	st.b      	r3, (r5, 0x1)
    memcpy(buffer + 2, &msg, len + 4);
11020e22:	1901      	addi      	r1, r14, 4
    buffer[0] = status.ops_status;
11020e24:	a580      	st.b      	r4, (r5, 0x0)
    memcpy(buffer + 2, &msg, len + 4);
11020e26:	5d06      	addi      	r0, r5, 2
11020e28:	e00040cc 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
    HCI_CommandCompleteEvent1(HCI_EXT_H5_SW_UPGRADE, sizeof(fw_upgrade_cmd_status) +  len + 4, buffer);
11020e2c:	5c36      	addi      	r1, r4, 6
11020e2e:	6c97      	mov      	r2, r5
11020e30:	7444      	zextb      	r1, r1
11020e32:	ea00fc20 	movi      	r0, 64544
11020e36:	e0002df5 	bsr      	0x11026a20	// 11026a20 <HCI_CommandCompleteEvent1>
}
11020e3a:	1406      	addi      	r14, r14, 24
11020e3c:	1494      	pop      	r4-r7, r15
        msg.header.enc = 0;
11020e3e:	3a84      	bclri      	r2, 4
11020e40:	07d4      	br      	0x11020de8	// 11020de8 <ble_ais_notify+0x2c>
11020e42:	0000      	bkpt
11020e44:	1fffb090 	.long	0x1fffb090
11020e48:	1fffb13c 	.long	0x1fffb13c

11020e4c <_ble_ais_service_write>:
        }
    }
}

ssize_t _ble_ais_service_write(const void *p_buf, u16_t len)
{
11020e4c:	14d3      	push      	r4-r6, r15
11020e4e:	1426      	subi      	r14, r14, 24
11020e50:	6d03      	mov      	r4, r0
    //LOGD(TAG,"len %d: %s", len, bt_hex(p_buf, len));

    if (len != 0) {
11020e52:	3940      	cmpnei      	r1, 0
{
11020e54:	6d47      	mov      	r5, r1
    if (len != 0) {
11020e56:	0cc3      	bf      	0x11020fdc	// 11020fdc <_ble_ais_service_write+0x190>
    if (p_msg->header.cmd != AIS_OTA_DATA && !_ais_msg_check_header((ais_header_t *)p_msg)) {
11020e58:	8061      	ld.b      	r3, (r0, 0x1)
11020e5a:	eb43002f 	cmpnei      	r3, 47
11020e5e:	0c23      	bf      	0x11020ea4	// 11020ea4 <_ble_ais_service_write+0x58>
    if (p_msg_header->total_frame != 0 || p_msg_header->seq != 0 || p_msg_header->ver != 0 || p_msg_header->seq > p_msg_header->total_frame) {
11020e60:	8062      	ld.b      	r3, (r0, 0x2)
11020e62:	3b40      	cmpnei      	r3, 0
11020e64:	080b      	bt      	0x11020e7a	// 11020e7a <_ble_ais_service_write+0x2e>
11020e66:	8040      	ld.b      	r2, (r0, 0x0)
11020e68:	e44220e0 	andi      	r2, r2, 224
11020e6c:	3a40      	cmpnei      	r2, 0
11020e6e:	0806      	bt      	0x11020e7a	// 11020e7a <_ble_ais_service_write+0x2e>
11020e70:	e443200f 	andi      	r2, r3, 15
11020e74:	4b64      	lsri      	r3, r3, 4
11020e76:	648d      	cmplt      	r3, r2
11020e78:	0c16      	bf      	0x11020ea4	// 11020ea4 <_ble_ais_service_write+0x58>
        LOGE(TAG, "fail %s", bt_hex_real(p_msg_header, sizeof(ais_header_t)));
11020e7a:	3104      	movi      	r1, 4
11020e7c:	6c13      	mov      	r0, r4
11020e7e:	e0000ef9 	bsr      	0x11022c70	// 11022c70 <bt_hex_real>
11020e82:	1279      	lrw      	r3, 0x110112fe	// 11020fe4 <_ble_ais_service_write+0x198>
11020e84:	1259      	lrw      	r2, 0x11011346	// 11020fe8 <_ble_ais_service_write+0x19c>
11020e86:	123a      	lrw      	r1, 0x11011366	// 11020fec <_ble_ais_service_write+0x1a0>
11020e88:	b801      	st.w      	r0, (r14, 0x4)
11020e8a:	b860      	st.w      	r3, (r14, 0x0)
11020e8c:	3003      	movi      	r0, 3
11020e8e:	33dc      	movi      	r3, 220
11020e90:	e0000e0e 	bsr      	0x11022aac	// 11022aac <ulog>
        LOGE(TAG, "invalid msg, ignore");
11020e94:	1277      	lrw      	r3, 0x11011306	// 11020ff0 <_ble_ais_service_write+0x1a4>
11020e96:	1255      	lrw      	r2, 0x11011346	// 11020fe8 <_ble_ais_service_write+0x19c>
11020e98:	1235      	lrw      	r1, 0x11011366	// 11020fec <_ble_ais_service_write+0x1a0>
11020e9a:	3003      	movi      	r0, 3
11020e9c:	b860      	st.w      	r3, (r14, 0x0)
11020e9e:	33ee      	movi      	r3, 238
11020ea0:	e0000e06 	bsr      	0x11022aac	// 11022aac <ulog>
    if (p_msg->header.cmd != AIS_OTA_DATA) {
11020ea4:	8461      	ld.b      	r3, (r4, 0x1)
11020ea6:	eb43002f 	cmpnei      	r3, 47
11020eaa:	0c0a      	bf      	0x11020ebe	// 11020ebe <_ble_ais_service_write+0x72>
        LOGI(TAG, "AIS Cmd:0x%02x", p_msg->header.cmd);
11020eac:	b861      	st.w      	r3, (r14, 0x4)
11020eae:	3006      	movi      	r0, 6
11020eb0:	1271      	lrw      	r3, 0x1101131a	// 11020ff4 <_ble_ais_service_write+0x1a8>
11020eb2:	124e      	lrw      	r2, 0x11011346	// 11020fe8 <_ble_ais_service_write+0x19c>
11020eb4:	122e      	lrw      	r1, 0x11011366	// 11020fec <_ble_ais_service_write+0x1a0>
11020eb6:	b860      	st.w      	r3, (r14, 0x0)
11020eb8:	33f2      	movi      	r3, 242
11020eba:	e0000df9 	bsr      	0x11022aac	// 11022aac <ulog>
    switch (p_msg->header.cmd) {
11020ebe:	8461      	ld.b      	r3, (r4, 0x1)
11020ec0:	eb430020 	cmpnei      	r3, 32
11020ec4:	0c4b      	bf      	0x11020f5a	// 11020f5a <_ble_ais_service_write+0x10e>
11020ec6:	eb030020 	cmphsi      	r3, 33
11020eca:	0814      	bt      	0x11020ef2	// 11020ef2 <_ble_ais_service_write+0xa6>
11020ecc:	3b52      	cmpnei      	r3, 18
11020ece:	0c28      	bf      	0x11020f1e	// 11020f1e <_ble_ais_service_write+0xd2>
11020ed0:	3b54      	cmpnei      	r3, 20
11020ed2:	0c33      	bf      	0x11020f38	// 11020f38 <_ble_ais_service_write+0xec>
11020ed4:	3b50      	cmpnei      	r3, 16
11020ed6:	0879      	bt      	0x11020fc8	// 11020fc8 <_ble_ais_service_write+0x17c>
            if (len == 20 && (ble_ais_ctx.state == AIS_STATE_CONNECT || ble_ais_ctx.state == AIS_STATE_IDLE)) {
11020ed8:	3d54      	cmpnei      	r5, 20
11020eda:	0881      	bt      	0x11020fdc	// 11020fdc <_ble_ais_service_write+0x190>
11020edc:	1247      	lrw      	r2, 0x1fffb090	// 11020ff8 <_ble_ais_service_write+0x1ac>
11020ede:	8260      	ld.b      	r3, (r2, 0x0)
11020ee0:	e46320fd 	andi      	r3, r3, 253
11020ee4:	3b41      	cmpnei      	r3, 1
11020ee6:	087b      	bt      	0x11020fdc	// 11020fdc <_ble_ais_service_write+0x190>
    ble_ais_ctx.state = AIS_STATE_AUTH;
11020ee8:	3302      	movi      	r3, 2
11020eea:	a260      	st.b      	r3, (r2, 0x0)
        ble_ais_state_update();
11020eec:	e3ffff0a 	bsr      	0x11020d00	// 11020d00 <ble_ais_state_update>
11020ef0:	0476      	br      	0x11020fdc	// 11020fdc <_ble_ais_service_write+0x190>
    switch (p_msg->header.cmd) {
11020ef2:	eb430025 	cmpnei      	r3, 37
11020ef6:	0c57      	bf      	0x11020fa4	// 11020fa4 <_ble_ais_service_write+0x158>
11020ef8:	eb43002f 	cmpnei      	r3, 47
11020efc:	0c43      	bf      	0x11020f82	// 11020f82 <_ble_ais_service_write+0x136>
11020efe:	eb430022 	cmpnei      	r3, 34
11020f02:	0863      	bt      	0x11020fc8	// 11020fc8 <_ble_ais_service_write+0x17c>
            if (len == 16 && ble_ais_ctx.state == AIS_STATE_IDLE) {
11020f04:	3d50      	cmpnei      	r5, 16
11020f06:	086b      	bt      	0x11020fdc	// 11020fdc <_ble_ais_service_write+0x190>
11020f08:	117c      	lrw      	r3, 0x1fffb090	// 11020ff8 <_ble_ais_service_write+0x1ac>
11020f0a:	8360      	ld.b      	r3, (r3, 0x0)
11020f0c:	3b43      	cmpnei      	r3, 3
11020f0e:	0867      	bt      	0x11020fdc	// 11020fdc <_ble_ais_service_write+0x190>
                timer_refresh = ble_ota_handle_update_request(p_msg->header.msg_id,
11020f10:	8400      	ld.b      	r0, (r4, 0x0)
11020f12:	e400200f 	andi      	r0, r0, 15
                _ais_decrypt(p_msg->payload, 16);
11020f16:	5c2e      	addi      	r1, r4, 4
                timer_refresh = ble_ota_handle_update_request(p_msg->header.msg_id,
11020f18:	e3fffd50 	bsr      	0x110209b8	// 110209b8 <ble_ota_handle_update_request>
11020f1c:	042e      	br      	0x11020f78	// 11020f78 <_ble_ais_service_write+0x12c>
            if (len == 5 && ble_ais_ctx.state == AIS_STATE_AUTH) {
11020f1e:	3d45      	cmpnei      	r5, 5
11020f20:	085e      	bt      	0x11020fdc	// 11020fdc <_ble_ais_service_write+0x190>
11020f22:	1176      	lrw      	r3, 0x1fffb090	// 11020ff8 <_ble_ais_service_write+0x1ac>
11020f24:	8340      	ld.b      	r2, (r3, 0x0)
11020f26:	3a42      	cmpnei      	r2, 2
11020f28:	085a      	bt      	0x11020fdc	// 11020fdc <_ble_ais_service_write+0x190>
    if (p_scrt_result->result == 1) {
11020f2a:	8444      	ld.b      	r2, (r4, 0x4)
11020f2c:	3a41      	cmpnei      	r2, 1
11020f2e:	0803      	bt      	0x11020f34	// 11020f34 <_ble_ais_service_write+0xe8>
        ble_ais_ctx.state = AIS_STATE_IDLE;
11020f30:	a340      	st.b      	r2, (r3, 0x0)
11020f32:	07dd      	br      	0x11020eec	// 11020eec <_ble_ais_service_write+0xa0>
11020f34:	3203      	movi      	r2, 3
11020f36:	07fd      	br      	0x11020f30	// 11020f30 <_ble_ais_service_write+0xe4>
            if (len == 20 && ble_ais_ctx.state == AIS_STATE_IDLE) {
11020f38:	3d54      	cmpnei      	r5, 20
11020f3a:	0851      	bt      	0x11020fdc	// 11020fdc <_ble_ais_service_write+0x190>
11020f3c:	116f      	lrw      	r3, 0x1fffb090	// 11020ff8 <_ble_ais_service_write+0x1ac>
11020f3e:	8340      	ld.b      	r2, (r3, 0x0)
11020f40:	3a43      	cmpnei      	r2, 3
11020f42:	084d      	bt      	0x11020fdc	// 11020fdc <_ble_ais_service_write+0x190>
    if (p_scrt_result->result == 0) {
11020f44:	8444      	ld.b      	r2, (r4, 0x4)
11020f46:	3a40      	cmpnei      	r2, 0
11020f48:	0803      	bt      	0x11020f4e	// 11020f4e <_ble_ais_service_write+0x102>
        ble_ais_ctx.state = AIS_STATE_CONNECT;
11020f4a:	3201      	movi      	r2, 1
11020f4c:	a340      	st.b      	r2, (r3, 0x0)
    memset(plaine_data, 0x0F, sizeof(plaine_data));
11020f4e:	3210      	movi      	r2, 16
11020f50:	310f      	movi      	r1, 15
11020f52:	1802      	addi      	r0, r14, 8
11020f54:	e3ffe05c 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
11020f58:	07ca      	br      	0x11020eec	// 11020eec <_ble_ais_service_write+0xa0>
            if ((len == 20 && ble_ais_ctx.state == AIS_STATE_IDLE) || len == 5) { //fix me
11020f5a:	3d54      	cmpnei      	r5, 20
11020f5c:	0811      	bt      	0x11020f7e	// 11020f7e <_ble_ais_service_write+0x132>
11020f5e:	1167      	lrw      	r3, 0x1fffb090	// 11020ff8 <_ble_ais_service_write+0x1ac>
11020f60:	8360      	ld.b      	r3, (r3, 0x0)
11020f62:	3b43      	cmpnei      	r3, 3
11020f64:	083c      	bt      	0x11020fdc	// 11020fdc <_ble_ais_service_write+0x190>
                timer_refresh = ble_ota_handle_version_request(p_msg->header.msg_id,
11020f66:	8400      	ld.b      	r0, (r4, 0x0)
11020f68:	e400200f 	andi      	r0, r0, 15
                                (ais_ota_ver_req_t *)p_msg->payload);
11020f6c:	5c2e      	addi      	r1, r4, 4
                timer_refresh = ble_ota_handle_version_request(p_msg->header.msg_id,
11020f6e:	e3fffced 	bsr      	0x11020948	// 11020948 <ble_ota_handle_version_request>
                ble_ais_ctx.state = AIS_STATE_IDLE;
11020f72:	1162      	lrw      	r3, 0x1fffb090	// 11020ff8 <_ble_ais_service_write+0x1ac>
11020f74:	3203      	movi      	r2, 3
11020f76:	a340      	st.b      	r2, (r3, 0x0)
    if (timer_refresh) {
11020f78:	3840      	cmpnei      	r0, 0
11020f7a:	0bb9      	bt      	0x11020eec	// 11020eec <_ble_ais_service_write+0xa0>
11020f7c:	0430      	br      	0x11020fdc	// 11020fdc <_ble_ais_service_write+0x190>
            if ((len == 20 && ble_ais_ctx.state == AIS_STATE_IDLE) || len == 5) { //fix me
11020f7e:	3d45      	cmpnei      	r5, 5
11020f80:	07f2      	br      	0x11020f64	// 11020f64 <_ble_ais_service_write+0x118>
            if (len == sizeof(ais_header_t) + p_msg->header.payload_len && p_msg->header.ver == 0 && ble_ais_ctx.state == AIS_STATE_OTA) {
11020f82:	8463      	ld.b      	r3, (r4, 0x3)
11020f84:	2303      	addi      	r3, 4
11020f86:	64d6      	cmpne      	r5, r3
11020f88:	082a      	bt      	0x11020fdc	// 11020fdc <_ble_ais_service_write+0x190>
11020f8a:	8460      	ld.b      	r3, (r4, 0x0)
11020f8c:	e46320e0 	andi      	r3, r3, 224
11020f90:	3b40      	cmpnei      	r3, 0
11020f92:	0825      	bt      	0x11020fdc	// 11020fdc <_ble_ais_service_write+0x190>
11020f94:	1079      	lrw      	r3, 0x1fffb090	// 11020ff8 <_ble_ais_service_write+0x1ac>
11020f96:	8360      	ld.b      	r3, (r3, 0x0)
11020f98:	3b44      	cmpnei      	r3, 4
11020f9a:	0821      	bt      	0x11020fdc	// 11020fdc <_ble_ais_service_write+0x190>
                timer_refresh = ble_ota_parse_pdu(p_msg);
11020f9c:	6c13      	mov      	r0, r4
11020f9e:	e3fffdb5 	bsr      	0x11020b08	// 11020b08 <ble_ota_parse_pdu>
11020fa2:	07eb      	br      	0x11020f78	// 11020f78 <_ble_ais_service_write+0x12c>
            printf("391 %d %d\r\n", len, ble_ais_ctx.state);
11020fa4:	10d5      	lrw      	r6, 0x1fffb090	// 11020ff8 <_ble_ais_service_write+0x1ac>
11020fa6:	6c57      	mov      	r1, r5
11020fa8:	8640      	ld.b      	r2, (r6, 0x0)
11020faa:	1015      	lrw      	r0, 0x11011329	// 11020ffc <_ble_ais_service_write+0x1b0>
11020fac:	e3ffde86 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
            if (len == 5 && ble_ais_ctx.state == AIS_STATE_OTA) {
11020fb0:	3d45      	cmpnei      	r5, 5
11020fb2:	0815      	bt      	0x11020fdc	// 11020fdc <_ble_ais_service_write+0x190>
11020fb4:	8660      	ld.b      	r3, (r6, 0x0)
11020fb6:	3b44      	cmpnei      	r3, 4
11020fb8:	0812      	bt      	0x11020fdc	// 11020fdc <_ble_ais_service_write+0x190>
                timer_refresh = ble_ota_check_firmware(p_msg->header.msg_id, (ais_ota_check_req_t *)p_msg->payload);
11020fba:	8400      	ld.b      	r0, (r4, 0x0)
11020fbc:	e400200f 	andi      	r0, r0, 15
                _ais_decrypt(p_msg->payload, 16);
11020fc0:	5c2e      	addi      	r1, r4, 4
                timer_refresh = ble_ota_check_firmware(p_msg->header.msg_id, (ais_ota_check_req_t *)p_msg->payload);
11020fc2:	e3fffe3d 	bsr      	0x11020c3c	// 11020c3c <ble_ota_check_firmware>
11020fc6:	07d9      	br      	0x11020f78	// 11020f78 <_ble_ais_service_write+0x12c>
    switch (p_msg->header.cmd) {
11020fc8:	b861      	st.w      	r3, (r14, 0x4)
            LOGW(TAG, "unsupport cmd %x", p_msg->header.cmd);
11020fca:	3004      	movi      	r0, 4
11020fcc:	106d      	lrw      	r3, 0x11011335	// 11021000 <_ble_ais_service_write+0x1b4>
11020fce:	1047      	lrw      	r2, 0x11011346	// 11020fe8 <_ble_ais_service_write+0x19c>
11020fd0:	1027      	lrw      	r1, 0x11011366	// 11020fec <_ble_ais_service_write+0x1a0>
11020fd2:	b860      	st.w      	r3, (r14, 0x0)
11020fd4:	33a2      	movi      	r3, 162
11020fd6:	4361      	lsli      	r3, r3, 1
11020fd8:	e0000d6a 	bsr      	0x11022aac	// 11022aac <ulog>
        _ais_server_msg_handle(NULL, (ais_pdu_t *)p_buf, len);
    }

    return len;
}
11020fdc:	6c17      	mov      	r0, r5
11020fde:	1406      	addi      	r14, r14, 24
11020fe0:	1493      	pop      	r4-r6, r15
11020fe2:	0000      	bkpt
11020fe4:	110112fe 	.long	0x110112fe
11020fe8:	11011346 	.long	0x11011346
11020fec:	11011366 	.long	0x11011366
11020ff0:	11011306 	.long	0x11011306
11020ff4:	1101131a 	.long	0x1101131a
11020ff8:	1fffb090 	.long	0x1fffb090
11020ffc:	11011329 	.long	0x11011329
11021000:	11011335 	.long	0x11011335

11021004 <ble_ais_state_set>:

int ble_ais_state_set(uint8_t state)
{
    ble_ais_ctx.state = state;
11021004:	1062      	lrw      	r3, 0x1fffb090	// 1102100c <ble_ais_state_set+0x8>
11021006:	a300      	st.b      	r0, (r3, 0x0)

    return 0;
}
11021008:	3000      	movi      	r0, 0
1102100a:	783c      	jmp      	r15
1102100c:	1fffb090 	.long	0x1fffb090

11021010 <ble_ais_state_get>:

uint8_t ble_ais_state_get(void)
{
    return ble_ais_ctx.state;
11021010:	1062      	lrw      	r3, 0x1fffb090	// 11021018 <ble_ais_state_get+0x8>
11021012:	8300      	ld.b      	r0, (r3, 0x0)
}
11021014:	783c      	jmp      	r15
11021016:	0000      	bkpt
11021018:	1fffb090 	.long	0x1fffb090

1102101c <ble_ais_server_init>:


int ble_ais_server_init(void)
{
1102101c:	14d1      	push      	r4, r15
    ble_ais_ctx.state = AIS_STATE_CONNECT;
1102101e:	108b      	lrw      	r4, 0x1fffb090	// 11021048 <ble_ais_server_init+0x2c>
11021020:	3301      	movi      	r3, 1
    memset(&ble_ais_ctx, 0, sizeof(ble_ais_ctx));
11021022:	32ac      	movi      	r2, 172
11021024:	3100      	movi      	r1, 0
11021026:	6c13      	mov      	r0, r4
    ble_ais_ctx.state = AIS_STATE_CONNECT;
11021028:	a460      	st.b      	r3, (r4, 0x0)
    memset(&ble_ais_ctx, 0, sizeof(ble_ais_ctx));
1102102a:	e3ffdff1 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>

    k_timer_init(&ble_ais_ctx.state_update_timer, state_update_timer_cb, NULL);
1102102e:	3200      	movi      	r2, 0
11021030:	1027      	lrw      	r1, 0x11020d4c	// 1102104c <ble_ais_server_init+0x30>
11021032:	5c0e      	addi      	r0, r4, 4
11021034:	e0000e78 	bsr      	0x11022d24	// 11022d24 <k_timer_init>
    k_timer_init(&ble_ais_ctx.disconnect_timer, _ais_dis_timer_cb, NULL);
11021038:	3200      	movi      	r2, 0
1102103a:	1026      	lrw      	r1, 0x11020cfc	// 11021050 <ble_ais_server_init+0x34>
1102103c:	e4040057 	addi      	r0, r4, 88
11021040:	e0000e72 	bsr      	0x11022d24	// 11022d24 <k_timer_init>

    return 0;
}
11021044:	3000      	movi      	r0, 0
11021046:	1491      	pop      	r4, r15
11021048:	1fffb090 	.long	0x1fffb090
1102104c:	11020d4c 	.long	0x11020d4c
11021050:	11020cfc 	.long	0x11020cfc

11021054 <ble_version_appver_get>:


extern char *aos_get_app_version(void);

unsigned int ble_version_appver_get(void)
{
11021054:	14d1      	push      	r4, r15
11021056:	1424      	subi      	r14, r14, 16
    unsigned int version = 0;
    int ret = 0;
	char* version_str = aos_get_app_version();
11021058:	e0000864 	bsr      	0x11022120	// 11022120 <aos_get_app_version>
1102105c:	6d03      	mov      	r4, r0
	if(!version_str) {
1102105e:	3840      	cmpnei      	r0, 0
11021060:	0809      	bt      	0x11021072	// 11021072 <ble_version_appver_get+0x1e>
       LOGE(TAG,"get version faild\r\n");
11021062:	1072      	lrw      	r3, 0x110113a6	// 110210a8 <ble_version_appver_get+0x54>
11021064:	1052      	lrw      	r2, 0x11011379	// 110210ac <ble_version_appver_get+0x58>
11021066:	1033      	lrw      	r1, 0x1101139a	// 110210b0 <ble_version_appver_get+0x5c>
11021068:	3003      	movi      	r0, 3
1102106a:	b860      	st.w      	r3, (r14, 0x0)
1102106c:	332b      	movi      	r3, 43
1102106e:	e0000d1f 	bsr      	0x11022aac	// 11022aac <ulog>
    int v1 = 0,v2 = 0,v3 = 0;
11021072:	3300      	movi      	r3, 0
        sscanf(ver_str, "v%d.%d.%d", &v1,&v2, &v3);
11021074:	1a01      	addi      	r2, r14, 4
    int v1 = 0,v2 = 0,v3 = 0;
11021076:	b861      	st.w      	r3, (r14, 0x4)
11021078:	b862      	st.w      	r3, (r14, 0x8)
1102107a:	b863      	st.w      	r3, (r14, 0xc)
    if(*ver_str == 'v') {
1102107c:	8460      	ld.b      	r3, (r4, 0x0)
1102107e:	eb430076 	cmpnei      	r3, 118
        sscanf(ver_str, "v%d.%d.%d", &v1,&v2, &v3);
11021082:	1b03      	addi      	r3, r14, 12
11021084:	b860      	st.w      	r3, (r14, 0x0)
11021086:	1b02      	addi      	r3, r14, 8
    if(*ver_str == 'v') {
11021088:	080e      	bt      	0x110210a4	// 110210a4 <ble_version_appver_get+0x50>
        sscanf(ver_str, "v%d.%d.%d", &v1,&v2, &v3);
1102108a:	102b      	lrw      	r1, 0x110113ba	// 110210b4 <ble_version_appver_get+0x60>
        sscanf(ver_str, "%d.%d.%d", &v1,&v2, &v3);
1102108c:	6c13      	mov      	r0, r4
1102108e:	e3ffded1 	bsr      	0x1101ce30	// 1101ce30 <__GI_sscanf>
    *version = (v1 << 16 ) | (v2 << 8) | (v3);
11021092:	9801      	ld.w      	r0, (r14, 0x4)
11021094:	9862      	ld.w      	r3, (r14, 0x8)
11021096:	4368      	lsli      	r3, r3, 8
11021098:	4010      	lsli      	r0, r0, 16
1102109a:	6c0c      	or      	r0, r3
1102109c:	9863      	ld.w      	r3, (r14, 0xc)
1102109e:	6c0c      	or      	r0, r3
    if(ret < 0) {
        LOGE(TAG,"trans version faild %d\r\n",ret);
        return 0;
    }
    return version;
}
110210a0:	1404      	addi      	r14, r14, 16
110210a2:	1491      	pop      	r4, r15
        sscanf(ver_str, "%d.%d.%d", &v1,&v2, &v3);
110210a4:	1025      	lrw      	r1, 0x110113bb	// 110210b8 <ble_version_appver_get+0x64>
110210a6:	07f3      	br      	0x1102108c	// 1102108c <ble_version_appver_get+0x38>
110210a8:	110113a6 	.long	0x110113a6
110210ac:	11011379 	.long	0x11011379
110210b0:	1101139a 	.long	0x1101139a
110210b4:	110113ba 	.long	0x110113ba
110210b8:	110113bb 	.long	0x110113bb

110210bc <dfu_image_update>:
 * @param[in]  buf          本次写入的具体内容
 *
 * @return 0:success, otherwise is failed
 */
int dfu_image_update(short signature, int offset, int length, int *buf)
{
110210bc:	14d4      	push      	r4-r7, r15
110210be:	1421      	subi      	r14, r14, 4
110210c0:	6d07      	mov      	r4, r1
    partition_info_t *info = NULL;
    uint32_t wr_idx = offset;
    uint8_t *wr_buf = (uint8_t *)buf;


    if (offset == 0) {
110210c2:	3940      	cmpnei      	r1, 0
{
110210c4:	6d4b      	mov      	r5, r2
110210c6:	6dcf      	mov      	r7, r3
110210c8:	10de      	lrw      	r6, 0x1fffb23c	// 11021140 <dfu_image_update+0x84>
    if (offset == 0) {
110210ca:	081b      	bt      	0x11021100	// 11021100 <dfu_image_update+0x44>
        image_crc16 = util_crc16_ccitt(wr_buf, length, NULL);
110210cc:	3200      	movi      	r2, 0
    } else {
        image_crc16 = util_crc16_ccitt(wr_buf, length, &image_crc16);
110210ce:	6c57      	mov      	r1, r5
110210d0:	6c1f      	mov      	r0, r7
110210d2:	e0000107 	bsr      	0x110212e0	// 110212e0 <util_crc16_ccitt>
110210d6:	ae00      	st.h      	r0, (r6, 0x0)
    }

    ///get OTA temporary partition information
    h =    partition_open("misc");
110210d8:	101b      	lrw      	r0, 0x110113f9	// 11021144 <dfu_image_update+0x88>
110210da:	e0000b6f 	bsr      	0x110227b8	// 110227b8 <partition_open>
110210de:	6d83      	mov      	r6, r0
    //printf("num :%d\r\n",h);
    info = partition_info_get(h);
110210e0:	e0000b56 	bsr      	0x1102278c	// 1102278c <partition_info_get>

    if (!info) {
110210e4:	3840      	cmpnei      	r0, 0
110210e6:	080f      	bt      	0x11021104	// 11021104 <dfu_image_update+0x48>
        LOGE(TAG, "get misc partition faild");
110210e8:	1078      	lrw      	r3, 0x11011463	// 11021148 <dfu_image_update+0x8c>
110210ea:	b860      	st.w      	r3, (r14, 0x0)
110210ec:	338b      	movi      	r3, 139
    }

    ret = partition_write(h, wr_idx, wr_buf, length);

    if (ret < 0) {
        LOGE(TAG, "write flash error!!\r\n");
110210ee:	1058      	lrw      	r2, 0x110113fe	// 1102114c <dfu_image_update+0x90>
110210f0:	1038      	lrw      	r1, 0x1101141c	// 11021150 <dfu_image_update+0x94>
110210f2:	3003      	movi      	r0, 3
110210f4:	e0000cdc 	bsr      	0x11022aac	// 11022aac <ulog>
        return -1;
110210f8:	3000      	movi      	r0, 0
110210fa:	2800      	subi      	r0, 1

    LOGD(TAG, "read: %d %d %s\r\n", wr_idx, length, bt_hex(r_buf, 256));
#endif
    partition_close(h);
    return 0;
}
110210fc:	1401      	addi      	r14, r14, 4
110210fe:	1494      	pop      	r4-r7, r15
        image_crc16 = util_crc16_ccitt(wr_buf, length, &image_crc16);
11021100:	6c9b      	mov      	r2, r6
11021102:	07e6      	br      	0x110210ce	// 110210ce <dfu_image_update+0x12>
    wr_idx += (SPIF_SECTOR_SIZE << 1);
11021104:	3180      	movi      	r1, 128
    if (info->length < (offset + length + (SPIF_SECTOR_SIZE << 1))) {
11021106:	3380      	movi      	r3, 128
11021108:	4366      	lsli      	r3, r3, 6
    wr_idx += (SPIF_SECTOR_SIZE << 1);
1102110a:	4126      	lsli      	r1, r1, 6
1102110c:	6050      	addu      	r1, r4
    if (info->length < (offset + length + (SPIF_SECTOR_SIZE << 1))) {
1102110e:	6114      	addu      	r4, r5
11021110:	610c      	addu      	r4, r3
11021112:	9064      	ld.w      	r3, (r0, 0x10)
11021114:	650c      	cmphs      	r3, r4
11021116:	0805      	bt      	0x11021120	// 11021120 <dfu_image_update+0x64>
        LOGE(TAG, "The write range is over OTA temporary!\r\n");
11021118:	106f      	lrw      	r3, 0x1101147c	// 11021154 <dfu_image_update+0x98>
1102111a:	b860      	st.w      	r3, (r14, 0x0)
1102111c:	3393      	movi      	r3, 147
1102111e:	07e8      	br      	0x110210ee	// 110210ee <dfu_image_update+0x32>
    ret = partition_write(h, wr_idx, wr_buf, length);
11021120:	6cd7      	mov      	r3, r5
11021122:	6c9f      	mov      	r2, r7
11021124:	6c1b      	mov      	r0, r6
11021126:	e0000b9d 	bsr      	0x11022860	// 11022860 <partition_write>
    if (ret < 0) {
1102112a:	38df      	btsti      	r0, 31
1102112c:	0c05      	bf      	0x11021136	// 11021136 <dfu_image_update+0x7a>
        LOGE(TAG, "write flash error!!\r\n");
1102112e:	106b      	lrw      	r3, 0x110114a5	// 11021158 <dfu_image_update+0x9c>
11021130:	b860      	st.w      	r3, (r14, 0x0)
11021132:	339a      	movi      	r3, 154
11021134:	07dd      	br      	0x110210ee	// 110210ee <dfu_image_update+0x32>
    partition_close(h);
11021136:	6c1b      	mov      	r0, r6
11021138:	e0000b6e 	bsr      	0x11022814	// 11022814 <partition_close>
    return 0;
1102113c:	3000      	movi      	r0, 0
1102113e:	07df      	br      	0x110210fc	// 110210fc <dfu_image_update+0x40>
11021140:	1fffb23c 	.long	0x1fffb23c
11021144:	110113f9 	.long	0x110113f9
11021148:	11011463 	.long	0x11011463
1102114c:	110113fe 	.long	0x110113fe
11021150:	1101141c 	.long	0x1101141c
11021154:	1101147c 	.long	0x1101147c
11021158:	110114a5 	.long	0x110114a5

1102115c <dfu_check_checksum>:
 *
 * @return 1:success 0:failed
 */
unsigned char dfu_check_checksum(short image_id, unsigned short *crc16_output)
{
    *crc16_output = image_crc16;
1102115c:	1063      	lrw      	r3, 0x1fffb23c	// 11021168 <dfu_check_checksum+0xc>
    return 1;
}
1102115e:	3001      	movi      	r0, 1
    *crc16_output = image_crc16;
11021160:	8b60      	ld.h      	r3, (r3, 0x0)
11021162:	a960      	st.h      	r3, (r1, 0x0)
}
11021164:	783c      	jmp      	r15
11021166:	0000      	bkpt
11021168:	1fffb23c 	.long	0x1fffb23c

1102116c <dfu_reboot>:
 * @param[in]  -
 * @return -
 * @说明: 比如在此函数里面call 切换镜像分区的业务逻辑
 */
void dfu_reboot()
{
1102116c:	14d0      	push      	r15
    drv_reboot();
1102116e:	e000403d 	bsr      	0x110291e8	// 110291e8 <cpu_task_stack_init+0x840>
}
11021172:	1490      	pop      	r15

11021174 <erase_dfu_flash>:
    return 0;
}
#endif

int erase_dfu_flash(void)
{
11021174:	14d2      	push      	r4-r5, r15
11021176:	1432      	subi      	r14, r14, 72
    int ret;
    partition_t h;
    partition_info_t *info = NULL;
    uint32_t offset = (SPIF_SECTOR_SIZE << 1);
    uint8_t cmp_buf[32] = {0xFF};
11021178:	3220      	movi      	r2, 32
1102117a:	3100      	movi      	r1, 0
1102117c:	1802      	addi      	r0, r14, 8
1102117e:	e3ffdf47 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
    uint8_t wr_buf[32] = {0};
11021182:	3220      	movi      	r2, 32
11021184:	3100      	movi      	r1, 0
    uint8_t cmp_buf[32] = {0xFF};
11021186:	3300      	movi      	r3, 0
11021188:	2b00      	subi      	r3, 1
1102118a:	dc6e0008 	st.b      	r3, (r14, 0x8)
    uint8_t wr_buf[32] = {0};
1102118e:	180a      	addi      	r0, r14, 40
11021190:	e3ffdf3e 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
    ///get OTA temporary partition information
    h =    partition_open("misc");
11021194:	110e      	lrw      	r0, 0x110113f9	// 1102124c <erase_dfu_flash+0xd8>
11021196:	e0000b11 	bsr      	0x110227b8	// 110227b8 <partition_open>
1102119a:	6d03      	mov      	r4, r0
    info = partition_info_get(h);
1102119c:	e0000af8 	bsr      	0x1102278c	// 1102278c <partition_info_get>
110211a0:	6d43      	mov      	r5, r0

    if (!info) {
110211a2:	3840      	cmpnei      	r0, 0
110211a4:	080d      	bt      	0x110211be	// 110211be <erase_dfu_flash+0x4a>
        LOGE(TAG, "get misc partition faild");
110211a6:	116b      	lrw      	r3, 0x11011463	// 11021250 <erase_dfu_flash+0xdc>
110211a8:	b860      	st.w      	r3, (r14, 0x0)
110211aa:	33e0      	movi      	r3, 224
    /* For bootloader upgrade, we will reserve two sectors, then save the image */

    uint16_t  block_size = (info->length + info->sector_size - 1) / info->sector_size;

    if (block_size <= 2) {
        LOGE(TAG, "partition should larger than two sectors !!\r\n");
110211ac:	114a      	lrw      	r2, 0x110113fe	// 11021254 <erase_dfu_flash+0xe0>
110211ae:	112b      	lrw      	r1, 0x1101141c	// 11021258 <erase_dfu_flash+0xe4>
110211b0:	3003      	movi      	r0, 3
110211b2:	e0000c7d 	bsr      	0x11022aac	// 11022aac <ulog>

    ret = partition_erase(h, offset, block_size - 2);

    if (ret < 0) {
        LOG("Erase flash error %d!!\r\n", ret);
        return -1;
110211b6:	3000      	movi      	r0, 0
110211b8:	2800      	subi      	r0, 1
    }

    partition_close(h);

    return 0;
}
110211ba:	1412      	addi      	r14, r14, 72
110211bc:	1492      	pop      	r4-r5, r15
    memset(cmp_buf, 0xFF, sizeof(cmp_buf));
110211be:	3220      	movi      	r2, 32
110211c0:	31ff      	movi      	r1, 255
110211c2:	1802      	addi      	r0, r14, 8
110211c4:	e3ffdf24 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
    ret = partition_read(h, offset, (void *)wr_buf, sizeof(wr_buf));
110211c8:	3180      	movi      	r1, 128
110211ca:	3320      	movi      	r3, 32
110211cc:	4126      	lsli      	r1, r1, 6
110211ce:	6c13      	mov      	r0, r4
110211d0:	1a0a      	addi      	r2, r14, 40
110211d2:	e0000b2d 	bsr      	0x1102282c	// 1102282c <partition_read>
    if (ret < 0) {
110211d6:	38df      	btsti      	r0, 31
110211d8:	0c05      	bf      	0x110211e2	// 110211e2 <erase_dfu_flash+0x6e>
        LOGE(TAG, "read flash error!!\r\n");
110211da:	1161      	lrw      	r3, 0x110114bb	// 1102125c <erase_dfu_flash+0xe8>
110211dc:	b860      	st.w      	r3, (r14, 0x0)
110211de:	33e8      	movi      	r3, 232
110211e0:	07e6      	br      	0x110211ac	// 110211ac <erase_dfu_flash+0x38>
    if (memcmp(wr_buf, cmp_buf, sizeof(wr_buf)) == 0) {
110211e2:	3220      	movi      	r2, 32
110211e4:	1902      	addi      	r1, r14, 8
110211e6:	180a      	addi      	r0, r14, 40
110211e8:	e3ffdff6 	bsr      	0x1101d1d4	// 1101d1d4 <__memcmp_fast>
110211ec:	3840      	cmpnei      	r0, 0
110211ee:	0fe6      	bf      	0x110211ba	// 110211ba <erase_dfu_flash+0x46>
    LOG("OTA dirty\n");
110211f0:	107c      	lrw      	r3, 0x110114d4	// 11021260 <erase_dfu_flash+0xec>
110211f2:	1059      	lrw      	r2, 0x110113fe	// 11021254 <erase_dfu_flash+0xe0>
110211f4:	103c      	lrw      	r1, 0x110114d0	// 11021264 <erase_dfu_flash+0xf0>
110211f6:	3001      	movi      	r0, 1
110211f8:	b860      	st.w      	r3, (r14, 0x0)
110211fa:	33f0      	movi      	r3, 240
110211fc:	e0000c58 	bsr      	0x11022aac	// 11022aac <ulog>
    uint16_t  block_size = (info->length + info->sector_size - 1) / info->sector_size;
11021200:	8d2a      	ld.h      	r1, (r5, 0x14)
11021202:	9504      	ld.w      	r0, (r5, 0x10)
11021204:	2800      	subi      	r0, 1
11021206:	6004      	addu      	r0, r1
11021208:	e3ffd3fa 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
    if (block_size <= 2) {
1102120c:	74c1      	zexth      	r3, r0
1102120e:	3b02      	cmphsi      	r3, 3
11021210:	0805      	bt      	0x1102121a	// 1102121a <erase_dfu_flash+0xa6>
        LOGE(TAG, "partition should larger than two sectors !!\r\n");
11021212:	1076      	lrw      	r3, 0x110114df	// 11021268 <erase_dfu_flash+0xf4>
11021214:	b860      	st.w      	r3, (r14, 0x0)
11021216:	33f7      	movi      	r3, 247
11021218:	07ca      	br      	0x110211ac	// 110211ac <erase_dfu_flash+0x38>
    ret = partition_erase(h, offset, block_size - 2);
1102121a:	3180      	movi      	r1, 128
1102121c:	7401      	zexth      	r0, r0
1102121e:	4126      	lsli      	r1, r1, 6
11021220:	5847      	subi      	r2, r0, 2
11021222:	6c13      	mov      	r0, r4
11021224:	e0000b3e 	bsr      	0x110228a0	// 110228a0 <partition_erase>
    if (ret < 0) {
11021228:	38df      	btsti      	r0, 31
1102122a:	0c0b      	bf      	0x11021240	// 11021240 <erase_dfu_flash+0xcc>
        LOG("Erase flash error %d!!\r\n", ret);
1102122c:	1070      	lrw      	r3, 0x1101150d	// 1102126c <erase_dfu_flash+0xf8>
1102122e:	104a      	lrw      	r2, 0x110113fe	// 11021254 <erase_dfu_flash+0xe0>
11021230:	102d      	lrw      	r1, 0x110114d0	// 11021264 <erase_dfu_flash+0xf0>
11021232:	b801      	st.w      	r0, (r14, 0x4)
11021234:	b860      	st.w      	r3, (r14, 0x0)
11021236:	3001      	movi      	r0, 1
11021238:	33fe      	movi      	r3, 254
1102123a:	e0000c39 	bsr      	0x11022aac	// 11022aac <ulog>
1102123e:	07bc      	br      	0x110211b6	// 110211b6 <erase_dfu_flash+0x42>
    partition_close(h);
11021240:	6c13      	mov      	r0, r4
11021242:	e0000ae9 	bsr      	0x11022814	// 11022814 <partition_close>
    return 0;
11021246:	3000      	movi      	r0, 0
11021248:	07b9      	br      	0x110211ba	// 110211ba <erase_dfu_flash+0x46>
1102124a:	0000      	bkpt
1102124c:	110113f9 	.long	0x110113f9
11021250:	11011463 	.long	0x11011463
11021254:	110113fe 	.long	0x110113fe
11021258:	1101141c 	.long	0x1101141c
1102125c:	110114bb 	.long	0x110114bb
11021260:	110114d4 	.long	0x110114d4
11021264:	110114d0 	.long	0x110114d0
11021268:	110114df 	.long	0x110114df
1102126c:	1101150d 	.long	0x1101150d

11021270 <dfu_get_ota_partition_max_size>:

int dfu_get_ota_partition_max_size(void)
{
11021270:	14d0      	push      	r15
11021272:	1423      	subi      	r14, r14, 12
    uint32_t reserve_size = (SPIF_SECTOR_SIZE << 1);
    partition_t h;
    partition_info_t *info = NULL;

    h =    partition_open("misc");
11021274:	1015      	lrw      	r0, 0x110113f9	// 110212c8 <dfu_get_ota_partition_max_size+0x58>
11021276:	e0000aa1 	bsr      	0x110227b8	// 110227b8 <partition_open>
    info = partition_info_get(h);
1102127a:	e0000a89 	bsr      	0x1102278c	// 1102278c <partition_info_get>

    if (!info) {
1102127e:	3840      	cmpnei      	r0, 0
11021280:	080d      	bt      	0x1102129a	// 1102129a <dfu_get_ota_partition_max_size+0x2a>
        LOGE(TAG, "get misc partition faild");
11021282:	1073      	lrw      	r3, 0x11011463	// 110212cc <dfu_get_ota_partition_max_size+0x5c>
11021284:	1053      	lrw      	r2, 0x110113fe	// 110212d0 <dfu_get_ota_partition_max_size+0x60>
11021286:	1034      	lrw      	r1, 0x1101141c	// 110212d4 <dfu_get_ota_partition_max_size+0x64>
11021288:	3003      	movi      	r0, 3
1102128a:	b860      	st.w      	r3, (r14, 0x0)
1102128c:	ea030111 	movi      	r3, 273
11021290:	e0000c0e 	bsr      	0x11022aac	// 11022aac <ulog>

    if (info->length > reserve_size) {
        return info->length - reserve_size;
    } else {
        LOGE(TAG, "misc partion size is %d ,it should be larger than %d", info->length, reserve_size);
        return -1;
11021294:	3000      	movi      	r0, 0
11021296:	2800      	subi      	r0, 1
11021298:	0407      	br      	0x110212a6	// 110212a6 <dfu_get_ota_partition_max_size+0x36>
    if (info->length > reserve_size) {
1102129a:	9004      	ld.w      	r0, (r0, 0x10)
1102129c:	eb002000 	cmphsi      	r0, 8193
110212a0:	0c05      	bf      	0x110212aa	// 110212aa <dfu_get_ota_partition_max_size+0x3a>
        return info->length - reserve_size;
110212a2:	106e      	lrw      	r3, 0xffffe000	// 110212d8 <dfu_get_ota_partition_max_size+0x68>
110212a4:	600c      	addu      	r0, r3
    }

    return 0;
}
110212a6:	1403      	addi      	r14, r14, 12
110212a8:	1490      	pop      	r15
        LOGE(TAG, "misc partion size is %d ,it should be larger than %d", info->length, reserve_size);
110212aa:	3380      	movi      	r3, 128
110212ac:	4366      	lsli      	r3, r3, 6
110212ae:	b862      	st.w      	r3, (r14, 0x8)
110212b0:	b801      	st.w      	r0, (r14, 0x4)
110212b2:	3003      	movi      	r0, 3
110212b4:	106a      	lrw      	r3, 0x110113c4	// 110212dc <dfu_get_ota_partition_max_size+0x6c>
110212b6:	1047      	lrw      	r2, 0x110113fe	// 110212d0 <dfu_get_ota_partition_max_size+0x60>
110212b8:	1027      	lrw      	r1, 0x1101141c	// 110212d4 <dfu_get_ota_partition_max_size+0x64>
110212ba:	b860      	st.w      	r3, (r14, 0x0)
110212bc:	338c      	movi      	r3, 140
110212be:	4361      	lsli      	r3, r3, 1
110212c0:	e0000bf6 	bsr      	0x11022aac	// 11022aac <ulog>
110212c4:	07e8      	br      	0x11021294	// 11021294 <dfu_get_ota_partition_max_size+0x24>
110212c6:	0000      	bkpt
110212c8:	110113f9 	.long	0x110113f9
110212cc:	11011463 	.long	0x11011463
110212d0:	110113fe 	.long	0x110113fe
110212d4:	1101141c 	.long	0x1101141c
110212d8:	ffffe000 	.long	0xffffe000
110212dc:	110113c4 	.long	0x110113c4

110212e0 <util_crc16_ccitt>:

    return crc;
}

uint16_t util_crc16_ccitt(uint8_t const *p_data, uint32_t size, uint16_t const *p_crc)
{
110212e0:	14c4      	push      	r4-r7
    uint16_t crc = (p_crc == NULL) ? 0xFFFF : *p_crc;
110212e2:	3a40      	cmpnei      	r2, 0
110212e4:	0c1a      	bf      	0x11021318	// 11021318 <util_crc16_ccitt+0x38>
110212e6:	8a60      	ld.h      	r3, (r2, 0x0)
        {
            b = ((p_data[i] << j) & 0x80) ^ ((crc & 0x8000) >> 8);
            crc <<= 1;
            if (b != 0)
            {
                crc ^= 0x1021;
110212e8:	ea061021 	movi      	r6, 4129
110212ec:	6040      	addu      	r1, r0
    for (uint32_t i = 0; i < size; i++)
110212ee:	6406      	cmpne      	r1, r0
110212f0:	0c17      	bf      	0x1102131e	// 1102131e <util_crc16_ccitt+0x3e>
            b = ((p_data[i] << j) & 0x80) ^ ((crc & 0x8000) >> 8);
110212f2:	80a0      	ld.b      	r5, (r0, 0x0)
110212f4:	3400      	movi      	r4, 0
110212f6:	53e8      	asri      	r7, r3, 8
110212f8:	c4854022 	lsl      	r2, r5, r4
110212fc:	6c9d      	xor      	r2, r7
110212fe:	748a      	sextb      	r2, r2
            crc <<= 1;
11021300:	4361      	lsli      	r3, r3, 1
11021302:	74cd      	zexth      	r3, r3
                crc ^= 0x1021;
11021304:	6dcf      	mov      	r7, r3
11021306:	3adf      	btsti      	r2, 31
11021308:	6cd9      	xor      	r3, r6
1102130a:	c4670c20 	incf      	r3, r7, 0
1102130e:	2400      	addi      	r4, 1
        for (uint8_t j = 0; j < 8; j++)
11021310:	3c48      	cmpnei      	r4, 8
11021312:	0bf2      	bt      	0x110212f6	// 110212f6 <util_crc16_ccitt+0x16>
11021314:	2000      	addi      	r0, 1
11021316:	07ec      	br      	0x110212ee	// 110212ee <util_crc16_ccitt+0xe>
    uint16_t crc = (p_crc == NULL) ? 0xFFFF : *p_crc;
11021318:	ea03ffff 	movi      	r3, 65535
1102131c:	07e6      	br      	0x110212e8	// 110212e8 <util_crc16_ccitt+0x8>
            }
        }
    }

    return crc;
}
1102131e:	6c0f      	mov      	r0, r3
11021320:	1484      	pop      	r4-r7
	...

11021324 <main>:
extern void hci_uart_loop();
extern int ble_ais_server_init(void);
extern unsigned int ble_version_appver_get(void);

int main(void)
{
11021324:	14d0      	push      	r15
11021326:	1422      	subi      	r14, r14, 8
    board_yoc_init();
11021328:	e0000084 	bsr      	0x11021430	// 11021430 <board_yoc_init>

    LOGI(TAG, "%s", aos_get_app_version());
1102132c:	e00006fa 	bsr      	0x11022120	// 11022120 <aos_get_app_version>
11021330:	106c      	lrw      	r3, 0x11011303	// 11021360 <main+0x3c>
11021332:	104d      	lrw      	r2, 0x11011526	// 11021364 <main+0x40>
11021334:	102d      	lrw      	r1, 0x11011539	// 11021368 <main+0x44>
11021336:	b801      	st.w      	r0, (r14, 0x4)
11021338:	b860      	st.w      	r3, (r14, 0x0)
1102133a:	3006      	movi      	r0, 6
1102133c:	3317      	movi      	r3, 23
1102133e:	e0000bb7 	bsr      	0x11022aac	// 11022aac <ulog>
    LOGI(TAG, "Bluetooth Controller HCI 5.0:H5!");
11021342:	106b      	lrw      	r3, 0x11011544	// 1102136c <main+0x48>
11021344:	1048      	lrw      	r2, 0x11011526	// 11021364 <main+0x40>
11021346:	1029      	lrw      	r1, 0x11011539	// 11021368 <main+0x44>
11021348:	3006      	movi      	r0, 6
1102134a:	b860      	st.w      	r3, (r14, 0x0)
1102134c:	3318      	movi      	r3, 24
1102134e:	e0000baf 	bsr      	0x11022aac	// 11022aac <ulog>

#ifdef  CONFIG_OTA_CLIENT
    erase_dfu_flash();
11021352:	e3ffff11 	bsr      	0x11021174	// 11021174 <erase_dfu_flash>
    ble_ais_server_init();
11021356:	e3fffe63 	bsr      	0x1102101c	// 1102101c <ble_ais_server_init>
#endif

    while (1) {
        hci_uart_loop();
1102135a:	e0003ef3 	bsr      	0x11029140	// 11029140 <cpu_task_stack_init+0x798>
1102135e:	07fe      	br      	0x1102135a	// 1102135a <main+0x36>
11021360:	11011303 	.long	0x11011303
11021364:	11011526 	.long	0x11011526
11021368:	11011539 	.long	0x11011539
1102136c:	11011544 	.long	0x11011544

11021370 <fputstr>:
extern int bt_mesh_adv_scan_schd_init();
extern void HCI_H5_RecvCallback(hci_data_type_t type, uint8_t *data, uint32_t len);
extern void bt_hci_uart_h5_register(int uart_idx, uart_config_t config);

void fputstr(char *strbuf, int len)
{
11021370:	14d0      	push      	r15
    if (console_handle == NULL) {
11021372:	1066      	lrw      	r3, 0x1fffce70	// 11021388 <fputstr+0x18>
{
11021374:	6c87      	mov      	r2, r1
    if (console_handle == NULL) {
11021376:	9360      	ld.w      	r3, (r3, 0x0)
11021378:	3b40      	cmpnei      	r3, 0
1102137a:	0c05      	bf      	0x11021384	// 11021384 <fputstr+0x14>
        return;
    }

    csi_usart_send(console_handle, strbuf, len);
1102137c:	6c43      	mov      	r1, r0
1102137e:	6c0f      	mov      	r0, r3
11021380:	e0001304 	bsr      	0x11023988	// 11023988 <csi_usart_send>
}
11021384:	1490      	pop      	r15
11021386:	0000      	bkpt
11021388:	1fffce70 	.long	0x1fffce70

1102138c <os_critical_enter>:

int os_critical_enter(unsigned int *lock)
{
1102138c:	14d0      	push      	r15
    aos_kernel_sched_suspend();
1102138e:	e0003e7f 	bsr      	0x1102908c	// 1102908c <cpu_task_stack_init+0x6e4>

    return 0;
}
11021392:	3000      	movi      	r0, 0
11021394:	1490      	pop      	r15

11021396 <os_critical_exit>:

int os_critical_exit(unsigned int *lock)
{
11021396:	14d0      	push      	r15
    aos_kernel_sched_resume();
11021398:	e0003d78 	bsr      	0x11028e88	// 11028e88 <cpu_task_stack_init+0x4e0>

    return 0;
}
1102139c:	3000      	movi      	r0, 0
1102139e:	1490      	pop      	r15

110213a0 <hci_board_init>:

void hci_board_init(void)
{
110213a0:	14d1      	push      	r4, r15
110213a2:	1429      	subi      	r14, r14, 36
    const h5_t *h5_ctx;
    drv_pinmux_config(CONSOLE_TXD, CONSOLE_TXD_FUNC);
110213a4:	3104      	movi      	r1, 4
110213a6:	3005      	movi      	r0, 5
    spiflash_csky_register(0);

    uart_config_t uart_config;
    uart_config_default(&uart_config);

    uart_config.baud_rate = 1000000; //only for test
110213a8:	109d      	lrw      	r4, 0xf4240	// 1102141c <hci_board_init+0x7c>
    drv_pinmux_config(CONSOLE_TXD, CONSOLE_TXD_FUNC);
110213aa:	e0000e47 	bsr      	0x11023038	// 11023038 <drv_pinmux_config>
    drv_pinmux_config(HCI_UART_TX, HCI_UART_TX_FUNC);
110213ae:	3108      	movi      	r1, 8
110213b0:	3013      	movi      	r0, 19
110213b2:	e0000e43 	bsr      	0x11023038	// 11023038 <drv_pinmux_config>
    drv_pinmux_config(HCI_UART_RX, HCI_UART_RX_FUNC);
110213b6:	3109      	movi      	r1, 9
110213b8:	3014      	movi      	r0, 20
110213ba:	e0000e3f 	bsr      	0x11023038	// 11023038 <drv_pinmux_config>
    spiflash_csky_register(0);
110213be:	3000      	movi      	r0, 0
110213c0:	e0001e9a 	bsr      	0x110250f4	// 110250f4 <spiflash_csky_register>
    uart_config_default(&uart_config);
110213c4:	1803      	addi      	r0, r14, 12
110213c6:	e0000613 	bsr      	0x11021fec	// 11021fec <uart_config_default>
    bt_hci_uart_h5_register(1, uart_config);
110213ca:	320c      	movi      	r2, 12
110213cc:	6c3b      	mov      	r0, r14
110213ce:	1906      	addi      	r1, r14, 24
    uart_config.baud_rate = 1000000; //only for test
110213d0:	b883      	st.w      	r4, (r14, 0xc)
    bt_hci_uart_h5_register(1, uart_config);
110213d2:	e0003df7 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
110213d6:	9844      	ld.w      	r2, (r14, 0x10)
110213d8:	9865      	ld.w      	r3, (r14, 0x14)
110213da:	9823      	ld.w      	r1, (r14, 0xc)
110213dc:	3001      	movi      	r0, 1
110213de:	e000358d 	bsr      	0x11027ef8	// 11027ef8 <bt_hci_uart_h5_register>

    console_handle = csi_usart_initialize(0, NULL);
110213e2:	3100      	movi      	r1, 0
110213e4:	3000      	movi      	r0, 0
110213e6:	e000124b 	bsr      	0x1102387c	// 1102387c <csi_usart_initialize>
110213ea:	106e      	lrw      	r3, 0x1fffce70	// 11021420 <hci_board_init+0x80>
    csi_usart_config(console_handle, 1000000, USART_MODE_ASYNCHRONOUS, USART_PARITY_NONE, USART_STOP_BITS_1, USART_DATA_BITS_8);
110213ec:	6c53      	mov      	r1, r4
    console_handle = csi_usart_initialize(0, NULL);
110213ee:	b300      	st.w      	r0, (r3, 0x0)
    csi_usart_config(console_handle, 1000000, USART_MODE_ASYNCHRONOUS, USART_PARITY_NONE, USART_STOP_BITS_1, USART_DATA_BITS_8);
110213f0:	3303      	movi      	r3, 3
110213f2:	3200      	movi      	r2, 0
110213f4:	b861      	st.w      	r3, (r14, 0x4)
110213f6:	3300      	movi      	r3, 0
110213f8:	b860      	st.w      	r3, (r14, 0x0)
110213fa:	e0001299 	bsr      	0x1102392c	// 1102392c <csi_usart_config>
    print_current_out_set(fputstr);
110213fe:	104a      	lrw      	r2, 0x11021370	// 11021424 <hci_board_init+0x84>
11021400:	106a      	lrw      	r3, 0x1fffb294	// 11021428 <hci_board_init+0x88>
11021402:	b340      	st.w      	r2, (r3, 0x0)

    // open h5 driver
    h5_ctx = get_h5_controller_interface();
11021404:	e00026a6 	bsr      	0x11026150	// 11026150 <get_h5_controller_interface>
    h5_ctx->h5_int_init(HCI_H5_RecvCallback);
11021408:	9060      	ld.w      	r3, (r0, 0x0)
1102140a:	1009      	lrw      	r0, 0x11026b38	// 1102142c <hci_board_init+0x8c>
1102140c:	7bcd      	jsr      	r3

    bt_mesh_adv_scan_schd_init();
1102140e:	e00030a5 	bsr      	0x11027558	// 11027558 <bt_mesh_adv_scan_schd_init>

    /* USE CONFIG_WDT=1 to enable wdt */
    extern void wdt_init(void);
    wdt_init();
11021412:	e0003e19 	bsr      	0x11029044	// 11029044 <cpu_task_stack_init+0x69c>
}
11021416:	1409      	addi      	r14, r14, 36
11021418:	1491      	pop      	r4, r15
1102141a:	0000      	bkpt
1102141c:	000f4240 	.long	0x000f4240
11021420:	1fffce70 	.long	0x1fffce70
11021424:	11021370 	.long	0x11021370
11021428:	1fffb294 	.long	0x1fffb294
1102142c:	11026b38 	.long	0x11026b38

11021430 <board_yoc_init>:

void board_yoc_init()
{
11021430:	14d0      	push      	r15
11021432:	1425      	subi      	r14, r14, 20
    int ret;

    unsigned char factory_test = phy_gpio_read(P11);
11021434:	3007      	movi      	r0, 7
11021436:	e0000d33 	bsr      	0x11022e9c	// 11022e9c <phy_gpio_read>

    if (factory_test == 1) {
1102143a:	3840      	cmpnei      	r0, 0
1102143c:	0c42      	bf      	0x110214c0	// 110214c0 <board_yoc_init+0x90>
        aos_msleep(20);
1102143e:	3014      	movi      	r0, 20
11021440:	e00002ad 	bsr      	0x1102199a	// 1102199a <aos_msleep>
        factory_test = phy_gpio_read(P11);
11021444:	3007      	movi      	r0, 7
11021446:	e0000d2b 	bsr      	0x11022e9c	// 11022e9c <phy_gpio_read>
        if (factory_test == 1) {
1102144a:	3840      	cmpnei      	r0, 0
1102144c:	0c3a      	bf      	0x110214c0	// 110214c0 <board_yoc_init+0x90>
            /* Enable PA func */
            phy_gpio_pin_init(GPIO_P07, GPIO_OUTPUT_1);
1102144e:	3101      	movi      	r1, 1
11021450:	3004      	movi      	r0, 4
11021452:	e0000d65 	bsr      	0x11022f1c	// 11022f1c <phy_gpio_pin_init>
            phy_gpio_pin_init(GPIO_P33, GPIO_OUTPUT_1);
11021456:	3101      	movi      	r1, 1
11021458:	3015      	movi      	r0, 21
1102145a:	e0000d61 	bsr      	0x11022f1c	// 11022f1c <phy_gpio_pin_init>
            phy_gpio_fmux_set(GPIO_P07, FMUX_RF_TX_EN);
1102145e:	3107      	movi      	r1, 7
11021460:	3004      	movi      	r0, 4
11021462:	e0000d3f 	bsr      	0x11022ee0	// 11022ee0 <phy_gpio_fmux_set>
            phy_gpio_fmux_set(GPIO_P33, FMUX_RF_RX_EN);
11021466:	3106      	movi      	r1, 6
11021468:	3015      	movi      	r0, 21
1102146a:	e0000d3b 	bsr      	0x11022ee0	// 11022ee0 <phy_gpio_fmux_set>
            4. dut service init
            5. register ble default cmds
            6. register user command if need
            7. call dut_task_entry
            */
            dut_service_cfg_t dut_cfg = {
1102146e:	3300      	movi      	r3, 0
                0,
                115200
            };
            /* pinmux first here */
            drv_pinmux_config(P9, FMUX_UART0_TX);
11021470:	3104      	movi      	r1, 4
            dut_service_cfg_t dut_cfg = {
11021472:	b863      	st.w      	r3, (r14, 0xc)
            drv_pinmux_config(P9, FMUX_UART0_TX);
11021474:	3005      	movi      	r0, 5
            dut_service_cfg_t dut_cfg = {
11021476:	33e1      	movi      	r3, 225
11021478:	4369      	lsli      	r3, r3, 9
1102147a:	b864      	st.w      	r3, (r14, 0x10)
            drv_pinmux_config(P9, FMUX_UART0_TX);
1102147c:	e0000dde 	bsr      	0x11023038	// 11023038 <drv_pinmux_config>
            drv_pinmux_config(P10, FMUX_UART0_RX);
11021480:	3105      	movi      	r1, 5
11021482:	3006      	movi      	r0, 6
11021484:	e0000dda 	bsr      	0x11023038	// 11023038 <drv_pinmux_config>
            /* Dut service init for uart */
            ret = dut_service_init(&dut_cfg);
11021488:	1803      	addi      	r0, r14, 12
1102148a:	e0001b77 	bsr      	0x11024b78	// 11024b78 <dut_service_init>
            if (ret != 0) {
1102148e:	3840      	cmpnei      	r0, 0
11021490:	0c0c      	bf      	0x110214a8	// 110214a8 <board_yoc_init+0x78>
                LOGE(TAG, "DUT SRV init err");
11021492:	107b      	lrw      	r3, 0x1fffa53c	// 110214fc <board_yoc_init+0xcc>
11021494:	9320      	ld.w      	r1, (r3, 0x0)
11021496:	107b      	lrw      	r3, 0x11011579	// 11021500 <board_yoc_init+0xd0>
11021498:	b860      	st.w      	r3, (r14, 0x0)
1102149a:	3381      	movi      	r3, 129
                return -1;
            }
            /* Register ble default cmds */
            ret = dut_ble_default_cmds_reg();
            if (ret != 0) {
                LOGE(TAG, "ble default cmds reg err");
1102149c:	105a      	lrw      	r2, 0x11011565	// 11021504 <board_yoc_init+0xd4>
1102149e:	3003      	movi      	r0, 3
110214a0:	e0000b06 	bsr      	0x11022aac	// 11022aac <ulog>

    ulog_init();
    aos_set_log_level(AOS_LL_DEBUG);

    LOGI(TAG, "Build:%s,%s", __DATE__, __TIME__);
}
110214a4:	1405      	addi      	r14, r14, 20
110214a6:	1490      	pop      	r15
            ret = dut_ble_default_cmds_reg();
110214a8:	e00017c0 	bsr      	0x11024428	// 11024428 <dut_ble_default_cmds_reg>
            if (ret != 0) {
110214ac:	3840      	cmpnei      	r0, 0
110214ae:	0c07      	bf      	0x110214bc	// 110214bc <board_yoc_init+0x8c>
                LOGE(TAG, "ble default cmds reg err");
110214b0:	1073      	lrw      	r3, 0x1fffa53c	// 110214fc <board_yoc_init+0xcc>
110214b2:	9320      	ld.w      	r1, (r3, 0x0)
110214b4:	1075      	lrw      	r3, 0x1101158a	// 11021508 <board_yoc_init+0xd8>
110214b6:	b860      	st.w      	r3, (r14, 0x0)
110214b8:	3387      	movi      	r3, 135
110214ba:	07f1      	br      	0x1102149c	// 1102149c <board_yoc_init+0x6c>
            dut_task_entry();
110214bc:	e0001b22 	bsr      	0x11024b00	// 11024b00 <dut_task_entry>
    hci_board_init();
110214c0:	e3ffff70 	bsr      	0x110213a0	// 110213a0 <hci_board_init>
    ret = partition_init();
110214c4:	e00008c8 	bsr      	0x11022654	// 11022654 <partition_init>
    if (ret < 0) {
110214c8:	38df      	btsti      	r0, 31
110214ca:	0c05      	bf      	0x110214d4	// 110214d4 <board_yoc_init+0xa4>
        printf("parition init faild\r\n");
110214cc:	1010      	lrw      	r0, 0x110115a3	// 1102150c <board_yoc_init+0xdc>
110214ce:	e3ffdbf5 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
        return;
110214d2:	07e9      	br      	0x110214a4	// 110214a4 <board_yoc_init+0x74>
    ulog_init();
110214d4:	e0000b62 	bsr      	0x11022b98	// 11022b98 <ulog_init>
    aos_set_log_level(AOS_LL_DEBUG);
110214d8:	3007      	movi      	r0, 7
110214da:	e0000b4b 	bsr      	0x11022b70	// 11022b70 <aos_set_log_level>
    LOGI(TAG, "Build:%s,%s", __DATE__, __TIME__);
110214de:	1068      	lrw      	r3, 0x1fffa53c	// 110214fc <board_yoc_init+0xcc>
110214e0:	1049      	lrw      	r2, 0x11011565	// 11021504 <board_yoc_init+0xd4>
110214e2:	3006      	movi      	r0, 6
110214e4:	9320      	ld.w      	r1, (r3, 0x0)
110214e6:	106b      	lrw      	r3, 0x110115b9	// 11021510 <board_yoc_init+0xe0>
110214e8:	b862      	st.w      	r3, (r14, 0x8)
110214ea:	106b      	lrw      	r3, 0x110115c2	// 11021514 <board_yoc_init+0xe4>
110214ec:	b861      	st.w      	r3, (r14, 0x4)
110214ee:	106b      	lrw      	r3, 0x110115ce	// 11021518 <board_yoc_init+0xe8>
110214f0:	b860      	st.w      	r3, (r14, 0x0)
110214f2:	339b      	movi      	r3, 155
110214f4:	e0000adc 	bsr      	0x11022aac	// 11022aac <ulog>
110214f8:	07d6      	br      	0x110214a4	// 110214a4 <board_yoc_init+0x74>
110214fa:	0000      	bkpt
110214fc:	1fffa53c 	.long	0x1fffa53c
11021500:	11011579 	.long	0x11011579
11021504:	11011565 	.long	0x11011565
11021508:	1101158a 	.long	0x1101158a
1102150c:	110115a3 	.long	0x110115a3
11021510:	110115b9 	.long	0x110115b9
11021514:	110115c2 	.long	0x110115c2
11021518:	110115ce 	.long	0x110115ce

1102151c <rhino2stderrno>:
    switch (ret) {
1102151c:	eb400132 	cmpnei      	r0, 306
11021520:	0c53      	bf      	0x110215c6	// 110215c6 <rhino2stderrno+0xaa>
11021522:	eb200132 	cmplti      	r0, 307
11021526:	0c38      	bf      	0x11021596	// 11021596 <rhino2stderrno+0x7a>
11021528:	eb200065 	cmplti      	r0, 102
1102152c:	0c19      	bf      	0x1102155e	// 1102155e <rhino2stderrno+0x42>
1102152e:	eb200063 	cmplti      	r0, 100
11021532:	0c4a      	bf      	0x110215c6	// 110215c6 <rhino2stderrno+0xaa>
11021534:	3846      	cmpnei      	r0, 6
11021536:	0c23      	bf      	0x1102157c	// 1102157c <rhino2stderrno+0x60>
11021538:	3826      	cmplti      	r0, 7
1102153a:	0c09      	bf      	0x1102154c	// 1102154c <rhino2stderrno+0x30>
1102153c:	3842      	cmpnei      	r0, 2
1102153e:	0c1f      	bf      	0x1102157c	// 1102157c <rhino2stderrno+0x60>
11021540:	3845      	cmpnei      	r0, 5
11021542:	0c42      	bf      	0x110215c6	// 110215c6 <rhino2stderrno+0xaa>
11021544:	3840      	cmpnei      	r0, 0
11021546:	0809      	bt      	0x11021558	// 11021558 <rhino2stderrno+0x3c>
        return 0;
11021548:	3000      	movi      	r0, 0
1102154a:	041b      	br      	0x11021580	// 11021580 <rhino2stderrno+0x64>
    switch (ret) {
1102154c:	3849      	cmpnei      	r0, 9
1102154e:	0c05      	bf      	0x11021558	// 11021558 <rhino2stderrno+0x3c>
11021550:	3828      	cmplti      	r0, 9
11021552:	083a      	bt      	0x110215c6	// 110215c6 <rhino2stderrno+0xaa>
11021554:	384b      	cmpnei      	r0, 11
11021556:	0c56      	bf      	0x11021602	// 11021602 <rhino2stderrno+0xe6>
        return -1;
11021558:	3000      	movi      	r0, 0
1102155a:	2800      	subi      	r0, 1
1102155c:	0412      	br      	0x11021580	// 11021580 <rhino2stderrno+0x64>
    switch (ret) {
1102155e:	eb4000cb 	cmpnei      	r0, 203
11021562:	0c32      	bf      	0x110215c6	// 110215c6 <rhino2stderrno+0xaa>
11021564:	eb2000cb 	cmplti      	r0, 204
11021568:	0c0d      	bf      	0x11021582	// 11021582 <rhino2stderrno+0x66>
1102156a:	eb400069 	cmpnei      	r0, 105
1102156e:	0c47      	bf      	0x110215fc	// 110215fc <rhino2stderrno+0xe0>
11021570:	eb200069 	cmplti      	r0, 106
11021574:	0ff2      	bf      	0x11021558	// 11021558 <rhino2stderrno+0x3c>
11021576:	eb400066 	cmpnei      	r0, 102
1102157a:	0bef      	bt      	0x11021558	// 11021558 <rhino2stderrno+0x3c>
        return -EFAULT;
1102157c:	3000      	movi      	r0, 0
1102157e:	280d      	subi      	r0, 14
}
11021580:	783c      	jmp      	r15
    switch (ret) {
11021582:	eb20012f 	cmplti      	r0, 304
11021586:	0fe9      	bf      	0x11021558	// 11021558 <rhino2stderrno+0x3c>
11021588:	eb20012c 	cmplti      	r0, 301
1102158c:	0fe6      	bf      	0x11021558	// 11021558 <rhino2stderrno+0x3c>
1102158e:	eb40012c 	cmpnei      	r0, 300
11021592:	0c1a      	bf      	0x110215c6	// 110215c6 <rhino2stderrno+0xaa>
11021594:	07e2      	br      	0x11021558	// 11021558 <rhino2stderrno+0x3c>
11021596:	eb400320 	cmpnei      	r0, 800
1102159a:	0c16      	bf      	0x110215c6	// 110215c6 <rhino2stderrno+0xaa>
1102159c:	eb200320 	cmplti      	r0, 801
110215a0:	0c16      	bf      	0x110215cc	// 110215cc <rhino2stderrno+0xb0>
110215a2:	eb2002bd 	cmplti      	r0, 702
110215a6:	0c0a      	bf      	0x110215ba	// 110215ba <rhino2stderrno+0x9e>
110215a8:	eb2002bb 	cmplti      	r0, 700
110215ac:	0c0d      	bf      	0x110215c6	// 110215c6 <rhino2stderrno+0xaa>
110215ae:	eb400192 	cmpnei      	r0, 402
110215b2:	0bd3      	bt      	0x11021558	// 11021558 <rhino2stderrno+0x3c>
        return -ETIMEDOUT ;
110215b4:	3000      	movi      	r0, 0
110215b6:	286d      	subi      	r0, 110
110215b8:	07e4      	br      	0x11021580	// 11021580 <rhino2stderrno+0x64>
    switch (ret) {
110215ba:	eb4002be 	cmpnei      	r0, 702
110215be:	0fcd      	bf      	0x11021558	// 11021558 <rhino2stderrno+0x3c>
110215c0:	eb2002c1 	cmplti      	r0, 706
110215c4:	0fca      	bf      	0x11021558	// 11021558 <rhino2stderrno+0x3c>
        return -EINVAL;
110215c6:	3000      	movi      	r0, 0
110215c8:	2815      	subi      	r0, 22
110215ca:	07db      	br      	0x11021580	// 11021580 <rhino2stderrno+0x64>
    switch (ret) {
110215cc:	eb4003e9 	cmpnei      	r0, 1001
110215d0:	0c19      	bf      	0x11021602	// 11021602 <rhino2stderrno+0xe6>
110215d2:	eb2003e9 	cmplti      	r0, 1002
110215d6:	0c0a      	bf      	0x110215ea	// 110215ea <rhino2stderrno+0xce>
110215d8:	eb400384 	cmpnei      	r0, 900
110215dc:	0fbe      	bf      	0x11021558	// 11021558 <rhino2stderrno+0x3c>
110215de:	eb200384 	cmplti      	r0, 901
110215e2:	0bbb      	bt      	0x11021558	// 11021558 <rhino2stderrno+0x3c>
110215e4:	eb400385 	cmpnei      	r0, 901
110215e8:	07af      	br      	0x11021546	// 11021546 <rhino2stderrno+0x2a>
110215ea:	eb40044f 	cmpnei      	r0, 1103
110215ee:	0c0a      	bf      	0x11021602	// 11021602 <rhino2stderrno+0xe6>
110215f0:	eb20044f 	cmplti      	r0, 1104
110215f4:	0fb2      	bf      	0x11021558	// 11021558 <rhino2stderrno+0x3c>
110215f6:	eb20044b 	cmplti      	r0, 1100
110215fa:	07cc      	br      	0x11021592	// 11021592 <rhino2stderrno+0x76>
        return -ENOMEM;
110215fc:	3000      	movi      	r0, 0
110215fe:	280b      	subi      	r0, 12
11021600:	07c0      	br      	0x11021580	// 11021580 <rhino2stderrno+0x64>
        return -EAGAIN;
11021602:	3000      	movi      	r0, 0
11021604:	280a      	subi      	r0, 11
11021606:	07bd      	br      	0x11021580	// 11021580 <rhino2stderrno+0x64>

11021608 <trap_c_cb>:
{
11021608:	14d0      	push      	r15
1102160a:	1421      	subi      	r14, r14, 4
    aos_except_process(EPERM, NULL, 0, NULL, NULL);
1102160c:	3300      	movi      	r3, 0
1102160e:	3200      	movi      	r2, 0
11021610:	b860      	st.w      	r3, (r14, 0x0)
11021612:	3100      	movi      	r1, 0
11021614:	3001      	movi      	r0, 1
11021616:	e000052b 	bsr      	0x1102206c	// 1102206c <aos_except_process>
}
1102161a:	1401      	addi      	r14, r14, 4
1102161c:	1490      	pop      	r15
	...

11021620 <aos_task_new_ext>:
{
11021620:	14d4      	push      	r4-r7, r15
11021622:	1425      	subi      	r14, r14, 20
11021624:	6d4f      	mov      	r5, r3
    aos_check_return_einval(task && fn && (stack_size >= AOS_MIN_STACK_SIZE) &&
11021626:	3840      	cmpnei      	r0, 0
11021628:	6d3f      	mov      	r4, r15
{
1102162a:	98ca      	ld.w      	r6, (r14, 0x28)
1102162c:	986b      	ld.w      	r3, (r14, 0x2c)
    aos_check_return_einval(task && fn && (stack_size >= AOS_MIN_STACK_SIZE) &&
1102162e:	0c08      	bf      	0x1102163e	// 1102163e <aos_task_new_ext+0x1e>
11021630:	3a40      	cmpnei      	r2, 0
11021632:	0c06      	bf      	0x1102163e	// 1102163e <aos_task_new_ext+0x1e>
11021634:	eb26003f 	cmplti      	r6, 64
11021638:	0803      	bt      	0x1102163e	// 1102163e <aos_task_new_ext+0x1e>
1102163a:	3b0d      	cmphsi      	r3, 14
1102163c:	0c0d      	bf      	0x11021656	// 11021656 <aos_task_new_ext+0x36>
1102163e:	106f      	lrw      	r3, 0x1fffdad8	// 11021678 <aos_task_new_ext+0x58>
11021640:	3200      	movi      	r2, 0
11021642:	9300      	ld.w      	r0, (r3, 0x0)
11021644:	3100      	movi      	r1, 0
11021646:	b880      	st.w      	r4, (r14, 0x0)
11021648:	3300      	movi      	r3, 0
1102164a:	e0000511 	bsr      	0x1102206c	// 1102206c <aos_except_process>
1102164e:	3000      	movi      	r0, 0
11021650:	2815      	subi      	r0, 22
}
11021652:	1405      	addi      	r14, r14, 20
11021654:	1494      	pop      	r4-r7, r15
    ret = (int)krhino_task_dyn_create((ktask_t **)(&(task->hdl)), name, arg, prio, 0,
11021656:	4ec2      	lsri      	r6, r6, 2
11021658:	3401      	movi      	r4, 1
1102165a:	b8c2      	st.w      	r6, (r14, 0x8)
1102165c:	3700      	movi      	r7, 0
1102165e:	3600      	movi      	r6, 0
11021660:	74cc      	zextb      	r3, r3
11021662:	b843      	st.w      	r2, (r14, 0xc)
11021664:	b884      	st.w      	r4, (r14, 0x10)
11021666:	6c97      	mov      	r2, r5
11021668:	b8c0      	st.w      	r6, (r14, 0x0)
1102166a:	b8e1      	st.w      	r7, (r14, 0x4)
1102166c:	e0003736 	bsr      	0x110284d8	// 110284d8 <krhino_task_dyn_create>
    return rhino2stderrno(ret);
11021670:	e3ffff56 	bsr      	0x1102151c	// 1102151c <rhino2stderrno>
11021674:	07ef      	br      	0x11021652	// 11021652 <aos_task_new_ext+0x32>
11021676:	0000      	bkpt
11021678:	1fffdad8 	.long	0x1fffdad8

1102167c <aos_task_exit>:
{
1102167c:	14d0      	push      	r15
    krhino_task_dyn_del(NULL);
1102167e:	3000      	movi      	r0, 0
11021680:	e00038b8 	bsr      	0x110287f0	// 110287f0 <krhino_task_dyn_del>
}
11021684:	1490      	pop      	r15
	...

11021688 <aos_mutex_lock>:
{
11021688:	14d1      	push      	r4, r15
1102168a:	1421      	subi      	r14, r14, 4
1102168c:	6cff      	mov      	r3, r15
    aos_check_return_einval(mutex && mutex->hdl);
1102168e:	3840      	cmpnei      	r0, 0
11021690:	0c04      	bf      	0x11021698	// 11021698 <aos_mutex_lock+0x10>
11021692:	9080      	ld.w      	r4, (r0, 0x0)
11021694:	3c40      	cmpnei      	r4, 0
11021696:	080d      	bt      	0x110216b0	// 110216b0 <aos_mutex_lock+0x28>
11021698:	1051      	lrw      	r2, 0x1fffdad8	// 110216dc <aos_mutex_lock+0x54>
1102169a:	3100      	movi      	r1, 0
1102169c:	9200      	ld.w      	r0, (r2, 0x0)
1102169e:	b860      	st.w      	r3, (r14, 0x0)
110216a0:	3200      	movi      	r2, 0
110216a2:	3300      	movi      	r3, 0
110216a4:	e00004e4 	bsr      	0x1102206c	// 1102206c <aos_except_process>
110216a8:	3000      	movi      	r0, 0
110216aa:	2815      	subi      	r0, 22
}
110216ac:	1401      	addi      	r14, r14, 4
110216ae:	1491      	pop      	r4, r15
    if (timeout == AOS_WAIT_FOREVER) {
110216b0:	3300      	movi      	r3, 0
110216b2:	2b00      	subi      	r3, 1
110216b4:	64c6      	cmpne      	r1, r3
110216b6:	080b      	bt      	0x110216cc	// 110216cc <aos_mutex_lock+0x44>
        ret = krhino_mutex_lock(mutex->hdl, RHINO_WAIT_FOREVER);
110216b8:	3100      	movi      	r1, 0
110216ba:	3200      	movi      	r2, 0
110216bc:	2900      	subi      	r1, 1
110216be:	2a00      	subi      	r2, 1
        ret = krhino_mutex_lock(mutex->hdl, MS2TICK(timeout));
110216c0:	6c13      	mov      	r0, r4
110216c2:	e0003ba7 	bsr      	0x11028e10	// 11028e10 <cpu_task_stack_init+0x468>
    return rhino2stderrno(ret);
110216c6:	e3ffff2b 	bsr      	0x1102151c	// 1102151c <rhino2stderrno>
110216ca:	07f1      	br      	0x110216ac	// 110216ac <aos_mutex_lock+0x24>
        ret = krhino_mutex_lock(mutex->hdl, MS2TICK(timeout));
110216cc:	6c07      	mov      	r0, r1
110216ce:	3100      	movi      	r1, 0
110216d0:	e0003960 	bsr      	0x11028990	// 11028990 <krhino_ms_to_ticks>
110216d4:	6c87      	mov      	r2, r1
110216d6:	6c43      	mov      	r1, r0
110216d8:	07f4      	br      	0x110216c0	// 110216c0 <aos_mutex_lock+0x38>
110216da:	0000      	bkpt
110216dc:	1fffdad8 	.long	0x1fffdad8

110216e0 <aos_mutex_unlock>:
{
110216e0:	14d0      	push      	r15
110216e2:	1421      	subi      	r14, r14, 4
110216e4:	6cff      	mov      	r3, r15
    aos_check_return_einval(mutex && mutex->hdl);
110216e6:	3840      	cmpnei      	r0, 0
110216e8:	0c04      	bf      	0x110216f0	// 110216f0 <aos_mutex_unlock+0x10>
110216ea:	9000      	ld.w      	r0, (r0, 0x0)
110216ec:	3840      	cmpnei      	r0, 0
110216ee:	080d      	bt      	0x11021708	// 11021708 <aos_mutex_unlock+0x28>
110216f0:	1049      	lrw      	r2, 0x1fffdad8	// 11021714 <aos_mutex_unlock+0x34>
110216f2:	3100      	movi      	r1, 0
110216f4:	9200      	ld.w      	r0, (r2, 0x0)
110216f6:	b860      	st.w      	r3, (r14, 0x0)
110216f8:	3200      	movi      	r2, 0
110216fa:	3300      	movi      	r3, 0
110216fc:	e00004b8 	bsr      	0x1102206c	// 1102206c <aos_except_process>
11021700:	3000      	movi      	r0, 0
11021702:	2815      	subi      	r0, 22
}
11021704:	1401      	addi      	r14, r14, 4
11021706:	1490      	pop      	r15
    ret = krhino_mutex_unlock(mutex->hdl);
11021708:	e0003cbc 	bsr      	0x11029080	// 11029080 <cpu_task_stack_init+0x6d8>
    return rhino2stderrno(ret);
1102170c:	e3ffff08 	bsr      	0x1102151c	// 1102151c <rhino2stderrno>
11021710:	07fa      	br      	0x11021704	// 11021704 <aos_mutex_unlock+0x24>
11021712:	0000      	bkpt
11021714:	1fffdad8 	.long	0x1fffdad8

11021718 <aos_mutex_is_valid>:
    if (mutex == NULL) {
11021718:	3840      	cmpnei      	r0, 0
1102171a:	0c08      	bf      	0x1102172a	// 1102172a <aos_mutex_is_valid+0x12>
    k_mutex = mutex->hdl;
1102171c:	9060      	ld.w      	r3, (r0, 0x0)
    if (k_mutex == NULL) {
1102171e:	3b40      	cmpnei      	r3, 0
11021720:	0c05      	bf      	0x1102172a	// 1102172a <aos_mutex_is_valid+0x12>
    if (k_mutex->blk_obj.obj_type != RHINO_MUTEX_OBJ_TYPE) {
11021722:	9364      	ld.w      	r3, (r3, 0x10)
11021724:	3b42      	cmpnei      	r3, 2
11021726:	6403      	mvcv      	r0
}
11021728:	783c      	jmp      	r15
        return 0;
1102172a:	3000      	movi      	r0, 0
1102172c:	07fe      	br      	0x11021728	// 11021728 <aos_mutex_is_valid+0x10>
	...

11021730 <aos_sem_wait>:
{
11021730:	14d1      	push      	r4, r15
11021732:	1421      	subi      	r14, r14, 4
11021734:	6cff      	mov      	r3, r15
    aos_check_return_einval(sem && sem->hdl);
11021736:	3840      	cmpnei      	r0, 0
11021738:	0c04      	bf      	0x11021740	// 11021740 <aos_sem_wait+0x10>
1102173a:	9080      	ld.w      	r4, (r0, 0x0)
1102173c:	3c40      	cmpnei      	r4, 0
1102173e:	080d      	bt      	0x11021758	// 11021758 <aos_sem_wait+0x28>
11021740:	1051      	lrw      	r2, 0x1fffdad8	// 11021784 <aos_sem_wait+0x54>
11021742:	3100      	movi      	r1, 0
11021744:	9200      	ld.w      	r0, (r2, 0x0)
11021746:	b860      	st.w      	r3, (r14, 0x0)
11021748:	3200      	movi      	r2, 0
1102174a:	3300      	movi      	r3, 0
1102174c:	e0000490 	bsr      	0x1102206c	// 1102206c <aos_except_process>
11021750:	3000      	movi      	r0, 0
11021752:	2815      	subi      	r0, 22
}
11021754:	1401      	addi      	r14, r14, 4
11021756:	1491      	pop      	r4, r15
    if (timeout == AOS_WAIT_FOREVER) {
11021758:	3300      	movi      	r3, 0
1102175a:	2b00      	subi      	r3, 1
1102175c:	64c6      	cmpne      	r1, r3
1102175e:	080b      	bt      	0x11021774	// 11021774 <aos_sem_wait+0x44>
        ret = krhino_sem_take(sem->hdl, RHINO_WAIT_FOREVER);
11021760:	3100      	movi      	r1, 0
11021762:	3200      	movi      	r2, 0
11021764:	2900      	subi      	r1, 1
11021766:	2a00      	subi      	r2, 1
        ret = krhino_sem_take(sem->hdl, MS2TICK(timeout));
11021768:	6c13      	mov      	r0, r4
1102176a:	e0003521 	bsr      	0x110281ac	// 110281ac <krhino_sem_take>
    return rhino2stderrno(ret);
1102176e:	e3fffed7 	bsr      	0x1102151c	// 1102151c <rhino2stderrno>
11021772:	07f1      	br      	0x11021754	// 11021754 <aos_sem_wait+0x24>
        ret = krhino_sem_take(sem->hdl, MS2TICK(timeout));
11021774:	6c07      	mov      	r0, r1
11021776:	3100      	movi      	r1, 0
11021778:	e000390c 	bsr      	0x11028990	// 11028990 <krhino_ms_to_ticks>
1102177c:	6c87      	mov      	r2, r1
1102177e:	6c43      	mov      	r1, r0
11021780:	07f4      	br      	0x11021768	// 11021768 <aos_sem_wait+0x38>
11021782:	0000      	bkpt
11021784:	1fffdad8 	.long	0x1fffdad8

11021788 <aos_sem_signal>:
{
11021788:	14d0      	push      	r15
1102178a:	1421      	subi      	r14, r14, 4
1102178c:	6cff      	mov      	r3, r15
    aos_check_return(sem && sem->hdl);
1102178e:	3840      	cmpnei      	r0, 0
11021790:	0c04      	bf      	0x11021798	// 11021798 <aos_sem_signal+0x10>
11021792:	9000      	ld.w      	r0, (r0, 0x0)
11021794:	3840      	cmpnei      	r0, 0
11021796:	080b      	bt      	0x110217ac	// 110217ac <aos_sem_signal+0x24>
11021798:	1047      	lrw      	r2, 0x1fffdad8	// 110217b4 <aos_sem_signal+0x2c>
1102179a:	3100      	movi      	r1, 0
1102179c:	9200      	ld.w      	r0, (r2, 0x0)
1102179e:	b860      	st.w      	r3, (r14, 0x0)
110217a0:	3200      	movi      	r2, 0
110217a2:	3300      	movi      	r3, 0
110217a4:	e0000464 	bsr      	0x1102206c	// 1102206c <aos_except_process>
}
110217a8:	1401      	addi      	r14, r14, 4
110217aa:	1490      	pop      	r15
    krhino_sem_give(sem->hdl);
110217ac:	e0003d5a 	bsr      	0x11029260	// 11029260 <cpu_task_stack_init+0x8b8>
110217b0:	07fc      	br      	0x110217a8	// 110217a8 <aos_sem_signal+0x20>
110217b2:	0000      	bkpt
110217b4:	1fffdad8 	.long	0x1fffdad8

110217b8 <aos_timer_new_ext>:
{
110217b8:	14d4      	push      	r4-r7, r15
110217ba:	1428      	subi      	r14, r14, 32
110217bc:	6d87      	mov      	r6, r1
    aos_check_return_einval(timer && fn);
110217be:	3840      	cmpnei      	r0, 0
{
110217c0:	d82e0038 	ld.b      	r1, (r14, 0x38)
110217c4:	6dff      	mov      	r7, r15
110217c6:	6d43      	mov      	r5, r0
110217c8:	988d      	ld.w      	r4, (r14, 0x34)
110217ca:	b825      	st.w      	r1, (r14, 0x14)
    aos_check_return_einval(timer && fn);
110217cc:	0c03      	bf      	0x110217d2	// 110217d2 <aos_timer_new_ext+0x1a>
110217ce:	3e40      	cmpnei      	r6, 0
110217d0:	080d      	bt      	0x110217ea	// 110217ea <aos_timer_new_ext+0x32>
110217d2:	1076      	lrw      	r3, 0x1fffdad8	// 11021828 <aos_timer_new_ext+0x70>
110217d4:	3200      	movi      	r2, 0
110217d6:	9300      	ld.w      	r0, (r3, 0x0)
110217d8:	3100      	movi      	r1, 0
110217da:	b8e0      	st.w      	r7, (r14, 0x0)
110217dc:	3300      	movi      	r3, 0
110217de:	e0000447 	bsr      	0x1102206c	// 1102206c <aos_except_process>
110217e2:	3000      	movi      	r0, 0
110217e4:	2815      	subi      	r0, 22
}
110217e6:	1408      	addi      	r14, r14, 32
110217e8:	1494      	pop      	r4-r7, r15
    kstat_t ret = krhino_timer_dyn_create(((ktimer_t **)(&timer->hdl)), "AOS", (timer_cb_t)fn, MS2TICK(ms), MS2TICK(round), arg, auto_run);
110217ea:	533f      	asri      	r1, r3, 31
110217ec:	6c0f      	mov      	r0, r3
    sys_time_t round = repeat == 0 ? 0 : ms;
110217ee:	3c40      	cmpnei      	r4, 0
110217f0:	c4830c40 	inct      	r4, r3, 0
110217f4:	b847      	st.w      	r2, (r14, 0x1c)
    kstat_t ret = krhino_timer_dyn_create(((ktimer_t **)(&timer->hdl)), "AOS", (timer_cb_t)fn, MS2TICK(ms), MS2TICK(round), arg, auto_run);
110217f6:	e00038cd 	bsr      	0x11028990	// 11028990 <krhino_ms_to_ticks>
110217fa:	6dc3      	mov      	r7, r0
110217fc:	b826      	st.w      	r1, (r14, 0x18)
110217fe:	6c13      	mov      	r0, r4
11021800:	543f      	asri      	r1, r4, 31
11021802:	e00038c7 	bsr      	0x11028990	// 11028990 <krhino_ms_to_ticks>
11021806:	9865      	ld.w      	r3, (r14, 0x14)
11021808:	9847      	ld.w      	r2, (r14, 0x1c)
1102180a:	b864      	st.w      	r3, (r14, 0x10)
1102180c:	9866      	ld.w      	r3, (r14, 0x18)
1102180e:	b801      	st.w      	r0, (r14, 0x4)
11021810:	b822      	st.w      	r1, (r14, 0x8)
11021812:	b843      	st.w      	r2, (r14, 0xc)
11021814:	b860      	st.w      	r3, (r14, 0x0)
11021816:	6c9b      	mov      	r2, r6
11021818:	6cdf      	mov      	r3, r7
1102181a:	1025      	lrw      	r1, 0x110114d0	// 1102182c <aos_timer_new_ext+0x74>
1102181c:	6c17      	mov      	r0, r5
1102181e:	e0003d15 	bsr      	0x11029248	// 11029248 <cpu_task_stack_init+0x8a0>
    return rhino2stderrno(ret);
11021822:	e3fffe7d 	bsr      	0x1102151c	// 1102151c <rhino2stderrno>
11021826:	07e0      	br      	0x110217e6	// 110217e6 <aos_timer_new_ext+0x2e>
11021828:	1fffdad8 	.long	0x1fffdad8
1102182c:	110114d0 	.long	0x110114d0

11021830 <aos_timer_free>:
{
11021830:	14d1      	push      	r4, r15
11021832:	1421      	subi      	r14, r14, 4
11021834:	6cff      	mov      	r3, r15
    aos_check_return(timer && timer->hdl);
11021836:	3840      	cmpnei      	r0, 0
{
11021838:	6d03      	mov      	r4, r0
    aos_check_return(timer && timer->hdl);
1102183a:	0c04      	bf      	0x11021842	// 11021842 <aos_timer_free+0x12>
1102183c:	9000      	ld.w      	r0, (r0, 0x0)
1102183e:	3840      	cmpnei      	r0, 0
11021840:	080b      	bt      	0x11021856	// 11021856 <aos_timer_free+0x26>
11021842:	1048      	lrw      	r2, 0x1fffdad8	// 11021860 <aos_timer_free+0x30>
11021844:	3100      	movi      	r1, 0
11021846:	9200      	ld.w      	r0, (r2, 0x0)
11021848:	b860      	st.w      	r3, (r14, 0x0)
1102184a:	3200      	movi      	r2, 0
1102184c:	3300      	movi      	r3, 0
1102184e:	e000040f 	bsr      	0x1102206c	// 1102206c <aos_except_process>
}
11021852:	1401      	addi      	r14, r14, 4
11021854:	1491      	pop      	r4, r15
    krhino_timer_dyn_del(timer->hdl);
11021856:	e0003a35 	bsr      	0x11028cc0	// 11028cc0 <cpu_task_stack_init+0x318>
    timer->hdl = NULL;
1102185a:	3300      	movi      	r3, 0
1102185c:	b460      	st.w      	r3, (r4, 0x0)
1102185e:	07fa      	br      	0x11021852	// 11021852 <aos_timer_free+0x22>
11021860:	1fffdad8 	.long	0x1fffdad8

11021864 <aos_timer_start>:
{
11021864:	14d0      	push      	r15
11021866:	1421      	subi      	r14, r14, 4
11021868:	6cff      	mov      	r3, r15
    aos_check_return_einval(timer && timer->hdl);
1102186a:	3840      	cmpnei      	r0, 0
1102186c:	0c04      	bf      	0x11021874	// 11021874 <aos_timer_start+0x10>
1102186e:	9000      	ld.w      	r0, (r0, 0x0)
11021870:	3840      	cmpnei      	r0, 0
11021872:	080d      	bt      	0x1102188c	// 1102188c <aos_timer_start+0x28>
11021874:	1049      	lrw      	r2, 0x1fffdad8	// 11021898 <aos_timer_start+0x34>
11021876:	3100      	movi      	r1, 0
11021878:	9200      	ld.w      	r0, (r2, 0x0)
1102187a:	b860      	st.w      	r3, (r14, 0x0)
1102187c:	3200      	movi      	r2, 0
1102187e:	3300      	movi      	r3, 0
11021880:	e00003f6 	bsr      	0x1102206c	// 1102206c <aos_except_process>
11021884:	3000      	movi      	r0, 0
11021886:	2815      	subi      	r0, 22
}
11021888:	1401      	addi      	r14, r14, 4
1102188a:	1490      	pop      	r15
    ret = krhino_timer_start(timer->hdl);
1102188c:	e00039f0 	bsr      	0x11028c6c	// 11028c6c <cpu_task_stack_init+0x2c4>
    return rhino2stderrno(ret);
11021890:	e3fffe46 	bsr      	0x1102151c	// 1102151c <rhino2stderrno>
11021894:	07fa      	br      	0x11021888	// 11021888 <aos_timer_start+0x24>
11021896:	0000      	bkpt
11021898:	1fffdad8 	.long	0x1fffdad8

1102189c <aos_timer_stop>:
{
1102189c:	14d0      	push      	r15
1102189e:	1421      	subi      	r14, r14, 4
110218a0:	6cff      	mov      	r3, r15
    aos_check_return_einval(timer && timer->hdl);
110218a2:	3840      	cmpnei      	r0, 0
110218a4:	0c04      	bf      	0x110218ac	// 110218ac <aos_timer_stop+0x10>
110218a6:	9000      	ld.w      	r0, (r0, 0x0)
110218a8:	3840      	cmpnei      	r0, 0
110218aa:	080d      	bt      	0x110218c4	// 110218c4 <aos_timer_stop+0x28>
110218ac:	1049      	lrw      	r2, 0x1fffdad8	// 110218d0 <aos_timer_stop+0x34>
110218ae:	3100      	movi      	r1, 0
110218b0:	9200      	ld.w      	r0, (r2, 0x0)
110218b2:	b860      	st.w      	r3, (r14, 0x0)
110218b4:	3200      	movi      	r2, 0
110218b6:	3300      	movi      	r3, 0
110218b8:	e00003da 	bsr      	0x1102206c	// 1102206c <aos_except_process>
110218bc:	3000      	movi      	r0, 0
110218be:	2815      	subi      	r0, 22
}
110218c0:	1401      	addi      	r14, r14, 4
110218c2:	1490      	pop      	r15
    ret = krhino_timer_stop(timer->hdl);
110218c4:	e0003aee 	bsr      	0x11028ea0	// 11028ea0 <cpu_task_stack_init+0x4f8>
    return rhino2stderrno(ret);
110218c8:	e3fffe2a 	bsr      	0x1102151c	// 1102151c <rhino2stderrno>
110218cc:	07fa      	br      	0x110218c0	// 110218c0 <aos_timer_stop+0x24>
110218ce:	0000      	bkpt
110218d0:	1fffdad8 	.long	0x1fffdad8

110218d4 <aos_timer_change>:
{
110218d4:	14d4      	push      	r4-r7, r15
110218d6:	1422      	subi      	r14, r14, 8
110218d8:	6cff      	mov      	r3, r15
    aos_check_return_einval(timer && timer->hdl);
110218da:	3840      	cmpnei      	r0, 0
{
110218dc:	6d07      	mov      	r4, r1
    aos_check_return_einval(timer && timer->hdl);
110218de:	0c04      	bf      	0x110218e6	// 110218e6 <aos_timer_change+0x12>
110218e0:	90a0      	ld.w      	r5, (r0, 0x0)
110218e2:	3d40      	cmpnei      	r5, 0
110218e4:	080d      	bt      	0x110218fe	// 110218fe <aos_timer_change+0x2a>
110218e6:	1052      	lrw      	r2, 0x1fffdad8	// 1102192c <aos_timer_change+0x58>
110218e8:	3100      	movi      	r1, 0
110218ea:	9200      	ld.w      	r0, (r2, 0x0)
110218ec:	b860      	st.w      	r3, (r14, 0x0)
110218ee:	3200      	movi      	r2, 0
110218f0:	3300      	movi      	r3, 0
110218f2:	e00003bd 	bsr      	0x1102206c	// 1102206c <aos_except_process>
110218f6:	3000      	movi      	r0, 0
110218f8:	2815      	subi      	r0, 22
}
110218fa:	1402      	addi      	r14, r14, 8
110218fc:	1494      	pop      	r4-r7, r15
    ret = krhino_timer_change(timer->hdl, MS2TICK(ms), MS2TICK(ms));
110218fe:	517f      	asri      	r3, r1, 31
11021900:	6c07      	mov      	r0, r1
11021902:	6c4f      	mov      	r1, r3
11021904:	b861      	st.w      	r3, (r14, 0x4)
11021906:	e0003845 	bsr      	0x11028990	// 11028990 <krhino_ms_to_ticks>
1102190a:	9861      	ld.w      	r3, (r14, 0x4)
1102190c:	6d83      	mov      	r6, r0
1102190e:	6dc7      	mov      	r7, r1
11021910:	6c13      	mov      	r0, r4
11021912:	6c4f      	mov      	r1, r3
11021914:	e000383e 	bsr      	0x11028990	// 11028990 <krhino_ms_to_ticks>
11021918:	6cc3      	mov      	r3, r0
1102191a:	b820      	st.w      	r1, (r14, 0x0)
1102191c:	6c17      	mov      	r0, r5
1102191e:	6c5b      	mov      	r1, r6
11021920:	6c9f      	mov      	r2, r7
11021922:	e0003a0b 	bsr      	0x11028d38	// 11028d38 <cpu_task_stack_init+0x390>
    return rhino2stderrno(ret);
11021926:	e3fffdfb 	bsr      	0x1102151c	// 1102151c <rhino2stderrno>
1102192a:	07e8      	br      	0x110218fa	// 110218fa <aos_timer_change+0x26>
1102192c:	1fffdad8 	.long	0x1fffdad8

11021930 <aos_timer_change_once>:
{
11021930:	14d1      	push      	r4, r15
11021932:	1421      	subi      	r14, r14, 4
11021934:	6cbf      	mov      	r2, r15
    aos_check_return_einval(timer && timer->hdl);
11021936:	3840      	cmpnei      	r0, 0
{
11021938:	6cc7      	mov      	r3, r1
    aos_check_return_einval(timer && timer->hdl);
1102193a:	0c04      	bf      	0x11021942	// 11021942 <aos_timer_change_once+0x12>
1102193c:	9080      	ld.w      	r4, (r0, 0x0)
1102193e:	3c40      	cmpnei      	r4, 0
11021940:	080d      	bt      	0x1102195a	// 1102195a <aos_timer_change_once+0x2a>
11021942:	106e      	lrw      	r3, 0x1fffdad8	// 11021978 <aos_timer_change_once+0x48>
11021944:	3100      	movi      	r1, 0
11021946:	9300      	ld.w      	r0, (r3, 0x0)
11021948:	b840      	st.w      	r2, (r14, 0x0)
1102194a:	3300      	movi      	r3, 0
1102194c:	3200      	movi      	r2, 0
1102194e:	e000038f 	bsr      	0x1102206c	// 1102206c <aos_except_process>
11021952:	3000      	movi      	r0, 0
11021954:	2815      	subi      	r0, 22
}
11021956:	1401      	addi      	r14, r14, 4
11021958:	1491      	pop      	r4, r15
    ret = krhino_timer_change(timer->hdl, MS2TICK(ms), 0);
1102195a:	6c0f      	mov      	r0, r3
1102195c:	513f      	asri      	r1, r1, 31
1102195e:	e0003819 	bsr      	0x11028990	// 11028990 <krhino_ms_to_ticks>
11021962:	3300      	movi      	r3, 0
11021964:	6c87      	mov      	r2, r1
11021966:	6c43      	mov      	r1, r0
11021968:	b860      	st.w      	r3, (r14, 0x0)
1102196a:	6c13      	mov      	r0, r4
1102196c:	e00039e6 	bsr      	0x11028d38	// 11028d38 <cpu_task_stack_init+0x390>
    return rhino2stderrno(ret);
11021970:	e3fffdd6 	bsr      	0x1102151c	// 1102151c <rhino2stderrno>
11021974:	07f1      	br      	0x11021956	// 11021956 <aos_timer_change_once+0x26>
11021976:	0000      	bkpt
11021978:	1fffdad8 	.long	0x1fffdad8

1102197c <aos_timer_is_valid>:
    if (timer == NULL) {
1102197c:	3840      	cmpnei      	r0, 0
1102197e:	0c08      	bf      	0x1102198e	// 1102198e <aos_timer_is_valid+0x12>
    k_timer = timer->hdl;
11021980:	9060      	ld.w      	r3, (r0, 0x0)
    if (k_timer == NULL) {
11021982:	3b40      	cmpnei      	r3, 0
11021984:	0c05      	bf      	0x1102198e	// 1102198e <aos_timer_is_valid+0x12>
    if (k_timer->obj_type != RHINO_TIMER_OBJ_TYPE) {
11021986:	936f      	ld.w      	r3, (r3, 0x3c)
11021988:	3b45      	cmpnei      	r3, 5
1102198a:	6403      	mvcv      	r0
}
1102198c:	783c      	jmp      	r15
        return 0;
1102198e:	3000      	movi      	r0, 0
11021990:	07fe      	br      	0x1102198c	// 1102198c <aos_timer_is_valid+0x10>

11021992 <aos_now_ms>:
{
11021992:	14d0      	push      	r15
    return krhino_sys_time_get();
11021994:	e00037f0 	bsr      	0x11028974	// 11028974 <krhino_sys_time_get>
}
11021998:	1490      	pop      	r15

1102199a <aos_msleep>:
{
1102199a:	14d0      	push      	r15
    krhino_task_sleep(MS2TICK(ms));
1102199c:	503f      	asri      	r1, r0, 31
1102199e:	e00037f9 	bsr      	0x11028990	// 11028990 <krhino_ms_to_ticks>
110219a2:	e00035f5 	bsr      	0x1102858c	// 1102858c <krhino_task_sleep>
}
110219a6:	1490      	pop      	r15

110219a8 <aos_init>:
{
110219a8:	14d0      	push      	r15
    krhino_init();
110219aa:	e0003469 	bsr      	0x1102827c	// 1102827c <krhino_init>
    trap_c_callback = trap_c_cb;
110219ae:	1063      	lrw      	r3, 0x1fffcef8	// 110219b8 <aos_init+0x10>
110219b0:	1043      	lrw      	r2, 0x11021608	// 110219bc <aos_init+0x14>
110219b2:	b340      	st.w      	r2, (r3, 0x0)
}
110219b4:	1490      	pop      	r15
110219b6:	0000      	bkpt
110219b8:	1fffcef8 	.long	0x1fffcef8
110219bc:	11021608 	.long	0x11021608

110219c0 <aos_start>:
{
110219c0:	14d0      	push      	r15
    krhino_start();
110219c2:	e000349d 	bsr      	0x110282fc	// 110282fc <krhino_start>
}
110219c6:	1490      	pop      	r15

110219c8 <yoc_malloc>:
}

#else

void *yoc_malloc(int32_t size, void *caller)
{
110219c8:	14d1      	push      	r4, r15
110219ca:	6d03      	mov      	r4, r0
    aos_kernel_sched_suspend();
110219cc:	e0003b60 	bsr      	0x1102908c	// 1102908c <cpu_task_stack_init+0x6e4>
    void *ret = krhino_mm_alloc(size);
110219d0:	6c13      	mov      	r0, r4
110219d2:	e0003923 	bsr      	0x11028c18	// 11028c18 <cpu_task_stack_init+0x270>
110219d6:	6d03      	mov      	r4, r0
    aos_alloc_trace(ret, (uint32_t)caller);
    aos_kernel_sched_resume();
110219d8:	e0003a58 	bsr      	0x11028e88	// 11028e88 <cpu_task_stack_init+0x4e0>

    return ret;
}
110219dc:	6c13      	mov      	r0, r4
110219de:	1491      	pop      	r4, r15

110219e0 <yoc_free>:

    return ptr;
}

void yoc_free(void *ptr, void *caller)
{
110219e0:	14d1      	push      	r4, r15
110219e2:	6d03      	mov      	r4, r0
    aos_kernel_sched_suspend();
110219e4:	e0003b54 	bsr      	0x1102908c	// 1102908c <cpu_task_stack_init+0x6e4>
    krhino_mm_free(ptr);
110219e8:	6c13      	mov      	r0, r4
110219ea:	e0003c05 	bsr      	0x110291f4	// 110291f4 <cpu_task_stack_init+0x84c>
    aos_kernel_sched_resume();
110219ee:	e0003a4d 	bsr      	0x11028e88	// 11028e88 <cpu_task_stack_init+0x4e0>
}
110219f2:	1491      	pop      	r4, r15

110219f4 <aos_zalloc>:
}

#endif // defined(CONFIG_DEBUG) && defined(CONFIG_DEBUG_MM)

void *aos_zalloc(unsigned int size)
{
110219f4:	14d2      	push      	r4-r5, r15
    void *ptr = yoc_malloc(size, __builtin_return_address(0));
110219f6:	6c7f      	mov      	r1, r15
{
110219f8:	6d43      	mov      	r5, r0
    void *ptr = yoc_malloc(size, __builtin_return_address(0));
110219fa:	e3ffffe7 	bsr      	0x110219c8	// 110219c8 <yoc_malloc>
110219fe:	6d03      	mov      	r4, r0

    if (ptr)
11021a00:	3840      	cmpnei      	r0, 0
11021a02:	0c05      	bf      	0x11021a0c	// 11021a0c <aos_zalloc+0x18>
        memset(ptr, 0, size);
11021a04:	6c97      	mov      	r2, r5
11021a06:	3100      	movi      	r1, 0
11021a08:	e3ffdb02 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>

    return ptr;
}
11021a0c:	6c13      	mov      	r0, r4
11021a0e:	1492      	pop      	r4-r5, r15

11021a10 <aos_malloc>:

void *aos_malloc(unsigned int size)
{
11021a10:	14d0      	push      	r15
    return yoc_malloc(size, __builtin_return_address(0));
11021a12:	6c7f      	mov      	r1, r15
11021a14:	e3ffffda 	bsr      	0x110219c8	// 110219c8 <yoc_malloc>
}
11021a18:	1490      	pop      	r15

11021a1a <aos_free>:
    krhino_owner_attach(addr, allocator);
#endif
}

void aos_free(void *ptr)
{
11021a1a:	14d0      	push      	r15
    if (ptr)
11021a1c:	3840      	cmpnei      	r0, 0
11021a1e:	0c04      	bf      	0x11021a26	// 11021a26 <aos_free+0xc>
        yoc_free(ptr, __builtin_return_address(0));
11021a20:	6c7f      	mov      	r1, r15
11021a22:	e3ffffdf 	bsr      	0x110219e0	// 110219e0 <yoc_free>
}
11021a26:	1490      	pop      	r15

11021a28 <aos_mutex_new>:
{
11021a28:	14d2      	push      	r4-r5, r15
11021a2a:	1421      	subi      	r14, r14, 4
11021a2c:	6d03      	mov      	r4, r0
    aos_check_return_einval(mutex);
11021a2e:	3840      	cmpnei      	r0, 0
11021a30:	080e      	bt      	0x11021a4c	// 11021a4c <aos_mutex_new+0x24>
11021a32:	1073      	lrw      	r3, 0x1fffdad8	// 11021a7c <aos_mutex_new+0x54>
11021a34:	3200      	movi      	r2, 0
11021a36:	9300      	ld.w      	r0, (r3, 0x0)
11021a38:	3100      	movi      	r1, 0
11021a3a:	ddee2000 	st.w      	r15, (r14, 0x0)
11021a3e:	3300      	movi      	r3, 0
11021a40:	e0000316 	bsr      	0x1102206c	// 1102206c <aos_except_process>
11021a44:	3000      	movi      	r0, 0
11021a46:	2815      	subi      	r0, 22
}
11021a48:	1401      	addi      	r14, r14, 4
11021a4a:	1492      	pop      	r4-r5, r15
    mutex->hdl = aos_malloc(sizeof(kmutex_t));
11021a4c:	3028      	movi      	r0, 40
11021a4e:	e3ffffe1 	bsr      	0x11021a10	// 11021a10 <aos_malloc>
    if (mutex->hdl == NULL) {
11021a52:	3840      	cmpnei      	r0, 0
    mutex->hdl = aos_malloc(sizeof(kmutex_t));
11021a54:	b400      	st.w      	r0, (r4, 0x0)
    if (mutex->hdl == NULL) {
11021a56:	0c10      	bf      	0x11021a76	// 11021a76 <aos_mutex_new+0x4e>
    ret = krhino_mutex_create(mutex->hdl, "AOS");
11021a58:	102a      	lrw      	r1, 0x110114d0	// 11021a80 <aos_mutex_new+0x58>
11021a5a:	e0003c45 	bsr      	0x110292e4	// 110292e4 <cpu_task_stack_init+0x93c>
11021a5e:	6d43      	mov      	r5, r0
    if (ret != RHINO_SUCCESS) {
11021a60:	3840      	cmpnei      	r0, 0
11021a62:	0c06      	bf      	0x11021a6e	// 11021a6e <aos_mutex_new+0x46>
        aos_free(mutex->hdl);
11021a64:	9400      	ld.w      	r0, (r4, 0x0)
11021a66:	e3ffffda 	bsr      	0x11021a1a	// 11021a1a <aos_free>
        mutex->hdl = NULL;
11021a6a:	3300      	movi      	r3, 0
11021a6c:	b460      	st.w      	r3, (r4, 0x0)
    return rhino2stderrno(ret);
11021a6e:	6c17      	mov      	r0, r5
11021a70:	e3fffd56 	bsr      	0x1102151c	// 1102151c <rhino2stderrno>
11021a74:	07ea      	br      	0x11021a48	// 11021a48 <aos_mutex_new+0x20>
        return -ENOMEM;
11021a76:	3000      	movi      	r0, 0
11021a78:	280b      	subi      	r0, 12
11021a7a:	07e7      	br      	0x11021a48	// 11021a48 <aos_mutex_new+0x20>
11021a7c:	1fffdad8 	.long	0x1fffdad8
11021a80:	110114d0 	.long	0x110114d0

11021a84 <aos_mutex_free>:
{
11021a84:	14d1      	push      	r4, r15
11021a86:	1421      	subi      	r14, r14, 4
11021a88:	6cff      	mov      	r3, r15
    aos_check_return(mutex && mutex->hdl);
11021a8a:	3840      	cmpnei      	r0, 0
{
11021a8c:	6d03      	mov      	r4, r0
    aos_check_return(mutex && mutex->hdl);
11021a8e:	0c04      	bf      	0x11021a96	// 11021a96 <aos_mutex_free+0x12>
11021a90:	9000      	ld.w      	r0, (r0, 0x0)
11021a92:	3840      	cmpnei      	r0, 0
11021a94:	080b      	bt      	0x11021aaa	// 11021aaa <aos_mutex_free+0x26>
11021a96:	104a      	lrw      	r2, 0x1fffdad8	// 11021abc <aos_mutex_free+0x38>
11021a98:	3100      	movi      	r1, 0
11021a9a:	9200      	ld.w      	r0, (r2, 0x0)
11021a9c:	b860      	st.w      	r3, (r14, 0x0)
11021a9e:	3200      	movi      	r2, 0
11021aa0:	3300      	movi      	r3, 0
11021aa2:	e00002e5 	bsr      	0x1102206c	// 1102206c <aos_except_process>
}
11021aa6:	1401      	addi      	r14, r14, 4
11021aa8:	1491      	pop      	r4, r15
    krhino_mutex_del(mutex->hdl);
11021aaa:	e0003c89 	bsr      	0x110293bc	// 110293bc <cpu_task_stack_init+0xa14>
    aos_free(mutex->hdl);
11021aae:	9400      	ld.w      	r0, (r4, 0x0)
11021ab0:	e3ffffb5 	bsr      	0x11021a1a	// 11021a1a <aos_free>
    mutex->hdl = NULL;
11021ab4:	3300      	movi      	r3, 0
11021ab6:	b460      	st.w      	r3, (r4, 0x0)
11021ab8:	07f7      	br      	0x11021aa6	// 11021aa6 <aos_mutex_free+0x22>
11021aba:	0000      	bkpt
11021abc:	1fffdad8 	.long	0x1fffdad8

11021ac0 <aos_sem_new>:
{
11021ac0:	14d2      	push      	r4-r5, r15
11021ac2:	1421      	subi      	r14, r14, 4
11021ac4:	6d03      	mov      	r4, r0
    aos_check_return_einval(sem);
11021ac6:	3840      	cmpnei      	r0, 0
{
11021ac8:	6d47      	mov      	r5, r1
    aos_check_return_einval(sem);
11021aca:	080e      	bt      	0x11021ae6	// 11021ae6 <aos_sem_new+0x26>
11021acc:	1073      	lrw      	r3, 0x1fffdad8	// 11021b18 <aos_sem_new+0x58>
11021ace:	3200      	movi      	r2, 0
11021ad0:	9300      	ld.w      	r0, (r3, 0x0)
11021ad2:	3100      	movi      	r1, 0
11021ad4:	ddee2000 	st.w      	r15, (r14, 0x0)
11021ad8:	3300      	movi      	r3, 0
11021ada:	e00002c9 	bsr      	0x1102206c	// 1102206c <aos_except_process>
11021ade:	3000      	movi      	r0, 0
11021ae0:	2815      	subi      	r0, 22
}
11021ae2:	1401      	addi      	r14, r14, 4
11021ae4:	1492      	pop      	r4-r5, r15
    sem->hdl = aos_malloc(sizeof(ksem_t));
11021ae6:	3024      	movi      	r0, 36
11021ae8:	e3ffff94 	bsr      	0x11021a10	// 11021a10 <aos_malloc>
    if (sem->hdl == NULL) {
11021aec:	3840      	cmpnei      	r0, 0
    sem->hdl = aos_malloc(sizeof(ksem_t));
11021aee:	b400      	st.w      	r0, (r4, 0x0)
    if (sem->hdl == NULL) {
11021af0:	0c11      	bf      	0x11021b12	// 11021b12 <aos_sem_new+0x52>
    ret = krhino_sem_create(sem->hdl, "AOS", count);
11021af2:	6c97      	mov      	r2, r5
11021af4:	102a      	lrw      	r1, 0x110114d0	// 11021b1c <aos_sem_new+0x5c>
11021af6:	e0003309 	bsr      	0x11028108	// 11028108 <krhino_sem_create>
11021afa:	6d43      	mov      	r5, r0
    if (ret != RHINO_SUCCESS) {
11021afc:	3840      	cmpnei      	r0, 0
11021afe:	0c06      	bf      	0x11021b0a	// 11021b0a <aos_sem_new+0x4a>
        aos_free(sem->hdl);
11021b00:	9400      	ld.w      	r0, (r4, 0x0)
11021b02:	e3ffff8c 	bsr      	0x11021a1a	// 11021a1a <aos_free>
        sem->hdl = NULL;
11021b06:	3300      	movi      	r3, 0
11021b08:	b460      	st.w      	r3, (r4, 0x0)
    return rhino2stderrno(ret);
11021b0a:	6c17      	mov      	r0, r5
11021b0c:	e3fffd08 	bsr      	0x1102151c	// 1102151c <rhino2stderrno>
11021b10:	07e9      	br      	0x11021ae2	// 11021ae2 <aos_sem_new+0x22>
        return -ENOMEM;
11021b12:	3000      	movi      	r0, 0
11021b14:	280b      	subi      	r0, 12
11021b16:	07e6      	br      	0x11021ae2	// 11021ae2 <aos_sem_new+0x22>
11021b18:	1fffdad8 	.long	0x1fffdad8
11021b1c:	110114d0 	.long	0x110114d0

11021b20 <aos_sem_free>:
{
11021b20:	14d1      	push      	r4, r15
11021b22:	1421      	subi      	r14, r14, 4
11021b24:	6cff      	mov      	r3, r15
    aos_check_return(sem && sem->hdl);
11021b26:	3840      	cmpnei      	r0, 0
{
11021b28:	6d03      	mov      	r4, r0
    aos_check_return(sem && sem->hdl);
11021b2a:	0c04      	bf      	0x11021b32	// 11021b32 <aos_sem_free+0x12>
11021b2c:	9000      	ld.w      	r0, (r0, 0x0)
11021b2e:	3840      	cmpnei      	r0, 0
11021b30:	080b      	bt      	0x11021b46	// 11021b46 <aos_sem_free+0x26>
11021b32:	104a      	lrw      	r2, 0x1fffdad8	// 11021b58 <aos_sem_free+0x38>
11021b34:	3100      	movi      	r1, 0
11021b36:	9200      	ld.w      	r0, (r2, 0x0)
11021b38:	b860      	st.w      	r3, (r14, 0x0)
11021b3a:	3200      	movi      	r2, 0
11021b3c:	3300      	movi      	r3, 0
11021b3e:	e0000297 	bsr      	0x1102206c	// 1102206c <aos_except_process>
}
11021b42:	1401      	addi      	r14, r14, 4
11021b44:	1491      	pop      	r4, r15
    krhino_sem_del(sem->hdl);
11021b46:	e00032ff 	bsr      	0x11028144	// 11028144 <krhino_sem_del>
    aos_free(sem->hdl);
11021b4a:	9400      	ld.w      	r0, (r4, 0x0)
11021b4c:	e3ffff67 	bsr      	0x11021a1a	// 11021a1a <aos_free>
    sem->hdl = NULL;
11021b50:	3300      	movi      	r3, 0
11021b52:	b460      	st.w      	r3, (r4, 0x0)
11021b54:	07f7      	br      	0x11021b42	// 11021b42 <aos_sem_free+0x22>
11021b56:	0000      	bkpt
11021b58:	1fffdad8 	.long	0x1fffdad8

11021b5c <lpm_idle_pre_hook>:
{
}

void __attribute__((weak)) lpm_idle_pre_hook(void)
{
}
11021b5c:	783c      	jmp      	r15
	...

11021b60 <soc_err_proc>:
    return __get_SP();
#endif
}

void soc_err_proc(kstat_t err)
{
11021b60:	14d0      	push      	r15
    switch(err) {
11021b62:	e46014af 	subi      	r3, r0, 1200
11021b66:	3b01      	cmphsi      	r3, 2
11021b68:	1067      	lrw      	r3, 0x1fffdad4	// 11021b84 <soc_err_proc+0x24>
{
11021b6a:	6c43      	mov      	r1, r0
    case RHINO_TASK_STACK_OVF:
    case RHINO_INTRPT_STACK_OVF:
        printf("stack overflow: %s!\n", g_active_task[0]->task_name);
        break;
    default:
        printf("sys error:%d %s!\n", err, g_active_task[0]->task_name);
11021b6c:	9360      	ld.w      	r3, (r3, 0x0)
    switch(err) {
11021b6e:	0806      	bt      	0x11021b7a	// 11021b7a <soc_err_proc+0x1a>
        printf("stack overflow: %s!\n", g_active_task[0]->task_name);
11021b70:	9321      	ld.w      	r1, (r3, 0x4)
11021b72:	1006      	lrw      	r0, 0x11011612	// 11021b88 <soc_err_proc+0x28>
11021b74:	e3ffd8a2 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
11021b78:	0400      	br      	0x11021b78	// 11021b78 <soc_err_proc+0x18>
        printf("sys error:%d %s!\n", err, g_active_task[0]->task_name);
11021b7a:	9341      	ld.w      	r2, (r3, 0x4)
11021b7c:	1004      	lrw      	r0, 0x11011627	// 11021b8c <soc_err_proc+0x2c>
11021b7e:	e3ffd89d 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
11021b82:	07fb      	br      	0x11021b78	// 11021b78 <soc_err_proc+0x18>
11021b84:	1fffdad4 	.long	0x1fffdad4
11021b88:	11011612 	.long	0x11011612
11021b8c:	11011627 	.long	0x11011627

11021b90 <uart_putc>:
    }

}

int uart_putc(int ch)
{
11021b90:	14d1      	push      	r4, r15
11021b92:	1422      	subi      	r14, r14, 8
    int data;

    if (g_console_handle == NULL) {
11021b94:	106d      	lrw      	r3, 0x1fffb240	// 11021bc8 <uart_putc+0x38>
11021b96:	6d0f      	mov      	r4, r3
{
11021b98:	b800      	st.w      	r0, (r14, 0x0)
    if (g_console_handle == NULL) {
11021b9a:	9300      	ld.w      	r0, (r3, 0x0)
11021b9c:	3840      	cmpnei      	r0, 0
11021b9e:	0c12      	bf      	0x11021bc2	// 11021bc2 <uart_putc+0x32>
        return -1;
    }

    if (ch == '\n') {
11021ba0:	9860      	ld.w      	r3, (r14, 0x0)
11021ba2:	3b4a      	cmpnei      	r3, 10
11021ba4:	0807      	bt      	0x11021bb2	// 11021bb2 <uart_putc+0x22>
        data = '\r';
11021ba6:	330d      	movi      	r3, 13
        uart_send(g_console_handle, &data, 1);
11021ba8:	3201      	movi      	r2, 1
        data = '\r';
11021baa:	b861      	st.w      	r3, (r14, 0x4)
        uart_send(g_console_handle, &data, 1);
11021bac:	1901      	addi      	r1, r14, 4
11021bae:	e000022b 	bsr      	0x11022004	// 11022004 <uart_send>
    }

    uart_send(g_console_handle, &ch, 1);
11021bb2:	9400      	ld.w      	r0, (r4, 0x0)
11021bb4:	3201      	movi      	r2, 1
11021bb6:	6c7b      	mov      	r1, r14
11021bb8:	e0000226 	bsr      	0x11022004	// 11022004 <uart_send>

    return 0;
11021bbc:	3000      	movi      	r0, 0
}
11021bbe:	1402      	addi      	r14, r14, 8
11021bc0:	1491      	pop      	r4, r15
        return -1;
11021bc2:	3000      	movi      	r0, 0
11021bc4:	2800      	subi      	r0, 1
11021bc6:	07fc      	br      	0x11021bbe	// 11021bbe <uart_putc+0x2e>
11021bc8:	1fffb240 	.long	0x1fffb240

11021bcc <dev_name_parse.constprop.0>:
    LIST_UNLOCK();

    return node;
}

static char *dev_name_parse(const char *name, int *id)
11021bcc:	14d3      	push      	r4-r6, r15
11021bce:	6d47      	mov      	r5, r1
{
    char *n = strdup(name);
11021bd0:	e0003259 	bsr      	0x11028082	// 11028082 <strdup>
11021bd4:	6d03      	mov      	r4, r0

    if (n == NULL)
11021bd6:	3840      	cmpnei      	r0, 0
11021bd8:	0c14      	bf      	0x11021c00	// 11021c00 <dev_name_parse.constprop.0+0x34>
        return NULL;

    int len = strlen(n);
11021bda:	e3ffda6d 	bsr      	0x1101d0b4	// 1101d0b4 <__strlen_fast>
11021bde:	6c93      	mov      	r2, r4

    for (int i = 0; i < len; i++) {
11021be0:	5a71      	subu      	r3, r2, r4
11021be2:	640d      	cmplt      	r3, r0
11021be4:	0c0e      	bf      	0x11021c00	// 11021c00 <dev_name_parse.constprop.0+0x34>
        if (n[i] >= '0' && n[i] <= '9') {
11021be6:	6d8b      	mov      	r6, r2
11021be8:	8660      	ld.b      	r3, (r6, 0x0)
11021bea:	2b2f      	subi      	r3, 48
11021bec:	74cc      	zextb      	r3, r3
11021bee:	2200      	addi      	r2, 1
11021bf0:	3b09      	cmphsi      	r3, 10
11021bf2:	0bf7      	bt      	0x11021be0	// 11021be0 <dev_name_parse.constprop.0+0x14>
            *id = atoi(n + i);
11021bf4:	6c1b      	mov      	r0, r6
11021bf6:	e3ffd999 	bsr      	0x1101cf28	// 1101cf28 <atoi>
            n[i] = '\0';
11021bfa:	3300      	movi      	r3, 0
            *id = atoi(n + i);
11021bfc:	b500      	st.w      	r0, (r5, 0x0)
            n[i] = '\0';
11021bfe:	a660      	st.b      	r3, (r6, 0x0)
            break;
        }
    }

    return n;
}
11021c00:	6c13      	mov      	r0, r4
11021c02:	1493      	pop      	r4-r6, r15

11021c04 <device_new>:
{
11021c04:	14d3      	push      	r4-r6, r15
11021c06:	6d43      	mov      	r5, r0
    aos_dev_t *dev = (aos_dev_t*)aos_zalloc(size);
11021c08:	6c07      	mov      	r0, r1
{
11021c0a:	6d8b      	mov      	r6, r2
    aos_dev_t *dev = (aos_dev_t*)aos_zalloc(size);
11021c0c:	e3fffef4 	bsr      	0x110219f4	// 110219f4 <aos_zalloc>
11021c10:	6d03      	mov      	r4, r0
    if (dev) {
11021c12:	3840      	cmpnei      	r0, 0
11021c14:	0c0c      	bf      	0x11021c2c	// 11021c2c <device_new+0x28>
        dev->id = id;
11021c16:	a0c4      	st.b      	r6, (r0, 0x4)
        dev->drv = drv;
11021c18:	b0a3      	st.w      	r5, (r0, 0xc)
        if (aos_mutex_new(&dev->mutex) != 0) {
11021c1a:	2007      	addi      	r0, 8
11021c1c:	e3ffff06 	bsr      	0x11021a28	// 11021a28 <aos_mutex_new>
11021c20:	3840      	cmpnei      	r0, 0
11021c22:	0c05      	bf      	0x11021c2c	// 11021c2c <device_new+0x28>
            aos_free(dev);
11021c24:	6c13      	mov      	r0, r4
            return NULL;
11021c26:	3400      	movi      	r4, 0
            aos_free(dev);
11021c28:	e3fffef9 	bsr      	0x11021a1a	// 11021a1a <aos_free>
}
11021c2c:	6c13      	mov      	r0, r4
11021c2e:	1493      	pop      	r4-r6, r15

11021c30 <device_free>:
{
11021c30:	14d1      	push      	r4, r15
11021c32:	6d03      	mov      	r4, r0
    aos_mutex_free(&dev->mutex);
11021c34:	2007      	addi      	r0, 8
11021c36:	e3ffff27 	bsr      	0x11021a84	// 11021a84 <aos_mutex_free>
    aos_free(dev);
11021c3a:	6c13      	mov      	r0, r4
11021c3c:	e3fffeef 	bsr      	0x11021a1a	// 11021a1a <aos_free>
}
11021c40:	1491      	pop      	r4, r15

11021c42 <device_lock>:
{
11021c42:	14d0      	push      	r15
    return aos_mutex_lock(&dev->mutex, AOS_WAIT_FOREVER);
11021c44:	3100      	movi      	r1, 0
11021c46:	2007      	addi      	r0, 8
11021c48:	2900      	subi      	r1, 1
11021c4a:	e3fffd1f 	bsr      	0x11021688	// 11021688 <aos_mutex_lock>
}
11021c4e:	1490      	pop      	r15

11021c50 <device_unlock>:
{
11021c50:	14d0      	push      	r15
    return aos_mutex_unlock(&dev->mutex);
11021c52:	2007      	addi      	r0, 8
11021c54:	e3fffd46 	bsr      	0x110216e0	// 110216e0 <aos_mutex_unlock>
}
11021c58:	1490      	pop      	r15
	...

11021c5c <device_find>:
{
11021c5c:	14d3      	push      	r4-r6, r15
11021c5e:	6d43      	mov      	r5, r0
    LIST_LOCK();
11021c60:	1012      	lrw      	r0, 0x1fffb248	// 11021ca8 <device_find+0x4c>
{
11021c62:	6d87      	mov      	r6, r1
    LIST_LOCK();
11021c64:	e3fffd5a 	bsr      	0x11021718	// 11021718 <aos_mutex_is_valid>
11021c68:	3840      	cmpnei      	r0, 0
11021c6a:	0804      	bt      	0x11021c72	// 11021c72 <device_find+0x16>
11021c6c:	100f      	lrw      	r0, 0x1fffb248	// 11021ca8 <device_find+0x4c>
11021c6e:	e3fffedd 	bsr      	0x11021a28	// 11021a28 <aos_mutex_new>
11021c72:	100e      	lrw      	r0, 0x1fffb248	// 11021ca8 <device_find+0x4c>
11021c74:	3100      	movi      	r1, 0
11021c76:	2900      	subi      	r1, 1
11021c78:	e3fffd08 	bsr      	0x11021688	// 11021688 <aos_mutex_lock>
    slist_for_each_entry(&device_list, node,  aos_dev_t, node) {
11021c7c:	106c      	lrw      	r3, 0x1fffb244	// 11021cac <device_find+0x50>
11021c7e:	9380      	ld.w      	r4, (r3, 0x0)
11021c80:	3c40      	cmpnei      	r4, 0
11021c82:	0806      	bt      	0x11021c8e	// 11021c8e <device_find+0x32>
    LIST_UNLOCK();
11021c84:	1009      	lrw      	r0, 0x1fffb248	// 11021ca8 <device_find+0x4c>
11021c86:	e3fffd2d 	bsr      	0x110216e0	// 110216e0 <aos_mutex_unlock>
}
11021c8a:	6c13      	mov      	r0, r4
11021c8c:	1493      	pop      	r4-r6, r15
        if (strcmp(drv->name, name) == 0 && node->id == id)
11021c8e:	9463      	ld.w      	r3, (r4, 0xc)
11021c90:	6c57      	mov      	r1, r5
11021c92:	9301      	ld.w      	r0, (r3, 0x4)
11021c94:	e3ffd950 	bsr      	0x1101cf34	// 1101cf34 <__strcmp_fast>
11021c98:	3840      	cmpnei      	r0, 0
11021c9a:	0804      	bt      	0x11021ca2	// 11021ca2 <device_find+0x46>
11021c9c:	8464      	ld.b      	r3, (r4, 0x4)
11021c9e:	658e      	cmpne      	r3, r6
11021ca0:	0ff2      	bf      	0x11021c84	// 11021c84 <device_find+0x28>
    slist_for_each_entry(&device_list, node,  aos_dev_t, node) {
11021ca2:	9480      	ld.w      	r4, (r4, 0x0)
11021ca4:	07ee      	br      	0x11021c80	// 11021c80 <device_find+0x24>
11021ca6:	0000      	bkpt
11021ca8:	1fffb248 	.long	0x1fffb248
11021cac:	1fffb244 	.long	0x1fffb244

11021cb0 <driver_register>:
{
11021cb0:	14d4      	push      	r4-r7, r15
11021cb2:	1425      	subi      	r14, r14, 20
11021cb4:	6d03      	mov      	r4, r0
    aos_check_param(drv && drv->init);
11021cb6:	3840      	cmpnei      	r0, 0
11021cb8:	ddee2001 	st.w      	r15, (r14, 0x4)
{
11021cbc:	6d47      	mov      	r5, r1
11021cbe:	6d8b      	mov      	r6, r2
    aos_check_param(drv && drv->init);
11021cc0:	0c04      	bf      	0x11021cc8	// 11021cc8 <driver_register+0x18>
11021cc2:	9064      	ld.w      	r3, (r0, 0x10)
11021cc4:	3b40      	cmpnei      	r3, 0
11021cc6:	080a      	bt      	0x11021cda	// 11021cda <driver_register+0x2a>
11021cc8:	1175      	lrw      	r3, 0x1fffdad8	// 11021d9c <driver_register+0xec>
11021cca:	3200      	movi      	r2, 0
11021ccc:	9300      	ld.w      	r0, (r3, 0x0)
11021cce:	9861      	ld.w      	r3, (r14, 0x4)
11021cd0:	3100      	movi      	r1, 0
11021cd2:	b860      	st.w      	r3, (r14, 0x0)
11021cd4:	3300      	movi      	r3, 0
11021cd6:	e00001cb 	bsr      	0x1102206c	// 1102206c <aos_except_process>
    if (device_find(drv->name, idx) != NULL)
11021cda:	6c5b      	mov      	r1, r6
11021cdc:	9401      	ld.w      	r0, (r4, 0x4)
11021cde:	e3ffffbf 	bsr      	0x11021c5c	// 11021c5c <device_find>
11021ce2:	3840      	cmpnei      	r0, 0
11021ce4:	0c05      	bf      	0x11021cee	// 11021cee <driver_register+0x3e>
        return -1;
11021ce6:	3000      	movi      	r0, 0
11021ce8:	2800      	subi      	r0, 1
}
11021cea:	1405      	addi      	r14, r14, 20
11021cec:	1494      	pop      	r4-r7, r15
    aos_dev_t *dev = drv->init(drv, config, idx);
11021cee:	9464      	ld.w      	r3, (r4, 0x10)
11021cf0:	6c57      	mov      	r1, r5
11021cf2:	6c9b      	mov      	r2, r6
11021cf4:	6c13      	mov      	r0, r4
11021cf6:	7bcd      	jsr      	r3
11021cf8:	6d43      	mov      	r5, r0
    if (dev) {
11021cfa:	3840      	cmpnei      	r0, 0
11021cfc:	0ff5      	bf      	0x11021ce6	// 11021ce6 <driver_register+0x36>
        ((driver_t *)(dev->drv))->device_id = alloc_device_id();
11021cfe:	9063      	ld.w      	r3, (r0, 0xc)
        dev->id = idx;
11021d00:	a0c4      	st.b      	r6, (r0, 0x4)
        ((driver_t *)(dev->drv))->device_id = alloc_device_id();
11021d02:	b862      	st.w      	r3, (r14, 0x8)
    uint32_t index = rand() & 0xFFFF;
11021d04:	e3ffd8fe 	bsr      	0x1101cf00	// 1101cf00 <__GI_rand>
11021d08:	7501      	zexth      	r4, r0
    LIST_LOCK();
11021d0a:	1106      	lrw      	r0, 0x1fffb248	// 11021da0 <driver_register+0xf0>
11021d0c:	e3fffd06 	bsr      	0x11021718	// 11021718 <aos_mutex_is_valid>
11021d10:	3840      	cmpnei      	r0, 0
11021d12:	0804      	bt      	0x11021d1a	// 11021d1a <driver_register+0x6a>
11021d14:	1103      	lrw      	r0, 0x1fffb248	// 11021da0 <driver_register+0xf0>
11021d16:	e3fffe89 	bsr      	0x11021a28	// 11021a28 <aos_mutex_new>
11021d1a:	1102      	lrw      	r0, 0x1fffb248	// 11021da0 <driver_register+0xf0>
11021d1c:	3100      	movi      	r1, 0
11021d1e:	2900      	subi      	r1, 1
11021d20:	e3fffcb4 	bsr      	0x11021688	// 11021688 <aos_mutex_lock>
        slist_for_each_entry(&device_list, node,  aos_dev_t, node) {
11021d24:	1160      	lrw      	r3, 0x1fffb244	// 11021da4 <driver_register+0xf4>
11021d26:	2400      	addi      	r4, 1
11021d28:	b863      	st.w      	r3, (r14, 0xc)
11021d2a:	4490      	lsli      	r4, r4, 16
            aos_check_param(drv);
11021d2c:	107c      	lrw      	r3, 0x1fffdad8	// 11021d9c <driver_register+0xec>
11021d2e:	b864      	st.w      	r3, (r14, 0x10)
        slist_for_each_entry(&device_list, node,  aos_dev_t, node) {
11021d30:	9863      	ld.w      	r3, (r14, 0xc)
11021d32:	93c0      	ld.w      	r6, (r3, 0x0)
11021d34:	3e40      	cmpnei      	r6, 0
11021d36:	081d      	bt      	0x11021d70	// 11021d70 <driver_register+0xc0>
    LIST_UNLOCK();
11021d38:	101a      	lrw      	r0, 0x1fffb248	// 11021da0 <driver_register+0xf0>
11021d3a:	e3fffcd3 	bsr      	0x110216e0	// 110216e0 <aos_mutex_unlock>
        ((driver_t *)(dev->drv))->device_id = alloc_device_id();
11021d3e:	9862      	ld.w      	r3, (r14, 0x8)
11021d40:	3200      	movi      	r2, 0
        LIST_LOCK();
11021d42:	1018      	lrw      	r0, 0x1fffb248	// 11021da0 <driver_register+0xf0>
        ((driver_t *)(dev->drv))->device_id = alloc_device_id();
11021d44:	ab47      	st.h      	r2, (r3, 0xe)
        LIST_LOCK();
11021d46:	e3fffce9 	bsr      	0x11021718	// 11021718 <aos_mutex_is_valid>
11021d4a:	3840      	cmpnei      	r0, 0
11021d4c:	0804      	bt      	0x11021d54	// 11021d54 <driver_register+0xa4>
11021d4e:	1015      	lrw      	r0, 0x1fffb248	// 11021da0 <driver_register+0xf0>
11021d50:	e3fffe6c 	bsr      	0x11021a28	// 11021a28 <aos_mutex_new>
11021d54:	1013      	lrw      	r0, 0x1fffb248	// 11021da0 <driver_register+0xf0>
11021d56:	3100      	movi      	r1, 0
11021d58:	2900      	subi      	r1, 1
11021d5a:	e3fffc97 	bsr      	0x11021688	// 11021688 <aos_mutex_lock>
        slist_add_tail(&dev->node, &device_list);
11021d5e:	1032      	lrw      	r1, 0x1fffb244	// 11021da4 <driver_register+0xf4>
11021d60:	6c17      	mov      	r0, r5
11021d62:	e0000193 	bsr      	0x11022088	// 11022088 <slist_add_tail>
        LIST_UNLOCK();
11021d66:	100f      	lrw      	r0, 0x1fffb248	// 11021da0 <driver_register+0xf0>
11021d68:	e3fffcbc 	bsr      	0x110216e0	// 110216e0 <aos_mutex_unlock>
        return 0;
11021d6c:	3000      	movi      	r0, 0
11021d6e:	07be      	br      	0x11021cea	// 11021cea <driver_register+0x3a>
            driver_t *drv = (driver_t *)node->drv;
11021d70:	96e3      	ld.w      	r7, (r6, 0xc)
            aos_check_param(drv);
11021d72:	3f40      	cmpnei      	r7, 0
11021d74:	080a      	bt      	0x11021d88	// 11021d88 <driver_register+0xd8>
11021d76:	9861      	ld.w      	r3, (r14, 0x4)
11021d78:	9804      	ld.w      	r0, (r14, 0x10)
11021d7a:	b860      	st.w      	r3, (r14, 0x0)
11021d7c:	3200      	movi      	r2, 0
11021d7e:	3300      	movi      	r3, 0
11021d80:	3100      	movi      	r1, 0
11021d82:	9000      	ld.w      	r0, (r0, 0x0)
11021d84:	e0000174 	bsr      	0x1102206c	// 1102206c <aos_except_process>
            if (drv->device_id == index << 16) {
11021d88:	d8675007 	ld.hs      	r3, (r7, 0xe)
11021d8c:	650e      	cmpne      	r3, r4
11021d8e:	0805      	bt      	0x11021d98	// 11021d98 <driver_register+0xe8>
11021d90:	3380      	movi      	r3, 128
11021d92:	4369      	lsli      	r3, r3, 9
11021d94:	610c      	addu      	r4, r3
11021d96:	07cd      	br      	0x11021d30	// 11021d30 <driver_register+0x80>
        slist_for_each_entry(&device_list, node,  aos_dev_t, node) {
11021d98:	96c0      	ld.w      	r6, (r6, 0x0)
11021d9a:	07cd      	br      	0x11021d34	// 11021d34 <driver_register+0x84>
11021d9c:	1fffdad8 	.long	0x1fffdad8
11021da0:	1fffb248 	.long	0x1fffb248
11021da4:	1fffb244 	.long	0x1fffb244

11021da8 <device_open_id>:

    return NULL;
}

aos_dev_t *device_open_id(const char *name, int id)
{
11021da8:	14d1      	push      	r4, r15
    aos_dev_t *dev = device_find(name, id);
11021daa:	e3ffff59 	bsr      	0x11021c5c	// 11021c5c <device_find>
11021dae:	6d03      	mov      	r4, r0

    if (dev) {
11021db0:	3840      	cmpnei      	r0, 0
11021db2:	0c10      	bf      	0x11021dd2	// 11021dd2 <device_open_id+0x2a>
        device_lock(dev);
11021db4:	e3ffff47 	bsr      	0x11021c42	// 11021c42 <device_lock>
        if (dev->ref == 0) {
11021db8:	8c63      	ld.h      	r3, (r4, 0x6)
11021dba:	3b40      	cmpnei      	r3, 0
11021dbc:	080d      	bt      	0x11021dd6	// 11021dd6 <device_open_id+0x2e>
            if (DRIVER(dev)->open(dev) != 0) {
11021dbe:	9463      	ld.w      	r3, (r4, 0xc)
11021dc0:	6c13      	mov      	r0, r4
11021dc2:	9367      	ld.w      	r3, (r3, 0x1c)
11021dc4:	7bcd      	jsr      	r3
11021dc6:	3840      	cmpnei      	r0, 0
11021dc8:	0c07      	bf      	0x11021dd6	// 11021dd6 <device_open_id+0x2e>
                device_unlock(dev);
11021dca:	6c13      	mov      	r0, r4
                return NULL;
11021dcc:	3400      	movi      	r4, 0
                device_unlock(dev);
11021dce:	e3ffff41 	bsr      	0x11021c50	// 11021c50 <device_unlock>
        dev->ref++;
        device_unlock(dev);
    }

    return dev;
}
11021dd2:	6c13      	mov      	r0, r4
11021dd4:	1491      	pop      	r4, r15
        dev->ref++;
11021dd6:	8c63      	ld.h      	r3, (r4, 0x6)
11021dd8:	2300      	addi      	r3, 1
11021dda:	ac63      	st.h      	r3, (r4, 0x6)
        device_unlock(dev);
11021ddc:	6c13      	mov      	r0, r4
11021dde:	e3ffff39 	bsr      	0x11021c50	// 11021c50 <device_unlock>
11021de2:	07f8      	br      	0x11021dd2	// 11021dd2 <device_open_id+0x2a>

11021de4 <device_open>:
{
11021de4:	14d2      	push      	r4-r5, r15
11021de6:	1421      	subi      	r14, r14, 4
    char *n = dev_name_parse(name, &id);
11021de8:	6c7b      	mov      	r1, r14
    int id = 0;
11021dea:	3300      	movi      	r3, 0
11021dec:	b860      	st.w      	r3, (r14, 0x0)
    char *n = dev_name_parse(name, &id);
11021dee:	e3fffeef 	bsr      	0x11021bcc	// 11021bcc <dev_name_parse.constprop.0>
11021df2:	6d03      	mov      	r4, r0
    if (n != NULL) {
11021df4:	3840      	cmpnei      	r0, 0
11021df6:	0c0b      	bf      	0x11021e0c	// 11021e0c <device_open+0x28>
        aos_dev_t *dev = device_open_id(n, id);
11021df8:	9820      	ld.w      	r1, (r14, 0x0)
11021dfa:	e3ffffd7 	bsr      	0x11021da8	// 11021da8 <device_open_id>
11021dfe:	6d43      	mov      	r5, r0
        aos_free(n);
11021e00:	6c13      	mov      	r0, r4
11021e02:	e3fffe0c 	bsr      	0x11021a1a	// 11021a1a <aos_free>
}
11021e06:	6c17      	mov      	r0, r5
11021e08:	1401      	addi      	r14, r14, 4
11021e0a:	1492      	pop      	r4-r5, r15
    return NULL;
11021e0c:	3500      	movi      	r5, 0
11021e0e:	07fc      	br      	0x11021e06	// 11021e06 <device_open+0x22>

11021e10 <device_close>:

int device_close(aos_dev_t *dev)
{
11021e10:	14d2      	push      	r4-r5, r15
11021e12:	6d43      	mov      	r5, r0
    int ret = -EBADF;

    if (dev) {
11021e14:	3840      	cmpnei      	r0, 0
11021e16:	0c18      	bf      	0x11021e46	// 11021e46 <device_close+0x36>
        device_lock(dev);
11021e18:	e3ffff15 	bsr      	0x11021c42	// 11021c42 <device_lock>
        if (dev->ref > 0) {
11021e1c:	8d63      	ld.h      	r3, (r5, 0x6)
11021e1e:	3b40      	cmpnei      	r3, 0
11021e20:	0808      	bt      	0x11021e30	// 11021e30 <device_close+0x20>
    int ret = -EBADF;
11021e22:	3400      	movi      	r4, 0
11021e24:	2c08      	subi      	r4, 9
            dev->ref--;
            if (dev->ref == 0)
                ret = DRIVER(dev)->close(dev);
        }
        device_unlock(dev);
11021e26:	6c17      	mov      	r0, r5
11021e28:	e3ffff14 	bsr      	0x11021c50	// 11021c50 <device_unlock>
    }

    return ret;
}
11021e2c:	6c13      	mov      	r0, r4
11021e2e:	1492      	pop      	r4-r5, r15
            dev->ref--;
11021e30:	2b00      	subi      	r3, 1
11021e32:	74cd      	zexth      	r3, r3
11021e34:	ad63      	st.h      	r3, (r5, 0x6)
            if (dev->ref == 0)
11021e36:	3b40      	cmpnei      	r3, 0
11021e38:	0bf5      	bt      	0x11021e22	// 11021e22 <device_close+0x12>
                ret = DRIVER(dev)->close(dev);
11021e3a:	9563      	ld.w      	r3, (r5, 0xc)
11021e3c:	6c17      	mov      	r0, r5
11021e3e:	9368      	ld.w      	r3, (r3, 0x20)
11021e40:	7bcd      	jsr      	r3
11021e42:	6d03      	mov      	r4, r0
11021e44:	07f1      	br      	0x11021e26	// 11021e26 <device_close+0x16>
    int ret = -EBADF;
11021e46:	3400      	movi      	r4, 0
11021e48:	2c08      	subi      	r4, 9
    return ret;
11021e4a:	07f1      	br      	0x11021e2c	// 11021e2c <device_close+0x1c>

11021e4c <device_valid>:

int device_valid(aos_dev_t *dev, const char *name)
{
11021e4c:	14d0      	push      	r15
    if (dev && dev->drv) {
11021e4e:	3840      	cmpnei      	r0, 0
11021e50:	0c0d      	bf      	0x11021e6a	// 11021e6a <device_valid+0x1e>
11021e52:	9063      	ld.w      	r3, (r0, 0xc)
11021e54:	3b40      	cmpnei      	r3, 0
11021e56:	0c0a      	bf      	0x11021e6a	// 11021e6a <device_valid+0x1e>
        const char *n = NULL;
        driver_t *drv = (driver_t*)dev->drv;
        if (drv->type)
11021e58:	9302      	ld.w      	r0, (r3, 0x8)
11021e5a:	3840      	cmpnei      	r0, 0
11021e5c:	0804      	bt      	0x11021e64	// 11021e64 <device_valid+0x18>
            n = drv->type;
        else
            n = drv->name;
11021e5e:	9301      	ld.w      	r0, (r3, 0x4)

        if (n)
11021e60:	3840      	cmpnei      	r0, 0
11021e62:	0c04      	bf      	0x11021e6a	// 11021e6a <device_valid+0x1e>
            return strcmp(n, name);
11021e64:	e3ffd868 	bsr      	0x1101cf34	// 1101cf34 <__strcmp_fast>
    }

    return -1;
}
11021e68:	1490      	pop      	r15
    return -1;
11021e6a:	3000      	movi      	r0, 0
11021e6c:	2800      	subi      	r0, 1
11021e6e:	07fd      	br      	0x11021e68	// 11021e68 <device_valid+0x1c>

11021e70 <flash_read>:
  \param[in]   buffer buffer to store data
  \param[in]   bytesize data size to be read
  \return      >=0 on success, -1 on fail.
*/
int flash_read(aos_dev_t *dev, int32_t addroff, void *buff, int32_t bytesize)
{
11021e70:	14d4      	push      	r4-r7, r15
11021e72:	1421      	subi      	r14, r14, 4
11021e74:	6d87      	mov      	r6, r1
    int ret;

    FLASH_VAILD(dev);
11021e76:	102f      	lrw      	r1, 0x11011670	// 11021eb0 <flash_read+0x40>
{
11021e78:	6d03      	mov      	r4, r0
11021e7a:	6dcb      	mov      	r7, r2
11021e7c:	b860      	st.w      	r3, (r14, 0x0)
    FLASH_VAILD(dev);
11021e7e:	e3ffffe7 	bsr      	0x11021e4c	// 11021e4c <device_valid>
11021e82:	3840      	cmpnei      	r0, 0
11021e84:	0812      	bt      	0x11021ea8	// 11021ea8 <flash_read+0x38>

    device_lock(dev);
11021e86:	6c13      	mov      	r0, r4
11021e88:	e3fffedd 	bsr      	0x11021c42	// 11021c42 <device_lock>
    ret = FLASH_DRIVER(dev)->read(dev, addroff, buff, bytesize);
11021e8c:	9443      	ld.w      	r2, (r4, 0xc)
11021e8e:	9860      	ld.w      	r3, (r14, 0x0)
11021e90:	92a9      	ld.w      	r5, (r2, 0x24)
11021e92:	6c5b      	mov      	r1, r6
11021e94:	6c9f      	mov      	r2, r7
11021e96:	6c13      	mov      	r0, r4
11021e98:	7bd5      	jsr      	r5
11021e9a:	6d43      	mov      	r5, r0
    device_unlock(dev);
11021e9c:	6c13      	mov      	r0, r4
11021e9e:	e3fffed9 	bsr      	0x11021c50	// 11021c50 <device_unlock>

    return ret;
}
11021ea2:	6c17      	mov      	r0, r5
11021ea4:	1401      	addi      	r14, r14, 4
11021ea6:	1494      	pop      	r4-r7, r15
    FLASH_VAILD(dev);
11021ea8:	3500      	movi      	r5, 0
11021eaa:	2d00      	subi      	r5, 1
11021eac:	07fb      	br      	0x11021ea2	// 11021ea2 <flash_read+0x32>
11021eae:	0000      	bkpt
11021eb0:	11011670 	.long	0x11011670

11021eb4 <flash_program>:
  \param[in]   srcbuf   buffer with data to be written
  \param[in]   bytesize data size to be written
  \return      0 on success, -1 on fail.
*/
int flash_program(aos_dev_t *dev, int32_t dstaddr, const void *srcbuf, int32_t bytesize)
{
11021eb4:	14d4      	push      	r4-r7, r15
11021eb6:	1421      	subi      	r14, r14, 4
11021eb8:	6d87      	mov      	r6, r1
    int ret;

    FLASH_VAILD(dev);
11021eba:	102f      	lrw      	r1, 0x11011670	// 11021ef4 <flash_program+0x40>
{
11021ebc:	6d03      	mov      	r4, r0
11021ebe:	6dcb      	mov      	r7, r2
11021ec0:	b860      	st.w      	r3, (r14, 0x0)
    FLASH_VAILD(dev);
11021ec2:	e3ffffc5 	bsr      	0x11021e4c	// 11021e4c <device_valid>
11021ec6:	3840      	cmpnei      	r0, 0
11021ec8:	0812      	bt      	0x11021eec	// 11021eec <flash_program+0x38>

    device_lock(dev);
11021eca:	6c13      	mov      	r0, r4
11021ecc:	e3fffebb 	bsr      	0x11021c42	// 11021c42 <device_lock>
    ret = FLASH_DRIVER(dev)->program(dev, dstaddr, srcbuf, bytesize);
11021ed0:	9443      	ld.w      	r2, (r4, 0xc)
11021ed2:	9860      	ld.w      	r3, (r14, 0x0)
11021ed4:	92aa      	ld.w      	r5, (r2, 0x28)
11021ed6:	6c5b      	mov      	r1, r6
11021ed8:	6c9f      	mov      	r2, r7
11021eda:	6c13      	mov      	r0, r4
11021edc:	7bd5      	jsr      	r5
11021ede:	6d43      	mov      	r5, r0
    device_unlock(dev);
11021ee0:	6c13      	mov      	r0, r4
11021ee2:	e3fffeb7 	bsr      	0x11021c50	// 11021c50 <device_unlock>

    return ret;
}
11021ee6:	6c17      	mov      	r0, r5
11021ee8:	1401      	addi      	r14, r14, 4
11021eea:	1494      	pop      	r4-r7, r15
    FLASH_VAILD(dev);
11021eec:	3500      	movi      	r5, 0
11021eee:	2d00      	subi      	r5, 1
11021ef0:	07fb      	br      	0x11021ee6	// 11021ee6 <flash_program+0x32>
11021ef2:	0000      	bkpt
11021ef4:	11011670 	.long	0x11011670

11021ef8 <flash_erase>:
  \param[in]   addroff  destinate address
  \param[in]   blkcnt  erased block count
  \return      0 on success, -1 on fail.
*/
int flash_erase(aos_dev_t *dev, int32_t addroff, int32_t blkcnt)
{
11021ef8:	14d4      	push      	r4-r7, r15
11021efa:	6d87      	mov      	r6, r1
    int ret;

    FLASH_VAILD(dev);
11021efc:	1030      	lrw      	r1, 0x11011670	// 11021f3c <flash_erase+0x44>
{
11021efe:	6d43      	mov      	r5, r0
11021f00:	6dcb      	mov      	r7, r2
    FLASH_VAILD(dev);
11021f02:	e3ffffa5 	bsr      	0x11021e4c	// 11021e4c <device_valid>
11021f06:	6d03      	mov      	r4, r0
11021f08:	3840      	cmpnei      	r0, 0
11021f0a:	0815      	bt      	0x11021f34	// 11021f34 <flash_erase+0x3c>

    device_lock(dev);
11021f0c:	6c17      	mov      	r0, r5
11021f0e:	e3fffe9a 	bsr      	0x11021c42	// 11021c42 <device_lock>
    ret = FLASH_DRIVER(dev)->erase(dev, addroff, blkcnt);
11021f12:	9563      	ld.w      	r3, (r5, 0xc)
11021f14:	6c5b      	mov      	r1, r6
11021f16:	936b      	ld.w      	r3, (r3, 0x2c)
11021f18:	6c9f      	mov      	r2, r7
11021f1a:	6c17      	mov      	r0, r5
11021f1c:	7bcd      	jsr      	r3
11021f1e:	6d83      	mov      	r6, r0
    device_unlock(dev);
11021f20:	6c17      	mov      	r0, r5
11021f22:	e3fffe97 	bsr      	0x11021c50	// 11021c50 <device_unlock>

    return ret < 0 ? -EIO : 0;
11021f26:	3edf      	btsti      	r6, 31
11021f28:	3300      	movi      	r3, 0
11021f2a:	2b04      	subi      	r3, 5
11021f2c:	c4830c40 	inct      	r4, r3, 0
}
11021f30:	6c13      	mov      	r0, r4
11021f32:	1494      	pop      	r4-r7, r15
    FLASH_VAILD(dev);
11021f34:	3400      	movi      	r4, 0
11021f36:	2c00      	subi      	r4, 1
11021f38:	07fc      	br      	0x11021f30	// 11021f30 <flash_erase+0x38>
11021f3a:	0000      	bkpt
11021f3c:	11011670 	.long	0x11011670

11021f40 <flash_get_info>:
  \brief       Get info from a flash device.
  \param[in]   dev  Pointer to device object.
  \return      flash info.
*/
int flash_get_info(aos_dev_t *dev, flash_dev_info_t *info)
{
11021f40:	14d3      	push      	r4-r6, r15
11021f42:	1421      	subi      	r14, r14, 4
11021f44:	6d43      	mov      	r5, r0
    int ret;

    aos_check_param(info);
11021f46:	3940      	cmpnei      	r1, 0
{
11021f48:	6d87      	mov      	r6, r1
    aos_check_param(info);
11021f4a:	080a      	bt      	0x11021f5e	// 11021f5e <flash_get_info+0x1e>
11021f4c:	1074      	lrw      	r3, 0x1fffdad8	// 11021f9c <flash_get_info+0x5c>
11021f4e:	3200      	movi      	r2, 0
11021f50:	9300      	ld.w      	r0, (r3, 0x0)
11021f52:	3100      	movi      	r1, 0
11021f54:	ddee2000 	st.w      	r15, (r14, 0x0)
11021f58:	3300      	movi      	r3, 0
11021f5a:	e0000089 	bsr      	0x1102206c	// 1102206c <aos_except_process>
    FLASH_VAILD(dev);
11021f5e:	1031      	lrw      	r1, 0x11011670	// 11021fa0 <flash_get_info+0x60>
11021f60:	6c17      	mov      	r0, r5
11021f62:	e3ffff75 	bsr      	0x11021e4c	// 11021e4c <device_valid>
11021f66:	6d03      	mov      	r4, r0
11021f68:	3840      	cmpnei      	r0, 0
11021f6a:	0815      	bt      	0x11021f94	// 11021f94 <flash_get_info+0x54>

    device_lock(dev);
11021f6c:	6c17      	mov      	r0, r5
11021f6e:	e3fffe6a 	bsr      	0x11021c42	// 11021c42 <device_lock>
    ret = FLASH_DRIVER(dev)->get_info(dev, info);
11021f72:	9563      	ld.w      	r3, (r5, 0xc)
11021f74:	6c5b      	mov      	r1, r6
11021f76:	936c      	ld.w      	r3, (r3, 0x30)
11021f78:	6c17      	mov      	r0, r5
11021f7a:	7bcd      	jsr      	r3
11021f7c:	6d83      	mov      	r6, r0
    device_unlock(dev);
11021f7e:	6c17      	mov      	r0, r5
11021f80:	e3fffe68 	bsr      	0x11021c50	// 11021c50 <device_unlock>

    return ret < 0 ? -EIO : 0;
11021f84:	3edf      	btsti      	r6, 31
11021f86:	3300      	movi      	r3, 0
11021f88:	2b04      	subi      	r3, 5
11021f8a:	c4830c40 	inct      	r4, r3, 0
}
11021f8e:	6c13      	mov      	r0, r4
11021f90:	1401      	addi      	r14, r14, 4
11021f92:	1493      	pop      	r4-r6, r15
    FLASH_VAILD(dev);
11021f94:	3400      	movi      	r4, 0
11021f96:	2c00      	subi      	r4, 1
11021f98:	07fb      	br      	0x11021f8e	// 11021f8e <flash_get_info+0x4e>
11021f9a:	0000      	bkpt
11021f9c:	1fffdad8 	.long	0x1fffdad8
11021fa0:	11011670 	.long	0x11011670

11021fa4 <hci_send>:

#include <devices/hal/hci_impl.h>
#include <devices/hci.h>

int hci_send(aos_dev_t *dev, void *data, uint32_t size)
{
11021fa4:	14d4      	push      	r4-r7, r15
11021fa6:	6d03      	mov      	r4, r0
    hci_driver_t *hci = (hci_driver_t *)dev->drv;
11021fa8:	90a3      	ld.w      	r5, (r0, 0xc)
{
11021faa:	6dc7      	mov      	r7, r1
11021fac:	6d8b      	mov      	r6, r2
    int ret;

    device_lock(dev);
11021fae:	e3fffe4a 	bsr      	0x11021c42	// 11021c42 <device_lock>
    ret = hci->send(dev, data, size);
11021fb2:	956b      	ld.w      	r3, (r5, 0x2c)
11021fb4:	6c9b      	mov      	r2, r6
11021fb6:	6c5f      	mov      	r1, r7
11021fb8:	6c13      	mov      	r0, r4
11021fba:	7bcd      	jsr      	r3
11021fbc:	6d43      	mov      	r5, r0
    device_unlock(dev);
11021fbe:	6c13      	mov      	r0, r4
11021fc0:	e3fffe48 	bsr      	0x11021c50	// 11021c50 <device_unlock>

    return ret;
}
11021fc4:	6c17      	mov      	r0, r5
11021fc6:	1494      	pop      	r4-r7, r15

11021fc8 <hci_set_event>:

int hci_set_event(aos_dev_t *dev, hci_event_cb_t event, void *pirv)
{
11021fc8:	14d4      	push      	r4-r7, r15
11021fca:	6d03      	mov      	r4, r0
    hci_driver_t *hci = (hci_driver_t *)dev->drv;
11021fcc:	90a3      	ld.w      	r5, (r0, 0xc)
{
11021fce:	6dc7      	mov      	r7, r1
11021fd0:	6d8b      	mov      	r6, r2
    int ret;

    device_lock(dev);
11021fd2:	e3fffe38 	bsr      	0x11021c42	// 11021c42 <device_lock>
    ret = hci->set_event(dev, event, pirv);
11021fd6:	9569      	ld.w      	r3, (r5, 0x24)
11021fd8:	6c9b      	mov      	r2, r6
11021fda:	6c5f      	mov      	r1, r7
11021fdc:	6c13      	mov      	r0, r4
11021fde:	7bcd      	jsr      	r3
11021fe0:	6d43      	mov      	r5, r0
    device_unlock(dev);
11021fe2:	6c13      	mov      	r0, r4
11021fe4:	e3fffe36 	bsr      	0x11021c50	// 11021c50 <device_unlock>

    return ret;
}
11021fe8:	6c17      	mov      	r0, r5
11021fea:	1494      	pop      	r4-r7, r15

11021fec <uart_config_default>:
        return -1; \
} while(0)

void uart_config_default(uart_config_t *config)
{
    config->baud_rate = 115200;
11021fec:	33e1      	movi      	r3, 225
11021fee:	4369      	lsli      	r3, r3, 9
11021ff0:	b060      	st.w      	r3, (r0, 0x0)
    config->data_width = DATA_WIDTH_8BIT;
11021ff2:	3303      	movi      	r3, 3
11021ff4:	b061      	st.w      	r3, (r0, 0x4)
    config->parity = PARITY_NONE;
11021ff6:	3300      	movi      	r3, 0
11021ff8:	b062      	st.w      	r3, (r0, 0x8)
    config->stop_bits = STOP_BITS_1;
11021ffa:	b063      	st.w      	r3, (r0, 0xc)
    config->flow_control = FLOW_CONTROL_DISABLED;
11021ffc:	b064      	st.w      	r3, (r0, 0x10)
    config->mode = MODE_TX_RX;
11021ffe:	3302      	movi      	r3, 2
11022000:	b065      	st.w      	r3, (r0, 0x14)
}
11022002:	783c      	jmp      	r15

11022004 <uart_send>:

    return ret;
}

int uart_send(aos_dev_t *dev, const void *data, uint32_t size)
{
11022004:	14d3      	push      	r4-r6, r15
11022006:	6d43      	mov      	r5, r0
    if (size == 0 || NULL == data) {
11022008:	3a40      	cmpnei      	r2, 0
{
1102200a:	6d07      	mov      	r4, r1
1102200c:	6d8b      	mov      	r6, r2
    if (size == 0 || NULL == data) {
1102200e:	0c17      	bf      	0x1102203c	// 1102203c <uart_send+0x38>
11022010:	3940      	cmpnei      	r1, 0
11022012:	0c15      	bf      	0x1102203c	// 1102203c <uart_send+0x38>
        return -EINVAL;
    }

    int ret;

    UART_VAILD(dev);
11022014:	102d      	lrw      	r1, 0x11011639	// 11022048 <uart_send+0x44>
11022016:	e3ffff1b 	bsr      	0x11021e4c	// 11021e4c <device_valid>
1102201a:	3840      	cmpnei      	r0, 0
1102201c:	0813      	bt      	0x11022042	// 11022042 <uart_send+0x3e>

    //FIXME:
    device_lock(dev);
1102201e:	6c17      	mov      	r0, r5
11022020:	e3fffe11 	bsr      	0x11021c42	// 11021c42 <device_lock>
    ret = UART_DRIVER(dev)->send(dev, data, size);
11022024:	9563      	ld.w      	r3, (r5, 0xc)
11022026:	6c53      	mov      	r1, r4
11022028:	936b      	ld.w      	r3, (r3, 0x2c)
1102202a:	6c9b      	mov      	r2, r6
1102202c:	6c17      	mov      	r0, r5
1102202e:	7bcd      	jsr      	r3
11022030:	6d03      	mov      	r4, r0
    device_unlock(dev);
11022032:	6c17      	mov      	r0, r5
11022034:	e3fffe0e 	bsr      	0x11021c50	// 11021c50 <device_unlock>

    return ret;
}
11022038:	6c13      	mov      	r0, r4
1102203a:	1493      	pop      	r4-r6, r15
        return -EINVAL;
1102203c:	3400      	movi      	r4, 0
1102203e:	2c15      	subi      	r4, 22
11022040:	07fc      	br      	0x11022038	// 11022038 <uart_send+0x34>
    UART_VAILD(dev);
11022042:	3400      	movi      	r4, 0
11022044:	2c00      	subi      	r4, 1
11022046:	07f9      	br      	0x11022038	// 11022038 <uart_send+0x34>
11022048:	11011639 	.long	0x11011639

1102204c <except_process_function>:
#include <string.h>
#include <aos/kernel.h>


static void except_process_function(int errno, const char *file, int line, const char *func_name, void *caller)
{
1102204c:	14d1      	push      	r4, r15
1102204e:	9862      	ld.w      	r3, (r14, 0x8)
11022050:	6d0f      	mov      	r4, r3
#ifdef CONFIG_DEBUG
    printf("Except! errno is %s, function: %s at %s:%d, caller: %p\n", strerror(errno), func_name, file, line, caller);
    while(1);
#else
    printf("Except! errno is %s, caller: %p\n", strerror(errno), caller);
11022052:	e000302d 	bsr      	0x110280ac	// 110280ac <strerror>
11022056:	6c43      	mov      	r1, r0
11022058:	6c93      	mov      	r2, r4
1102205a:	1004      	lrw      	r0, 0x1101163e	// 11022068 <except_process_function+0x1c>
1102205c:	e3ffd62e 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
    irq_lock();
11022060:	e0000659 	bsr      	0x11022d12	// 11022d12 <irq_lock>
11022064:	0400      	br      	0x11022064	// 11022064 <except_process_function+0x18>
11022066:	0000      	bkpt
11022068:	1101163e 	.long	0x1101163e

1102206c <aos_except_process>:
{
    process = except_process_function;
}

void aos_except_process(int errno, const char *file, int line, const char *func_name, void *caller)
{
1102206c:	14d2      	push      	r4-r5, r15
1102206e:	1421      	subi      	r14, r14, 4
11022070:	9884      	ld.w      	r4, (r14, 0x10)
11022072:	6d53      	mov      	r5, r4
    if (process)
11022074:	1084      	lrw      	r4, 0x1fffa550	// 11022084 <aos_except_process+0x18>
11022076:	9480      	ld.w      	r4, (r4, 0x0)
11022078:	3c40      	cmpnei      	r4, 0
1102207a:	0c03      	bf      	0x11022080	// 11022080 <aos_except_process+0x14>
        process(errno, file, line, func_name, caller);
1102207c:	b8a0      	st.w      	r5, (r14, 0x0)
1102207e:	7bd1      	jsr      	r4
}
11022080:	1401      	addi      	r14, r14, 4
11022082:	1492      	pop      	r4-r5, r15
11022084:	1fffa550 	.long	0x1fffa550

11022088 <slist_add_tail>:
#include <aos/list.h>

void slist_add_tail(slist_t *node, slist_t *head)
{
    while (head->next) {
11022088:	9160      	ld.w      	r3, (r1, 0x0)
1102208a:	3b40      	cmpnei      	r3, 0
1102208c:	0804      	bt      	0x11022094	// 11022094 <slist_add_tail+0xc>
    struct slist_s *next;
} slist_t;

static inline void slist_add(slist_t *node, slist_t *head)
{
    node->next = head->next;
1102208e:	b060      	st.w      	r3, (r0, 0x0)
    head->next = node;
11022090:	b100      	st.w      	r0, (r1, 0x0)
        head = head->next;
    }

    slist_add(node, head);
}
11022092:	783c      	jmp      	r15
11022094:	6c4f      	mov      	r1, r3
11022096:	07f9      	br      	0x11022088	// 11022088 <slist_add_tail>

11022098 <application_task_entry>:
#define INIT_TASK_STACK_SIZE CONFIG_INIT_TASK_STACK_SIZE
#endif
static aos_task_t app_task_handle;
extern int main(void);
static void application_task_entry(void *arg)
{
11022098:	14d0      	push      	r15
    main();
1102209a:	e3fff945 	bsr      	0x11021324	// 11021324 <main>

    aos_task_exit(0);
1102209e:	3000      	movi      	r0, 0
110220a0:	e3fffaee 	bsr      	0x1102167c	// 1102167c <aos_task_exit>
}
110220a4:	1490      	pop      	r15
	...

110220a8 <pre_main>:

}

int pre_main(void)

{
110220a8:	14d0      	push      	r15
110220aa:	1422      	subi      	r14, r14, 8
    /* kernel init */
    aos_init();
110220ac:	e3fffc7e 	bsr      	0x110219a8	// 110219a8 <aos_init>
#ifdef CONFIG_OS_TRACE 
    trace_init_data();
#endif

    /* init task */
    aos_task_new_ext(&app_task_handle, "app_task", application_task_entry,
110220b0:	330a      	movi      	r3, 10
110220b2:	1048      	lrw      	r2, 0x11022098	// 110220d0 <pre_main+0x28>
110220b4:	1028      	lrw      	r1, 0x1101165f	// 110220d4 <pre_main+0x2c>
110220b6:	1009      	lrw      	r0, 0x1fffb24c	// 110220d8 <pre_main+0x30>
110220b8:	b861      	st.w      	r3, (r14, 0x4)
110220ba:	3380      	movi      	r3, 128
110220bc:	4363      	lsli      	r3, r3, 3
110220be:	b860      	st.w      	r3, (r14, 0x0)
110220c0:	3300      	movi      	r3, 0
110220c2:	e3fffaaf 	bsr      	0x11021620	// 11021620 <aos_task_new_ext>
                     NULL, INIT_TASK_STACK_SIZE, AOS_DEFAULT_APP_PRI);

    /* kernel start */
    aos_start();
110220c6:	e3fffc7d 	bsr      	0x110219c0	// 110219c0 <aos_start>

    return 0;
}
110220ca:	3000      	movi      	r0, 0
110220cc:	1402      	addi      	r14, r14, 8
110220ce:	1490      	pop      	r15
110220d0:	11022098 	.long	0x11022098
110220d4:	1101165f 	.long	0x1101165f
110220d8:	1fffb24c 	.long	0x1fffb24c

110220dc <ringbuffer_create>:
{
110220dc:	14d3      	push      	r4-r6, r15
110220de:	1421      	subi      	r14, r14, 4
110220e0:	6cff      	mov      	r3, r15
    aos_check_param(ringbuffer && buffer);
110220e2:	3840      	cmpnei      	r0, 0
{
110220e4:	6d03      	mov      	r4, r0
110220e6:	6d87      	mov      	r6, r1
110220e8:	6d4b      	mov      	r5, r2
    aos_check_param(ringbuffer && buffer);
110220ea:	0c03      	bf      	0x110220f0	// 110220f0 <ringbuffer_create+0x14>
110220ec:	3940      	cmpnei      	r1, 0
110220ee:	0809      	bt      	0x11022100	// 11022100 <ringbuffer_create+0x24>
110220f0:	104b      	lrw      	r2, 0x1fffdad8	// 1102211c <ringbuffer_create+0x40>
110220f2:	3100      	movi      	r1, 0
110220f4:	9200      	ld.w      	r0, (r2, 0x0)
110220f6:	b860      	st.w      	r3, (r14, 0x0)
110220f8:	3200      	movi      	r2, 0
110220fa:	3300      	movi      	r3, 0
110220fc:	e3ffffb8 	bsr      	0x1102206c	// 1102206c <aos_except_process>
    memset(buffer, 0, length);
11022100:	6c97      	mov      	r2, r5
11022102:	3100      	movi      	r1, 0
11022104:	6c1b      	mov      	r0, r6
    ringbuffer->length = length - 1;
11022106:	2d00      	subi      	r5, 1
    memset(buffer, 0, length);
11022108:	e3ffd782 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
    ringbuffer->ridx = 0;
1102210c:	3300      	movi      	r3, 0
}
1102210e:	3000      	movi      	r0, 0
    ringbuffer->length = length - 1;
11022110:	b4a1      	st.w      	r5, (r4, 0x4)
    ringbuffer->ridx = 0;
11022112:	b462      	st.w      	r3, (r4, 0x8)
    ringbuffer->widx = 0;
11022114:	b463      	st.w      	r3, (r4, 0xc)
    ringbuffer->buffer = (uint8_t *)buffer;
11022116:	b4c0      	st.w      	r6, (r4, 0x0)
}
11022118:	1401      	addi      	r14, r14, 4
1102211a:	1493      	pop      	r4-r6, r15
1102211c:	1fffdad8 	.long	0x1fffdad8

11022120 <aos_get_app_version>:

    return (char *)ret;
}

char *aos_get_app_version(void)
{
11022120:	14d2      	push      	r4-r5, r15
11022122:	1421      	subi      	r14, r14, 4
    int32_t     ret;
    static char str_version[65] = {
        0,
    };
    uint32_t len = sizeof(str_version) - 1;
11022124:	3340      	movi      	r3, 64

    if (str_version[0] == 0) {
11022126:	108e      	lrw      	r4, 0x1fffb250	// 1102215c <aos_get_app_version+0x3c>
11022128:	6d53      	mov      	r5, r4
    uint32_t len = sizeof(str_version) - 1;
1102212a:	b860      	st.w      	r3, (r14, 0x0)
    if (str_version[0] == 0) {
1102212c:	8460      	ld.b      	r3, (r4, 0x0)
1102212e:	3b40      	cmpnei      	r3, 0
11022130:	0813      	bt      	0x11022156	// 11022156 <aos_get_app_version+0x36>
#ifdef CONFIG_TEE_CA
        ret = csi_tee_get_sys_os_version((uint8_t *)str_version, &len);
#else
        ret = get_app_version((uint8_t *)str_version, &len);
11022132:	6c7b      	mov      	r1, r14
11022134:	6c13      	mov      	r0, r4
11022136:	e00000c9 	bsr      	0x110222c8	// 110222c8 <get_app_version>
#endif
        if (ret != 0 || len >= sizeof(str_version)) {
1102213a:	3840      	cmpnei      	r0, 0
1102213c:	0805      	bt      	0x11022146	// 11022146 <aos_get_app_version+0x26>
1102213e:	9860      	ld.w      	r3, (r14, 0x0)
11022140:	eb030040 	cmphsi      	r3, 65
11022144:	0c06      	bf      	0x11022150	// 11022150 <aos_get_app_version+0x30>
            str_version[0] = 0;
11022146:	3300      	movi      	r3, 0
            return NULL;
11022148:	3000      	movi      	r0, 0
            str_version[0] = 0;
1102214a:	a560      	st.b      	r3, (r5, 0x0)

        str_version[len] = 0;
    }

    return str_version;
}
1102214c:	1401      	addi      	r14, r14, 4
1102214e:	1492      	pop      	r4-r5, r15
        str_version[len] = 0;
11022150:	3200      	movi      	r2, 0
11022152:	60d0      	addu      	r3, r4
11022154:	a340      	st.b      	r2, (r3, 0x0)
    return str_version;
11022156:	6c13      	mov      	r0, r4
11022158:	07fa      	br      	0x1102214c	// 1102214c <aos_get_app_version+0x2c>
1102215a:	0000      	bkpt
1102215c:	1fffb250 	.long	0x1fffb250

11022160 <fputc>:

extern int uart_putc(int ch);
extern int uart_getc(void);

int fputc(int ch, FILE *stream)
{
11022160:	14d0      	push      	r15
11022162:	1421      	subi      	r14, r14, 4
    if (g_current_outputs) {
11022164:	1068      	lrw      	r3, 0x1fffb294	// 11022184 <fputc+0x24>
{
11022166:	b800      	st.w      	r0, (r14, 0x0)
    if (g_current_outputs) {
11022168:	9360      	ld.w      	r3, (r3, 0x0)
1102216a:	3b40      	cmpnei      	r3, 0
1102216c:	0c07      	bf      	0x1102217a	// 1102217a <fputc+0x1a>
        g_current_outputs((char *)&ch, 1);
1102216e:	6c3b      	mov      	r0, r14
11022170:	3101      	movi      	r1, 1
11022172:	7bcd      	jsr      	r3
        return 0;
11022174:	3000      	movi      	r0, 0
    }
    return uart_putc(ch);
}
11022176:	1401      	addi      	r14, r14, 4
11022178:	1490      	pop      	r15
    return uart_putc(ch);
1102217a:	9800      	ld.w      	r0, (r14, 0x0)
1102217c:	e3fffd0a 	bsr      	0x11021b90	// 11021b90 <uart_putc>
11022180:	07fb      	br      	0x11022176	// 11022176 <fputc+0x16>
11022182:	0000      	bkpt
11022184:	1fffb294 	.long	0x1fffb294

11022188 <mtb_init>:
    MTB_LOGE("mtb find magic failed.");
    return -1;
}

int mtb_init(void)
{
11022188:	14d3      	push      	r4-r6, r15
1102218a:	1423      	subi      	r14, r14, 12
    void *handle;
    uint32_t flash_addr;
    uint32_t flash_end;
    partition_flash_info_t flash_info;

    handle = partition_flash_open(0);
1102218c:	3000      	movi      	r0, 0
        if (phead->magic == BMTB_MAGIC) {
1102218e:	11a1      	lrw      	r5, 0x74427254	// 11022210 <mtb_init+0x88>
    handle = partition_flash_open(0);
11022190:	e0000446 	bsr      	0x11022a1c	// 11022a1c <partition_flash_open>
    partition_flash_info_get(handle, &flash_info);
11022194:	6c7b      	mov      	r1, r14
    handle = partition_flash_open(0);
11022196:	6d03      	mov      	r4, r0
    partition_flash_info_get(handle, &flash_info);
11022198:	e000045a 	bsr      	0x11022a4c	// 11022a4c <partition_flash_info_get>
    partition_flash_close(handle);
1102219c:	6c13      	mov      	r0, r4
        if (phead->magic == MTB_MAGIC) {
1102219e:	109e      	lrw      	r4, 0x74427251	// 11022214 <mtb_init+0x8c>
    partition_flash_close(handle);
110221a0:	e000044a 	bsr      	0x11022a34	// 11022a34 <partition_flash_close>

    flash_addr = flash_info.start_addr;
    flash_end = flash_addr + flash_info.sector_size * flash_info.sector_count;
110221a4:	9801      	ld.w      	r0, (r14, 0x4)
110221a6:	9842      	ld.w      	r2, (r14, 0x8)
    flash_addr = flash_info.start_addr;
110221a8:	9860      	ld.w      	r3, (r14, 0x0)
    flash_end = flash_addr + flash_info.sector_size * flash_info.sector_count;
110221aa:	7c80      	mult      	r2, r0
110221ac:	608c      	addu      	r2, r3
    while(flash_addr < flash_end) {
110221ae:	648c      	cmphs      	r3, r2
110221b0:	0c06      	bf      	0x110221bc	// 110221bc <mtb_init+0x34>
    if (flash_addr == flash_end) {
110221b2:	64ca      	cmpne      	r2, r3
110221b4:	0818      	bt      	0x110221e4	// 110221e4 <mtb_init+0x5c>
    if (mtb_find_addr(&g_mtb, flash_addr, flash_end, flash_info.sector_size)) {
        return -1;
110221b6:	3000      	movi      	r0, 0
110221b8:	2800      	subi      	r0, 1
110221ba:	041b      	br      	0x110221f0	// 110221f0 <mtb_init+0x68>
        if (phead->magic == BMTB_MAGIC) {
110221bc:	9320      	ld.w      	r1, (r3, 0x0)
110221be:	6546      	cmpne      	r1, r5
110221c0:	081a      	bt      	0x110221f4	// 110221f4 <mtb_init+0x6c>
            if (phead->version == 1) {
110221c2:	8b22      	ld.h      	r1, (r3, 0x4)
110221c4:	3941      	cmpnei      	r1, 1
110221c6:	0820      	bt      	0x11022206	// 11022206 <mtb_init+0x7e>
                if (flash_addr + phead->size < flash_end) {
110221c8:	8b27      	ld.h      	r1, (r3, 0xe)
110221ca:	604c      	addu      	r1, r3
110221cc:	6484      	cmphs      	r1, r2
110221ce:	081c      	bt      	0x11022206	// 11022206 <mtb_init+0x7e>
                    if (ihead->magic == MTB_MAGIC) {
110221d0:	91c0      	ld.w      	r6, (r1, 0x0)
110221d2:	651a      	cmpne      	r6, r4
110221d4:	0819      	bt      	0x11022206	// 11022206 <mtb_init+0x7e>
                        mtb->prim_addr = flash_addr;
110221d6:	1051      	lrw      	r2, 0x1fffb298	// 11022218 <mtb_init+0x90>
                        mtb->using_addr = flash_addr + phead->size;
110221d8:	b220      	st.w      	r1, (r2, 0x0)
                        mtb->version = 1;
110221da:	3101      	movi      	r1, 1
                        mtb->prim_addr = flash_addr;
110221dc:	b261      	st.w      	r3, (r2, 0x4)
                        mtb->version = 1;
110221de:	aa28      	st.h      	r1, (r2, 0x10)
                        mtb->i_offset = phead->size;
110221e0:	8b67      	ld.h      	r3, (r3, 0xe)
            mtb->i_offset = 0;
110221e2:	aa67      	st.h      	r3, (r2, 0xe)
    }

    if (g_mtb.version < 4) {
110221e4:	106d      	lrw      	r3, 0x1fffb298	// 11022218 <mtb_init+0x90>
110221e6:	8b68      	ld.h      	r3, (r3, 0x10)
110221e8:	3b03      	cmphsi      	r3, 4
110221ea:	0810      	bt      	0x1102220a	// 1102220a <mtb_init+0x82>
        ret = mtbv_init();
110221ec:	e0000166 	bsr      	0x110224b8	// 110224b8 <mtbv_init>
    } else {
        ret = mtbv4_init();
    }
    return ret;
}
110221f0:	1403      	addi      	r14, r14, 12
110221f2:	1493      	pop      	r4-r6, r15
        if (phead->magic == MTB_MAGIC) {
110221f4:	6506      	cmpne      	r1, r4
110221f6:	0808      	bt      	0x11022206	// 11022206 <mtb_init+0x7e>
            mtb->prim_addr = flash_addr;
110221f8:	1048      	lrw      	r2, 0x1fffb298	// 11022218 <mtb_init+0x90>
            mtb->using_addr = flash_addr;
110221fa:	b260      	st.w      	r3, (r2, 0x0)
            mtb->prim_addr = flash_addr;
110221fc:	b261      	st.w      	r3, (r2, 0x4)
            mtb->version = phead->version;
110221fe:	8b62      	ld.h      	r3, (r3, 0x4)
11022200:	aa68      	st.h      	r3, (r2, 0x10)
            mtb->i_offset = 0;
11022202:	3300      	movi      	r3, 0
11022204:	07ef      	br      	0x110221e2	// 110221e2 <mtb_init+0x5a>
        flash_addr += block_size;
11022206:	60c0      	addu      	r3, r0
11022208:	07d3      	br      	0x110221ae	// 110221ae <mtb_init+0x26>
        ret = mtbv4_init();
1102220a:	e00001c3 	bsr      	0x11022590	// 11022590 <mtbv4_init>
1102220e:	07f1      	br      	0x110221f0	// 110221f0 <mtb_init+0x68>
11022210:	74427254 	.long	0x74427254
11022214:	74427251 	.long	0x74427251
11022218:	1fffb298 	.long	0x1fffb298

1102221c <get_sys_partition>:
                     (uint32_t *)scn_addr, SEACH_MODE_FIRST_TYPE);
    return ret;
}

int get_sys_partition(uint8_t *out, uint32_t *out_len)
{
1102221c:	14d4      	push      	r4-r7, r15
1102221e:	142b      	subi      	r14, r14, 44
    MTB_LOGD("mtb.backup_addr: 0x%x", g_mtb.backup_addr);
    MTB_LOGD("mtb.using_addr: 0x%x", g_mtb.using_addr);
    MTB_LOGD("mtb.one_size: 0x%x", g_mtb.one_size);
    MTB_LOGD("mtb.version: 0x%x", g_mtb.version);

    if (g_mtb.version < 4) {
11022220:	1168      	lrw      	r3, 0x1fffb298	// 110222c0 <get_sys_partition+0xa4>
{
11022222:	6d03      	mov      	r4, r0
    if (g_mtb.version < 4) {
11022224:	8b48      	ld.h      	r2, (r3, 0x10)
{
11022226:	6dc7      	mov      	r7, r1
    if (g_mtb.version < 4) {
11022228:	3a03      	cmphsi      	r2, 4
1102222a:	081b      	bt      	0x11022260	// 11022260 <get_sys_partition+0x44>
        scn_head_t *partition_addr;
        uint8_t *ret_addr = NULL;

        if (GET_PARTION_SCN_ADDR(g_mtb.using_addr, &ret_addr) < 0) {
1102222c:	9300      	ld.w      	r0, (r3, 0x0)
1102222e:	3302      	movi      	r3, 2
        uint8_t *ret_addr = NULL;
11022230:	3200      	movi      	r2, 0
        if (GET_PARTION_SCN_ADDR(g_mtb.using_addr, &ret_addr) < 0) {
11022232:	b860      	st.w      	r3, (r14, 0x0)
        uint8_t *ret_addr = NULL;
11022234:	b842      	st.w      	r2, (r14, 0x8)
        if (GET_PARTION_SCN_ADDR(g_mtb.using_addr, &ret_addr) < 0) {
11022236:	1b02      	addi      	r3, r14, 8
11022238:	1123      	lrw      	r1, 0x11011668	// 110222c4 <get_sys_partition+0xa8>
1102223a:	e0000090 	bsr      	0x1102235a	// 1102235a <get_section_addr>
1102223e:	38df      	btsti      	r0, 31
11022240:	0c05      	bf      	0x1102224a	// 1102224a <get_sys_partition+0x2e>
            return -1;
11022242:	3000      	movi      	r0, 0
11022244:	2800      	subi      	r0, 1
        *out_len = sizeof(sys_partition_info_t) * count;
#endif
    }

	return ret;
}
11022246:	140b      	addi      	r14, r14, 44
11022248:	1494      	pop      	r4-r7, r15
        partition_addr = (scn_head_t *)ret_addr;
1102224a:	9862      	ld.w      	r3, (r14, 0x8)
        ret_addr += sizeof(scn_head_t);
1102224c:	5b3e      	addi      	r1, r3, 8
1102224e:	b822      	st.w      	r1, (r14, 0x8)
        memcpy(out, ret_addr, *out_len);
11022250:	6c13      	mov      	r0, r4
        *out_len = partition_addr->size - sizeof(scn_head_t);
11022252:	9341      	ld.w      	r2, (r3, 0x4)
11022254:	2a07      	subi      	r2, 8
11022256:	b740      	st.w      	r2, (r7, 0x0)
        memcpy(out, ret_addr, *out_len);
11022258:	e00036b4 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
	return ret;
1102225c:	3000      	movi      	r0, 0
1102225e:	07f4      	br      	0x11022246	// 11022246 <get_sys_partition+0x2a>
        count = mtbv4_partition_count();
11022260:	e000014c 	bsr      	0x110224f8	// 110224f8 <mtbv4_partition_count>
11022264:	6d83      	mov      	r6, r0
        for (i = 0; i < count; i++) {
11022266:	3300      	movi      	r3, 0
11022268:	658d      	cmplt      	r3, r6
1102226a:	0805      	bt      	0x11022274	// 11022274 <get_sys_partition+0x58>
        *out_len = sizeof(sys_partition_info_t) * count;
1102226c:	3324      	movi      	r3, 36
1102226e:	7d8c      	mult      	r6, r3
11022270:	b7c0      	st.w      	r6, (r7, 0x0)
11022272:	07f5      	br      	0x1102225c	// 1102225c <get_sys_partition+0x40>
            mtbv4_get_partition_info_with_index(i, &part_info);
11022274:	6c0f      	mov      	r0, r3
11022276:	b861      	st.w      	r3, (r14, 0x4)
11022278:	1902      	addi      	r1, r14, 8
1102227a:	e00001bb 	bsr      	0x110225f0	// 110225f0 <mtbv4_get_partition_info_with_index>
            len = strlen(part_info.name);
1102227e:	1802      	addi      	r0, r14, 8
11022280:	e3ffd71a 	bsr      	0x1101d0b4	// 1101d0b4 <__strlen_fast>
            len = len > (MTB_IMAGE_NAME_SIZE - 1) ? (MTB_IMAGE_NAME_SIZE - 1) : len;
11022284:	3507      	movi      	r5, 7
11022286:	3827      	cmplti      	r0, 8
11022288:	c4a00c40 	inct      	r5, r0, 0
            memcpy(p->image_name, part_info.name, len);
1102228c:	6c97      	mov      	r2, r5
1102228e:	6c13      	mov      	r0, r4
11022290:	1902      	addi      	r1, r14, 8
11022292:	e0003697 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
            p->image_name[len] = 0;
11022296:	3300      	movi      	r3, 0
11022298:	6150      	addu      	r5, r4
1102229a:	a560      	st.b      	r3, (r5, 0x0)
            p->part_addr = part_info.start_addr;
1102229c:	3300      	movi      	r3, 0
1102229e:	9826      	ld.w      	r1, (r14, 0x18)
110222a0:	b463      	st.w      	r3, (r4, 0xc)
            p->part_size = part_info.end_addr - part_info.start_addr;
110222a2:	b465      	st.w      	r3, (r4, 0x14)
            p->image_size = part_info.img_size;
110222a4:	9869      	ld.w      	r3, (r14, 0x24)
            p->part_size = part_info.end_addr - part_info.start_addr;
110222a6:	9847      	ld.w      	r2, (r14, 0x1c)
            p->image_size = part_info.img_size;
110222a8:	b468      	st.w      	r3, (r4, 0x20)
            p->load_addr = part_info.load_addr;
110222aa:	9868      	ld.w      	r3, (r14, 0x20)
            p->part_size = part_info.end_addr - part_info.start_addr;
110222ac:	6086      	subu      	r2, r1
            p->load_addr = part_info.load_addr;
110222ae:	b466      	st.w      	r3, (r4, 0x18)
110222b0:	3300      	movi      	r3, 0
            p->part_addr = part_info.start_addr;
110222b2:	b422      	st.w      	r1, (r4, 0x8)
            p->load_addr = part_info.load_addr;
110222b4:	b467      	st.w      	r3, (r4, 0x1c)
            p->part_size = part_info.end_addr - part_info.start_addr;
110222b6:	b444      	st.w      	r2, (r4, 0x10)
        for (i = 0; i < count; i++) {
110222b8:	9861      	ld.w      	r3, (r14, 0x4)
            p ++;
110222ba:	2423      	addi      	r4, 36
        for (i = 0; i < count; i++) {
110222bc:	2300      	addi      	r3, 1
110222be:	07d5      	br      	0x11022268	// 11022268 <get_sys_partition+0x4c>
110222c0:	1fffb298 	.long	0x1fffb298
110222c4:	11011668 	.long	0x11011668

110222c8 <get_app_version>:

int get_app_version(uint8_t *out, uint32_t *out_len)
{
110222c8:	14d3      	push      	r4-r6, r15
110222ca:	6d03      	mov      	r4, r0
    int head_size;
    int version_max_size = MTB_OS_VERSION_LEN_V4;

    if (!(out && out_len)) {
110222cc:	3840      	cmpnei      	r0, 0
{
110222ce:	6d87      	mov      	r6, r1
    if (!(out && out_len)) {
110222d0:	0c1d      	bf      	0x1102230a	// 1102230a <get_app_version+0x42>
110222d2:	3940      	cmpnei      	r1, 0
110222d4:	0c1b      	bf      	0x1102230a	// 1102230a <get_app_version+0x42>
        return -EINVAL;
    }

    if (g_mtb.version < 4) {
110222d6:	106f      	lrw      	r3, 0x1fffb298	// 11022310 <get_app_version+0x48>
110222d8:	8b48      	ld.h      	r2, (r3, 0x10)
110222da:	3a03      	cmphsi      	r2, 4
110222dc:	0814      	bt      	0x11022304	// 11022304 <get_app_version+0x3c>
        head_size = sizeof(mhead_tb);
        version_max_size = MTB_OS_VERSION_LEN_V2;
        if (g_mtb.version == 1) {
            version_max_size = MTB_OS_VERSION_LEN;
110222de:	3a41      	cmpnei      	r2, 1
110222e0:	3540      	movi      	r5, 64
110222e2:	3220      	movi      	r2, 32
110222e4:	c4a20c20 	incf      	r5, r2, 0
110222e8:	3110      	movi      	r1, 16
        head_size = sizeof(imtb_head_v4_t);
        version_max_size = MTB_OS_VERSION_LEN_V4;
#endif
    }

    memcpy(out, (uint8_t *)(g_mtb.using_addr + head_size), version_max_size);
110222ea:	6c13      	mov      	r0, r4
110222ec:	6c97      	mov      	r2, r5
110222ee:	9360      	ld.w      	r3, (r3, 0x0)
110222f0:	604c      	addu      	r1, r3
110222f2:	e0003667 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
    out[version_max_size - 1] = 0;
110222f6:	3300      	movi      	r3, 0
110222f8:	6114      	addu      	r4, r5
110222fa:	2c00      	subi      	r4, 1
110222fc:	a460      	st.b      	r3, (r4, 0x0)
    *out_len = version_max_size;
    return 0;
110222fe:	3000      	movi      	r0, 0
    *out_len = version_max_size;
11022300:	b6a0      	st.w      	r5, (r6, 0x0)
}
11022302:	1493      	pop      	r4-r6, r15
        version_max_size = MTB_OS_VERSION_LEN_V4;
11022304:	3540      	movi      	r5, 64
        head_size = sizeof(imtb_head_v4_t);
11022306:	3118      	movi      	r1, 24
11022308:	07f1      	br      	0x110222ea	// 110222ea <get_app_version+0x22>
        return -EINVAL;
1102230a:	3000      	movi      	r0, 0
1102230c:	2815      	subi      	r0, 22
1102230e:	07fa      	br      	0x11022302	// 11022302 <get_app_version+0x3a>
11022310:	1fffb298 	.long	0x1fffb298

11022314 <mtb_get>:

mtb_t *mtb_get(void)
{
    return &g_mtb;
11022314:	1001      	lrw      	r0, 0x1fffb298	// 11022318 <mtb_get+0x4>
11022316:	783c      	jmp      	r15
11022318:	1fffb298 	.long	0x1fffb298

1102231c <mtb_version>:
    partition_flash_close(handle);
    return PADDING_SIZE(src, flash_info.sector_size);
}

static inline int mtb_version(void)
{
1102231c:	14d0      	push      	r15
    return mtb_get()->version;
1102231e:	e3fffffb 	bsr      	0x11022314	// 11022314 <mtb_get>
11022322:	8808      	ld.h      	r0, (r0, 0x10)
}
11022324:	1490      	pop      	r15

11022326 <get_scn_offset.isra.0>:
    get the first section offset
 * @param[in]    im_addr         bootrom manfest address
 * @param[out]     offset      offset
 * @return      0 on success; -1 on failure
 */
static int get_scn_offset(uint32_t im_addr, uint32_t *offset)
11022326:	14d2      	push      	r4-r5, r15
11022328:	6d43      	mov      	r5, r0
{
    uint32_t m_addr = mtb_get()->using_addr;
1102232a:	e3fffff5 	bsr      	0x11022314	// 11022314 <mtb_get>
1102232e:	9080      	ld.w      	r4, (r0, 0x0)
    uint32_t size_ver = 0;

    if (mtb_version() == 1) {
11022330:	e3fffff6 	bsr      	0x1102231c	// 1102231c <mtb_version>
11022334:	3841      	cmpnei      	r0, 1
11022336:	0c0a      	bf      	0x1102234a	// 1102234a <get_scn_offset.isra.0+0x24>
        size_ver = MTB_OS_VERSION_LEN;
    } else if (mtb_version() == 2) {
11022338:	e3fffff2 	bsr      	0x1102231c	// 1102231c <mtb_version>
1102233c:	3842      	cmpnei      	r0, 2
1102233e:	0c0c      	bf      	0x11022356	// 11022356 <get_scn_offset.isra.0+0x30>
        size_ver = MTB_OS_VERSION_LEN_V2;
    } else if (mtb_version() == 4) {
11022340:	e3ffffee 	bsr      	0x1102231c	// 1102231c <mtb_version>
        // there is no section in MTB V4
        MTB_LOGE("there is no section in MTB V4");
        return -1;
11022344:	3000      	movi      	r0, 0
11022346:	2800      	subi      	r0, 1
        return -1;
    }

    *offset = (uint32_t)(m_addr + sizeof(mhead_tb) + size_ver);
    return 0;
}
11022348:	1492      	pop      	r4-r5, r15
        size_ver = MTB_OS_VERSION_LEN;
1102234a:	3320      	movi      	r3, 32
    *offset = (uint32_t)(m_addr + sizeof(mhead_tb) + size_ver);
1102234c:	240f      	addi      	r4, 16
1102234e:	610c      	addu      	r4, r3
11022350:	b580      	st.w      	r4, (r5, 0x0)
    return 0;
11022352:	3000      	movi      	r0, 0
11022354:	07fa      	br      	0x11022348	// 11022348 <get_scn_offset.isra.0+0x22>
        size_ver = MTB_OS_VERSION_LEN_V2;
11022356:	3340      	movi      	r3, 64
11022358:	07fa      	br      	0x1102234c	// 1102234c <get_scn_offset.isra.0+0x26>

1102235a <get_section_addr>:
 * @param[out]     scn_addr      scn_addr
 * @param[in]     mode          SEACH_MODE_FIRST_TYPE,SEACH_MODE_SON_TYPE or SEACH_MODE_EXTEND_TYPE
 * @return      0 on success; -1 on failure
 */
int get_section_addr(uint32_t im_addr, const scn_type_t *seach_type, uint8_t *seach_name, uint32_t *scn_addr, uint32_t mode)
{
1102235a:	14d4      	push      	r4-r7, r15
1102235c:	1428      	subi      	r14, r14, 32
1102235e:	6d8b      	mov      	r6, r2
11022360:	b863      	st.w      	r3, (r14, 0xc)
11022362:	986d      	ld.w      	r3, (r14, 0x34)
11022364:	6d47      	mov      	r5, r1
11022366:	b860      	st.w      	r3, (r14, 0x0)
    uint32_t m_addr = im_addr;
    mhead_tb *mtb = (mhead_tb *)m_addr;
    scn_head_t *scn_head = NULL;
11022368:	3300      	movi      	r3, 0
    scn_img_sig_info_t *img_info_t;
    uint32_t i = 0;
    uint32_t sum_scn = mtb->scn_count;
    uint8_t s_name[MTB_IMAGE_NAME_SIZE + 1];
    memset(s_name, 0, sizeof(s_name));
1102236a:	3209      	movi      	r2, 9
    scn_head_t *scn_head = NULL;
1102236c:	b864      	st.w      	r3, (r14, 0x10)
    memset(s_name, 0, sizeof(s_name));
1102236e:	3100      	movi      	r1, 0
    uint32_t sum_scn = mtb->scn_count;
11022370:	8864      	ld.h      	r3, (r0, 0x8)
    memset(s_name, 0, sizeof(s_name));
11022372:	1805      	addi      	r0, r14, 20
    uint32_t sum_scn = mtb->scn_count;
11022374:	b862      	st.w      	r3, (r14, 0x8)
    memset(s_name, 0, sizeof(s_name));
11022376:	e3ffd64b 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>

    if (seach_name != NULL) {
1102237a:	3e40      	cmpnei      	r6, 0
1102237c:	0c06      	bf      	0x11022388	// 11022388 <get_section_addr+0x2e>
        memcpy(s_name, seach_name, MTB_IMAGE_NAME_SIZE);
1102237e:	3208      	movi      	r2, 8
11022380:	6c5b      	mov      	r1, r6
11022382:	1805      	addi      	r0, r14, 20
11022384:	e000361e 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
    }

    if (get_scn_offset(m_addr, (uint32_t *)(&scn_head))) {
11022388:	1804      	addi      	r0, r14, 16
1102238a:	e3ffffce 	bsr      	0x11022326	// 11022326 <get_scn_offset.isra.0>
1102238e:	6d03      	mov      	r4, r0
11022390:	3840      	cmpnei      	r0, 0
11022392:	0805      	bt      	0x1102239c	// 1102239c <get_section_addr+0x42>
11022394:	3700      	movi      	r7, 0

    if (NULL != seach_name) {
        MTB_LOGD("seach_name:%.*s,seach_type:%d,mode:%d", MTB_IMAGE_NAME_SIZE, seach_name, seach_type->father_type.first_type , mode);
    }

    for (; i < sum_scn ; i++) {
11022396:	9862      	ld.w      	r3, (r14, 0x8)
11022398:	64dc      	cmphs      	r7, r3
1102239a:	0c06      	bf      	0x110223a6	// 110223a6 <get_section_addr+0x4c>
        return -1;
1102239c:	3400      	movi      	r4, 0
1102239e:	2c00      	subi      	r4, 1
    return -1;
succ:
    MTB_LOGD("s scn_t:%x", (uint32_t)scn_head);
    *scn_addr = (uint32_t)scn_head;
    return 0;
}
110223a0:	6c13      	mov      	r0, r4
110223a2:	1408      	addi      	r14, r14, 32
110223a4:	1494      	pop      	r4-r7, r15
        if (scn_head->type.father_type.first_type == seach_type->father_type.first_type) {
110223a6:	9804      	ld.w      	r0, (r14, 0x10)
110223a8:	8560      	ld.b      	r3, (r5, 0x0)
110223aa:	8020      	ld.b      	r1, (r0, 0x0)
110223ac:	c4612442 	xor      	r2, r1, r3
110223b0:	e44220f0 	andi      	r2, r2, 240
110223b4:	b861      	st.w      	r3, (r14, 0x4)
110223b6:	3a40      	cmpnei      	r2, 0
110223b8:	0c07      	bf      	0x110223c6	// 110223c6 <get_section_addr+0x6c>
        scn_head = (scn_head_t *)(NEXT_SECTION(scn_head));
110223ba:	9864      	ld.w      	r3, (r14, 0x10)
    for (; i < sum_scn ; i++) {
110223bc:	2700      	addi      	r7, 1
        scn_head = (scn_head_t *)(NEXT_SECTION(scn_head));
110223be:	9341      	ld.w      	r2, (r3, 0x4)
110223c0:	60c8      	addu      	r3, r2
110223c2:	b864      	st.w      	r3, (r14, 0x10)
110223c4:	07e9      	br      	0x11022396	// 11022396 <get_section_addr+0x3c>
            if (mode == SEACH_MODE_FIRST_TYPE || ((mode == SEACH_MODE_SON_TYPE) && scn_head->type.son_type == seach_type->son_type) ||
110223c6:	9840      	ld.w      	r2, (r14, 0x0)
110223c8:	3a40      	cmpnei      	r2, 0
110223ca:	0c07      	bf      	0x110223d8	// 110223d8 <get_section_addr+0x7e>
110223cc:	3a41      	cmpnei      	r2, 1
110223ce:	0812      	bt      	0x110223f2	// 110223f2 <get_section_addr+0x98>
110223d0:	8041      	ld.b      	r2, (r0, 0x1)
110223d2:	8561      	ld.b      	r3, (r5, 0x1)
110223d4:	64ca      	cmpne      	r2, r3
                (mode == SEACH_MODE_EXTEND_TYPE && scn_head->type.son_type == seach_type->son_type && scn_head->type.father_type.extend_type == seach_type->father_type.extend_type)) {
110223d6:	0bf2      	bt      	0x110223ba	// 110223ba <get_section_addr+0x60>
                if (seach_name == NULL) {
110223d8:	3e40      	cmpnei      	r6, 0
110223da:	0c08      	bf      	0x110223ea	// 110223ea <get_section_addr+0x90>
                    if (!strncmp((char *)(img_info_t->image_name), (char *)s_name, MTB_IMAGE_NAME_SIZE)) {
110223dc:	3208      	movi      	r2, 8
                    img_info_t = GET_SECTION_IMG_INFO_PTR(scn_head);
110223de:	2007      	addi      	r0, 8
                    if (!strncmp((char *)(img_info_t->image_name), (char *)s_name, MTB_IMAGE_NAME_SIZE)) {
110223e0:	1905      	addi      	r1, r14, 20
110223e2:	e3ffd7ab 	bsr      	0x1101d338	// 1101d338 <__GI_strncmp>
110223e6:	3840      	cmpnei      	r0, 0
110223e8:	0be9      	bt      	0x110223ba	// 110223ba <get_section_addr+0x60>
    *scn_addr = (uint32_t)scn_head;
110223ea:	9863      	ld.w      	r3, (r14, 0xc)
110223ec:	9844      	ld.w      	r2, (r14, 0x10)
110223ee:	b340      	st.w      	r2, (r3, 0x0)
    return 0;
110223f0:	07d8      	br      	0x110223a0	// 110223a0 <get_section_addr+0x46>
            if (mode == SEACH_MODE_FIRST_TYPE || ((mode == SEACH_MODE_SON_TYPE) && scn_head->type.son_type == seach_type->son_type) ||
110223f2:	9840      	ld.w      	r2, (r14, 0x0)
110223f4:	3a42      	cmpnei      	r2, 2
110223f6:	0be2      	bt      	0x110223ba	// 110223ba <get_section_addr+0x60>
                (mode == SEACH_MODE_EXTEND_TYPE && scn_head->type.son_type == seach_type->son_type && scn_head->type.father_type.extend_type == seach_type->father_type.extend_type)) {
110223f8:	8041      	ld.b      	r2, (r0, 0x1)
110223fa:	6ccb      	mov      	r3, r2
110223fc:	8541      	ld.b      	r2, (r5, 0x1)
110223fe:	648e      	cmpne      	r3, r2
11022400:	0bdd      	bt      	0x110223ba	// 110223ba <get_section_addr+0x60>
11022402:	9861      	ld.w      	r3, (r14, 0x4)
11022404:	64c6      	cmpne      	r1, r3
11022406:	07e8      	br      	0x110223d6	// 110223d6 <get_section_addr+0x7c>

11022408 <mtbv_get_part_info>:
 * @param[out]   addr           partion  size
 * @param[out]   size           partion  size
 * @return      0 suc ; -1 on failure
 */
int mtbv_get_part_info(uint8_t *name, uint32_t *part_addr, uint32_t *part_size)
{
11022408:	14d4      	push      	r4-r7, r15
1102240a:	1425      	subi      	r14, r14, 20
1102240c:	6d8b      	mov      	r6, r2
1102240e:	b821      	st.w      	r1, (r14, 0x4)
11022410:	6d03      	mov      	r4, r0
    uint32_t im_addr;
    uint32_t scn_partion;
    
    im_addr = mtb_get()->using_addr;
11022412:	e3ffff81 	bsr      	0x11022314	// 11022314 <mtb_get>
    if (GET_PARTION_SCN_ADDR(im_addr, &scn_partion)) {
11022416:	3302      	movi      	r3, 2
11022418:	9000      	ld.w      	r0, (r0, 0x0)
1102241a:	3200      	movi      	r2, 0
1102241c:	b860      	st.w      	r3, (r14, 0x0)
1102241e:	1b02      	addi      	r3, r14, 8
11022420:	1125      	lrw      	r1, 0x11011668	// 110224b4 <mtbv_get_part_info+0xac>
11022422:	e3ffff9c 	bsr      	0x1102235a	// 1102235a <get_section_addr>
11022426:	3840      	cmpnei      	r0, 0
11022428:	0820      	bt      	0x11022468	// 11022468 <mtbv_get_part_info+0x60>
    name_len = strlen((const char *)seach_name);
1102242a:	6c13      	mov      	r0, r4
        MTB_LOGE("no scnpart");
        return -1;
    }

    if (get_part_info_sub(scn_partion, name, part_addr, part_size)) {
1102242c:	98a2      	ld.w      	r5, (r14, 0x8)
    name_len = strlen((const char *)seach_name);
1102242e:	e3ffd643 	bsr      	0x1101d0b4	// 1101d0b4 <__strlen_fast>
11022432:	6dc3      	mov      	r7, r0
    memset(s_name, 0, sizeof(s_name));
11022434:	3208      	movi      	r2, 8
11022436:	3100      	movi      	r1, 0
11022438:	1803      	addi      	r0, r14, 12
1102243a:	e3ffd5e9 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
    memcpy(s_name, seach_name, name_len);
1102243e:	3f08      	cmphsi      	r7, 9
11022440:	3208      	movi      	r2, 8
11022442:	c4470c20 	incf      	r2, r7, 0
11022446:	6c53      	mov      	r1, r4
11022448:	1803      	addi      	r0, r14, 12
1102244a:	e00035bb 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
    part_num = (((scn_head_t *)scn_partion)->size - sizeof(scn_head_t)) / sizeof(scn_partion_info_t);
1102244e:	3118      	movi      	r1, 24
    scn_partion_info_t *part_info = (scn_partion_info_t *)(scn_partion + sizeof(scn_head_t));
11022450:	5d9e      	addi      	r4, r5, 8
    part_num = (((scn_head_t *)scn_partion)->size - sizeof(scn_head_t)) / sizeof(scn_partion_info_t);
11022452:	9501      	ld.w      	r0, (r5, 0x4)
11022454:	2807      	subi      	r0, 8
11022456:	e3ffcad3 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1102245a:	6c93      	mov      	r2, r4
1102245c:	40a1      	lsli      	r5, r0, 1
1102245e:	6014      	addu      	r0, r5
11022460:	40a3      	lsli      	r5, r0, 3
11022462:	6150      	addu      	r5, r4
    for (; i < part_num; i++) {
11022464:	6496      	cmpne      	r5, r2
11022466:	0804      	bt      	0x1102246e	// 1102246e <mtbv_get_part_info+0x66>
        MTB_LOGE("e seach scn_partion_name:%.*s", MTB_IMAGE_NAME_SIZE, name);
        return -1;
11022468:	3400      	movi      	r4, 0
1102246a:	2c00      	subi      	r4, 1
1102246c:	0415      	br      	0x11022496	// 11022496 <mtbv_get_part_info+0x8e>
        if (!strncmp((char *)(part_info[i].image_name), (char *)(s_name), MTB_IMAGE_NAME_SIZE)) {
1102246e:	6dcb      	mov      	r7, r2
11022470:	6c1f      	mov      	r0, r7
11022472:	3208      	movi      	r2, 8
11022474:	1903      	addi      	r1, r14, 12
11022476:	e3ffd761 	bsr      	0x1101d338	// 1101d338 <__GI_strncmp>
1102247a:	6d03      	mov      	r4, r0
1102247c:	3840      	cmpnei      	r0, 0
1102247e:	e4470017 	addi      	r2, r7, 24
11022482:	0bf1      	bt      	0x11022464	// 11022464 <mtbv_get_part_info+0x5c>
            if (mtb_version() == 1) {
11022484:	e3ffff4c 	bsr      	0x1102231c	// 1102231c <mtb_version>
11022488:	3841      	cmpnei      	r0, 1
1102248a:	0809      	bt      	0x1102249c	// 1102249c <mtbv_get_part_info+0x94>
                *size = (uint32_t)(part_info[i].part_end);
1102248c:	9764      	ld.w      	r3, (r7, 0x10)
1102248e:	b660      	st.w      	r3, (r6, 0x0)
            *addr = (uint32_t)(part_info[i].part_addr);
11022490:	9861      	ld.w      	r3, (r14, 0x4)
11022492:	9742      	ld.w      	r2, (r7, 0x8)
11022494:	b340      	st.w      	r2, (r3, 0x0)
    }

    return 0;
}
11022496:	6c13      	mov      	r0, r4
11022498:	1405      	addi      	r14, r14, 20
1102249a:	1494      	pop      	r4-r7, r15
            } else if (mtb_version() == 2) {
1102249c:	e3ffff40 	bsr      	0x1102231c	// 1102231c <mtb_version>
110224a0:	3842      	cmpnei      	r0, 2
110224a2:	0806      	bt      	0x110224ae	// 110224ae <mtbv_get_part_info+0xa6>
                *size = (uint32_t)(part_info[i].part_end - part_info[i].part_addr);
110224a4:	9744      	ld.w      	r2, (r7, 0x10)
110224a6:	9722      	ld.w      	r1, (r7, 0x8)
110224a8:	6086      	subu      	r2, r1
110224aa:	b640      	st.w      	r2, (r6, 0x0)
110224ac:	07f2      	br      	0x11022490	// 11022490 <mtbv_get_part_info+0x88>
            } else if (mtb_version() == 4) {
110224ae:	e3ffff37 	bsr      	0x1102231c	// 1102231c <mtb_version>
110224b2:	07ef      	br      	0x11022490	// 11022490 <mtbv_get_part_info+0x88>
110224b4:	11011668 	.long	0x11011668

110224b8 <mtbv_init>:
#endif
    return 0;
}

int mtbv_init(void)
{
110224b8:	14d1      	push      	r4, r15
110224ba:	1422      	subi      	r14, r14, 8
    mtb_t *mtb = mtb_get();
110224bc:	e3ffff2c 	bsr      	0x11022314	// 11022314 <mtb_get>
110224c0:	6d03      	mov      	r4, r0
    uint32_t part_addr, part_size;

    if (mtbv_get_part_info((uint8_t *)MTB_IMAGE_NAME_IMTB, &part_addr, &part_size)) {
110224c2:	6c7b      	mov      	r1, r14
110224c4:	100c      	lrw      	r0, 0x1101166a	// 110224f4 <mtbv_init+0x3c>
110224c6:	1a01      	addi      	r2, r14, 4
110224c8:	e3ffffa0 	bsr      	0x11022408	// 11022408 <mtbv_get_part_info>
110224cc:	3840      	cmpnei      	r0, 0
110224ce:	080f      	bt      	0x110224ec	// 110224ec <mtbv_init+0x34>
        return -1;
    }

    mtb->one_size = part_size >> 1;
    if (mtb->prim_addr == part_addr) {
110224d0:	9840      	ld.w      	r2, (r14, 0x0)
110224d2:	9421      	ld.w      	r1, (r4, 0x4)
    mtb->one_size = part_size >> 1;
110224d4:	9861      	ld.w      	r3, (r14, 0x4)
    if (mtb->prim_addr == part_addr) {
110224d6:	6486      	cmpne      	r1, r2
    mtb->one_size = part_size >> 1;
110224d8:	4b61      	lsri      	r3, r3, 1
110224da:	ac66      	st.h      	r3, (r4, 0xc)
    if (mtb->prim_addr == part_addr) {
110224dc:	0806      	bt      	0x110224e8	// 110224e8 <mtbv_init+0x30>
        mtb->backup_addr = part_addr + mtb->one_size;
110224de:	74cd      	zexth      	r3, r3
110224e0:	60c4      	addu      	r3, r1
110224e2:	b462      	st.w      	r3, (r4, 0x8)
    } else {
        mtb->backup_addr = part_addr;
    }
    return 0;
}
110224e4:	1402      	addi      	r14, r14, 8
110224e6:	1491      	pop      	r4, r15
        mtb->backup_addr = part_addr;
110224e8:	b442      	st.w      	r2, (r4, 0x8)
110224ea:	07fd      	br      	0x110224e4	// 110224e4 <mtbv_init+0x2c>
        return -1;
110224ec:	3000      	movi      	r0, 0
110224ee:	2800      	subi      	r0, 1
110224f0:	07fa      	br      	0x110224e4	// 110224e4 <mtbv_init+0x2c>
110224f2:	0000      	bkpt
110224f4:	1101166a 	.long	0x1101166a

110224f8 <mtbv4_partition_count>:
#if !defined(CONFIG_MANTB_VERSION) || (CONFIG_MANTB_VERSION > 3)

static uint32_t g_flash_base_addr;

int mtbv4_partition_count(void)
{
110224f8:	14d0      	push      	r15
    imtb_head_v4_t *head;

    head = (imtb_head_v4_t *)mtb_get()->using_addr;
110224fa:	e3ffff0d 	bsr      	0x11022314	// 11022314 <mtb_get>
    return head->partition_count;
110224fe:	9060      	ld.w      	r3, (r0, 0x0)
11022500:	8b0a      	ld.h      	r0, (r3, 0x14)
}
11022502:	1490      	pop      	r15

11022504 <mtbv4_get_partition_info>:
    MTB_LOGD("mtb init over");
    return 0;
}

int mtbv4_get_partition_info(const char *name, mtb_partition_info_t *part_info)
{
11022504:	14d4      	push      	r4-r7, r15
11022506:	1423      	subi      	r14, r14, 12
11022508:	6dc3      	mov      	r7, r0
    int i, count;
    uint32_t flash_base_addr;
    imtb_head_v4_t *head;
    imtb_partition_info_v4_t *pp;

    if (name && part_info) {
1102250a:	3840      	cmpnei      	r0, 0
{
1102250c:	6d47      	mov      	r5, r1
    if (name && part_info) {
1102250e:	0806      	bt      	0x1102251a	// 1102251a <mtbv4_get_partition_info+0x16>
            }
            pp ++;
        }
    }

    return -EINVAL;
11022510:	3600      	movi      	r6, 0
11022512:	2e15      	subi      	r6, 22
}
11022514:	6c1b      	mov      	r0, r6
11022516:	1403      	addi      	r14, r14, 12
11022518:	1494      	pop      	r4-r7, r15
    if (name && part_info) {
1102251a:	3940      	cmpnei      	r1, 0
1102251c:	0ffa      	bf      	0x11022510	// 11022510 <mtbv4_get_partition_info+0xc>
        head = (imtb_head_v4_t *)mtb_get()->using_addr;
1102251e:	e3fffefb 	bsr      	0x11022314	// 11022314 <mtb_get>
11022522:	90c0      	ld.w      	r6, (r0, 0x0)
        pp = (imtb_partition_info_v4_t *)(mtb_get()->using_addr + sizeof(imtb_head_v4_t) + MTB_OS_VERSION_LEN_V4);
11022524:	e3fffef8 	bsr      	0x11022314	// 11022314 <mtb_get>
        count = head->partition_count;
11022528:	8e6a      	ld.h      	r3, (r6, 0x14)
        pp = (imtb_partition_info_v4_t *)(mtb_get()->using_addr + sizeof(imtb_head_v4_t) + MTB_OS_VERSION_LEN_V4);
1102252a:	9080      	ld.w      	r4, (r0, 0x0)
        count = head->partition_count;
1102252c:	b860      	st.w      	r3, (r14, 0x0)
        pp = (imtb_partition_info_v4_t *)(mtb_get()->using_addr + sizeof(imtb_head_v4_t) + MTB_OS_VERSION_LEN_V4);
1102252e:	2457      	addi      	r4, 88
        flash_base_addr = g_flash_base_addr;
11022530:	1077      	lrw      	r3, 0x1fffb2ac	// 1102258c <mtbv4_get_partition_info+0x88>
11022532:	9360      	ld.w      	r3, (r3, 0x0)
11022534:	b861      	st.w      	r3, (r14, 0x4)
        for (i = 0; i < count; i++) {
11022536:	3300      	movi      	r3, 0
11022538:	9840      	ld.w      	r2, (r14, 0x0)
1102253a:	648d      	cmplt      	r3, r2
1102253c:	0fea      	bf      	0x11022510	// 11022510 <mtbv4_get_partition_info+0xc>
            if (strncmp(pp->name, name, MTB_IMAGE_NAME_SIZE) == 0) {
1102253e:	3208      	movi      	r2, 8
11022540:	6c5f      	mov      	r1, r7
11022542:	6c13      	mov      	r0, r4
11022544:	b862      	st.w      	r3, (r14, 0x8)
11022546:	e3ffd6f9 	bsr      	0x1101d338	// 1101d338 <__GI_strncmp>
1102254a:	6d83      	mov      	r6, r0
1102254c:	3840      	cmpnei      	r0, 0
1102254e:	9862      	ld.w      	r3, (r14, 0x8)
11022550:	081b      	bt      	0x11022586	// 11022586 <mtbv4_get_partition_info+0x82>
                part_info->start_addr = flash_base_addr + pp->block_offset * 512;
11022552:	9465      	ld.w      	r3, (r4, 0x14)
11022554:	9841      	ld.w      	r2, (r14, 0x4)
11022556:	4369      	lsli      	r3, r3, 9
11022558:	60c8      	addu      	r3, r2
1102255a:	b564      	st.w      	r3, (r5, 0x10)
                memcpy(part_info->pub_key_name, pp->pub_key_name, PUBLIC_KEY_NAME_SIZE);
1102255c:	5c3e      	addi      	r1, r4, 8
                part_info->end_addr = part_info->start_addr + pp->block_count * 512;
1102255e:	8c49      	ld.h      	r2, (r4, 0x12)
11022560:	4249      	lsli      	r2, r2, 9
11022562:	60c8      	addu      	r3, r2
11022564:	b565      	st.w      	r3, (r5, 0x14)
                memcpy(part_info->pub_key_name, pp->pub_key_name, PUBLIC_KEY_NAME_SIZE);
11022566:	3208      	movi      	r2, 8
                part_info->load_addr = pp->load_address;
11022568:	9466      	ld.w      	r3, (r4, 0x18)
                memcpy(part_info->pub_key_name, pp->pub_key_name, PUBLIC_KEY_NAME_SIZE);
1102256a:	5d1e      	addi      	r0, r5, 8
                part_info->load_addr = pp->load_address;
1102256c:	b566      	st.w      	r3, (r5, 0x18)
                memcpy(part_info->pub_key_name, pp->pub_key_name, PUBLIC_KEY_NAME_SIZE);
1102256e:	e0003529 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
                memcpy(part_info->name, pp->name, MTB_IMAGE_NAME_SIZE);
11022572:	3208      	movi      	r2, 8
11022574:	6c53      	mov      	r1, r4
11022576:	6c17      	mov      	r0, r5
11022578:	e0003524 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
                part_info->part_type = pp->partition_type;
1102257c:	8c68      	ld.h      	r3, (r4, 0x10)
1102257e:	ad70      	st.h      	r3, (r5, 0x20)
                part_info->img_size = pp->img_size;
11022580:	9467      	ld.w      	r3, (r4, 0x1c)
11022582:	b567      	st.w      	r3, (r5, 0x1c)
                return 0;
11022584:	07c8      	br      	0x11022514	// 11022514 <mtbv4_get_partition_info+0x10>
            pp ++;
11022586:	241f      	addi      	r4, 32
        for (i = 0; i < count; i++) {
11022588:	2300      	addi      	r3, 1
1102258a:	07d7      	br      	0x11022538	// 11022538 <mtbv4_get_partition_info+0x34>
1102258c:	1fffb2ac 	.long	0x1fffb2ac

11022590 <mtbv4_init>:
{
11022590:	14d2      	push      	r4-r5, r15
11022592:	142c      	subi      	r14, r14, 48
    mtb = mtb_get();
11022594:	e3fffec0 	bsr      	0x11022314	// 11022314 <mtb_get>
11022598:	6d03      	mov      	r4, r0
    void *handle = partition_flash_open(0);
1102259a:	3000      	movi      	r0, 0
1102259c:	e0000240 	bsr      	0x11022a1c	// 11022a1c <partition_flash_open>
    partition_flash_info_get(handle, &flash_info);
110225a0:	6c7b      	mov      	r1, r14
    void *handle = partition_flash_open(0);
110225a2:	6d43      	mov      	r5, r0
    partition_flash_info_get(handle, &flash_info);
110225a4:	e0000254 	bsr      	0x11022a4c	// 11022a4c <partition_flash_info_get>
    partition_flash_close(handle);
110225a8:	6c17      	mov      	r0, r5
110225aa:	e0000245 	bsr      	0x11022a34	// 11022a34 <partition_flash_close>
    g_flash_base_addr = flash_info.start_addr;
110225ae:	106f      	lrw      	r3, 0x1fffb2ac	// 110225e8 <mtbv4_init+0x58>
    if (mtbv4_get_partition_info(MTB_IMAGE_NAME_IMTB, &part_info)) {
110225b0:	100f      	lrw      	r0, 0x1101166a	// 110225ec <mtbv4_init+0x5c>
110225b2:	1903      	addi      	r1, r14, 12
    g_flash_base_addr = flash_info.start_addr;
110225b4:	9840      	ld.w      	r2, (r14, 0x0)
110225b6:	b340      	st.w      	r2, (r3, 0x0)
    if (mtbv4_get_partition_info(MTB_IMAGE_NAME_IMTB, &part_info)) {
110225b8:	e3ffffa6 	bsr      	0x11022504	// 11022504 <mtbv4_get_partition_info>
110225bc:	3840      	cmpnei      	r0, 0
110225be:	0811      	bt      	0x110225e0	// 110225e0 <mtbv4_init+0x50>
    mtb->one_size = (part_info.end_addr - part_info.start_addr) >> 1;
110225c0:	9847      	ld.w      	r2, (r14, 0x1c)
110225c2:	9868      	ld.w      	r3, (r14, 0x20)
110225c4:	60ca      	subu      	r3, r2
110225c6:	4b61      	lsri      	r3, r3, 1
110225c8:	ac66      	st.h      	r3, (r4, 0xc)
    if (mtb->prim_addr == part_info.start_addr) {
110225ca:	9421      	ld.w      	r1, (r4, 0x4)
110225cc:	9847      	ld.w      	r2, (r14, 0x1c)
110225ce:	6486      	cmpne      	r1, r2
110225d0:	0806      	bt      	0x110225dc	// 110225dc <mtbv4_init+0x4c>
        mtb->backup_addr = part_info.start_addr + mtb->one_size;
110225d2:	74cd      	zexth      	r3, r3
110225d4:	60c4      	addu      	r3, r1
110225d6:	b462      	st.w      	r3, (r4, 0x8)
}
110225d8:	140c      	addi      	r14, r14, 48
110225da:	1492      	pop      	r4-r5, r15
        mtb->backup_addr = part_info.start_addr;
110225dc:	b442      	st.w      	r2, (r4, 0x8)
110225de:	07fd      	br      	0x110225d8	// 110225d8 <mtbv4_init+0x48>
        return -1;
110225e0:	3000      	movi      	r0, 0
110225e2:	2800      	subi      	r0, 1
110225e4:	07fa      	br      	0x110225d8	// 110225d8 <mtbv4_init+0x48>
110225e6:	0000      	bkpt
110225e8:	1fffb2ac 	.long	0x1fffb2ac
110225ec:	1101166a 	.long	0x1101166a

110225f0 <mtbv4_get_partition_info_with_index>:

int mtbv4_get_partition_info_with_index(int index, mtb_partition_info_t *part_info)
{
110225f0:	14d4      	push      	r4-r7, r15
110225f2:	6d83      	mov      	r6, r0
    int count;
    uint32_t flash_base_addr;
    imtb_head_v4_t *head;
    imtb_partition_info_v4_t *pp;

    if (part_info) {
110225f4:	3940      	cmpnei      	r1, 0
{
110225f6:	6d47      	mov      	r5, r1
    if (part_info) {
110225f8:	0804      	bt      	0x11022600	// 11022600 <mtbv4_get_partition_info_with_index+0x10>
            part_info->img_size = pp->img_size;
            return 0;            
        }
    }

    return -EINVAL;
110225fa:	3000      	movi      	r0, 0
110225fc:	2815      	subi      	r0, 22
}
110225fe:	1494      	pop      	r4-r7, r15
        head = (imtb_head_v4_t *)mtb_get()->using_addr;
11022600:	e3fffe8a 	bsr      	0x11022314	// 11022314 <mtb_get>
11022604:	90e0      	ld.w      	r7, (r0, 0x0)
        pp = (imtb_partition_info_v4_t *)(mtb_get()->using_addr + sizeof(imtb_head_v4_t) + MTB_OS_VERSION_LEN_V4);
11022606:	e3fffe87 	bsr      	0x11022314	// 11022314 <mtb_get>
        count = head->partition_count;
1102260a:	8f6a      	ld.h      	r3, (r7, 0x14)
        pp = (imtb_partition_info_v4_t *)(mtb_get()->using_addr + sizeof(imtb_head_v4_t) + MTB_OS_VERSION_LEN_V4);
1102260c:	9080      	ld.w      	r4, (r0, 0x0)
        if (index < count) {
1102260e:	64d9      	cmplt      	r6, r3
        pp = (imtb_partition_info_v4_t *)(mtb_get()->using_addr + sizeof(imtb_head_v4_t) + MTB_OS_VERSION_LEN_V4);
11022610:	2457      	addi      	r4, 88
        if (index < count) {
11022612:	0ff4      	bf      	0x110225fa	// 110225fa <mtbv4_get_partition_info_with_index+0xa>
            pp += index;
11022614:	46c5      	lsli      	r6, r6, 5
            flash_base_addr = g_flash_base_addr;
11022616:	104f      	lrw      	r2, 0x1fffb2ac	// 11022650 <mtbv4_get_partition_info_with_index+0x60>
            pp += index;
11022618:	6118      	addu      	r4, r6
            part_info->start_addr = flash_base_addr + pp->block_offset * 512;
1102261a:	9465      	ld.w      	r3, (r4, 0x14)
1102261c:	9240      	ld.w      	r2, (r2, 0x0)
1102261e:	4369      	lsli      	r3, r3, 9
11022620:	60c8      	addu      	r3, r2
11022622:	b564      	st.w      	r3, (r5, 0x10)
            memcpy(part_info->pub_key_name, pp->pub_key_name, PUBLIC_KEY_NAME_SIZE);
11022624:	5c3e      	addi      	r1, r4, 8
            part_info->end_addr = part_info->start_addr + pp->block_count * 512;
11022626:	8c49      	ld.h      	r2, (r4, 0x12)
11022628:	4249      	lsli      	r2, r2, 9
1102262a:	60c8      	addu      	r3, r2
1102262c:	b565      	st.w      	r3, (r5, 0x14)
            memcpy(part_info->pub_key_name, pp->pub_key_name, PUBLIC_KEY_NAME_SIZE);
1102262e:	3208      	movi      	r2, 8
            part_info->load_addr = pp->load_address;
11022630:	9466      	ld.w      	r3, (r4, 0x18)
            memcpy(part_info->pub_key_name, pp->pub_key_name, PUBLIC_KEY_NAME_SIZE);
11022632:	5d1e      	addi      	r0, r5, 8
            part_info->load_addr = pp->load_address;
11022634:	b566      	st.w      	r3, (r5, 0x18)
            memcpy(part_info->pub_key_name, pp->pub_key_name, PUBLIC_KEY_NAME_SIZE);
11022636:	e00034c5 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
            memcpy(part_info->name, pp->name, MTB_IMAGE_NAME_SIZE);
1102263a:	3208      	movi      	r2, 8
1102263c:	6c53      	mov      	r1, r4
1102263e:	6c17      	mov      	r0, r5
11022640:	e00034c0 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
            part_info->part_type = pp->partition_type;
11022644:	8c68      	ld.h      	r3, (r4, 0x10)
            return 0;            
11022646:	3000      	movi      	r0, 0
            part_info->part_type = pp->partition_type;
11022648:	ad70      	st.h      	r3, (r5, 0x20)
            part_info->img_size = pp->img_size;
1102264a:	9467      	ld.w      	r3, (r4, 0x1c)
1102264c:	b567      	st.w      	r3, (r5, 0x1c)
            return 0;            
1102264e:	07d8      	br      	0x110225fe	// 110225fe <mtbv4_get_partition_info_with_index+0xe>
11022650:	1fffb2ac 	.long	0x1fffb2ac

11022654 <partition_init>:
    uint8_t num;
} g_partion_array;
static uint32_t g_scn_buf[sizeof(partition_info_t) * CONFIG_MAX_PARTITION_NUM / 4];

int partition_init(void)
{
11022654:	14d4      	push      	r4-r7, r15
11022656:	1631      	subi      	r14, r14, 324
#define BUF_SIZE (sizeof(sys_partition_info_t) * CONFIG_MAX_PARTITION_NUM)
    int i, ret, num, flash_idx = 0, size;
    uint8_t buf[BUF_SIZE];
    sys_partition_info_t *part_info;
    partition_flash_info_t cur_flash_info = {0};
11022658:	320c      	movi      	r2, 12
1102265a:	3100      	movi      	r1, 0
1102265c:	1806      	addi      	r0, r14, 24
1102265e:	e3ffd4d7 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
    void *temp_flash_dev;
    static int g_part_init_ok = 0;

    if (g_part_init_ok == 1) {
11022662:	1268      	lrw      	r3, 0x1fffb2b0	// 11022780 <partition_init+0x12c>
11022664:	b864      	st.w      	r3, (r14, 0x10)
11022666:	9340      	ld.w      	r2, (r3, 0x0)
11022668:	3a41      	cmpnei      	r2, 1
1102266a:	0806      	bt      	0x11022676	// 11022676 <partition_init+0x22>
        return g_partion_array.num;
1102266c:	1266      	lrw      	r3, 0x1fffb2b4	// 11022784 <partition_init+0x130>
1102266e:	8384      	ld.b      	r4, (r3, 0x4)
    g_partion_array.num = num;

    g_part_init_ok = 1;

    return num;
}
11022670:	6c13      	mov      	r0, r4
11022672:	1611      	addi      	r14, r14, 324
11022674:	1494      	pop      	r4-r7, r15
    ret = mtb_init();
11022676:	e3fffd89 	bsr      	0x11022188	// 11022188 <mtb_init>
    if (ret == 0)
1102267a:	3840      	cmpnei      	r0, 0
1102267c:	0805      	bt      	0x11022686	// 11022686 <partition_init+0x32>
        ret = get_sys_partition(buf, (uint32_t *)&size);
1102267e:	1905      	addi      	r1, r14, 20
11022680:	1809      	addi      	r0, r14, 36
11022682:	e3fffdcd 	bsr      	0x1102221c	// 1102221c <get_sys_partition>
    if (ret < 0 || size > BUF_SIZE) {
11022686:	38df      	btsti      	r0, 31
11022688:	0c04      	bf      	0x11022690	// 11022690 <partition_init+0x3c>
        return -1;
1102268a:	3400      	movi      	r4, 0
1102268c:	2c00      	subi      	r4, 1
1102268e:	07f1      	br      	0x11022670	// 11022670 <partition_init+0x1c>
    if (ret < 0 || size > BUF_SIZE) {
11022690:	9805      	ld.w      	r0, (r14, 0x14)
11022692:	eb000120 	cmphsi      	r0, 289
11022696:	0bfa      	bt      	0x1102268a	// 1102268a <partition_init+0x36>
    num = size / sizeof(sys_partition_info_t);
11022698:	3124      	movi      	r1, 36
    int i, ret, num, flash_idx = 0, size;
1102269a:	3600      	movi      	r6, 0
    num = size / sizeof(sys_partition_info_t);
1102269c:	e3ffc9b0 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
    g_partion_array.scn_list = (partition_info_t *)g_scn_buf;
110226a0:	1179      	lrw      	r3, 0x1fffb2b4	// 11022784 <partition_init+0x130>
110226a2:	115a      	lrw      	r2, 0x1fffb2bc	// 11022788 <partition_init+0x134>
    num = size / sizeof(sys_partition_info_t);
110226a4:	6d03      	mov      	r4, r0
110226a6:	b801      	st.w      	r0, (r14, 0x4)
    g_partion_array.scn_list = (partition_info_t *)g_scn_buf;
110226a8:	b340      	st.w      	r2, (r3, 0x0)
110226aa:	b863      	st.w      	r3, (r14, 0xc)
        memset(&cur_flash_info, 0, sizeof(partition_flash_info_t));
110226ac:	320c      	movi      	r2, 12
110226ae:	3100      	movi      	r1, 0
110226b0:	1806      	addi      	r0, r14, 24
110226b2:	e3ffd4ad 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
        temp_flash_dev = partition_flash_open(flash_idx);
110226b6:	6c1b      	mov      	r0, r6
110226b8:	e00001b2 	bsr      	0x11022a1c	// 11022a1c <partition_flash_open>
        partition_flash_info_get(temp_flash_dev, &cur_flash_info);
110226bc:	1906      	addi      	r1, r14, 24
        temp_flash_dev = partition_flash_open(flash_idx);
110226be:	b802      	st.w      	r0, (r14, 0x8)
        partition_flash_info_get(temp_flash_dev, &cur_flash_info);
110226c0:	e00001c6 	bsr      	0x11022a4c	// 11022a4c <partition_flash_info_get>
        if (cur_flash_info.sector_count > 0) {
110226c4:	9868      	ld.w      	r3, (r14, 0x20)
110226c6:	3b40      	cmpnei      	r3, 0
110226c8:	080f      	bt      	0x110226e6	// 110226e6 <partition_init+0x92>
        partition_flash_close(temp_flash_dev);
110226ca:	9802      	ld.w      	r0, (r14, 0x8)
        flash_idx++;
110226cc:	2600      	addi      	r6, 1
        partition_flash_close(temp_flash_dev);
110226ce:	e00001b3 	bsr      	0x11022a34	// 11022a34 <partition_flash_close>
    while(flash_idx < MAX_FLASH_NUM) {
110226d2:	3e44      	cmpnei      	r6, 4
110226d4:	0bec      	bt      	0x110226ac	// 110226ac <partition_init+0x58>
    g_partion_array.num = num;
110226d6:	9863      	ld.w      	r3, (r14, 0xc)
110226d8:	d84e0004 	ld.b      	r2, (r14, 0x4)
110226dc:	a344      	st.b      	r2, (r3, 0x4)
    g_part_init_ok = 1;
110226de:	9864      	ld.w      	r3, (r14, 0x10)
110226e0:	3201      	movi      	r2, 1
110226e2:	b340      	st.w      	r2, (r3, 0x0)
    return num;
110226e4:	07c6      	br      	0x11022670	// 11022670 <partition_init+0x1c>
110226e6:	1b09      	addi      	r3, r14, 36
        if (cur_flash_info.sector_count > 0) {
110226e8:	3500      	movi      	r5, 0
110226ea:	b860      	st.w      	r3, (r14, 0x0)
            for (i = 0; i < num; i++) {
110226ec:	9861      	ld.w      	r3, (r14, 0x4)
110226ee:	64d5      	cmplt      	r5, r3
110226f0:	0fed      	bf      	0x110226ca	// 110226ca <partition_init+0x76>
                if ((cur_flash_info.start_addr <= part_info[i].part_addr) &&
110226f2:	9860      	ld.w      	r3, (r14, 0x0)
110226f4:	98e6      	ld.w      	r7, (r14, 0x18)
110226f6:	9302      	ld.w      	r0, (r3, 0x8)
110226f8:	9323      	ld.w      	r1, (r3, 0xc)
110226fa:	3940      	cmpnei      	r1, 0
110226fc:	0808      	bt      	0x1102270c	// 1102270c <partition_init+0xb8>
110226fe:	65c0      	cmphs      	r0, r7
11022700:	0806      	bt      	0x1102270c	// 1102270c <partition_init+0xb8>
11022702:	9860      	ld.w      	r3, (r14, 0x0)
11022704:	2323      	addi      	r3, 36
            for (i = 0; i < num; i++) {
11022706:	2500      	addi      	r5, 1
11022708:	b860      	st.w      	r3, (r14, 0x0)
1102270a:	07f1      	br      	0x110226ec	// 110226ec <partition_init+0x98>
                    ((part_info[i].part_addr + part_info[i].part_size) <= (cur_flash_info.start_addr + cur_flash_info.sector_size * cur_flash_info.sector_count))) {
1102270c:	9860      	ld.w      	r3, (r14, 0x0)
1102270e:	9344      	ld.w      	r2, (r3, 0x10)
11022710:	9365      	ld.w      	r3, (r3, 0x14)
11022712:	6401      	cmplt      	r0, r0
11022714:	6009      	addc      	r0, r2
11022716:	604d      	addc      	r1, r3
11022718:	9847      	ld.w      	r2, (r14, 0x1c)
1102271a:	9868      	ld.w      	r3, (r14, 0x20)
1102271c:	7cc8      	mult      	r3, r2
1102271e:	61cc      	addu      	r7, r3
11022720:	3300      	movi      	r3, 0
                if ((cur_flash_info.start_addr <= part_info[i].part_addr) &&
11022722:	644c      	cmphs      	r3, r1
11022724:	0fef      	bf      	0x11022702	// 11022702 <partition_init+0xae>
11022726:	64c6      	cmpne      	r1, r3
11022728:	0803      	bt      	0x1102272e	// 1102272e <partition_init+0xda>
1102272a:	641c      	cmphs      	r7, r0
1102272c:	0feb      	bf      	0x11022702	// 11022702 <partition_init+0xae>
                    partition_info_t *scn = &g_partion_array.scn_list[i];
1102272e:	9843      	ld.w      	r2, (r14, 0xc)
                    memcpy(scn->description, part_info[i].image_name, MTB_IMAGE_NAME_SIZE);
11022730:	9820      	ld.w      	r1, (r14, 0x0)
                    partition_info_t *scn = &g_partion_array.scn_list[i];
11022732:	45e2      	lsli      	r7, r5, 2
11022734:	61d4      	addu      	r7, r5
11022736:	4763      	lsli      	r3, r7, 3
11022738:	92e0      	ld.w      	r7, (r2, 0x0)
                    memcpy(scn->description, part_info[i].image_name, MTB_IMAGE_NAME_SIZE);
1102273a:	3208      	movi      	r2, 8
                    partition_info_t *scn = &g_partion_array.scn_list[i];
1102273c:	61cc      	addu      	r7, r3
                    memcpy(scn->description, part_info[i].image_name, MTB_IMAGE_NAME_SIZE);
1102273e:	6c1f      	mov      	r0, r7
11022740:	e0003440 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
                    scn->base_addr = cur_flash_info.start_addr;
11022744:	9846      	ld.w      	r2, (r14, 0x18)
                    scn->start_addr = part_info[i].part_addr - cur_flash_info.start_addr;
11022746:	9860      	ld.w      	r3, (r14, 0x0)
                    scn->base_addr = cur_flash_info.start_addr;
11022748:	b742      	st.w      	r2, (r7, 0x8)
                    scn->load_addr = part_info[i].load_addr;
1102274a:	9820      	ld.w      	r1, (r14, 0x0)
                    scn->start_addr = part_info[i].part_addr - cur_flash_info.start_addr;
1102274c:	9362      	ld.w      	r3, (r3, 0x8)
1102274e:	60ca      	subu      	r3, r2
11022750:	b763      	st.w      	r3, (r7, 0xc)
                    scn->length = part_info[i].part_size;
11022752:	9860      	ld.w      	r3, (r14, 0x0)
11022754:	9344      	ld.w      	r2, (r3, 0x10)
                    scn->sector_size = cur_flash_info.sector_size;
11022756:	d86e100e 	ld.h      	r3, (r14, 0x1c)
                    scn->length = part_info[i].part_size;
1102275a:	b744      	st.w      	r2, (r7, 0x10)
                    scn->sector_size = cur_flash_info.sector_size;
1102275c:	af6a      	st.h      	r3, (r7, 0x14)
                    scn->idx = flash_idx;
1102275e:	a7d6      	st.b      	r6, (r7, 0x16)
                    if(!(scn->length && scn->sector_size && strlen(scn->description) > 0)) {
11022760:	3a40      	cmpnei      	r2, 0
                    scn->load_addr = part_info[i].load_addr;
11022762:	9126      	ld.w      	r1, (r1, 0x18)
11022764:	b727      	st.w      	r1, (r7, 0x1c)
                    scn->image_size = part_info[i].image_size;
11022766:	9820      	ld.w      	r1, (r14, 0x0)
11022768:	9128      	ld.w      	r1, (r1, 0x20)
1102276a:	b728      	st.w      	r1, (r7, 0x20)
                    if(!(scn->length && scn->sector_size && strlen(scn->description) > 0)) {
1102276c:	0f8f      	bf      	0x1102268a	// 1102268a <partition_init+0x36>
1102276e:	3b40      	cmpnei      	r3, 0
11022770:	0f8d      	bf      	0x1102268a	// 1102268a <partition_init+0x36>
11022772:	6c1f      	mov      	r0, r7
11022774:	e3ffd4a0 	bsr      	0x1101d0b4	// 1101d0b4 <__strlen_fast>
11022778:	3840      	cmpnei      	r0, 0
1102277a:	0bc4      	bt      	0x11022702	// 11022702 <partition_init+0xae>
1102277c:	0787      	br      	0x1102268a	// 1102268a <partition_init+0x36>
1102277e:	0000      	bkpt
11022780:	1fffb2b0 	.long	0x1fffb2b0
11022784:	1fffb2b4 	.long	0x1fffb2b4
11022788:	1fffb2bc 	.long	0x1fffb2bc

1102278c <partition_info_get>:
partition_info_t *partition_info_get(partition_t partition)
{
#if defined(CONFIG_KERNEL_NONE)
    if (partition >= 0 && partition < g_partion_array.num)
#else
    if (partition >= 0 && partition < g_partion_array.num && g_partion_array.scn_list[partition].flash_dev)
1102278c:	38df      	btsti      	r0, 31
1102278e:	0810      	bt      	0x110227ae	// 110227ae <partition_info_get+0x22>
11022790:	1049      	lrw      	r2, 0x1fffb2b4	// 110227b4 <partition_info_get+0x28>
11022792:	8264      	ld.b      	r3, (r2, 0x4)
11022794:	64c1      	cmplt      	r0, r3
11022796:	0c0c      	bf      	0x110227ae	// 110227ae <partition_info_get+0x22>
11022798:	4062      	lsli      	r3, r0, 2
1102279a:	600c      	addu      	r0, r3
1102279c:	4063      	lsli      	r3, r0, 3
1102279e:	9200      	ld.w      	r0, (r2, 0x0)
110227a0:	600c      	addu      	r0, r3
110227a2:	9066      	ld.w      	r3, (r0, 0x18)
#endif
        return &g_partion_array.scn_list[partition];

    return NULL;
110227a4:	3b40      	cmpnei      	r3, 0
110227a6:	3300      	movi      	r3, 0
110227a8:	c4030c20 	incf      	r0, r3, 0
}
110227ac:	783c      	jmp      	r15
    return NULL;
110227ae:	3000      	movi      	r0, 0
110227b0:	07fe      	br      	0x110227ac	// 110227ac <partition_info_get+0x20>
110227b2:	0000      	bkpt
110227b4:	1fffb2b4 	.long	0x1fffb2b4

110227b8 <partition_open>:

partition_t partition_open(const char *name)
{
110227b8:	14d4      	push      	r4-r7, r15
110227ba:	6dc3      	mov      	r7, r0
    int len;
    for (int i = 0; i < g_partion_array.num; i++) {
110227bc:	3400      	movi      	r4, 0
110227be:	10d5      	lrw      	r6, 0x1fffb2b4	// 11022810 <partition_open+0x58>
110227c0:	8664      	ld.b      	r3, (r6, 0x4)
110227c2:	64d1      	cmplt      	r4, r3
110227c4:	0804      	bt      	0x110227cc	// 110227cc <partition_open+0x14>
            }
            return i;
        }
    }

    return -EINVAL;
110227c6:	3400      	movi      	r4, 0
110227c8:	2c15      	subi      	r4, 22
110227ca:	041e      	br      	0x11022806	// 11022806 <partition_open+0x4e>
        len = strlen(g_partion_array.scn_list[i].description);
110227cc:	9600      	ld.w      	r0, (r6, 0x0)
110227ce:	44a2      	lsli      	r5, r4, 2
110227d0:	6150      	addu      	r5, r4
110227d2:	45a3      	lsli      	r5, r5, 3
110227d4:	6014      	addu      	r0, r5
110227d6:	e3ffd46f 	bsr      	0x1101d0b4	// 1101d0b4 <__strlen_fast>
        len = len > MTB_IMAGE_NAME_SIZE ? MTB_IMAGE_NAME_SIZE : len;
110227da:	3208      	movi      	r2, 8
110227dc:	3828      	cmplti      	r0, 9
110227de:	c4400c40 	inct      	r2, r0, 0
        if (memcmp(name, g_partion_array.scn_list[i].description, len) == 0) {
110227e2:	6c1f      	mov      	r0, r7
110227e4:	9620      	ld.w      	r1, (r6, 0x0)
110227e6:	6054      	addu      	r1, r5
110227e8:	e3ffd4f6 	bsr      	0x1101d1d4	// 1101d1d4 <__memcmp_fast>
110227ec:	3840      	cmpnei      	r0, 0
110227ee:	080e      	bt      	0x1102280a	// 1102280a <partition_open+0x52>
            if (g_partion_array.scn_list[i].flash_dev == NULL) {
110227f0:	9660      	ld.w      	r3, (r6, 0x0)
110227f2:	60d4      	addu      	r3, r5
110227f4:	9346      	ld.w      	r2, (r3, 0x18)
110227f6:	3a40      	cmpnei      	r2, 0
110227f8:	0807      	bt      	0x11022806	// 11022806 <partition_open+0x4e>
                void *flash_dev = partition_flash_open(g_partion_array.scn_list[i].idx);
110227fa:	8316      	ld.b      	r0, (r3, 0x16)
110227fc:	e0000110 	bsr      	0x11022a1c	// 11022a1c <partition_flash_open>
                g_partion_array.scn_list[i].flash_dev = flash_dev;
11022800:	9660      	ld.w      	r3, (r6, 0x0)
11022802:	614c      	addu      	r5, r3
11022804:	b506      	st.w      	r0, (r5, 0x18)
}
11022806:	6c13      	mov      	r0, r4
11022808:	1494      	pop      	r4-r7, r15
    for (int i = 0; i < g_partion_array.num; i++) {
1102280a:	2400      	addi      	r4, 1
1102280c:	07da      	br      	0x110227c0	// 110227c0 <partition_open+0x8>
1102280e:	0000      	bkpt
11022810:	1fffb2b4 	.long	0x1fffb2b4

11022814 <partition_close>:

void partition_close(partition_t partition)
{
11022814:	14d1      	push      	r4, r15
    partition_info_t *node = hal_flash_get_info(partition);
11022816:	e3ffffbb 	bsr      	0x1102278c	// 1102278c <partition_info_get>
1102281a:	6d03      	mov      	r4, r0
    if (node) {
1102281c:	3840      	cmpnei      	r0, 0
1102281e:	0c06      	bf      	0x1102282a	// 1102282a <partition_close+0x16>
        partition_flash_close(node->flash_dev);
11022820:	9006      	ld.w      	r0, (r0, 0x18)
11022822:	e0000109 	bsr      	0x11022a34	// 11022a34 <partition_flash_close>
        node->flash_dev = NULL;        
11022826:	3300      	movi      	r3, 0
11022828:	b466      	st.w      	r3, (r4, 0x18)
    }
}
1102282a:	1491      	pop      	r4, r15

1102282c <partition_read>:

int partition_read(partition_t partition, off_t off_set, void *data, size_t size)
{
1102282c:	14d3      	push      	r4-r6, r15
1102282e:	6d47      	mov      	r5, r1
11022830:	6d8b      	mov      	r6, r2
11022832:	6d0f      	mov      	r4, r3
    partition_info_t *node = hal_flash_get_info(partition);
11022834:	e3ffffac 	bsr      	0x1102278c	// 1102278c <partition_info_get>
    if (node != NULL && off_set + size <= node->length) {
11022838:	3840      	cmpnei      	r0, 0
1102283a:	0c0f      	bf      	0x11022858	// 11022858 <partition_read+0x2c>
1102283c:	5d30      	addu      	r1, r5, r4
1102283e:	6cd3      	mov      	r3, r4
11022840:	9084      	ld.w      	r4, (r0, 0x10)
11022842:	6450      	cmphs      	r4, r1
11022844:	0c0a      	bf      	0x11022858	// 11022858 <partition_read+0x2c>
        return partition_flash_read(node->flash_dev, node->base_addr + node->start_addr + off_set, data, size);
11022846:	9023      	ld.w      	r1, (r0, 0xc)
11022848:	9082      	ld.w      	r4, (r0, 0x8)
1102284a:	6c9b      	mov      	r2, r6
1102284c:	9006      	ld.w      	r0, (r0, 0x18)
1102284e:	6104      	addu      	r4, r1
11022850:	5c34      	addu      	r1, r4, r5
11022852:	e0000109 	bsr      	0x11022a64	// 11022a64 <partition_flash_read>
    }

    return -EINVAL;
}
11022856:	1493      	pop      	r4-r6, r15
    return -EINVAL;
11022858:	3000      	movi      	r0, 0
1102285a:	2815      	subi      	r0, 22
1102285c:	07fd      	br      	0x11022856	// 11022856 <partition_read+0x2a>
	...

11022860 <partition_write>:

int partition_write_size = 0; // for kv test
int partition_write(partition_t partition, off_t off_set, void *data, size_t size)
{
11022860:	14d4      	push      	r4-r7, r15
    partition_write_size += size;
11022862:	108f      	lrw      	r4, 0x1fffb400	// 1102289c <partition_write+0x3c>
{
11022864:	6d47      	mov      	r5, r1
    partition_write_size += size;
11022866:	9420      	ld.w      	r1, (r4, 0x0)
11022868:	604c      	addu      	r1, r3
{
1102286a:	6dcb      	mov      	r7, r2
    partition_write_size += size;
1102286c:	6d8f      	mov      	r6, r3
1102286e:	b420      	st.w      	r1, (r4, 0x0)
    partition_info_t *node = hal_flash_get_info(partition);
11022870:	e3ffff8e 	bsr      	0x1102278c	// 1102278c <partition_info_get>
    if (node != NULL && off_set + size <= node->length) {
11022874:	3840      	cmpnei      	r0, 0
11022876:	0c0f      	bf      	0x11022894	// 11022894 <partition_write+0x34>
11022878:	9084      	ld.w      	r4, (r0, 0x10)
1102287a:	5e34      	addu      	r1, r6, r5
1102287c:	6450      	cmphs      	r4, r1
1102287e:	6cdb      	mov      	r3, r6
11022880:	0c0a      	bf      	0x11022894	// 11022894 <partition_write+0x34>
        return partition_flash_write(node->flash_dev, node->base_addr + node->start_addr + off_set, data, size);
11022882:	9023      	ld.w      	r1, (r0, 0xc)
11022884:	9082      	ld.w      	r4, (r0, 0x8)
11022886:	6c9f      	mov      	r2, r7
11022888:	9006      	ld.w      	r0, (r0, 0x18)
1102288a:	6104      	addu      	r4, r1
1102288c:	5c34      	addu      	r1, r4, r5
1102288e:	e00000f7 	bsr      	0x11022a7c	// 11022a7c <partition_flash_write>
    }
    return -EINVAL;
}
11022892:	1494      	pop      	r4-r7, r15
    return -EINVAL;
11022894:	3000      	movi      	r0, 0
11022896:	2815      	subi      	r0, 22
11022898:	07fd      	br      	0x11022892	// 11022892 <partition_write+0x32>
1102289a:	0000      	bkpt
1102289c:	1fffb400 	.long	0x1fffb400

110228a0 <partition_erase>:

int partition_erase_size = 0; // for kv test
int partition_erase(partition_t partition, off_t off_set, uint32_t block_count )
{
110228a0:	14d4      	push      	r4-r7, r15
110228a2:	1421      	subi      	r14, r14, 4
110228a4:	6d8b      	mov      	r6, r2
    partition_erase_size += block_count;
110228a6:	1054      	lrw      	r2, 0x1fffb3fc	// 110228f4 <partition_erase+0x54>
{
110228a8:	6d47      	mov      	r5, r1
    partition_erase_size += block_count;
110228aa:	9260      	ld.w      	r3, (r2, 0x0)
110228ac:	60d8      	addu      	r3, r6
110228ae:	b260      	st.w      	r3, (r2, 0x0)
    partition_info_t *node = hal_flash_get_info(partition);
110228b0:	e3ffff6e 	bsr      	0x1102278c	// 1102278c <partition_info_get>
110228b4:	6d03      	mov      	r4, r0
    if (node != NULL && off_set / node->sector_size + block_count <= node->length / node->sector_size) {
110228b6:	3840      	cmpnei      	r0, 0
110228b8:	0c1a      	bf      	0x110228ec	// 110228ec <partition_erase+0x4c>
110228ba:	88ea      	ld.h      	r7, (r0, 0x14)
110228bc:	6c5f      	mov      	r1, r7
110228be:	6c17      	mov      	r0, r5
110228c0:	e3ffc868 	bsr      	0x1101b990	// 1101b990 <__div32>
110228c4:	6c5f      	mov      	r1, r7
110228c6:	5878      	addu      	r3, r0, r6
110228c8:	9404      	ld.w      	r0, (r4, 0x10)
110228ca:	b860      	st.w      	r3, (r14, 0x0)
110228cc:	e3ffc898 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
110228d0:	9860      	ld.w      	r3, (r14, 0x0)
110228d2:	64c0      	cmphs      	r0, r3
110228d4:	0c0c      	bf      	0x110228ec	// 110228ec <partition_erase+0x4c>
        return partition_flash_erase(node->flash_dev, node->base_addr + node->start_addr + off_set, block_count * node->sector_size);
110228d6:	c4e68422 	mult      	r2, r6, r7
110228da:	9406      	ld.w      	r0, (r4, 0x18)
110228dc:	9422      	ld.w      	r1, (r4, 0x8)
110228de:	9463      	ld.w      	r3, (r4, 0xc)
110228e0:	604c      	addu      	r1, r3
110228e2:	6054      	addu      	r1, r5
110228e4:	e00000d8 	bsr      	0x11022a94	// 11022a94 <partition_flash_erase>
    }

    return -EINVAL;
}
110228e8:	1401      	addi      	r14, r14, 4
110228ea:	1494      	pop      	r4-r7, r15
    return -EINVAL;
110228ec:	3000      	movi      	r0, 0
110228ee:	2815      	subi      	r0, 22
110228f0:	07fc      	br      	0x110228e8	// 110228e8 <partition_erase+0x48>
110228f2:	0000      	bkpt
110228f4:	1fffb3fc 	.long	0x1fffb3fc

110228f8 <part_flash_open>:
#else

#include <devices/flash.h>

void *part_flash_open(int id)
{
110228f8:	14d0      	push      	r15
110228fa:	6c43      	mov      	r1, r0
    void *flash_dev;

    flash_dev = (void *)flash_open_id("eflash", id);
110228fc:	1002      	lrw      	r0, 0x1101166f	// 11022904 <part_flash_open+0xc>
110228fe:	e3fffa55 	bsr      	0x11021da8	// 11021da8 <device_open_id>

    return flash_dev;
}
11022902:	1490      	pop      	r15
11022904:	1101166f 	.long	0x1101166f

11022908 <part_flash_close>:

int part_flash_close(void *handle)
{
11022908:	14d0      	push      	r15
    if (handle) {
1102290a:	3840      	cmpnei      	r0, 0
1102290c:	0c04      	bf      	0x11022914	// 11022914 <part_flash_close+0xc>
        return flash_close(handle);
1102290e:	e3fffa81 	bsr      	0x11021e10	// 11021e10 <device_close>
    }
    return -EINVAL;
}
11022912:	1490      	pop      	r15
    return -EINVAL;
11022914:	3000      	movi      	r0, 0
11022916:	2815      	subi      	r0, 22
11022918:	07fd      	br      	0x11022912	// 11022912 <part_flash_close+0xa>

1102291a <part_flash_info_get>:

int part_flash_info_get(void *handle, partition_flash_info_t *info)
{
1102291a:	14d1      	push      	r4, r15
1102291c:	1423      	subi      	r14, r14, 12
1102291e:	6d07      	mov      	r4, r1
    flash_dev_info_t flash_info;

    if (handle && info) {
11022920:	3840      	cmpnei      	r0, 0
11022922:	0c10      	bf      	0x11022942	// 11022942 <part_flash_info_get+0x28>
11022924:	3940      	cmpnei      	r1, 0
11022926:	0c0e      	bf      	0x11022942	// 11022942 <part_flash_info_get+0x28>
        if (flash_get_info((aos_dev_t *)handle, &flash_info) != 0) {
11022928:	6c7b      	mov      	r1, r14
1102292a:	e3fffb0b 	bsr      	0x11021f40	// 11021f40 <flash_get_info>
1102292e:	3840      	cmpnei      	r0, 0
11022930:	080c      	bt      	0x11022948	// 11022948 <part_flash_info_get+0x2e>
            return -1;
        }
        info->start_addr = flash_info.start_addr;
11022932:	9860      	ld.w      	r3, (r14, 0x0)
11022934:	b460      	st.w      	r3, (r4, 0x0)
        info->sector_size = flash_info.block_size;
11022936:	9861      	ld.w      	r3, (r14, 0x4)
11022938:	b461      	st.w      	r3, (r4, 0x4)
        info->sector_count = flash_info.block_count;
1102293a:	9862      	ld.w      	r3, (r14, 0x8)
1102293c:	b462      	st.w      	r3, (r4, 0x8)
        MTB_LOGD("info->sector_size:0x%x", info->sector_size);
        MTB_LOGD("info->sector_count:0x%x", info->sector_count);
        return 0;
    }
    return -EINVAL;
}
1102293e:	1403      	addi      	r14, r14, 12
11022940:	1491      	pop      	r4, r15
    return -EINVAL;
11022942:	3000      	movi      	r0, 0
11022944:	2815      	subi      	r0, 22
11022946:	07fc      	br      	0x1102293e	// 1102293e <part_flash_info_get+0x24>
            return -1;
11022948:	3000      	movi      	r0, 0
1102294a:	2800      	subi      	r0, 1
1102294c:	07f9      	br      	0x1102293e	// 1102293e <part_flash_info_get+0x24>

1102294e <part_flash_read>:

int part_flash_read(void *handle, uint32_t addr, void *data, size_t data_len)
{
1102294e:	14d4      	push      	r4-r7, r15
11022950:	1423      	subi      	r14, r14, 12
11022952:	6d43      	mov      	r5, r0
    if (handle && data && data_len > 0) {
11022954:	3840      	cmpnei      	r0, 0
{
11022956:	6d07      	mov      	r4, r1
    if (handle && data && data_len > 0) {
11022958:	0c1a      	bf      	0x1102298c	// 1102298c <part_flash_read+0x3e>
1102295a:	3a40      	cmpnei      	r2, 0
1102295c:	6dcb      	mov      	r7, r2
1102295e:	0c17      	bf      	0x1102298c	// 1102298c <part_flash_read+0x3e>
11022960:	3b40      	cmpnei      	r3, 0
11022962:	6d8f      	mov      	r6, r3
11022964:	0c14      	bf      	0x1102298c	// 1102298c <part_flash_read+0x3e>
        flash_dev_info_t flash_info;

        if (flash_get_info((aos_dev_t *)handle, &flash_info) != 0) {
11022966:	6c7b      	mov      	r1, r14
11022968:	e3fffaec 	bsr      	0x11021f40	// 11021f40 <flash_get_info>
1102296c:	3840      	cmpnei      	r0, 0
1102296e:	080c      	bt      	0x11022986	// 11022986 <part_flash_read+0x38>
            return -1;
        }
        if (addr < flash_info.start_addr) {
11022970:	9820      	ld.w      	r1, (r14, 0x0)
11022972:	6cdb      	mov      	r3, r6
11022974:	6450      	cmphs      	r4, r1
11022976:	6c9f      	mov      	r2, r7
11022978:	0c0a      	bf      	0x1102298c	// 1102298c <part_flash_read+0x3e>
            return -EINVAL;
        }
        return flash_read(handle, addr - flash_info.start_addr, data, data_len);
1102297a:	6c17      	mov      	r0, r5
1102297c:	5c25      	subu      	r1, r4, r1
1102297e:	e3fffa79 	bsr      	0x11021e70	// 11021e70 <flash_read>
    }
    return -EINVAL;
}
11022982:	1403      	addi      	r14, r14, 12
11022984:	1494      	pop      	r4-r7, r15
            return -1;
11022986:	3000      	movi      	r0, 0
11022988:	2800      	subi      	r0, 1
1102298a:	07fc      	br      	0x11022982	// 11022982 <part_flash_read+0x34>
    return -EINVAL;
1102298c:	3000      	movi      	r0, 0
1102298e:	2815      	subi      	r0, 22
11022990:	07f9      	br      	0x11022982	// 11022982 <part_flash_read+0x34>

11022992 <part_flash_write>:

int part_flash_write(void *handle, uint32_t addr, void *data, size_t data_len)
{
11022992:	14d4      	push      	r4-r7, r15
11022994:	1423      	subi      	r14, r14, 12
11022996:	6d43      	mov      	r5, r0
    if (handle && data && data_len > 0) {
11022998:	3840      	cmpnei      	r0, 0
{
1102299a:	6d07      	mov      	r4, r1
    if (handle && data && data_len > 0) {
1102299c:	0c1a      	bf      	0x110229d0	// 110229d0 <part_flash_write+0x3e>
1102299e:	3a40      	cmpnei      	r2, 0
110229a0:	6dcb      	mov      	r7, r2
110229a2:	0c17      	bf      	0x110229d0	// 110229d0 <part_flash_write+0x3e>
110229a4:	3b40      	cmpnei      	r3, 0
110229a6:	6d8f      	mov      	r6, r3
110229a8:	0c14      	bf      	0x110229d0	// 110229d0 <part_flash_write+0x3e>
        flash_dev_info_t flash_info;

        if (flash_get_info((aos_dev_t *)handle, &flash_info) != 0) {
110229aa:	6c7b      	mov      	r1, r14
110229ac:	e3fffaca 	bsr      	0x11021f40	// 11021f40 <flash_get_info>
110229b0:	3840      	cmpnei      	r0, 0
110229b2:	080c      	bt      	0x110229ca	// 110229ca <part_flash_write+0x38>
            return -1;
        }
        if (addr < flash_info.start_addr) {
110229b4:	9820      	ld.w      	r1, (r14, 0x0)
110229b6:	6cdb      	mov      	r3, r6
110229b8:	6450      	cmphs      	r4, r1
110229ba:	6c9f      	mov      	r2, r7
110229bc:	0c0a      	bf      	0x110229d0	// 110229d0 <part_flash_write+0x3e>
            return -EINVAL;
        }
        return flash_program(handle, addr - flash_info.start_addr, data, data_len);
110229be:	6c17      	mov      	r0, r5
110229c0:	5c25      	subu      	r1, r4, r1
110229c2:	e3fffa79 	bsr      	0x11021eb4	// 11021eb4 <flash_program>
    }
    return -EINVAL;
}
110229c6:	1403      	addi      	r14, r14, 12
110229c8:	1494      	pop      	r4-r7, r15
            return -1;
110229ca:	3000      	movi      	r0, 0
110229cc:	2800      	subi      	r0, 1
110229ce:	07fc      	br      	0x110229c6	// 110229c6 <part_flash_write+0x34>
    return -EINVAL;
110229d0:	3000      	movi      	r0, 0
110229d2:	2815      	subi      	r0, 22
110229d4:	07f9      	br      	0x110229c6	// 110229c6 <part_flash_write+0x34>

110229d6 <part_flash_erase>:

int part_flash_erase(void *handle, uint32_t addr, size_t len)
{
110229d6:	14d4      	push      	r4-r7, r15
110229d8:	1423      	subi      	r14, r14, 12
110229da:	6d43      	mov      	r5, r0
    if (handle && len > 0) {
110229dc:	3840      	cmpnei      	r0, 0
{
110229de:	6d07      	mov      	r4, r1
110229e0:	6dcb      	mov      	r7, r2
    if (handle && len > 0) {
110229e2:	0c1a      	bf      	0x11022a16	// 11022a16 <part_flash_erase+0x40>
110229e4:	3a40      	cmpnei      	r2, 0
110229e6:	0c18      	bf      	0x11022a16	// 11022a16 <part_flash_erase+0x40>
        flash_dev_info_t flash_info;

        if (flash_get_info((aos_dev_t *)handle, &flash_info) != 0) {
110229e8:	6c7b      	mov      	r1, r14
110229ea:	e3fffaab 	bsr      	0x11021f40	// 11021f40 <flash_get_info>
110229ee:	3840      	cmpnei      	r0, 0
110229f0:	0810      	bt      	0x11022a10	// 11022a10 <part_flash_erase+0x3a>
            return -1;
        }
        if (addr < flash_info.start_addr) {
110229f2:	98c0      	ld.w      	r6, (r14, 0x0)
110229f4:	6590      	cmphs      	r4, r6
110229f6:	0c10      	bf      	0x11022a16	// 11022a16 <part_flash_erase+0x40>
            return -EINVAL;
        }
        return flash_erase(handle, addr - flash_info.start_addr, (len + flash_info.block_size - 1) / flash_info.block_size);
110229f8:	9821      	ld.w      	r1, (r14, 0x4)
110229fa:	5903      	subi      	r0, r1, 1
110229fc:	601c      	addu      	r0, r7
110229fe:	e3ffc7ff 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
11022a02:	6c83      	mov      	r2, r0
11022a04:	6c17      	mov      	r0, r5
11022a06:	5c39      	subu      	r1, r4, r6
11022a08:	e3fffa78 	bsr      	0x11021ef8	// 11021ef8 <flash_erase>
    }
    return -EINVAL;
}
11022a0c:	1403      	addi      	r14, r14, 12
11022a0e:	1494      	pop      	r4-r7, r15
            return -1;
11022a10:	3000      	movi      	r0, 0
11022a12:	2800      	subi      	r0, 1
11022a14:	07fc      	br      	0x11022a0c	// 11022a0c <part_flash_erase+0x36>
    return -EINVAL;
11022a16:	3000      	movi      	r0, 0
11022a18:	2815      	subi      	r0, 22
11022a1a:	07f9      	br      	0x11022a0c	// 11022a0c <part_flash_erase+0x36>

11022a1c <partition_flash_open>:
        memcpy(&g_flash_ops, ops, sizeof(partition_flash_ops_t));
    }
}

void *partition_flash_open(int id)
{
11022a1c:	14d0      	push      	r15
    if (g_flash_ops.open) {
11022a1e:	1065      	lrw      	r3, 0x1fffa554	// 11022a30 <partition_flash_open+0x14>
11022a20:	9360      	ld.w      	r3, (r3, 0x0)
11022a22:	3b40      	cmpnei      	r3, 0
11022a24:	0c03      	bf      	0x11022a2a	// 11022a2a <partition_flash_open+0xe>
        void *handle = g_flash_ops.open(id);
11022a26:	7bcd      	jsr      	r3
        return handle;
    }
    return NULL;
}
11022a28:	1490      	pop      	r15
    return NULL;
11022a2a:	3000      	movi      	r0, 0
11022a2c:	07fe      	br      	0x11022a28	// 11022a28 <partition_flash_open+0xc>
11022a2e:	0000      	bkpt
11022a30:	1fffa554 	.long	0x1fffa554

11022a34 <partition_flash_close>:

int partition_flash_close(void *handle)
{
11022a34:	14d0      	push      	r15
    if (g_flash_ops.close) {
11022a36:	1065      	lrw      	r3, 0x1fffa554	// 11022a48 <partition_flash_close+0x14>
11022a38:	9361      	ld.w      	r3, (r3, 0x4)
11022a3a:	3b40      	cmpnei      	r3, 0
11022a3c:	0c03      	bf      	0x11022a42	// 11022a42 <partition_flash_close+0xe>
        return g_flash_ops.close(handle);
11022a3e:	7bcd      	jsr      	r3
    }
    return -1;
}
11022a40:	1490      	pop      	r15
    return -1;
11022a42:	3000      	movi      	r0, 0
11022a44:	2800      	subi      	r0, 1
11022a46:	07fd      	br      	0x11022a40	// 11022a40 <partition_flash_close+0xc>
11022a48:	1fffa554 	.long	0x1fffa554

11022a4c <partition_flash_info_get>:

int partition_flash_info_get(void *handle, partition_flash_info_t *info)
{
11022a4c:	14d0      	push      	r15
    if (g_flash_ops.info_get) {
11022a4e:	1065      	lrw      	r3, 0x1fffa554	// 11022a60 <partition_flash_info_get+0x14>
11022a50:	9362      	ld.w      	r3, (r3, 0x8)
11022a52:	3b40      	cmpnei      	r3, 0
11022a54:	0c03      	bf      	0x11022a5a	// 11022a5a <partition_flash_info_get+0xe>
        return g_flash_ops.info_get(handle, info);
11022a56:	7bcd      	jsr      	r3
    }
    return -1;
}
11022a58:	1490      	pop      	r15
    return -1;
11022a5a:	3000      	movi      	r0, 0
11022a5c:	2800      	subi      	r0, 1
11022a5e:	07fd      	br      	0x11022a58	// 11022a58 <partition_flash_info_get+0xc>
11022a60:	1fffa554 	.long	0x1fffa554

11022a64 <partition_flash_read>:

int partition_flash_read(void *handle, uint32_t addr, void *data, size_t data_len)
{
11022a64:	14d1      	push      	r4, r15
    int ret;

    ret = -1;
    if (g_flash_ops.read) {
11022a66:	1085      	lrw      	r4, 0x1fffa554	// 11022a78 <partition_flash_read+0x14>
11022a68:	9483      	ld.w      	r4, (r4, 0xc)
11022a6a:	3c40      	cmpnei      	r4, 0
11022a6c:	0c03      	bf      	0x11022a72	// 11022a72 <partition_flash_read+0xe>
        ret = g_flash_ops.read(handle, addr, data, data_len);
11022a6e:	7bd1      	jsr      	r4
    }
    return ret;
}
11022a70:	1491      	pop      	r4, r15
    ret = -1;
11022a72:	3000      	movi      	r0, 0
11022a74:	2800      	subi      	r0, 1
    return ret;
11022a76:	07fd      	br      	0x11022a70	// 11022a70 <partition_flash_read+0xc>
11022a78:	1fffa554 	.long	0x1fffa554

11022a7c <partition_flash_write>:

int partition_flash_write(void *handle, uint32_t addr, void *data, size_t data_len)
{
11022a7c:	14d1      	push      	r4, r15
    if (g_flash_ops.write)
11022a7e:	1085      	lrw      	r4, 0x1fffa554	// 11022a90 <partition_flash_write+0x14>
11022a80:	9484      	ld.w      	r4, (r4, 0x10)
11022a82:	3c40      	cmpnei      	r4, 0
11022a84:	0c03      	bf      	0x11022a8a	// 11022a8a <partition_flash_write+0xe>
        return g_flash_ops.write(handle, addr, data, data_len);
11022a86:	7bd1      	jsr      	r4
    return -1;
}
11022a88:	1491      	pop      	r4, r15
    return -1;
11022a8a:	3000      	movi      	r0, 0
11022a8c:	2800      	subi      	r0, 1
11022a8e:	07fd      	br      	0x11022a88	// 11022a88 <partition_flash_write+0xc>
11022a90:	1fffa554 	.long	0x1fffa554

11022a94 <partition_flash_erase>:

int partition_flash_erase(void *handle, uint32_t addr, size_t len)
{
11022a94:	14d0      	push      	r15
    if (g_flash_ops.erase)
11022a96:	1065      	lrw      	r3, 0x1fffa554	// 11022aa8 <partition_flash_erase+0x14>
11022a98:	9365      	ld.w      	r3, (r3, 0x14)
11022a9a:	3b40      	cmpnei      	r3, 0
11022a9c:	0c03      	bf      	0x11022aa2	// 11022aa2 <partition_flash_erase+0xe>
        return g_flash_ops.erase(handle, addr, len);
11022a9e:	7bcd      	jsr      	r3
    return -1;
11022aa0:	1490      	pop      	r15
    return -1;
11022aa2:	3000      	movi      	r0, 0
11022aa4:	2800      	subi      	r0, 1
11022aa6:	07fd      	br      	0x11022aa0	// 11022aa0 <partition_flash_erase+0xc>
11022aa8:	1fffa554 	.long	0x1fffa554

11022aac <ulog>:
#ifdef ULOG_CONFIG_ASYNC
static uint8_t get_lowest_level(const ulog_session_type_t start);
#endif

int ulog(const unsigned char s, const char *mod, const char *f, const unsigned long l, const char *fmt, ...)
{
11022aac:	14d3      	push      	r4-r6, r15
11022aae:	1426      	subi      	r14, r14, 24
11022ab0:	6d43      	mov      	r5, r0
11022ab2:	986a      	ld.w      	r3, (r14, 0x28)
11022ab4:	6d8f      	mov      	r6, r3
    int rc = -1;
    if (log_init &&
11022ab6:	107b      	lrw      	r3, 0x1fffb405	// 11022b20 <ulog+0x74>
{
11022ab8:	6d07      	mov      	r4, r1
    if (log_init &&
11022aba:	8360      	ld.b      	r3, (r3, 0x0)
11022abc:	3b40      	cmpnei      	r3, 0
11022abe:	0c2e      	bf      	0x11022b1a	// 11022b1a <ulog+0x6e>
11022ac0:	1079      	lrw      	r3, 0x1fffb404	// 11022b24 <ulog+0x78>
11022ac2:	8360      	ld.b      	r3, (r3, 0x0)
11022ac4:	64c0      	cmphs      	r0, r3
11022ac6:	082a      	bt      	0x11022b1a	// 11022b1a <ulog+0x6e>
        (s < push_stop_filter_level) ) {
        char log_time[24];
        if (log_get_mutex()) {
11022ac8:	e0000080 	bsr      	0x11022bc8	// 11022bc8 <log_get_mutex>
11022acc:	3840      	cmpnei      	r0, 0
11022ace:	0c26      	bf      	0x11022b1a	// 11022b1a <ulog+0x6e>
            const char* rpt_mod = NULL;
            if ((mod == NULL) || (0 == strlen(mod))) {
11022ad0:	3c40      	cmpnei      	r4, 0
11022ad2:	0c06      	bf      	0x11022ade	// 11022ade <ulog+0x32>
11022ad4:	6c13      	mov      	r0, r4
11022ad6:	e3ffd2ef 	bsr      	0x1101d0b4	// 1101d0b4 <__strlen_fast>
11022ada:	3840      	cmpnei      	r0, 0
11022adc:	0802      	bt      	0x11022ae0	// 11022ae0 <ulog+0x34>
                rpt_mod = UNKNOWN_BUF;
11022ade:	1093      	lrw      	r4, 0x1101180c	// 11022b28 <ulog+0x7c>
                   log_col_def(s),
                   ulog_format_time(log_time, 24), serverity_name[s],  rpt_mod,
                   trim_file_path(f),
                   (int)l);
#else /* !SYNC_LOG_DETAILS */
            printf("[%s]<%c>%s ",
11022ae0:	3118      	movi      	r1, 24
11022ae2:	6c3b      	mov      	r0, r14
11022ae4:	e0000086 	bsr      	0x11022bf0	// 11022bf0 <ulog_format_time>
                   ulog_format_time(log_time, 24), serverity_name[s],  rpt_mod);
11022ae8:	1071      	lrw      	r3, 0x11011676	// 11022b2c <ulog+0x80>
11022aea:	614c      	addu      	r5, r3
            printf("[%s]<%c>%s ",
11022aec:	8540      	ld.b      	r2, (r5, 0x0)
11022aee:	6cd3      	mov      	r3, r4
11022af0:	6c43      	mov      	r1, r0
11022af2:	1010      	lrw      	r0, 0x1101167e	// 11022b30 <ulog+0x84>
11022af4:	e3ffd0e2 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>

#endif /* SYNC_LOG_DETAILS */

            va_list args;
            va_start(args, fmt);
            rc = vprintf(fmt, args);
11022af8:	6c1b      	mov      	r0, r6
11022afa:	190b      	addi      	r1, r14, 44
11022afc:	e3ffd106 	bsr      	0x1101cd08	// 1101cd08 <__GI_vprintf>
            va_end(args);
            fflush(stdout);
11022b00:	106d      	lrw      	r3, 0x1fffa4f8	// 11022b34 <ulog+0x88>
            rc = vprintf(fmt, args);
11022b02:	6d03      	mov      	r4, r0
            fflush(stdout);
11022b04:	9300      	ld.w      	r0, (r3, 0x0)
11022b06:	e3ffd1a2 	bsr      	0x1101ce4a	// 1101ce4a <__GI_fflush>
            printf("\r\n");
11022b0a:	100c      	lrw      	r0, 0x1101150a	// 11022b38 <ulog+0x8c>
11022b0c:	e3ffd0d6 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
#endif /* if def ULOG_CONFIG_ASYNC */
            log_release_mutex();
11022b10:	e0000068 	bsr      	0x11022be0	// 11022be0 <log_release_mutex>
        }
    }
    return rc;
}
11022b14:	6c13      	mov      	r0, r4
11022b16:	1406      	addi      	r14, r14, 24
11022b18:	1493      	pop      	r4-r6, r15
    int rc = -1;
11022b1a:	3400      	movi      	r4, 0
11022b1c:	2c00      	subi      	r4, 1
    return rc;
11022b1e:	07fb      	br      	0x11022b14	// 11022b14 <ulog+0x68>
11022b20:	1fffb405 	.long	0x1fffb405
11022b24:	1fffb404 	.long	0x1fffb404
11022b28:	1101180c 	.long	0x1101180c
11022b2c:	11011676 	.long	0x11011676
11022b30:	1101167e 	.long	0x1101167e
11022b34:	1fffa4f8 	.long	0x1fffa4f8
11022b38:	1101150a 	.long	0x1101150a

11022b3c <on_filter_level_changes>:
}

void on_filter_level_changes(const ulog_session_type_t session, const uint8_t level)
{
    bool next_handle = true;
    if (session == ulog_session_size) {/* only happen on init, get the initial push level */
11022b3c:	3841      	cmpnei      	r0, 1
11022b3e:	080c      	bt      	0x11022b56	// 11022b56 <on_filter_level_changes+0x1a>
        push_stop_filter_level = LOG_EMERG;
11022b40:	106a      	lrw      	r3, 0x1fffb404	// 11022b68 <on_filter_level_changes+0x2c>
11022b42:	3200      	movi      	r2, 0
11022b44:	a340      	st.b      	r2, (r3, 0x0)
        next_handle = false;
    }
    if (next_handle) {
        uint8_t i = 0;
        for (; i < ulog_session_size; i++) {
            if (push_stop_filter_level < stop_filter_level[i]) {
11022b46:	106a      	lrw      	r3, 0x1fffa56c	// 11022b6c <on_filter_level_changes+0x30>
11022b48:	8340      	ld.b      	r2, (r3, 0x0)
11022b4a:	1068      	lrw      	r3, 0x1fffb404	// 11022b68 <on_filter_level_changes+0x2c>
11022b4c:	8320      	ld.b      	r1, (r3, 0x0)
11022b4e:	6484      	cmphs      	r1, r2
11022b50:	0802      	bt      	0x11022b54	// 11022b54 <on_filter_level_changes+0x18>
                push_stop_filter_level = stop_filter_level[i];
11022b52:	a340      	st.b      	r2, (r3, 0x0)
            }
        }
    }
}
11022b54:	783c      	jmp      	r15
    } else if (session < ulog_session_size && level <= LOG_NONE) {
11022b56:	3840      	cmpnei      	r0, 0
11022b58:	0bfe      	bt      	0x11022b54	// 11022b54 <on_filter_level_changes+0x18>
11022b5a:	3908      	cmphsi      	r1, 9
11022b5c:	0bfc      	bt      	0x11022b54	// 11022b54 <on_filter_level_changes+0x18>
        stop_filter_level[session] = level;
11022b5e:	1064      	lrw      	r3, 0x1fffa56c	// 11022b6c <on_filter_level_changes+0x30>
11022b60:	a320      	st.b      	r1, (r3, 0x0)
        push_stop_filter_level = stop_filter_level[session];
11022b62:	1062      	lrw      	r3, 0x1fffb404	// 11022b68 <on_filter_level_changes+0x2c>
11022b64:	a320      	st.b      	r1, (r3, 0x0)
11022b66:	07f0      	br      	0x11022b46	// 11022b46 <on_filter_level_changes+0xa>
11022b68:	1fffb404 	.long	0x1fffb404
11022b6c:	1fffa56c 	.long	0x1fffa56c

11022b70 <aos_set_log_level>:
{
11022b70:	14d0      	push      	r15
    if(log_init) {
11022b72:	1069      	lrw      	r3, 0x1fffb405	// 11022b94 <aos_set_log_level+0x24>
11022b74:	8360      	ld.b      	r3, (r3, 0x0)
11022b76:	3b40      	cmpnei      	r3, 0
11022b78:	0c0a      	bf      	0x11022b8c	// 11022b8c <aos_set_log_level+0x1c>
        if (log_level <= AOS_LL_DEBUG) {
11022b7a:	3807      	cmphsi      	r0, 8
11022b7c:	0808      	bt      	0x11022b8c	// 11022b8c <aos_set_log_level+0x1c>
            on_filter_level_changes(ulog_session_std, log_level + 1);
11022b7e:	2000      	addi      	r0, 1
11022b80:	7440      	zextb      	r1, r0
11022b82:	3000      	movi      	r0, 0
11022b84:	e3ffffdc 	bsr      	0x11022b3c	// 11022b3c <on_filter_level_changes>
            rc = 0;
11022b88:	3000      	movi      	r0, 0
}
11022b8a:	1490      	pop      	r15
    int rc = -EINVAL;
11022b8c:	3000      	movi      	r0, 0
11022b8e:	2815      	subi      	r0, 22
    return rc;
11022b90:	07fd      	br      	0x11022b8a	// 11022b8a <aos_set_log_level+0x1a>
11022b92:	0000      	bkpt
11022b94:	1fffb405 	.long	0x1fffb405

11022b98 <ulog_init>:
};

#endif /* AOS_COMP_UAGENT */

void ulog_init(void)
{
11022b98:	14d1      	push      	r4, r15
    if (!log_init) {
11022b9a:	1087      	lrw      	r4, 0x1fffb405	// 11022bb4 <ulog_init+0x1c>
11022b9c:	8460      	ld.b      	r3, (r4, 0x0)
11022b9e:	3b40      	cmpnei      	r3, 0
11022ba0:	0809      	bt      	0x11022bb2	// 11022bb2 <ulog_init+0x1a>
        log_init_mutex();
11022ba2:	e000000b 	bsr      	0x11022bb8	// 11022bb8 <log_init_mutex>
        on_filter_level_changes(ulog_session_size, LOG_NONE);
11022ba6:	3108      	movi      	r1, 8
11022ba8:	3001      	movi      	r0, 1
11022baa:	e3ffffc9 	bsr      	0x11022b3c	// 11022b3c <on_filter_level_changes>
        ulog_async_init();
#endif
#ifdef AOS_COMP_CLI
        aos_cli_register_commands(&ulog_cmd[0], sizeof(ulog_cmd) / sizeof(struct cli_command));
#endif
        log_init = true;
11022bae:	3301      	movi      	r3, 1
11022bb0:	a460      	st.b      	r3, (r4, 0x0)
        } else {
            LOGE("ULOG", "register into uagent fail, table is null");
        }
#endif
    }
}
11022bb2:	1491      	pop      	r4, r15
11022bb4:	1fffb405 	.long	0x1fffb405

11022bb8 <log_init_mutex>:

static aos_mutex_t log_mutex;

/* log init mutex */
void log_init_mutex(void)
{
11022bb8:	14d0      	push      	r15
    aos_mutex_new(&log_mutex);
11022bba:	1003      	lrw      	r0, 0x1fffb408	// 11022bc4 <log_init_mutex+0xc>
11022bbc:	e3fff736 	bsr      	0x11021a28	// 11021a28 <aos_mutex_new>
}
11022bc0:	1490      	pop      	r15
11022bc2:	0000      	bkpt
11022bc4:	1fffb408 	.long	0x1fffb408

11022bc8 <log_get_mutex>:

bool log_get_mutex()
{
11022bc8:	14d0      	push      	r15
    return 0 == aos_mutex_lock(&log_mutex, AOS_WAIT_FOREVER);
11022bca:	1005      	lrw      	r0, 0x1fffb408	// 11022bdc <log_get_mutex+0x14>
11022bcc:	3100      	movi      	r1, 0
11022bce:	2900      	subi      	r1, 1
11022bd0:	e3fff55c 	bsr      	0x11021688	// 11021688 <aos_mutex_lock>
11022bd4:	3840      	cmpnei      	r0, 0
11022bd6:	6403      	mvcv      	r0
11022bd8:	7400      	zextb      	r0, r0
}
11022bda:	1490      	pop      	r15
11022bdc:	1fffb408 	.long	0x1fffb408

11022be0 <log_release_mutex>:

void log_release_mutex()
{
11022be0:	14d0      	push      	r15
    aos_mutex_unlock(&log_mutex);
11022be2:	1003      	lrw      	r0, 0x1fffb408	// 11022bec <log_release_mutex+0xc>
11022be4:	e3fff57e 	bsr      	0x110216e0	// 110216e0 <aos_mutex_unlock>
}
11022be8:	1490      	pop      	r15
11022bea:	0000      	bkpt
11022bec:	1fffb408 	.long	0x1fffb408

11022bf0 <ulog_format_time>:

/* result like 99.356 ,i.e. s.ms */
/* Result is like "Nov 28 15:19:20.122" */
char *ulog_format_time(char *buffer, const int len)
{
11022bf0:	14d4      	push      	r4-r7, r15
11022bf2:	1422      	subi      	r14, r14, 8
11022bf4:	6d03      	mov      	r4, r0
    if(NULL!=buffer && len>4) {
11022bf6:	3840      	cmpnei      	r0, 0
{
11022bf8:	6d47      	mov      	r5, r1
    if(NULL!=buffer && len>4) {
11022bfa:	0c1b      	bf      	0x11022c30	// 11022c30 <ulog_format_time+0x40>
11022bfc:	3924      	cmplti      	r1, 5
11022bfe:	0819      	bt      	0x11022c30	// 11022c30 <ulog_format_time+0x40>
        long long ms = aos_now_ms();
11022c00:	e3fff6c9 	bsr      	0x11021992	// 11021992 <aos_now_ms>
        char      ms_str[8] = "";
        memset(ms_str, 0, sizeof(ms_str));
        snprintf(ms_str, sizeof(ms_str), ".%03d", milli);
        strncat(buffer, ms_str, len - strlen(buffer) - 1);
#else /* !SYSLOG_TIME_FORMAT */
        snprintf(buffer, len, "%4d.%03d", (int)(ms / 1000), (int)(ms % 1000));
11022c04:	32fa      	movi      	r2, 250
11022c06:	4242      	lsli      	r2, r2, 2
11022c08:	3300      	movi      	r3, 0
        long long ms = aos_now_ms();
11022c0a:	6d83      	mov      	r6, r0
11022c0c:	6dc7      	mov      	r7, r1
        snprintf(buffer, len, "%4d.%03d", (int)(ms / 1000), (int)(ms % 1000));
11022c0e:	e3ffc77f 	bsr      	0x1101bb0c	// 1101bb0c <__divdi3>
11022c12:	32fa      	movi      	r2, 250
11022c14:	b801      	st.w      	r0, (r14, 0x4)
11022c16:	4242      	lsli      	r2, r2, 2
11022c18:	3300      	movi      	r3, 0
11022c1a:	6c1b      	mov      	r0, r6
11022c1c:	6c5f      	mov      	r1, r7
11022c1e:	e3ffc96b 	bsr      	0x1101bef4	// 1101bef4 <__moddi3>
11022c22:	9861      	ld.w      	r3, (r14, 0x4)
11022c24:	b800      	st.w      	r0, (r14, 0x0)
11022c26:	6c57      	mov      	r1, r5
11022c28:	1044      	lrw      	r2, 0x1101168a	// 11022c38 <ulog_format_time+0x48>
11022c2a:	6c13      	mov      	r0, r4
11022c2c:	e3ffd111 	bsr      	0x1101ce4e	// 1101ce4e <__GI_snprintf>
#endif /* SYSLOG_TIME_FORMAT */
    }
    return buffer;
}
11022c30:	6c13      	mov      	r0, r4
11022c32:	1402      	addi      	r14, r14, 8
11022c34:	1494      	pop      	r4-r7, r15
11022c36:	0000      	bkpt
11022c38:	1101168a 	.long	0x1101168a

11022c3c <char2hex>:
#include <errno.h>
#include <misc/util.h>

int char2hex(char c, u8_t *x)
{
	if (c >= '0' && c <= '9') {
11022c3c:	e460102f 	subi      	r3, r0, 48
11022c40:	74cc      	zextb      	r3, r3
11022c42:	3b09      	cmphsi      	r3, 10
11022c44:	0804      	bt      	0x11022c4c	// 11022c4c <char2hex+0x10>
		*x = c - '0';
11022c46:	a160      	st.b      	r3, (r1, 0x0)
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
11022c48:	3000      	movi      	r0, 0
}
11022c4a:	783c      	jmp      	r15
	} else if (c >= 'a' && c <= 'f') {
11022c4c:	e4601060 	subi      	r3, r0, 97
11022c50:	74cc      	zextb      	r3, r3
11022c52:	3b05      	cmphsi      	r3, 6
11022c54:	0804      	bt      	0x11022c5c	// 11022c5c <char2hex+0x20>
		*x = c - 'a' + 10;
11022c56:	2856      	subi      	r0, 87
		*x = c - 'A' + 10;
11022c58:	a100      	st.b      	r0, (r1, 0x0)
11022c5a:	07f7      	br      	0x11022c48	// 11022c48 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
11022c5c:	e4601040 	subi      	r3, r0, 65
11022c60:	74cc      	zextb      	r3, r3
11022c62:	3b05      	cmphsi      	r3, 6
11022c64:	0803      	bt      	0x11022c6a	// 11022c6a <char2hex+0x2e>
		*x = c - 'A' + 10;
11022c66:	2836      	subi      	r0, 55
11022c68:	07f8      	br      	0x11022c58	// 11022c58 <char2hex+0x1c>
		return -EINVAL;
11022c6a:	3000      	movi      	r0, 0
11022c6c:	2815      	subi      	r0, 22
11022c6e:	07ee      	br      	0x11022c4a	// 11022c4a <char2hex+0xe>

11022c70 <bt_hex_real>:
#include <bluetooth/bluetooth.h>
#include <bluetooth/uuid.h>
#include <bluetooth/hci.h>

const char *bt_hex_real(const void *buf, size_t len)
{
11022c70:	14c4      	push      	r4-r7
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const u8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
11022c72:	3340      	movi      	r3, 64
11022c74:	eb010040 	cmphsi      	r1, 65
11022c78:	c4230c40 	inct      	r1, r3, 0
11022c7c:	106d      	lrw      	r3, 0x1fffb40c	// 11022cb0 <bt_hex_real+0x40>
11022c7e:	6d0f      	mov      	r4, r3

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
11022c80:	10ad      	lrw      	r5, 0x11011693	// 11022cb4 <bt_hex_real+0x44>
		str[i * 2 + 1] = hex[b[i] & 0xf];
11022c82:	370f      	movi      	r7, 15
11022c84:	58c4      	addu      	r6, r0, r1
	for (i = 0; i < len; i++) {
11022c86:	6582      	cmpne      	r0, r6
11022c88:	0807      	bt      	0x11022c96	// 11022c96 <bt_hex_real+0x26>
	}

	str[i * 2] = '\0';
11022c8a:	3300      	movi      	r3, 0

	return str;
}
11022c8c:	1009      	lrw      	r0, 0x1fffb40c	// 11022cb0 <bt_hex_real+0x40>
	str[i * 2] = '\0';
11022c8e:	4121      	lsli      	r1, r1, 1
11022c90:	6050      	addu      	r1, r4
11022c92:	a160      	st.b      	r3, (r1, 0x0)
}
11022c94:	1484      	pop      	r4-r7
		str[i * 2]     = hex[b[i] >> 4];
11022c96:	8040      	ld.b      	r2, (r0, 0x0)
11022c98:	4a44      	lsri      	r2, r2, 4
11022c9a:	6094      	addu      	r2, r5
11022c9c:	8240      	ld.b      	r2, (r2, 0x0)
11022c9e:	a340      	st.b      	r2, (r3, 0x0)
		str[i * 2 + 1] = hex[b[i] & 0xf];
11022ca0:	8040      	ld.b      	r2, (r0, 0x0)
11022ca2:	689c      	and      	r2, r7
11022ca4:	6094      	addu      	r2, r5
11022ca6:	8240      	ld.b      	r2, (r2, 0x0)
11022ca8:	a341      	st.b      	r2, (r3, 0x1)
11022caa:	2000      	addi      	r0, 1
11022cac:	2301      	addi      	r3, 2
11022cae:	07ec      	br      	0x11022c86	// 11022c86 <bt_hex_real+0x16>
11022cb0:	1fffb40c 	.long	0x1fffb40c
11022cb4:	11011693 	.long	0x11011693

11022cb8 <bt_rand>:

#include <ble_os.h>
#include "bt_crypto.h"

int bt_rand(void *buf, size_t len)
{
11022cb8:	14d0      	push      	r15
	return bt_crypto_rand(buf, len);
11022cba:	e0001335 	bsr      	0x11025324	// 11025324 <bt_crypto_rand>
}
11022cbe:	1490      	pop      	r15

11022cc0 <k_mutex_init>:
    return 0;
}


void k_mutex_init(struct k_mutex *mutex)
{
11022cc0:	14d1      	push      	r4, r15
11022cc2:	6d03      	mov      	r4, r0
    int stat;

    if (NULL == mutex) {
11022cc4:	3840      	cmpnei      	r0, 0
11022cc6:	0c08      	bf      	0x11022cd6	// 11022cd6 <k_mutex_init+0x16>
        BT_ERR("mutex is NULL\n");
        return;
    }

    stat = krhino_mutex_create(&mutex->mutex, "ble");
11022cc8:	1024      	lrw      	r1, 0x110116a4	// 11022cd8 <k_mutex_init+0x18>
11022cca:	e000330d 	bsr      	0x110292e4	// 110292e4 <cpu_task_stack_init+0x93c>

    if (stat) {
        BT_ERR("mutex buffer over\n");
    }

    sys_dlist_init(&mutex->poll_events);
11022cce:	e4640027 	addi      	r3, r4, 40
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
11022cd2:	b46a      	st.w      	r3, (r4, 0x28)
	list->tail = (sys_dnode_t *)list;
11022cd4:	b46b      	st.w      	r3, (r4, 0x2c)
    return;
}
11022cd6:	1491      	pop      	r4, r15
11022cd8:	110116a4 	.long	0x110116a4

11022cdc <k_mutex_lock>:

int k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
11022cdc:	14d1      	push      	r4, r15
    tick_t ticks;

    if (timeout == K_FOREVER) {
11022cde:	3300      	movi      	r3, 0
11022ce0:	2b00      	subi      	r3, 1
11022ce2:	64c6      	cmpne      	r1, r3
{
11022ce4:	6d03      	mov      	r4, r0
11022ce6:	6c07      	mov      	r0, r1
    if (timeout == K_FOREVER) {
11022ce8:	0c0a      	bf      	0x11022cfc	// 11022cfc <k_mutex_lock+0x20>
        ticks = RHINO_WAIT_FOREVER;
    } else {
        ticks = krhino_ms_to_ticks(timeout);
11022cea:	513f      	asri      	r1, r1, 31
11022cec:	e0002e52 	bsr      	0x11028990	// 11028990 <krhino_ms_to_ticks>
    }

    return krhino_mutex_lock(&mutex->mutex, ticks);
11022cf0:	6c87      	mov      	r2, r1
11022cf2:	6c43      	mov      	r1, r0
11022cf4:	6c13      	mov      	r0, r4
11022cf6:	e000308d 	bsr      	0x11028e10	// 11028e10 <cpu_task_stack_init+0x468>
}
11022cfa:	1491      	pop      	r4, r15
        ticks = RHINO_WAIT_FOREVER;
11022cfc:	3000      	movi      	r0, 0
11022cfe:	3100      	movi      	r1, 0
11022d00:	2800      	subi      	r0, 1
11022d02:	2900      	subi      	r1, 1
11022d04:	07f6      	br      	0x11022cf0	// 11022cf0 <k_mutex_lock+0x14>

11022d06 <k_mutex_unlock>:

void k_mutex_unlock(struct k_mutex *mutex)
{
11022d06:	14d0      	push      	r15
    if (NULL == mutex) {
11022d08:	3840      	cmpnei      	r0, 0
11022d0a:	0c03      	bf      	0x11022d10	// 11022d10 <k_mutex_unlock+0xa>
        BT_ERR("mutex is NULL\n");
        return;
    }

    krhino_mutex_unlock(&mutex->mutex);
11022d0c:	e00031ba 	bsr      	0x11029080	// 11029080 <cpu_task_stack_init+0x6d8>
}
11022d10:	1490      	pop      	r15

11022d12 <irq_lock>:
{
    return 0;
}

unsigned int irq_lock(void)
{
11022d12:	14d0      	push      	r15
    CPSR_ALLOC();
    RHINO_CPU_INTRPT_DISABLE();
11022d14:	e0002fbe 	bsr      	0x11028c90	// 11028c90 <cpu_task_stack_init+0x2e8>
    return psr;
}
11022d18:	1490      	pop      	r15

11022d1a <irq_unlock>:

void irq_unlock(unsigned int key)
{
11022d1a:	14d0      	push      	r15
    CPSR_ALLOC();
    psr = key;
    RHINO_CPU_INTRPT_ENABLE();
11022d1c:	e0003134 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
}
11022d20:	1490      	pop      	r15
	...

11022d24 <k_timer_init>:

void _SysFatalErrorHandler(unsigned int reason, const void *pEsf) {};

void k_timer_init(k_timer_t *timer, k_timer_handler_t handle, void *args)
{
11022d24:	14d4      	push      	r4-r7, r15
11022d26:	1425      	subi      	r14, r14, 20
    int ret;
    ASSERT(timer, "timer is NULL");
    BT_DBG("timer %p,handle %p,args %p", timer, handle, args);
    timer->handler = handle;
    timer->args    = args;
    timer->timeout  = 0;
11022d28:	3300      	movi      	r3, 0
{
11022d2a:	6d03      	mov      	r4, r0
    timer->handler = handle;
11022d2c:	b431      	st.w      	r1, (r4, 0x44)
    timer->args    = args;
11022d2e:	b452      	st.w      	r2, (r4, 0x48)
    timer->timeout  = 0;
11022d30:	b073      	st.w      	r3, (r0, 0x4c)
    ret =
        krhino_timer_create(&timer->timer, "AOS", (timer_cb_t)(timer->handler),
11022d32:	30fa      	movi      	r0, 250
{
11022d34:	6d8b      	mov      	r6, r2
11022d36:	6d47      	mov      	r5, r1
        krhino_timer_create(&timer->timer, "AOS", (timer_cb_t)(timer->handler),
11022d38:	4002      	lsli      	r0, r0, 2
11022d3a:	3100      	movi      	r1, 0
11022d3c:	3700      	movi      	r7, 0
11022d3e:	e0002e29 	bsr      	0x11028990	// 11028990 <krhino_ms_to_ticks>
11022d42:	b8c3      	st.w      	r6, (r14, 0xc)
11022d44:	3200      	movi      	r2, 0
11022d46:	3600      	movi      	r6, 0
11022d48:	6cc3      	mov      	r3, r0
11022d4a:	b844      	st.w      	r2, (r14, 0x10)
11022d4c:	b820      	st.w      	r1, (r14, 0x0)
11022d4e:	b8c1      	st.w      	r6, (r14, 0x4)
11022d50:	b8e2      	st.w      	r7, (r14, 0x8)
11022d52:	6c97      	mov      	r2, r5
11022d54:	1023      	lrw      	r1, 0x110114d0	// 11022d60 <k_timer_init+0x3c>
11022d56:	6c13      	mov      	r0, r4
11022d58:	e0002fae 	bsr      	0x11028cb4	// 11028cb4 <cpu_task_stack_init+0x30c>
                            krhino_ms_to_ticks(1000), 0, args, 0);

    if (ret) {
        BT_DBG("fail to create a timer");
    }
}
11022d5c:	1405      	addi      	r14, r14, 20
11022d5e:	1494      	pop      	r4-r7, r15
11022d60:	110114d0 	.long	0x110114d0

11022d64 <k_timer_start>:

void k_timer_start(k_timer_t *timer, uint32_t timeout)
{
11022d64:	14d2      	push      	r4-r5, r15
11022d66:	1421      	subi      	r14, r14, 4
11022d68:	6d03      	mov      	r4, r0
    int ret;
    ASSERT(timer, "timer is NULL");
    BT_DBG("timer %p,timeout %u", timer, timeout);
    timer->timeout  = timeout;
11022d6a:	b433      	st.w      	r1, (r4, 0x4c)
{
11022d6c:	6d47      	mov      	r5, r1
    timer->start_ms = aos_now_ms();
11022d6e:	e3fff612 	bsr      	0x11021992	// 11021992 <aos_now_ms>
11022d72:	b414      	st.w      	r0, (r4, 0x50)

    ret = krhino_timer_stop(&timer->timer);
11022d74:	6c13      	mov      	r0, r4
11022d76:	e0003095 	bsr      	0x11028ea0	// 11028ea0 <cpu_task_stack_init+0x4f8>

    if (ret) {
        BT_ERR("fail to stop timer");
    }

    ret = krhino_timer_change(&timer->timer, krhino_ms_to_ticks(timeout), 0);
11022d7a:	6c17      	mov      	r0, r5
11022d7c:	3100      	movi      	r1, 0
11022d7e:	e0002e09 	bsr      	0x11028990	// 11028990 <krhino_ms_to_ticks>
11022d82:	3300      	movi      	r3, 0
11022d84:	6c87      	mov      	r2, r1
11022d86:	6c43      	mov      	r1, r0
11022d88:	b860      	st.w      	r3, (r14, 0x0)
11022d8a:	6c13      	mov      	r0, r4
11022d8c:	e0002fd6 	bsr      	0x11028d38	// 11028d38 <cpu_task_stack_init+0x390>

    if (ret) {
        BT_ERR("fail to change timeout");
    }

    ret = krhino_timer_start(&timer->timer);
11022d90:	6c13      	mov      	r0, r4
11022d92:	e0002f6d 	bsr      	0x11028c6c	// 11028c6c <cpu_task_stack_init+0x2c4>

    if (ret) {
        BT_ERR("fail to start timer");
    }
}
11022d96:	1401      	addi      	r14, r14, 4
11022d98:	1492      	pop      	r4-r5, r15

11022d9a <k_timer_stop>:

void k_timer_stop(k_timer_t *timer)
{
11022d9a:	14d1      	push      	r4, r15
11022d9c:	6d03      	mov      	r4, r0

    /**
     * Timer may be reused, so its timeout value
     * should be cleared when stopped.
    */
    if (!timer->timeout) {
11022d9e:	9073      	ld.w      	r3, (r0, 0x4c)
11022da0:	3b40      	cmpnei      	r3, 0
11022da2:	0c05      	bf      	0x11022dac	// 11022dac <k_timer_stop+0x12>
        return;
    }

    BT_DBG("timer %p", timer);
    ret = krhino_timer_stop(&timer->timer);
11022da4:	e000307e 	bsr      	0x11028ea0	// 11028ea0 <cpu_task_stack_init+0x4f8>

    if (ret) {
        BT_ERR("fail to stop timer");
    }

    timer->timeout = 0;
11022da8:	3300      	movi      	r3, 0
11022daa:	b473      	st.w      	r3, (r4, 0x4c)
}
11022dac:	1491      	pop      	r4, r15

11022dae <hal_clk_gate_disable>:
    if (module < MOD_CP_CPU) {
11022dae:	381f      	cmphsi      	r0, 32
11022db0:	080b      	bt      	0x11022dc6	// 11022dc6 <hal_clk_gate_disable+0x18>
        AP_PCR->SW_CLK &= ~(BIT(module));
11022db2:	3280      	movi      	r2, 128
11022db4:	4257      	lsli      	r2, r2, 23
11022db6:	9222      	ld.w      	r1, (r2, 0x8)
11022db8:	3300      	movi      	r3, 0
11022dba:	2b01      	subi      	r3, 2
11022dbc:	c4034100 	rotl      	r0, r3, r0
11022dc0:	6804      	and      	r0, r1
11022dc2:	b202      	st.w      	r0, (r2, 0x8)
}
11022dc4:	783c      	jmp      	r15
    } else if (module < MOD_PCLK_CACHE) {
11022dc6:	eb00003f 	cmphsi      	r0, 64
11022dca:	080c      	bt      	0x11022de2	// 11022de2 <hal_clk_gate_disable+0x34>
        AP_PCR->SW_CLK1 &= ~(BIT(module - MOD_CP_CPU));
11022dcc:	3280      	movi      	r2, 128
11022dce:	4257      	lsli      	r2, r2, 23
11022dd0:	9225      	ld.w      	r1, (r2, 0x14)
11022dd2:	281f      	subi      	r0, 32
11022dd4:	3300      	movi      	r3, 0
11022dd6:	2b01      	subi      	r3, 2
11022dd8:	c4034100 	rotl      	r0, r3, r0
11022ddc:	6804      	and      	r0, r1
11022dde:	b205      	st.w      	r0, (r2, 0x14)
11022de0:	07f2      	br      	0x11022dc4	// 11022dc4 <hal_clk_gate_disable+0x16>
    } else if (module < MOD_USR0) {
11022de2:	eb00005f 	cmphsi      	r0, 96
11022de6:	0bef      	bt      	0x11022dc4	// 11022dc4 <hal_clk_gate_disable+0x16>
        AP_PCR->CACHE_CLOCK_GATE &= ~(BIT(module - MOD_PCLK_CACHE));
11022de8:	3280      	movi      	r2, 128
11022dea:	4257      	lsli      	r2, r2, 23
11022dec:	9228      	ld.w      	r1, (r2, 0x20)
11022dee:	283f      	subi      	r0, 64
11022df0:	3300      	movi      	r3, 0
11022df2:	2b01      	subi      	r3, 2
11022df4:	c4034100 	rotl      	r0, r3, r0
11022df8:	6804      	and      	r0, r1
11022dfa:	b208      	st.w      	r0, (r2, 0x20)
}
11022dfc:	07e4      	br      	0x11022dc4	// 11022dc4 <hal_clk_gate_disable+0x16>
	...

11022e00 <hal_rtc_clock_config>:
    hal_clk_set_hclk(hclk_sel);
    return PPlus_SUCCESS;
}

void hal_rtc_clock_config(CLK32K_e clk32Mode)
{
11022e00:	14d0      	push      	r15
    if (clk32Mode == CLK_32K_RCOSC) {
11022e02:	3841      	cmpnei      	r0, 1
11022e04:	0820      	bt      	0x11022e44	// 11022e44 <hal_rtc_clock_config+0x44>
        subWriteReg(&(AP_AON->PMCTL0), 31, 27, 0x05);
11022e06:	105e      	lrw      	r2, 0x4000f000	// 11022e7c <hal_rtc_clock_config+0x7c>
11022e08:	9265      	ld.w      	r3, (r2, 0x14)
11022e0a:	4365      	lsli      	r3, r3, 5
11022e0c:	4b65      	lsri      	r3, r3, 5
11022e0e:	3bbb      	bseti      	r3, 27
11022e10:	3bbd      	bseti      	r3, 29
11022e12:	b265      	st.w      	r3, (r2, 0x14)
11022e14:	6c03      	mov      	r0, r0
        subWriteReg(&(AP_AON->PMCTL2_0), 16, 7, 0x3fb);
11022e16:	103b      	lrw      	r1, 0xfffe007f	// 11022e80 <hal_rtc_clock_config+0x80>
11022e18:	9267      	ld.w      	r3, (r2, 0x1c)
11022e1a:	68c4      	and      	r3, r1
11022e1c:	103a      	lrw      	r1, 0x1fd80	// 11022e84 <hal_rtc_clock_config+0x84>
11022e1e:	6cc4      	or      	r3, r1
11022e20:	b267      	st.w      	r3, (r2, 0x1c)
11022e22:	6c03      	mov      	r0, r0
        subWriteReg(&(AP_AON->PMCTL2_0), 6, 6, 0x01);
11022e24:	9267      	ld.w      	r3, (r2, 0x1c)
11022e26:	ec630040 	ori      	r3, r3, 64
11022e2a:	b267      	st.w      	r3, (r2, 0x1c)
        phy_gpio_pull_set(P17, FLOATING);

        subWriteReg(&(AP_AON->PMCTL2_0), 9, 8, 0x03); //software control 32k_clk
        subWriteReg(&(AP_AON->PMCTL2_0), 6, 6, 0x00); //disable software control

        subWriteReg(&(AP_AON->PMCTL0), 31, 27, 0x16);
11022e2c:	6c03      	mov      	r0, r0
        //pGlobal_config[LL_SWITCH]&=0xffffffee;
    }
    //ZQ 20200812 for rc32k wakeup
    subWriteReg(&(AP_AON->PMCTL0),28,28,0x1);//turn on 32kxtal
11022e2e:	1074      	lrw      	r3, 0x4000f000	// 11022e7c <hal_rtc_clock_config+0x7c>
11022e30:	9345      	ld.w      	r2, (r3, 0x14)
11022e32:	3abc      	bseti      	r2, 28
11022e34:	b345      	st.w      	r2, (r3, 0x14)
11022e36:	6c03      	mov      	r0, r0
    subWriteReg(&(AP_AON->PMCTL1),18,17,0x0);// reduce 32kxtal bias current
11022e38:	9346      	ld.w      	r2, (r3, 0x18)
11022e3a:	3a91      	bclri      	r2, 17
11022e3c:	3a92      	bclri      	r2, 18
11022e3e:	b346      	st.w      	r2, (r3, 0x18)
11022e40:	6c03      	mov      	r0, r0
}
11022e42:	1490      	pop      	r15
    } else if (clk32Mode == CLK_32K_XTAL) {
11022e44:	3840      	cmpnei      	r0, 0
11022e46:	0bf4      	bt      	0x11022e2e	// 11022e2e <hal_rtc_clock_config+0x2e>
        phy_gpio_pull_set(P16, FLOATING);
11022e48:	3100      	movi      	r1, 0
11022e4a:	300a      	movi      	r0, 10
11022e4c:	e0000086 	bsr      	0x11022f58	// 11022f58 <phy_gpio_pull_set>
        phy_gpio_pull_set(P17, FLOATING);
11022e50:	3100      	movi      	r1, 0
11022e52:	300b      	movi      	r0, 11
11022e54:	e0000082 	bsr      	0x11022f58	// 11022f58 <phy_gpio_pull_set>
        subWriteReg(&(AP_AON->PMCTL2_0), 9, 8, 0x03); //software control 32k_clk
11022e58:	1049      	lrw      	r2, 0x4000f000	// 11022e7c <hal_rtc_clock_config+0x7c>
11022e5a:	9267      	ld.w      	r3, (r2, 0x1c)
11022e5c:	ec630300 	ori      	r3, r3, 768
11022e60:	b267      	st.w      	r3, (r2, 0x1c)
11022e62:	6c03      	mov      	r0, r0
        subWriteReg(&(AP_AON->PMCTL2_0), 6, 6, 0x00); //disable software control
11022e64:	9267      	ld.w      	r3, (r2, 0x1c)
11022e66:	3b86      	bclri      	r3, 6
11022e68:	b267      	st.w      	r3, (r2, 0x1c)
11022e6a:	6c03      	mov      	r0, r0
        subWriteReg(&(AP_AON->PMCTL0), 31, 27, 0x16);
11022e6c:	9265      	ld.w      	r3, (r2, 0x14)
11022e6e:	4365      	lsli      	r3, r3, 5
11022e70:	31b0      	movi      	r1, 176
11022e72:	4b65      	lsri      	r3, r3, 5
11022e74:	4138      	lsli      	r1, r1, 24
11022e76:	6cc4      	or      	r3, r1
11022e78:	b265      	st.w      	r3, (r2, 0x14)
11022e7a:	07d9      	br      	0x11022e2c	// 11022e2c <hal_rtc_clock_config+0x2c>
11022e7c:	4000f000 	.long	0x4000f000
11022e80:	fffe007f 	.long	0xfffe007f
11022e84:	0001fd80 	.long	0x0001fd80

11022e88 <phy_gpio_pin2pin3_control.part.2>:
}

void phy_gpio_pin2pin3_control(gpio_pin_e pin, uint8_t en)//0:sw,1:other func
{
    if (en) {
        AP_IOMUX->gpio_pad_en |= BIT(pin - 2);
11022e88:	1044      	lrw      	r2, 0x40003800	// 11022e98 <phy_gpio_pin2pin3_control.part.2+0x10>
11022e8a:	5867      	subi      	r3, r0, 2
11022e8c:	3001      	movi      	r0, 1
11022e8e:	9225      	ld.w      	r1, (r2, 0x14)
11022e90:	700c      	lsl      	r0, r3
11022e92:	6c04      	or      	r0, r1
11022e94:	b205      	st.w      	r0, (r2, 0x14)
    } else {
        AP_IOMUX->gpio_pad_en &= ~BIT(pin - 2);
    }
}
11022e96:	783c      	jmp      	r15
11022e98:	40003800 	.long	0x40003800

11022e9c <phy_gpio_read>:
    if (AP_GPIO->swporta_ddr & BIT(pin)) {
11022e9c:	1028      	lrw      	r1, 0x40008000	// 11022ebc <phy_gpio_read+0x20>
11022e9e:	9141      	ld.w      	r2, (r1, 0x4)
11022ea0:	7081      	lsr      	r2, r0
11022ea2:	e4422001 	andi      	r2, r2, 1
11022ea6:	3a40      	cmpnei      	r2, 0
11022ea8:	0c07      	bf      	0x11022eb6	// 11022eb6 <phy_gpio_read+0x1a>
        r = AP_GPIO->swporta_dr;
11022eaa:	9160      	ld.w      	r3, (r1, 0x0)
    return (int)((r >> pin) & 1);
11022eac:	c4034040 	lsr      	r0, r3, r0
11022eb0:	e4002001 	andi      	r0, r0, 1
}
11022eb4:	783c      	jmp      	r15
        r = AP_GPIO->ext_porta;
11022eb6:	9174      	ld.w      	r3, (r1, 0x50)
11022eb8:	07fa      	br      	0x11022eac	// 11022eac <phy_gpio_read+0x10>
11022eba:	0000      	bkpt
11022ebc:	40008000 	.long	0x40008000

11022ec0 <phy_gpio_fmux>:
{
11022ec0:	1047      	lrw      	r2, 0x40003800	// 11022edc <phy_gpio_fmux+0x1c>
    if (value) {
11022ec2:	3940      	cmpnei      	r1, 0
        AP_IOMUX->full_mux0_en |= BIT(pin);
11022ec4:	9223      	ld.w      	r1, (r2, 0xc)
    if (value) {
11022ec6:	0c06      	bf      	0x11022ed2	// 11022ed2 <phy_gpio_fmux+0x12>
        AP_IOMUX->full_mux0_en |= BIT(pin);
11022ec8:	3301      	movi      	r3, 1
11022eca:	70c0      	lsl      	r3, r0
11022ecc:	6cc4      	or      	r3, r1
        AP_IOMUX->full_mux0_en &= ~BIT(pin);
11022ece:	b263      	st.w      	r3, (r2, 0xc)
}
11022ed0:	783c      	jmp      	r15
        AP_IOMUX->full_mux0_en &= ~BIT(pin);
11022ed2:	3300      	movi      	r3, 0
11022ed4:	2b01      	subi      	r3, 2
11022ed6:	70c3      	rotl      	r3, r0
11022ed8:	68c4      	and      	r3, r1
11022eda:	07fa      	br      	0x11022ece	// 11022ece <phy_gpio_fmux+0xe>
11022edc:	40003800 	.long	0x40003800

11022ee0 <phy_gpio_fmux_set>:
{
11022ee0:	14c2      	push      	r4-r5
    bit_index = pin % 4;
11022ee2:	e4802003 	andi      	r4, r0, 3
    l = 8 * bit_index;
11022ee6:	4483      	lsli      	r4, r4, 3
    subWriteReg(&(AP_IOMUX->gpio_sel[reg_index]), h, l, type);
11022ee8:	c4002822 	bclri      	r2, r0, 0
11022eec:	3a81      	bclri      	r2, 1
11022eee:	106a      	lrw      	r3, 0x40003818	// 11022f14 <phy_gpio_fmux_set+0x34>
11022ef0:	608c      	addu      	r2, r3
11022ef2:	333f      	movi      	r3, 63
11022ef4:	92a0      	ld.w      	r5, (r2, 0x0)
11022ef6:	70d0      	lsl      	r3, r4
11022ef8:	c4652043 	andn      	r3, r5, r3
11022efc:	7050      	lsl      	r1, r4
11022efe:	6c4c      	or      	r1, r3
11022f00:	b220      	st.w      	r1, (r2, 0x0)
11022f02:	6c03      	mov      	r0, r0
        AP_IOMUX->full_mux0_en |= BIT(pin);
11022f04:	1045      	lrw      	r2, 0x40003800	// 11022f18 <phy_gpio_fmux_set+0x38>
11022f06:	3301      	movi      	r3, 1
11022f08:	9223      	ld.w      	r1, (r2, 0xc)
11022f0a:	c4034020 	lsl      	r0, r3, r0
11022f0e:	6c04      	or      	r0, r1
11022f10:	b203      	st.w      	r0, (r2, 0xc)
}
11022f12:	1482      	pop      	r4-r5
11022f14:	40003818 	.long	0x40003818
11022f18:	40003800 	.long	0x40003800

11022f1c <phy_gpio_pin_init>:
{
11022f1c:	14d2      	push      	r4-r5, r15
11022f1e:	6d07      	mov      	r4, r1
    phy_gpio_fmux(pin, Bit_DISABLE);
11022f20:	3100      	movi      	r1, 0
{
11022f22:	6d43      	mov      	r5, r0
    phy_gpio_fmux(pin, Bit_DISABLE);
11022f24:	e3ffffce 	bsr      	0x11022ec0	// 11022ec0 <phy_gpio_fmux>
    if ((pin == P2) || (pin == P3)) {
11022f28:	5d67      	subi      	r3, r5, 2
11022f2a:	3b01      	cmphsi      	r3, 2
11022f2c:	0804      	bt      	0x11022f34	// 11022f34 <phy_gpio_pin_init+0x18>
11022f2e:	6c17      	mov      	r0, r5
11022f30:	e3ffffac 	bsr      	0x11022e88	// 11022e88 <phy_gpio_pin2pin3_control.part.2>
    if (type == GPIO_OUTPUT_1) {
11022f34:	3c41      	cmpnei      	r4, 1
11022f36:	1068      	lrw      	r3, 0x40008000	// 11022f54 <phy_gpio_pin_init+0x38>
11022f38:	0806      	bt      	0x11022f44	// 11022f44 <phy_gpio_pin_init+0x28>
        AP_GPIO->swporta_ddr |= BIT(pin);
11022f3a:	9301      	ld.w      	r0, (r3, 0x4)
11022f3c:	7114      	lsl      	r4, r5
11022f3e:	6d00      	or      	r4, r0
11022f40:	b381      	st.w      	r4, (r3, 0x4)
}
11022f42:	1492      	pop      	r4-r5, r15
        AP_GPIO->swporta_ddr &= ~BIT(pin);
11022f44:	9341      	ld.w      	r2, (r3, 0x4)
11022f46:	3000      	movi      	r0, 0
11022f48:	2801      	subi      	r0, 2
11022f4a:	7017      	rotl      	r0, r5
11022f4c:	6808      	and      	r0, r2
11022f4e:	b301      	st.w      	r0, (r3, 0x4)
}
11022f50:	07f9      	br      	0x11022f42	// 11022f42 <phy_gpio_pin_init+0x26>
11022f52:	0000      	bkpt
11022f54:	40008000 	.long	0x40008000

11022f58 <phy_gpio_pull_set>:
{
11022f58:	14c2      	push      	r4-r5
    uint8_t h = c_gpio_pull[pin].bit_h;
11022f5a:	4041      	lsli      	r2, r0, 1
11022f5c:	1073      	lrw      	r3, 0x110116fc	// 11022fa8 <phy_gpio_pull_set+0x50>
11022f5e:	6080      	addu      	r2, r0
    if (pin < P31) {
11022f60:	3812      	cmphsi      	r0, 19
    uint8_t h = c_gpio_pull[pin].bit_h;
11022f62:	608c      	addu      	r2, r3
    uint8_t l = c_gpio_pull[pin].bit_l;
11022f64:	8282      	ld.b      	r4, (r2, 0x2)
    uint8_t h = c_gpio_pull[pin].bit_h;
11022f66:	82a1      	ld.b      	r5, (r2, 0x1)
11022f68:	c4814023 	lsl      	r3, r1, r4
11022f6c:	6152      	subu      	r5, r4
    if (pin < P31) {
11022f6e:	0811      	bt      	0x11022f90	// 11022f90 <phy_gpio_pull_set+0x38>
        subWriteReg(&(AP_AON->IOCTL[i]), h, l, type);
11022f70:	8240      	ld.b      	r2, (r2, 0x0)
11022f72:	102f      	lrw      	r1, 0x4000f008	// 11022fac <phy_gpio_pull_set+0x54>
11022f74:	4242      	lsli      	r2, r2, 2
11022f76:	6084      	addu      	r2, r1
11022f78:	3101      	movi      	r1, 1
11022f7a:	9200      	ld.w      	r0, (r2, 0x0)
11022f7c:	2500      	addi      	r5, 1
11022f7e:	7054      	lsl      	r1, r5
11022f80:	2900      	subi      	r1, 1
11022f82:	7050      	lsl      	r1, r4
11022f84:	c4202041 	andn      	r1, r0, r1
11022f88:	6c4c      	or      	r1, r3
11022f8a:	b220      	st.w      	r1, (r2, 0x0)
        subWriteReg(&(AP_AON->PMCTL0), h, l, type);
11022f8c:	6c03      	mov      	r0, r0
}
11022f8e:	1482      	pop      	r4-r5
        subWriteReg(&(AP_AON->PMCTL0), h, l, type);
11022f90:	1048      	lrw      	r2, 0x4000f000	// 11022fb0 <phy_gpio_pull_set+0x58>
11022f92:	3101      	movi      	r1, 1
11022f94:	9205      	ld.w      	r0, (r2, 0x14)
11022f96:	2500      	addi      	r5, 1
11022f98:	7054      	lsl      	r1, r5
11022f9a:	2900      	subi      	r1, 1
11022f9c:	7050      	lsl      	r1, r4
11022f9e:	c4202041 	andn      	r1, r0, r1
11022fa2:	6c4c      	or      	r1, r3
11022fa4:	b225      	st.w      	r1, (r2, 0x14)
11022fa6:	07f3      	br      	0x11022f8c	// 11022f8c <phy_gpio_pull_set+0x34>
11022fa8:	110116fc 	.long	0x110116fc
11022fac:	4000f008 	.long	0x4000f008
11022fb0:	4000f000 	.long	0x4000f000

11022fb4 <phy_gpio_cfg_analog_io>:
{
11022fb4:	14d2      	push      	r4-r5, r15
    if ((pin < P11) || (pin > P25)) {
11022fb6:	58bb      	subi      	r5, r0, 7
11022fb8:	3d09      	cmphsi      	r5, 10
11022fba:	0814      	bt      	0x11022fe2	// 11022fe2 <phy_gpio_cfg_analog_io+0x2e>
    if (value) {
11022fbc:	3940      	cmpnei      	r1, 0
11022fbe:	108b      	lrw      	r4, 0x40003800	// 11022fe8 <phy_gpio_cfg_analog_io+0x34>
11022fc0:	0c0b      	bf      	0x11022fd6	// 11022fd6 <phy_gpio_cfg_analog_io+0x22>
        phy_gpio_pull_set(pin, GPIO_FLOATING);
11022fc2:	3100      	movi      	r1, 0
11022fc4:	e3ffffca 	bsr      	0x11022f58	// 11022f58 <phy_gpio_pull_set>
        AP_IOMUX->Analog_IO_en |= BIT(pin - P11);
11022fc8:	3301      	movi      	r3, 1
11022fca:	9440      	ld.w      	r2, (r4, 0x0)
11022fcc:	70d4      	lsl      	r3, r5
11022fce:	6cc8      	or      	r3, r2
        AP_IOMUX->Analog_IO_en &= ~BIT(pin - P11);
11022fd0:	b460      	st.w      	r3, (r4, 0x0)
    return PPlus_SUCCESS;
11022fd2:	3000      	movi      	r0, 0
}
11022fd4:	1492      	pop      	r4-r5, r15
        AP_IOMUX->Analog_IO_en &= ~BIT(pin - P11);
11022fd6:	9440      	ld.w      	r2, (r4, 0x0)
11022fd8:	3300      	movi      	r3, 0
11022fda:	2b01      	subi      	r3, 2
11022fdc:	70d7      	rotl      	r3, r5
11022fde:	68c8      	and      	r3, r2
11022fe0:	07f8      	br      	0x11022fd0	// 11022fd0 <phy_gpio_cfg_analog_io+0x1c>
        return PPlus_ERR_INVALID_PARAM;
11022fe2:	3006      	movi      	r0, 6
11022fe4:	07f8      	br      	0x11022fd4	// 11022fd4 <phy_gpio_cfg_analog_io+0x20>
11022fe6:	0000      	bkpt
11022fe8:	40003800 	.long	0x40003800

11022fec <phy_gpio_pin2pin3_control>:
{
11022fec:	14d0      	push      	r15
    if (en) {
11022fee:	3940      	cmpnei      	r1, 0
11022ff0:	0c04      	bf      	0x11022ff8	// 11022ff8 <phy_gpio_pin2pin3_control+0xc>
11022ff2:	e3ffff4b 	bsr      	0x11022e88	// 11022e88 <phy_gpio_pin2pin3_control.part.2>
}
11022ff6:	1490      	pop      	r15
        AP_IOMUX->gpio_pad_en &= ~BIT(pin - 2);
11022ff8:	1045      	lrw      	r2, 0x40003800	// 1102300c <phy_gpio_pin2pin3_control+0x20>
11022ffa:	2801      	subi      	r0, 2
11022ffc:	9225      	ld.w      	r1, (r2, 0x14)
11022ffe:	3300      	movi      	r3, 0
11023000:	2b01      	subi      	r3, 2
11023002:	70c3      	rotl      	r3, r0
11023004:	68c4      	and      	r3, r1
11023006:	b265      	st.w      	r3, (r2, 0x14)
}
11023008:	07f7      	br      	0x11022ff6	// 11022ff6 <phy_gpio_pin2pin3_control+0xa>
1102300a:	0000      	bkpt
1102300c:	40003800 	.long	0x40003800

11023010 <phy_gpioretention_register>:
    return PPlus_SUCCESS;
}

int phy_gpioretention_register(gpio_pin_e pin)
{
    if (AP_GPIO->swporta_ddr & BIT(pin)) {
11023010:	1068      	lrw      	r3, 0x40008000	// 11023030 <phy_gpioretention_register+0x20>
11023012:	9341      	ld.w      	r2, (r3, 0x4)
11023014:	7081      	lsr      	r2, r0
11023016:	3301      	movi      	r3, 1
11023018:	688c      	and      	r2, r3
1102301a:	3a40      	cmpnei      	r2, 0
1102301c:	0c08      	bf      	0x1102302c	// 1102302c <phy_gpioretention_register+0x1c>
        c_gpio_retention |= BIT(pin);
1102301e:	1046      	lrw      	r2, 0x1fffb490	// 11023034 <phy_gpioretention_register+0x24>
11023020:	70c0      	lsl      	r3, r0
11023022:	9200      	ld.w      	r0, (r2, 0x0)
11023024:	6cc0      	or      	r3, r0
11023026:	b260      	st.w      	r3, (r2, 0x0)
        return true;
11023028:	3001      	movi      	r0, 1
    }
    else {
        return false;
    }
}
1102302a:	783c      	jmp      	r15
        return false;
1102302c:	3000      	movi      	r0, 0
1102302e:	07fe      	br      	0x1102302a	// 1102302a <phy_gpioretention_register+0x1a>
11023030:	40008000 	.long	0x40008000
11023034:	1fffb490 	.long	0x1fffb490

11023038 <drv_pinmux_config>:
  \param[in]   pin_func  refs to pin_func_e.
  \return      0-success or -1-failure
*/
uint8_t uart_tx_rx_pin[4] = {0xff,0xff,0xff,0xff};
int32_t drv_pinmux_config(pin_name_e pin, pin_func_e pin_func)
{
11023038:	14d1      	push      	r4, r15
1102303a:	6d03      	mov      	r4, r0
    if (pin_func == PIN_FUNC_GPIO) {
1102303c:	eb410063 	cmpnei      	r1, 99
11023040:	0816      	bt      	0x1102306c	// 1102306c <drv_pinmux_config+0x34>

        phy_gpio_fmux(pin, Bit_DISABLE);
11023042:	3100      	movi      	r1, 0
11023044:	e3ffff3e 	bsr      	0x11022ec0	// 11022ec0 <phy_gpio_fmux>

        if ((pin >= 16) && (pin <= 17)) {
11023048:	e464100f 	subi      	r3, r4, 16
1102304c:	3b01      	cmphsi      	r3, 2
1102304e:	0807      	bt      	0x1102305c	// 1102305c <drv_pinmux_config+0x24>
            phy_gpio_cfg_analog_io(pin, 0);
11023050:	3100      	movi      	r1, 0
11023052:	6c13      	mov      	r0, r4
11023054:	e3ffffb0 	bsr      	0x11022fb4	// 11022fb4 <phy_gpio_cfg_analog_io>
        }
        phy_gpio_fmux_set(pin, pin_func);
    }

    return 0;
}
11023058:	3000      	movi      	r0, 0
1102305a:	1491      	pop      	r4, r15
        } else if ((pin >= P2) && (pin <= P3)) {
1102305c:	5c67      	subi      	r3, r4, 2
1102305e:	3b01      	cmphsi      	r3, 2
11023060:	0bfc      	bt      	0x11023058	// 11023058 <drv_pinmux_config+0x20>
            phy_gpio_pin2pin3_control(pin, 1);
11023062:	3101      	movi      	r1, 1
11023064:	6c13      	mov      	r0, r4
11023066:	e3ffffc3 	bsr      	0x11022fec	// 11022fec <phy_gpio_pin2pin3_control>
1102306a:	07f7      	br      	0x11023058	// 11023058 <drv_pinmux_config+0x20>
        if(pin_func == FMUX_UART0_TX) {
1102306c:	3944      	cmpnei      	r1, 4
1102306e:	0807      	bt      	0x1102307c	// 1102307c <drv_pinmux_config+0x44>
           uart_tx_rx_pin[0] = pin;
11023070:	106b      	lrw      	r3, 0x1fffa56d	// 1102309c <drv_pinmux_config+0x64>
11023072:	a300      	st.b      	r0, (r3, 0x0)
        phy_gpio_fmux_set(pin, pin_func);
11023074:	6c13      	mov      	r0, r4
11023076:	e3ffff35 	bsr      	0x11022ee0	// 11022ee0 <phy_gpio_fmux_set>
1102307a:	07ef      	br      	0x11023058	// 11023058 <drv_pinmux_config+0x20>
        } else if (pin_func == FMUX_UART0_RX) {
1102307c:	3945      	cmpnei      	r1, 5
1102307e:	0804      	bt      	0x11023086	// 11023086 <drv_pinmux_config+0x4e>
           uart_tx_rx_pin[1] = pin;
11023080:	1067      	lrw      	r3, 0x1fffa56d	// 1102309c <drv_pinmux_config+0x64>
11023082:	a301      	st.b      	r0, (r3, 0x1)
11023084:	07f8      	br      	0x11023074	// 11023074 <drv_pinmux_config+0x3c>
        } else if(pin_func == FMUX_UART1_TX) {
11023086:	3948      	cmpnei      	r1, 8
11023088:	0804      	bt      	0x11023090	// 11023090 <drv_pinmux_config+0x58>
           uart_tx_rx_pin[2] = pin;
1102308a:	1065      	lrw      	r3, 0x1fffa56d	// 1102309c <drv_pinmux_config+0x64>
1102308c:	a302      	st.b      	r0, (r3, 0x2)
1102308e:	07f3      	br      	0x11023074	// 11023074 <drv_pinmux_config+0x3c>
        } else if(pin_func == FMUX_UART1_RX) {
11023090:	3949      	cmpnei      	r1, 9
11023092:	0bf1      	bt      	0x11023074	// 11023074 <drv_pinmux_config+0x3c>
           uart_tx_rx_pin[3] = pin;
11023094:	1062      	lrw      	r3, 0x1fffa56d	// 1102309c <drv_pinmux_config+0x64>
11023096:	a303      	st.b      	r0, (r3, 0x3)
11023098:	07ee      	br      	0x11023074	// 11023074 <drv_pinmux_config+0x3c>
1102309a:	0000      	bkpt
1102309c:	1fffa56d 	.long	0x1fffa56d

110230a0 <hal_pwrmgr_RAM_retention>:
 *
 * @return      refer error.h.
 **************************************************************************************/
int hal_pwrmgr_RAM_retention(uint32_t sram)
{
    if (sram & 0xffffffe0) {
110230a0:	3300      	movi      	r3, 0
110230a2:	2b1f      	subi      	r3, 32
110230a4:	68c0      	and      	r3, r0
110230a6:	3b40      	cmpnei      	r3, 0
110230a8:	1065      	lrw      	r3, 0x1fffb494	// 110230bc <hal_pwrmgr_RAM_retention+0x1c>
110230aa:	0c05      	bf      	0x110230b4	// 110230b4 <hal_pwrmgr_RAM_retention+0x14>
        sramRet_config = 0x00;
110230ac:	3200      	movi      	r2, 0
        return PPlus_ERR_INVALID_PARAM;
110230ae:	3006      	movi      	r0, 6
        sramRet_config = 0x00;
110230b0:	b340      	st.w      	r2, (r3, 0x0)
    }

    sramRet_config = sram;
    return PPlus_SUCCESS;
}
110230b2:	783c      	jmp      	r15
    sramRet_config = sram;
110230b4:	b300      	st.w      	r0, (r3, 0x0)
    return PPlus_SUCCESS;
110230b6:	3000      	movi      	r0, 0
110230b8:	07fd      	br      	0x110230b2	// 110230b2 <hal_pwrmgr_RAM_retention+0x12>
110230ba:	0000      	bkpt
110230bc:	1fffb494 	.long	0x1fffb494

110230c0 <hal_pwrmgr_RAM_retention_set>:
    return PPlus_SUCCESS;
}

int hal_pwrmgr_RAM_retention_set(void)
{
    subWriteReg(0x4000f01c, 21, 17, sramRet_config);
110230c0:	1027      	lrw      	r1, 0x4000f000	// 110230dc <hal_pwrmgr_RAM_retention_set+0x1c>
110230c2:	1068      	lrw      	r3, 0x1fffb494	// 110230e0 <hal_pwrmgr_RAM_retention_set+0x20>
110230c4:	ea20ffc2 	movih      	r0, 65474
110230c8:	9147      	ld.w      	r2, (r1, 0x1c)
110230ca:	9360      	ld.w      	r3, (r3, 0x0)
110230cc:	2800      	subi      	r0, 1
110230ce:	4371      	lsli      	r3, r3, 17
110230d0:	6880      	and      	r2, r0
110230d2:	6cc8      	or      	r3, r2
110230d4:	b167      	st.w      	r3, (r1, 0x1c)
110230d6:	6c03      	mov      	r0, r0
    return PPlus_SUCCESS;
}
110230d8:	3000      	movi      	r0, 0
110230da:	783c      	jmp      	r15
110230dc:	4000f000 	.long	0x4000f000
110230e0:	1fffb494 	.long	0x1fffb494

110230e4 <drv_irq_register>:
void drv_irq_register(uint32_t irq_num, void *irq_handler)
{
#ifdef CONFIG_KERNEL_NONE
    csi_vic_set_vector(irq_num, (uint32_t)irq_handler);
#else
    g_irqvector[irq_num] = irq_handler;
110230e4:	4002      	lsli      	r0, r0, 2
110230e6:	1063      	lrw      	r3, 0x1fffce78	// 110230f0 <drv_irq_register+0xc>
110230e8:	600c      	addu      	r0, r3
110230ea:	b020      	st.w      	r1, (r0, 0x0)
#endif
}
110230ec:	783c      	jmp      	r15
110230ee:	0000      	bkpt
110230f0:	1fffce78 	.long	0x1fffce78

110230f4 <drv_irq_unregister>:
void drv_irq_unregister(uint32_t irq_num)
{
#ifdef CONFIG_KERNEL_NONE
    csi_vic_set_vector(irq_num, (uint32_t)Default_Handler);
#else
    g_irqvector[irq_num] = (void *)Default_Handler;
110230f4:	4002      	lsli      	r0, r0, 2
110230f6:	1063      	lrw      	r3, 0x1fffce78	// 11023100 <drv_irq_unregister+0xc>
110230f8:	600c      	addu      	r0, r3
110230fa:	1063      	lrw      	r3, 0x1101b988	// 11023104 <drv_irq_unregister+0x10>
110230fc:	b060      	st.w      	r3, (r0, 0x0)
#endif
}
110230fe:	783c      	jmp      	r15
11023100:	1fffce78 	.long	0x1fffce78
11023104:	1101b988 	.long	0x1101b988

11023108 <target_get>:
        void *handler;
    } config[];
} device_irq_table_t;

int32_t target_get(const device_irq_table_t *table, int32_t idx, uint32_t *base, uint32_t *irq, void **handler)
{
11023108:	14c2      	push      	r4-r5
    if (idx < table->count) {
1102310a:	9080      	ld.w      	r4, (r0, 0x0)
{
1102310c:	98a2      	ld.w      	r5, (r14, 0x8)
    if (idx < table->count) {
1102310e:	6505      	cmplt      	r1, r4
11023110:	0c19      	bf      	0x11023142	// 11023142 <target_get+0x3a>
        if (base) {
11023112:	3a40      	cmpnei      	r2, 0
11023114:	0c06      	bf      	0x11023120	// 11023120 <target_get+0x18>
            *base = table->config[idx].base;
11023116:	340c      	movi      	r4, 12
11023118:	7d04      	mult      	r4, r1
1102311a:	6100      	addu      	r4, r0
1102311c:	9481      	ld.w      	r4, (r4, 0x4)
1102311e:	b280      	st.w      	r4, (r2, 0x0)
        }

        if (irq) {
11023120:	3b40      	cmpnei      	r3, 0
11023122:	0c06      	bf      	0x1102312e	// 1102312e <target_get+0x26>
            *irq = table->config[idx].irq;
11023124:	320c      	movi      	r2, 12
11023126:	7c84      	mult      	r2, r1
11023128:	6080      	addu      	r2, r0
1102312a:	9242      	ld.w      	r2, (r2, 0x8)
1102312c:	b340      	st.w      	r2, (r3, 0x0)
        }

        if (handler) {
1102312e:	3d40      	cmpnei      	r5, 0
11023130:	0c07      	bf      	0x1102313e	// 1102313e <target_get+0x36>
            *handler = table->config[idx].handler;
11023132:	320c      	movi      	r2, 12
11023134:	5962      	addi      	r3, r1, 1
11023136:	7cc8      	mult      	r3, r2
11023138:	600c      	addu      	r0, r3
1102313a:	9060      	ld.w      	r3, (r0, 0x0)
1102313c:	b560      	st.w      	r3, (r5, 0x0)

        return idx;
    }

    return -1;
}
1102313e:	6c07      	mov      	r0, r1
11023140:	1482      	pop      	r4-r5
    return -1;
11023142:	3100      	movi      	r1, 0
11023144:	2900      	subi      	r1, 1
11023146:	07fc      	br      	0x1102313e	// 1102313e <target_get+0x36>

11023148 <target_usart_init>:
        {AP_UART1_BASE, UART1_IRQn, UART1_IRQHandler},
    }
};

int32_t target_usart_init(int32_t idx, uint32_t *base, uint32_t *irq, void **handler)
{
11023148:	14d0      	push      	r15
1102314a:	1421      	subi      	r14, r14, 4
    return target_get(&sg_usart_config, idx, base, irq, handler);
1102314c:	b860      	st.w      	r3, (r14, 0x0)
1102314e:	6ccb      	mov      	r3, r2
11023150:	6c87      	mov      	r2, r1
11023152:	6c43      	mov      	r1, r0
11023154:	1003      	lrw      	r0, 0x110117a4	// 11023160 <target_usart_init+0x18>
11023156:	e3ffffd9 	bsr      	0x11023108	// 11023108 <target_get>
}
1102315a:	1401      	addi      	r14, r14, 4
1102315c:	1490      	pop      	r15
1102315e:	0000      	bkpt
11023160:	110117a4 	.long	0x110117a4

11023164 <target_gpio_port_init>:
    {P33, 0},
    {P34, 0},
};

int32_t target_gpio_port_init(port_name_e port, uint32_t *base, uint32_t *irq, void **handler, uint32_t *pin_num)
{
11023164:	14c1      	push      	r4
    int i;

    for (i = 0; i < CONFIG_GPIO_NUM; i++) {
        if (sg_gpio_config[i].port == port) {
11023166:	3840      	cmpnei      	r0, 0
{
11023168:	9881      	ld.w      	r4, (r14, 0x4)
        if (sg_gpio_config[i].port == port) {
1102316a:	0813      	bt      	0x11023190	// 11023190 <target_gpio_port_init+0x2c>
            if (base != NULL) {
1102316c:	3940      	cmpnei      	r1, 0
1102316e:	0c03      	bf      	0x11023174	// 11023174 <target_gpio_port_init+0x10>
                *base = sg_gpio_config[i].base;
11023170:	100a      	lrw      	r0, 0x40008000	// 11023198 <target_gpio_port_init+0x34>
11023172:	b100      	st.w      	r0, (r1, 0x0)
            }

            if (irq != NULL) {
11023174:	3a40      	cmpnei      	r2, 0
11023176:	0c03      	bf      	0x1102317c	// 1102317c <target_gpio_port_init+0x18>
                *irq = sg_gpio_config[i].irq;
11023178:	3110      	movi      	r1, 16
1102317a:	b220      	st.w      	r1, (r2, 0x0)
            }

            if (pin_num !=  NULL) {
1102317c:	3c40      	cmpnei      	r4, 0
1102317e:	0c03      	bf      	0x11023184	// 11023184 <target_gpio_port_init+0x20>
                *pin_num = sg_gpio_config[i].pin_num;
11023180:	3217      	movi      	r2, 23
11023182:	b440      	st.w      	r2, (r4, 0x0)
            }

            if (handler !=  NULL) {
11023184:	3b40      	cmpnei      	r3, 0
11023186:	0c03      	bf      	0x1102318c	// 1102318c <target_gpio_port_init+0x28>
                *handler = sg_gpio_config[i].handler;
11023188:	1045      	lrw      	r2, 0x1fff3744	// 1102319c <target_gpio_port_init+0x38>
1102318a:	b340      	st.w      	r2, (r3, 0x0)
1102318c:	3000      	movi      	r0, 0
1102318e:	0403      	br      	0x11023194	// 11023194 <target_gpio_port_init+0x30>

            return i;
        }
    }

    return -1;
11023190:	3000      	movi      	r0, 0
11023192:	2800      	subi      	r0, 1
}
11023194:	1481      	pop      	r4
11023196:	0000      	bkpt
11023198:	40008000 	.long	0x40008000
1102319c:	1fff3744 	.long	0x1fff3744

110231a0 <target_gpio_pin_init>:

int32_t target_gpio_pin_init(int32_t gpio_pin, uint32_t *port_idx)
{
110231a0:	14c2      	push      	r4-r5
    uint32_t idx;
    uint8_t match;

    match = 0;

    for (idx = 0; idx < sizeof(s_gpio_pin_map) / sizeof(gpio_pin_map_t); idx++) {
110231a2:	3300      	movi      	r3, 0
        if (s_gpio_pin_map[idx].gpio_pin == gpio_pin) {
110231a4:	1089      	lrw      	r4, 0x11011741	// 110231c8 <target_gpio_pin_init+0x28>
110231a6:	4341      	lsli      	r2, r3, 1
110231a8:	6090      	addu      	r2, r4
110231aa:	82a0      	ld.b      	r5, (r2, 0x0)
110231ac:	6416      	cmpne      	r5, r0
110231ae:	0807      	bt      	0x110231bc	// 110231bc <target_gpio_pin_init+0x1c>
            if (port_idx != NULL) {
110231b0:	3940      	cmpnei      	r1, 0
110231b2:	0c05      	bf      	0x110231bc	// 110231bc <target_gpio_pin_init+0x1c>
                *port_idx = s_gpio_pin_map[idx].cfg_idx;
110231b4:	8241      	ld.b      	r2, (r2, 0x1)
110231b6:	b140      	st.w      	r2, (r1, 0x0)
            }
        }
    }

    if (match) {
        return idx;
110231b8:	6c0f      	mov      	r0, r3
    } else {
        return -1;
    }
}
110231ba:	1482      	pop      	r4-r5
    for (idx = 0; idx < sizeof(s_gpio_pin_map) / sizeof(gpio_pin_map_t); idx++) {
110231bc:	2300      	addi      	r3, 1
110231be:	3b57      	cmpnei      	r3, 23
110231c0:	0bf3      	bt      	0x110231a6	// 110231a6 <target_gpio_pin_init+0x6>
        return -1;
110231c2:	3000      	movi      	r0, 0
110231c4:	2800      	subi      	r0, 1
110231c6:	07fa      	br      	0x110231ba	// 110231ba <target_gpio_pin_init+0x1a>
110231c8:	11011741 	.long	0x11011741

110231cc <target_get_wdt>:
        {AP_WDT_BASE, WDT_IRQn, CSI_WDT_IRQHandler}
    }
};

int32_t target_get_wdt(int32_t idx, uint32_t *base, uint32_t *irq, void **handler)
{
110231cc:	14d0      	push      	r15
110231ce:	1421      	subi      	r14, r14, 4
    return target_get(&sg_wdt_config, idx, base, irq, handler);
110231d0:	b860      	st.w      	r3, (r14, 0x0)
110231d2:	6ccb      	mov      	r3, r2
110231d4:	6c87      	mov      	r2, r1
110231d6:	6c43      	mov      	r1, r0
110231d8:	1003      	lrw      	r0, 0x110117c0	// 110231e4 <target_get_wdt+0x18>
110231da:	e3ffff97 	bsr      	0x11023108	// 11023108 <target_get>
}
110231de:	1401      	addi      	r14, r14, 4
110231e0:	1490      	pop      	r15
110231e2:	0000      	bkpt
110231e4:	110117c0 	.long	0x110117c0

110231e8 <target_get_dmac>:
        {AP_DMAC_BASE, DMAC_IRQn, CSI_DMAC_IRQHandler},
    }
};

int32_t target_get_dmac(int32_t idx, uint32_t *base, uint32_t *irq, void **handler)
{
110231e8:	14d0      	push      	r15
110231ea:	1421      	subi      	r14, r14, 4
    return target_get(&sg_dmac_config, idx, base, irq, handler);
110231ec:	b860      	st.w      	r3, (r14, 0x0)
110231ee:	6ccb      	mov      	r3, r2
110231f0:	6c87      	mov      	r2, r1
110231f2:	6c43      	mov      	r1, r0
110231f4:	1003      	lrw      	r0, 0x11011770	// 11023200 <target_get_dmac+0x18>
110231f6:	e3ffff89 	bsr      	0x11023108	// 11023108 <target_get>
}
110231fa:	1401      	addi      	r14, r14, 4
110231fc:	1490      	pop      	r15
110231fe:	0000      	bkpt
11023200:	11011770 	.long	0x11011770

11023204 <dw_dma_set_addrinc>:
{
11023204:	14c1      	push      	r4
    if ((src_addrinc != DMA_ADDR_INCREMENT && src_addrinc != DMA_ADDR_DECREMENT && src_addrinc != DMA_ADDR_NOCHANGE) ||
11023206:	3a02      	cmphsi      	r2, 3
11023208:	0813      	bt      	0x1102322e	// 1102322e <dw_dma_set_addrinc+0x2a>
1102320a:	3b02      	cmphsi      	r3, 3
1102320c:	0811      	bt      	0x1102322e	// 1102322e <dw_dma_set_addrinc+0x2a>
    uint32_t value = readl(addr + (ch % 4) * 0x58 + DMA_REG_CTRLax);
1102320e:	3458      	movi      	r4, 88
11023210:	e4212003 	andi      	r1, r1, 3
11023214:	7c50      	mult      	r1, r4
11023216:	2017      	addi      	r0, 24
11023218:	6004      	addu      	r0, r1
1102321a:	9020      	ld.w      	r1, (r0, 0x0)
    value &= ~(0x780);
1102321c:	1086      	lrw      	r4, 0xfffff87f	// 11023234 <dw_dma_set_addrinc+0x30>
    value |= (src_addrinc << 9);
1102321e:	4249      	lsli      	r2, r2, 9
    value |= (dst_addrinc << 7);
11023220:	4367      	lsli      	r3, r3, 7
    value &= ~(0x780);
11023222:	6850      	and      	r1, r4
    value |= (dst_addrinc << 7);
11023224:	6cc8      	or      	r3, r2
11023226:	6cc4      	or      	r3, r1
    writel(value, addr + (ch % 4) * 0x58 + DMA_REG_CTRLax);
11023228:	b060      	st.w      	r3, (r0, 0x0)
    return 0;
1102322a:	3000      	movi      	r0, 0
}
1102322c:	1481      	pop      	r4
        return ERR_DMA(DRV_ERROR_PARAMETER);
1102322e:	1003      	lrw      	r0, 0x810f0084	// 11023238 <dw_dma_set_addrinc+0x34>
11023230:	07fe      	br      	0x1102322c	// 1102322c <dw_dma_set_addrinc+0x28>
11023232:	0000      	bkpt
11023234:	fffff87f 	.long	0xfffff87f
11023238:	810f0084 	.long	0x810f0084

1102323c <csi_dma_alloc_channel>:
{
1102323c:	14d4      	push      	r4-r7, r15
1102323e:	1424      	subi      	r14, r14, 16
11023240:	1153      	lrw      	r2, 0x1fffb498	// 1102330c <csi_dma_alloc_channel+0xd0>
11023242:	6c4b      	mov      	r1, r2
    for (ch_num = 0; ch_num < CONFIG_DMA_CHANNEL_NUM; ch_num++) {
11023244:	3300      	movi      	r3, 0
11023246:	b840      	st.w      	r2, (r14, 0x0)
11023248:	3020      	movi      	r0, 32
        if (dma_instance[ch_num].ch_opened == 0x1) {
1102324a:	81f1      	ld.b      	r7, (r1, 0x11)
1102324c:	3f41      	cmpnei      	r7, 1
1102324e:	0c07      	bf      	0x1102325c	// 1102325c <csi_dma_alloc_channel+0x20>
    for (ch_num = 0; ch_num < CONFIG_DMA_CHANNEL_NUM; ch_num++) {
11023250:	2300      	addi      	r3, 1
11023252:	74cc      	zextb      	r3, r3
11023254:	6040      	addu      	r1, r0
11023256:	3b44      	cmpnei      	r3, 4
11023258:	0bf9      	bt      	0x1102324a	// 1102324a <csi_dma_alloc_channel+0xe>
    uint8_t ch_num = 0, match = 0;
1102325a:	3700      	movi      	r7, 0
    __ASM volatile("mfcr %0, psr" : "=r"(result));
1102325c:	c0006021 	mfcr      	r1, cr<0, 0>
    __ASM volatile("psrclr ie");
11023260:	c0807020 	psrclr      	ie
11023264:	3300      	movi      	r3, 0
11023266:	3020      	movi      	r0, 32
        if (dma_instance[ch_num].ch_opened != 0x1) {
11023268:	82b1      	ld.b      	r5, (r2, 0x11)
1102326a:	750c      	zextb      	r4, r3
1102326c:	3d41      	cmpnei      	r5, 1
1102326e:	0c45      	bf      	0x110232f8	// 110232f8 <csi_dma_alloc_channel+0xbc>
            dma_instance[ch_num].ch_opened = 1;
11023270:	9840      	ld.w      	r2, (r14, 0x0)
11023272:	4365      	lsli      	r3, r3, 5
11023274:	60c8      	addu      	r3, r2
11023276:	3201      	movi      	r2, 1
11023278:	a351      	st.b      	r2, (r3, 0x11)
    __ASM volatile("mtcr %0, psr" : : "r"(psr));
1102327a:	c0016420 	mtcr      	r1, cr<0, 0>
    if (ch_num >= CONFIG_DMA_CHANNEL_NUM) {
1102327e:	3c44      	cmpnei      	r4, 4
11023280:	0c42      	bf      	0x11023304	// 11023304 <csi_dma_alloc_channel+0xc8>
    hal_clk_gate_enable(MOD_DMA);
11023282:	3003      	movi      	r0, 3
    dma_instance[ch_num].ch_num = ch_num;
11023284:	6d53      	mov      	r5, r4
    hal_clk_gate_enable(MOD_DMA);
11023286:	e0002fe7 	bsr      	0x11029254	// 11029254 <cpu_task_stack_init+0x8ac>
    dma_instance[ch_num].ch_num = ch_num;
1102328a:	4465      	lsli      	r3, r4, 5
1102328c:	98c0      	ld.w      	r6, (r14, 0x0)
1102328e:	618c      	addu      	r6, r3
11023290:	a690      	st.b      	r4, (r6, 0x10)
    uint32_t base = 0u;
11023292:	3300      	movi      	r3, 0
    target_get_dmac(ch_num, &base, &irq, &handler);
11023294:	6c13      	mov      	r0, r4
    uint32_t base = 0u;
11023296:	b861      	st.w      	r3, (r14, 0x4)
    uint32_t irq = 0u;
11023298:	b862      	st.w      	r3, (r14, 0x8)
    target_get_dmac(ch_num, &base, &irq, &handler);
1102329a:	1a02      	addi      	r2, r14, 8
1102329c:	1b03      	addi      	r3, r14, 12
1102329e:	1901      	addi      	r1, r14, 4
110232a0:	e3ffffa4 	bsr      	0x110231e8	// 110231e8 <target_get_dmac>
    dma_priv->base = base;
110232a4:	9861      	ld.w      	r3, (r14, 0x4)
    dma_priv->irq  = irq;
110232a6:	9802      	ld.w      	r0, (r14, 0x8)
    if (match == 0) {
110232a8:	3f40      	cmpnei      	r7, 0
    dma_priv->base = base;
110232aa:	b660      	st.w      	r3, (r6, 0x0)
    dma_priv->irq  = irq;
110232ac:	b602      	st.w      	r0, (r6, 0x8)
    if (match == 0) {
110232ae:	0807      	bt      	0x110232bc	// 110232bc <csi_dma_alloc_channel+0x80>
        drv_irq_register(dma_priv->irq, handler);
110232b0:	9823      	ld.w      	r1, (r14, 0xc)
110232b2:	e3ffff19 	bsr      	0x110230e4	// 110230e4 <drv_irq_register>
        drv_irq_enable(dma_priv->irq);
110232b6:	9602      	ld.w      	r0, (r6, 0x8)
110232b8:	e0003094 	bsr      	0x110293e0	// 110293e0 <cpu_task_stack_init+0xa38>
    uint32_t addr = dma_priv->base;
110232bc:	4465      	lsli      	r3, r4, 5
    writel((1 << ch_num), addr + DMA_REG_ClearTfr);
110232be:	3201      	movi      	r2, 1
    uint32_t addr = dma_priv->base;
110232c0:	9820      	ld.w      	r1, (r14, 0x0)
110232c2:	604c      	addu      	r1, r3
110232c4:	9160      	ld.w      	r3, (r1, 0x0)
    writel((1 << ch_num), addr + DMA_REG_ClearTfr);
110232c6:	c4824020 	lsl      	r0, r2, r4
    uint32_t value = 1 << ch_num | (1 << (ch_num + 8));
110232ca:	2407      	addi      	r4, 8
110232cc:	c4824024 	lsl      	r4, r2, r4
110232d0:	6d00      	or      	r4, r0
    writel((1 << ch_num), addr + DMA_REG_ClearTfr);
110232d2:	dc0320ce 	st.w      	r0, (r3, 0x338)
    writel((1 << ch_num), addr + DMA_REG_ClearBlock);
110232d6:	dc0320d0 	st.w      	r0, (r3, 0x340)
    writel((1 << ch_num), addr + DMA_REG_ClearErr);
110232da:	dc0320d6 	st.w      	r0, (r3, 0x358)
    writel((1 << ch_num), addr + DMA_REG_ClearSrcTran);
110232de:	dc0320d2 	st.w      	r0, (r3, 0x348)
    writel((1 << ch_num), addr + DMA_REG_ClearDstTran);
110232e2:	dc0320d4 	st.w      	r0, (r3, 0x350)
    writel(value, addr + DMA_REG_MaskTfr);
110232e6:	dc8320c4 	st.w      	r4, (r3, 0x310)
    writel(value, addr + DMA_REG_MaskErr);
110232ea:	dc8320cc 	st.w      	r4, (r3, 0x330)
    dma_priv->status = DMA_STATE_READY;
110232ee:	3301      	movi      	r3, 1
110232f0:	b165      	st.w      	r3, (r1, 0x14)
}
110232f2:	6c17      	mov      	r0, r5
110232f4:	1404      	addi      	r14, r14, 16
110232f6:	1494      	pop      	r4-r7, r15
110232f8:	2300      	addi      	r3, 1
    for (ch_num = 0; ch_num < CONFIG_DMA_CHANNEL_NUM; ch_num++) {
110232fa:	3b44      	cmpnei      	r3, 4
110232fc:	6080      	addu      	r2, r0
110232fe:	0bb5      	bt      	0x11023268	// 11023268 <csi_dma_alloc_channel+0x2c>
11023300:	3404      	movi      	r4, 4
11023302:	07bc      	br      	0x1102327a	// 1102327a <csi_dma_alloc_channel+0x3e>
        return -1;
11023304:	3500      	movi      	r5, 0
11023306:	2d00      	subi      	r5, 1
11023308:	07f5      	br      	0x110232f2	// 110232f2 <csi_dma_alloc_channel+0xb6>
1102330a:	0000      	bkpt
1102330c:	1fffb498 	.long	0x1fffb498

11023310 <csi_dma_release_channel>:
{
11023310:	14d2      	push      	r4-r5, r15
    if (ch >= CONFIG_DMA_CHANNEL_NUM || ch < 0) {
11023312:	3803      	cmphsi      	r0, 4
11023314:	082e      	bt      	0x11023370	// 11023370 <csi_dma_release_channel+0x60>
    dma_priv->status = DMA_STATE_FREE;
11023316:	3500      	movi      	r5, 0
    uint32_t addr = dma_priv->base;
11023318:	1077      	lrw      	r3, 0x1fffb498	// 11023374 <csi_dma_release_channel+0x64>
1102331a:	4025      	lsli      	r1, r0, 5
1102331c:	5b84      	addu      	r4, r3, r1
1102331e:	9440      	ld.w      	r2, (r4, 0x0)
    dma_priv->status = DMA_STATE_FREE;
11023320:	b4a5      	st.w      	r5, (r4, 0x14)
    dma_priv->ch_opened = 0;
11023322:	a4b1      	st.b      	r5, (r4, 0x11)
    writel((1 << ch), addr + DMA_REG_ClearTfr);
11023324:	3401      	movi      	r4, 1
11023326:	c4044025 	lsl      	r5, r4, r0
    uint32_t value = (1 << (ch + 8));
1102332a:	2007      	addi      	r0, 8
1102332c:	c4044020 	lsl      	r0, r4, r0
    writel((1 << ch), addr + DMA_REG_ClearTfr);
11023330:	dca220ce 	st.w      	r5, (r2, 0x338)
11023334:	6d0f      	mov      	r4, r3
    writel((1 << ch), addr + DMA_REG_ClearBlock);
11023336:	dca220d0 	st.w      	r5, (r2, 0x340)
    writel((1 << ch), addr + DMA_REG_ClearErr);
1102333a:	dca220d6 	st.w      	r5, (r2, 0x358)
    writel((1 << ch), addr + DMA_REG_ClearSrcTran);
1102333e:	dca220d2 	st.w      	r5, (r2, 0x348)
    writel((1 << ch), addr + DMA_REG_ClearDstTran);
11023342:	dca220d4 	st.w      	r5, (r2, 0x350)
    writel(value, addr + DMA_REG_MaskTfr);
11023346:	dc0220c4 	st.w      	r0, (r2, 0x310)
    writel(value, addr + DMA_REG_MaskErr);
1102334a:	dc0220cc 	st.w      	r0, (r2, 0x330)
1102334e:	3204      	movi      	r2, 4
11023350:	3020      	movi      	r0, 32
        if (dma_instance[ch_num].ch_opened == 0x1) {
11023352:	83b1      	ld.b      	r5, (r3, 0x11)
11023354:	3d41      	cmpnei      	r5, 1
11023356:	0c0d      	bf      	0x11023370	// 11023370 <csi_dma_release_channel+0x60>
11023358:	2a00      	subi      	r2, 1
1102335a:	7488      	zextb      	r2, r2
1102335c:	60c0      	addu      	r3, r0
    for (ch_num = 0; ch_num < CONFIG_DMA_CHANNEL_NUM; ch_num++) {
1102335e:	3a40      	cmpnei      	r2, 0
11023360:	0bf9      	bt      	0x11023352	// 11023352 <csi_dma_release_channel+0x42>
        drv_irq_disable(dma_priv->irq);
11023362:	6104      	addu      	r4, r1
11023364:	9402      	ld.w      	r0, (r4, 0x8)
11023366:	e0002e39 	bsr      	0x11028fd8	// 11028fd8 <cpu_task_stack_init+0x630>
        drv_irq_unregister(dma_priv->irq);
1102336a:	9402      	ld.w      	r0, (r4, 0x8)
1102336c:	e3fffec4 	bsr      	0x110230f4	// 110230f4 <drv_irq_unregister>
}
11023370:	1492      	pop      	r4-r5, r15
11023372:	0000      	bkpt
11023374:	1fffb498 	.long	0x1fffb498

11023378 <csi_dma_config_channel>:
{
11023378:	14d4      	push      	r4-r7, r15
1102337a:	1424      	subi      	r14, r14, 16
1102337c:	6d07      	mov      	r4, r1
    if (ch >= CONFIG_DMA_CHANNEL_NUM || ch < 0 || config == NULL) {
1102337e:	3803      	cmphsi      	r0, 4
{
11023380:	b801      	st.w      	r0, (r14, 0x4)
    if (ch >= CONFIG_DMA_CHANNEL_NUM || ch < 0 || config == NULL) {
11023382:	0c04      	bf      	0x1102338a	// 1102338a <csi_dma_config_channel+0x12>
        return ERR_DMA(DRV_ERROR_PARAMETER);
11023384:	1301      	lrw      	r0, 0x810f0084	// 11023508 <csi_dma_config_channel+0x190>
}
11023386:	1404      	addi      	r14, r14, 16
11023388:	1494      	pop      	r4-r7, r15
    if (ch >= CONFIG_DMA_CHANNEL_NUM || ch < 0 || config == NULL) {
1102338a:	3940      	cmpnei      	r1, 0
1102338c:	0ffc      	bf      	0x11023384	// 11023384 <csi_dma_config_channel+0xc>
    dma_priv->cb_event = cb_event;
1102338e:	9861      	ld.w      	r3, (r14, 0x4)
11023390:	4365      	lsli      	r3, r3, 5
11023392:	123f      	lrw      	r1, 0x1fffb498	// 1102350c <csi_dma_config_channel+0x194>
11023394:	60c4      	addu      	r3, r1
11023396:	b343      	st.w      	r2, (r3, 0xc)
    if (dma_priv->ch_opened == 0) {
11023398:	8351      	ld.b      	r2, (r3, 0x11)
1102339a:	b823      	st.w      	r1, (r14, 0xc)
1102339c:	3a40      	cmpnei      	r2, 0
1102339e:	0cb2      	bf      	0x11023502	// 11023502 <csi_dma_config_channel+0x18a>
    uint32_t addr = dma_priv->base;
110233a0:	9340      	ld.w      	r2, (r3, 0x0)
    int32_t ret = dw_dma_set_transferwidth(addr, dma_priv->ch_num, config->src_tw, config->dst_tw);
110233a2:	84d0      	ld.b      	r6, (r4, 0x10)
    if ((src_width != DMA_DATAWIDTH_SIZE8 && src_width != DMA_DATAWIDTH_SIZE16 && src_width != DMA_DATAWIDTH_SIZE32) ||
110233a4:	5ea3      	subi      	r5, r6, 1
110233a6:	3d01      	cmphsi      	r5, 2
    uint32_t addr = dma_priv->base;
110233a8:	b840      	st.w      	r2, (r14, 0x0)
    int32_t ret = dw_dma_set_transferwidth(addr, dma_priv->ch_num, config->src_tw, config->dst_tw);
110233aa:	8431      	ld.b      	r1, (r4, 0x11)
110233ac:	8350      	ld.b      	r2, (r3, 0x10)
    if ((src_width != DMA_DATAWIDTH_SIZE8 && src_width != DMA_DATAWIDTH_SIZE16 && src_width != DMA_DATAWIDTH_SIZE32) ||
110233ae:	0c03      	bf      	0x110233b4	// 110233b4 <csi_dma_config_channel+0x3c>
110233b0:	3e44      	cmpnei      	r6, 4
110233b2:	0be9      	bt      	0x11023384	// 11023384 <csi_dma_config_channel+0xc>
        (dst_width != DMA_DATAWIDTH_SIZE8 && dst_width != DMA_DATAWIDTH_SIZE16 && dst_width != DMA_DATAWIDTH_SIZE32)) {
110233b4:	59e3      	subi      	r7, r1, 1
    if ((src_width != DMA_DATAWIDTH_SIZE8 && src_width != DMA_DATAWIDTH_SIZE16 && src_width != DMA_DATAWIDTH_SIZE32) ||
110233b6:	3f01      	cmphsi      	r7, 2
110233b8:	0c03      	bf      	0x110233be	// 110233be <csi_dma_config_channel+0x46>
        (dst_width != DMA_DATAWIDTH_SIZE8 && dst_width != DMA_DATAWIDTH_SIZE16 && dst_width != DMA_DATAWIDTH_SIZE32)) {
110233ba:	3944      	cmpnei      	r1, 4
110233bc:	0be4      	bt      	0x11023384	// 11023384 <csi_dma_config_channel+0xc>
110233be:	9860      	ld.w      	r3, (r14, 0x0)
    uint32_t value = readl(addr + (ch % 4) * 0x58 + DMA_REG_CTRLax);
110233c0:	e4422003 	andi      	r2, r2, 3
110233c4:	e4030017 	addi      	r0, r3, 24
110233c8:	3358      	movi      	r3, 88
110233ca:	7c8c      	mult      	r2, r3
    if (src_width == DMA_DATAWIDTH_SIZE32) {
110233cc:	3e44      	cmpnei      	r6, 4
    uint32_t value = readl(addr + (ch % 4) * 0x58 + DMA_REG_CTRLax);
110233ce:	6080      	addu      	r2, r0
110233d0:	9260      	ld.w      	r3, (r2, 0x0)
110233d2:	b842      	st.w      	r2, (r14, 0x8)
    value &= ~(0x7e);
110233d4:	3200      	movi      	r2, 0
110233d6:	2a7e      	subi      	r2, 127
110233d8:	68c8      	and      	r3, r2
    if (src_width == DMA_DATAWIDTH_SIZE32) {
110233da:	0843      	bt      	0x11023460	// 11023460 <csi_dma_config_channel+0xe8>
        value |= (src_width - 2) << 4;
110233dc:	ec630020 	ori      	r3, r3, 32
    if (dst_width == DMA_DATAWIDTH_SIZE32) {
110233e0:	3944      	cmpnei      	r1, 4
110233e2:	0842      	bt      	0x11023466	// 11023466 <csi_dma_config_channel+0xee>
    writel(value, addr + (ch % 4) * 0x58 + DMA_REG_CTRLax);
110233e4:	9842      	ld.w      	r2, (r14, 0x8)
        value |= (dst_width - 1) << 1;
110233e6:	6cc4      	or      	r3, r1
    writel(value, addr + (ch % 4) * 0x58 + DMA_REG_CTRLax);
110233e8:	b260      	st.w      	r3, (r2, 0x0)
    dma_priv->dst_tw = config->dst_tw;
110233ea:	9861      	ld.w      	r3, (r14, 0x4)
110233ec:	4325      	lsli      	r1, r3, 5
110233ee:	9863      	ld.w      	r3, (r14, 0xc)
110233f0:	604c      	addu      	r1, r3
110233f2:	8471      	ld.b      	r3, (r4, 0x11)
110233f4:	b167      	st.w      	r3, (r1, 0x1c)
    dma_priv->src_tw = config->src_tw;
110233f6:	8470      	ld.b      	r3, (r4, 0x10)
110233f8:	b166      	st.w      	r3, (r1, 0x18)
    ret = dw_dma_set_transfertype(addr, dma_priv->ch_num, config->type);
110233fa:	9465      	ld.w      	r3, (r4, 0x14)
    if (transtype >= DMA_PERH2PERH) {
110233fc:	3b02      	cmphsi      	r3, 3
110233fe:	0bc3      	bt      	0x11023384	// 11023384 <csi_dma_config_channel+0xc>
    ret = dw_dma_set_transfertype(addr, dma_priv->ch_num, config->type);
11023400:	210f      	addi      	r1, 16
    uint32_t value = readl(addr + (ch % 4) * 0x58 + DMA_REG_CTRLax);
11023402:	8140      	ld.b      	r2, (r1, 0x0)
11023404:	3703      	movi      	r7, 3
11023406:	689c      	and      	r2, r7
11023408:	3658      	movi      	r6, 88
1102340a:	7c98      	mult      	r2, r6
1102340c:	6008      	addu      	r0, r2
1102340e:	9040      	ld.w      	r2, (r0, 0x0)
    value &= ~(0x300000);
11023410:	3a94      	bclri      	r2, 20
11023412:	3a95      	bclri      	r2, 21
    value |= transtype << 20;
11023414:	4374      	lsli      	r3, r3, 20
11023416:	6cc8      	or      	r3, r2
    writel(value, addr + (ch % 4) * 0x58 + DMA_REG_CTRLax);
11023418:	b060      	st.w      	r3, (r0, 0x0)
    if (config->type == DMA_MEM2MEM) {
1102341a:	9465      	ld.w      	r3, (r4, 0x14)
1102341c:	3b40      	cmpnei      	r3, 0
1102341e:	0826      	bt      	0x1102346a	// 1102346a <csi_dma_config_channel+0xf2>
    uint32_t value = readl(addr + (ch % 4) * 0x58 + DMA_REG_CFGax);
11023420:	81a0      	ld.b      	r5, (r1, 0x0)
11023422:	69d4      	and      	r7, r5
11023424:	9860      	ld.w      	r3, (r14, 0x0)
11023426:	7d9c      	mult      	r6, r7
11023428:	e4e3003f 	addi      	r7, r3, 64
1102342c:	619c      	addu      	r6, r7
1102342e:	9660      	ld.w      	r3, (r6, 0x0)
    value |= (src_handshaking << 11  | dst_handshaking << 10);
11023430:	ec630c00 	ori      	r3, r3, 3072
    writel(value, addr + (ch % 4) * 0x58 + DMA_REG_CFGax);
11023434:	b660      	st.w      	r3, (r6, 0x0)
        ret = dw_dma_set_addrinc(addr, dma_priv->ch_num, config->src_inc, config->dst_inc);
11023436:	9800      	ld.w      	r0, (r14, 0x0)
11023438:	9461      	ld.w      	r3, (r4, 0x4)
1102343a:	9440      	ld.w      	r2, (r4, 0x0)
1102343c:	8120      	ld.b      	r1, (r1, 0x0)
1102343e:	e3fffee3 	bsr      	0x11023204	// 11023204 <dw_dma_set_addrinc>
        if (ret < 0) {
11023442:	38df      	btsti      	r0, 31
11023444:	0ba1      	bt      	0x11023386	// 11023386 <csi_dma_config_channel+0xe>
    writel(0x1, addr + DMA_REG_Cfg);
11023446:	9860      	ld.w      	r3, (r14, 0x0)
11023448:	3201      	movi      	r2, 1
    return 0;
1102344a:	3000      	movi      	r0, 0
    writel(0x1, addr + DMA_REG_Cfg);
1102344c:	dc4320e6 	st.w      	r2, (r3, 0x398)
    dma_priv->status = DMA_STATE_READY;
11023450:	9861      	ld.w      	r3, (r14, 0x4)
11023452:	4365      	lsli      	r3, r3, 5
11023454:	9843      	ld.w      	r2, (r14, 0xc)
11023456:	608c      	addu      	r2, r3
11023458:	6ccb      	mov      	r3, r2
1102345a:	3201      	movi      	r2, 1
1102345c:	b345      	st.w      	r2, (r3, 0x14)
    return 0;
1102345e:	0794      	br      	0x11023386	// 11023386 <csi_dma_config_channel+0xe>
        value |= (src_width - 1) << 4;
11023460:	45a4      	lsli      	r5, r5, 4
11023462:	6cd4      	or      	r3, r5
11023464:	07be      	br      	0x110233e0	// 110233e0 <csi_dma_config_channel+0x68>
        value |= (dst_width - 1) << 1;
11023466:	4721      	lsli      	r1, r7, 1
11023468:	07be      	br      	0x110233e4	// 110233e4 <csi_dma_config_channel+0x6c>
    } else if (config->type == DMA_MEM2PERH) {
1102346a:	3b41      	cmpnei      	r3, 1
1102346c:	0826      	bt      	0x110234b8	// 110234b8 <csi_dma_config_channel+0x140>
    uint32_t value = readl(addr + (ch % 4) * 0x58 + DMA_REG_CFGax);
1102346e:	8160      	ld.b      	r3, (r1, 0x0)
11023470:	68dc      	and      	r3, r7
11023472:	9840      	ld.w      	r2, (r14, 0x0)
11023474:	7cd8      	mult      	r3, r6
11023476:	223f      	addi      	r2, 64
11023478:	60c8      	addu      	r3, r2
1102347a:	9340      	ld.w      	r2, (r3, 0x0)
    value &= ~(0xc00);
1102347c:	3a8a      	bclri      	r2, 10
1102347e:	3a8b      	bclri      	r2, 11
    value |= (src_handshaking << 11  | dst_handshaking << 10);
11023480:	ec420800 	ori      	r2, r2, 2048
    writel(value, addr + (ch % 4) * 0x58 + DMA_REG_CFGax);
11023484:	b340      	st.w      	r2, (r3, 0x0)
        ret = dw_dma_set_addrinc(addr, dma_priv->ch_num, config->src_inc, config->dst_inc);
11023486:	9800      	ld.w      	r0, (r14, 0x0)
11023488:	81a0      	ld.b      	r5, (r1, 0x0)
1102348a:	9461      	ld.w      	r3, (r4, 0x4)
1102348c:	9440      	ld.w      	r2, (r4, 0x0)
1102348e:	6c57      	mov      	r1, r5
11023490:	e3fffeba 	bsr      	0x11023204	// 11023204 <dw_dma_set_addrinc>
        if (ret < 0) {
11023494:	38df      	btsti      	r0, 31
11023496:	0b78      	bt      	0x11023386	// 11023386 <csi_dma_config_channel+0xe>
        ret = dw_dma_assign_hdhs_interface(addr, dma_priv->ch_num, 0, config->hs_if);
11023498:	8472      	ld.b      	r3, (r4, 0x12)
    if (src_device < 0 || src_device >= DWENUM_DMA_MEMORY || dst_device < 0 || dst_device >= DWENUM_DMA_MEMORY) {
1102349a:	3b0f      	cmphsi      	r3, 16
1102349c:	0b74      	bt      	0x11023384	// 11023384 <csi_dma_config_channel+0xc>
    uint32_t value = readl(addr + (ch % 4) * 0x58 + DMA_REG_CFGbx);
1102349e:	695c      	and      	r5, r7
110234a0:	7d94      	mult      	r6, r5
110234a2:	9840      	ld.w      	r2, (r14, 0x0)
110234a4:	e4a20043 	addi      	r5, r2, 68
110234a8:	6194      	addu      	r6, r5
110234aa:	9640      	ld.w      	r2, (r6, 0x0)
    value &= ~(0x7f80);
110234ac:	1039      	lrw      	r1, 0xffff807f	// 11023510 <csi_dma_config_channel+0x198>
110234ae:	6884      	and      	r2, r1
    value |= (src_device << 7 | dst_device << 11);
110234b0:	436b      	lsli      	r3, r3, 11
110234b2:	6cc8      	or      	r3, r2
    writel(value, addr + (ch % 4) * 0x58 + DMA_REG_CFGbx);
110234b4:	b660      	st.w      	r3, (r6, 0x0)
110234b6:	07c8      	br      	0x11023446	// 11023446 <csi_dma_config_channel+0xce>
    } else if (config->type == DMA_PERH2MEM) {
110234b8:	3b42      	cmpnei      	r3, 2
110234ba:	0bc6      	bt      	0x11023446	// 11023446 <csi_dma_config_channel+0xce>
    uint32_t value = readl(addr + (ch % 4) * 0x58 + DMA_REG_CFGax);
110234bc:	8160      	ld.b      	r3, (r1, 0x0)
110234be:	68dc      	and      	r3, r7
110234c0:	9840      	ld.w      	r2, (r14, 0x0)
110234c2:	7cd8      	mult      	r3, r6
110234c4:	223f      	addi      	r2, 64
110234c6:	60c8      	addu      	r3, r2
110234c8:	9340      	ld.w      	r2, (r3, 0x0)
    value &= ~(0xc00);
110234ca:	3a8a      	bclri      	r2, 10
110234cc:	3a8b      	bclri      	r2, 11
    value |= (src_handshaking << 11  | dst_handshaking << 10);
110234ce:	ec420400 	ori      	r2, r2, 1024
    writel(value, addr + (ch % 4) * 0x58 + DMA_REG_CFGax);
110234d2:	b340      	st.w      	r2, (r3, 0x0)
        ret = dw_dma_set_addrinc(addr, dma_priv->ch_num, config->src_inc, config->dst_inc);
110234d4:	9800      	ld.w      	r0, (r14, 0x0)
110234d6:	81a0      	ld.b      	r5, (r1, 0x0)
110234d8:	9461      	ld.w      	r3, (r4, 0x4)
110234da:	9440      	ld.w      	r2, (r4, 0x0)
110234dc:	6c57      	mov      	r1, r5
110234de:	e3fffe93 	bsr      	0x11023204	// 11023204 <dw_dma_set_addrinc>
        if (ret < 0) {
110234e2:	38df      	btsti      	r0, 31
110234e4:	0b51      	bt      	0x11023386	// 11023386 <csi_dma_config_channel+0xe>
        ret = dw_dma_assign_hdhs_interface(addr, dma_priv->ch_num, config->hs_if, 0);
110234e6:	8472      	ld.b      	r3, (r4, 0x12)
    if (src_device < 0 || src_device >= DWENUM_DMA_MEMORY || dst_device < 0 || dst_device >= DWENUM_DMA_MEMORY) {
110234e8:	3b0f      	cmphsi      	r3, 16
110234ea:	0b4d      	bt      	0x11023384	// 11023384 <csi_dma_config_channel+0xc>
    uint32_t value = readl(addr + (ch % 4) * 0x58 + DMA_REG_CFGbx);
110234ec:	695c      	and      	r5, r7
110234ee:	7d94      	mult      	r6, r5
110234f0:	9840      	ld.w      	r2, (r14, 0x0)
110234f2:	e4a20043 	addi      	r5, r2, 68
110234f6:	6194      	addu      	r6, r5
110234f8:	9640      	ld.w      	r2, (r6, 0x0)
    value &= ~(0x7f80);
110234fa:	1026      	lrw      	r1, 0xffff807f	// 11023510 <csi_dma_config_channel+0x198>
110234fc:	6884      	and      	r2, r1
    value |= (src_device << 7 | dst_device << 11);
110234fe:	4367      	lsli      	r3, r3, 7
11023500:	07d9      	br      	0x110234b2	// 110234b2 <csi_dma_config_channel+0x13a>
        return ERR_DMA(DRV_ERROR_BUSY);
11023502:	1005      	lrw      	r0, 0x810f0081	// 11023514 <csi_dma_config_channel+0x19c>
11023504:	0741      	br      	0x11023386	// 11023386 <csi_dma_config_channel+0xe>
11023506:	0000      	bkpt
11023508:	810f0084 	.long	0x810f0084
1102350c:	1fffb498 	.long	0x1fffb498
11023510:	ffff807f 	.long	0xffff807f
11023514:	810f0081 	.long	0x810f0081

11023518 <dw_gpio_set_direction>:
    if (direction == GPIO_DIRECTION_INPUT) {
11023518:	3940      	cmpnei      	r1, 0
    dw_gpio_reg_t *gpio_reg = (dw_gpio_reg_t *)(gpio_priv->base);
1102351a:	9060      	ld.w      	r3, (r0, 0x0)
    if (direction == GPIO_DIRECTION_INPUT) {
1102351c:	0808      	bt      	0x1102352c	// 1102352c <dw_gpio_set_direction+0x14>
        gpio_reg->SWPORT_DDR &= (~gpio_priv->mask);
1102351e:	9321      	ld.w      	r1, (r3, 0x4)
11023520:	9045      	ld.w      	r2, (r0, 0x14)
11023522:	c4412042 	andn      	r2, r1, r2
        gpio_reg->SWPORT_DDR |= gpio_priv->mask;
11023526:	b341      	st.w      	r2, (r3, 0x4)
    return 0;
11023528:	3000      	movi      	r0, 0
}
1102352a:	783c      	jmp      	r15
    } else if (direction == GPIO_DIRECTION_OUTPUT) {
1102352c:	3941      	cmpnei      	r1, 1
1102352e:	0805      	bt      	0x11023538	// 11023538 <dw_gpio_set_direction+0x20>
        gpio_reg->SWPORT_DDR |= gpio_priv->mask;
11023530:	9341      	ld.w      	r2, (r3, 0x4)
11023532:	9025      	ld.w      	r1, (r0, 0x14)
11023534:	6c84      	or      	r2, r1
11023536:	07f8      	br      	0x11023526	// 11023526 <dw_gpio_set_direction+0xe>
        return ERR_GPIO(GPIO_ERROR_DIRECTION);
11023538:	1001      	lrw      	r0, 0x81010087	// 1102353c <dw_gpio_set_direction+0x24>
1102353a:	07f8      	br      	0x1102352a	// 1102352a <dw_gpio_set_direction+0x12>
1102353c:	81010087 	.long	0x81010087

11023540 <csi_gpio_port_initialize>:
                3.get gpio_port_handle
  \param[in]   port      port_name.
  \return      gpio_port_handle
*/
gpio_port_handle_t csi_gpio_port_initialize(int32_t port)
{
11023540:	14d1      	push      	r4, r15
11023542:	1425      	subi      	r14, r14, 20
    dw_gpio_priv_t *gpio_priv = NULL;

    /* obtain the gpio port information */
    uint32_t base = 0u;
11023544:	3300      	movi      	r3, 0
    uint32_t pin_num;
    uint32_t irq;
    void *handler;
    int32_t idx = target_gpio_port_init(port, &base, &irq, &handler, &pin_num);
11023546:	1a03      	addi      	r2, r14, 12
    uint32_t base = 0u;
11023548:	b861      	st.w      	r3, (r14, 0x4)
    int32_t idx = target_gpio_port_init(port, &base, &irq, &handler, &pin_num);
1102354a:	1b02      	addi      	r3, r14, 8
1102354c:	b860      	st.w      	r3, (r14, 0x0)
1102354e:	1901      	addi      	r1, r14, 4
11023550:	1b04      	addi      	r3, r14, 16
11023552:	e3fffe09 	bsr      	0x11023164	// 11023164 <target_gpio_port_init>

    if (idx < 0 || idx >= CONFIG_GPIO_NUM) {
11023556:	3840      	cmpnei      	r0, 0
11023558:	0811      	bt      	0x1102357a	// 1102357a <csi_gpio_port_initialize+0x3a>
        return NULL;
    }

    gpio_priv = &gpio_handle[idx];

    gpio_priv->base = base;
1102355a:	108a      	lrw      	r4, 0x1fffb518	// 11023580 <csi_gpio_port_initialize+0x40>
1102355c:	9861      	ld.w      	r3, (r14, 0x4)
    gpio_priv->irq  = irq;
1102355e:	9803      	ld.w      	r0, (r14, 0xc)
    gpio_priv->base = base;
11023560:	b460      	st.w      	r3, (r4, 0x0)

#ifdef CONFIG_LPM
    csi_gpio_power_control(gpio_priv, DRV_POWER_FULL);
#endif

    drv_irq_register(gpio_priv->irq, handler);
11023562:	9824      	ld.w      	r1, (r14, 0x10)
    gpio_priv->pin_num  = pin_num;
11023564:	9862      	ld.w      	r3, (r14, 0x8)
    gpio_priv->irq  = irq;
11023566:	b401      	st.w      	r0, (r4, 0x4)
    gpio_priv->pin_num  = pin_num;
11023568:	b462      	st.w      	r3, (r4, 0x8)
    drv_irq_register(gpio_priv->irq, handler);
1102356a:	e3fffdbd 	bsr      	0x110230e4	// 110230e4 <drv_irq_register>
    drv_irq_enable(gpio_priv->irq);
1102356e:	9401      	ld.w      	r0, (r4, 0x4)
11023570:	e0002f38 	bsr      	0x110293e0	// 110293e0 <cpu_task_stack_init+0xa38>

    return (gpio_port_handle_t)gpio_priv;
11023574:	6c13      	mov      	r0, r4
}
11023576:	1405      	addi      	r14, r14, 20
11023578:	1491      	pop      	r4, r15
        return NULL;
1102357a:	3000      	movi      	r0, 0
1102357c:	07fd      	br      	0x11023576	// 11023576 <csi_gpio_port_initialize+0x36>
1102357e:	0000      	bkpt
11023580:	1fffb518 	.long	0x1fffb518

11023584 <csi_gpio_pin_initialize>:
  \param[in]   cb_event    Pointer to \ref gpio_event_cb_t.
  \param[in]   arg    Pointer to \ref arg used for the callback.
  \return      gpio_pin_handle
*/
gpio_pin_handle_t csi_gpio_pin_initialize(int32_t gpio_pin, gpio_event_cb_t cb_event)
{
11023584:	14d2      	push      	r4-r5, r15
11023586:	1421      	subi      	r14, r14, 4
11023588:	6d03      	mov      	r4, r0

    if (gpio_pin < 0 || gpio_pin >= CONFIG_GPIO_PIN_NUM) {
1102358a:	3816      	cmphsi      	r0, 23
{
1102358c:	6d47      	mov      	r5, r1
    if (gpio_pin < 0 || gpio_pin >= CONFIG_GPIO_PIN_NUM) {
1102358e:	0c04      	bf      	0x11023596	// 11023596 <csi_gpio_pin_initialize+0x12>
        return NULL;
11023590:	3000      	movi      	r0, 0
    gpio_pin_priv->idx = pin_idx;
    gpio_pin_priv->cb = cb_event;
    gpio_pin_priv->offset = gpio_pin;

    return (gpio_pin_handle_t)gpio_pin_priv;
}
11023592:	1401      	addi      	r14, r14, 4
11023594:	1492      	pop      	r4-r5, r15
        csi_gpio_port_initialize(i);
11023596:	3000      	movi      	r0, 0
11023598:	e3ffffd4 	bsr      	0x11023540	// 11023540 <csi_gpio_port_initialize>
    int32_t pin_idx = target_gpio_pin_init(gpio_pin, &port_idx);
1102359c:	6c7b      	mov      	r1, r14
1102359e:	6c13      	mov      	r0, r4
110235a0:	e3fffe00 	bsr      	0x110231a0	// 110231a0 <target_gpio_pin_init>
    if (pin_idx < 0) {
110235a4:	38df      	btsti      	r0, 31
110235a6:	0bf5      	bt      	0x11023590	// 11023590 <csi_gpio_pin_initialize+0xc>
    for (i = 0; i < port_idx; i++) {
110235a8:	9840      	ld.w      	r2, (r14, 0x0)
110235aa:	3a40      	cmpnei      	r2, 0
110235ac:	0c0d      	bf      	0x110235c6	// 110235c6 <csi_gpio_pin_initialize+0x42>
        idx += (gpio_handle[i].pin_num);
110235ae:	1068      	lrw      	r3, 0x1fffb518	// 110235cc <csi_gpio_pin_initialize+0x48>
110235b0:	9362      	ld.w      	r3, (r3, 0x8)
110235b2:	60c0      	addu      	r3, r0
    dw_gpio_pin_priv_t *gpio_pin_priv = &(gpio_pin_handle[idx]);
110235b4:	4363      	lsli      	r3, r3, 3
110235b6:	1027      	lrw      	r1, 0x1fffb534	// 110235d0 <csi_gpio_pin_initialize+0x4c>
110235b8:	60c4      	addu      	r3, r1
    gpio_pin_priv->idx = pin_idx;
110235ba:	a301      	st.b      	r0, (r3, 0x1)
    gpio_pin_priv->portidx = port_idx;
110235bc:	a340      	st.b      	r2, (r3, 0x0)
    gpio_pin_priv->cb = cb_event;
110235be:	b3a1      	st.w      	r5, (r3, 0x4)
    gpio_pin_priv->offset = gpio_pin;
110235c0:	a382      	st.b      	r4, (r3, 0x2)
    return (gpio_pin_handle_t)gpio_pin_priv;
110235c2:	6c0f      	mov      	r0, r3
110235c4:	07e7      	br      	0x11023592	// 11023592 <csi_gpio_pin_initialize+0xe>
    for (i = 0; i < port_idx; i++) {
110235c6:	6cc3      	mov      	r3, r0
110235c8:	07f6      	br      	0x110235b4	// 110235b4 <csi_gpio_pin_initialize+0x30>
110235ca:	0000      	bkpt
110235cc:	1fffb518 	.long	0x1fffb518
110235d0:	1fffb534 	.long	0x1fffb534

110235d4 <csi_gpio_pin_config_direction>:
  \param[in]   dir       \ref gpio_direction_e
  \return      error code
*/
int32_t csi_gpio_pin_config_direction(gpio_pin_handle_t handle,
                                      gpio_direction_e dir)
{
110235d4:	14d2      	push      	r4-r5, r15
110235d6:	6d03      	mov      	r4, r0
    int ret =0;
    GPIO_NULL_PARAM_CHK(handle);
110235d8:	3840      	cmpnei      	r0, 0
110235da:	0c15      	bf      	0x11023604	// 11023604 <csi_gpio_pin_config_direction+0x30>

    /* config the gpio pin mode direction mask bits */
    dw_gpio_pin_priv_t *gpio_pin_priv = handle;

    /* convert portidx to port handle */
    dw_gpio_priv_t *gpio_priv = &gpio_handle[gpio_pin_priv->portidx];
110235dc:	8000      	ld.b      	r0, (r0, 0x0)

    gpio_priv->dir = dir;
110235de:	331c      	movi      	r3, 28
110235e0:	7c0c      	mult      	r0, r3
110235e2:	106a      	lrw      	r3, 0x1fffb518	// 11023608 <csi_gpio_pin_config_direction+0x34>
110235e4:	600c      	addu      	r0, r3
110235e6:	b024      	st.w      	r1, (r0, 0x10)
    gpio_priv->mask = 1 << gpio_pin_priv->idx;
110235e8:	3301      	movi      	r3, 1
110235ea:	8441      	ld.b      	r2, (r4, 0x1)
110235ec:	70c8      	lsl      	r3, r2
110235ee:	b065      	st.w      	r3, (r0, 0x14)
    ret = dw_gpio_set_direction(gpio_priv, dir);
110235f0:	e3ffff94 	bsr      	0x11023518	// 11023518 <dw_gpio_set_direction>
110235f4:	6d43      	mov      	r5, r0
    if(ret) {
110235f6:	3840      	cmpnei      	r0, 0
110235f8:	0804      	bt      	0x11023600	// 11023600 <csi_gpio_pin_config_direction+0x2c>
       return ret;
    }
    phy_gpioretention_register(gpio_pin_priv->idx);
110235fa:	8401      	ld.b      	r0, (r4, 0x1)
110235fc:	e3fffd0a 	bsr      	0x11023010	// 11023010 <phy_gpioretention_register>
    return 0;
}
11023600:	6c17      	mov      	r0, r5
11023602:	1492      	pop      	r4-r5, r15
    GPIO_NULL_PARAM_CHK(handle);
11023604:	10a2      	lrw      	r5, 0x81010084	// 1102360c <csi_gpio_pin_config_direction+0x38>
11023606:	07fd      	br      	0x11023600	// 11023600 <csi_gpio_pin_config_direction+0x2c>
11023608:	1fffb518 	.long	0x1fffb518
1102360c:	81010084 	.long	0x81010084

11023610 <csi_gpio_pin_write>:
  \param[in]   handle       gpio pin handle to operate.
  \param[in]   value     the value to be set
  \return      error code
*/
int32_t csi_gpio_pin_write(gpio_pin_handle_t handle, bool value)
{
11023610:	14c1      	push      	r4
    GPIO_NULL_PARAM_CHK(handle);
11023612:	3840      	cmpnei      	r0, 0
11023614:	0c13      	bf      	0x1102363a	// 1102363a <csi_gpio_pin_write+0x2a>

    dw_gpio_pin_priv_t *gpio_pin_priv = handle;

    /* convert portidx to port handle */
    dw_gpio_priv_t *port_handle = &gpio_handle[gpio_pin_priv->portidx];
11023616:	8040      	ld.b      	r2, (r0, 0x0)

    uint8_t offset = gpio_pin_priv->idx;
    uint32_t port_value = value << offset;

    port_handle->value = port_value;
11023618:	331c      	movi      	r3, 28
    uint32_t port_value = value << offset;
1102361a:	8001      	ld.b      	r0, (r0, 0x1)
1102361c:	7040      	lsl      	r1, r0
    port_handle->value = port_value;
1102361e:	7c8c      	mult      	r2, r3
11023620:	1068      	lrw      	r3, 0x1fffb518	// 11023640 <csi_gpio_pin_write+0x30>
11023622:	608c      	addu      	r2, r3
11023624:	b226      	st.w      	r1, (r2, 0x18)
    dw_gpio_reg_t *gpio_reg = (dw_gpio_reg_t *)(gpio_priv->base);
11023626:	9240      	ld.w      	r2, (r2, 0x0)
    dw_gpio_write(port_handle, (1 << offset));
11023628:	3300      	movi      	r3, 0
    uint32_t value = gpio_reg->SWPORT_DR;
1102362a:	9280      	ld.w      	r4, (r2, 0x0)
    dw_gpio_write(port_handle, (1 << offset));
1102362c:	2b01      	subi      	r3, 2
    value &= ~(mask);
1102362e:	70c3      	rotl      	r3, r0
11023630:	68d0      	and      	r3, r4
    value |= gpio_priv->value;
11023632:	6cc4      	or      	r3, r1
    gpio_reg->SWPORT_DR = value;
11023634:	b260      	st.w      	r3, (r2, 0x0)

    return 0;
11023636:	3000      	movi      	r0, 0

}
11023638:	1481      	pop      	r4
    GPIO_NULL_PARAM_CHK(handle);
1102363a:	1003      	lrw      	r0, 0x81010084	// 11023644 <csi_gpio_pin_write+0x34>
1102363c:	07fe      	br      	0x11023638	// 11023638 <csi_gpio_pin_write+0x28>
1102363e:	0000      	bkpt
11023640:	1fffb518 	.long	0x1fffb518
11023644:	81010084 	.long	0x81010084

11023648 <csi_gpio_pin_read>:
  \param[in]   handle       gpio pin handle to operate.
  \param[out]  value     buf to store the pin value
  \return      error code
*/
int32_t csi_gpio_pin_read(gpio_pin_handle_t handle, bool *value)
{
11023648:	14c1      	push      	r4
    GPIO_NULL_PARAM_CHK(handle);
1102364a:	3840      	cmpnei      	r0, 0
1102364c:	0c17      	bf      	0x1102367a	// 1102367a <csi_gpio_pin_read+0x32>
    GPIO_NULL_PARAM_CHK(value);
1102364e:	3940      	cmpnei      	r1, 0
11023650:	0c15      	bf      	0x1102367a	// 1102367a <csi_gpio_pin_read+0x32>
    if (idx == 0) {
11023652:	8060      	ld.b      	r3, (r0, 0x0)

    dw_gpio_pin_priv_t *gpio_pin_priv = handle;
    uint32_t port_value = 0;
    uint8_t offset = gpio_pin_priv->idx;
11023654:	8081      	ld.b      	r4, (r0, 0x1)
    if (idx == 0) {
11023656:	3b40      	cmpnei      	r3, 0
11023658:	080f      	bt      	0x11023676	// 11023676 <csi_gpio_pin_read+0x2e>
    dw_gpio_control_reg_t *gpio_control_reg = (dw_gpio_control_reg_t *)(gpio_priv->base + 0x30);
1102365a:	106a      	lrw      	r3, 0x1fffb518	// 11023680 <csi_gpio_pin_read+0x38>
1102365c:	9340      	ld.w      	r2, (r3, 0x0)
1102365e:	222f      	addi      	r2, 48
        *value = gpio_control_reg->EXT_PORTA;
11023660:	9248      	ld.w      	r2, (r2, 0x20)

    /* convert portidx to port handle */
    dw_gpio_priv_t *port_handle = &gpio_handle[gpio_pin_priv->portidx];

    dw_gpio_read(port_handle, gpio_pin_priv->portidx, &port_value);
    *value = (port_value & (1 << offset)) >> offset;
11023662:	3301      	movi      	r3, 1
11023664:	70d0      	lsl      	r3, r4
11023666:	68c8      	and      	r3, r2
11023668:	70d1      	lsr      	r3, r4

    return 0;
1102366a:	3000      	movi      	r0, 0
    *value = (port_value & (1 << offset)) >> offset;
1102366c:	3b40      	cmpnei      	r3, 0
1102366e:	c4000503 	mvc      	r3
11023672:	a160      	st.b      	r3, (r1, 0x0)
}
11023674:	1481      	pop      	r4
    uint32_t port_value = 0;
11023676:	3200      	movi      	r2, 0
11023678:	07f5      	br      	0x11023662	// 11023662 <csi_gpio_pin_read+0x1a>
    GPIO_NULL_PARAM_CHK(handle);
1102367a:	1003      	lrw      	r0, 0x81010084	// 11023684 <csi_gpio_pin_read+0x3c>
1102367c:	07fc      	br      	0x11023674	// 11023674 <csi_gpio_pin_read+0x2c>
1102367e:	0000      	bkpt
11023680:	1fffb518 	.long	0x1fffb518
11023684:	81010084 	.long	0x81010084

11023688 <usart_wait_timeout.isra.0>:
static int32_t usart_wait_timeout(usart_handle_t handle, dw_usart_reg_t *addr)
11023688:	14c1      	push      	r4
1102368a:	1052      	lrw      	r2, 0xf4240	// 110236d0 <usart_wait_timeout.isra.0+0x48>
    while (addr->LSR & 0x1 || addr->USR & 0x1) {
1102368c:	3101      	movi      	r1, 1
1102368e:	9065      	ld.w      	r3, (r0, 0x14)
11023690:	68c4      	and      	r3, r1
11023692:	3b40      	cmpnei      	r3, 0
11023694:	0810      	bt      	0x110236b4	// 110236b4 <usart_wait_timeout.isra.0+0x2c>
11023696:	907f      	ld.w      	r3, (r0, 0x7c)
11023698:	68c4      	and      	r3, r1
1102369a:	3b40      	cmpnei      	r3, 0
1102369c:	080c      	bt      	0x110236b4	// 110236b4 <usart_wait_timeout.isra.0+0x2c>
1102369e:	3200      	movi      	r2, 0
    WAIT_USART_IDLE(addr);
110236a0:	3401      	movi      	r4, 1
110236a2:	102c      	lrw      	r1, 0xf4240	// 110236d0 <usart_wait_timeout.isra.0+0x48>
110236a4:	907f      	ld.w      	r3, (r0, 0x7c)
110236a6:	68d0      	and      	r3, r4
110236a8:	3b40      	cmpnei      	r3, 0
110236aa:	0c0e      	bf      	0x110236c6	// 110236c6 <usart_wait_timeout.isra.0+0x3e>
110236ac:	644a      	cmpne      	r2, r1
110236ae:	080a      	bt      	0x110236c2	// 110236c2 <usart_wait_timeout.isra.0+0x3a>
110236b0:	1009      	lrw      	r0, 0x81020082	// 110236d4 <usart_wait_timeout.isra.0+0x4c>
}
110236b2:	1481      	pop      	r4
110236b4:	2a00      	subi      	r2, 1
        if (timecount >= UART_BUSY_TIMEOUT) {
110236b6:	3a40      	cmpnei      	r2, 0
        addr->RBR;
110236b8:	9060      	ld.w      	r3, (r0, 0x0)
        if (timecount >= UART_BUSY_TIMEOUT) {
110236ba:	0bea      	bt      	0x1102368e	// 1102368e <usart_wait_timeout.isra.0+0x6>
            return -1;
110236bc:	3000      	movi      	r0, 0
110236be:	2800      	subi      	r0, 1
110236c0:	07f9      	br      	0x110236b2	// 110236b2 <usart_wait_timeout.isra.0+0x2a>
    WAIT_USART_IDLE(addr);
110236c2:	2200      	addi      	r2, 1
110236c4:	07f0      	br      	0x110236a4	// 110236a4 <usart_wait_timeout.isra.0+0x1c>
    return 0;
110236c6:	644a      	cmpne      	r2, r1
110236c8:	1003      	lrw      	r0, 0x81020082	// 110236d4 <usart_wait_timeout.isra.0+0x4c>
110236ca:	c4030c40 	inct      	r0, r3, 0
110236ce:	07f2      	br      	0x110236b2	// 110236b2 <usart_wait_timeout.isra.0+0x2a>
110236d0:	000f4240 	.long	0x000f4240
110236d4:	81020082 	.long	0x81020082

110236d8 <csi_usart_config_baudrate>:
{
110236d8:	14d3      	push      	r4-r6, r15
110236da:	6d87      	mov      	r6, r1
    USART_NULL_PARAM_CHK(handle);
110236dc:	3840      	cmpnei      	r0, 0
110236de:	0c2f      	bf      	0x1102373c	// 1102373c <csi_usart_config_baudrate+0x64>
    dw_usart_reg_t *addr = (dw_usart_reg_t *)(usart_priv->base);
110236e0:	90a0      	ld.w      	r5, (r0, 0x0)
    if (usart_wait_timeout(handle, addr) != 0) {
110236e2:	6c17      	mov      	r0, r5
110236e4:	e3ffffd2 	bsr      	0x11023688	// 11023688 <usart_wait_timeout.isra.0>
110236e8:	6d03      	mov      	r4, r0
110236ea:	3840      	cmpnei      	r0, 0
110236ec:	082a      	bt      	0x11023740	// 11023740 <csi_usart_config_baudrate+0x68>
    uint32_t divisor = ((drv_get_apb_freq(0)  * 10) / baud) >> 4;
110236ee:	3000      	movi      	r0, 0
110236f0:	e00003ec 	bsr      	0x11023ec8	// 11023ec8 <drv_get_apb_freq>
110236f4:	330a      	movi      	r3, 10
110236f6:	6c5b      	mov      	r1, r6
110236f8:	7c0c      	mult      	r0, r3
110236fa:	e3ffc181 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
110236fe:	48c4      	lsri      	r6, r0, 4
    if ((divisor % 10) >= 5) {
11023700:	310a      	movi      	r1, 10
11023702:	6c1b      	mov      	r0, r6
11023704:	e3ffc1ca 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
        divisor = (divisor / 10) + 1;
11023708:	310a      	movi      	r1, 10
    if ((divisor % 10) >= 5) {
1102370a:	3804      	cmphsi      	r0, 5
        divisor = (divisor / 10) + 1;
1102370c:	6c1b      	mov      	r0, r6
    if ((divisor % 10) >= 5) {
1102370e:	0c14      	bf      	0x11023736	// 11023736 <csi_usart_config_baudrate+0x5e>
        divisor = (divisor / 10) + 1;
11023710:	e3ffc176 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
11023714:	2000      	addi      	r0, 1
    addr->LCR |= LCR_SET_DLAB;
11023716:	9563      	ld.w      	r3, (r5, 0xc)
11023718:	ec630080 	ori      	r3, r3, 128
1102371c:	b563      	st.w      	r3, (r5, 0xc)
    addr->DLL = divisor & 0xff;
1102371e:	33ff      	movi      	r3, 255
11023720:	c4602022 	and      	r2, r0, r3
    addr->DLH = (divisor >> 8) & 0xff;
11023724:	4808      	lsri      	r0, r0, 8
11023726:	680c      	and      	r0, r3
    addr->DLL = divisor & 0xff;
11023728:	b540      	st.w      	r2, (r5, 0x0)
    addr->DLH = (divisor >> 8) & 0xff;
1102372a:	b501      	st.w      	r0, (r5, 0x4)
    addr->LCR &= (~LCR_SET_DLAB);
1102372c:	9563      	ld.w      	r3, (r5, 0xc)
1102372e:	3b87      	bclri      	r3, 7
11023730:	b563      	st.w      	r3, (r5, 0xc)
}
11023732:	6c13      	mov      	r0, r4
11023734:	1493      	pop      	r4-r6, r15
        divisor = divisor / 10;
11023736:	e3ffc163 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1102373a:	07ee      	br      	0x11023716	// 11023716 <csi_usart_config_baudrate+0x3e>
    USART_NULL_PARAM_CHK(handle);
1102373c:	1082      	lrw      	r4, 0x81020084	// 11023744 <csi_usart_config_baudrate+0x6c>
1102373e:	07fa      	br      	0x11023732	// 11023732 <csi_usart_config_baudrate+0x5a>
        return ERR_USART(USART_ERROR_BAUDRATE);
11023740:	1082      	lrw      	r4, 0x81020087	// 11023748 <csi_usart_config_baudrate+0x70>
11023742:	07f8      	br      	0x11023732	// 11023732 <csi_usart_config_baudrate+0x5a>
11023744:	81020084 	.long	0x81020084
11023748:	81020087 	.long	0x81020087

1102374c <csi_usart_config_parity>:
{
1102374c:	14d2      	push      	r4-r5, r15
1102374e:	6d47      	mov      	r5, r1
    USART_NULL_PARAM_CHK(handle);
11023750:	3840      	cmpnei      	r0, 0
11023752:	0c23      	bf      	0x11023798	// 11023798 <csi_usart_config_parity+0x4c>
    dw_usart_reg_t *addr = (dw_usart_reg_t *)(usart_priv->base);
11023754:	9080      	ld.w      	r4, (r0, 0x0)
    if (usart_wait_timeout(handle, addr) != 0) {
11023756:	6c13      	mov      	r0, r4
11023758:	e3ffff98 	bsr      	0x11023688	// 11023688 <usart_wait_timeout.isra.0>
1102375c:	3840      	cmpnei      	r0, 0
1102375e:	0807      	bt      	0x1102376c	// 1102376c <csi_usart_config_parity+0x20>
    switch (parity) {
11023760:	3d41      	cmpnei      	r5, 1
11023762:	0c13      	bf      	0x11023788	// 11023788 <csi_usart_config_parity+0x3c>
11023764:	3d40      	cmpnei      	r5, 0
11023766:	0c05      	bf      	0x11023770	// 11023770 <csi_usart_config_parity+0x24>
11023768:	3d42      	cmpnei      	r5, 2
1102376a:	0c07      	bf      	0x11023778	// 11023778 <csi_usart_config_parity+0x2c>
            return ERR_USART(USART_ERROR_PARITY);
1102376c:	100c      	lrw      	r0, 0x81020089	// 1102379c <csi_usart_config_parity+0x50>
1102376e:	0404      	br      	0x11023776	// 11023776 <csi_usart_config_parity+0x2a>
            addr->LCR &= (~LCR_PARITY_ENABLE);
11023770:	9463      	ld.w      	r3, (r4, 0xc)
11023772:	3b83      	bclri      	r3, 3
            addr->LCR &= LCR_PARITY_ODD;
11023774:	b463      	st.w      	r3, (r4, 0xc)
}
11023776:	1492      	pop      	r4-r5, r15
            addr->LCR |= LCR_PARITY_ENABLE;
11023778:	9463      	ld.w      	r3, (r4, 0xc)
1102377a:	ec630008 	ori      	r3, r3, 8
1102377e:	b463      	st.w      	r3, (r4, 0xc)
            addr->LCR &= LCR_PARITY_ODD;
11023780:	9463      	ld.w      	r3, (r4, 0xc)
11023782:	e46320ef 	andi      	r3, r3, 239
11023786:	07f7      	br      	0x11023774	// 11023774 <csi_usart_config_parity+0x28>
            addr->LCR |= LCR_PARITY_ENABLE;
11023788:	9463      	ld.w      	r3, (r4, 0xc)
1102378a:	ec630008 	ori      	r3, r3, 8
1102378e:	b463      	st.w      	r3, (r4, 0xc)
            addr->LCR |= LCR_PARITY_EVEN;
11023790:	9463      	ld.w      	r3, (r4, 0xc)
11023792:	ec630010 	ori      	r3, r3, 16
11023796:	07ef      	br      	0x11023774	// 11023774 <csi_usart_config_parity+0x28>
    USART_NULL_PARAM_CHK(handle);
11023798:	1002      	lrw      	r0, 0x81020084	// 110237a0 <csi_usart_config_parity+0x54>
1102379a:	07ee      	br      	0x11023776	// 11023776 <csi_usart_config_parity+0x2a>
1102379c:	81020089 	.long	0x81020089
110237a0:	81020084 	.long	0x81020084

110237a4 <csi_usart_config_stopbits>:
{
110237a4:	14d2      	push      	r4-r5, r15
110237a6:	6d47      	mov      	r5, r1
    USART_NULL_PARAM_CHK(handle);
110237a8:	3840      	cmpnei      	r0, 0
110237aa:	0c16      	bf      	0x110237d6	// 110237d6 <csi_usart_config_stopbits+0x32>
    dw_usart_reg_t *addr = (dw_usart_reg_t *)(usart_priv->base);
110237ac:	9080      	ld.w      	r4, (r0, 0x0)
    if (usart_wait_timeout(handle, addr) != 0) {
110237ae:	6c13      	mov      	r0, r4
110237b0:	e3ffff6c 	bsr      	0x11023688	// 11023688 <usart_wait_timeout.isra.0>
110237b4:	3840      	cmpnei      	r0, 0
110237b6:	0805      	bt      	0x110237c0	// 110237c0 <csi_usart_config_stopbits+0x1c>
    switch (stopbit) {
110237b8:	3d40      	cmpnei      	r5, 0
110237ba:	0c05      	bf      	0x110237c4	// 110237c4 <csi_usart_config_stopbits+0x20>
110237bc:	3d41      	cmpnei      	r5, 1
110237be:	0c08      	bf      	0x110237ce	// 110237ce <csi_usart_config_stopbits+0x2a>
            return ERR_USART(USART_ERROR_STOP_BITS);
110237c0:	1007      	lrw      	r0, 0x8102008a	// 110237dc <csi_usart_config_stopbits+0x38>
110237c2:	0405      	br      	0x110237cc	// 110237cc <csi_usart_config_stopbits+0x28>
            addr->LCR &= LCR_STOP_BIT1;
110237c4:	9463      	ld.w      	r3, (r4, 0xc)
110237c6:	e46320fb 	andi      	r3, r3, 251
            addr->LCR |= LCR_STOP_BIT2;
110237ca:	b463      	st.w      	r3, (r4, 0xc)
}
110237cc:	1492      	pop      	r4-r5, r15
            addr->LCR |= LCR_STOP_BIT2;
110237ce:	9463      	ld.w      	r3, (r4, 0xc)
110237d0:	ec630004 	ori      	r3, r3, 4
110237d4:	07fb      	br      	0x110237ca	// 110237ca <csi_usart_config_stopbits+0x26>
    USART_NULL_PARAM_CHK(handle);
110237d6:	1003      	lrw      	r0, 0x81020084	// 110237e0 <csi_usart_config_stopbits+0x3c>
110237d8:	07fa      	br      	0x110237cc	// 110237cc <csi_usart_config_stopbits+0x28>
110237da:	0000      	bkpt
110237dc:	8102008a 	.long	0x8102008a
110237e0:	81020084 	.long	0x81020084

110237e4 <csi_usart_config_databits>:
{
110237e4:	14d2      	push      	r4-r5, r15
110237e6:	6d47      	mov      	r5, r1
    USART_NULL_PARAM_CHK(handle);
110237e8:	3840      	cmpnei      	r0, 0
110237ea:	0c26      	bf      	0x11023836	// 11023836 <csi_usart_config_databits+0x52>
    dw_usart_reg_t *addr = (dw_usart_reg_t *)(usart_priv->base);
110237ec:	9080      	ld.w      	r4, (r0, 0x0)
    if (usart_wait_timeout(handle, addr) != 0) {
110237ee:	6c13      	mov      	r0, r4
110237f0:	e3ffff4c 	bsr      	0x11023688	// 11023688 <usart_wait_timeout.isra.0>
110237f4:	6cc3      	mov      	r3, r0
110237f6:	3840      	cmpnei      	r0, 0
110237f8:	0821      	bt      	0x1102383a	// 1102383a <csi_usart_config_databits+0x56>
    switch (databits) {
110237fa:	3d03      	cmphsi      	r5, 4
110237fc:	081f      	bt      	0x1102383a	// 1102383a <csi_usart_config_databits+0x56>
110237fe:	6c17      	mov      	r0, r5
            addr->LCR |= LCR_WORD_SIZE_8;
11023800:	9443      	ld.w      	r2, (r4, 0xc)
    switch (databits) {
11023802:	e0002dfb 	bsr      	0x110293f8	// 110293f8 <cpu_task_stack_init+0xa50>
11023806:	0702      	.short	0x0702
11023808:	150e      	.short	0x150e
            addr->LCR &= LCR_WORD_SIZE_5;
1102380a:	e44220fc 	andi      	r2, r2, 252
            addr->LCR |= LCR_WORD_SIZE_6;
1102380e:	b443      	st.w      	r2, (r4, 0xc)
}
11023810:	6c0f      	mov      	r0, r3
11023812:	1492      	pop      	r4-r5, r15
            addr->LCR &= 0xfd;
11023814:	e44220fd 	andi      	r2, r2, 253
11023818:	b443      	st.w      	r2, (r4, 0xc)
            addr->LCR |= LCR_WORD_SIZE_6;
1102381a:	9443      	ld.w      	r2, (r4, 0xc)
1102381c:	ec420001 	ori      	r2, r2, 1
11023820:	07f7      	br      	0x1102380e	// 1102380e <csi_usart_config_databits+0x2a>
            addr->LCR &= 0xfe;
11023822:	e44220fe 	andi      	r2, r2, 254
11023826:	b443      	st.w      	r2, (r4, 0xc)
            addr->LCR |= LCR_WORD_SIZE_7;
11023828:	9443      	ld.w      	r2, (r4, 0xc)
1102382a:	ec420002 	ori      	r2, r2, 2
1102382e:	07f0      	br      	0x1102380e	// 1102380e <csi_usart_config_databits+0x2a>
            addr->LCR |= LCR_WORD_SIZE_8;
11023830:	ec420003 	ori      	r2, r2, 3
11023834:	07ed      	br      	0x1102380e	// 1102380e <csi_usart_config_databits+0x2a>
    USART_NULL_PARAM_CHK(handle);
11023836:	1063      	lrw      	r3, 0x81020084	// 11023840 <csi_usart_config_databits+0x5c>
11023838:	07ec      	br      	0x11023810	// 11023810 <csi_usart_config_databits+0x2c>
            return ERR_USART(USART_ERROR_DATA_BITS);
1102383a:	1063      	lrw      	r3, 0x81020088	// 11023844 <csi_usart_config_databits+0x60>
1102383c:	07ea      	br      	0x11023810	// 11023810 <csi_usart_config_databits+0x2c>
1102383e:	0000      	bkpt
11023840:	81020084 	.long	0x81020084
11023844:	81020088 	.long	0x81020088

11023848 <csi_usart_putchar>:
{
11023848:	14c1      	push      	r4
    USART_NULL_PARAM_CHK(handle);
1102384a:	3840      	cmpnei      	r0, 0
1102384c:	0c10      	bf      	0x1102386c	// 1102386c <csi_usart_putchar+0x24>
    dw_usart_reg_t *addr = (dw_usart_reg_t *)(usart_priv->base);
1102384e:	9000      	ld.w      	r0, (r0, 0x0)
    while ((!(addr->LSR & DW_LSR_TRANS_EMPTY))) {
11023850:	1048      	lrw      	r2, 0xf4240	// 11023870 <csi_usart_putchar+0x28>
11023852:	3420      	movi      	r4, 32
11023854:	9065      	ld.w      	r3, (r0, 0x14)
11023856:	68d0      	and      	r3, r4
11023858:	3b40      	cmpnei      	r3, 0
1102385a:	0c04      	bf      	0x11023862	// 11023862 <csi_usart_putchar+0x1a>
    addr->THR = ch;
1102385c:	b020      	st.w      	r1, (r0, 0x0)
    return 0;
1102385e:	3000      	movi      	r0, 0
}
11023860:	1481      	pop      	r4
11023862:	2a00      	subi      	r2, 1
        if (timecount >= UART_BUSY_TIMEOUT) {
11023864:	3a40      	cmpnei      	r2, 0
11023866:	0bf7      	bt      	0x11023854	// 11023854 <csi_usart_putchar+0xc>
            return ERR_USART(DRV_ERROR_TIMEOUT);
11023868:	1003      	lrw      	r0, 0x81020082	// 11023874 <csi_usart_putchar+0x2c>
1102386a:	07fb      	br      	0x11023860	// 11023860 <csi_usart_putchar+0x18>
    USART_NULL_PARAM_CHK(handle);
1102386c:	1003      	lrw      	r0, 0x81020084	// 11023878 <csi_usart_putchar+0x30>
1102386e:	07f9      	br      	0x11023860	// 11023860 <csi_usart_putchar+0x18>
11023870:	000f4240 	.long	0x000f4240
11023874:	81020082 	.long	0x81020082
11023878:	81020084 	.long	0x81020084

1102387c <csi_usart_initialize>:
{
1102387c:	14d4      	push      	r4-r7, r15
1102387e:	1423      	subi      	r14, r14, 12
11023880:	6dc7      	mov      	r7, r1
    uint32_t base = 0u;
11023882:	3300      	movi      	r3, 0
    int32_t ret = target_usart_init(idx, &base, &irq, &handler);
11023884:	6c7b      	mov      	r1, r14
    uint32_t base = 0u;
11023886:	b860      	st.w      	r3, (r14, 0x0)
    uint32_t irq = 0u;
11023888:	b861      	st.w      	r3, (r14, 0x4)
{
1102388a:	6d83      	mov      	r6, r0
    int32_t ret = target_usart_init(idx, &base, &irq, &handler);
1102388c:	1b02      	addi      	r3, r14, 8
1102388e:	1a01      	addi      	r2, r14, 4
11023890:	e3fffc5c 	bsr      	0x11023148	// 11023148 <target_usart_init>
    if (ret < 0 || ret >= CONFIG_USART_NUM) {
11023894:	3801      	cmphsi      	r0, 2
11023896:	0835      	bt      	0x11023900	// 11023900 <csi_usart_initialize+0x84>
    usart_priv->base = base;
11023898:	9860      	ld.w      	r3, (r14, 0x0)
    dw_usart_priv_t *usart_priv = &usart_instance[idx];
1102389a:	3488      	movi      	r4, 136
1102389c:	101a      	lrw      	r0, 0x1fffb5ec	// 11023904 <csi_usart_initialize+0x88>
1102389e:	7d18      	mult      	r4, r6
110238a0:	6100      	addu      	r4, r0
    usart_priv->base = base;
110238a2:	b460      	st.w      	r3, (r4, 0x0)
    usart_priv->irq = irq;
110238a4:	9861      	ld.w      	r3, (r14, 0x4)
    if (idx == 0) {
110238a6:	3e40      	cmpnei      	r6, 0
    usart_priv->irq = irq;
110238a8:	b461      	st.w      	r3, (r4, 0x4)
    usart_priv->dma_tx_ch = -1;
110238aa:	3300      	movi      	r3, 0
110238ac:	2b00      	subi      	r3, 1
110238ae:	b46f      	st.w      	r3, (r4, 0x3c)
    usart_priv->dma_rx_ch = -1;
110238b0:	b470      	st.w      	r3, (r4, 0x40)
    usart_priv->dma_tx_mode = 0;
110238b2:	3300      	movi      	r3, 0
    usart_priv->cb_event = cb_event;
110238b4:	b4e2      	st.w      	r7, (r4, 0x8)
    usart_priv->idx = idx;
110238b6:	b4cd      	st.w      	r6, (r4, 0x34)
    usart_priv->dma_tx_mode = 0;
110238b8:	dc640044 	st.b      	r3, (r4, 0x44)
    usart_priv->dma_rx_mode = 0;
110238bc:	dc640045 	st.b      	r3, (r4, 0x45)
110238c0:	6d43      	mov      	r5, r0
    if (idx == 0) {
110238c2:	081a      	bt      	0x110238f6	// 110238f6 <csi_usart_initialize+0x7a>
        hal_clk_gate_enable(MOD_UART0);
110238c4:	3008      	movi      	r0, 8
110238c6:	e0002cc7 	bsr      	0x11029254	// 11029254 <cpu_task_stack_init+0x8ac>
        hal_clk_reset(MOD_UART0);
110238ca:	3008      	movi      	r0, 8
        hal_clk_reset(MOD_UART1);
110238cc:	e0002cd6 	bsr      	0x11029278	// 11029278 <cpu_task_stack_init+0x8d0>
    dw_usart_reg_t *addr = (dw_usart_reg_t *)(usart_priv->base);
110238d0:	3088      	movi      	r0, 136
110238d2:	7c18      	mult      	r0, r6
110238d4:	6140      	addu      	r5, r0
110238d6:	9560      	ld.w      	r3, (r5, 0x0)
    addr->FCR = DW_FCR_FIFOE | DW_FCR_RT_FIFO_SINGLE;
110238d8:	3201      	movi      	r2, 1
    drv_irq_register(usart_priv->irq, handler);
110238da:	9822      	ld.w      	r1, (r14, 0x8)
    addr->FCR = DW_FCR_FIFOE | DW_FCR_RT_FIFO_SINGLE;
110238dc:	b342      	st.w      	r2, (r3, 0x8)
    usart_priv->fcr_reg = DW_FCR_FIFOE | DW_FCR_RT_FIFO_SINGLE;
110238de:	b54e      	st.w      	r2, (r5, 0x38)
    addr->IER = IER_RDA_INT_ENABLE | IIR_RECV_LINE_ENABLE;
110238e0:	3205      	movi      	r2, 5
110238e2:	b341      	st.w      	r2, (r3, 0x4)
    drv_irq_register(usart_priv->irq, handler);
110238e4:	9501      	ld.w      	r0, (r5, 0x4)
110238e6:	e3fffbff 	bsr      	0x110230e4	// 110230e4 <drv_irq_register>
    drv_irq_enable(usart_priv->irq);
110238ea:	9501      	ld.w      	r0, (r5, 0x4)
110238ec:	e0002d7a 	bsr      	0x110293e0	// 110293e0 <cpu_task_stack_init+0xa38>
    return usart_priv;
110238f0:	6c13      	mov      	r0, r4
}
110238f2:	1403      	addi      	r14, r14, 12
110238f4:	1494      	pop      	r4-r7, r15
        hal_clk_gate_enable(MOD_UART1);
110238f6:	3019      	movi      	r0, 25
110238f8:	e0002cae 	bsr      	0x11029254	// 11029254 <cpu_task_stack_init+0x8ac>
        hal_clk_reset(MOD_UART1);
110238fc:	3019      	movi      	r0, 25
110238fe:	07e7      	br      	0x110238cc	// 110238cc <csi_usart_initialize+0x50>
        return NULL;
11023900:	3000      	movi      	r0, 0
11023902:	07f8      	br      	0x110238f2	// 110238f2 <csi_usart_initialize+0x76>
11023904:	1fffb5ec 	.long	0x1fffb5ec

11023908 <csi_usart_uninitialize>:
{
11023908:	14d1      	push      	r4, r15
1102390a:	6d03      	mov      	r4, r0
    USART_NULL_PARAM_CHK(handle);
1102390c:	3840      	cmpnei      	r0, 0
1102390e:	0c0b      	bf      	0x11023924	// 11023924 <csi_usart_uninitialize+0x1c>
    drv_irq_disable(usart_priv->irq);
11023910:	9001      	ld.w      	r0, (r0, 0x4)
11023912:	e0002b63 	bsr      	0x11028fd8	// 11028fd8 <cpu_task_stack_init+0x630>
    drv_irq_unregister(usart_priv->irq);
11023916:	9401      	ld.w      	r0, (r4, 0x4)
11023918:	e3fffbee 	bsr      	0x110230f4	// 110230f4 <drv_irq_unregister>
    usart_priv->cb_event   = NULL;
1102391c:	3300      	movi      	r3, 0
    return 0;
1102391e:	3000      	movi      	r0, 0
    usart_priv->cb_event   = NULL;
11023920:	b462      	st.w      	r3, (r4, 0x8)
}
11023922:	1491      	pop      	r4, r15
    USART_NULL_PARAM_CHK(handle);
11023924:	1001      	lrw      	r0, 0x81020084	// 11023928 <csi_usart_uninitialize+0x20>
11023926:	07fe      	br      	0x11023922	// 11023922 <csi_usart_uninitialize+0x1a>
11023928:	81020084 	.long	0x81020084

1102392c <csi_usart_config>:
{
1102392c:	14d4      	push      	r4-r7, r15
1102392e:	1421      	subi      	r14, r14, 4
11023930:	6d8f      	mov      	r6, r3
11023932:	9866      	ld.w      	r3, (r14, 0x18)
11023934:	6dcf      	mov      	r7, r3
11023936:	9867      	ld.w      	r3, (r14, 0x1c)
11023938:	6d03      	mov      	r4, r0
1102393a:	6d4b      	mov      	r5, r2
1102393c:	b860      	st.w      	r3, (r14, 0x0)
    ret = csi_usart_config_baudrate(handle, baud);
1102393e:	e3fffecd 	bsr      	0x110236d8	// 110236d8 <csi_usart_config_baudrate>
    if (ret < 0) {
11023942:	38df      	btsti      	r0, 31
11023944:	0806      	bt      	0x11023950	// 11023950 <csi_usart_config+0x24>
    USART_NULL_PARAM_CHK(handle);
11023946:	3c40      	cmpnei      	r4, 0
11023948:	0c06      	bf      	0x11023954	// 11023954 <csi_usart_config+0x28>
    if (mode == USART_MODE_ASYNCHRONOUS) {
1102394a:	3d40      	cmpnei      	r5, 0
1102394c:	0c06      	bf      	0x11023958	// 11023958 <csi_usart_config+0x2c>
    return ERR_USART(USART_ERROR_MODE);
1102394e:	100d      	lrw      	r0, 0x81020086	// 11023980 <csi_usart_config+0x54>
}
11023950:	1401      	addi      	r14, r14, 4
11023952:	1494      	pop      	r4-r7, r15
    USART_NULL_PARAM_CHK(handle);
11023954:	100c      	lrw      	r0, 0x81020084	// 11023984 <csi_usart_config+0x58>
11023956:	07fd      	br      	0x11023950	// 11023950 <csi_usart_config+0x24>
    ret = csi_usart_config_parity(handle, parity);
11023958:	6c5b      	mov      	r1, r6
1102395a:	6c13      	mov      	r0, r4
1102395c:	e3fffef8 	bsr      	0x1102374c	// 1102374c <csi_usart_config_parity>
    if (ret < 0) {
11023960:	38df      	btsti      	r0, 31
11023962:	0bf7      	bt      	0x11023950	// 11023950 <csi_usart_config+0x24>
    ret = csi_usart_config_stopbits(handle, stopbits);
11023964:	6c5f      	mov      	r1, r7
11023966:	6c13      	mov      	r0, r4
11023968:	e3ffff1e 	bsr      	0x110237a4	// 110237a4 <csi_usart_config_stopbits>
    if (ret < 0) {
1102396c:	38df      	btsti      	r0, 31
1102396e:	0bf1      	bt      	0x11023950	// 11023950 <csi_usart_config+0x24>
    ret = csi_usart_config_databits(handle, bits);
11023970:	9820      	ld.w      	r1, (r14, 0x0)
11023972:	6c13      	mov      	r0, r4
11023974:	e3ffff38 	bsr      	0x110237e4	// 110237e4 <csi_usart_config_databits>
11023978:	3820      	cmplti      	r0, 1
1102397a:	c4050c20 	incf      	r0, r5, 0
1102397e:	07e9      	br      	0x11023950	// 11023950 <csi_usart_config+0x24>
11023980:	81020086 	.long	0x81020086
11023984:	81020084 	.long	0x81020084

11023988 <csi_usart_send>:
{
11023988:	14d3      	push      	r4-r6, r15
1102398a:	6d43      	mov      	r5, r0
    USART_NULL_PARAM_CHK(handle);
1102398c:	3840      	cmpnei      	r0, 0
1102398e:	0c17      	bf      	0x110239bc	// 110239bc <csi_usart_send+0x34>
    USART_NULL_PARAM_CHK(data);
11023990:	3940      	cmpnei      	r1, 0
11023992:	0c15      	bf      	0x110239bc	// 110239bc <csi_usart_send+0x34>
    if (num == 0) {
11023994:	3a40      	cmpnei      	r2, 0
11023996:	0c13      	bf      	0x110239bc	// 110239bc <csi_usart_send+0x34>
11023998:	6d07      	mov      	r4, r1
1102399a:	59c8      	addu      	r6, r1, r2
    for (i = 0; i < num; i++) {
1102399c:	6592      	cmpne      	r4, r6
1102399e:	0809      	bt      	0x110239b0	// 110239b0 <csi_usart_send+0x28>
    if (usart_priv->cb_event) {
110239a0:	9562      	ld.w      	r3, (r5, 0x8)
110239a2:	3b40      	cmpnei      	r3, 0
110239a4:	0c04      	bf      	0x110239ac	// 110239ac <csi_usart_send+0x24>
        usart_priv->cb_event(usart_priv->idx, USART_EVENT_SEND_COMPLETE);
110239a6:	950d      	ld.w      	r0, (r5, 0x34)
110239a8:	3100      	movi      	r1, 0
110239aa:	7bcd      	jsr      	r3
    return 0;
110239ac:	3000      	movi      	r0, 0
110239ae:	0408      	br      	0x110239be	// 110239be <csi_usart_send+0x36>
        csi_usart_putchar(handle, buff[i]);
110239b0:	8420      	ld.b      	r1, (r4, 0x0)
110239b2:	6c17      	mov      	r0, r5
110239b4:	2400      	addi      	r4, 1
110239b6:	e3ffff49 	bsr      	0x11023848	// 11023848 <csi_usart_putchar>
110239ba:	07f1      	br      	0x1102399c	// 1102399c <csi_usart_send+0x14>
    USART_NULL_PARAM_CHK(handle);
110239bc:	1001      	lrw      	r0, 0x81020084	// 110239c0 <csi_usart_send+0x38>
}
110239be:	1493      	pop      	r4-r6, r15
110239c0:	81020084 	.long	0x81020084

110239c4 <csi_usart_receive_dma>:
{
110239c4:	14d3      	push      	r4-r6, r15
110239c6:	142c      	subi      	r14, r14, 48
110239c8:	6d03      	mov      	r4, r0
    USART_NULL_PARAM_CHK(handle);
110239ca:	3840      	cmpnei      	r0, 0
110239cc:	0c37      	bf      	0x11023a3a	// 11023a3a <csi_usart_receive_dma+0x76>
    USART_NULL_PARAM_CHK(data);
110239ce:	3940      	cmpnei      	r1, 0
110239d0:	0c35      	bf      	0x11023a3a	// 11023a3a <csi_usart_receive_dma+0x76>
    usart_priv->rx_cnt = 0;
110239d2:	3300      	movi      	r3, 0
    usart_priv->rx_buf = (uint8_t *)data;   // Save receive buffer usart
110239d4:	b025      	st.w      	r1, (r0, 0x14)
    usart_priv->rx_cnt = 0;
110239d6:	b067      	st.w      	r3, (r0, 0x1c)
    usart_priv->rx_busy = 1;
110239d8:	3301      	movi      	r3, 1
    usart_priv->rx_total_num = num;         // Save number of data to be received
110239da:	b043      	st.w      	r2, (r0, 0xc)
    usart_priv->rx_busy = 1;
110239dc:	b06a      	st.w      	r3, (r0, 0x28)
    usart_priv->last_rx_num = 0;
110239de:	3300      	movi      	r3, 0
    dw_usart_reg_t *addr = (dw_usart_reg_t *)(usart_priv->base);
110239e0:	90c0      	ld.w      	r6, (r0, 0x0)
    usart_priv->last_rx_num = 0;
110239e2:	b06c      	st.w      	r3, (r0, 0x30)
    usart_priv->rx_num = 0;
110239e4:	b074      	st.w      	r3, (r0, 0x50)
    config.src_inc  = DMA_ADDR_CONSTANT;
110239e6:	3302      	movi      	r3, 2
110239e8:	b860      	st.w      	r3, (r14, 0x0)
    config.dst_inc  = DMA_ADDR_INC;
110239ea:	3300      	movi      	r3, 0
110239ec:	b861      	st.w      	r3, (r14, 0x4)
    config.src_tw   = 1;
110239ee:	3301      	movi      	r3, 1
110239f0:	dc6e0010 	st.b      	r3, (r14, 0x10)
    config.dst_tw   = 1;
110239f4:	dc6e0011 	st.b      	r3, (r14, 0x11)
    if (usart_priv->idx == 0) {
110239f8:	906d      	ld.w      	r3, (r0, 0x34)
110239fa:	3b40      	cmpnei      	r3, 0
110239fc:	081d      	bt      	0x11023a36	// 11023a36 <csi_usart_receive_dma+0x72>
        config.hs_if    = DWENUM_DMA_UART0_RX;
110239fe:	330d      	movi      	r3, 13
        config.hs_if    = DWENUM_DMA_UART1_RX;
11023a00:	dc6e0012 	st.b      	r3, (r14, 0x12)
    if (usart_priv->dma_rx_ch == -1) {
11023a04:	94b0      	ld.w      	r5, (r4, 0x40)
    config.type     = DMA_PERH2MEM;
11023a06:	3302      	movi      	r3, 2
11023a08:	b865      	st.w      	r3, (r14, 0x14)
    if (usart_priv->dma_rx_ch == -1) {
11023a0a:	3300      	movi      	r3, 0
11023a0c:	2b00      	subi      	r3, 1
11023a0e:	64d6      	cmpne      	r5, r3
11023a10:	0c19      	bf      	0x11023a42	// 11023a42 <csi_usart_receive_dma+0x7e>
    csi_dma_stop(usart_priv->dma_rx_ch);
11023a12:	9410      	ld.w      	r0, (r4, 0x40)
11023a14:	e0002c50 	bsr      	0x110292b4	// 110292b4 <cpu_task_stack_init+0x90c>
    int ret = csi_dma_config_channel(usart_priv->dma_rx_ch, &config, dw_usart_dma_event_cb, NULL);
11023a18:	3300      	movi      	r3, 0
11023a1a:	105b      	lrw      	r2, 0x1fff5068	// 11023a84 <csi_usart_receive_dma+0xc0>
11023a1c:	6c7b      	mov      	r1, r14
11023a1e:	9410      	ld.w      	r0, (r4, 0x40)
11023a20:	e3fffcac 	bsr      	0x11023378	// 11023378 <csi_dma_config_channel>
11023a24:	6d43      	mov      	r5, r0
    if (ret < 0) {
11023a26:	38df      	btsti      	r0, 31
11023a28:	0c13      	bf      	0x11023a4e	// 11023a4e <csi_usart_receive_dma+0x8a>
        csi_dma_release_channel(usart_priv->dma_rx_ch);
11023a2a:	9410      	ld.w      	r0, (r4, 0x40)
11023a2c:	e3fffc72 	bsr      	0x11023310	// 11023310 <csi_dma_release_channel>
}
11023a30:	6c17      	mov      	r0, r5
11023a32:	140c      	addi      	r14, r14, 48
11023a34:	1493      	pop      	r4-r6, r15
    } else if (usart_priv->idx == 1) {
11023a36:	3b41      	cmpnei      	r3, 1
11023a38:	0c03      	bf      	0x11023a3e	// 11023a3e <csi_usart_receive_dma+0x7a>
    USART_NULL_PARAM_CHK(handle);
11023a3a:	10b4      	lrw      	r5, 0x81020084	// 11023a88 <csi_usart_receive_dma+0xc4>
11023a3c:	07fa      	br      	0x11023a30	// 11023a30 <csi_usart_receive_dma+0x6c>
        config.hs_if    = DWENUM_DMA_UART1_RX;
11023a3e:	330f      	movi      	r3, 15
11023a40:	07e0      	br      	0x11023a00	// 11023a00 <csi_usart_receive_dma+0x3c>
        usart_priv->dma_rx_ch = csi_dma_alloc_channel();
11023a42:	e3fffbfd 	bsr      	0x1102323c	// 1102323c <csi_dma_alloc_channel>
        if (usart_priv->dma_rx_ch == -1) {
11023a46:	6542      	cmpne      	r0, r5
        usart_priv->dma_rx_ch = csi_dma_alloc_channel();
11023a48:	b410      	st.w      	r0, (r4, 0x40)
        if (usart_priv->dma_rx_ch == -1) {
11023a4a:	0be4      	bt      	0x11023a12	// 11023a12 <csi_usart_receive_dma+0x4e>
11023a4c:	07f7      	br      	0x11023a3a	// 11023a3a <csi_usart_receive_dma+0x76>
    usart_priv->config = config;
11023a4e:	3230      	movi      	r2, 48
11023a50:	6c7b      	mov      	r1, r14
11023a52:	e4040057 	addi      	r0, r4, 88
11023a56:	e0002ab5 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
    uint32_t max_block_size = DMA_MAX_TRANSPORT_SIZE(usart_priv->dma_rx_ch);
11023a5a:	9410      	ld.w      	r0, (r4, 0x40)
11023a5c:	ea0307ff 	movi      	r3, 2047
11023a60:	3840      	cmpnei      	r0, 0
11023a62:	321f      	movi      	r2, 31
11023a64:	c4430c20 	incf      	r2, r3, 0
    usart_priv->rx_block_num = (usart_priv->rx_total_num > max_block_size) ? max_block_size : usart_priv->rx_total_num;
11023a68:	9463      	ld.w      	r3, (r4, 0xc)
    csi_dma_start(usart_priv->dma_rx_ch, (uint8_t *) & (addr->THR), usart_priv->rx_buf,  usart_priv->rx_block_num);
11023a6a:	6c5b      	mov      	r1, r6
    usart_priv->rx_block_num = (usart_priv->rx_total_num > max_block_size) ? max_block_size : usart_priv->rx_total_num;
11023a6c:	64c8      	cmphs      	r2, r3
11023a6e:	c4620c20 	incf      	r3, r2, 0
    usart_priv->dma_rx_mode = 1;
11023a72:	3201      	movi      	r2, 1
    usart_priv->rx_block_num = (usart_priv->rx_total_num > max_block_size) ? max_block_size : usart_priv->rx_total_num;
11023a74:	b472      	st.w      	r3, (r4, 0x48)
    usart_priv->dma_rx_mode = 1;
11023a76:	dc440045 	st.b      	r2, (r4, 0x45)
    csi_dma_start(usart_priv->dma_rx_ch, (uint8_t *) & (addr->THR), usart_priv->rx_buf,  usart_priv->rx_block_num);
11023a7a:	9445      	ld.w      	r2, (r4, 0x14)
    return 0;
11023a7c:	3500      	movi      	r5, 0
    csi_dma_start(usart_priv->dma_rx_ch, (uint8_t *) & (addr->THR), usart_priv->rx_buf,  usart_priv->rx_block_num);
11023a7e:	e0002c5d 	bsr      	0x11029338	// 11029338 <cpu_task_stack_init+0x990>
    return ret;
11023a82:	07d7      	br      	0x11023a30	// 11023a30 <csi_usart_receive_dma+0x6c>
11023a84:	1fff5068 	.long	0x1fff5068
11023a88:	81020084 	.long	0x81020084

11023a8c <csi_usart_receive_query>:
  \param[out]  data  Pointer to buffer for data to receive from UART receiver
  \param[in]   num   Number of data items to receive
  \return      receive fifo data num
*/
int32_t csi_usart_receive_query(usart_handle_t handle, void *data, uint32_t num)
{
11023a8c:	14c3      	push      	r4-r6
    USART_NULL_PARAM_CHK(handle);
11023a8e:	3840      	cmpnei      	r0, 0
11023a90:	0c11      	bf      	0x11023ab2	// 11023ab2 <csi_usart_receive_query+0x26>
    USART_NULL_PARAM_CHK(data);
11023a92:	3940      	cmpnei      	r1, 0
11023a94:	0c0f      	bf      	0x11023ab2	// 11023ab2 <csi_usart_receive_query+0x26>

    dw_usart_priv_t *usart_priv = handle;
    dw_usart_reg_t *addr = (dw_usart_reg_t *)(usart_priv->base);
11023a96:	9080      	ld.w      	r4, (r0, 0x0)
    int32_t recv_num = 0;
    uint8_t *dest = (uint8_t *)data;

    while (addr->LSR & 0x1) {
11023a98:	3501      	movi      	r5, 1
    int32_t recv_num = 0;
11023a9a:	3000      	movi      	r0, 0
    while (addr->LSR & 0x1) {
11023a9c:	9465      	ld.w      	r3, (r4, 0x14)
11023a9e:	68d4      	and      	r3, r5
11023aa0:	3b40      	cmpnei      	r3, 0
11023aa2:	0c07      	bf      	0x11023ab0	// 11023ab0 <csi_usart_receive_query+0x24>
        *dest++ = addr->RBR;
11023aa4:	5960      	addu      	r3, r1, r0
11023aa6:	94c0      	ld.w      	r6, (r4, 0x0)
        recv_num++;
11023aa8:	2000      	addi      	r0, 1

        if (recv_num >= num) {
11023aaa:	6480      	cmphs      	r0, r2
        *dest++ = addr->RBR;
11023aac:	a3c0      	st.b      	r6, (r3, 0x0)
        if (recv_num >= num) {
11023aae:	0ff7      	bf      	0x11023a9c	// 11023a9c <csi_usart_receive_query+0x10>
        }
    }

    return recv_num;

}
11023ab0:	1483      	pop      	r4-r6
    USART_NULL_PARAM_CHK(handle);
11023ab2:	1002      	lrw      	r0, 0x81020084	// 11023ab8 <csi_usart_receive_query+0x2c>
11023ab4:	07fe      	br      	0x11023ab0	// 11023ab0 <csi_usart_receive_query+0x24>
11023ab6:	0000      	bkpt
11023ab8:	81020084 	.long	0x81020084

11023abc <csi_wdt_initialize>:
{
11023abc:	14d1      	push      	r4, r15
11023abe:	1423      	subi      	r14, r14, 12
11023ac0:	6d07      	mov      	r4, r1
    if (idx < 0 || idx >= CONFIG_WDT_NUM) {
11023ac2:	3840      	cmpnei      	r0, 0
11023ac4:	0c04      	bf      	0x11023acc	// 11023acc <csi_wdt_initialize+0x10>
        return NULL;
11023ac6:	3000      	movi      	r0, 0
}
11023ac8:	1403      	addi      	r14, r14, 12
11023aca:	1491      	pop      	r4, r15
    uint32_t base = 0u;
11023acc:	3300      	movi      	r3, 0
    hal_clk_gate_enable(MOD_WDT);
11023ace:	3025      	movi      	r0, 37
    uint32_t base = 0u;
11023ad0:	b860      	st.w      	r3, (r14, 0x0)
    uint32_t irq = 0u;
11023ad2:	b861      	st.w      	r3, (r14, 0x4)
    hal_clk_gate_enable(MOD_WDT);
11023ad4:	e0002bc0 	bsr      	0x11029254	// 11029254 <cpu_task_stack_init+0x8ac>
    if ((AP_PCR->SW_RESET0 & 0x04) == 0) {
11023ad8:	3380      	movi      	r3, 128
11023ada:	4377      	lsli      	r3, r3, 23
11023adc:	9320      	ld.w      	r1, (r3, 0x0)
11023ade:	3004      	movi      	r0, 4
11023ae0:	6840      	and      	r1, r0
11023ae2:	3940      	cmpnei      	r1, 0
11023ae4:	0804      	bt      	0x11023aec	// 11023aec <csi_wdt_initialize+0x30>
        AP_PCR->SW_RESET0 |= 0x04;
11023ae6:	9340      	ld.w      	r2, (r3, 0x0)
11023ae8:	6c80      	or      	r2, r0
11023aea:	b340      	st.w      	r2, (r3, 0x0)
    if ((AP_PCR->SW_RESET2 & 0x04) == 0) {
11023aec:	9323      	ld.w      	r1, (r3, 0xc)
11023aee:	3004      	movi      	r0, 4
11023af0:	6840      	and      	r1, r0
11023af2:	3940      	cmpnei      	r1, 0
11023af4:	0804      	bt      	0x11023afc	// 11023afc <csi_wdt_initialize+0x40>
        AP_PCR->SW_RESET2 |= 0x04;
11023af6:	9343      	ld.w      	r2, (r3, 0xc)
11023af8:	6c80      	or      	r2, r0
11023afa:	b343      	st.w      	r2, (r3, 0xc)
    AP_PCR->SW_RESET2 &= ~0x20;
11023afc:	3380      	movi      	r3, 128
11023afe:	4377      	lsli      	r3, r3, 23
11023b00:	9343      	ld.w      	r2, (r3, 0xc)
11023b02:	3a85      	bclri      	r2, 5
11023b04:	b343      	st.w      	r2, (r3, 0xc)
    int32_t real_idx = target_get_wdt(idx, &base, &irq, &handler);
11023b06:	6c7b      	mov      	r1, r14
    AP_PCR->SW_RESET2 |= 0x20;
11023b08:	9343      	ld.w      	r2, (r3, 0xc)
11023b0a:	ec420020 	ori      	r2, r2, 32
11023b0e:	b343      	st.w      	r2, (r3, 0xc)
    int32_t real_idx = target_get_wdt(idx, &base, &irq, &handler);
11023b10:	3000      	movi      	r0, 0
11023b12:	1b02      	addi      	r3, r14, 8
11023b14:	1a01      	addi      	r2, r14, 4
11023b16:	e3fffb5b 	bsr      	0x110231cc	// 110231cc <target_get_wdt>
    if (real_idx != idx) {
11023b1a:	3840      	cmpnei      	r0, 0
11023b1c:	0bd5      	bt      	0x11023ac6	// 11023ac6 <csi_wdt_initialize+0xa>
    wdt_priv->base = base;
11023b1e:	1004      	lrw      	r0, 0x1fffb6fc	// 11023b2c <csi_wdt_initialize+0x70>
11023b20:	9860      	ld.w      	r3, (r14, 0x0)
    wdt_priv->cb_event = cb_event;
11023b22:	b082      	st.w      	r4, (r0, 0x8)
    wdt_priv->base = base;
11023b24:	b060      	st.w      	r3, (r0, 0x0)
    wdt_priv->irq  = irq;
11023b26:	9861      	ld.w      	r3, (r14, 0x4)
11023b28:	b061      	st.w      	r3, (r0, 0x4)
    return (wdt_handle_t)wdt_priv;
11023b2a:	07cf      	br      	0x11023ac8	// 11023ac8 <csi_wdt_initialize+0xc>
11023b2c:	1fffb6fc 	.long	0x1fffb6fc

11023b30 <csi_wdt_uninitialize>:
{
11023b30:	14d1      	push      	r4, r15
11023b32:	6d03      	mov      	r4, r0
    WDT_NULL_PARAM_CHK(handle);
11023b34:	3840      	cmpnei      	r0, 0
11023b36:	0c0e      	bf      	0x11023b52	// 11023b52 <csi_wdt_uninitialize+0x22>
    wdt_priv->cb_event = NULL;
11023b38:	3300      	movi      	r3, 0
11023b3a:	b062      	st.w      	r3, (r0, 0x8)
    drv_irq_disable(wdt_priv->irq);
11023b3c:	9001      	ld.w      	r0, (r0, 0x4)
11023b3e:	e0002a4d 	bsr      	0x11028fd8	// 11028fd8 <cpu_task_stack_init+0x630>
    drv_irq_unregister(wdt_priv->irq);
11023b42:	9401      	ld.w      	r0, (r4, 0x4)
11023b44:	e3fffad8 	bsr      	0x110230f4	// 110230f4 <drv_irq_unregister>
    hal_clk_gate_disable(MOD_WDT);
11023b48:	3025      	movi      	r0, 37
11023b4a:	e3fff932 	bsr      	0x11022dae	// 11022dae <hal_clk_gate_disable>
    return 0;
11023b4e:	3000      	movi      	r0, 0
}
11023b50:	1491      	pop      	r4, r15
    WDT_NULL_PARAM_CHK(handle);
11023b52:	1002      	lrw      	r0, 0x81080084	// 11023b58 <csi_wdt_uninitialize+0x28>
11023b54:	07fe      	br      	0x11023b50	// 11023b50 <csi_wdt_uninitialize+0x20>
11023b56:	0000      	bkpt
11023b58:	81080084 	.long	0x81080084

11023b5c <csi_wdt_start>:
{
11023b5c:	14d0      	push      	r15
    WDT_NULL_PARAM_CHK(handle);
11023b5e:	3840      	cmpnei      	r0, 0
11023b60:	0c0a      	bf      	0x11023b74	// 11023b74 <csi_wdt_start+0x18>
    dw_wdt_reg_t *addr = (dw_wdt_reg_t *)(wdt_priv->base);
11023b62:	9040      	ld.w      	r2, (r0, 0x0)
    addr->WDT_CR = 0x1F;
11023b64:	8260      	ld.b      	r3, (r2, 0x0)
11023b66:	ec63001f 	ori      	r3, r3, 31
11023b6a:	a260      	st.b      	r3, (r2, 0x0)
    csi_wdt_restart(handle);
11023b6c:	e00029b8 	bsr      	0x11028edc	// 11028edc <cpu_task_stack_init+0x534>
    return 0;
11023b70:	3000      	movi      	r0, 0
}
11023b72:	1490      	pop      	r15
    WDT_NULL_PARAM_CHK(handle);
11023b74:	1001      	lrw      	r0, 0x81080084	// 11023b78 <csi_wdt_start+0x1c>
11023b76:	07fe      	br      	0x11023b72	// 11023b72 <csi_wdt_start+0x16>
11023b78:	81080084 	.long	0x81080084

11023b7c <CSI_WDT_IRQHandler>:
    *value = addr->WDT_CCVR;
    return 0;
}

void CSI_WDT_IRQHandler(void)
{
11023b7c:	14d0      	push      	r15
    dw_wdt_irqhandler(0);
11023b7e:	3000      	movi      	r0, 0
11023b80:	e0002c2a 	bsr      	0x110293d4	// 110293d4 <cpu_task_stack_init+0xa2c>
11023b84:	1490      	pop      	r15
	...

11023b88 <irq_vectors_init>:
extern void CORET_IRQHandler(void);

void (*g_irqvector[32])(void);

void irq_vectors_init(void)
{
11023b88:	3300      	movi      	r3, 0
    int i;

    for (i = 0; i < 32; i++) {
        g_irqvector[i] = Default_Handler;
11023b8a:	1027      	lrw      	r1, 0x1101b988	// 11023ba4 <irq_vectors_init+0x1c>
11023b8c:	1047      	lrw      	r2, 0x1fffce78	// 11023ba8 <irq_vectors_init+0x20>
11023b8e:	608c      	addu      	r2, r3
11023b90:	2303      	addi      	r3, 4
    for (i = 0; i < 32; i++) {
11023b92:	eb430080 	cmpnei      	r3, 128
        g_irqvector[i] = Default_Handler;
11023b96:	b220      	st.w      	r1, (r2, 0x0)
    for (i = 0; i < 32; i++) {
11023b98:	0bfa      	bt      	0x11023b8c	// 11023b8c <irq_vectors_init+0x4>
    }

    g_irqvector[CORET_IRQn] = CORET_IRQHandler;
11023b9a:	1064      	lrw      	r3, 0x1fffce78	// 11023ba8 <irq_vectors_init+0x20>
11023b9c:	1044      	lrw      	r2, 0x1fff36b0	// 11023bac <irq_vectors_init+0x24>
11023b9e:	b341      	st.w      	r2, (r3, 0x4)
}
11023ba0:	783c      	jmp      	r15
11023ba2:	0000      	bkpt
11023ba4:	1101b988 	.long	0x1101b988
11023ba8:	1fffce78 	.long	0x1fffce78
11023bac:	1fff36b0 	.long	0x1fff36b0

11023bb0 <phy_flash_sector_erase>:

// erase a sector of flash, size is 4KB
uint32_t phy_flash_sector_erase(unsigned int addr)
{
11023bb0:	14d0      	push      	r15
    return hal_flash_erase_sector(addr);
11023bb2:	e00027d9 	bsr      	0x11028b64	// 11028b64 <cpu_task_stack_init+0x1bc>
}
11023bb6:	1490      	pop      	r15

11023bb8 <csi_spiflash_power_down>:
11023bb8:	1001      	lrw      	r0, 0x81190083	// 11023bbc <csi_spiflash_power_down+0x4>
11023bba:	783c      	jmp      	r15
11023bbc:	81190083 	.long	0x81190083

11023bc0 <csi_spiflash_release_power_down>:
  \return      error code
*/
int32_t csi_spiflash_release_power_down(spiflash_handle_t handle)
{
    return ERR_SPIFLASH(DRV_ERROR_UNSUPPORTED);
}
11023bc0:	1001      	lrw      	r0, 0x81190083	// 11023bc4 <csi_spiflash_release_power_down+0x4>
11023bc2:	783c      	jmp      	r15
11023bc4:	81190083 	.long	0x81190083

11023bc8 <csi_spiflash_initialize>:
*/
spiflash_handle_t csi_spiflash_initialize(int32_t idx, spiflash_event_cb_t cb_event)
{
    ck_spiflash_priv_t *spiflash_priv = &s_spiflash_handle[idx];

    if (idx < 0 || idx >= CONFIG_SPIFLASH_NUM) {
11023bc8:	3840      	cmpnei      	r0, 0
11023bca:	0820      	bt      	0x11023c0a	// 11023c0a <csi_spiflash_initialize+0x42>
        return NULL;
    }

    spiflash_priv->spiflashinfo.start = SPIF_ADDR_START;
11023bcc:	1011      	lrw      	r0, 0x1fffb710	// 11023c10 <csi_spiflash_initialize+0x48>
11023bce:	3388      	movi      	r3, 136
11023bd0:	4375      	lsli      	r3, r3, 21
11023bd2:	b060      	st.w      	r3, (r0, 0x0)
    spiflash_priv->spiflashinfo.end = SPIF_ADDR_END;
11023bd4:	ea231108 	movih      	r3, 4360
    spiflash_priv->cb = cb_event;

    spiflash_priv->status.busy = 0;
    spiflash_priv->status.error = 0U;

    spiflash_init_flag = 1;
11023bd8:	3201      	movi      	r2, 1
    spiflash_priv->spiflashinfo.end = SPIF_ADDR_END;
11023bda:	b061      	st.w      	r3, (r0, 0x4)
    spiflash_priv->spiflashinfo.sector_count = SPIF_SECTOR_COUNT;
11023bdc:	3380      	movi      	r3, 128
    spiflash_priv->cb = cb_event;
11023bde:	b027      	st.w      	r1, (r0, 0x1c)
    spiflash_priv->spiflashinfo.sector_count = SPIF_SECTOR_COUNT;
11023be0:	b062      	st.w      	r3, (r0, 0x8)
    spiflash_priv->spiflashinfo.sector_size = SPIF_SECTOR_SIZE;
11023be2:	3380      	movi      	r3, 128
11023be4:	4365      	lsli      	r3, r3, 5
11023be6:	b063      	st.w      	r3, (r0, 0xc)
    spiflash_priv->spiflashinfo.page_size = SPIF_PAGE_SIZE;
11023be8:	3380      	movi      	r3, 128
11023bea:	4361      	lsli      	r3, r3, 1
11023bec:	b064      	st.w      	r3, (r0, 0x10)
    spiflash_priv->spiflashinfo.program_unit = 1;
11023bee:	3301      	movi      	r3, 1
11023bf0:	b065      	st.w      	r3, (r0, 0x14)
    spiflash_priv->spiflashinfo.erased_value = 0xff;
11023bf2:	3300      	movi      	r3, 0
11023bf4:	2b00      	subi      	r3, 1
11023bf6:	a078      	st.b      	r3, (r0, 0x18)
    spiflash_priv->status.busy = 0;
11023bf8:	d8600020 	ld.b      	r3, (r0, 0x20)
    spiflash_priv->status.error = 0U;
11023bfc:	e46320fc 	andi      	r3, r3, 252
11023c00:	dc600020 	st.b      	r3, (r0, 0x20)
    spiflash_init_flag = 1;
11023c04:	1064      	lrw      	r3, 0x1fffb734	// 11023c14 <csi_spiflash_initialize+0x4c>
11023c06:	a340      	st.b      	r2, (r3, 0x0)

    return (spiflash_handle_t)spiflash_priv;
}
11023c08:	783c      	jmp      	r15
        return NULL;
11023c0a:	3000      	movi      	r0, 0
11023c0c:	07fe      	br      	0x11023c08	// 11023c08 <csi_spiflash_initialize+0x40>
11023c0e:	0000      	bkpt
11023c10:	1fffb710 	.long	0x1fffb710
11023c14:	1fffb734 	.long	0x1fffb734

11023c18 <csi_spiflash_uninitialize>:
*/
int32_t csi_spiflash_uninitialize(spiflash_handle_t handle)
{

#if(DEBUG_EN == 1)
    SPIFLASH_NULL_PARAM_CHK(handle);
11023c18:	3840      	cmpnei      	r0, 0
11023c1a:	0c08      	bf      	0x11023c2a	// 11023c2a <csi_spiflash_uninitialize+0x12>
#endif

    ck_spiflash_priv_t *spiflash_priv = (ck_spiflash_priv_t *)handle;
    spiflash_init_flag = 0;
11023c1c:	1065      	lrw      	r3, 0x1fffb734	// 11023c30 <csi_spiflash_uninitialize+0x18>
11023c1e:	3200      	movi      	r2, 0
11023c20:	a340      	st.b      	r2, (r3, 0x0)
    spiflash_priv->cb = NULL;
11023c22:	3300      	movi      	r3, 0
11023c24:	b067      	st.w      	r3, (r0, 0x1c)

    return 0;
11023c26:	3000      	movi      	r0, 0
}
11023c28:	783c      	jmp      	r15
    SPIFLASH_NULL_PARAM_CHK(handle);
11023c2a:	1003      	lrw      	r0, 0x81190084	// 11023c34 <csi_spiflash_uninitialize+0x1c>
11023c2c:	07fe      	br      	0x11023c28	// 11023c28 <csi_spiflash_uninitialize+0x10>
11023c2e:	0000      	bkpt
11023c30:	1fffb734 	.long	0x1fffb734
11023c34:	81190084 	.long	0x81190084

11023c38 <csi_spiflash_read>:
  \param[in]   data  Pointer to a buffer storing the data read from Flash.
  \param[in]   cnt   Number of data items to read.
  \return      number of data items read or \ref execution_status
*/
int32_t csi_spiflash_read(spiflash_handle_t handle, uint32_t addr, void *data, uint32_t cnt)
{
11023c38:	14d4      	push      	r4-r7, r15
11023c3a:	1424      	subi      	r14, r14, 16
11023c3c:	6d0f      	mov      	r4, r3
    uint32_t *p_rd = data;
    uint32_t len_rd = 0;
    ck_spiflash_priv_t *spiflash_priv = handle;

#if(DEBUG_EN == 1)
    SPIFLASH_NULL_PARAM_CHK(handle);
11023c3e:	3840      	cmpnei      	r0, 0
    uint32_t read_data = 0;
11023c40:	3300      	movi      	r3, 0
{
11023c42:	6d4b      	mov      	r5, r2
    uint32_t read_data = 0;
11023c44:	b863      	st.w      	r3, (r14, 0xc)
    SPIFLASH_NULL_PARAM_CHK(handle);
11023c46:	0c5e      	bf      	0x11023d02	// 11023d02 <csi_spiflash_read+0xca>
    SPIFLASH_NULL_PARAM_CHK(data);
11023c48:	3a40      	cmpnei      	r2, 0
11023c4a:	0c5c      	bf      	0x11023d02	// 11023d02 <csi_spiflash_read+0xca>
    SPIFLASH_NULL_PARAM_CHK(cnt);
11023c4c:	3c40      	cmpnei      	r4, 0
11023c4e:	0c5a      	bf      	0x11023d02	// 11023d02 <csi_spiflash_read+0xca>

    if (spiflash_priv->spiflashinfo.start > addr || spiflash_priv->spiflashinfo.end < addr || spiflash_priv->spiflashinfo.start > (addr + cnt - 1) || spiflash_priv->spiflashinfo.end < (addr + cnt - 1)) {
11023c50:	90c0      	ld.w      	r6, (r0, 0x0)
11023c52:	6584      	cmphs      	r1, r6
11023c54:	0c57      	bf      	0x11023d02	// 11023d02 <csi_spiflash_read+0xca>
11023c56:	9041      	ld.w      	r2, (r0, 0x4)
11023c58:	6448      	cmphs      	r2, r1
11023c5a:	0c54      	bf      	0x11023d02	// 11023d02 <csi_spiflash_read+0xca>
11023c5c:	5963      	subi      	r3, r1, 1
11023c5e:	60d0      	addu      	r3, r4
11023c60:	658c      	cmphs      	r3, r6
11023c62:	0c50      	bf      	0x11023d02	// 11023d02 <csi_spiflash_read+0xca>
11023c64:	64c8      	cmphs      	r2, r3
11023c66:	0c4e      	bf      	0x11023d02	// 11023d02 <csi_spiflash_read+0xca>
        return ERR_SPIFLASH(DRV_ERROR_PARAMETER);
    }

    if (spiflash_priv->status.busy) {
11023c68:	d8600020 	ld.b      	r3, (r0, 0x20)
11023c6c:	e4432001 	andi      	r2, r3, 1
11023c70:	3a40      	cmpnei      	r2, 0
11023c72:	084a      	bt      	0x11023d06	// 11023d06 <csi_spiflash_read+0xce>
        return ERR_SPIFLASH(DRV_ERROR_BUSY);
    }

    if (!spiflash_init_flag) {
11023c74:	1147      	lrw      	r2, 0x1fffb734	// 11023d10 <csi_spiflash_read+0xd8>
11023c76:	8240      	ld.b      	r2, (r2, 0x0)
11023c78:	3a40      	cmpnei      	r2, 0
11023c7a:	0c48      	bf      	0x11023d0a	// 11023d0a <csi_spiflash_read+0xd2>
        return ERR_SPIFLASH(DRV_ERROR);
    }

#endif
    addr &= 0xffffff;
    spiflash_priv->status.error = 0U;
11023c7c:	3b81      	bclri      	r3, 1
11023c7e:	dc600020 	st.b      	r3, (r0, 0x20)

    len_rd  = cnt >> 2;

    if ((((uint32_t)data >> 2) << 2) != (uint32_t)data) {
11023c82:	c4052823 	bclri      	r3, r5, 0
11023c86:	3b81      	bclri      	r3, 1
    addr &= 0xffffff;
11023c88:	4128      	lsli      	r1, r1, 8
11023c8a:	4948      	lsri      	r2, r1, 8
    if ((((uint32_t)data >> 2) << 2) != (uint32_t)data) {
11023c8c:	64d6      	cmpne      	r5, r3
    len_rd  = cnt >> 2;
11023c8e:	4c02      	lsri      	r0, r4, 2
    addr &= 0xffffff;
11023c90:	b840      	st.w      	r2, (r14, 0x0)
11023c92:	40e2      	lsli      	r7, r0, 2
    if ((((uint32_t)data >> 2) << 2) != (uint32_t)data) {
11023c94:	0811      	bt      	0x11023cb6	// 11023cb6 <csi_spiflash_read+0x7e>
11023c96:	6d97      	mov      	r6, r5
            phy_ReadFlash(addr + (i << 2), (unsigned int *)(p_rd));
            memcpy((uint8_t *)data + (i << 2), p_rd, 4);
        }
    } else {
        for (i = 0; i < len_rd; i++) {
            phy_ReadFlash(addr + (i << 2), (unsigned int *)(p_rd + i));
11023c98:	9860      	ld.w      	r3, (r14, 0x0)
11023c9a:	5d5c      	addu      	r2, r5, r7
11023c9c:	60d6      	subu      	r3, r5
        for (i = 0; i < len_rd; i++) {
11023c9e:	649a      	cmpne      	r6, r2
11023ca0:	0c13      	bf      	0x11023cc6	// 11023cc6 <csi_spiflash_read+0x8e>
            phy_ReadFlash(addr + (i << 2), (unsigned int *)(p_rd + i));
11023ca2:	6c5b      	mov      	r1, r6
11023ca4:	5b18      	addu      	r0, r3, r6
11023ca6:	b842      	st.w      	r2, (r14, 0x8)
11023ca8:	b861      	st.w      	r3, (r14, 0x4)
11023caa:	2603      	addi      	r6, 4
11023cac:	e0002ba0 	bsr      	0x110293ec	// 110293ec <cpu_task_stack_init+0xa44>
11023cb0:	9842      	ld.w      	r2, (r14, 0x8)
11023cb2:	9861      	ld.w      	r3, (r14, 0x4)
11023cb4:	07f5      	br      	0x11023c9e	// 11023c9e <csi_spiflash_read+0x66>
    if ((((uint32_t)data >> 2) << 2) != (uint32_t)data) {
11023cb6:	6d97      	mov      	r6, r5
11023cb8:	5d7c      	addu      	r3, r5, r7
11023cba:	b861      	st.w      	r3, (r14, 0x4)
            phy_ReadFlash(addr + (i << 2), (unsigned int *)(p_rd));
11023cbc:	9860      	ld.w      	r3, (r14, 0x0)
11023cbe:	60d6      	subu      	r3, r5
        for (i = 0; i < len_rd; i++) {
11023cc0:	9841      	ld.w      	r2, (r14, 0x4)
11023cc2:	649a      	cmpne      	r6, r2
11023cc4:	0812      	bt      	0x11023ce8	// 11023ce8 <csi_spiflash_read+0xb0>
        }
    }

    len_rd  = cnt - ((cnt >> 2) << 2);
11023cc6:	e4c42003 	andi      	r6, r4, 3

    if (len_rd > 0) {
11023cca:	3e40      	cmpnei      	r6, 0
11023ccc:	0c0b      	bf      	0x11023ce2	// 11023ce2 <csi_spiflash_read+0xaa>
        p_rd = &read_data;
        phy_ReadFlash(addr + (i << 2), (unsigned int *)(p_rd));
11023cce:	9800      	ld.w      	r0, (r14, 0x0)
11023cd0:	1903      	addi      	r1, r14, 12
11023cd2:	601c      	addu      	r0, r7
11023cd4:	e0002b8c 	bsr      	0x110293ec	// 110293ec <cpu_task_stack_init+0xa44>
        memcpy((uint8_t *)data + (i << 2), p_rd, len_rd);
11023cd8:	6c9b      	mov      	r2, r6
11023cda:	5d1c      	addu      	r0, r5, r7
11023cdc:	1903      	addi      	r1, r14, 12
11023cde:	e0002971 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
    }

    return cnt;
11023ce2:	6c13      	mov      	r0, r4
}
11023ce4:	1404      	addi      	r14, r14, 16
11023ce6:	1494      	pop      	r4-r7, r15
            phy_ReadFlash(addr + (i << 2), (unsigned int *)(p_rd));
11023ce8:	5b18      	addu      	r0, r3, r6
11023cea:	b862      	st.w      	r3, (r14, 0x8)
11023cec:	1903      	addi      	r1, r14, 12
11023cee:	e0002b7f 	bsr      	0x110293ec	// 110293ec <cpu_task_stack_init+0xa44>
            memcpy((uint8_t *)data + (i << 2), p_rd, 4);
11023cf2:	6c1b      	mov      	r0, r6
11023cf4:	3204      	movi      	r2, 4
11023cf6:	1903      	addi      	r1, r14, 12
11023cf8:	2603      	addi      	r6, 4
11023cfa:	e0002963 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
11023cfe:	9862      	ld.w      	r3, (r14, 0x8)
11023d00:	07e0      	br      	0x11023cc0	// 11023cc0 <csi_spiflash_read+0x88>
    SPIFLASH_NULL_PARAM_CHK(handle);
11023d02:	1005      	lrw      	r0, 0x81190084	// 11023d14 <csi_spiflash_read+0xdc>
11023d04:	07f0      	br      	0x11023ce4	// 11023ce4 <csi_spiflash_read+0xac>
        return ERR_SPIFLASH(DRV_ERROR_BUSY);
11023d06:	1005      	lrw      	r0, 0x81190081	// 11023d18 <csi_spiflash_read+0xe0>
11023d08:	07ee      	br      	0x11023ce4	// 11023ce4 <csi_spiflash_read+0xac>
        return ERR_SPIFLASH(DRV_ERROR);
11023d0a:	1005      	lrw      	r0, 0x81190080	// 11023d1c <csi_spiflash_read+0xe4>
11023d0c:	07ec      	br      	0x11023ce4	// 11023ce4 <csi_spiflash_read+0xac>
11023d0e:	0000      	bkpt
11023d10:	1fffb734 	.long	0x1fffb734
11023d14:	81190084 	.long	0x81190084
11023d18:	81190081 	.long	0x81190081
11023d1c:	81190080 	.long	0x81190080

11023d20 <csi_spiflash_program>:
  \param[in]   data  Pointer to a buffer containing the data to be programmed to Flash..
  \param[in]   cnt   Number of data items to program.
  \return      number of data items programmed or \ref execution_status
*/
int32_t csi_spiflash_program(spiflash_handle_t handle, uint32_t addr, const void *data, uint32_t cnt)
{
11023d20:	14d4      	push      	r4-r7, r15
11023d22:	1423      	subi      	r14, r14, 12
11023d24:	6dc3      	mov      	r7, r0

    ck_spiflash_priv_t *spiflash_priv = handle;

#if (DEBUG_EN == 1)
    SPIFLASH_NULL_PARAM_CHK(handle);
11023d26:	3840      	cmpnei      	r0, 0
{
11023d28:	6d4b      	mov      	r5, r2
11023d2a:	6d0f      	mov      	r4, r3
    SPIFLASH_NULL_PARAM_CHK(handle);
11023d2c:	0c68      	bf      	0x11023dfc	// 11023dfc <csi_spiflash_program+0xdc>
    SPIFLASH_NULL_PARAM_CHK(data);
11023d2e:	3a40      	cmpnei      	r2, 0
11023d30:	0c66      	bf      	0x11023dfc	// 11023dfc <csi_spiflash_program+0xdc>
    SPIFLASH_NULL_PARAM_CHK(cnt);
11023d32:	3b40      	cmpnei      	r3, 0
11023d34:	0c64      	bf      	0x11023dfc	// 11023dfc <csi_spiflash_program+0xdc>

    if (spiflash_priv->spiflashinfo.start > addr || spiflash_priv->spiflashinfo.end < addr || spiflash_priv->spiflashinfo.start > (addr + cnt - 1) || spiflash_priv->spiflashinfo.end < (addr + cnt - 1)) {
11023d36:	9000      	ld.w      	r0, (r0, 0x0)
11023d38:	6404      	cmphs      	r1, r0
11023d3a:	0c61      	bf      	0x11023dfc	// 11023dfc <csi_spiflash_program+0xdc>
11023d3c:	9741      	ld.w      	r2, (r7, 0x4)
11023d3e:	6448      	cmphs      	r2, r1
11023d40:	0c5e      	bf      	0x11023dfc	// 11023dfc <csi_spiflash_program+0xdc>
11023d42:	5963      	subi      	r3, r1, 1
11023d44:	60d0      	addu      	r3, r4
11023d46:	640c      	cmphs      	r3, r0
11023d48:	0c5a      	bf      	0x11023dfc	// 11023dfc <csi_spiflash_program+0xdc>
11023d4a:	64c8      	cmphs      	r2, r3
11023d4c:	0c58      	bf      	0x11023dfc	// 11023dfc <csi_spiflash_program+0xdc>
        return ERR_SPIFLASH(DRV_ERROR_PARAMETER);
    }

    if (spiflash_priv->status.busy) {
11023d4e:	3601      	movi      	r6, 1
11023d50:	d8470020 	ld.b      	r2, (r7, 0x20)
11023d54:	c4c22023 	and      	r3, r2, r6
11023d58:	3b40      	cmpnei      	r3, 0
11023d5a:	0853      	bt      	0x11023e00	// 11023e00 <csi_spiflash_program+0xe0>
        return ERR_SPIFLASH(DRV_ERROR_BUSY);
    }

    if (!spiflash_init_flag) {
11023d5c:	116b      	lrw      	r3, 0x1fffb734	// 11023e08 <csi_spiflash_program+0xe8>
11023d5e:	8360      	ld.b      	r3, (r3, 0x0)
11023d60:	3b40      	cmpnei      	r3, 0
11023d62:	0c51      	bf      	0x11023e04	// 11023e04 <csi_spiflash_program+0xe4>
#endif

    uint32_t len = 0;
    uint32_t num = cnt;
    uint8_t *p_wr;
    addr &= 0xffffff;
11023d64:	4168      	lsli      	r3, r1, 8

    spiflash_priv->status.busy = 1U;
11023d66:	6c98      	or      	r2, r6
    spiflash_priv->status.error = 0U;

    p_wr = (uint8_t *)data;
    len = 64 - (addr % 64);
11023d68:	e421203f 	andi      	r1, r1, 63
11023d6c:	3640      	movi      	r6, 64
11023d6e:	6186      	subu      	r6, r1

    if (len >= cnt) {
11023d70:	6518      	cmphs      	r6, r4
    spiflash_priv->status.error = 0U;
11023d72:	e44220fd 	andi      	r2, r2, 253
    addr &= 0xffffff;
11023d76:	4b68      	lsri      	r3, r3, 8
    spiflash_priv->status.error = 0U;
11023d78:	dc470020 	st.b      	r2, (r7, 0x20)
    if (len >= cnt) {
11023d7c:	0c07      	bf      	0x11023d8a	// 11023d8a <csi_spiflash_program+0x6a>
        phy_ProgramPage64(addr, p_wr, cnt);
11023d7e:	6c93      	mov      	r2, r4
        addr += len;
        p_wr += len;
        cnt -= len;

        if (cnt <= 64) {
            phy_ProgramPage64(addr, p_wr, cnt);
11023d80:	6c57      	mov      	r1, r5
11023d82:	6c0f      	mov      	r0, r3
                p_wr += 64;
                cnt -= 64;
            }

            if (cnt > 0) {
                phy_ProgramPage64(addr, p_wr, cnt);
11023d84:	e0002930 	bsr      	0x11028fe4	// 11028fe4 <cpu_task_stack_init+0x63c>
11023d88:	0432      	br      	0x11023dec	// 11023dec <csi_spiflash_program+0xcc>
        phy_ProgramPage64(addr, p_wr, len);
11023d8a:	6c9b      	mov      	r2, r6
11023d8c:	6c57      	mov      	r1, r5
11023d8e:	6c0f      	mov      	r0, r3
11023d90:	b860      	st.w      	r3, (r14, 0x0)
        p_wr += len;
11023d92:	6158      	addu      	r5, r6
        phy_ProgramPage64(addr, p_wr, len);
11023d94:	e0002928 	bsr      	0x11028fe4	// 11028fe4 <cpu_task_stack_init+0x63c>
        addr += len;
11023d98:	9860      	ld.w      	r3, (r14, 0x0)
11023d9a:	60d8      	addu      	r3, r6
        cnt -= len;
11023d9c:	5cd9      	subu      	r6, r4, r6
        if (cnt <= 64) {
11023d9e:	eb060040 	cmphsi      	r6, 65
        addr += len;
11023da2:	b860      	st.w      	r3, (r14, 0x0)
        if (cnt <= 64) {
11023da4:	0803      	bt      	0x11023daa	// 11023daa <csi_spiflash_program+0x8a>
            phy_ProgramPage64(addr, p_wr, cnt);
11023da6:	6c9b      	mov      	r2, r6
11023da8:	07ec      	br      	0x11023d80	// 11023d80 <csi_spiflash_program+0x60>
                phy_ProgramPage64(addr, p_wr, 64);
11023daa:	9840      	ld.w      	r2, (r14, 0x0)
11023dac:	6096      	subu      	r2, r5
11023dae:	6cd7      	mov      	r3, r5
11023db0:	b841      	st.w      	r2, (r14, 0x4)
11023db2:	6c4f      	mov      	r1, r3
11023db4:	3240      	movi      	r2, 64
11023db6:	9801      	ld.w      	r0, (r14, 0x4)
11023db8:	b862      	st.w      	r3, (r14, 0x8)
11023dba:	600c      	addu      	r0, r3
11023dbc:	e0002914 	bsr      	0x11028fe4	// 11028fe4 <cpu_task_stack_init+0x63c>
                p_wr += 64;
11023dc0:	3240      	movi      	r2, 64
11023dc2:	9862      	ld.w      	r3, (r14, 0x8)
11023dc4:	60c8      	addu      	r3, r2
11023dc6:	5e2d      	subu      	r1, r6, r3
11023dc8:	6054      	addu      	r1, r5
            while (cnt >= 64) {
11023dca:	eb01003f 	cmphsi      	r1, 64
11023dce:	0bf2      	bt      	0x11023db2	// 11023db2 <csi_spiflash_program+0x92>
11023dd0:	e426103f 	subi      	r1, r6, 64
11023dd4:	3300      	movi      	r3, 0
11023dd6:	9800      	ld.w      	r0, (r14, 0x0)
11023dd8:	2b3f      	subi      	r3, 64
11023dda:	6008      	addu      	r0, r2
11023ddc:	684c      	and      	r1, r3
11023dde:	6004      	addu      	r0, r1
11023de0:	6048      	addu      	r1, r2
11023de2:	e446203f 	andi      	r2, r6, 63
11023de6:	6054      	addu      	r1, r5
            if (cnt > 0) {
11023de8:	3a40      	cmpnei      	r2, 0
11023dea:	0bcd      	bt      	0x11023d84	// 11023d84 <csi_spiflash_program+0x64>
            }
        }
    }

    spiflash_priv->status.busy = 0U;
11023dec:	d8670020 	ld.b      	r3, (r7, 0x20)
11023df0:	3b80      	bclri      	r3, 0
11023df2:	dc670020 	st.b      	r3, (r7, 0x20)

    return num;
11023df6:	6c13      	mov      	r0, r4
}
11023df8:	1403      	addi      	r14, r14, 12
11023dfa:	1494      	pop      	r4-r7, r15
    SPIFLASH_NULL_PARAM_CHK(handle);
11023dfc:	1004      	lrw      	r0, 0x81190084	// 11023e0c <csi_spiflash_program+0xec>
11023dfe:	07fd      	br      	0x11023df8	// 11023df8 <csi_spiflash_program+0xd8>
        return ERR_SPIFLASH(DRV_ERROR_BUSY);
11023e00:	1004      	lrw      	r0, 0x81190081	// 11023e10 <csi_spiflash_program+0xf0>
11023e02:	07fb      	br      	0x11023df8	// 11023df8 <csi_spiflash_program+0xd8>
        return ERR_SPIFLASH(DRV_ERROR);
11023e04:	1004      	lrw      	r0, 0x81190080	// 11023e14 <csi_spiflash_program+0xf4>
11023e06:	07f9      	br      	0x11023df8	// 11023df8 <csi_spiflash_program+0xd8>
11023e08:	1fffb734 	.long	0x1fffb734
11023e0c:	81190084 	.long	0x81190084
11023e10:	81190081 	.long	0x81190081
11023e14:	81190080 	.long	0x81190080

11023e18 <csi_spiflash_erase_sector>:
  \param[in]   handle  spiflash handle to operate.
  \param[in]   addr  Sector address
  \return      \ref execution_status
*/
int32_t csi_spiflash_erase_sector(spiflash_handle_t handle, uint32_t addr)
{
11023e18:	14d1      	push      	r4, r15
11023e1a:	6d03      	mov      	r4, r0
    ck_spiflash_priv_t *spiflash_priv = handle;

#if (DEBUG_EN == 1)

    if (spiflash_priv->spiflashinfo.start > addr || spiflash_priv->spiflashinfo.end <= addr) {
11023e1c:	9060      	ld.w      	r3, (r0, 0x0)
11023e1e:	64c4      	cmphs      	r1, r3
11023e20:	0c25      	bf      	0x11023e6a	// 11023e6a <csi_spiflash_erase_sector+0x52>
11023e22:	9061      	ld.w      	r3, (r0, 0x4)
11023e24:	64c4      	cmphs      	r1, r3
11023e26:	0822      	bt      	0x11023e6a	// 11023e6a <csi_spiflash_erase_sector+0x52>
        return ERR_SPIFLASH(DRV_ERROR_PARAMETER);
    }

    SPIFLASH_NULL_PARAM_CHK(handle);

    if (spiflash_priv->status.busy) {
11023e28:	3201      	movi      	r2, 1
11023e2a:	d8600020 	ld.b      	r3, (r0, 0x20)
11023e2e:	c4432020 	and      	r0, r3, r2
11023e32:	3840      	cmpnei      	r0, 0
11023e34:	081d      	bt      	0x11023e6e	// 11023e6e <csi_spiflash_erase_sector+0x56>
        return ERR_SPIFLASH(DRV_ERROR_BUSY);
    }

    if (!spiflash_init_flag) {
11023e36:	1011      	lrw      	r0, 0x1fffb734	// 11023e78 <csi_spiflash_erase_sector+0x60>
11023e38:	8000      	ld.b      	r0, (r0, 0x0)
11023e3a:	3840      	cmpnei      	r0, 0
11023e3c:	0c1b      	bf      	0x11023e72	// 11023e72 <csi_spiflash_erase_sector+0x5a>
        return ERR_SPIFLASH(DRV_ERROR);
    }

#endif

    spiflash_priv->status.busy = 1U;
11023e3e:	6cc8      	or      	r3, r2
    spiflash_priv->status.error = 0U;
11023e40:	e46320fd 	andi      	r3, r3, 253
    addr &= 0xffffff;
11023e44:	4128      	lsli      	r1, r1, 8
    spiflash_priv->status.error = 0U;
11023e46:	dc640020 	st.b      	r3, (r4, 0x20)
    addr &= 0xffffff;
11023e4a:	4908      	lsri      	r0, r1, 8

    phy_flash_sector_erase(addr);
11023e4c:	e3fffeb2 	bsr      	0x11023bb0	// 11023bb0 <phy_flash_sector_erase>

    spiflash_priv->status.busy = 0U;
11023e50:	d8640020 	ld.b      	r3, (r4, 0x20)
11023e54:	3b80      	bclri      	r3, 0
11023e56:	dc640020 	st.b      	r3, (r4, 0x20)

    if (spiflash_priv->cb) {
11023e5a:	9467      	ld.w      	r3, (r4, 0x1c)
11023e5c:	3b40      	cmpnei      	r3, 0
11023e5e:	0c04      	bf      	0x11023e66	// 11023e66 <csi_spiflash_erase_sector+0x4e>
        spiflash_priv->cb(0, SPIFLASH_EVENT_READY);
11023e60:	3100      	movi      	r1, 0
11023e62:	3000      	movi      	r0, 0
11023e64:	7bcd      	jsr      	r3
    }

    return 0;
11023e66:	3000      	movi      	r0, 0
11023e68:	0402      	br      	0x11023e6c	// 11023e6c <csi_spiflash_erase_sector+0x54>
        return ERR_SPIFLASH(DRV_ERROR_PARAMETER);
11023e6a:	1005      	lrw      	r0, 0x81190084	// 11023e7c <csi_spiflash_erase_sector+0x64>
}
11023e6c:	1491      	pop      	r4, r15
        return ERR_SPIFLASH(DRV_ERROR_BUSY);
11023e6e:	1005      	lrw      	r0, 0x81190081	// 11023e80 <csi_spiflash_erase_sector+0x68>
11023e70:	07fe      	br      	0x11023e6c	// 11023e6c <csi_spiflash_erase_sector+0x54>
        return ERR_SPIFLASH(DRV_ERROR);
11023e72:	1005      	lrw      	r0, 0x81190080	// 11023e84 <csi_spiflash_erase_sector+0x6c>
11023e74:	07fc      	br      	0x11023e6c	// 11023e6c <csi_spiflash_erase_sector+0x54>
11023e76:	0000      	bkpt
11023e78:	1fffb734 	.long	0x1fffb734
11023e7c:	81190084 	.long	0x81190084
11023e80:	81190081 	.long	0x81190081
11023e84:	81190080 	.long	0x81190080

11023e88 <csi_spiflash_get_info>:
  \param[in]   handle  spiflash handle to operate.
  \return      Pointer to Flash information \ref spiflash_info_t
*/
spiflash_info_t *csi_spiflash_get_info(spiflash_handle_t handle)//todo
{
    if (handle == NULL || (!spiflash_init_flag)) {
11023e88:	3840      	cmpnei      	r0, 0
11023e8a:	0c08      	bf      	0x11023e9a	// 11023e9a <csi_spiflash_get_info+0x12>
11023e8c:	1065      	lrw      	r3, 0x1fffb734	// 11023ea0 <csi_spiflash_get_info+0x18>
11023e8e:	8360      	ld.b      	r3, (r3, 0x0)
        return NULL;
    }

    ck_spiflash_priv_t *spiflash_priv = handle;
    spiflash_info_t *spiflash_info = &(spiflash_priv->spiflashinfo);
11023e90:	3b40      	cmpnei      	r3, 0
11023e92:	3300      	movi      	r3, 0
11023e94:	c4030c20 	incf      	r0, r3, 0

    return spiflash_info;
}
11023e98:	783c      	jmp      	r15
        return NULL;
11023e9a:	3000      	movi      	r0, 0
11023e9c:	07fe      	br      	0x11023e98	// 11023e98 <csi_spiflash_get_info+0x10>
11023e9e:	0000      	bkpt
11023ea0:	1fffb734 	.long	0x1fffb734

11023ea4 <drv_get_sys_freq>:
    }
}

int32_t drv_get_sys_freq(void)
{
    switch (g_system_clk) {
11023ea4:	1066      	lrw      	r3, 0x1fff08a8	// 11023ebc <drv_get_sys_freq+0x18>
11023ea6:	8360      	ld.b      	r3, (r3, 0x0)
11023ea8:	74cc      	zextb      	r3, r3
11023eaa:	3b05      	cmphsi      	r3, 6
11023eac:	0806      	bt      	0x11023eb8	// 11023eb8 <drv_get_sys_freq+0x14>
11023eae:	4362      	lsli      	r3, r3, 2
11023eb0:	1044      	lrw      	r2, 0x110117d0	// 11023ec0 <drv_get_sys_freq+0x1c>
11023eb2:	60c8      	addu      	r3, r2
11023eb4:	9300      	ld.w      	r0, (r3, 0x0)
            return 96000000;

        default:
            return 32000000;
    }
}
11023eb6:	783c      	jmp      	r15
    switch (g_system_clk) {
11023eb8:	1003      	lrw      	r0, 0x1e84800	// 11023ec4 <drv_get_sys_freq+0x20>
11023eba:	07fe      	br      	0x11023eb6	// 11023eb6 <drv_get_sys_freq+0x12>
11023ebc:	1fff08a8 	.long	0x1fff08a8
11023ec0:	110117d0 	.long	0x110117d0
11023ec4:	01e84800 	.long	0x01e84800

11023ec8 <drv_get_apb_freq>:

int32_t drv_get_apb_freq(int32_t idx)
{
11023ec8:	14d0      	push      	r15
    return drv_get_sys_freq();
11023eca:	e3ffffed 	bsr      	0x11023ea4	// 11023ea4 <drv_get_sys_freq>
}
11023ece:	1490      	pop      	r15

11023ed0 <SystemInit>:

void SystemInit(void)
{
11023ed0:	14d4      	push      	r4-r7, r15
11023ed2:	152f      	subi      	r14, r14, 188
    /* Clear active and pending IRQ */
    VIC->IABR[0] = 0x0;
11023ed4:	1256      	lrw      	r2, 0xe000e100	// 1102402c <SystemInit+0x15c>
11023ed6:	3300      	movi      	r3, 0
11023ed8:	dc622080 	st.w      	r3, (r2, 0x200)
    VIC->ICPR[0] = 0xFFFFFFFF;
11023edc:	2b00      	subi      	r3, 1
11023ede:	dc622060 	st.w      	r3, (r2, 0x180)
    VIC->ICER[0] = 0xFFFFFFFF;
11023ee2:	dc622020 	st.w      	r3, (r2, 0x80)
    __ASM volatile("psrclr ie");
11023ee6:	c0807020 	psrclr      	ie

    __disable_irq();

    g_system_clk = SYS_CLK_DLL_48M;
11023eea:	1272      	lrw      	r3, 0x1fff08a8	// 11024030 <SystemInit+0x160>
11023eec:	3203      	movi      	r2, 3

#ifdef CONFIG_USE_XTAL_CLK
    g_clk32K_config = CLK_32K_XTAL;//CLK_32K_XTAL,CLK_32K_RCOSC
#else
    g_clk32K_config = CLK_32K_RCOSC;//CLK_32K_XTAL,CLK_32K_RCOSC
11023eee:	1292      	lrw      	r4, 0x1fffbacc	// 11024034 <SystemInit+0x164>
    g_system_clk = SYS_CLK_DLL_48M;
11023ef0:	b340      	st.w      	r2, (r3, 0x0)
    g_clk32K_config = CLK_32K_RCOSC;//CLK_32K_XTAL,CLK_32K_RCOSC
11023ef2:	3301      	movi      	r3, 1
#endif

    g_spif_ref_clk = SYS_CLK_DLL_96M;
11023ef4:	3205      	movi      	r2, 5
    g_clk32K_config = CLK_32K_RCOSC;//CLK_32K_XTAL,CLK_32K_RCOSC
11023ef6:	a460      	st.b      	r3, (r4, 0x0)
    g_spif_ref_clk = SYS_CLK_DLL_96M;
11023ef8:	1270      	lrw      	r3, 0x1fffa59c	// 11024038 <SystemInit+0x168>
11023efa:	b340      	st.w      	r2, (r3, 0x0)

    JUMP_FUNCTION(CK802_TRAP_C) = (uint32_t)&trap_c;           //register trap irq handler
11023efc:	1270      	lrw      	r3, 0x1fff0300	// 1102403c <SystemInit+0x16c>
11023efe:	1251      	lrw      	r2, 0x11024070	// 11024040 <SystemInit+0x170>
11023f00:	b35a      	st.w      	r2, (r3, 0x68)
    irq_vectors_init();
11023f02:	e3fffe43 	bsr      	0x11023b88	// 11023b88 <irq_vectors_init>
    _system_init_for_baremetal();
#else
    _system_init_for_kernel();
#endif

    init_config();
11023f06:	e0001d8d 	bsr      	0x11027a20	// 11027a20 <init_config>

    hal_rfphy_init();
11023f0a:	e0001f6d 	bsr      	0x11027de4	// 11027de4 <hal_rfphy_init>

    int i = 0;

    PHY6220_Vectors[0] = (uint32_t)Reset_Handler;
11023f0e:	124e      	lrw      	r2, 0x1101b90c	// 11024044 <SystemInit+0x174>
11023f10:	126e      	lrw      	r3, 0x1fff2000	// 11024048 <SystemInit+0x178>

    for (i = 1; i < 32; i++) {
        PHY6220_Vectors[i] = (uint32_t)Default_Handler;
11023f12:	120f      	lrw      	r0, 0x1101b988	// 1102404c <SystemInit+0x17c>
    PHY6220_Vectors[0] = (uint32_t)Reset_Handler;
11023f14:	b340      	st.w      	r2, (r3, 0x0)
11023f16:	b880      	st.w      	r4, (r14, 0x0)
    for (i = 1; i < 32; i++) {
11023f18:	3201      	movi      	r2, 1
        PHY6220_Vectors[i] = (uint32_t)Default_Handler;
11023f1a:	4222      	lsli      	r1, r2, 2
    for (i = 1; i < 32; i++) {
11023f1c:	2200      	addi      	r2, 1
11023f1e:	eb420020 	cmpnei      	r2, 32
        PHY6220_Vectors[i] = (uint32_t)Default_Handler;
11023f22:	604c      	addu      	r1, r3
11023f24:	b100      	st.w      	r0, (r1, 0x0)
    for (i = 1; i < 32; i++) {
11023f26:	0bfa      	bt      	0x11023f1a	// 11023f1a <SystemInit+0x4a>
    }

    PHY6220_Vectors[32] = (uint32_t)tspend_handler;
11023f28:	124a      	lrw      	r2, 0x1fff3870	// 11024050 <SystemInit+0x180>

    for (i = 33; i < 64; i++) {
        PHY6220_Vectors[i] = (uint32_t)Default_IRQHandler_phy6220;
11023f2a:	120b      	lrw      	r0, 0x1fff3768	// 11024054 <SystemInit+0x184>
    PHY6220_Vectors[32] = (uint32_t)tspend_handler;
11023f2c:	dc432020 	st.w      	r2, (r3, 0x80)
    for (i = 33; i < 64; i++) {
11023f30:	3221      	movi      	r2, 33
        PHY6220_Vectors[i] = (uint32_t)Default_IRQHandler_phy6220;
11023f32:	4222      	lsli      	r1, r2, 2
    for (i = 33; i < 64; i++) {
11023f34:	2200      	addi      	r2, 1
11023f36:	eb420040 	cmpnei      	r2, 64
        PHY6220_Vectors[i] = (uint32_t)Default_IRQHandler_phy6220;
11023f3a:	604c      	addu      	r1, r3
11023f3c:	b100      	st.w      	r0, (r1, 0x0)
    for (i = 33; i < 64; i++) {
11023f3e:	0bfa      	bt      	0x11023f32	// 11023f32 <SystemInit+0x62>
    __ASM volatile("mtcr %0, vbr" : : "r"(vbr));
11023f40:	c0036421 	mtcr      	r3, cr<1, 0>
    for (i = 1; i <= 31; i++) {
11023f44:	3101      	movi      	r1, 1
    VIC->IPR[_IP_IDX(IRQn)] = ((uint32_t)(VIC->IPR[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
11023f46:	3703      	movi      	r7, 3
11023f48:	36ff      	movi      	r6, 255
                                 (((priority << (8U - __VIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
11023f4a:	3440      	movi      	r4, 64
    VIC->IPR[_IP_IDX(IRQn)] = ((uint32_t)(VIC->IPR[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
11023f4c:	4962      	lsri      	r3, r1, 2
11023f4e:	1158      	lrw      	r2, 0xe000e100	// 1102402c <SystemInit+0x15c>
11023f50:	4362      	lsli      	r3, r3, 2
11023f52:	60c8      	addu      	r3, r2
11023f54:	c4e12022 	and      	r2, r1, r7
11023f58:	4243      	lsli      	r2, r2, 3
11023f5a:	d8a320c0 	ld.w      	r5, (r3, 0x300)
11023f5e:	c4464020 	lsl      	r0, r6, r2
11023f62:	c4052040 	andn      	r0, r5, r0
                                 (((priority << (8U - __VIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
11023f66:	c4444022 	lsl      	r2, r4, r2
11023f6a:	2100      	addi      	r1, 1
11023f6c:	eb410020 	cmpnei      	r1, 32
    VIC->IPR[_IP_IDX(IRQn)] = ((uint32_t)(VIC->IPR[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
11023f70:	6c08      	or      	r0, r2
11023f72:	dc0320c0 	st.w      	r0, (r3, 0x300)
11023f76:	0beb      	bt      	0x11023f4c	// 11023f4c <SystemInit+0x7c>

    __set_VBR((uint32_t)(PHY6220_Vectors));

    config_irq_priority();

    csi_coret_config(drv_get_sys_freq() / CONFIG_SYSTICK_HZ, CORET_IRQn);    //10ms
11023f78:	e3ffff96 	bsr      	0x11023ea4	// 11023ea4 <drv_get_sys_freq>
11023f7c:	31fa      	movi      	r1, 250
11023f7e:	4122      	lsli      	r1, r1, 2
11023f80:	e3ffbd08 	bsr      	0x1101b990	// 1101b990 <__div32>
    if ((ticks - 1UL) > CORET_LOAD_RELOAD_Msk) {
11023f84:	c6e05023 	bmaski      	r3, 24
11023f88:	2800      	subi      	r0, 1
11023f8a:	640c      	cmphs      	r3, r0
11023f8c:	0c07      	bf      	0x11023f9a	// 11023f9a <SystemInit+0xca>
    CORET->LOAD = (uint32_t)(ticks - 1UL);                              /* set reload register */
11023f8e:	1173      	lrw      	r3, 0xe000e010	// 11024058 <SystemInit+0x188>
    CORET->VAL  = 0UL;                                                  /* Load the CORET Counter Value */
11023f90:	3200      	movi      	r2, 0
    CORET->LOAD = (uint32_t)(ticks - 1UL);                              /* set reload register */
11023f92:	b301      	st.w      	r0, (r3, 0x4)
    CORET->VAL  = 0UL;                                                  /* Load the CORET Counter Value */
11023f94:	b342      	st.w      	r2, (r3, 0x8)
    CORET->CTRL = CORET_CTRL_CLKSOURCE_Msk |
11023f96:	3207      	movi      	r2, 7
11023f98:	b340      	st.w      	r2, (r3, 0x0)
    drv_irq_enable(CORET_IRQn);
11023f9a:	3001      	movi      	r0, 1
11023f9c:	1c01      	addi      	r4, r14, 4
11023f9e:	e0002a21 	bsr      	0x110293e0	// 110293e0 <cpu_task_stack_init+0xa38>

    //replace TS_PEND IRQ with IRQ0
    drv_irq_enable(TSPEND_IRQn);
11023fa2:	3000      	movi      	r0, 0
11023fa4:	1d2f      	addi      	r5, r14, 188
11023fa6:	e0002a1d 	bsr      	0x110293e0	// 110293e0 <cpu_task_stack_init+0xa38>
    VIC->IPR[_IP_IDX(IRQn)] = ((uint32_t)(VIC->IPR[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
11023faa:	1141      	lrw      	r2, 0xe000e100	// 1102402c <SystemInit+0x15c>
11023fac:	3100      	movi      	r1, 0
11023fae:	d86220c0 	ld.w      	r3, (r2, 0x300)
11023fb2:	29ff      	subi      	r1, 256
11023fb4:	68c4      	and      	r3, r1
11023fb6:	ec6300c0 	ori      	r3, r3, 192
11023fba:	dc6220c0 	st.w      	r3, (r2, 0x300)
    csi_vic_set_prio(TSPEND_IRQn, 3);

    hal_cache_init();
11023fbe:	e00025cd 	bsr      	0x11028b58	// 11028b58 <cpu_task_stack_init+0x1b0>

    hal_mpu_config();
11023fc2:	e0002577 	bsr      	0x11028ab0	// 11028ab0 <cpu_task_stack_init+0x108>
    hal_wakeup_irq_config();
11023fc6:	e00027b5 	bsr      	0x11028f30	// 11028f30 <cpu_task_stack_init+0x588>
    ioinit_cfg_t ioInit[GPIO_NUM] = {
11023fca:	32b8      	movi      	r2, 184
11023fcc:	1124      	lrw      	r1, 0x1101100c	// 1102405c <SystemInit+0x18c>
11023fce:	1801      	addi      	r0, r14, 4
11023fd0:	e00027f8 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
        phy_gpio_pull_set(ioInit[i].pin, ioInit[i].type);
11023fd4:	9421      	ld.w      	r1, (r4, 0x4)
11023fd6:	9400      	ld.w      	r0, (r4, 0x0)
11023fd8:	2407      	addi      	r4, 8
11023fda:	e3fff7bf 	bsr      	0x11022f58	// 11022f58 <phy_gpio_pull_set>
    for (uint8_t i = 0; i < GPIO_NUM; i++) {
11023fde:	6552      	cmpne      	r4, r5
11023fe0:	0bfa      	bt      	0x11023fd4	// 11023fd4 <SystemInit+0x104>
    DCDC_REF_CLK_SETTING(1);
11023fe2:	1160      	lrw      	r3, 0x4000f000	// 11024060 <SystemInit+0x190>
11023fe4:	9345      	ld.w      	r2, (r3, 0x14)
11023fe6:	3ab9      	bseti      	r2, 25
11023fe8:	b345      	st.w      	r2, (r3, 0x14)
11023fea:	6c03      	mov      	r0, r0
    DCDC_CONFIG_SETTING(0x0a);
11023fec:	103e      	lrw      	r1, 0xfff87fff	// 11024064 <SystemInit+0x194>
11023fee:	9345      	ld.w      	r2, (r3, 0x14)
11023ff0:	6884      	and      	r2, r1
11023ff2:	3ab0      	bseti      	r2, 16
11023ff4:	3ab2      	bseti      	r2, 18
11023ff6:	b345      	st.w      	r2, (r3, 0x14)
11023ff8:	6c03      	mov      	r0, r0
    DIG_LDO_CURRENT_SETTING(0x01);
11023ffa:	9345      	ld.w      	r2, (r3, 0x14)
11023ffc:	3a95      	bclri      	r2, 21
11023ffe:	3a96      	bclri      	r2, 22
11024000:	3ab5      	bseti      	r2, 21
11024002:	b345      	st.w      	r2, (r3, 0x14)
11024004:	6c03      	mov      	r0, r0
    drv_pm_ram_retention(RET_SRAM0 | RET_SRAM1 | RET_SRAM2);
11024006:	3007      	movi      	r0, 7
11024008:	e0002884 	bsr      	0x11029110	// 11029110 <cpu_task_stack_init+0x768>
    hal_pwrmgr_RAM_retention_set();
1102400c:	e3fff85a 	bsr      	0x110230c0	// 110230c0 <hal_pwrmgr_RAM_retention_set>
    *(volatile uint32_t *)0x40000008 = 0x001961f1;  //
11024010:	1056      	lrw      	r2, 0x1961f1	// 11024068 <SystemInit+0x198>
11024012:	3380      	movi      	r3, 128
11024014:	4377      	lsli      	r3, r3, 23
11024016:	b342      	st.w      	r2, (r3, 0x8)
    *(volatile uint32_t *)0x40000014 = 0x01e00278;  //
11024018:	1055      	lrw      	r2, 0x1e00278	// 1102406c <SystemInit+0x19c>
1102401a:	b345      	st.w      	r2, (r3, 0x14)
    hal_rtc_clock_config(g_clk32K_config);
1102401c:	9860      	ld.w      	r3, (r14, 0x0)
1102401e:	8300      	ld.b      	r0, (r3, 0x0)
11024020:	7400      	zextb      	r0, r0
11024022:	e3fff6ef 	bsr      	0x11022e00	// 11022e00 <hal_rtc_clock_config>

    hal_init();
}
11024026:	150f      	addi      	r14, r14, 188
11024028:	1494      	pop      	r4-r7, r15
1102402a:	0000      	bkpt
1102402c:	e000e100 	.long	0xe000e100
11024030:	1fff08a8 	.long	0x1fff08a8
11024034:	1fffbacc 	.long	0x1fffbacc
11024038:	1fffa59c 	.long	0x1fffa59c
1102403c:	1fff0300 	.long	0x1fff0300
11024040:	11024070 	.long	0x11024070
11024044:	1101b90c 	.long	0x1101b90c
11024048:	1fff2000 	.long	0x1fff2000
1102404c:	1101b988 	.long	0x1101b988
11024050:	1fff3870 	.long	0x1fff3870
11024054:	1fff3768 	.long	0x1fff3768
11024058:	e000e010 	.long	0xe000e010
1102405c:	1101100c 	.long	0x1101100c
11024060:	4000f000 	.long	0x4000f000
11024064:	fff87fff 	.long	0xfff87fff
11024068:	001961f1 	.long	0x001961f1
1102406c:	01e00278 	.long	0x01e00278

11024070 <trap_c>:
#include <csi_core.h>

void (*trap_c_callback)(void);

void trap_c(uint32_t *regs)
{
11024070:	14d4      	push      	r4-r7, r15
11024072:	1421      	subi      	r14, r14, 4
11024074:	6d43      	mov      	r5, r0
    __ASM volatile("mfcr %0, psr" : "=r"(result));
11024076:	c0006021 	mfcr      	r1, cr<0, 0>
    int i;
    uint32_t vec = (__get_PSR() & PSR_VEC_Msk) >> PSR_VEC_Pos;
1102407a:	4930      	lsri      	r1, r1, 16
1102407c:	e421207f 	andi      	r1, r1, 127

    printf("CPU Exception: NO.%u\n", vec);
11024080:	1015      	lrw      	r0, 0x110117ec	// 110240d4 <trap_c+0x64>
11024082:	6d97      	mov      	r6, r5
11024084:	e3ffc61a 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>

    for (i = 0; i < 16; i++) {
        printf("r%d: %08x\t", i, regs[i]);
11024088:	1074      	lrw      	r3, 0x11011802	// 110240d8 <trap_c+0x68>
    for (i = 0; i < 16; i++) {
1102408a:	3400      	movi      	r4, 0
        printf("r%d: %08x\t", i, regs[i]);
1102408c:	b860      	st.w      	r3, (r14, 0x0)

        if ((i % 4) == 3) {
            printf("\n");
1102408e:	10f4      	lrw      	r7, 0x1101150b	// 110240dc <trap_c+0x6c>
        printf("r%d: %08x\t", i, regs[i]);
11024090:	9640      	ld.w      	r2, (r6, 0x0)
11024092:	6c53      	mov      	r1, r4
11024094:	9800      	ld.w      	r0, (r14, 0x0)
11024096:	e3ffc611 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
        if ((i % 4) == 3) {
1102409a:	e4442003 	andi      	r2, r4, 3
1102409e:	3a43      	cmpnei      	r2, 3
110240a0:	0804      	bt      	0x110240a8	// 110240a8 <trap_c+0x38>
            printf("\n");
110240a2:	6c1f      	mov      	r0, r7
110240a4:	e3ffc60a 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
    for (i = 0; i < 16; i++) {
110240a8:	2400      	addi      	r4, 1
110240aa:	3c50      	cmpnei      	r4, 16
110240ac:	2603      	addi      	r6, 4
110240ae:	0bf1      	bt      	0x11024090	// 11024090 <trap_c+0x20>
        }
    }

    printf("\n");
110240b0:	100b      	lrw      	r0, 0x1101150b	// 110240dc <trap_c+0x6c>
110240b2:	e3ffc603 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
    printf("epsr: %8x\n", regs[16]);
110240b6:	9530      	ld.w      	r1, (r5, 0x40)
110240b8:	100a      	lrw      	r0, 0x1101180d	// 110240e0 <trap_c+0x70>
110240ba:	e3ffc5ff 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
    printf("epc : %8x\n", regs[17]);
110240be:	9531      	ld.w      	r1, (r5, 0x44)
110240c0:	1009      	lrw      	r0, 0x11011818	// 110240e4 <trap_c+0x74>
110240c2:	e3ffc5fb 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>

    if (trap_c_callback) {
110240c6:	1069      	lrw      	r3, 0x1fffcef8	// 110240e8 <trap_c+0x78>
110240c8:	9360      	ld.w      	r3, (r3, 0x0)
110240ca:	3b40      	cmpnei      	r3, 0
110240cc:	0c02      	bf      	0x110240d0	// 110240d0 <trap_c+0x60>
        trap_c_callback();
110240ce:	7bcd      	jsr      	r3
110240d0:	0400      	br      	0x110240d0	// 110240d0 <trap_c+0x60>
110240d2:	0000      	bkpt
110240d4:	110117ec 	.long	0x110117ec
110240d8:	11011802 	.long	0x11011802
110240dc:	1101150b 	.long	0x1101150b
110240e0:	1101180d 	.long	0x1101180d
110240e4:	11011818 	.long	0x11011818
110240e8:	1fffcef8 	.long	0x1fffcef8

110240ec <dut_cmd_tx_single_tone>:
    ret = dut_service_cmds_reg(ble_dut_commands, sizeof(ble_dut_commands) / sizeof(dut_at_cmd_t));
    return ret;
}

int  dut_cmd_tx_single_tone(dut_cmd_type_e type, int argc, char *argv[])
{
110240ec:	14d4      	push      	r4-r7, r15
110240ee:	6d0b      	mov      	r4, r2
    uint8_t txpower;
    uint8_t rf_chn_idx;
    uint32_t xtalcap;
    int ret = -1;

    if (argc != 5 || type != DUT_CMD_EXECUTE) {
110240f0:	3945      	cmpnei      	r1, 5
110240f2:	0819      	bt      	0x11024124	// 11024124 <dut_cmd_tx_single_tone+0x38>
110240f4:	3841      	cmpnei      	r0, 1
110240f6:	0817      	bt      	0x11024124	// 11024124 <dut_cmd_tx_single_tone+0x38>
        return -1;
    }

    phy_fmt = (uint8_t)(atoi(argv[1]));
110240f8:	9201      	ld.w      	r0, (r2, 0x4)
110240fa:	e3ffc717 	bsr      	0x1101cf28	// 1101cf28 <atoi>
110240fe:	6d43      	mov      	r5, r0
    rf_chn_idx = (uint8_t)(atoi(argv[2]));
11024100:	9402      	ld.w      	r0, (r4, 0x8)
11024102:	e3ffc713 	bsr      	0x1101cf28	// 1101cf28 <atoi>
11024106:	6d83      	mov      	r6, r0
    xtalcap = (uint8_t)(atoi(argv[3]));
11024108:	9403      	ld.w      	r0, (r4, 0xc)
1102410a:	e3ffc70f 	bsr      	0x1101cf28	// 1101cf28 <atoi>
1102410e:	6dc3      	mov      	r7, r0
    txpower = (uint8_t)(atoi(argv[4]));
11024110:	9404      	ld.w      	r0, (r4, 0x10)
11024112:	e3ffc70b 	bsr      	0x1101cf28	// 1101cf28 <atoi>

    ret = dut_hal_ble_tx_single_tone(phy_fmt, rf_chn_idx, xtalcap, txpower);
11024116:	74c0      	zextb      	r3, r0
    xtalcap = (uint8_t)(atoi(argv[3]));
11024118:	749c      	zextb      	r2, r7
    ret = dut_hal_ble_tx_single_tone(phy_fmt, rf_chn_idx, xtalcap, txpower);
1102411a:	7458      	zextb      	r1, r6
1102411c:	7414      	zextb      	r0, r5
1102411e:	e00002a7 	bsr      	0x1102466c	// 1102466c <dut_hal_ble_tx_single_tone>

    return ret;
}
11024122:	1494      	pop      	r4-r7, r15
        return -1;
11024124:	3000      	movi      	r0, 0
11024126:	2800      	subi      	r0, 1
11024128:	07fd      	br      	0x11024122	// 11024122 <dut_cmd_tx_single_tone+0x36>

1102412a <dut_cmd_tx_mod_burst>:

int  dut_cmd_tx_mod_burst(dut_cmd_type_e type, int argc, char *argv[])
{
1102412a:	14d4      	push      	r4-r7, r15
1102412c:	1422      	subi      	r14, r14, 8
1102412e:	6d0b      	mov      	r4, r2
    uint8_t rf_chn_idx;
    uint32_t xtalcap;
    uint8_t pkt_type;
    int ret = -1;

    if (argc != 6 || type != DUT_CMD_EXECUTE) {
11024130:	3946      	cmpnei      	r1, 6
11024132:	0822      	bt      	0x11024176	// 11024176 <dut_cmd_tx_mod_burst+0x4c>
11024134:	3841      	cmpnei      	r0, 1
11024136:	0820      	bt      	0x11024176	// 11024176 <dut_cmd_tx_mod_burst+0x4c>
        return -1;
    }

    phy_fmt = (uint8_t)(atoi(argv[1]));
11024138:	9201      	ld.w      	r0, (r2, 0x4)
1102413a:	e3ffc6f7 	bsr      	0x1101cf28	// 1101cf28 <atoi>
1102413e:	6d43      	mov      	r5, r0
    rf_chn_idx = (uint8_t)(atoi(argv[2]));
11024140:	9402      	ld.w      	r0, (r4, 0x8)
    xtalcap = (uint8_t)(atoi(argv[3]));
    txpower = (uint8_t)(atoi(argv[4]));
    pkt_type = (uint8_t)(atoi(argv[5]));

    ret = dut_hal_ble_tx_mod_burst(phy_fmt, rf_chn_idx, xtalcap, txpower, pkt_type);
11024142:	7554      	zextb      	r5, r5
    rf_chn_idx = (uint8_t)(atoi(argv[2]));
11024144:	e3ffc6f2 	bsr      	0x1101cf28	// 1101cf28 <atoi>
11024148:	6d83      	mov      	r6, r0
    xtalcap = (uint8_t)(atoi(argv[3]));
1102414a:	9403      	ld.w      	r0, (r4, 0xc)
1102414c:	e3ffc6ee 	bsr      	0x1101cf28	// 1101cf28 <atoi>
11024150:	6dc3      	mov      	r7, r0
    txpower = (uint8_t)(atoi(argv[4]));
11024152:	9404      	ld.w      	r0, (r4, 0x10)
11024154:	e3ffc6ea 	bsr      	0x1101cf28	// 1101cf28 <atoi>
11024158:	b801      	st.w      	r0, (r14, 0x4)
    pkt_type = (uint8_t)(atoi(argv[5]));
1102415a:	9405      	ld.w      	r0, (r4, 0x14)
1102415c:	e3ffc6e6 	bsr      	0x1101cf28	// 1101cf28 <atoi>
    ret = dut_hal_ble_tx_mod_burst(phy_fmt, rf_chn_idx, xtalcap, txpower, pkt_type);
11024160:	7400      	zextb      	r0, r0
11024162:	9861      	ld.w      	r3, (r14, 0x4)
11024164:	b800      	st.w      	r0, (r14, 0x0)
11024166:	74cc      	zextb      	r3, r3
    xtalcap = (uint8_t)(atoi(argv[3]));
11024168:	749c      	zextb      	r2, r7
    ret = dut_hal_ble_tx_mod_burst(phy_fmt, rf_chn_idx, xtalcap, txpower, pkt_type);
1102416a:	7458      	zextb      	r1, r6
1102416c:	6c17      	mov      	r0, r5
1102416e:	e00002a3 	bsr      	0x110246b4	// 110246b4 <dut_hal_ble_tx_mod_burst>

    return ret;
}
11024172:	1402      	addi      	r14, r14, 8
11024174:	1494      	pop      	r4-r7, r15
        return -1;
11024176:	3000      	movi      	r0, 0
11024178:	2800      	subi      	r0, 1
1102417a:	07fc      	br      	0x11024172	// 11024172 <dut_cmd_tx_mod_burst+0x48>

1102417c <dut_cmd_rx_demod_burst>:

int  dut_cmd_rx_demod_burst(dut_cmd_type_e type, int argc, char *argv[])
{
1102417c:	14d3      	push      	r4-r6, r15
1102417e:	1425      	subi      	r14, r14, 20
    uint8_t phy_fmt;
    uint8_t rf_chn_idx;
    uint32_t xtalcap;
    int16_t rx_freq_off = 0;
11024180:	3300      	movi      	r3, 0
    uint8_t rx_rssi = 0;
    uint8_t rx_carr_sens = 0;
    uint16_t rx_pkt_num = 0;
    int ret = -1;

    if (argc != 4 || type != DUT_CMD_EXECUTE) {
11024182:	3944      	cmpnei      	r1, 4
    int16_t rx_freq_off = 0;
11024184:	dc6e1008 	st.h      	r3, (r14, 0x10)
    uint8_t rx_rssi = 0;
11024188:	dc6e000e 	st.b      	r3, (r14, 0xe)
    uint8_t rx_carr_sens = 0;
1102418c:	dc6e000f 	st.b      	r3, (r14, 0xf)
    uint16_t rx_pkt_num = 0;
11024190:	3300      	movi      	r3, 0
{
11024192:	6d8b      	mov      	r6, r2
    uint16_t rx_pkt_num = 0;
11024194:	dc6e1009 	st.h      	r3, (r14, 0x12)
    if (argc != 4 || type != DUT_CMD_EXECUTE) {
11024198:	082f      	bt      	0x110241f6	// 110241f6 <dut_cmd_rx_demod_burst+0x7a>
1102419a:	3841      	cmpnei      	r0, 1
1102419c:	082d      	bt      	0x110241f6	// 110241f6 <dut_cmd_rx_demod_burst+0x7a>
        return -1;
    }

    phy_fmt = (uint8_t)(atoi(argv[1]));
1102419e:	9201      	ld.w      	r0, (r2, 0x4)
110241a0:	e3ffc6c4 	bsr      	0x1101cf28	// 1101cf28 <atoi>
110241a4:	6d03      	mov      	r4, r0
    rf_chn_idx = (uint8_t)(atoi(argv[2]));
110241a6:	9602      	ld.w      	r0, (r6, 0x8)
110241a8:	e3ffc6c0 	bsr      	0x1101cf28	// 1101cf28 <atoi>
110241ac:	6d43      	mov      	r5, r0
    xtalcap = (uint8_t)(atoi(argv[3]));
110241ae:	9603      	ld.w      	r0, (r6, 0xc)
110241b0:	e3ffc6bc 	bsr      	0x1101cf28	// 1101cf28 <atoi>
110241b4:	7480      	zextb      	r2, r0

    ret = dut_hal_ble_rx_demod_burst(phy_fmt, rf_chn_idx, xtalcap, &rx_freq_off, &rx_rssi, &rx_carr_sens, &rx_pkt_num);
110241b6:	e46e0011 	addi      	r3, r14, 18
110241ba:	7410      	zextb      	r0, r4
110241bc:	b862      	st.w      	r3, (r14, 0x8)
110241be:	7454      	zextb      	r1, r5
110241c0:	e46e000e 	addi      	r3, r14, 15
110241c4:	b861      	st.w      	r3, (r14, 0x4)
110241c6:	e46e000d 	addi      	r3, r14, 14
110241ca:	b860      	st.w      	r3, (r14, 0x0)
110241cc:	1b04      	addi      	r3, r14, 16
110241ce:	e000029f 	bsr      	0x1102470c	// 1102470c <dut_hal_ble_rx_demod_burst>
110241d2:	6d03      	mov      	r4, r0

    if (ret == 0) {
110241d4:	3840      	cmpnei      	r0, 0
110241d6:	080d      	bt      	0x110241f0	// 110241f0 <dut_cmd_rx_demod_burst+0x74>
        dut_at_send("+RXDEMODBURST=%d,-%d,%d,%d", rx_freq_off, rx_rssi, rx_carr_sens, rx_pkt_num);
110241d8:	d80e1009 	ld.h      	r0, (r14, 0x12)
110241dc:	d86e000f 	ld.b      	r3, (r14, 0xf)
110241e0:	b800      	st.w      	r0, (r14, 0x0)
110241e2:	d84e000e 	ld.b      	r2, (r14, 0xe)
110241e6:	d82e5008 	ld.hs      	r1, (r14, 0x10)
110241ea:	1005      	lrw      	r0, 0x110118d6	// 110241fc <dut_cmd_rx_demod_burst+0x80>
110241ec:	e0000338 	bsr      	0x1102485c	// 1102485c <dut_at_send>
    }

    return ret;
}
110241f0:	6c13      	mov      	r0, r4
110241f2:	1405      	addi      	r14, r14, 20
110241f4:	1493      	pop      	r4-r6, r15
        return -1;
110241f6:	3400      	movi      	r4, 0
110241f8:	2c00      	subi      	r4, 1
110241fa:	07fb      	br      	0x110241f0	// 110241f0 <dut_cmd_rx_demod_burst+0x74>
110241fc:	110118d6 	.long	0x110118d6

11024200 <dut_cmd_opt_mac>:

int  dut_cmd_opt_mac(dut_cmd_type_e type, int argc, char *argv[])
{
11024200:	14d0      	push      	r15
11024202:	1425      	subi      	r14, r14, 20
    int ret;
    uint8_t addr[6] = {0};
11024204:	3300      	movi      	r3, 0

    if (type == DUT_CMD_EXECUTE) {
11024206:	3841      	cmpnei      	r0, 1
    uint8_t addr[6] = {0};
11024208:	b863      	st.w      	r3, (r14, 0xc)
1102420a:	dc6e1008 	st.h      	r3, (r14, 0x10)
    if (type == DUT_CMD_EXECUTE) {
1102420e:	0812      	bt      	0x11024232	// 11024232 <dut_cmd_opt_mac+0x32>

        if (argc != 2) {
11024210:	3942      	cmpnei      	r1, 2
11024212:	082b      	bt      	0x11024268	// 11024268 <dut_cmd_opt_mac+0x68>
            return -1;
        }

        ret = str2_char(argv[1], addr);
11024214:	9201      	ld.w      	r0, (r2, 0x4)
11024216:	1903      	addi      	r1, r14, 12
11024218:	e000054a 	bsr      	0x11024cac	// 11024cac <str2_char>
        if (ret < 0) {
1102421c:	38df      	btsti      	r0, 31
1102421e:	0808      	bt      	0x1102422e	// 1102422e <dut_cmd_opt_mac+0x2e>
            return ret;
        }

        ret = dut_hal_mac_store(addr);
11024220:	1803      	addi      	r0, r14, 12
11024222:	e00001a7 	bsr      	0x11024570	// 11024570 <dut_hal_mac_store>
11024226:	3300      	movi      	r3, 0
11024228:	3820      	cmplti      	r0, 1
1102422a:	c4030c20 	incf      	r0, r3, 0

        dut_at_send("+MAC:%02x:%02x:%02x:%02x:%02x:%02x", addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);
    }

    return OK;
}
1102422e:	1405      	addi      	r14, r14, 20
11024230:	1490      	pop      	r15
        if (argc != 1) {
11024232:	3941      	cmpnei      	r1, 1
11024234:	081a      	bt      	0x11024268	// 11024268 <dut_cmd_opt_mac+0x68>
        ret = dut_hal_mac_get(addr);
11024236:	1803      	addi      	r0, r14, 12
11024238:	e000017a 	bsr      	0x1102452c	// 1102452c <dut_hal_mac_get>
        if (ret < 0) {
1102423c:	38df      	btsti      	r0, 31
1102423e:	0bf8      	bt      	0x1102422e	// 1102422e <dut_cmd_opt_mac+0x2e>
        dut_at_send("+MAC:%02x:%02x:%02x:%02x:%02x:%02x", addr[0], addr[1], addr[2], addr[3], addr[4], addr[5]);
11024240:	d80e0011 	ld.b      	r0, (r14, 0x11)
11024244:	d86e000e 	ld.b      	r3, (r14, 0xe)
11024248:	b802      	st.w      	r0, (r14, 0x8)
1102424a:	d80e0010 	ld.b      	r0, (r14, 0x10)
1102424e:	d84e000d 	ld.b      	r2, (r14, 0xd)
11024252:	b801      	st.w      	r0, (r14, 0x4)
11024254:	d80e000f 	ld.b      	r0, (r14, 0xf)
11024258:	d82e000c 	ld.b      	r1, (r14, 0xc)
1102425c:	b800      	st.w      	r0, (r14, 0x0)
1102425e:	1005      	lrw      	r0, 0x110118a8	// 11024270 <dut_cmd_opt_mac+0x70>
11024260:	e00002fe 	bsr      	0x1102485c	// 1102485c <dut_at_send>
    return OK;
11024264:	3000      	movi      	r0, 0
11024266:	07e4      	br      	0x1102422e	// 1102422e <dut_cmd_opt_mac+0x2e>
            return -1;
11024268:	3000      	movi      	r0, 0
1102426a:	2800      	subi      	r0, 1
1102426c:	07e1      	br      	0x1102422e	// 1102422e <dut_cmd_opt_mac+0x2e>
1102426e:	0000      	bkpt
11024270:	110118a8 	.long	0x110118a8

11024274 <dut_cmd_xtal_cap>:
    while (1);
    return OK;
}

int  dut_cmd_xtal_cap(dut_cmd_type_e type, int argc, char *argv[])
{
11024274:	14d0      	push      	r15
11024276:	1421      	subi      	r14, r14, 4
    int ret;
    uint32_t xtalcap = 0;
11024278:	3300      	movi      	r3, 0

    if (type == DUT_CMD_EXECUTE) {
1102427a:	3841      	cmpnei      	r0, 1
    uint32_t xtalcap = 0;
1102427c:	b860      	st.w      	r3, (r14, 0x0)
    if (type == DUT_CMD_EXECUTE) {
1102427e:	080f      	bt      	0x1102429c	// 1102429c <dut_cmd_xtal_cap+0x28>
        if (argc != 2) {
11024280:	3942      	cmpnei      	r1, 2
11024282:	081a      	bt      	0x110242b6	// 110242b6 <dut_cmd_xtal_cap+0x42>
            return -1;
        }

        xtalcap = atoi(argv[1]);
11024284:	9201      	ld.w      	r0, (r2, 0x4)
11024286:	e3ffc651 	bsr      	0x1101cf28	// 1101cf28 <atoi>
1102428a:	b800      	st.w      	r0, (r14, 0x0)

        ret = dut_hal_xtalcap_store(xtalcap);
1102428c:	e00000d8 	bsr      	0x1102443c	// 1102443c <dut_hal_xtalcap_store>
11024290:	3300      	movi      	r3, 0
11024292:	3820      	cmplti      	r0, 1
11024294:	c4030c20 	incf      	r0, r3, 0
        }

        dut_at_send("+XTALCAP=%d", xtalcap);
    }
    return  OK;
}
11024298:	1401      	addi      	r14, r14, 4
1102429a:	1490      	pop      	r15
        if (argc != 1) {
1102429c:	3941      	cmpnei      	r1, 1
1102429e:	080c      	bt      	0x110242b6	// 110242b6 <dut_cmd_xtal_cap+0x42>
        ret = dut_hal_xtalcap_get(&xtalcap);
110242a0:	6c3b      	mov      	r0, r14
110242a2:	e00000cb 	bsr      	0x11024438	// 11024438 <dut_hal_xtalcap_get>
        if (ret < 0) {
110242a6:	38df      	btsti      	r0, 31
110242a8:	0bf8      	bt      	0x11024298	// 11024298 <dut_cmd_xtal_cap+0x24>
        dut_at_send("+XTALCAP=%d", xtalcap);
110242aa:	9820      	ld.w      	r1, (r14, 0x0)
110242ac:	1004      	lrw      	r0, 0x110118f1	// 110242bc <dut_cmd_xtal_cap+0x48>
110242ae:	e00002d7 	bsr      	0x1102485c	// 1102485c <dut_at_send>
    return  OK;
110242b2:	3000      	movi      	r0, 0
110242b4:	07f2      	br      	0x11024298	// 11024298 <dut_cmd_xtal_cap+0x24>
            return -1;
110242b6:	3000      	movi      	r0, 0
110242b8:	2800      	subi      	r0, 1
110242ba:	07ef      	br      	0x11024298	// 11024298 <dut_cmd_xtal_cap+0x24>
110242bc:	110118f1 	.long	0x110118f1

110242c0 <dut_cmd_freqoff>:


int  dut_cmd_freqoff(dut_cmd_type_e type, int argc, char *argv[])
{
110242c0:	14d1      	push      	r4, r15
110242c2:	1421      	subi      	r14, r14, 4
    int ret;
    int32_t freqoff = 0;
110242c4:	3300      	movi      	r3, 0

    if (type == DUT_CMD_EXECUTE) {
110242c6:	3841      	cmpnei      	r0, 1
{
110242c8:	6d0b      	mov      	r4, r2
    int32_t freqoff = 0;
110242ca:	b860      	st.w      	r3, (r14, 0x0)
    if (type == DUT_CMD_EXECUTE) {
110242cc:	081f      	bt      	0x1102430a	// 1102430a <dut_cmd_freqoff+0x4a>
        if (argc != 2) {
110242ce:	3942      	cmpnei      	r1, 2
110242d0:	0c05      	bf      	0x110242da	// 110242da <dut_cmd_freqoff+0x1a>
            return -1;
110242d2:	3000      	movi      	r0, 0
110242d4:	2800      	subi      	r0, 1
        }

        dut_at_send("+FREQOFF=%d", freqoff);
    }
    return  OK;
}
110242d6:	1401      	addi      	r14, r14, 4
110242d8:	1491      	pop      	r4, r15
        if ((strlen(argv[1]) > 4) && (int_num_check(argv[1]) == -1)) {
110242da:	9201      	ld.w      	r0, (r2, 0x4)
110242dc:	e3ffc6ec 	bsr      	0x1101d0b4	// 1101d0b4 <__strlen_fast>
110242e0:	3804      	cmphsi      	r0, 5
110242e2:	080c      	bt      	0x110242fa	// 110242fa <dut_cmd_freqoff+0x3a>
        freqoff = atoi(argv[1]);
110242e4:	9401      	ld.w      	r0, (r4, 0x4)
110242e6:	e3ffc621 	bsr      	0x1101cf28	// 1101cf28 <atoi>
110242ea:	b800      	st.w      	r0, (r14, 0x0)
        ret = dut_hal_freqoff_store(freqoff);
110242ec:	e000018a 	bsr      	0x11024600	// 11024600 <dut_hal_freqoff_store>
110242f0:	3300      	movi      	r3, 0
110242f2:	3820      	cmplti      	r0, 1
110242f4:	c4030c20 	incf      	r0, r3, 0
110242f8:	07ef      	br      	0x110242d6	// 110242d6 <dut_cmd_freqoff+0x16>
        if ((strlen(argv[1]) > 4) && (int_num_check(argv[1]) == -1)) {
110242fa:	9401      	ld.w      	r0, (r4, 0x4)
110242fc:	e000050d 	bsr      	0x11024d16	// 11024d16 <int_num_check>
11024300:	3300      	movi      	r3, 0
11024302:	2b00      	subi      	r3, 1
11024304:	64c2      	cmpne      	r0, r3
11024306:	0bef      	bt      	0x110242e4	// 110242e4 <dut_cmd_freqoff+0x24>
11024308:	07e5      	br      	0x110242d2	// 110242d2 <dut_cmd_freqoff+0x12>
        if (argc != 1) {
1102430a:	3941      	cmpnei      	r1, 1
1102430c:	0be3      	bt      	0x110242d2	// 110242d2 <dut_cmd_freqoff+0x12>
        ret = dut_hal_freqoff_get(&freqoff);
1102430e:	6c3b      	mov      	r0, r14
11024310:	e000015e 	bsr      	0x110245cc	// 110245cc <dut_hal_freqoff_get>
        if (ret < 0) {
11024314:	38df      	btsti      	r0, 31
11024316:	0be0      	bt      	0x110242d6	// 110242d6 <dut_cmd_freqoff+0x16>
        dut_at_send("+FREQOFF=%d", freqoff);
11024318:	9820      	ld.w      	r1, (r14, 0x0)
1102431a:	1003      	lrw      	r0, 0x1101189c	// 11024324 <dut_cmd_freqoff+0x64>
1102431c:	e00002a0 	bsr      	0x1102485c	// 1102485c <dut_at_send>
    return  OK;
11024320:	3000      	movi      	r0, 0
11024322:	07da      	br      	0x110242d6	// 110242d6 <dut_cmd_freqoff+0x16>
11024324:	1101189c 	.long	0x1101189c

11024328 <dut_cmd_transmit_stop>:

int dut_cmd_transmit_stop(dut_cmd_type_e type, int argc, char *argv[])
{
11024328:	14d0      	push      	r15
    int ret;

    ret = dut_hal_ble_transmit_stop();
1102432a:	e000020f 	bsr      	0x11024748	// 11024748 <dut_hal_ble_transmit_stop>
    return ret;
}
1102432e:	1490      	pop      	r15

11024330 <dut_cmd_rx_current_test>:


int dut_cmd_rx_current_test(dut_cmd_type_e type, int argc, char *argv[])
{
11024330:	14d1      	push      	r4, r15
    int ret;
    uint32_t sleep_time = 0;

    if (argc > 2 || type != DUT_CMD_EXECUTE) {
11024332:	3922      	cmplti      	r1, 3
11024334:	0c12      	bf      	0x11024358	// 11024358 <dut_cmd_rx_current_test+0x28>
11024336:	3841      	cmpnei      	r0, 1
11024338:	0810      	bt      	0x11024358	// 11024358 <dut_cmd_rx_current_test+0x28>
        return -1;
    }

    sleep_time = atoi(argv[1]);
1102433a:	9201      	ld.w      	r0, (r2, 0x4)
1102433c:	e3ffc5f6 	bsr      	0x1101cf28	// 1101cf28 <atoi>
11024340:	6d03      	mov      	r4, r0

    if (sleep_time < 0) {
        return -1;
    }

    dut_at_send("START OK\r\n");
11024342:	1008      	lrw      	r0, 0x110118cb	// 11024360 <dut_cmd_rx_current_test+0x30>
11024344:	e000028c 	bsr      	0x1102485c	// 1102485c <dut_at_send>

    ret = dut_hal_rx_current_test(sleep_time);
11024348:	6c13      	mov      	r0, r4
1102434a:	e0000205 	bsr      	0x11024754	// 11024754 <dut_hal_rx_current_test>
1102434e:	3300      	movi      	r3, 0
11024350:	3820      	cmplti      	r0, 1
11024352:	c4030c20 	incf      	r0, r3, 0
    if (ret < 0) {
        return ret;
    }

    return  OK;
}
11024356:	1491      	pop      	r4, r15
        return -1;
11024358:	3000      	movi      	r0, 0
1102435a:	2800      	subi      	r0, 1
1102435c:	07fd      	br      	0x11024356	// 11024356 <dut_cmd_rx_current_test+0x26>
1102435e:	0000      	bkpt
11024360:	110118cb 	.long	0x110118cb

11024364 <dut_cmd_gpio_test>:


int  dut_cmd_gpio_test(dut_cmd_type_e type, int argc, char *argv[])
{
11024364:	14d4      	push      	r4-r7, r15
11024366:	1422      	subi      	r14, r14, 8
11024368:	6d0b      	mov      	r4, r2
    int mode, i;
    int gpio_num = 0;
    uint8_t gpio_level = 0;
    uint8_t data;

    if (argc < 4) {
1102436a:	3923      	cmplti      	r1, 4
1102436c:	0c05      	bf      	0x11024376	// 11024376 <dut_cmd_gpio_test+0x12>
        return -1;
1102436e:	3000      	movi      	r0, 0
11024370:	2800      	subi      	r0, 1
        }
    }else{
        return -1;
    }
    return OK;
}
11024372:	1402      	addi      	r14, r14, 8
11024374:	1494      	pop      	r4-r7, r15
    mode = atoi(argv[1]);
11024376:	9201      	ld.w      	r0, (r2, 0x4)
11024378:	b820      	st.w      	r1, (r14, 0x0)
1102437a:	e3ffc5d7 	bsr      	0x1101cf28	// 1101cf28 <atoi>
1102437e:	6dc3      	mov      	r7, r0
    gpio_level = atoi(argv[2]);
11024380:	9402      	ld.w      	r0, (r4, 0x8)
11024382:	e3ffc5d3 	bsr      	0x1101cf28	// 1101cf28 <atoi>
11024386:	6d43      	mov      	r5, r0
    gpio_num = atoi(argv[3]);
11024388:	9403      	ld.w      	r0, (r4, 0xc)
1102438a:	e3ffc5cf 	bsr      	0x1101cf28	// 1101cf28 <atoi>
    if (mode > READ_MODE || (gpio_num + 4) != argc) {
1102438e:	3f22      	cmplti      	r7, 3
    gpio_num = atoi(argv[3]);
11024390:	6d83      	mov      	r6, r0
    if (mode > READ_MODE || (gpio_num + 4) != argc) {
11024392:	0fee      	bf      	0x1102436e	// 1102436e <dut_cmd_gpio_test+0xa>
11024394:	9820      	ld.w      	r1, (r14, 0x0)
11024396:	586e      	addi      	r3, r0, 4
11024398:	64c6      	cmpne      	r1, r3
1102439a:	0bea      	bt      	0x1102436e	// 1102436e <dut_cmd_gpio_test+0xa>
    if(WRITE_MODE == mode){
1102439c:	3f41      	cmpnei      	r7, 1
1102439e:	0813      	bt      	0x110243c4	// 110243c4 <dut_cmd_gpio_test+0x60>
110243a0:	3700      	movi      	r7, 0
            ret = dut_hal_test_gpio_write(atoi(argv[4 + i]), gpio_level);
110243a2:	7554      	zextb      	r5, r5
110243a4:	240f      	addi      	r4, 16
        for (i = 0; i < gpio_num; i++) {
110243a6:	659d      	cmplt      	r7, r6
110243a8:	0803      	bt      	0x110243ae	// 110243ae <dut_cmd_gpio_test+0x4a>
        return OK;
110243aa:	3000      	movi      	r0, 0
110243ac:	07e3      	br      	0x11024372	// 11024372 <dut_cmd_gpio_test+0xe>
            ret = dut_hal_test_gpio_write(atoi(argv[4 + i]), gpio_level);
110243ae:	9400      	ld.w      	r0, (r4, 0x0)
110243b0:	2403      	addi      	r4, 4
110243b2:	e3ffc5bb 	bsr      	0x1101cf28	// 1101cf28 <atoi>
110243b6:	6c57      	mov      	r1, r5
110243b8:	e00001ec 	bsr      	0x11024790	// 11024790 <dut_hal_test_gpio_write>
            if (ret) {
110243bc:	3840      	cmpnei      	r0, 0
110243be:	0bda      	bt      	0x11024372	// 11024372 <dut_cmd_gpio_test+0xe>
        for (i = 0; i < gpio_num; i++) {
110243c0:	2700      	addi      	r7, 1
110243c2:	07f2      	br      	0x110243a6	// 110243a6 <dut_cmd_gpio_test+0x42>
    }else if(READ_MODE == mode){
110243c4:	3f42      	cmpnei      	r7, 2
110243c6:	0bd4      	bt      	0x1102436e	// 1102436e <dut_cmd_gpio_test+0xa>
110243c8:	3700      	movi      	r7, 0
            if (data != gpio_level) {
110243ca:	7554      	zextb      	r5, r5
110243cc:	240f      	addi      	r4, 16
        for (i = 0; i < gpio_num; i++) {
110243ce:	659d      	cmplt      	r7, r6
110243d0:	0fed      	bf      	0x110243aa	// 110243aa <dut_cmd_gpio_test+0x46>
            ret = dut_hal_test_gpio_read(atoi(argv[4 + i]), &data);
110243d2:	9400      	ld.w      	r0, (r4, 0x0)
110243d4:	e3ffc5aa 	bsr      	0x1101cf28	// 1101cf28 <atoi>
110243d8:	e42e0006 	addi      	r1, r14, 7
110243dc:	e00001f8 	bsr      	0x110247cc	// 110247cc <dut_hal_test_gpio_read>
            if(ret){
110243e0:	3840      	cmpnei      	r0, 0
110243e2:	0bc8      	bt      	0x11024372	// 11024372 <dut_cmd_gpio_test+0xe>
            if (data != gpio_level) {
110243e4:	d86e0007 	ld.b      	r3, (r14, 0x7)
110243e8:	2403      	addi      	r4, 4
110243ea:	654e      	cmpne      	r3, r5
110243ec:	0803      	bt      	0x110243f2	// 110243f2 <dut_cmd_gpio_test+0x8e>
        for (i = 0; i < gpio_num; i++) {
110243ee:	2700      	addi      	r7, 1
110243f0:	07ef      	br      	0x110243ce	// 110243ce <dut_cmd_gpio_test+0x6a>
                return -2;
110243f2:	3000      	movi      	r0, 0
110243f4:	2801      	subi      	r0, 2
110243f6:	07be      	br      	0x11024372	// 11024372 <dut_cmd_gpio_test+0xe>

110243f8 <dut_cmd_sleep>:
{
110243f8:	14d1      	push      	r4, r15
    if (argc != 2 || type != DUT_CMD_EXECUTE) {
110243fa:	3942      	cmpnei      	r1, 2
110243fc:	0810      	bt      	0x1102441c	// 1102441c <dut_cmd_sleep+0x24>
110243fe:	3841      	cmpnei      	r0, 1
11024400:	080e      	bt      	0x1102441c	// 1102441c <dut_cmd_sleep+0x24>
    int sleepMode = atoi(argv[1]);
11024402:	9201      	ld.w      	r0, (r2, 0x4)
11024404:	e3ffc592 	bsr      	0x1101cf28	// 1101cf28 <atoi>
11024408:	6d03      	mov      	r4, r0
    dut_at_send("OK");
1102440a:	1007      	lrw      	r0, 0x11011a76	// 11024424 <dut_cmd_sleep+0x2c>
1102440c:	e0000228 	bsr      	0x1102485c	// 1102485c <dut_at_send>
    ret = dut_hal_sleep(sleepMode);
11024410:	7410      	zextb      	r0, r4
11024412:	e000006b 	bsr      	0x110244e8	// 110244e8 <dut_hal_sleep>
    if (ret != 0) {
11024416:	3840      	cmpnei      	r0, 0
11024418:	0802      	bt      	0x1102441c	// 1102441c <dut_cmd_sleep+0x24>
1102441a:	0400      	br      	0x1102441a	// 1102441a <dut_cmd_sleep+0x22>
}
1102441c:	3000      	movi      	r0, 0
1102441e:	2800      	subi      	r0, 1
11024420:	1491      	pop      	r4, r15
11024422:	0000      	bkpt
11024424:	11011a76 	.long	0x11011a76

11024428 <dut_ble_default_cmds_reg>:
{
11024428:	14d0      	push      	r15
    ret = dut_service_cmds_reg(ble_dut_commands, sizeof(ble_dut_commands) / sizeof(dut_at_cmd_t));
1102442a:	310a      	movi      	r1, 10
1102442c:	1002      	lrw      	r0, 0x11011824	// 11024434 <dut_ble_default_cmds_reg+0xc>
1102442e:	e000041b 	bsr      	0x11024c64	// 11024c64 <dut_service_cmds_reg>
}
11024432:	1490      	pop      	r15
11024434:	11011824 	.long	0x11011824

11024438 <dut_hal_xtalcap_get>:
11024438:	3000      	movi      	r0, 0
1102443a:	783c      	jmp      	r15

1102443c <dut_hal_xtalcap_store>:
}

int __attribute__((weak)) dut_hal_xtalcap_store(uint32_t xtalcap)
{
    return 0;
}
1102443c:	3000      	movi      	r0, 0
1102443e:	783c      	jmp      	r15

11024440 <nvram_read>:

    return 0;
}

static int nvram_read(uint32_t offset, const uint8_t *buffer, int length)
{
11024440:	14d4      	push      	r4-r7, r15
11024442:	6d43      	mov      	r5, r0
    int ret = -1;
    if (buffer == NULL || length <= 0) {
11024444:	3940      	cmpnei      	r1, 0
{
11024446:	6d87      	mov      	r6, r1
11024448:	6dcb      	mov      	r7, r2
    if (buffer == NULL || length <= 0) {
1102444a:	0804      	bt      	0x11024452	// 11024452 <nvram_read+0x12>
        return -1;
1102444c:	3000      	movi      	r0, 0
1102444e:	2800      	subi      	r0, 1
    if (ret <= 0) {
        return -1;
    }

    return 0;
}
11024450:	1494      	pop      	r4-r7, r15
    if (buffer == NULL || length <= 0) {
11024452:	3a20      	cmplti      	r2, 1
11024454:	0bfc      	bt      	0x1102444c	// 1102444c <nvram_read+0xc>
    if (g_flash_handle == NULL) {
11024456:	108d      	lrw      	r4, 0x1fffb744	// 11024488 <nvram_read+0x48>
11024458:	9460      	ld.w      	r3, (r4, 0x0)
1102445a:	3b40      	cmpnei      	r3, 0
1102445c:	0c0e      	bf      	0x11024478	// 11024478 <nvram_read+0x38>
    ret = csi_spiflash_read(g_flash_handle, CONFIG_FCDS_STARTADDR + offset, (void *)buffer, length);
1102445e:	6cdf      	mov      	r3, r7
11024460:	9400      	ld.w      	r0, (r4, 0x0)
11024462:	6c9b      	mov      	r2, r6
11024464:	102a      	lrw      	r1, 0x11004000	// 1102448c <nvram_read+0x4c>
11024466:	6054      	addu      	r1, r5
11024468:	e3fffbe8 	bsr      	0x11023c38	// 11023c38 <csi_spiflash_read>
    if (ret <= 0) {
1102446c:	3820      	cmplti      	r0, 1
1102446e:	c4000503 	mvc      	r3
11024472:	3000      	movi      	r0, 0
11024474:	600e      	subu      	r0, r3
11024476:	07ed      	br      	0x11024450	// 11024450 <nvram_read+0x10>
        g_flash_handle = csi_spiflash_initialize(0, NULL);
11024478:	3100      	movi      	r1, 0
1102447a:	3000      	movi      	r0, 0
1102447c:	e3fffba6 	bsr      	0x11023bc8	// 11023bc8 <csi_spiflash_initialize>
        if (g_flash_handle == NULL) {
11024480:	3840      	cmpnei      	r0, 0
        g_flash_handle = csi_spiflash_initialize(0, NULL);
11024482:	b400      	st.w      	r0, (r4, 0x0)
        if (g_flash_handle == NULL) {
11024484:	0bed      	bt      	0x1102445e	// 1102445e <nvram_read+0x1e>
11024486:	07e3      	br      	0x1102444c	// 1102444c <nvram_read+0xc>
11024488:	1fffb744 	.long	0x1fffb744
1102448c:	11004000 	.long	0x11004000

11024490 <nvram_write.constprop.0>:
static int nvram_write(const uint8_t *buffer, int length)
11024490:	14d2      	push      	r4-r5, r15
11024492:	6d43      	mov      	r5, r0
    if (buffer == NULL || length <= 0) {
11024494:	3840      	cmpnei      	r0, 0
11024496:	0804      	bt      	0x1102449e	// 1102449e <nvram_write.constprop.0+0xe>
        return -1;
11024498:	3000      	movi      	r0, 0
1102449a:	2800      	subi      	r0, 1
}
1102449c:	1492      	pop      	r4-r5, r15
    if (g_flash_handle == NULL) {
1102449e:	1091      	lrw      	r4, 0x1fffb744	// 110244e0 <nvram_write.constprop.0+0x50>
110244a0:	9460      	ld.w      	r3, (r4, 0x0)
110244a2:	3b40      	cmpnei      	r3, 0
110244a4:	0c15      	bf      	0x110244ce	// 110244ce <nvram_write.constprop.0+0x3e>
    ret = csi_spiflash_erase_sector(g_flash_handle, CONFIG_FCDS_STARTADDR);
110244a6:	1030      	lrw      	r1, 0x11004000	// 110244e4 <nvram_write.constprop.0+0x54>
110244a8:	9400      	ld.w      	r0, (r4, 0x0)
110244aa:	e3fffcb7 	bsr      	0x11023e18	// 11023e18 <csi_spiflash_erase_sector>
    if (ret < 0) {
110244ae:	38df      	btsti      	r0, 31
110244b0:	0bf4      	bt      	0x11024498	// 11024498 <nvram_write.constprop.0+0x8>
    ret = csi_spiflash_program(g_flash_handle, CONFIG_FCDS_STARTADDR, (void *)buffer, length);
110244b2:	3386      	movi      	r3, 134
110244b4:	4361      	lsli      	r3, r3, 1
110244b6:	9400      	ld.w      	r0, (r4, 0x0)
110244b8:	6c97      	mov      	r2, r5
110244ba:	102b      	lrw      	r1, 0x11004000	// 110244e4 <nvram_write.constprop.0+0x54>
110244bc:	e3fffc32 	bsr      	0x11023d20	// 11023d20 <csi_spiflash_program>
    if (ret != length) {
110244c0:	eb40010c 	cmpnei      	r0, 268
110244c4:	c4000503 	mvc      	r3
110244c8:	3000      	movi      	r0, 0
110244ca:	600e      	subu      	r0, r3
110244cc:	07e8      	br      	0x1102449c	// 1102449c <nvram_write.constprop.0+0xc>
        g_flash_handle = csi_spiflash_initialize(0, NULL);
110244ce:	3100      	movi      	r1, 0
110244d0:	3000      	movi      	r0, 0
110244d2:	e3fffb7b 	bsr      	0x11023bc8	// 11023bc8 <csi_spiflash_initialize>
        if (g_flash_handle == NULL) {
110244d6:	3840      	cmpnei      	r0, 0
        g_flash_handle = csi_spiflash_initialize(0, NULL);
110244d8:	b400      	st.w      	r0, (r4, 0x0)
        if (g_flash_handle == NULL) {
110244da:	0be6      	bt      	0x110244a6	// 110244a6 <nvram_write.constprop.0+0x16>
110244dc:	07de      	br      	0x11024498	// 11024498 <nvram_write.constprop.0+0x8>
110244de:	0000      	bkpt
110244e0:	1fffb744 	.long	0x1fffb744
110244e4:	11004000 	.long	0x11004000

110244e8 <dut_hal_sleep>:

    return 0;
}

int dut_hal_sleep(uint8_t mode)
{
110244e8:	14d1      	push      	r4, r15
110244ea:	108f      	lrw      	r4, 0x4000f000	// 11024524 <dut_hal_sleep+0x3c>
    if (mode == 0) {
110244ec:	3840      	cmpnei      	r0, 0
110244ee:	0812      	bt      	0x11024512	// 11024512 <dut_hal_sleep+0x2a>
        //Sleep
        drv_pm_sleep_enable();
110244f0:	e00025b0 	bsr      	0x11029050	// 11029050 <cpu_task_stack_init+0x6a8>

        subWriteReg(&(AP_AON->PMCTL2_0), 6, 6, 0x00); //disable software control
110244f4:	9467      	ld.w      	r3, (r4, 0x1c)
110244f6:	3b86      	bclri      	r3, 6
110244f8:	b467      	st.w      	r3, (r4, 0x1c)
110244fa:	6c03      	mov      	r0, r0

        ll_debug_output(0);
110244fc:	3000      	movi      	r0, 0
110244fe:	e000233f 	bsr      	0x11028b7c	// 11028b7c <cpu_task_stack_init+0x1d4>

        set_sleep_flag(1);
11024502:	3001      	movi      	r0, 1
11024504:	e00025d0 	bsr      	0x110290a4	// 110290a4 <cpu_task_stack_init+0x6fc>
        enter_sleep_off_mode(SYSTEM_SLEEP_MODE);
11024508:	3001      	movi      	r0, 1
    } else {
        //Standby
        *((unsigned int *)0x4000f0c0) = 0x2;
        subWriteReg(0x4000f01c, 6, 6, 0x00); //disable software control
        enter_sleep_off_mode(SYSTEM_OFF_MODE);
1102450a:	e0002333 	bsr      	0x11028b70	// 11028b70 <cpu_task_stack_init+0x1c8>
    }

    return 0;
}
1102450e:	3000      	movi      	r0, 0
11024510:	1491      	pop      	r4, r15
        *((unsigned int *)0x4000f0c0) = 0x2;
11024512:	1066      	lrw      	r3, 0x4000f080	// 11024528 <dut_hal_sleep+0x40>
11024514:	3202      	movi      	r2, 2
11024516:	b350      	st.w      	r2, (r3, 0x40)
        subWriteReg(0x4000f01c, 6, 6, 0x00); //disable software control
11024518:	9467      	ld.w      	r3, (r4, 0x1c)
1102451a:	3b86      	bclri      	r3, 6
1102451c:	b467      	st.w      	r3, (r4, 0x1c)
1102451e:	6c03      	mov      	r0, r0
        enter_sleep_off_mode(SYSTEM_OFF_MODE);
11024520:	3002      	movi      	r0, 2
11024522:	07f4      	br      	0x1102450a	// 1102450a <dut_hal_sleep+0x22>
11024524:	4000f000 	.long	0x4000f000
11024528:	4000f080 	.long	0x4000f080

1102452c <dut_hal_mac_get>:

int dut_hal_mac_get(uint8_t addr[6])
{
1102452c:	14d1      	push      	r4, r15
1102452e:	1422      	subi      	r14, r14, 8
11024530:	6d03      	mov      	r4, r0
    uint8_t temp_addr[6];
    int ret = -1;
    int real_off = 0;

    ret = nvram_read(real_off, temp_addr, sizeof(temp_addr));
11024532:	3206      	movi      	r2, 6
11024534:	6c7b      	mov      	r1, r14
11024536:	3000      	movi      	r0, 0
11024538:	e3ffff84 	bsr      	0x11024440	// 11024440 <nvram_read>
    if (ret < 0) {
1102453c:	38df      	btsti      	r0, 31
1102453e:	0816      	bt      	0x1102456a	// 1102456a <dut_hal_mac_get+0x3e>
        return -1;
    }

    addr[2] = temp_addr[0];
11024540:	d86e0000 	ld.b      	r3, (r14, 0x0)
    addr[4] = temp_addr[2];
    addr[5] = temp_addr[3];
    addr[0] = temp_addr[4];
    addr[1] = temp_addr[5];

    return 0;
11024544:	3000      	movi      	r0, 0
    addr[2] = temp_addr[0];
11024546:	a462      	st.b      	r3, (r4, 0x2)
    addr[3] = temp_addr[1];
11024548:	d86e0001 	ld.b      	r3, (r14, 0x1)
1102454c:	a463      	st.b      	r3, (r4, 0x3)
    addr[4] = temp_addr[2];
1102454e:	d86e0002 	ld.b      	r3, (r14, 0x2)
11024552:	a464      	st.b      	r3, (r4, 0x4)
    addr[5] = temp_addr[3];
11024554:	d86e0003 	ld.b      	r3, (r14, 0x3)
11024558:	a465      	st.b      	r3, (r4, 0x5)
    addr[0] = temp_addr[4];
1102455a:	d86e0004 	ld.b      	r3, (r14, 0x4)
1102455e:	a460      	st.b      	r3, (r4, 0x0)
    addr[1] = temp_addr[5];
11024560:	d86e0005 	ld.b      	r3, (r14, 0x5)
11024564:	a461      	st.b      	r3, (r4, 0x1)
}
11024566:	1402      	addi      	r14, r14, 8
11024568:	1491      	pop      	r4, r15
        return -1;
1102456a:	3000      	movi      	r0, 0
1102456c:	2800      	subi      	r0, 1
1102456e:	07fc      	br      	0x11024566	// 11024566 <dut_hal_mac_get+0x3a>

11024570 <dut_hal_mac_store>:

int dut_hal_mac_store(uint8_t addr[6])
{
11024570:	14d2      	push      	r4-r5, r15
11024572:	6d43      	mov      	r5, r0
    dut_factory_data_t *dut_factory_data = NULL;
    int ret = -1;
    int real_off = 0;

    dut_factory_data = (dut_factory_data_t *)aos_malloc(sizeof(dut_factory_data_t));
11024574:	3086      	movi      	r0, 134
11024576:	4001      	lsli      	r0, r0, 1
11024578:	e3ffea4c 	bsr      	0x11021a10	// 11021a10 <aos_malloc>
1102457c:	6d03      	mov      	r4, r0
    if (dut_factory_data == NULL) {
1102457e:	3840      	cmpnei      	r0, 0
11024580:	0c0c      	bf      	0x11024598	// 11024598 <dut_hal_mac_store+0x28>
        return -1;
    }

    ret = nvram_read(real_off, (uint8_t *)dut_factory_data, sizeof(dut_factory_data_t));
11024582:	3286      	movi      	r2, 134
11024584:	6c43      	mov      	r1, r0
11024586:	4241      	lsli      	r2, r2, 1
11024588:	3000      	movi      	r0, 0
1102458a:	e3ffff5b 	bsr      	0x11024440	// 11024440 <nvram_read>
    if (ret < 0) {
1102458e:	38df      	btsti      	r0, 31
11024590:	0c07      	bf      	0x1102459e	// 1102459e <dut_hal_mac_store+0x2e>
        aos_free(dut_factory_data);
11024592:	6c13      	mov      	r0, r4
    dut_factory_data->mac[4] = addr[0];
    dut_factory_data->mac[5] = addr[1];

    ret = nvram_write((uint8_t *)dut_factory_data, sizeof(dut_factory_data_t));
    if (ret < 0) {
        aos_free(dut_factory_data);
11024594:	e3ffea43 	bsr      	0x11021a1a	// 11021a1a <aos_free>
        return -1;
11024598:	3000      	movi      	r0, 0
1102459a:	2800      	subi      	r0, 1
1102459c:	0416      	br      	0x110245c8	// 110245c8 <dut_hal_mac_store+0x58>
    dut_factory_data->mac[0] = addr[2];
1102459e:	8562      	ld.b      	r3, (r5, 0x2)
    ret = nvram_write((uint8_t *)dut_factory_data, sizeof(dut_factory_data_t));
110245a0:	6c13      	mov      	r0, r4
    dut_factory_data->mac[0] = addr[2];
110245a2:	a460      	st.b      	r3, (r4, 0x0)
    dut_factory_data->mac[1] = addr[3];
110245a4:	8563      	ld.b      	r3, (r5, 0x3)
110245a6:	a461      	st.b      	r3, (r4, 0x1)
    dut_factory_data->mac[2] = addr[4];
110245a8:	8564      	ld.b      	r3, (r5, 0x4)
110245aa:	a462      	st.b      	r3, (r4, 0x2)
    dut_factory_data->mac[3] = addr[5];
110245ac:	8565      	ld.b      	r3, (r5, 0x5)
110245ae:	a463      	st.b      	r3, (r4, 0x3)
    dut_factory_data->mac[4] = addr[0];
110245b0:	8560      	ld.b      	r3, (r5, 0x0)
110245b2:	a464      	st.b      	r3, (r4, 0x4)
    dut_factory_data->mac[5] = addr[1];
110245b4:	8561      	ld.b      	r3, (r5, 0x1)
110245b6:	a465      	st.b      	r3, (r4, 0x5)
    ret = nvram_write((uint8_t *)dut_factory_data, sizeof(dut_factory_data_t));
110245b8:	e3ffff6c 	bsr      	0x11024490	// 11024490 <nvram_write.constprop.0>
    if (ret < 0) {
110245bc:	38df      	btsti      	r0, 31
        aos_free(dut_factory_data);
110245be:	6c13      	mov      	r0, r4
    if (ret < 0) {
110245c0:	0bea      	bt      	0x11024594	// 11024594 <dut_hal_mac_store+0x24>
        return -1;
    }

    aos_free(dut_factory_data);
110245c2:	e3ffea2c 	bsr      	0x11021a1a	// 11021a1a <aos_free>

    return 0;
110245c6:	3000      	movi      	r0, 0
}
110245c8:	1492      	pop      	r4-r5, r15
	...

110245cc <dut_hal_freqoff_get>:

#ifdef CONFIG_CALIBRATE_WITH_FREQOFF
int dut_hal_freqoff_get(int32_t *freqoff)
{
    uint32_t freqoff_xip = (*(volatile unsigned int  *)(CONFIG_FCDS_XTALCAP));
110245cc:	106c      	lrw      	r3, 0x11004000	// 110245fc <dut_hal_freqoff_get+0x30>

    if (freqoff == NULL) {
110245ce:	3840      	cmpnei      	r0, 0
    uint32_t freqoff_xip = (*(volatile unsigned int  *)(CONFIG_FCDS_XTALCAP));
110245d0:	9362      	ld.w      	r3, (r3, 0x8)
    if (freqoff == NULL) {
110245d2:	0c12      	bf      	0x110245f6	// 110245f6 <dut_hal_freqoff_get+0x2a>
        return -1;
    }

    if ((RF_PHY_FREQ_FOFF_N200KHZ > ((int32_t)freqoff_xip) ||
110245d4:	3200      	movi      	r2, 0
110245d6:	2a31      	subi      	r2, 50
110245d8:	648d      	cmplt      	r3, r2
110245da:	0808      	bt      	0x110245ea	// 110245ea <dut_hal_freqoff_get+0x1e>
110245dc:	eb230032 	cmplti      	r3, 51
110245e0:	0c05      	bf      	0x110245ea	// 110245ea <dut_hal_freqoff_get+0x1e>
        ((int32_t)freqoff_xip) > RF_PHY_FREQ_FOFF_200KHZ) ||
110245e2:	3200      	movi      	r2, 0
110245e4:	2a00      	subi      	r2, 1
110245e6:	648e      	cmpne      	r3, r2
110245e8:	0805      	bt      	0x110245f2	// 110245f2 <dut_hal_freqoff_get+0x26>
        (freqoff_xip == 0xffffffff)) {
        *freqoff = RF_PHY_DEFAULT_FREQOFF << 2;
110245ea:	3300      	movi      	r3, 0
    } else {
        *freqoff = (int32_t)freqoff_xip << 2;
110245ec:	b060      	st.w      	r3, (r0, 0x0)
    }

    return 0;
110245ee:	3000      	movi      	r0, 0
}
110245f0:	783c      	jmp      	r15
        *freqoff = (int32_t)freqoff_xip << 2;
110245f2:	4362      	lsli      	r3, r3, 2
110245f4:	07fc      	br      	0x110245ec	// 110245ec <dut_hal_freqoff_get+0x20>
        return -1;
110245f6:	3000      	movi      	r0, 0
110245f8:	2800      	subi      	r0, 1
110245fa:	07fb      	br      	0x110245f0	// 110245f0 <dut_hal_freqoff_get+0x24>
110245fc:	11004000 	.long	0x11004000

11024600 <dut_hal_freqoff_store>:

int dut_hal_freqoff_store(int32_t freqoff)
{
11024600:	14d2      	push      	r4-r5, r15
    dut_factory_data_t *dut_factory_data = NULL;
    int ret = -1;
    int real_off = 0;
    int real_freqoff = 0;

    real_freqoff = (freqoff - freqoff % 20)/4;
11024602:	3114      	movi      	r1, 20
{
11024604:	6d03      	mov      	r4, r0
    real_freqoff = (freqoff - freqoff % 20)/4;
11024606:	e3ffba21 	bsr      	0x1101ba48	// 1101ba48 <__modsi3>
1102460a:	5c01      	subu      	r0, r4, r0
1102460c:	38df      	btsti      	r0, 31
1102460e:	c4000c43 	inct      	r0, r0, 3
11024612:	5082      	asri      	r4, r0, 2

    if (real_freqoff < RF_PHY_FREQ_FOFF_N200KHZ || real_freqoff > RF_PHY_FREQ_FOFF_200KHZ) {
11024614:	e4640031 	addi      	r3, r4, 50
11024618:	eb030064 	cmphsi      	r3, 101
1102461c:	0c04      	bf      	0x11024624	// 11024624 <dut_hal_freqoff_store+0x24>
    dut_factory_data->freqoff = (uint32_t)real_freqoff;

    ret = nvram_write((uint8_t *)dut_factory_data, sizeof(dut_factory_data_t));
    if (ret < 0) {
        aos_free(dut_factory_data);
        return -1;
1102461e:	3000      	movi      	r0, 0
11024620:	2800      	subi      	r0, 1
    aos_free(dut_factory_data);

    g_rfPhyFreqOffSet = real_freqoff;

    return 0;
}
11024622:	1492      	pop      	r4-r5, r15
    dut_factory_data = (dut_factory_data_t *)aos_malloc(sizeof(dut_factory_data_t));
11024624:	3086      	movi      	r0, 134
11024626:	4001      	lsli      	r0, r0, 1
11024628:	e3ffe9f4 	bsr      	0x11021a10	// 11021a10 <aos_malloc>
1102462c:	6d43      	mov      	r5, r0
    if (dut_factory_data == NULL) {
1102462e:	3840      	cmpnei      	r0, 0
11024630:	0ff7      	bf      	0x1102461e	// 1102461e <dut_hal_freqoff_store+0x1e>
    ret = nvram_read(real_off, (uint8_t *)dut_factory_data, sizeof(dut_factory_data_t));
11024632:	3286      	movi      	r2, 134
11024634:	6c43      	mov      	r1, r0
11024636:	4241      	lsli      	r2, r2, 1
11024638:	3000      	movi      	r0, 0
1102463a:	e3ffff03 	bsr      	0x11024440	// 11024440 <nvram_read>
    if (ret < 0) {
1102463e:	38df      	btsti      	r0, 31
11024640:	0c05      	bf      	0x1102464a	// 1102464a <dut_hal_freqoff_store+0x4a>
        aos_free(dut_factory_data);
11024642:	6c17      	mov      	r0, r5
        aos_free(dut_factory_data);
11024644:	e3ffe9eb 	bsr      	0x11021a1a	// 11021a1a <aos_free>
11024648:	07eb      	br      	0x1102461e	// 1102461e <dut_hal_freqoff_store+0x1e>
    dut_factory_data->freqoff = (uint32_t)real_freqoff;
1102464a:	b582      	st.w      	r4, (r5, 0x8)
    ret = nvram_write((uint8_t *)dut_factory_data, sizeof(dut_factory_data_t));
1102464c:	6c17      	mov      	r0, r5
1102464e:	e3ffff21 	bsr      	0x11024490	// 11024490 <nvram_write.constprop.0>
    if (ret < 0) {
11024652:	38df      	btsti      	r0, 31
        aos_free(dut_factory_data);
11024654:	6c17      	mov      	r0, r5
    if (ret < 0) {
11024656:	0bf7      	bt      	0x11024644	// 11024644 <dut_hal_freqoff_store+0x44>
    aos_free(dut_factory_data);
11024658:	e3ffe9e1 	bsr      	0x11021a1a	// 11021a1a <aos_free>
    g_rfPhyFreqOffSet = real_freqoff;
1102465c:	7412      	sextb      	r0, r4
1102465e:	1063      	lrw      	r3, 0x1fff0ea6	// 11024668 <dut_hal_freqoff_store+0x68>
11024660:	a300      	st.b      	r0, (r3, 0x0)
    return 0;
11024662:	3000      	movi      	r0, 0
11024664:	07df      	br      	0x11024622	// 11024622 <dut_hal_freqoff_store+0x22>
11024666:	0000      	bkpt
11024668:	1fff0ea6 	.long	0x1fff0ea6

1102466c <dut_hal_ble_tx_single_tone>:
 * @param       none
 *
 * @return      Success:0 ; Fail: < 0
 */
int dut_hal_ble_tx_single_tone(uint8_t phy_fmt, uint8_t rf_chn_idx, uint32_t xtalcap, uint8_t txpower)
{
1102466c:	14d0      	push      	r15
1102466e:	1421      	subi      	r14, r14, 4
    uint32 testTimeUs = 1000;

    if (!(phy_fmt == PKT_FMT_BLE1M||phy_fmt ==PKT_FMT_BLE2M||phy_fmt ==PKT_FMT_BLR500K||phy_fmt ==PKT_FMT_BLR125K)) {
11024670:	2800      	subi      	r0, 1
11024672:	7400      	zextb      	r0, r0
11024674:	3803      	cmphsi      	r0, 4
11024676:	0815      	bt      	0x110246a0	// 110246a0 <dut_hal_ble_tx_single_tone+0x34>
        return -2;
    }

    if (txpower > 0x3f) {
11024678:	eb03003f 	cmphsi      	r3, 64
1102467c:	0815      	bt      	0x110246a6	// 110246a6 <dut_hal_ble_tx_single_tone+0x3a>
    uint32_t cap = RF_PHY_DEFAULT_XTAL_CAP;
    /*
        singletone test, if flash have no data, we test with 0;
        else we need use value from flash.
    */
    int32_t freqoff = RF_PHY_FREQ_FOFF_00KHZ;
1102467e:	3300      	movi      	r3, 0
    int ret = dut_hal_freqoff_get(&freqoff);
11024680:	6c3b      	mov      	r0, r14
    int32_t freqoff = RF_PHY_FREQ_FOFF_00KHZ;
11024682:	b860      	st.w      	r3, (r14, 0x0)
    int ret = dut_hal_freqoff_get(&freqoff);
11024684:	e3ffffa4 	bsr      	0x110245cc	// 110245cc <dut_hal_freqoff_get>
    if (ret == 0 && freqoff != 0) {
11024688:	3840      	cmpnei      	r0, 0
1102468a:	0811      	bt      	0x110246ac	// 110246ac <dut_hal_ble_tx_single_tone+0x40>
1102468c:	9860      	ld.w      	r3, (r14, 0x0)
1102468e:	3b40      	cmpnei      	r3, 0
11024690:	0c06      	bf      	0x1102469c	// 1102469c <dut_hal_ble_tx_single_tone+0x30>
        g_rfPhyFreqOffSet = freqoff >> 2;
11024692:	1048      	lrw      	r2, 0x1fff0ea6	// 110246b0 <dut_hal_ble_tx_single_tone+0x44>
11024694:	5362      	asri      	r3, r3, 2
11024696:	74ce      	sextb      	r3, r3
11024698:	a260      	st.b      	r3, (r2, 0x0)
        freqoff = g_rfPhyFreqOffSet;
1102469a:	8260      	ld.b      	r3, (r2, 0x0)
    }
    //printf("%s, g_freqoff = %d,freqoff =  %d\n", __func__, g_rfPhyFreqOffSet, freqoff);

    //rf_phy_dtm_tx_singleTone(phy_fmt, txpower, rf_chn_idx, cap, freqoff, testTimeUs);
    return 0;
}
1102469c:	1401      	addi      	r14, r14, 4
1102469e:	1490      	pop      	r15
        return -2;
110246a0:	3000      	movi      	r0, 0
110246a2:	2801      	subi      	r0, 2
110246a4:	07fc      	br      	0x1102469c	// 1102469c <dut_hal_ble_tx_single_tone+0x30>
        return -3;
110246a6:	3000      	movi      	r0, 0
110246a8:	2802      	subi      	r0, 3
110246aa:	07f9      	br      	0x1102469c	// 1102469c <dut_hal_ble_tx_single_tone+0x30>
    return 0;
110246ac:	3000      	movi      	r0, 0
110246ae:	07f7      	br      	0x1102469c	// 1102469c <dut_hal_ble_tx_single_tone+0x30>
110246b0:	1fff0ea6 	.long	0x1fff0ea6

110246b4 <dut_hal_ble_tx_mod_burst>:
 * @param       none
 *
 * @return      Success:0 ; Fail: < 0
 */
int dut_hal_ble_tx_mod_burst(uint8_t phy_fmt, uint8_t rf_chn_idx,uint32_t xtalcap, uint8_t txpower, uint8_t pkt_type)
{
110246b4:	14d0      	push      	r15
110246b6:	1421      	subi      	r14, r14, 4
    uint32 txPktIntv = 0;
    uint8_t pktLength = 37; //max pkt length in 625us
    uint32_t txPktNum = 1000; //send 1000 pkt

    if (!(phy_fmt == PKT_FMT_BLE1M||phy_fmt ==PKT_FMT_BLE2M||phy_fmt ==PKT_FMT_BLR500K||phy_fmt ==PKT_FMT_BLR125K)) {
110246b8:	2800      	subi      	r0, 1
110246ba:	7400      	zextb      	r0, r0
{
110246bc:	d84e0008 	ld.b      	r2, (r14, 0x8)
    if (!(phy_fmt == PKT_FMT_BLE1M||phy_fmt ==PKT_FMT_BLE2M||phy_fmt ==PKT_FMT_BLR500K||phy_fmt ==PKT_FMT_BLR125K)) {
110246c0:	3803      	cmphsi      	r0, 4
110246c2:	0817      	bt      	0x110246f0	// 110246f0 <dut_hal_ble_tx_mod_burst+0x3c>
        return -2;
    }

    if (txpower > 0x3f) {
110246c4:	eb03003f 	cmphsi      	r3, 64
110246c8:	0817      	bt      	0x110246f6	// 110246f6 <dut_hal_ble_tx_mod_burst+0x42>
        return -3;
    }

    if (pkt_type > 5) {
110246ca:	3a05      	cmphsi      	r2, 6
110246cc:	0818      	bt      	0x110246fc	// 110246fc <dut_hal_ble_tx_mod_burst+0x48>
        return -5;
    }
    uint32_t cap = RF_PHY_DEFAULT_XTAL_CAP;
    int32_t freqoff = RF_PHY_FREQ_FOFF_00KHZ;
110246ce:	3300      	movi      	r3, 0
    int ret = dut_hal_freqoff_get(&freqoff);
110246d0:	6c3b      	mov      	r0, r14
    int32_t freqoff = RF_PHY_FREQ_FOFF_00KHZ;
110246d2:	b860      	st.w      	r3, (r14, 0x0)
    int ret = dut_hal_freqoff_get(&freqoff);
110246d4:	e3ffff7c 	bsr      	0x110245cc	// 110245cc <dut_hal_freqoff_get>
    if (ret == 0 && freqoff != 0) {
110246d8:	3840      	cmpnei      	r0, 0
110246da:	0814      	bt      	0x11024702	// 11024702 <dut_hal_ble_tx_mod_burst+0x4e>
110246dc:	9860      	ld.w      	r3, (r14, 0x0)
110246de:	3b40      	cmpnei      	r3, 0
110246e0:	0c06      	bf      	0x110246ec	// 110246ec <dut_hal_ble_tx_mod_burst+0x38>
        g_rfPhyFreqOffSet = freqoff >> 2;
110246e2:	104a      	lrw      	r2, 0x1fff0ea6	// 11024708 <dut_hal_ble_tx_mod_burst+0x54>
110246e4:	5362      	asri      	r3, r3, 2
110246e6:	74ce      	sextb      	r3, r3
110246e8:	a260      	st.b      	r3, (r2, 0x0)
        freqoff = g_rfPhyFreqOffSet;
110246ea:	8260      	ld.b      	r3, (r2, 0x0)
    }
    //printf("%s, g_freqoff = %d,freqoff =  %d\n", __func__, g_rfPhyFreqOffSet, freqoff);

    //rf_phy_dtm_tx_mod_burst(phy_fmt,txpower, rf_chn_idx, cap, freqoff, pkt_type, pktLength, txPktNum, txPktIntv);
    return 0;
}
110246ec:	1401      	addi      	r14, r14, 4
110246ee:	1490      	pop      	r15
        return -2;
110246f0:	3000      	movi      	r0, 0
110246f2:	2801      	subi      	r0, 2
110246f4:	07fc      	br      	0x110246ec	// 110246ec <dut_hal_ble_tx_mod_burst+0x38>
        return -3;
110246f6:	3000      	movi      	r0, 0
110246f8:	2802      	subi      	r0, 3
110246fa:	07f9      	br      	0x110246ec	// 110246ec <dut_hal_ble_tx_mod_burst+0x38>
        return -5;
110246fc:	3000      	movi      	r0, 0
110246fe:	2804      	subi      	r0, 5
11024700:	07f6      	br      	0x110246ec	// 110246ec <dut_hal_ble_tx_mod_burst+0x38>
    return 0;
11024702:	3000      	movi      	r0, 0
11024704:	07f4      	br      	0x110246ec	// 110246ec <dut_hal_ble_tx_mod_burst+0x38>
11024706:	0000      	bkpt
11024708:	1fff0ea6 	.long	0x1fff0ea6

1102470c <dut_hal_ble_rx_demod_burst>:
 *              rx_pkt_num        :   rx demod received pkt number
 *
 * @return      Success:0 ; Fail: < 0
 */
int dut_hal_ble_rx_demod_burst(uint8_t phy_fmt, uint8_t rf_chn_idx, uint32_t xtalcap, int16_t *rx_freq_off, uint8_t *rx_rssi, uint8_t *rx_carr_sens, uint16_t *rx_pkt_num)
{
1102470c:	14d0      	push      	r15
1102470e:	1421      	subi      	r14, r14, 4
    uint8_t pktLength = 37; //max pkt length in 625us
    uint32 rxWindow = 625; //pkt interval unit:us
    uint32 rxTimeOut = 625; //1000 pkt cost 625ms unit:ms

    if (!(phy_fmt == PKT_FMT_BLE1M||phy_fmt ==PKT_FMT_BLE2M||phy_fmt ==PKT_FMT_BLR500K||phy_fmt ==PKT_FMT_BLR125K)) {
11024710:	2800      	subi      	r0, 1
11024712:	7400      	zextb      	r0, r0
11024714:	3803      	cmphsi      	r0, 4
11024716:	0812      	bt      	0x1102473a	// 1102473a <dut_hal_ble_rx_demod_burst+0x2e>
        return -2;
    }

    uint32_t cap = RF_PHY_DEFAULT_XTAL_CAP;
    int32_t freqoff = RF_PHY_FREQ_FOFF_00KHZ;
11024718:	3300      	movi      	r3, 0
    int ret = dut_hal_freqoff_get(&freqoff);
1102471a:	6c3b      	mov      	r0, r14
    int32_t freqoff = RF_PHY_FREQ_FOFF_00KHZ;
1102471c:	b860      	st.w      	r3, (r14, 0x0)
    int ret = dut_hal_freqoff_get(&freqoff);
1102471e:	e3ffff57 	bsr      	0x110245cc	// 110245cc <dut_hal_freqoff_get>
    if (ret == 0 && freqoff != 0) {
11024722:	3840      	cmpnei      	r0, 0
11024724:	080e      	bt      	0x11024740	// 11024740 <dut_hal_ble_rx_demod_burst+0x34>
11024726:	9860      	ld.w      	r3, (r14, 0x0)
11024728:	3b40      	cmpnei      	r3, 0
1102472a:	0c06      	bf      	0x11024736	// 11024736 <dut_hal_ble_rx_demod_burst+0x2a>
        g_rfPhyFreqOffSet = freqoff >> 2;
1102472c:	1046      	lrw      	r2, 0x1fff0ea6	// 11024744 <dut_hal_ble_rx_demod_burst+0x38>
1102472e:	5362      	asri      	r3, r3, 2
11024730:	74ce      	sextb      	r3, r3
11024732:	a260      	st.b      	r3, (r2, 0x0)
        freqoff = g_rfPhyFreqOffSet;
11024734:	8260      	ld.b      	r3, (r2, 0x0)
    }
    //printf("%s, g_freqoff = %d,freqoff =  %d\n", __func__, g_rfPhyFreqOffSet, freqoff);

    ///rf_phy_dtm_rx_demod_burst(phy_fmt,rf_chn_idx, freqoff, cap, pktLength, rxTimeOut, rxWindow, rx_freq_off, rx_rssi, rx_carr_sens, rx_pkt_num);
    return 0;
}
11024736:	1401      	addi      	r14, r14, 4
11024738:	1490      	pop      	r15
        return -2;
1102473a:	3000      	movi      	r0, 0
1102473c:	2801      	subi      	r0, 2
1102473e:	07fc      	br      	0x11024736	// 11024736 <dut_hal_ble_rx_demod_burst+0x2a>
    return 0;
11024740:	3000      	movi      	r0, 0
11024742:	07fa      	br      	0x11024736	// 11024736 <dut_hal_ble_rx_demod_burst+0x2a>
11024744:	1fff0ea6 	.long	0x1fff0ea6

11024748 <dut_hal_ble_transmit_stop>:

int dut_hal_ble_transmit_stop(void)
{
11024748:	14d0      	push      	r15
    rf_phy_dtm_stop();
1102474a:	e00021bf 	bsr      	0x11028ac8	// 11028ac8 <cpu_task_stack_init+0x120>
    return 0;
}
1102474e:	3000      	movi      	r0, 0
11024750:	1490      	pop      	r15
	...

11024754 <dut_hal_rx_current_test>:

int dut_hal_rx_current_test(uint32_t sleep_time)
{
11024754:	14d0      	push      	r15
11024756:	1421      	subi      	r14, r14, 4
        sleep_time = 10;
    }

    uint32_t cap = RF_PHY_DEFAULT_XTAL_CAP;
    int32_t freqoff = RF_PHY_FREQ_FOFF_00KHZ;
    int ret = dut_hal_freqoff_get(&freqoff);
11024758:	6c3b      	mov      	r0, r14
    int32_t freqoff = RF_PHY_FREQ_FOFF_00KHZ;
1102475a:	3300      	movi      	r3, 0
1102475c:	b860      	st.w      	r3, (r14, 0x0)
    int ret = dut_hal_freqoff_get(&freqoff);
1102475e:	e3ffff37 	bsr      	0x110245cc	// 110245cc <dut_hal_freqoff_get>
    if (ret == 0 && freqoff != 0) {
11024762:	3840      	cmpnei      	r0, 0
11024764:	080b      	bt      	0x1102477a	// 1102477a <dut_hal_rx_current_test+0x26>
11024766:	9860      	ld.w      	r3, (r14, 0x0)
11024768:	3b40      	cmpnei      	r3, 0
1102476a:	0c08      	bf      	0x1102477a	// 1102477a <dut_hal_rx_current_test+0x26>
        g_rfPhyFreqOffSet = freqoff >> 2;
1102476c:	1048      	lrw      	r2, 0x1fff0ea6	// 1102478c <dut_hal_rx_current_test+0x38>
1102476e:	5362      	asri      	r3, r3, 2
11024770:	74ce      	sextb      	r3, r3
11024772:	a260      	st.b      	r3, (r2, 0x0)
        freqoff = g_rfPhyFreqOffSet;
11024774:	8260      	ld.b      	r3, (r2, 0x0)
11024776:	74ce      	sextb      	r3, r3
11024778:	b860      	st.w      	r3, (r14, 0x0)
    }
    //printf("%s, g_freqoff = %d,freqoff =  %d\n", __func__, g_rfPhyFreqOffSet, freqoff);

    drv_pm_sleep_enable();
1102477a:	e000246b 	bsr      	0x11029050	// 11029050 <cpu_task_stack_init+0x6a8>

    //rf_phy_dtm_rx_demod_burst(2, rfChnIdx, freqoff, cap, pktLength, sleep_time, rxWindow,
    //                            &rxEstFoff, &rx_est_rssi, &rx_est_carrsens, &rx_pkt_num);

    rf_phy_dtm_stop();
1102477e:	e00021a5 	bsr      	0x11028ac8	// 11028ac8 <cpu_task_stack_init+0x120>
    drv_pm_sleep_disable();
11024782:	e000251b 	bsr      	0x110291b8	// 110291b8 <cpu_task_stack_init+0x810>

    return OK;
}
11024786:	3000      	movi      	r0, 0
11024788:	1401      	addi      	r14, r14, 4
1102478a:	1490      	pop      	r15
1102478c:	1fff0ea6 	.long	0x1fff0ea6

11024790 <dut_hal_test_gpio_write>:


int dut_hal_test_gpio_write(uint8_t wrgpio, uint8_t value)
{
11024790:	14d2      	push      	r4-r5, r15
11024792:	6d03      	mov      	r4, r0
    int ret;
    gpio_pin_handle_t *pin = NULL;

    if (wrgpio >= GPIO_NUM) {
11024794:	3816      	cmphsi      	r0, 23
{
11024796:	6d47      	mov      	r5, r1
    if (wrgpio >= GPIO_NUM) {
11024798:	0817      	bt      	0x110247c6	// 110247c6 <dut_hal_test_gpio_write+0x36>
        return -1;
    }

    drv_pinmux_config(wrgpio, PIN_FUNC_GPIO);
1102479a:	3163      	movi      	r1, 99
1102479c:	e3fff44e 	bsr      	0x11023038	// 11023038 <drv_pinmux_config>
    pin = csi_gpio_pin_initialize(wrgpio, NULL);
110247a0:	3100      	movi      	r1, 0
110247a2:	6c13      	mov      	r0, r4
110247a4:	e3fff6f0 	bsr      	0x11023584	// 11023584 <csi_gpio_pin_initialize>

    ret = csi_gpio_pin_config_direction(pin, GPIO_DIRECTION_OUTPUT);
110247a8:	3101      	movi      	r1, 1
    pin = csi_gpio_pin_initialize(wrgpio, NULL);
110247aa:	6d03      	mov      	r4, r0
    ret = csi_gpio_pin_config_direction(pin, GPIO_DIRECTION_OUTPUT);
110247ac:	e3fff714 	bsr      	0x110235d4	// 110235d4 <csi_gpio_pin_config_direction>
    if(ret < 0){
110247b0:	38df      	btsti      	r0, 31
110247b2:	0809      	bt      	0x110247c4	// 110247c4 <dut_hal_test_gpio_write+0x34>
        return ret;
    }
    csi_gpio_pin_write(pin, value);
110247b4:	3d40      	cmpnei      	r5, 0
110247b6:	c4000501 	mvc      	r1
110247ba:	7444      	zextb      	r1, r1
110247bc:	6c13      	mov      	r0, r4
110247be:	e3fff729 	bsr      	0x11023610	// 11023610 <csi_gpio_pin_write>
    return 0;
110247c2:	3000      	movi      	r0, 0
}
110247c4:	1492      	pop      	r4-r5, r15
        return -1;
110247c6:	3000      	movi      	r0, 0
110247c8:	2800      	subi      	r0, 1
110247ca:	07fd      	br      	0x110247c4	// 110247c4 <dut_hal_test_gpio_write+0x34>

110247cc <dut_hal_test_gpio_read>:

int dut_hal_test_gpio_read(uint8_t wrgpio, uint8_t *value)
{
110247cc:	14d2      	push      	r4-r5, r15
110247ce:	6d03      	mov      	r4, r0
    int ret;
    bool *bool_value = (bool *)value;
    gpio_pin_handle_t *pin = NULL;

    if (wrgpio >= GPIO_NUM) {
110247d0:	3816      	cmphsi      	r0, 23
{
110247d2:	6d47      	mov      	r5, r1
    if (wrgpio >= GPIO_NUM) {
110247d4:	0814      	bt      	0x110247fc	// 110247fc <dut_hal_test_gpio_read+0x30>
        return -1;
    }

    drv_pinmux_config(wrgpio, PIN_FUNC_GPIO);
110247d6:	3163      	movi      	r1, 99
110247d8:	e3fff430 	bsr      	0x11023038	// 11023038 <drv_pinmux_config>
    pin = csi_gpio_pin_initialize(wrgpio, NULL);
110247dc:	3100      	movi      	r1, 0
110247de:	6c13      	mov      	r0, r4
110247e0:	e3fff6d2 	bsr      	0x11023584	// 11023584 <csi_gpio_pin_initialize>

    ret = csi_gpio_pin_config_direction(pin,GPIO_DIRECTION_INPUT);
110247e4:	3100      	movi      	r1, 0
    pin = csi_gpio_pin_initialize(wrgpio, NULL);
110247e6:	6d03      	mov      	r4, r0
    ret = csi_gpio_pin_config_direction(pin,GPIO_DIRECTION_INPUT);
110247e8:	e3fff6f6 	bsr      	0x110235d4	// 110235d4 <csi_gpio_pin_config_direction>
    if(ret < 0){
110247ec:	38df      	btsti      	r0, 31
110247ee:	0806      	bt      	0x110247fa	// 110247fa <dut_hal_test_gpio_read+0x2e>
        return ret;
    }
    csi_gpio_pin_read(pin,bool_value);
110247f0:	6c57      	mov      	r1, r5
110247f2:	6c13      	mov      	r0, r4
110247f4:	e3fff72a 	bsr      	0x11023648	// 11023648 <csi_gpio_pin_read>
    return 0;
110247f8:	3000      	movi      	r0, 0
}
110247fa:	1492      	pop      	r4-r5, r15
        return -1;
110247fc:	3000      	movi      	r0, 0
110247fe:	2800      	subi      	r0, 1
11024800:	07fd      	br      	0x110247fa	// 110247fa <dut_hal_test_gpio_read+0x2e>
	...

11024804 <dut_sendv>:
}

//////////////////////////////////////////////////
/* UART Send */
int dut_sendv(const char *command, va_list args)
{
11024804:	14d1      	push      	r4, r15
11024806:	1421      	subi      	r14, r14, 4
11024808:	6c87      	mov      	r2, r1
    int ret = -EINVAL;
    char *send_buf = NULL;
1102480a:	3300      	movi      	r3, 0

    if (vasprintf(&send_buf, command, args) >= 0) {
1102480c:	6c43      	mov      	r1, r0
1102480e:	6c3b      	mov      	r0, r14
    char *send_buf = NULL;
11024810:	b860      	st.w      	r3, (r14, 0x0)
    if (vasprintf(&send_buf, command, args) >= 0) {
11024812:	e0001b99 	bsr      	0x11027f44	// 11027f44 <vasprintf>
11024816:	38df      	btsti      	r0, 31
11024818:	081a      	bt      	0x1102484c	// 1102484c <dut_sendv+0x48>
        ret = hal_uart_send_poll(&dut_svr.uart_dev, send_buf, strlen(send_buf));
1102481a:	9880      	ld.w      	r4, (r14, 0x0)
1102481c:	6c13      	mov      	r0, r4
1102481e:	e3ffc44b 	bsr      	0x1101d0b4	// 1101d0b4 <__strlen_fast>
11024822:	6c83      	mov      	r2, r0
11024824:	6c53      	mov      	r1, r4
11024826:	100c      	lrw      	r0, 0x1fffb750	// 11024854 <dut_sendv+0x50>
11024828:	e0000370 	bsr      	0x11024f08	// 11024f08 <hal_uart_send_poll>
1102482c:	6d03      	mov      	r4, r0

        ret |= hal_uart_send_poll(&dut_svr.uart_dev, AT_OUTPUT_TERMINATION, strlen(AT_OUTPUT_TERMINATION));
1102482e:	100b      	lrw      	r0, 0x1101150a	// 11024858 <dut_sendv+0x54>
11024830:	e3ffc442 	bsr      	0x1101d0b4	// 1101d0b4 <__strlen_fast>
11024834:	6c83      	mov      	r2, r0
11024836:	1029      	lrw      	r1, 0x1101150a	// 11024858 <dut_sendv+0x54>
11024838:	1007      	lrw      	r0, 0x1fffb750	// 11024854 <dut_sendv+0x50>
1102483a:	e0000367 	bsr      	0x11024f08	// 11024f08 <hal_uart_send_poll>
1102483e:	6d00      	or      	r4, r0

        free(send_buf);
11024840:	9800      	ld.w      	r0, (r14, 0x0)
11024842:	e0001b7a 	bsr      	0x11027f36	// 11027f36 <free>
    }

    return ret;
}
11024846:	6c13      	mov      	r0, r4
11024848:	1401      	addi      	r14, r14, 4
1102484a:	1491      	pop      	r4, r15
    int ret = -EINVAL;
1102484c:	3400      	movi      	r4, 0
1102484e:	2c15      	subi      	r4, 22
    return ret;
11024850:	07fb      	br      	0x11024846	// 11024846 <dut_sendv+0x42>
11024852:	0000      	bkpt
11024854:	1fffb750 	.long	0x1fffb750
11024858:	1101150a 	.long	0x1101150a

1102485c <dut_at_send>:

int dut_at_send(const char *command, ...)
{
1102485c:	1424      	subi      	r14, r14, 16
1102485e:	b863      	st.w      	r3, (r14, 0xc)
11024860:	b842      	st.w      	r2, (r14, 0x8)
11024862:	b821      	st.w      	r1, (r14, 0x4)
11024864:	b800      	st.w      	r0, (r14, 0x0)
11024866:	14d0      	push      	r15
11024868:	1421      	subi      	r14, r14, 4
1102486a:	9802      	ld.w      	r0, (r14, 0x8)
    int ret;
    va_list args;

    aos_check_return_einval(command);
1102486c:	3840      	cmpnei      	r0, 0
1102486e:	0811      	bt      	0x11024890	// 11024890 <dut_at_send+0x34>
11024870:	106a      	lrw      	r3, 0x1fffdad8	// 11024898 <dut_at_send+0x3c>
11024872:	3200      	movi      	r2, 0
11024874:	9300      	ld.w      	r0, (r3, 0x0)
11024876:	3100      	movi      	r1, 0
11024878:	ddee2000 	st.w      	r15, (r14, 0x0)
1102487c:	3300      	movi      	r3, 0
1102487e:	e3ffebf7 	bsr      	0x1102206c	// 1102206c <aos_except_process>
11024882:	3000      	movi      	r0, 0
11024884:	2815      	subi      	r0, 22
    ret = dut_sendv(command, args);

    va_end(args);

    return ret;
}
11024886:	1401      	addi      	r14, r14, 4
11024888:	d9ee2000 	ld.w      	r15, (r14, 0x0)
1102488c:	1405      	addi      	r14, r14, 20
1102488e:	783c      	jmp      	r15
    ret = dut_sendv(command, args);
11024890:	1903      	addi      	r1, r14, 12
11024892:	e3ffffb9 	bsr      	0x11024804	// 11024804 <dut_sendv>
    return ret;
11024896:	07f8      	br      	0x11024886	// 11024886 <dut_at_send+0x2a>
11024898:	1fffdad8 	.long	0x1fffdad8

1102489c <cmd_parse_func.part.0>:
    }

    return flag;
}

static void cmd_parse_func(int type, int argc, char **argv)
1102489c:	14d4      	push      	r4-r7, r15

    if (argc > DUT_CMD_MAX_ARGS) {
        dut_at_send("+CME ERROR, ARGS OVERFLOW");
        return;
    }
    dut_svr_lock();
1102489e:	109c      	lrw      	r4, 0x1fffb748	// 1102490c <cmd_parse_func.part.0+0x70>
static void cmd_parse_func(int type, int argc, char **argv)
110248a0:	6d83      	mov      	r6, r0
110248a2:	6d47      	mov      	r5, r1
    dut_svr_lock();
110248a4:	5c0e      	addi      	r0, r4, 4
static void cmd_parse_func(int type, int argc, char **argv)
110248a6:	6dcb      	mov      	r7, r2
    dut_svr_lock();
110248a8:	3100      	movi      	r1, 0
110248aa:	2900      	subi      	r1, 1
110248ac:	e3ffe6ee 	bsr      	0x11021688	// 11021688 <aos_mutex_lock>

    slist_for_each_entry(&dut_svr.cmd_lists, node, cmd_list_t, next) {
110248b0:	948a      	ld.w      	r4, (r4, 0x28)
110248b2:	3c40      	cmpnei      	r4, 0
110248b4:	080d      	bt      	0x110248ce	// 110248ce <cmd_parse_func.part.0+0x32>
                dut_at_send("\r\nOK");
            }
            goto cmd_parse_exit;
        }
    }
    dut_at_send("+CME ERROR, NOT FOUND");
110248b6:	1017      	lrw      	r0, 0x11011a4f	// 11024910 <cmd_parse_func.part.0+0x74>
                    dut_at_send("\r\nOK");
110248b8:	e3ffffd2 	bsr      	0x1102485c	// 1102485c <dut_at_send>
110248bc:	0424      	br      	0x11024904	// 11024904 <cmd_parse_func.part.0+0x68>
                dut_at_send("%s", node->cmd->help);
110248be:	9322      	ld.w      	r1, (r3, 0x8)
110248c0:	1015      	lrw      	r0, 0x11011303	// 11024914 <cmd_parse_func.part.0+0x78>
110248c2:	e3ffffcd 	bsr      	0x1102485c	// 1102485c <dut_at_send>
                    dut_at_send("\r\nOK");
110248c6:	1015      	lrw      	r0, 0x11011a74	// 11024918 <cmd_parse_func.part.0+0x7c>
110248c8:	07f8      	br      	0x110248b8	// 110248b8 <cmd_parse_func.part.0+0x1c>
    slist_for_each_entry(&dut_svr.cmd_lists, node, cmd_list_t, next) {
110248ca:	9481      	ld.w      	r4, (r4, 0x4)
110248cc:	07f3      	br      	0x110248b2	// 110248b2 <cmd_parse_func.part.0+0x16>
110248ce:	2c03      	subi      	r4, 4
110248d0:	3c40      	cmpnei      	r4, 0
110248d2:	0ff2      	bf      	0x110248b6	// 110248b6 <cmd_parse_func.part.0+0x1a>
        if (argv[1] != NULL && strcmp(argv[1], node->cmd->name) == 0) {
110248d4:	9701      	ld.w      	r0, (r7, 0x4)
110248d6:	3840      	cmpnei      	r0, 0
110248d8:	0ff9      	bf      	0x110248ca	// 110248ca <cmd_parse_func.part.0+0x2e>
110248da:	9460      	ld.w      	r3, (r4, 0x0)
110248dc:	9320      	ld.w      	r1, (r3, 0x0)
110248de:	e3ffc32b 	bsr      	0x1101cf34	// 1101cf34 <__strcmp_fast>
110248e2:	3840      	cmpnei      	r0, 0
110248e4:	0bf3      	bt      	0x110248ca	// 110248ca <cmd_parse_func.part.0+0x2e>
            if (type == DUT_CMD_EXECUTE || type == DUT_CMD_GET) {
110248e6:	5e63      	subi      	r3, r6, 1
110248e8:	3b01      	cmphsi      	r3, 2
110248ea:	9460      	ld.w      	r3, (r4, 0x0)
110248ec:	0be9      	bt      	0x110248be	// 110248be <cmd_parse_func.part.0+0x22>
                err = node->cmd->function(type, argc - 1, &argv[1]);
110248ee:	9361      	ld.w      	r3, (r3, 0x4)
110248f0:	5d23      	subi      	r1, r5, 1
110248f2:	5f4e      	addi      	r2, r7, 4
110248f4:	6c1b      	mov      	r0, r6
110248f6:	7bcd      	jsr      	r3
110248f8:	6c43      	mov      	r1, r0
                if (err) {
110248fa:	3840      	cmpnei      	r0, 0
110248fc:	0fe5      	bf      	0x110248c6	// 110248c6 <cmd_parse_func.part.0+0x2a>
                    dut_at_send("+CME ERROR, %d", err);
110248fe:	1008      	lrw      	r0, 0x11011a65	// 1102491c <cmd_parse_func.part.0+0x80>
11024900:	e3ffffae 	bsr      	0x1102485c	// 1102485c <dut_at_send>
cmd_parse_exit:
    dut_svr_unlock();
11024904:	1007      	lrw      	r0, 0x1fffb74c	// 11024920 <cmd_parse_func.part.0+0x84>
11024906:	e3ffe6ed 	bsr      	0x110216e0	// 110216e0 <aos_mutex_unlock>
    return;
}
1102490a:	1494      	pop      	r4-r7, r15
1102490c:	1fffb748 	.long	0x1fffb748
11024910:	11011a4f 	.long	0x11011a4f
11024914:	11011303 	.long	0x11011303
11024918:	11011a74 	.long	0x11011a74
1102491c:	11011a65 	.long	0x11011a65
11024920:	1fffb74c 	.long	0x1fffb74c

11024924 <dut_test_at.constprop.1>:
        return 1;
    }
    return 0;
}

static void dut_test_at(char data[])
11024924:	14d4      	push      	r4-r7, r15
11024926:	e5ce1297 	subi      	r14, r14, 664
{
    char argv[DUT_CMD_MAX_ARGS][DUT_CMD_MAX_ARG_LEN] = {0};
1102492a:	3296      	movi      	r2, 150
1102492c:	4242      	lsli      	r2, r2, 2
1102492e:	3100      	movi      	r1, 0
11024930:	1810      	addi      	r0, r14, 64
11024932:	e3ffc36d 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
    char *hcc;
    char *argqv[DUT_CMD_MAX_ARGS] = {0};
11024936:	323c      	movi      	r2, 60
11024938:	3100      	movi      	r1, 0
1102493a:	1801      	addi      	r0, r14, 4
            flag |= WHY;
1102493c:	3404      	movi      	r4, 4
    char *argqv[DUT_CMD_MAX_ARGS] = {0};
1102493e:	e3ffc367 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
            flag |= ADD;    //+ no =
11024942:	3502      	movi      	r5, 2
    for (int i = 0; * (s + i) != '\0'; i++) {
11024944:	3200      	movi      	r2, 0
    flag |= NO_ADD;
11024946:	3001      	movi      	r0, 1
    for (int i = 0; * (s + i) != '\0'; i++) {
11024948:	1327      	lrw      	r1, 0x1fffb774	// 11024ae4 <dut_test_at.constprop.1+0x1c0>
1102494a:	59c8      	addu      	r6, r1, r2
1102494c:	8660      	ld.b      	r3, (r6, 0x0)
1102494e:	3b40      	cmpnei      	r3, 0
11024950:	0c13      	bf      	0x11024976	// 11024976 <dut_test_at.constprop.1+0x52>
        if (*(s + i) == '+') {
11024952:	eb43002b 	cmpnei      	r3, 43
11024956:	0805      	bt      	0x11024960	// 11024960 <dut_test_at.constprop.1+0x3c>
            flag = flag & (~0x1);
11024958:	3880      	bclri      	r0, 0
            flag |= ADD;    //+ no =
1102495a:	6c14      	or      	r0, r5
    for (int i = 0; * (s + i) != '\0'; i++) {
1102495c:	2200      	addi      	r2, 1
1102495e:	07f6      	br      	0x1102494a	// 1102494a <dut_test_at.constprop.1+0x26>
        if (*(s + i) == '=') { //, or not ,
11024960:	eb43003d 	cmpnei      	r3, 61
11024964:	081c      	bt      	0x1102499c	// 1102499c <dut_test_at.constprop.1+0x78>
            if (*(s + i + 1) == '?') {
11024966:	8661      	ld.b      	r3, (r6, 0x1)
11024968:	eb43003f 	cmpnei      	r3, 63
1102496c:	0c1e      	bf      	0x110249a8	// 110249a8 <dut_test_at.constprop.1+0x84>
                return 0;
1102496e:	3b40      	cmpnei      	r3, 0
11024970:	c4000500 	mvc      	r0
11024974:	4003      	lsli      	r0, r0, 3
    int ustype  = at_cmd_type(data);
    argv[0][0] = 'A';
11024976:	3341      	movi      	r3, 65
    argv[0][1] = 'T';
    argv[0][2] = '\0';

    switch (ustype) {
11024978:	2800      	subi      	r0, 1
    argv[0][0] = 'A';
1102497a:	dc6e0040 	st.b      	r3, (r14, 0x40)
    switch (ustype) {
1102497e:	380f      	cmphsi      	r0, 16
    argv[0][1] = 'T';
11024980:	3354      	movi      	r3, 84
11024982:	dc6e0041 	st.b      	r3, (r14, 0x41)
    switch (ustype) {
11024986:	0899      	bt      	0x11024ab8	// 11024ab8 <dut_test_at.constprop.1+0x194>
11024988:	e0002538 	bsr      	0x110293f8	// 110293f8 <cpu_task_stack_init+0xa50>
1102498c:	26961610 	.long	0x26961610
11024990:	38969696 	.long	0x38969696
11024994:	96969696 	.long	0x96969696
11024998:	85969696 	.long	0x85969696
        if (*(s + i) == '?') {
1102499c:	eb43003f 	cmpnei      	r3, 63
110249a0:	0bde      	bt      	0x1102495c	// 1102495c <dut_test_at.constprop.1+0x38>
            flag = flag & (~0x2); //no +
110249a2:	3881      	bclri      	r0, 1
            flag |= WHY;
110249a4:	6c10      	or      	r0, r4
110249a6:	07db      	br      	0x1102495c	// 1102495c <dut_test_at.constprop.1+0x38>
                return  FIND;
110249a8:	3010      	movi      	r0, 16
110249aa:	07e6      	br      	0x11024976	// 11024976 <dut_test_at.constprop.1+0x52>
        case NO_ADD:
            dut_at_send("OK");
110249ac:	120f      	lrw      	r0, 0x11011a76	// 11024ae8 <dut_test_at.constprop.1+0x1c4>

            hcc = strchr(data, '=');
            int num = argc_len(hcc);

            if (num == 0) {
                dut_at_send("num:err 0");
110249ae:	e3ffff57 	bsr      	0x1102485c	// 1102485c <dut_at_send>
            break;
    }

dut_main_exit:
    return;
}
110249b2:	e5ce0297 	addi      	r14, r14, 664
110249b6:	1494      	pop      	r4-r7, r15
            if (char_cut(argv[1], data, '+', '\0') == NULL) {
110249b8:	1c1a      	addi      	r4, r14, 104
110249ba:	3300      	movi      	r3, 0
110249bc:	322b      	movi      	r2, 43
110249be:	122a      	lrw      	r1, 0x1fffb774	// 11024ae4 <dut_test_at.constprop.1+0x1c0>
110249c0:	6c13      	mov      	r0, r4
110249c2:	e00001e9 	bsr      	0x11024d94	// 11024d94 <char_cut>
110249c6:	3840      	cmpnei      	r0, 0
110249c8:	0ff5      	bf      	0x110249b2	// 110249b2 <dut_test_at.constprop.1+0x8e>
            argqv[0] = (char *)(&argv[0]);
110249ca:	1b10      	addi      	r3, r14, 64
            argqv[1] = (char *)(&argv[1]);
110249cc:	b882      	st.w      	r4, (r14, 0x8)
            argqv[0] = (char *)(&argv[0]);
110249ce:	b861      	st.w      	r3, (r14, 0x4)
110249d0:	3102      	movi      	r1, 2
110249d2:	1a01      	addi      	r2, r14, 4
110249d4:	3001      	movi      	r0, 1
110249d6:	0410      	br      	0x110249f6	// 110249f6 <dut_test_at.constprop.1+0xd2>
            if (char_cut((char *)argv[1], data, '+', '?') == NULL) {
110249d8:	1c1a      	addi      	r4, r14, 104
110249da:	333f      	movi      	r3, 63
110249dc:	322b      	movi      	r2, 43
110249de:	1222      	lrw      	r1, 0x1fffb774	// 11024ae4 <dut_test_at.constprop.1+0x1c0>
110249e0:	6c13      	mov      	r0, r4
110249e2:	e00001d9 	bsr      	0x11024d94	// 11024d94 <char_cut>
110249e6:	3840      	cmpnei      	r0, 0
110249e8:	0fe5      	bf      	0x110249b2	// 110249b2 <dut_test_at.constprop.1+0x8e>
            argqv[0] = (char *)(&argv[0]);
110249ea:	1b10      	addi      	r3, r14, 64
            argqv[1] = (char *)(&argv[1]);
110249ec:	b882      	st.w      	r4, (r14, 0x8)
            argqv[0] = (char *)(&argv[0]);
110249ee:	b861      	st.w      	r3, (r14, 0x4)
110249f0:	3102      	movi      	r1, 2
110249f2:	3002      	movi      	r0, 2
110249f4:	1a01      	addi      	r2, r14, 4
110249f6:	e3ffff53 	bsr      	0x1102489c	// 1102489c <cmd_parse_func.part.0>
110249fa:	07dc      	br      	0x110249b2	// 110249b2 <dut_test_at.constprop.1+0x8e>
            if (char_cut((char *)argv[1], data, '+', '=') == NULL) {
110249fc:	333d      	movi      	r3, 61
110249fe:	322b      	movi      	r2, 43
11024a00:	1139      	lrw      	r1, 0x1fffb774	// 11024ae4 <dut_test_at.constprop.1+0x1c0>
11024a02:	181a      	addi      	r0, r14, 104
11024a04:	e00001c8 	bsr      	0x11024d94	// 11024d94 <char_cut>
11024a08:	3840      	cmpnei      	r0, 0
11024a0a:	0fd4      	bf      	0x110249b2	// 110249b2 <dut_test_at.constprop.1+0x8e>
            hcc = strchr(data, '=');
11024a0c:	313d      	movi      	r1, 61
11024a0e:	1116      	lrw      	r0, 0x1fffb774	// 11024ae4 <dut_test_at.constprop.1+0x1c0>
11024a10:	e3ffc3d8 	bsr      	0x1101d1c0	// 1101d1c0 <__GI_strchr>
11024a14:	6d03      	mov      	r4, r0
            int num = argc_len(hcc);
11024a16:	e00001ad 	bsr      	0x11024d70	// 11024d70 <argc_len>
11024a1a:	6d43      	mov      	r5, r0
            if (num == 0) {
11024a1c:	3840      	cmpnei      	r0, 0
11024a1e:	0803      	bt      	0x11024a24	// 11024a24 <dut_test_at.constprop.1+0x100>
                dut_at_send("num:err 0");
11024a20:	1113      	lrw      	r0, 0x11011a8f	// 11024aec <dut_test_at.constprop.1+0x1c8>
11024a22:	07c6      	br      	0x110249ae	// 110249ae <dut_test_at.constprop.1+0x8a>
            if (num == 1) {
11024a24:	3841      	cmpnei      	r0, 1
11024a26:	1e24      	addi      	r6, r14, 144
11024a28:	0811      	bt      	0x11024a4a	// 11024a4a <dut_test_at.constprop.1+0x126>
                char_cut((char *)argv[2], hcc, '=', '\0');
11024a2a:	3300      	movi      	r3, 0
11024a2c:	323d      	movi      	r2, 61
11024a2e:	6c53      	mov      	r1, r4
11024a30:	6c1b      	mov      	r0, r6
11024a32:	e00001b1 	bsr      	0x11024d94	// 11024d94 <char_cut>
                argqv[2] = (char *)(&argv[2]);
11024a36:	b8c3      	st.w      	r6, (r14, 0xc)
            cmd_parse_func(DUT_CMD_EXECUTE, num + 2, (char **)(&argqv));
11024a38:	5d26      	addi      	r1, r5, 2
    if (argc > DUT_CMD_MAX_ARGS) {
11024a3a:	392f      	cmplti      	r1, 16
            argqv[0] = (char *)(&argv[0]);
11024a3c:	1b10      	addi      	r3, r14, 64
11024a3e:	b861      	st.w      	r3, (r14, 0x4)
            argqv[1] = (char *)(&argv[1]);
11024a40:	2327      	addi      	r3, 40
11024a42:	b862      	st.w      	r3, (r14, 0x8)
    if (argc > DUT_CMD_MAX_ARGS) {
11024a44:	0827      	bt      	0x11024a92	// 11024a92 <dut_test_at.constprop.1+0x16e>
        dut_at_send("+CME ERROR, ARGS OVERFLOW");
11024a46:	110b      	lrw      	r0, 0x11011a99	// 11024af0 <dut_test_at.constprop.1+0x1cc>
11024a48:	07b3      	br      	0x110249ae	// 110249ae <dut_test_at.constprop.1+0x8a>
                char_cut((char *)argv[2], hcc, '=', ',');
11024a4a:	332c      	movi      	r3, 44
11024a4c:	323d      	movi      	r2, 61
11024a4e:	6c53      	mov      	r1, r4
11024a50:	6c1b      	mov      	r0, r6
11024a52:	e00001a1 	bsr      	0x11024d94	// 11024d94 <char_cut>
                argqv[2] = (char *)(&argv[2]);
11024a56:	b8c3      	st.w      	r6, (r14, 0xc)
11024a58:	3302      	movi      	r3, 2
11024a5a:	5be2      	addi      	r7, r3, 1
                for (int i = 1; i < num; i++) {
11024a5c:	2b00      	subi      	r3, 1
11024a5e:	654d      	cmplt      	r3, r5
11024a60:	0fec      	bf      	0x11024a38	// 11024a38 <dut_test_at.constprop.1+0x114>
                    hcc = strchr(hcc, ',');
11024a62:	312c      	movi      	r1, 44
11024a64:	6c13      	mov      	r0, r4
11024a66:	47c2      	lsli      	r6, r7, 2
11024a68:	e3ffc3ac 	bsr      	0x1101d1c0	// 1101d1c0 <__GI_strchr>
11024a6c:	5e7c      	addu      	r3, r6, r7
11024a6e:	1a10      	addi      	r2, r14, 64
11024a70:	4363      	lsli      	r3, r3, 3
11024a72:	60c8      	addu      	r3, r2
11024a74:	b860      	st.w      	r3, (r14, 0x0)
11024a76:	6d03      	mov      	r4, r0
                    char_cut((char *)argv[2 + i], hcc, ',', ',');
11024a78:	332c      	movi      	r3, 44
11024a7a:	6c43      	mov      	r1, r0
11024a7c:	322c      	movi      	r2, 44
11024a7e:	9800      	ld.w      	r0, (r14, 0x0)
                    hcc++;
11024a80:	2400      	addi      	r4, 1
                    char_cut((char *)argv[2 + i], hcc, ',', ',');
11024a82:	e0000189 	bsr      	0x11024d94	// 11024d94 <char_cut>
                    argqv[2 + i] = (char *)(&argv[2 + i]);
11024a86:	1b01      	addi      	r3, r14, 4
11024a88:	618c      	addu      	r6, r3
11024a8a:	9860      	ld.w      	r3, (r14, 0x0)
11024a8c:	b660      	st.w      	r3, (r6, 0x0)
                    hcc++;
11024a8e:	6cdf      	mov      	r3, r7
11024a90:	07e5      	br      	0x11024a5a	// 11024a5a <dut_test_at.constprop.1+0x136>
11024a92:	1a01      	addi      	r2, r14, 4
11024a94:	07a0      	br      	0x110249d4	// 110249d4 <dut_test_at.constprop.1+0xb0>
            hcc = strrchr(data, '+');
11024a96:	312b      	movi      	r1, 43
11024a98:	1013      	lrw      	r0, 0x1fffb774	// 11024ae4 <dut_test_at.constprop.1+0x1c0>
            str_chr(argv[1], hcc, '=');
11024a9a:	1c1a      	addi      	r4, r14, 104
            hcc = strrchr(data, '+');
11024a9c:	e3ffc441 	bsr      	0x1101d31e	// 1101d31e <__GI_strrchr>
            str_chr(argv[1], hcc, '=');
11024aa0:	323d      	movi      	r2, 61
            hcc++;
11024aa2:	5822      	addi      	r1, r0, 1
            str_chr(argv[1], hcc, '=');
11024aa4:	6c13      	mov      	r0, r4
11024aa6:	e0000153 	bsr      	0x11024d4c	// 11024d4c <str_chr>
            argqv[0] = (char *)(&argv[0]);
11024aaa:	1b10      	addi      	r3, r14, 64
            argqv[1] = (char *)(&argv[1]);
11024aac:	b882      	st.w      	r4, (r14, 0x8)
            argqv[0] = (char *)(&argv[0]);
11024aae:	b861      	st.w      	r3, (r14, 0x4)
11024ab0:	1a01      	addi      	r2, r14, 4
11024ab2:	3102      	movi      	r1, 2
11024ab4:	3003      	movi      	r0, 3
11024ab6:	07a0      	br      	0x110249f6	// 110249f6 <dut_test_at.constprop.1+0xd2>
            dut_at_send("AT support commands");
11024ab8:	100f      	lrw      	r0, 0x11011ab3	// 11024af4 <dut_test_at.constprop.1+0x1d0>
11024aba:	e3fffed1 	bsr      	0x1102485c	// 1102485c <dut_at_send>
            slist_for_each_entry(&dut_svr.cmd_lists, node, cmd_list_t, next) {
11024abe:	106f      	lrw      	r3, 0x1fffb748	// 11024af8 <dut_test_at.constprop.1+0x1d4>
11024ac0:	938a      	ld.w      	r4, (r3, 0x28)
11024ac2:	3c40      	cmpnei      	r4, 0
11024ac4:	0f77      	bf      	0x110249b2	// 110249b2 <dut_test_at.constprop.1+0x8e>
                dut_at_send("    AT+%s%s", node->cmd->name, node->cmd->help);
11024ac6:	10ae      	lrw      	r5, 0x11011ac7	// 11024afc <dut_test_at.constprop.1+0x1d8>
            slist_for_each_entry(&dut_svr.cmd_lists, node, cmd_list_t, next) {
11024ac8:	2c03      	subi      	r4, 4
11024aca:	3c40      	cmpnei      	r4, 0
11024acc:	0f73      	bf      	0x110249b2	// 110249b2 <dut_test_at.constprop.1+0x8e>
                dut_at_send("    AT+%s%s", node->cmd->name, node->cmd->help);
11024ace:	9460      	ld.w      	r3, (r4, 0x0)
11024ad0:	6c17      	mov      	r0, r5
11024ad2:	9342      	ld.w      	r2, (r3, 0x8)
11024ad4:	9320      	ld.w      	r1, (r3, 0x0)
11024ad6:	e3fffec3 	bsr      	0x1102485c	// 1102485c <dut_at_send>
            slist_for_each_entry(&dut_svr.cmd_lists, node, cmd_list_t, next) {
11024ada:	9481      	ld.w      	r4, (r4, 0x4)
11024adc:	3c40      	cmpnei      	r4, 0
11024ade:	0f6a      	bf      	0x110249b2	// 110249b2 <dut_test_at.constprop.1+0x8e>
11024ae0:	2c03      	subi      	r4, 4
11024ae2:	07f4      	br      	0x11024aca	// 11024aca <dut_test_at.constprop.1+0x1a6>
11024ae4:	1fffb774 	.long	0x1fffb774
11024ae8:	11011a76 	.long	0x11011a76
11024aec:	11011a8f 	.long	0x11011a8f
11024af0:	11011a99 	.long	0x11011a99
11024af4:	11011ab3 	.long	0x11011ab3
11024af8:	1fffb748 	.long	0x1fffb748
11024afc:	11011ac7 	.long	0x11011ac7

11024b00 <dut_task_entry>:
//////////////////////////////////////////////////
/* DUT Task */
static char msg_recv[CONFIG_DUT_UART_BUF_SIZE] = {0};
static uint32_t recv_size = 0;
void dut_task_entry(void)
{
11024b00:	14d1      	push      	r4, r15
11024b02:	1423      	subi      	r14, r14, 12
    int ret = -1;
    char input_c;
    uint32_t tmp_len = 0;

    while (1) {
        tmp_len = 0;
11024b04:	3300      	movi      	r3, 0
        ret = hal_uart_recv_II(&dut_svr.uart_dev, &input_c, 1, &tmp_len, HAL_WAIT_FOREVER);
11024b06:	3201      	movi      	r2, 1
        tmp_len = 0;
11024b08:	b862      	st.w      	r3, (r14, 0x8)
        ret = hal_uart_recv_II(&dut_svr.uart_dev, &input_c, 1, &tmp_len, HAL_WAIT_FOREVER);
11024b0a:	3300      	movi      	r3, 0
11024b0c:	2b00      	subi      	r3, 1
11024b0e:	b860      	st.w      	r3, (r14, 0x0)
11024b10:	1017      	lrw      	r0, 0x1fffb750	// 11024b6c <dut_task_entry+0x6c>
11024b12:	1b02      	addi      	r3, r14, 8
11024b14:	e42e0006 	addi      	r1, r14, 7
11024b18:	e000020c 	bsr      	0x11024f30	// 11024f30 <hal_uart_recv_II>
11024b1c:	1095      	lrw      	r4, 0x1fffb7f4	// 11024b70 <dut_task_entry+0x70>
        if (ret != 0) {
11024b1e:	3840      	cmpnei      	r0, 0
11024b20:	0c09      	bf      	0x11024b32	// 11024b32 <dut_task_entry+0x32>
            /* read err, clear buf */
            memset(msg_recv, 0, sizeof(msg_recv));
11024b22:	3280      	movi      	r2, 128
11024b24:	3100      	movi      	r1, 0
11024b26:	1014      	lrw      	r0, 0x1fffb774	// 11024b74 <dut_task_entry+0x74>
11024b28:	e3ffc272 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
        } else {
            continue;
        }

        dut_test_at(msg_recv);
        recv_size = 0;
11024b2c:	3300      	movi      	r3, 0
11024b2e:	b460      	st.w      	r3, (r4, 0x0)
11024b30:	07ea      	br      	0x11024b04	// 11024b04 <dut_task_entry+0x4>
        msg_recv[recv_size++] = (unsigned char)input_c;
11024b32:	9460      	ld.w      	r3, (r4, 0x0)
11024b34:	d84e0007 	ld.b      	r2, (r14, 0x7)
11024b38:	5b22      	addi      	r1, r3, 1
        if (recv_size >= CONFIG_DUT_UART_BUF_SIZE) {
11024b3a:	eb01007f 	cmphsi      	r1, 128
        msg_recv[recv_size++] = (unsigned char)input_c;
11024b3e:	100e      	lrw      	r0, 0x1fffb774	// 11024b74 <dut_task_entry+0x74>
11024b40:	60c0      	addu      	r3, r0
11024b42:	b420      	st.w      	r1, (r4, 0x0)
11024b44:	a340      	st.b      	r2, (r3, 0x0)
        if (recv_size >= CONFIG_DUT_UART_BUF_SIZE) {
11024b46:	0bee      	bt      	0x11024b22	// 11024b22 <dut_task_entry+0x22>
        if ((msg_recv[recv_size - 1] == '\r' && msg_recv[recv_size - 2] == '\n') ||
11024b48:	3a4d      	cmpnei      	r2, 13
11024b4a:	080b      	bt      	0x11024b60	// 11024b60 <dut_task_entry+0x60>
11024b4c:	5b43      	subi      	r2, r3, 1
11024b4e:	8240      	ld.b      	r2, (r2, 0x0)
11024b50:	3a4a      	cmpnei      	r2, 10
            (msg_recv[recv_size - 1] == '\n' && msg_recv[recv_size - 2] == '\r')) {
11024b52:	0802      	bt      	0x11024b56	// 11024b56 <dut_task_entry+0x56>
            msg_recv[recv_size - 2] = '\0';
11024b54:	2b00      	subi      	r3, 1
            msg_recv[recv_size - 1] = '\0';
11024b56:	3200      	movi      	r2, 0
11024b58:	a340      	st.b      	r2, (r3, 0x0)
        dut_test_at(msg_recv);
11024b5a:	e3fffee5 	bsr      	0x11024924	// 11024924 <dut_test_at.constprop.1>
11024b5e:	07e7      	br      	0x11024b2c	// 11024b2c <dut_task_entry+0x2c>
        if ((msg_recv[recv_size - 1] == '\r' && msg_recv[recv_size - 2] == '\n') ||
11024b60:	3a4a      	cmpnei      	r2, 10
11024b62:	0bd1      	bt      	0x11024b04	// 11024b04 <dut_task_entry+0x4>
            (msg_recv[recv_size - 1] == '\n' && msg_recv[recv_size - 2] == '\r')) {
11024b64:	5b43      	subi      	r2, r3, 1
11024b66:	8240      	ld.b      	r2, (r2, 0x0)
11024b68:	3a4d      	cmpnei      	r2, 13
11024b6a:	07f4      	br      	0x11024b52	// 11024b52 <dut_task_entry+0x52>
11024b6c:	1fffb750 	.long	0x1fffb750
11024b70:	1fffb7f4 	.long	0x1fffb7f4
11024b74:	1fffb774 	.long	0x1fffb774

11024b78 <dut_service_init>:
    }
}

int dut_service_init(dut_service_cfg_t *config)
{
11024b78:	14d2      	push      	r4-r5, r15
11024b7a:	1423      	subi      	r14, r14, 12
11024b7c:	6d43      	mov      	r5, r0
    int ret;

    if (config == NULL) {
11024b7e:	3840      	cmpnei      	r0, 0
11024b80:	0c2b      	bf      	0x11024bd6	// 11024bd6 <dut_service_init+0x5e>
        return -1;
    }

    memset(&dut_svr, 0, sizeof(dut_svr));
11024b82:	322c      	movi      	r2, 44
11024b84:	3100      	movi      	r1, 0
11024b86:	1017      	lrw      	r0, 0x1fffb748	// 11024be0 <dut_service_init+0x68>
11024b88:	e3ffc242 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
    wdg_dev_t wdg_dev = {
11024b8c:	3300      	movi      	r3, 0
    int ret = hal_wdg_init(&wdg_dev);
11024b8e:	6c3b      	mov      	r0, r14
    wdg_dev_t wdg_dev = {
11024b90:	dc6e0000 	st.b      	r3, (r14, 0x0)
11024b94:	33fa      	movi      	r3, 250
11024b96:	4363      	lsli      	r3, r3, 3
11024b98:	b861      	st.w      	r3, (r14, 0x4)
11024b9a:	3300      	movi      	r3, 0
11024b9c:	b862      	st.w      	r3, (r14, 0x8)
    int ret = hal_wdg_init(&wdg_dev);
11024b9e:	e0000215 	bsr      	0x11024fc8	// 11024fc8 <hal_wdg_init>
    if (ret != 0) {
11024ba2:	3840      	cmpnei      	r0, 0
11024ba4:	0804      	bt      	0x11024bac	// 11024bac <dut_service_init+0x34>
    ret = hal_wdg_finalize(&wdg_dev);
11024ba6:	6c3b      	mov      	r0, r14
11024ba8:	e0000228 	bsr      	0x11024ff8	// 11024ff8 <hal_wdg_finalize>

    /* close wdt */
    dut_disable_wdt();

    aos_mutex_new(&dut_svr.lock);
11024bac:	108d      	lrw      	r4, 0x1fffb748	// 11024be0 <dut_service_init+0x68>
11024bae:	5c0e      	addi      	r0, r4, 4
11024bb0:	e3ffe73c 	bsr      	0x11021a28	// 11021a28 <aos_mutex_new>

    /* config uart pin function */
    dut_svr.uart_dev.port =  config->uart_idx;
11024bb4:	8560      	ld.b      	r3, (r5, 0x0)
    dut_svr.uart_dev.config.data_width = DATA_WIDTH_8BIT;
    dut_svr.uart_dev.config.parity = NO_PARITY;
    dut_svr.uart_dev.config.stop_bits = STOP_BITS_1;

    /* config uart for AT cmd input */
    ret = hal_uart_init(&dut_svr.uart_dev);
11024bb6:	5c1e      	addi      	r0, r4, 8
    dut_svr.uart_dev.port =  config->uart_idx;
11024bb8:	a468      	st.b      	r3, (r4, 0x8)
    dut_svr.uart_dev.config.baud_rate = config->uart_baud;
11024bba:	9561      	ld.w      	r3, (r5, 0x4)
11024bbc:	b463      	st.w      	r3, (r4, 0xc)
    dut_svr.uart_dev.config.data_width = DATA_WIDTH_8BIT;
11024bbe:	3303      	movi      	r3, 3
11024bc0:	b464      	st.w      	r3, (r4, 0x10)
    dut_svr.uart_dev.config.parity = NO_PARITY;
11024bc2:	3300      	movi      	r3, 0
11024bc4:	b465      	st.w      	r3, (r4, 0x14)
    dut_svr.uart_dev.config.stop_bits = STOP_BITS_1;
11024bc6:	b466      	st.w      	r3, (r4, 0x18)
    ret = hal_uart_init(&dut_svr.uart_dev);
11024bc8:	e0000132 	bsr      	0x11024e2c	// 11024e2c <hal_uart_init>

    if (ret) {
11024bcc:	3840      	cmpnei      	r0, 0
11024bce:	0c06      	bf      	0x11024bda	// 11024bda <dut_service_init+0x62>
        printf("hal_uart_init error\r\n");
11024bd0:	1005      	lrw      	r0, 0x11011a79	// 11024be4 <dut_service_init+0x6c>
11024bd2:	e3ffc073 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
        return -1;
11024bd6:	3000      	movi      	r0, 0
11024bd8:	2800      	subi      	r0, 1
        return -1;
    }

    return 0;
}
11024bda:	1403      	addi      	r14, r14, 12
11024bdc:	1492      	pop      	r4-r5, r15
11024bde:	0000      	bkpt
11024be0:	1fffb748 	.long	0x1fffb748
11024be4:	11011a79 	.long	0x11011a79

11024be8 <dut_service_cmd_reg>:

int dut_service_cmd_reg(const dut_at_cmd_t *info)
{
11024be8:	14d2      	push      	r4-r5, r15
11024bea:	6d43      	mov      	r5, r0
    if (NULL == info || info->name == NULL || info->function == NULL) {
11024bec:	3840      	cmpnei      	r0, 0
11024bee:	0c31      	bf      	0x11024c50	// 11024c50 <dut_service_cmd_reg+0x68>
11024bf0:	9060      	ld.w      	r3, (r0, 0x0)
11024bf2:	3b40      	cmpnei      	r3, 0
11024bf4:	0c2e      	bf      	0x11024c50	// 11024c50 <dut_service_cmd_reg+0x68>
11024bf6:	9061      	ld.w      	r3, (r0, 0x4)
11024bf8:	3b40      	cmpnei      	r3, 0
11024bfa:	0c2b      	bf      	0x11024c50	// 11024c50 <dut_service_cmd_reg+0x68>
        return -EINVAL;
    }
    dut_svr_lock();
11024bfc:	1097      	lrw      	r4, 0x1fffb748	// 11024c58 <dut_service_cmd_reg+0x70>
11024bfe:	3100      	movi      	r1, 0
11024c00:	5c0e      	addi      	r0, r4, 4
11024c02:	2900      	subi      	r1, 1
11024c04:	e3ffe542 	bsr      	0x11021688	// 11021688 <aos_mutex_lock>
    cmd_list_t *temp_cmd_node;
    slist_for_each_entry(&dut_svr.cmd_lists, temp_cmd_node, cmd_list_t, next) {
11024c08:	948a      	ld.w      	r4, (r4, 0x28)
11024c0a:	3c40      	cmpnei      	r4, 0
11024c0c:	080c      	bt      	0x11024c24	// 11024c24 <dut_service_cmd_reg+0x3c>
        if (strcmp(temp_cmd_node->cmd->name, info->name) == 0) {
            goto err;
        }
    }

    cmd_list_t *cmd_node = (cmd_list_t *)aos_malloc(sizeof(cmd_list_t));
11024c0e:	3008      	movi      	r0, 8
11024c10:	e3ffe700 	bsr      	0x11021a10	// 11021a10 <aos_malloc>

    if (cmd_node == NULL) {
11024c14:	3840      	cmpnei      	r0, 0
11024c16:	0813      	bt      	0x11024c3c	// 11024c3c <dut_service_cmd_reg+0x54>
    slist_add_tail(&cmd_node->next, &dut_svr.cmd_lists);

    dut_svr_unlock();
    return 0;
err:
    dut_svr_unlock();
11024c18:	1011      	lrw      	r0, 0x1fffb74c	// 11024c5c <dut_service_cmd_reg+0x74>
11024c1a:	e3ffe563 	bsr      	0x110216e0	// 110216e0 <aos_mutex_unlock>
    return -1;
11024c1e:	3000      	movi      	r0, 0
11024c20:	2800      	subi      	r0, 1
11024c22:	0416      	br      	0x11024c4e	// 11024c4e <dut_service_cmd_reg+0x66>
    slist_for_each_entry(&dut_svr.cmd_lists, temp_cmd_node, cmd_list_t, next) {
11024c24:	2c03      	subi      	r4, 4
11024c26:	3c40      	cmpnei      	r4, 0
11024c28:	0ff3      	bf      	0x11024c0e	// 11024c0e <dut_service_cmd_reg+0x26>
        if (strcmp(temp_cmd_node->cmd->name, info->name) == 0) {
11024c2a:	9460      	ld.w      	r3, (r4, 0x0)
11024c2c:	9520      	ld.w      	r1, (r5, 0x0)
11024c2e:	9300      	ld.w      	r0, (r3, 0x0)
11024c30:	e3ffc182 	bsr      	0x1101cf34	// 1101cf34 <__strcmp_fast>
11024c34:	3840      	cmpnei      	r0, 0
11024c36:	0ff1      	bf      	0x11024c18	// 11024c18 <dut_service_cmd_reg+0x30>
    slist_for_each_entry(&dut_svr.cmd_lists, temp_cmd_node, cmd_list_t, next) {
11024c38:	9481      	ld.w      	r4, (r4, 0x4)
11024c3a:	07e8      	br      	0x11024c0a	// 11024c0a <dut_service_cmd_reg+0x22>
    cmd_node->cmd = info;
11024c3c:	b0a0      	st.w      	r5, (r0, 0x0)
    slist_add_tail(&cmd_node->next, &dut_svr.cmd_lists);
11024c3e:	1029      	lrw      	r1, 0x1fffb770	// 11024c60 <dut_service_cmd_reg+0x78>
11024c40:	2003      	addi      	r0, 4
11024c42:	e3ffea23 	bsr      	0x11022088	// 11022088 <slist_add_tail>
    dut_svr_unlock();
11024c46:	1006      	lrw      	r0, 0x1fffb74c	// 11024c5c <dut_service_cmd_reg+0x74>
11024c48:	e3ffe54c 	bsr      	0x110216e0	// 110216e0 <aos_mutex_unlock>
    return 0;
11024c4c:	3000      	movi      	r0, 0

}
11024c4e:	1492      	pop      	r4-r5, r15
        return -EINVAL;
11024c50:	3000      	movi      	r0, 0
11024c52:	2815      	subi      	r0, 22
11024c54:	07fd      	br      	0x11024c4e	// 11024c4e <dut_service_cmd_reg+0x66>
11024c56:	0000      	bkpt
11024c58:	1fffb748 	.long	0x1fffb748
11024c5c:	1fffb74c 	.long	0x1fffb74c
11024c60:	1fffb770 	.long	0x1fffb770

11024c64 <dut_service_cmds_reg>:

    return -1;
}

int dut_service_cmds_reg(const dut_at_cmd_t commands[], int num_commands)
{
11024c64:	14d3      	push      	r4-r6, r15
11024c66:	1421      	subi      	r14, r14, 4
11024c68:	6d43      	mov      	r5, r0
    int i, ret;
    aos_check_return_einval(commands);
11024c6a:	3840      	cmpnei      	r0, 0
{
11024c6c:	6d87      	mov      	r6, r1
    aos_check_return_einval(commands);
11024c6e:	0c06      	bf      	0x11024c7a	// 11024c7a <dut_service_cmds_reg+0x16>
11024c70:	3400      	movi      	r4, 0

    for (i = 0; i < num_commands; i++) {
11024c72:	6591      	cmplt      	r4, r6
11024c74:	0810      	bt      	0x11024c94	// 11024c94 <dut_service_cmds_reg+0x30>
        if (0 != ret) {
            return ret;
        }
    }

    return 0;
11024c76:	3000      	movi      	r0, 0
11024c78:	040c      	br      	0x11024c90	// 11024c90 <dut_service_cmds_reg+0x2c>
    aos_check_return_einval(commands);
11024c7a:	106c      	lrw      	r3, 0x1fffdad8	// 11024ca8 <dut_service_cmds_reg+0x44>
11024c7c:	3200      	movi      	r2, 0
11024c7e:	9300      	ld.w      	r0, (r3, 0x0)
11024c80:	3100      	movi      	r1, 0
11024c82:	ddee2000 	st.w      	r15, (r14, 0x0)
11024c86:	3300      	movi      	r3, 0
11024c88:	e3ffe9f2 	bsr      	0x1102206c	// 1102206c <aos_except_process>
11024c8c:	3000      	movi      	r0, 0
11024c8e:	2815      	subi      	r0, 22
}
11024c90:	1401      	addi      	r14, r14, 4
11024c92:	1493      	pop      	r4-r6, r15
        ret = dut_service_cmd_reg(&commands[i]);
11024c94:	300c      	movi      	r0, 12
11024c96:	7c10      	mult      	r0, r4
11024c98:	6014      	addu      	r0, r5
11024c9a:	e3ffffa7 	bsr      	0x11024be8	// 11024be8 <dut_service_cmd_reg>
        if (0 != ret) {
11024c9e:	3840      	cmpnei      	r0, 0
11024ca0:	0bf8      	bt      	0x11024c90	// 11024c90 <dut_service_cmds_reg+0x2c>
    for (i = 0; i < num_commands; i++) {
11024ca2:	2400      	addi      	r4, 1
11024ca4:	07e7      	br      	0x11024c72	// 11024c72 <dut_service_cmds_reg+0xe>
11024ca6:	0000      	bkpt
11024ca8:	1fffdad8 	.long	0x1fffdad8

11024cac <str2_char>:
#include <aos/aos.h>
#include "misc/util.h"

//extern int char2hex(char c, u8_t *x);
int str2_char(const char *str, uint8_t *addr)
{
11024cac:	14d4      	push      	r4-r7, r15
11024cae:	1422      	subi      	r14, r14, 8
11024cb0:	6d03      	mov      	r4, r0
11024cb2:	b820      	st.w      	r1, (r14, 0x0)
    int i, j;
    uint8_t tmp;

    if (strlen(str) != 17) {
11024cb4:	e3ffc200 	bsr      	0x1101d0b4	// 1101d0b4 <__strlen_fast>
11024cb8:	3851      	cmpnei      	r0, 17
11024cba:	0811      	bt      	0x11024cdc	// 11024cdc <str2_char+0x30>
11024cbc:	3601      	movi      	r6, 1
11024cbe:	3700      	movi      	r7, 0
        return -EINVAL;
    }

    for (i = 0, j = 1; *str != '\0'; str++, j++) {
11024cc0:	84a0      	ld.b      	r5, (r4, 0x0)
11024cc2:	3d40      	cmpnei      	r5, 0
11024cc4:	0803      	bt      	0x11024cca	// 11024cca <str2_char+0x1e>
        }

        addr[i] |= tmp;
    }

    return 0;
11024cc6:	3000      	movi      	r0, 0
11024cc8:	040c      	br      	0x11024ce0	// 11024ce0 <str2_char+0x34>
        if (!(j % 3) && (*str != ':')) {
11024cca:	3103      	movi      	r1, 3
11024ccc:	6c1b      	mov      	r0, r6
11024cce:	e3ffb6bd 	bsr      	0x1101ba48	// 1101ba48 <__modsi3>
11024cd2:	3840      	cmpnei      	r0, 0
11024cd4:	0808      	bt      	0x11024ce4	// 11024ce4 <str2_char+0x38>
11024cd6:	eb45003a 	cmpnei      	r5, 58
11024cda:	0c08      	bf      	0x11024cea	// 11024cea <str2_char+0x3e>
        return -EINVAL;
11024cdc:	3000      	movi      	r0, 0
11024cde:	2815      	subi      	r0, 22
}
11024ce0:	1402      	addi      	r14, r14, 8
11024ce2:	1494      	pop      	r4-r7, r15
        } else if (*str == ':') {
11024ce4:	eb45003a 	cmpnei      	r5, 58
11024ce8:	0805      	bt      	0x11024cf2	// 11024cf2 <str2_char+0x46>
            i++;
11024cea:	2700      	addi      	r7, 1
    for (i = 0, j = 1; *str != '\0'; str++, j++) {
11024cec:	2400      	addi      	r4, 1
11024cee:	2600      	addi      	r6, 1
11024cf0:	07e8      	br      	0x11024cc0	// 11024cc0 <str2_char+0x14>
        addr[i] = addr[i] << 4;
11024cf2:	98a0      	ld.w      	r5, (r14, 0x0)
11024cf4:	615c      	addu      	r5, r7
11024cf6:	8540      	ld.b      	r2, (r5, 0x0)
11024cf8:	4244      	lsli      	r2, r2, 4
11024cfa:	a540      	st.b      	r2, (r5, 0x0)
        if (char2hex(*str, &tmp) < 0) {
11024cfc:	e42e0006 	addi      	r1, r14, 7
11024d00:	8400      	ld.b      	r0, (r4, 0x0)
11024d02:	e3ffef9d 	bsr      	0x11022c3c	// 11022c3c <char2hex>
11024d06:	38df      	btsti      	r0, 31
11024d08:	0bea      	bt      	0x11024cdc	// 11024cdc <str2_char+0x30>
        addr[i] |= tmp;
11024d0a:	8540      	ld.b      	r2, (r5, 0x0)
11024d0c:	d82e0007 	ld.b      	r1, (r14, 0x7)
11024d10:	6c84      	or      	r2, r1
11024d12:	a540      	st.b      	r2, (r5, 0x0)
11024d14:	07ec      	br      	0x11024cec	// 11024cec <str2_char+0x40>

11024d16 <int_num_check>:

int int_num_check(char *data)
{
    if ((*data != '-')&&(*data != '+')&&((*data < 0x30)||(*data >0x39))){
11024d16:	8060      	ld.b      	r3, (r0, 0x0)
11024d18:	2b2a      	subi      	r3, 43
11024d1a:	748c      	zextb      	r2, r3
11024d1c:	3a0e      	cmphsi      	r2, 15
11024d1e:	0814      	bt      	0x11024d46	// 11024d46 <int_num_check+0x30>
11024d20:	ea037fe5 	movi      	r3, 32741
11024d24:	70c9      	lsr      	r3, r2
11024d26:	6cce      	nor      	r3, r3
11024d28:	e4632001 	andi      	r3, r3, 1
11024d2c:	3b40      	cmpnei      	r3, 0
11024d2e:	080c      	bt      	0x11024d46	// 11024d46 <int_num_check+0x30>
11024d30:	2000      	addi      	r0, 1
        return  -1;
    }
    for (int i =1; *(data+i) != '\0'; i++) {
11024d32:	8060      	ld.b      	r3, (r0, 0x0)
11024d34:	3b40      	cmpnei      	r3, 0
11024d36:	0803      	bt      	0x11024d3c	// 11024d3c <int_num_check+0x26>
        if ((*(data+i) < 0x30)||(*(data+i) > 0x39)) {
            return  -1;
        }
    }
    return  0;
11024d38:	3000      	movi      	r0, 0
}
11024d3a:	783c      	jmp      	r15
        if ((*(data+i) < 0x30)||(*(data+i) > 0x39)) {
11024d3c:	2b2f      	subi      	r3, 48
11024d3e:	74cc      	zextb      	r3, r3
11024d40:	2000      	addi      	r0, 1
11024d42:	3b09      	cmphsi      	r3, 10
11024d44:	0ff7      	bf      	0x11024d32	// 11024d32 <int_num_check+0x1c>
        return  -1;
11024d46:	3000      	movi      	r0, 0
11024d48:	2800      	subi      	r0, 1
11024d4a:	07f8      	br      	0x11024d3a	// 11024d3a <int_num_check+0x24>

11024d4c <str_chr>:

char *str_chr(char *d, char *s, int c)
{
11024d4c:	14c2      	push      	r4-r5
11024d4e:	6cc3      	mov      	r3, r0
    int i = 0;
    char  *q = d;
    char  *p = s;

    for (i = 0; * (s + i) != (char) c; i++) {
11024d50:	7488      	zextb      	r2, r2
11024d52:	8180      	ld.b      	r4, (r1, 0x0)
11024d54:	6d47      	mov      	r5, r1
11024d56:	6492      	cmpne      	r4, r2
11024d58:	0804      	bt      	0x11024d60	// 11024d60 <str_chr+0x14>
        if (*(s + i) == '\0') {
            return NULL;
        }
    }

    *(q++) = '\0';
11024d5a:	3200      	movi      	r2, 0
11024d5c:	a340      	st.b      	r2, (r3, 0x0)
    return  d;
}
11024d5e:	1482      	pop      	r4-r5
        *(q++) = *(p++);
11024d60:	a380      	st.b      	r4, (r3, 0x0)
11024d62:	2100      	addi      	r1, 1
        if (*(s + i) == '\0') {
11024d64:	8580      	ld.b      	r4, (r5, 0x0)
11024d66:	2300      	addi      	r3, 1
11024d68:	3c40      	cmpnei      	r4, 0
11024d6a:	0bf4      	bt      	0x11024d52	// 11024d52 <str_chr+0x6>
            return NULL;
11024d6c:	3000      	movi      	r0, 0
11024d6e:	07f8      	br      	0x11024d5e	// 11024d5e <str_chr+0x12>

11024d70 <argc_len>:

int  argc_len(char *s)
{
    int i = 0;
    int j = 0;
11024d70:	3200      	movi      	r2, 0

    for (i = 0; * (s + i) != '\0'; i++) {
11024d72:	8060      	ld.b      	r3, (r0, 0x0)
11024d74:	3b40      	cmpnei      	r3, 0
11024d76:	0803      	bt      	0x11024d7c	// 11024d7c <argc_len+0xc>
        if ((*(s + i) == ',') || (*(s + i) == '?') || (*(s + i) == '=')) {
            j++;
        }
    }
    return j;
}
11024d78:	6c0b      	mov      	r0, r2
11024d7a:	783c      	jmp      	r15
        if ((*(s + i) == ',') || (*(s + i) == '?') || (*(s + i) == '=')) {
11024d7c:	eb43002c 	cmpnei      	r3, 44
11024d80:	0c06      	bf      	0x11024d8c	// 11024d8c <argc_len+0x1c>
11024d82:	e46320fd 	andi      	r3, r3, 253
11024d86:	eb43003d 	cmpnei      	r3, 61
11024d8a:	0802      	bt      	0x11024d8e	// 11024d8e <argc_len+0x1e>
            j++;
11024d8c:	2200      	addi      	r2, 1
11024d8e:	2000      	addi      	r0, 1
11024d90:	07f1      	br      	0x11024d72	// 11024d72 <argc_len+0x2>
	...

11024d94 <char_cut>:

char *char_cut(char *d, char *s, int b , int e)
{
11024d94:	14d3      	push      	r4-r6, r15
11024d96:	6d43      	mov      	r5, r0
    char *stc;

    if (b == '\0') {
11024d98:	3a40      	cmpnei      	r2, 0
{
11024d9a:	6c07      	mov      	r0, r1
11024d9c:	6d8f      	mov      	r6, r3
11024d9e:	6c4b      	mov      	r1, r2
    if (b == '\0') {
11024da0:	0c12      	bf      	0x11024dc4	// 11024dc4 <char_cut+0x30>
        return NULL;
    }

    stc = strchr(s, b);
11024da2:	e3ffc20f 	bsr      	0x1101d1c0	// 1101d1c0 <__GI_strchr>
11024da6:	6d03      	mov      	r4, r0

    if (stc == NULL) {
11024da8:	3840      	cmpnei      	r0, 0
11024daa:	0806      	bt      	0x11024db6	// 11024db6 <char_cut+0x22>
        printf("not execute\r\n");
11024dac:	1007      	lrw      	r0, 0x11011ad3	// 11024dc8 <char_cut+0x34>
11024dae:	e3ffbf85 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>

    stc++;
    str_chr(d, stc, e);

    return d;//(char *)d;
}
11024db2:	6c13      	mov      	r0, r4
11024db4:	1493      	pop      	r4-r6, r15
    stc++;
11024db6:	5822      	addi      	r1, r0, 1
    str_chr(d, stc, e);
11024db8:	6c9b      	mov      	r2, r6
11024dba:	6c17      	mov      	r0, r5
    return d;//(char *)d;
11024dbc:	6d17      	mov      	r4, r5
    str_chr(d, stc, e);
11024dbe:	e3ffffc7 	bsr      	0x11024d4c	// 11024d4c <str_chr>
    return d;//(char *)d;
11024dc2:	07f8      	br      	0x11024db2	// 11024db2 <char_cut+0x1e>
        return NULL;
11024dc4:	3400      	movi      	r4, 0
11024dc6:	07f6      	br      	0x11024db2	// 11024db2 <char_cut+0x1e>
11024dc8:	11011ad3 	.long	0x11011ad3

11024dcc <uart_event_cb>:
} hal_uart_priv_t;

static hal_uart_priv_t uart_list[6];

static void uart_event_cb(int32_t idx, usart_event_e event)
{
11024dcc:	14d4      	push      	r4-r7, r15
11024dce:	1425      	subi      	r14, r14, 20
    int32_t ret;
    uint8_t tmp_buf[16];
    switch (event) {
11024dd0:	3941      	cmpnei      	r1, 1
11024dd2:	0c05      	bf      	0x11024ddc	// 11024ddc <uart_event_cb+0x10>
11024dd4:	3940      	cmpnei      	r1, 0
11024dd6:	0c1d      	bf      	0x11024e10	// 11024e10 <uart_event_cb+0x44>
11024dd8:	394e      	cmpnei      	r1, 14
11024dda:	0820      	bt      	0x11024e1a	// 11024e1a <uart_event_cb+0x4e>
11024ddc:	4085      	lsli      	r4, r0, 5
        case USART_EVENT_RECEIVE_COMPLETE:
        case USART_EVENT_RECEIVED:
            do {
                ret = csi_usart_receive_query(uart_list[idx].handle, tmp_buf, sizeof(tmp_buf));
                if (ret > 0) {
                    if (ringbuffer_write(&uart_list[idx].read_buffer, tmp_buf, ret) != ret) {
11024dde:	10b2      	lrw      	r5, 0x1fffb7f8	// 11024e24 <uart_event_cb+0x58>
11024de0:	e4c4000f 	addi      	r6, r4, 16
                ret = csi_usart_receive_query(uart_list[idx].handle, tmp_buf, sizeof(tmp_buf));
11024de4:	5df0      	addu      	r7, r5, r4
                    if (ringbuffer_write(&uart_list[idx].read_buffer, tmp_buf, ret) != ret) {
11024de6:	6194      	addu      	r6, r5
                ret = csi_usart_receive_query(uart_list[idx].handle, tmp_buf, sizeof(tmp_buf));
11024de8:	3210      	movi      	r2, 16
11024dea:	9700      	ld.w      	r0, (r7, 0x0)
11024dec:	1901      	addi      	r1, r14, 4
11024dee:	e3fff64f 	bsr      	0x11023a8c	// 11023a8c <csi_usart_receive_query>
                if (ret > 0) {
11024df2:	3820      	cmplti      	r0, 1
11024df4:	0815      	bt      	0x11024e1e	// 11024e1e <uart_event_cb+0x52>
                    if (ringbuffer_write(&uart_list[idx].read_buffer, tmp_buf, ret) != ret) {
11024df6:	6c83      	mov      	r2, r0
11024df8:	b800      	st.w      	r0, (r14, 0x0)
11024dfa:	6c1b      	mov      	r0, r6
11024dfc:	1901      	addi      	r1, r14, 4
11024dfe:	e0001e7d 	bsr      	0x11028af8	// 11028af8 <cpu_task_stack_init+0x150>
11024e02:	9860      	ld.w      	r3, (r14, 0x0)
11024e04:	640e      	cmpne      	r3, r0
11024e06:	0ff1      	bf      	0x11024de8	// 11024de8 <uart_event_cb+0x1c>
                        break;
                    }
                }
            } while(ret);
            aos_sem_signal(&uart_list[idx].rx_sem);
11024e08:	e404000b 	addi      	r0, r4, 12
11024e0c:	6014      	addu      	r0, r5
11024e0e:	0404      	br      	0x11024e16	// 11024e16 <uart_event_cb+0x4a>
            aos_sem_signal(&uart_list[idx].tx_sem);
11024e10:	4005      	lsli      	r0, r0, 5
11024e12:	1066      	lrw      	r3, 0x1fffb800	// 11024e28 <uart_event_cb+0x5c>
11024e14:	600c      	addu      	r0, r3
            aos_sem_signal(&uart_list[idx].rx_sem);
11024e16:	e3ffe4b9 	bsr      	0x11021788	// 11021788 <aos_sem_signal>
            break;
        default:
            break;
    }
    return;
}
11024e1a:	1405      	addi      	r14, r14, 20
11024e1c:	1494      	pop      	r4-r7, r15
            } while(ret);
11024e1e:	3840      	cmpnei      	r0, 0
11024e20:	0be4      	bt      	0x11024de8	// 11024de8 <uart_event_cb+0x1c>
11024e22:	07f3      	br      	0x11024e08	// 11024e08 <uart_event_cb+0x3c>
11024e24:	1fffb7f8 	.long	0x1fffb7f8
11024e28:	1fffb800 	.long	0x1fffb800

11024e2c <hal_uart_init>:
    uart_config->stop_bits = uart->config.stop_bits;
    uart_config->flow_control = uart->config.flow_control;
}

int32_t hal_uart_init(uart_dev_t *uart)
{
11024e2c:	14d4      	push      	r4-r7, r15
11024e2e:	1426      	subi      	r14, r14, 24
11024e30:	6d03      	mov      	r4, r0
    int32_t ret;
    csi_uart_config_t csi_uart_config;
    usart_handle_t usart_handle;

    if (uart == NULL)
11024e32:	3840      	cmpnei      	r0, 0
11024e34:	0805      	bt      	0x11024e3e	// 11024e3e <hal_uart_init+0x12>
        return -1;
11024e36:	3000      	movi      	r0, 0
11024e38:	2800      	subi      	r0, 1
                           csi_uart_config.stop_bits, csi_uart_config.data_width);
    if (ret != 0) {
        return -1;
    }
    return 0;
}
11024e3a:	1406      	addi      	r14, r14, 24
11024e3c:	1494      	pop      	r4-r7, r15
    uart_config->baud_rate = uart->config.baud_rate;
11024e3e:	9061      	ld.w      	r3, (r0, 0x4)
    uart_config->idx = uart->port;
11024e40:	8040      	ld.b      	r2, (r0, 0x0)
    switch (uart->config.data_width) {
11024e42:	9002      	ld.w      	r0, (r0, 0x8)
    uart_config->baud_rate = uart->config.baud_rate;
11024e44:	b863      	st.w      	r3, (r14, 0xc)
    switch (uart->config.data_width) {
11024e46:	3804      	cmphsi      	r0, 5
11024e48:	0855      	bt      	0x11024ef2	// 11024ef2 <hal_uart_init+0xc6>
11024e4a:	e00022d7 	bsr      	0x110293f8	// 110293f8 <cpu_task_stack_init+0xa50>
11024e4e:	0354      	.short	0x0354
11024e50:	0050524e 	.long	0x0050524e
        uart_config->data_width = USART_DATA_BITS_6;
11024e54:	3701      	movi      	r7, 1
    switch (uart->config.parity) {
11024e56:	9423      	ld.w      	r1, (r4, 0xc)
11024e58:	3941      	cmpnei      	r1, 1
11024e5a:	0c50      	bf      	0x11024efa	// 11024efa <hal_uart_init+0xce>
        uart_config->parity = USART_PARITY_NONE;
11024e5c:	3942      	cmpnei      	r1, 2
11024e5e:	64c3      	mvcv      	r3
        uart_config->parity = USART_PARITY_ODD;
11024e60:	b862      	st.w      	r3, (r14, 0x8)
    usart_handle = csi_usart_initialize(uart->port, uart_event_cb);
11024e62:	6c0b      	mov      	r0, r2
    uart_config->stop_bits = uart->config.stop_bits;
11024e64:	9464      	ld.w      	r3, (r4, 0x10)
    usart_handle = csi_usart_initialize(uart->port, uart_event_cb);
11024e66:	1127      	lrw      	r1, 0x11024dcc	// 11024f00 <hal_uart_init+0xd4>
    uart_config->stop_bits = uart->config.stop_bits;
11024e68:	b864      	st.w      	r3, (r14, 0x10)
    usart_handle = csi_usart_initialize(uart->port, uart_event_cb);
11024e6a:	e3fff509 	bsr      	0x1102387c	// 1102387c <csi_usart_initialize>
11024e6e:	6d83      	mov      	r6, r0
    if (usart_handle == NULL) {
11024e70:	3840      	cmpnei      	r0, 0
11024e72:	0fe2      	bf      	0x11024e36	// 11024e36 <hal_uart_init+0xa>
    uart_list[uart->port].handle = usart_handle;
11024e74:	8440      	ld.b      	r2, (r4, 0x0)
11024e76:	11a4      	lrw      	r5, 0x1fffb7f8	// 11024f04 <hal_uart_init+0xd8>
11024e78:	4245      	lsli      	r2, r2, 5
11024e7a:	6094      	addu      	r2, r5
    uart->priv = usart_handle;
11024e7c:	b407      	st.w      	r0, (r4, 0x1c)
    uart_list[uart->port].handle = usart_handle;
11024e7e:	b200      	st.w      	r0, (r2, 0x0)
    uart_list[uart->port].recv_buf = (char *)aos_malloc(HAL_UART_RINGBUF_LEN);
11024e80:	3080      	movi      	r0, 128
11024e82:	8440      	ld.b      	r2, (r4, 0x0)
11024e84:	4001      	lsli      	r0, r0, 1
11024e86:	b845      	st.w      	r2, (r14, 0x14)
11024e88:	e3ffe5c4 	bsr      	0x11021a10	// 11021a10 <aos_malloc>
11024e8c:	9845      	ld.w      	r2, (r14, 0x14)
11024e8e:	4245      	lsli      	r2, r2, 5
11024e90:	6094      	addu      	r2, r5
11024e92:	b201      	st.w      	r0, (r2, 0x4)
    ringbuffer_create(&uart_list[uart->port].read_buffer, (char *)(uart_list[uart->port].recv_buf), HAL_UART_RINGBUF_LEN);
11024e94:	8400      	ld.b      	r0, (r4, 0x0)
11024e96:	4005      	lsli      	r0, r0, 5
11024e98:	5d40      	addu      	r2, r5, r0
11024e9a:	9221      	ld.w      	r1, (r2, 0x4)
11024e9c:	3280      	movi      	r2, 128
11024e9e:	4241      	lsli      	r2, r2, 1
11024ea0:	200f      	addi      	r0, 16
11024ea2:	6014      	addu      	r0, r5
11024ea4:	e3ffe91c 	bsr      	0x110220dc	// 110220dc <ringbuffer_create>
    ret = aos_sem_new(&uart_list[uart->port].tx_sem, 0);
11024ea8:	3100      	movi      	r1, 0
11024eaa:	8400      	ld.b      	r0, (r4, 0x0)
11024eac:	4005      	lsli      	r0, r0, 5
11024eae:	2007      	addi      	r0, 8
11024eb0:	6014      	addu      	r0, r5
11024eb2:	e3ffe607 	bsr      	0x11021ac0	// 11021ac0 <aos_sem_new>
    if (ret != 0) {
11024eb6:	3840      	cmpnei      	r0, 0
11024eb8:	0bbf      	bt      	0x11024e36	// 11024e36 <hal_uart_init+0xa>
    ret = aos_sem_new(&uart_list[uart->port].rx_sem, 0);
11024eba:	3100      	movi      	r1, 0
11024ebc:	8400      	ld.b      	r0, (r4, 0x0)
11024ebe:	4005      	lsli      	r0, r0, 5
11024ec0:	200b      	addi      	r0, 12
11024ec2:	6014      	addu      	r0, r5
11024ec4:	e3ffe5fe 	bsr      	0x11021ac0	// 11021ac0 <aos_sem_new>
11024ec8:	6d03      	mov      	r4, r0
    if (ret != 0) {
11024eca:	3840      	cmpnei      	r0, 0
11024ecc:	0bb5      	bt      	0x11024e36	// 11024e36 <hal_uart_init+0xa>
    ret = csi_usart_config(usart_handle, csi_uart_config.baud_rate,
11024ece:	9864      	ld.w      	r3, (r14, 0x10)
11024ed0:	b8e1      	st.w      	r7, (r14, 0x4)
11024ed2:	b860      	st.w      	r3, (r14, 0x0)
11024ed4:	3200      	movi      	r2, 0
11024ed6:	9862      	ld.w      	r3, (r14, 0x8)
11024ed8:	9823      	ld.w      	r1, (r14, 0xc)
11024eda:	6c1b      	mov      	r0, r6
11024edc:	e3fff528 	bsr      	0x1102392c	// 1102392c <csi_usart_config>
    if (ret != 0) {
11024ee0:	3840      	cmpnei      	r0, 0
11024ee2:	c4000503 	mvc      	r3
11024ee6:	5c0d      	subu      	r0, r4, r3
11024ee8:	07a9      	br      	0x11024e3a	// 11024e3a <hal_uart_init+0xe>
        uart_config->data_width = USART_DATA_BITS_7;
11024eea:	3702      	movi      	r7, 2
11024eec:	07b5      	br      	0x11024e56	// 11024e56 <hal_uart_init+0x2a>
        uart_config->data_width = USART_DATA_BITS_9;
11024eee:	3704      	movi      	r7, 4
11024ef0:	07b3      	br      	0x11024e56	// 11024e56 <hal_uart_init+0x2a>
        uart_config->data_width = USART_DATA_BITS_8;
11024ef2:	3703      	movi      	r7, 3
11024ef4:	07b1      	br      	0x11024e56	// 11024e56 <hal_uart_init+0x2a>
        uart_config->data_width = USART_DATA_BITS_5;
11024ef6:	3700      	movi      	r7, 0
11024ef8:	07af      	br      	0x11024e56	// 11024e56 <hal_uart_init+0x2a>
        uart_config->parity = USART_PARITY_ODD;
11024efa:	3302      	movi      	r3, 2
11024efc:	07b2      	br      	0x11024e60	// 11024e60 <hal_uart_init+0x34>
11024efe:	0000      	bkpt
11024f00:	11024dcc 	.long	0x11024dcc
11024f04:	1fffb7f8 	.long	0x1fffb7f8

11024f08 <hal_uart_send_poll>:

int32_t hal_uart_send_poll(uart_dev_t *uart, const void *data, uint32_t size)
{
11024f08:	14d4      	push      	r4-r7, r15
11024f0a:	6d83      	mov      	r6, r0
    uint32_t trans_num = 0U;
    uint8_t *ch = (uint8_t *)data;
    if(uart == NULL){
11024f0c:	3840      	cmpnei      	r0, 0
{
11024f0e:	6d0b      	mov      	r4, r2
    if(uart == NULL){
11024f10:	0c0d      	bf      	0x11024f2a	// 11024f2a <hal_uart_send_poll+0x22>
11024f12:	6d47      	mov      	r5, r1
11024f14:	59e8      	addu      	r7, r1, r2
        return -1;
    }

    while (trans_num < size){
11024f16:	65d6      	cmpne      	r5, r7
11024f18:	0803      	bt      	0x11024f1e	// 11024f1e <hal_uart_send_poll+0x16>
        csi_usart_putchar(uart->priv,*ch++);
        trans_num++;
    }

    return trans_num;
11024f1a:	6c13      	mov      	r0, r4
}
11024f1c:	1494      	pop      	r4-r7, r15
        csi_usart_putchar(uart->priv,*ch++);
11024f1e:	8520      	ld.b      	r1, (r5, 0x0)
11024f20:	9607      	ld.w      	r0, (r6, 0x1c)
11024f22:	2500      	addi      	r5, 1
11024f24:	e3fff492 	bsr      	0x11023848	// 11023848 <csi_usart_putchar>
11024f28:	07f7      	br      	0x11024f16	// 11024f16 <hal_uart_send_poll+0xe>
        return -1;
11024f2a:	3000      	movi      	r0, 0
11024f2c:	2800      	subi      	r0, 1
11024f2e:	07f7      	br      	0x11024f1c	// 11024f1c <hal_uart_send_poll+0x14>

11024f30 <hal_uart_recv_II>:
    return recv_num;
}

int32_t hal_uart_recv_II(uart_dev_t *uart, void *data, uint32_t expect_size,
                         uint32_t *recv_size, uint32_t timeout)
{
11024f30:	14d4      	push      	r4-r7, r15
11024f32:	1425      	subi      	r14, r14, 20
11024f34:	6dc3      	mov      	r7, r0
11024f36:	b864      	st.w      	r3, (r14, 0x10)
11024f38:	986a      	ld.w      	r3, (r14, 0x28)
11024f3a:	6d47      	mov      	r5, r1
11024f3c:	b841      	st.w      	r2, (r14, 0x4)
11024f3e:	b860      	st.w      	r3, (r14, 0x0)
    int32_t      ret = 0;
    long long    time_enter, used_time;
    void *       temp_buf   = data;
    uint32_t     temp_count = expect_size;
    time_enter              = aos_now_ms();
11024f40:	e3ffe529 	bsr      	0x11021992	// 11021992 <aos_now_ms>

    while (1) {
        if (uart_list[uart->port].recv_buf != NULL) {
11024f44:	11c0      	lrw      	r6, 0x1fffb7f8	// 11024fc4 <hal_uart_recv_II+0x94>
    time_enter              = aos_now_ms();
11024f46:	b802      	st.w      	r0, (r14, 0x8)
11024f48:	b823      	st.w      	r1, (r14, 0xc)
    uint32_t     temp_count = expect_size;
11024f4a:	9881      	ld.w      	r4, (r14, 0x4)
        if (uart_list[uart->port].recv_buf != NULL) {
11024f4c:	8700      	ld.b      	r0, (r7, 0x0)
11024f4e:	4005      	lsli      	r0, r0, 5
11024f50:	5e60      	addu      	r3, r6, r0
11024f52:	9341      	ld.w      	r2, (r3, 0x4)
11024f54:	3a40      	cmpnei      	r2, 0
11024f56:	0c29      	bf      	0x11024fa8	// 11024fa8 <hal_uart_recv_II+0x78>
            ret = ringbuffer_read(&uart_list[uart->port].read_buffer, (uint8_t *)temp_buf, temp_count);
11024f58:	6c93      	mov      	r2, r4
11024f5a:	6c57      	mov      	r1, r5
11024f5c:	200f      	addi      	r0, 16
11024f5e:	6018      	addu      	r0, r6
11024f60:	e0001d9c 	bsr      	0x11028a98	// 11028a98 <cpu_task_stack_init+0xf0>
        } else {
            ret = csi_usart_receive_query(uart_list[uart->port].handle, (uint8_t *)temp_buf, temp_count);
        }
        temp_count = temp_count - ret;
11024f64:	6102      	subu      	r4, r0
        temp_buf   = (uint8_t *)temp_buf + ret;
11024f66:	6140      	addu      	r5, r0
        used_time  = aos_now_ms() - time_enter;
11024f68:	e3ffe515 	bsr      	0x11021992	// 11021992 <aos_now_ms>
11024f6c:	9842      	ld.w      	r2, (r14, 0x8)
11024f6e:	9863      	ld.w      	r3, (r14, 0xc)
11024f70:	6488      	cmphs      	r2, r2
11024f72:	c4400102 	subc      	r2, r0, r2
11024f76:	c4610103 	subc      	r3, r1, r3
11024f7a:	6c0b      	mov      	r0, r2
11024f7c:	6c4f      	mov      	r1, r3

        if (timeout <= used_time || temp_count == 0 || timeout == 0) {
11024f7e:	3300      	movi      	r3, 0
11024f80:	64c5      	cmplt      	r1, r3
11024f82:	0806      	bt      	0x11024f8e	// 11024f8e <hal_uart_recv_II+0x5e>
11024f84:	644e      	cmpne      	r3, r1
11024f86:	0817      	bt      	0x11024fb4	// 11024fb4 <hal_uart_recv_II+0x84>
11024f88:	9860      	ld.w      	r3, (r14, 0x0)
11024f8a:	64c0      	cmphs      	r0, r3
11024f8c:	0814      	bt      	0x11024fb4	// 11024fb4 <hal_uart_recv_II+0x84>
11024f8e:	3c40      	cmpnei      	r4, 0
11024f90:	0c12      	bf      	0x11024fb4	// 11024fb4 <hal_uart_recv_II+0x84>
11024f92:	9860      	ld.w      	r3, (r14, 0x0)
11024f94:	3b40      	cmpnei      	r3, 0
11024f96:	0c0f      	bf      	0x11024fb4	// 11024fb4 <hal_uart_recv_II+0x84>
            break;
        }
        aos_sem_wait(&uart_list[uart->port].rx_sem, (timeout - used_time));
11024f98:	5b21      	subu      	r1, r3, r0
11024f9a:	8700      	ld.b      	r0, (r7, 0x0)
11024f9c:	4005      	lsli      	r0, r0, 5
11024f9e:	200b      	addi      	r0, 12
11024fa0:	6018      	addu      	r0, r6
11024fa2:	e3ffe3c7 	bsr      	0x11021730	// 11021730 <aos_sem_wait>
        if (uart_list[uart->port].recv_buf != NULL) {
11024fa6:	07d3      	br      	0x11024f4c	// 11024f4c <hal_uart_recv_II+0x1c>
            ret = csi_usart_receive_query(uart_list[uart->port].handle, (uint8_t *)temp_buf, temp_count);
11024fa8:	9300      	ld.w      	r0, (r3, 0x0)
11024faa:	6c93      	mov      	r2, r4
11024fac:	6c57      	mov      	r1, r5
11024fae:	e3fff56f 	bsr      	0x11023a8c	// 11023a8c <csi_usart_receive_query>
11024fb2:	07d9      	br      	0x11024f64	// 11024f64 <hal_uart_recv_II+0x34>
    }
    *recv_size = expect_size - temp_count;
11024fb4:	9844      	ld.w      	r2, (r14, 0x10)
11024fb6:	9861      	ld.w      	r3, (r14, 0x4)
    return 0;
}
11024fb8:	3000      	movi      	r0, 0
    *recv_size = expect_size - temp_count;
11024fba:	60d2      	subu      	r3, r4
11024fbc:	b260      	st.w      	r3, (r2, 0x0)
}
11024fbe:	1405      	addi      	r14, r14, 20
11024fc0:	1494      	pop      	r4-r7, r15
11024fc2:	0000      	bkpt
11024fc4:	1fffb7f8 	.long	0x1fffb7f8

11024fc8 <hal_wdg_init>:
 * @param[in]  wdg  the watch dog device
 *
 * @return  0 : on success, EIO : if an error occurred with any step
 */
int32_t hal_wdg_init(wdg_dev_t *wdg)
{
11024fc8:	14d1      	push      	r4, r15
11024fca:	6d03      	mov      	r4, r0
    int32_t ret;

    if (wdg == NULL) {
11024fcc:	3840      	cmpnei      	r0, 0
11024fce:	0804      	bt      	0x11024fd6	// 11024fd6 <hal_wdg_init+0xe>
        return -1;
11024fd0:	3000      	movi      	r0, 0
11024fd2:	2800      	subi      	r0, 1
    if (ret < 0) {
        return -1;
    }

    return 0;
}
11024fd4:	1491      	pop      	r4, r15
    wdt_handle_t* wdt_handle = csi_wdt_initialize(wdg->port, NULL);
11024fd6:	8000      	ld.b      	r0, (r0, 0x0)
11024fd8:	3100      	movi      	r1, 0
11024fda:	e3fff571 	bsr      	0x11023abc	// 11023abc <csi_wdt_initialize>
    if (wdt_handle == NULL) {
11024fde:	3840      	cmpnei      	r0, 0
11024fe0:	0ff8      	bf      	0x11024fd0	// 11024fd0 <hal_wdg_init+0x8>
    wdg->priv = (wdt_handle_t*)wdt_handle;
11024fe2:	b402      	st.w      	r0, (r4, 0x8)
    ret = csi_wdt_set_timeout(wdt_handle, wdg->config.timeout);
11024fe4:	9421      	ld.w      	r1, (r4, 0x4)
11024fe6:	e000209b 	bsr      	0x1102911c	// 1102911c <cpu_task_stack_init+0x774>
    if (ret < 0) {
11024fea:	38df      	btsti      	r0, 31
11024fec:	0bf2      	bt      	0x11024fd0	// 11024fd0 <hal_wdg_init+0x8>
    ret = csi_wdt_start((wdt_handle_t)wdg->priv);
11024fee:	9402      	ld.w      	r0, (r4, 0x8)
11024ff0:	e3fff5b6 	bsr      	0x11023b5c	// 11023b5c <csi_wdt_start>
    if (ret < 0) {
11024ff4:	501f      	asri      	r0, r0, 31
11024ff6:	07ef      	br      	0x11024fd4	// 11024fd4 <hal_wdg_init+0xc>

11024ff8 <hal_wdg_finalize>:
 * @param[in]  wdg  the watch dog device
 *
 * @return  0 : on success, EIO : if an error occurred with any step
 */
int32_t hal_wdg_finalize(wdg_dev_t *wdg)
{
11024ff8:	14d0      	push      	r15
    int32_t ret;
    wdt_handle_t* wdt_handle = (wdt_handle_t*)wdg->priv;
11024ffa:	9002      	ld.w      	r0, (r0, 0x8)

    if (wdg == NULL || wdt_handle == NULL) {
11024ffc:	3840      	cmpnei      	r0, 0
11024ffe:	0c05      	bf      	0x11025008	// 11025008 <hal_wdg_finalize+0x10>
        return -1;
    }

    ret = csi_wdt_uninitialize(wdt_handle);
11025000:	e3fff598 	bsr      	0x11023b30	// 11023b30 <csi_wdt_uninitialize>

    if (ret < 0) {
11025004:	501f      	asri      	r0, r0, 31
        return -1;
    }

    return 0;
}
11025006:	1490      	pop      	r15
        return -1;
11025008:	3000      	movi      	r0, 0
1102500a:	2800      	subi      	r0, 1
1102500c:	07fd      	br      	0x11025006	// 11025006 <hal_wdg_finalize+0xe>

1102500e <yoc_spiflash_get_info>:

    return ret < 0 ? -EIO : 0;
}

static int yoc_spiflash_get_info(aos_dev_t *dev, flash_dev_info_t *info)
{
1102500e:	14d1      	push      	r4, r15
11025010:	6d07      	mov      	r4, r1
    flash_dev_t *flash = (flash_dev_t*)dev;

    info->start_addr = flash->info->start;
11025012:	9066      	ld.w      	r3, (r0, 0x18)
11025014:	9360      	ld.w      	r3, (r3, 0x0)
11025016:	b160      	st.w      	r3, (r1, 0x0)
    info->block_size = flash->info->sector_size;
11025018:	9066      	ld.w      	r3, (r0, 0x18)
1102501a:	9363      	ld.w      	r3, (r3, 0xc)
1102501c:	b161      	st.w      	r3, (r1, 0x4)
    info->block_count = (flash->info->end - flash->info->start + 1) / flash->info->sector_size;
1102501e:	9066      	ld.w      	r3, (r0, 0x18)
11025020:	9323      	ld.w      	r1, (r3, 0xc)
11025022:	9301      	ld.w      	r0, (r3, 0x4)
11025024:	9340      	ld.w      	r2, (r3, 0x0)
11025026:	2000      	addi      	r0, 1
11025028:	600a      	subu      	r0, r2
1102502a:	e3ffb4e9 	bsr      	0x1101b9fc	// 1101b9fc <__udiv32>
1102502e:	b402      	st.w      	r0, (r4, 0x8)

    return 0;
}
11025030:	3000      	movi      	r0, 0
11025032:	1491      	pop      	r4, r15

11025034 <yoc_spiflash_erase>:
{
11025034:	14d4      	push      	r4-r7, r15
11025036:	6d87      	mov      	r6, r1
11025038:	6dcb      	mov      	r7, r2
    for (i = 0; i < blkcnt; i++) {
1102503a:	3400      	movi      	r4, 0
{
1102503c:	6d43      	mov      	r5, r0
    int ret = -EIO;
1102503e:	3000      	movi      	r0, 0
11025040:	2804      	subi      	r0, 5
    for (i = 0; i < blkcnt; i++) {
11025042:	65d1      	cmplt      	r4, r7
11025044:	0808      	bt      	0x11025054	// 11025054 <yoc_spiflash_erase+0x20>
    return ret < 0 ? -EIO : 0;
11025046:	38df      	btsti      	r0, 31
11025048:	3000      	movi      	r0, 0
1102504a:	3300      	movi      	r3, 0
1102504c:	2b04      	subi      	r3, 5
1102504e:	c4030c40 	inct      	r0, r3, 0
}
11025052:	1494      	pop      	r4-r7, r15
        ret = csi_spiflash_erase_sector(flash->handle, flash->info->start + addroff + i * flash->info->sector_size);
11025054:	9566      	ld.w      	r3, (r5, 0x18)
11025056:	9505      	ld.w      	r0, (r5, 0x14)
11025058:	9320      	ld.w      	r1, (r3, 0x0)
1102505a:	9363      	ld.w      	r3, (r3, 0xc)
1102505c:	7cd0      	mult      	r3, r4
1102505e:	6058      	addu      	r1, r6
11025060:	604c      	addu      	r1, r3
11025062:	e3fff6db 	bsr      	0x11023e18	// 11023e18 <csi_spiflash_erase_sector>
        if (ret != 0) {
11025066:	3840      	cmpnei      	r0, 0
11025068:	0bef      	bt      	0x11025046	// 11025046 <yoc_spiflash_erase+0x12>
    for (i = 0; i < blkcnt; i++) {
1102506a:	2400      	addi      	r4, 1
1102506c:	07eb      	br      	0x11025042	// 11025042 <yoc_spiflash_erase+0xe>

1102506e <yoc_spiflash_program>:
{
1102506e:	14d1      	push      	r4, r15
    int ret = csi_spiflash_program(flash->handle, flash->info->start + dstaddr, srcbuf, bytesize);
11025070:	9086      	ld.w      	r4, (r0, 0x18)
11025072:	9005      	ld.w      	r0, (r0, 0x14)
11025074:	9480      	ld.w      	r4, (r4, 0x0)
11025076:	6050      	addu      	r1, r4
11025078:	e3fff654 	bsr      	0x11023d20	// 11023d20 <csi_spiflash_program>
    return ret < 0 ? -EIO : 0;
1102507c:	3300      	movi      	r3, 0
1102507e:	38df      	btsti      	r0, 31
11025080:	3000      	movi      	r0, 0
11025082:	2b04      	subi      	r3, 5
11025084:	c4030c40 	inct      	r0, r3, 0
}
11025088:	1491      	pop      	r4, r15

1102508a <yoc_spiflash_read>:
{
1102508a:	14d1      	push      	r4, r15
    ret = csi_spiflash_read(flash->handle, flash->info->start + addroff, buff, bytesize);
1102508c:	9086      	ld.w      	r4, (r0, 0x18)
1102508e:	9005      	ld.w      	r0, (r0, 0x14)
11025090:	9480      	ld.w      	r4, (r4, 0x0)
11025092:	6050      	addu      	r1, r4
11025094:	e3fff5d2 	bsr      	0x11023c38	// 11023c38 <csi_spiflash_read>
    return ret < 0 ? -EIO : 0;
11025098:	3300      	movi      	r3, 0
1102509a:	38df      	btsti      	r0, 31
1102509c:	3000      	movi      	r0, 0
1102509e:	2b04      	subi      	r3, 5
110250a0:	c4030c40 	inct      	r0, r3, 0
}
110250a4:	1491      	pop      	r4, r15

110250a6 <yoc_spiflash_close>:
{
110250a6:	14d0      	push      	r15
    csi_spiflash_uninitialize(flash->handle);
110250a8:	9005      	ld.w      	r0, (r0, 0x14)
110250aa:	e3fff5b7 	bsr      	0x11023c18	// 11023c18 <csi_spiflash_uninitialize>
}
110250ae:	3000      	movi      	r0, 0
110250b0:	1490      	pop      	r15

110250b2 <yoc_spiflash_open>:
{
110250b2:	14d1      	push      	r4, r15
110250b4:	6d03      	mov      	r4, r0
    flash->handle = csi_spiflash_initialize(dev->id, NULL);
110250b6:	3100      	movi      	r1, 0
110250b8:	8004      	ld.b      	r0, (r0, 0x4)
110250ba:	e3fff587 	bsr      	0x11023bc8	// 11023bc8 <csi_spiflash_initialize>
    if (flash->handle == NULL) {
110250be:	3840      	cmpnei      	r0, 0
    flash->handle = csi_spiflash_initialize(dev->id, NULL);
110250c0:	b405      	st.w      	r0, (r4, 0x14)
    if (flash->handle == NULL) {
110250c2:	0c06      	bf      	0x110250ce	// 110250ce <yoc_spiflash_open+0x1c>
    flash->info = csi_spiflash_get_info(flash->handle);
110250c4:	e3fff6e2 	bsr      	0x11023e88	// 11023e88 <csi_spiflash_get_info>
110250c8:	b406      	st.w      	r0, (r4, 0x18)
    return 0;
110250ca:	3000      	movi      	r0, 0
}
110250cc:	1491      	pop      	r4, r15
        return -1;
110250ce:	3000      	movi      	r0, 0
110250d0:	2800      	subi      	r0, 1
110250d2:	07fd      	br      	0x110250cc	// 110250cc <yoc_spiflash_open+0x1a>

110250d4 <yoc_spiflash_lpm>:
{
110250d4:	14d0      	push      	r15
    if (state) {
110250d6:	3940      	cmpnei      	r1, 0
110250d8:	0c05      	bf      	0x110250e2	// 110250e2 <yoc_spiflash_lpm+0xe>
        csi_spiflash_power_down(flash);
110250da:	e3fff56f 	bsr      	0x11023bb8	// 11023bb8 <csi_spiflash_power_down>
}
110250de:	3000      	movi      	r0, 0
110250e0:	1490      	pop      	r15
        csi_spiflash_release_power_down(flash);
110250e2:	e3fff56f 	bsr      	0x11023bc0	// 11023bc0 <csi_spiflash_release_power_down>
110250e6:	07fc      	br      	0x110250de	// 110250de <yoc_spiflash_lpm+0xa>

110250e8 <yoc_spiflash_init>:
{
110250e8:	14d0      	push      	r15
    flash_dev_t *dev = (flash_dev_t*)device_new(drv, sizeof(flash_dev_t), id);
110250ea:	311c      	movi      	r1, 28
110250ec:	e3ffe58c 	bsr      	0x11021c04	// 11021c04 <device_new>
}
110250f0:	1490      	pop      	r15
	...

110250f4 <spiflash_csky_register>:
    .erase      = yoc_spiflash_erase,
    .get_info   = yoc_spiflash_get_info,
};

void spiflash_csky_register(int idx)
{
110250f4:	14d0      	push      	r15
110250f6:	6c83      	mov      	r2, r0
    driver_register(&flash_driver.drv, NULL, idx);
110250f8:	3100      	movi      	r1, 0
110250fa:	1003      	lrw      	r0, 0x1fffa5a0	// 11025104 <spiflash_csky_register+0x10>
110250fc:	e3ffe5da 	bsr      	0x11021cb0	// 11021cb0 <driver_register>
}
11025100:	1490      	pop      	r15
11025102:	0000      	bkpt
11025104:	1fffa5a0 	.long	0x1fffa5a0

11025108 <LL_ChannelSelectionAlgorithmCback>:
 * @return      None.
 */
void LL_ChannelSelectionAlgorithmCback(uint16 connHandle,
                                       uint8  chnSel
                                      )
{
11025108:	14d3      	push      	r4-r6, r15
    // check if this is for the Host
    if (hciGapTaskID != 0) {
1102510a:	10de      	lrw      	r6, 0x1fff0f82	// 11025180 <LL_ChannelSelectionAlgorithmCback+0x78>
{
1102510c:	6d03      	mov      	r4, r0
    if (hciGapTaskID != 0) {
1102510e:	8660      	ld.b      	r3, (r6, 0x0)
{
11025110:	6d47      	mov      	r5, r1
    if (hciGapTaskID != 0) {
11025112:	3b40      	cmpnei      	r3, 0
11025114:	0c14      	bf      	0x1102513c	// 1102513c <LL_ChannelSelectionAlgorithmCback+0x34>
        hciEvt_ChannelSelAlgo_t *pkt;

        pkt = (hciEvt_ChannelSelAlgo_t *)osal_msg_allocate(sizeof(hciEvt_ChannelSelAlgo_t));
11025116:	3008      	movi      	r0, 8
11025118:	e0001e3a 	bsr      	0x11028d8c	// 11028d8c <cpu_task_stack_init+0x3e4>
1102511c:	6c43      	mov      	r1, r0

        if (pkt) {
1102511e:	3840      	cmpnei      	r0, 0
11025120:	0c0d      	bf      	0x1102513a	// 1102513a <LL_ChannelSelectionAlgorithmCback+0x32>
            pkt->hdr.event = HCI_GAP_EVENT_EVENT;
11025122:	3300      	movi      	r3, 0
11025124:	2b6e      	subi      	r3, 111
11025126:	a060      	st.b      	r3, (r0, 0x0)
            pkt->hdr.status = HCI_LE_EVENT_CODE;
11025128:	333e      	movi      	r3, 62
            pkt->BLEEventCode = HCI_LE_CHANNEL_SELECTION_ALGORITHM_EVENT;

            pkt->connHandle  = connHandle;
1102512a:	a882      	st.h      	r4, (r0, 0x4)
            pkt->hdr.status = HCI_LE_EVENT_CODE;
1102512c:	a061      	st.b      	r3, (r0, 0x1)
            pkt->BLEEventCode = HCI_LE_CHANNEL_SELECTION_ALGORITHM_EVENT;
1102512e:	3314      	movi      	r3, 20
            pkt->chn_sel     = chnSel;
11025130:	a0a6      	st.b      	r5, (r0, 0x6)
            pkt->BLEEventCode = HCI_LE_CHANNEL_SELECTION_ALGORITHM_EVENT;
11025132:	a062      	st.b      	r3, (r0, 0x2)

            (void)osal_msg_send(hciGapTaskID, (uint8 *)pkt);
11025134:	8600      	ld.b      	r0, (r6, 0x0)
            msg->pData[4] = LO_UINT16(connHandle);
            msg->pData[5] = HI_UINT16(connHandle);
            msg->pData[6] = chnSel;

            // send the message
            (void)osal_msg_send(hciTaskID, (uint8 *)msg);
11025136:	e0001f69 	bsr      	0x11029008	// 11029008 <cpu_task_stack_init+0x660>
        }
    }
}
1102513a:	1493      	pop      	r4-r6, r15
        if (((pHciEvtMask[HCI_EVT_INDEX_LE] & HCI_EVT_MASK_LE) == 0)) {
1102513c:	1072      	lrw      	r3, 0x1fff0f78	// 11025184 <LL_ChannelSelectionAlgorithmCback+0x7c>
1102513e:	8367      	ld.b      	r3, (r3, 0x7)
11025140:	e4632020 	andi      	r3, r3, 32
11025144:	3b40      	cmpnei      	r3, 0
11025146:	0ffa      	bf      	0x1102513a	// 1102513a <LL_ChannelSelectionAlgorithmCback+0x32>
        msg = (hciPacket_t *)osal_msg_allocate(totalLength);
11025148:	300f      	movi      	r0, 15
1102514a:	e0001e21 	bsr      	0x11028d8c	// 11028d8c <cpu_task_stack_init+0x3e4>
1102514e:	6c43      	mov      	r1, r0
        if (msg) {
11025150:	3840      	cmpnei      	r0, 0
11025152:	0ff4      	bf      	0x1102513a	// 1102513a <LL_ChannelSelectionAlgorithmCback+0x32>
            msg->hdr.event  = HCI_CTRL_TO_HOST_EVENT;
11025154:	3301      	movi      	r3, 1
            msg->pData    = (uint8 *)(msg + 1);
11025156:	585e      	addi      	r2, r0, 8
            msg->hdr.event  = HCI_CTRL_TO_HOST_EVENT;
11025158:	a060      	st.b      	r3, (r0, 0x0)
            msg->hdr.status = 0xFF;
1102515a:	3300      	movi      	r3, 0
1102515c:	2b00      	subi      	r3, 1
1102515e:	a061      	st.b      	r3, (r0, 0x1)
            msg->pData[0] = HCI_EVENT_PACKET;
11025160:	3304      	movi      	r3, 4
            msg->pData    = (uint8 *)(msg + 1);
11025162:	b041      	st.w      	r2, (r0, 0x4)
            msg->pData[0] = HCI_EVENT_PACKET;
11025164:	a068      	st.b      	r3, (r0, 0x8)
            msg->pData[1] = HCI_LE_EVENT_CODE;
11025166:	333e      	movi      	r3, 62
            (void)osal_msg_send(hciTaskID, (uint8 *)msg);
11025168:	1048      	lrw      	r2, 0x1fff0f80	// 11025188 <LL_ChannelSelectionAlgorithmCback+0x80>
            msg->pData[1] = HCI_LE_EVENT_CODE;
1102516a:	a069      	st.b      	r3, (r0, 0x9)
            msg->pData[2] = dataLength;
1102516c:	3304      	movi      	r3, 4
            msg->pData[4] = LO_UINT16(connHandle);
1102516e:	a08c      	st.b      	r4, (r0, 0xc)
            msg->pData[2] = dataLength;
11025170:	a06a      	st.b      	r3, (r0, 0xa)
            msg->pData[3] = HCI_LE_CHANNEL_SELECTION_ALGORITHM_EVENT;     // event code
11025172:	3314      	movi      	r3, 20
            msg->pData[5] = HI_UINT16(connHandle);
11025174:	4c88      	lsri      	r4, r4, 8
            msg->pData[3] = HCI_LE_CHANNEL_SELECTION_ALGORITHM_EVENT;     // event code
11025176:	a06b      	st.b      	r3, (r0, 0xb)
            msg->pData[5] = HI_UINT16(connHandle);
11025178:	a08d      	st.b      	r4, (r0, 0xd)
            msg->pData[6] = chnSel;
1102517a:	a0ae      	st.b      	r5, (r0, 0xe)
            (void)osal_msg_send(hciTaskID, (uint8 *)msg);
1102517c:	8200      	ld.b      	r0, (r2, 0x0)
1102517e:	07dc      	br      	0x11025136	// 11025136 <LL_ChannelSelectionAlgorithmCback+0x2e>
11025180:	1fff0f82 	.long	0x1fff0f82
11025184:	1fff0f78 	.long	0x1fff0f78
11025188:	1fff0f80 	.long	0x1fff0f80

1102518c <LL_EnhConnectionCompleteCback>:
                                   uint8  *peerRpaAddr,
                                   uint16 connInterval,
                                   uint16 slaveLatency,
                                   uint16 connTimeout,
                                   uint8  clockAccuracy)
{
1102518c:	14d4      	push      	r4-r7, r15
1102518e:	1429      	subi      	r14, r14, 36
11025190:	6d83      	mov      	r6, r0
11025192:	b864      	st.w      	r3, (r14, 0x10)
11025194:	986e      	ld.w      	r3, (r14, 0x38)
11025196:	b843      	st.w      	r2, (r14, 0xc)
11025198:	b860      	st.w      	r3, (r14, 0x0)
1102519a:	986f      	ld.w      	r3, (r14, 0x3c)
1102519c:	6d07      	mov      	r4, r1
1102519e:	b865      	st.w      	r3, (r14, 0x14)
110251a0:	9870      	ld.w      	r3, (r14, 0x40)
110251a2:	d8ee1026 	ld.h      	r7, (r14, 0x4c)
110251a6:	b866      	st.w      	r3, (r14, 0x18)
110251a8:	d86e1022 	ld.h      	r3, (r14, 0x44)
110251ac:	b861      	st.w      	r3, (r14, 0x4)
110251ae:	d86e1024 	ld.h      	r3, (r14, 0x48)
110251b2:	b862      	st.w      	r3, (r14, 0x8)
110251b4:	d86e0050 	ld.b      	r3, (r14, 0x50)
110251b8:	b867      	st.w      	r3, (r14, 0x1c)
    // check if this is for the Host
    if (hciGapTaskID != 0) {
110251ba:	1274      	lrw      	r3, 0x1fff0f82	// 11025308 <LL_EnhConnectionCompleteCback+0x17c>
110251bc:	8340      	ld.b      	r2, (r3, 0x0)
110251be:	b868      	st.w      	r3, (r14, 0x20)
110251c0:	3a40      	cmpnei      	r2, 0
110251c2:	0c43      	bf      	0x11025248	// 11025248 <LL_EnhConnectionCompleteCback+0xbc>
        hciEvt_BLEEnhConnComplete_t *pkt;

        pkt = (hciEvt_BLEEnhConnComplete_t *)osal_msg_allocate(sizeof(hciEvt_BLEEnhConnComplete_t));
110251c4:	3022      	movi      	r0, 34
110251c6:	e0001de3 	bsr      	0x11028d8c	// 11028d8c <cpu_task_stack_init+0x3e4>
110251ca:	6d43      	mov      	r5, r0

        if (pkt) {
110251cc:	3840      	cmpnei      	r0, 0
110251ce:	0c34      	bf      	0x11025236	// 11025236 <LL_EnhConnectionCompleteCback+0xaa>
            pkt->hdr.event    = HCI_GAP_EVENT_EVENT;
110251d0:	3300      	movi      	r3, 0
110251d2:	2b6e      	subi      	r3, 111
110251d4:	a060      	st.b      	r3, (r0, 0x0)
            pkt->hdr.status   = HCI_LE_EVENT_CODE;
110251d6:	333e      	movi      	r3, 62
            pkt->BLEEventCode = HCI_BLE_ENHANCED_CONNECTION_COMPLETE_EVENT;

            if (reasonCode == LL_STATUS_SUCCESS) {
110251d8:	3e40      	cmpnei      	r6, 0
            pkt->hdr.status   = HCI_LE_EVENT_CODE;
110251da:	a061      	st.b      	r3, (r0, 0x1)
            pkt->BLEEventCode = HCI_BLE_ENHANCED_CONNECTION_COMPLETE_EVENT;
110251dc:	330a      	movi      	r3, 10
110251de:	a062      	st.b      	r3, (r0, 0x2)
110251e0:	2007      	addi      	r0, 8
            if (reasonCode == LL_STATUS_SUCCESS) {
110251e2:	082c      	bt      	0x1102523a	// 1102523a <LL_EnhConnectionCompleteCback+0xae>
                pkt->status = HCI_SUCCESS;
110251e4:	3300      	movi      	r3, 0
                (void)osal_memcpy(pkt->peerAddr, peerAddr, B_ADDR_LEN);
110251e6:	3206      	movi      	r2, 6
                pkt->status = HCI_SUCCESS;
110251e8:	a563      	st.b      	r3, (r5, 0x3)
                (void)osal_memcpy(pkt->peerAddr, peerAddr, B_ADDR_LEN);
110251ea:	9820      	ld.w      	r1, (r14, 0x0)
110251ec:	e0001d70 	bsr      	0x11028ccc	// 11028ccc <cpu_task_stack_init+0x324>

                (void)osal_memcpy(pkt->localRpaAddr, localRpaAddr, B_ADDR_LEN);
110251f0:	3206      	movi      	r2, 6
110251f2:	9825      	ld.w      	r1, (r14, 0x14)
110251f4:	e405000d 	addi      	r0, r5, 14
110251f8:	e0001d6a 	bsr      	0x11028ccc	// 11028ccc <cpu_task_stack_init+0x324>
                (void)osal_memcpy(pkt->peerRpaAddr, peerRpaAddr, B_ADDR_LEN);
110251fc:	3206      	movi      	r2, 6
110251fe:	9826      	ld.w      	r1, (r14, 0x18)
11025200:	e4050013 	addi      	r0, r5, 20
11025204:	e0001d64 	bsr      	0x11028ccc	// 11028ccc <cpu_task_stack_init+0x324>
                pkt->status = bleGAPConnNotAcceptable;
                (void)osal_memset(pkt->peerAddr, 0, B_ADDR_LEN);
            }

            pkt->connectionHandle = connHandle;
            pkt->role             = role;
11025208:	d86e000c 	ld.b      	r3, (r14, 0xc)
            pkt->connectionHandle = connHandle;
1102520c:	ad82      	st.h      	r4, (r5, 0x4)
            pkt->role             = role;
1102520e:	a566      	st.b      	r3, (r5, 0x6)
            pkt->peerAddrType     = peerAddrType;
11025210:	d86e0010 	ld.b      	r3, (r14, 0x10)
            pkt->connInterval     = connInterval;
            pkt->connLatency      = slaveLatency;
            pkt->connTimeout      = connTimeout;
11025214:	adef      	st.h      	r7, (r5, 0x1e)
            pkt->peerAddrType     = peerAddrType;
11025216:	a567      	st.b      	r3, (r5, 0x7)
            pkt->connInterval     = connInterval;
11025218:	d86e1002 	ld.h      	r3, (r14, 0x4)
1102521c:	ad6d      	st.h      	r3, (r5, 0x1a)
            pkt->connLatency      = slaveLatency;
1102521e:	d86e1004 	ld.h      	r3, (r14, 0x8)
11025222:	ad6e      	st.h      	r3, (r5, 0x1c)
            pkt->clockAccuracy    = clockAccuracy;
11025224:	d86e001c 	ld.b      	r3, (r14, 0x1c)
11025228:	dc650020 	st.b      	r3, (r5, 0x20)

            (void)osal_msg_send(hciGapTaskID, (uint8 *)pkt);
1102522c:	9868      	ld.w      	r3, (r14, 0x20)
            msg->pData[31] = LO_UINT16(connTimeout);                    // connectin timeout (LSB)
            msg->pData[32] = HI_UINT16(connTimeout);                    // connection timeout (MSB)
            msg->pData[33] = clockAccuracy;                             // clock accuracy

            // send the message
            (void)osal_msg_send(hciTaskID, (uint8 *)msg);
1102522e:	8300      	ld.b      	r0, (r3, 0x0)
11025230:	6c57      	mov      	r1, r5
11025232:	e0001eeb 	bsr      	0x11029008	// 11029008 <cpu_task_stack_init+0x660>
        }
    }
}
11025236:	1409      	addi      	r14, r14, 36
11025238:	1494      	pop      	r4-r7, r15
                pkt->status = bleGAPConnNotAcceptable;
1102523a:	3331      	movi      	r3, 49
                (void)osal_memset(pkt->peerAddr, 0, B_ADDR_LEN);
1102523c:	3206      	movi      	r2, 6
                pkt->status = bleGAPConnNotAcceptable;
1102523e:	a563      	st.b      	r3, (r5, 0x3)
                (void)osal_memset(pkt->peerAddr, 0, B_ADDR_LEN);
11025240:	3100      	movi      	r1, 0
11025242:	e0001d09 	bsr      	0x11028c54	// 11028c54 <cpu_task_stack_init+0x2ac>
11025246:	07e1      	br      	0x11025208	// 11025208 <LL_EnhConnectionCompleteCback+0x7c>
        if (((pHciEvtMask[HCI_EVT_INDEX_LE] & HCI_EVT_MASK_LE) == 0)) {
11025248:	1171      	lrw      	r3, 0x1fff0f78	// 1102530c <LL_EnhConnectionCompleteCback+0x180>
1102524a:	8367      	ld.b      	r3, (r3, 0x7)
1102524c:	e4632020 	andi      	r3, r3, 32
11025250:	3b40      	cmpnei      	r3, 0
11025252:	0ff2      	bf      	0x11025236	// 11025236 <LL_EnhConnectionCompleteCback+0xaa>
        msg = (hciPacket_t *)osal_msg_allocate(totalLength);
11025254:	302a      	movi      	r0, 42
11025256:	e0001d9b 	bsr      	0x11028d8c	// 11028d8c <cpu_task_stack_init+0x3e4>
1102525a:	6d43      	mov      	r5, r0
        if (msg) {
1102525c:	3840      	cmpnei      	r0, 0
1102525e:	0fec      	bf      	0x11025236	// 11025236 <LL_EnhConnectionCompleteCback+0xaa>
            msg->hdr.event  = HCI_CTRL_TO_HOST_EVENT;
11025260:	3301      	movi      	r3, 1
            if (reasonCode == LL_STATUS_SUCCESS) {
11025262:	3e40      	cmpnei      	r6, 0
            msg->hdr.event  = HCI_CTRL_TO_HOST_EVENT;
11025264:	a060      	st.b      	r3, (r0, 0x0)
            msg->hdr.status = 0xFF;
11025266:	3300      	movi      	r3, 0
11025268:	2b00      	subi      	r3, 1
1102526a:	a061      	st.b      	r3, (r0, 0x1)
            msg->pData    = (uint8 *)(msg + 1);
1102526c:	587e      	addi      	r3, r0, 8
1102526e:	b061      	st.w      	r3, (r0, 0x4)
            msg->pData[0] = HCI_EVENT_PACKET;
11025270:	3304      	movi      	r3, 4
            msg->pData[5] = LO_UINT16(connHandle);                      // connection handle (LSB)
11025272:	a08d      	st.b      	r4, (r0, 0xd)
            msg->pData[0] = HCI_EVENT_PACKET;
11025274:	a068      	st.b      	r3, (r0, 0x8)
            msg->pData[1] = HCI_LE_EVENT_CODE;
11025276:	333e      	movi      	r3, 62
            msg->pData[6] = HI_UINT16(connHandle);                      // connection handle (MSB)
11025278:	4c88      	lsri      	r4, r4, 8
            msg->pData[1] = HCI_LE_EVENT_CODE;
1102527a:	a069      	st.b      	r3, (r0, 0x9)
            msg->pData[2] = dataLength;
1102527c:	331f      	movi      	r3, 31
            msg->pData[4] = reasonCode;                                 // reason code
1102527e:	a0cc      	st.b      	r6, (r0, 0xc)
            msg->pData[2] = dataLength;
11025280:	a06a      	st.b      	r3, (r0, 0xa)
            msg->pData[3] = HCI_BLE_ENHANCED_CONNECTION_COMPLETE_EVENT;          // event code
11025282:	330a      	movi      	r3, 10
            msg->pData[6] = HI_UINT16(connHandle);                      // connection handle (MSB)
11025284:	a08e      	st.b      	r4, (r0, 0xe)
            msg->pData[3] = HCI_BLE_ENHANCED_CONNECTION_COMPLETE_EVENT;          // event code
11025286:	a06b      	st.b      	r3, (r0, 0xb)
            msg->pData[7] = role;                                       // role (master/slave)
11025288:	d86e000c 	ld.b      	r3, (r14, 0xc)
                (void)osal_memcpy(&msg->pData[9], peerAddr, B_ADDR_LEN);
1102528c:	3206      	movi      	r2, 6
            msg->pData[7] = role;                                       // role (master/slave)
1102528e:	a06f      	st.b      	r3, (r0, 0xf)
            msg->pData[8] = peerAddrType;                               // address type
11025290:	d86e0010 	ld.b      	r3, (r14, 0x10)
11025294:	a070      	st.b      	r3, (r0, 0x10)
11025296:	2010      	addi      	r0, 17
            if (reasonCode == LL_STATUS_SUCCESS) {
11025298:	0833      	bt      	0x110252fe	// 110252fe <LL_EnhConnectionCompleteCback+0x172>
                (void)osal_memcpy(&msg->pData[9], peerAddr, B_ADDR_LEN);
1102529a:	9820      	ld.w      	r1, (r14, 0x0)
1102529c:	e0001d18 	bsr      	0x11028ccc	// 11028ccc <cpu_task_stack_init+0x324>
                (void)osal_memcpy(&msg->pData[15], localRpaAddr, B_ADDR_LEN);
110252a0:	3206      	movi      	r2, 6
110252a2:	9825      	ld.w      	r1, (r14, 0x14)
110252a4:	9501      	ld.w      	r0, (r5, 0x4)
110252a6:	200e      	addi      	r0, 15
110252a8:	e0001d12 	bsr      	0x11028ccc	// 11028ccc <cpu_task_stack_init+0x324>
                (void)osal_memcpy(&msg->pData[21], peerRpaAddr, B_ADDR_LEN);
110252ac:	3206      	movi      	r2, 6
110252ae:	9826      	ld.w      	r1, (r14, 0x18)
110252b0:	9501      	ld.w      	r0, (r5, 0x4)
110252b2:	2014      	addi      	r0, 21
110252b4:	e0001d0c 	bsr      	0x11028ccc	// 11028ccc <cpu_task_stack_init+0x324>
            (void)osal_memcpy(&msg->pData[9], peerAddr, B_ADDR_LEN);
110252b8:	3206      	movi      	r2, 6
110252ba:	9820      	ld.w      	r1, (r14, 0x0)
110252bc:	9501      	ld.w      	r0, (r5, 0x4)
110252be:	2008      	addi      	r0, 9
110252c0:	e0001d06 	bsr      	0x11028ccc	// 11028ccc <cpu_task_stack_init+0x324>
            msg->pData[27] = LO_UINT16(connInterval);                   // connection interval (LSB)
110252c4:	9561      	ld.w      	r3, (r5, 0x4)
110252c6:	d84e0004 	ld.b      	r2, (r14, 0x4)
110252ca:	a35b      	st.b      	r2, (r3, 0x1b)
            msg->pData[28] = HI_UINT16(connInterval);                   // connection interval (MSB)
110252cc:	9861      	ld.w      	r3, (r14, 0x4)
110252ce:	9541      	ld.w      	r2, (r5, 0x4)
110252d0:	4b68      	lsri      	r3, r3, 8
110252d2:	a27c      	st.b      	r3, (r2, 0x1c)
            msg->pData[29] = LO_UINT16(slaveLatency);                   // slave latency (LSB)
110252d4:	d84e0008 	ld.b      	r2, (r14, 0x8)
110252d8:	9561      	ld.w      	r3, (r5, 0x4)
110252da:	a35d      	st.b      	r2, (r3, 0x1d)
            msg->pData[30] = HI_UINT16(slaveLatency);                   // slave latency (LSB)
110252dc:	9862      	ld.w      	r3, (r14, 0x8)
110252de:	9541      	ld.w      	r2, (r5, 0x4)
110252e0:	4b68      	lsri      	r3, r3, 8
110252e2:	a27e      	st.b      	r3, (r2, 0x1e)
            msg->pData[31] = LO_UINT16(connTimeout);                    // connectin timeout (LSB)
110252e4:	9561      	ld.w      	r3, (r5, 0x4)
110252e6:	a3ff      	st.b      	r7, (r3, 0x1f)
            msg->pData[32] = HI_UINT16(connTimeout);                    // connection timeout (MSB)
110252e8:	4f68      	lsri      	r3, r7, 8
110252ea:	9541      	ld.w      	r2, (r5, 0x4)
110252ec:	dc620020 	st.b      	r3, (r2, 0x20)
            msg->pData[33] = clockAccuracy;                             // clock accuracy
110252f0:	d84e001c 	ld.b      	r2, (r14, 0x1c)
110252f4:	9561      	ld.w      	r3, (r5, 0x4)
110252f6:	dc430021 	st.b      	r2, (r3, 0x21)
            (void)osal_msg_send(hciTaskID, (uint8 *)msg);
110252fa:	1066      	lrw      	r3, 0x1fff0f80	// 11025310 <LL_EnhConnectionCompleteCback+0x184>
110252fc:	0799      	br      	0x1102522e	// 1102522e <LL_EnhConnectionCompleteCback+0xa2>
                (void)osal_memset(&msg->pData[9], 0, B_ADDR_LEN);
110252fe:	3100      	movi      	r1, 0
11025300:	e0001caa 	bsr      	0x11028c54	// 11028c54 <cpu_task_stack_init+0x2ac>
11025304:	07da      	br      	0x110252b8	// 110252b8 <LL_EnhConnectionCompleteCback+0x12c>
11025306:	0000      	bkpt
11025308:	1fff0f82 	.long	0x1fff0f82
1102530c:	1fff0f78 	.long	0x1fff0f78
11025310:	1fff0f80 	.long	0x1fff0f80

11025314 <isEnhConnCmpEvtSupport>:
}

uint8 isEnhConnCmpEvtSupport(void)
{
    //printf("bleEvtMask:%08x\n",bleEvtMask);
    if (bleEvtMask & LE_EVT_MASK_ENH_CONN_CMP)
11025314:	1063      	lrw      	r3, 0x1fff0f74	// 11025320 <isEnhConnCmpEvtSupport+0xc>
11025316:	9300      	ld.w      	r0, (r3, 0x0)
11025318:	4809      	lsri      	r0, r0, 9
1102531a:	e4002001 	andi      	r0, r0, 1
		return TRUE;

	return FALSE;		
}
1102531e:	783c      	jmp      	r15
11025320:	1fff0f74 	.long	0x1fff0f74

11025324 <bt_crypto_rand>:
{
    return 0;
}

int bt_crypto_rand(void *buf, size_t len)
{
11025324:	14d3      	push      	r4-r6, r15
11025326:	1422      	subi      	r14, r14, 8
11025328:	6d43      	mov      	r5, r0
    uint8_t tmp[8];
    uint8_t *pdata = buf;

    if (buf == NULL || len <= 0) {
1102532a:	3840      	cmpnei      	r0, 0
{
1102532c:	6d07      	mov      	r4, r1
    if (buf == NULL || len <= 0) {
1102532e:	0c20      	bf      	0x1102536e	// 1102536e <bt_crypto_rand+0x4a>
11025330:	3940      	cmpnei      	r1, 0
11025332:	0c1e      	bf      	0x1102536e	// 1102536e <bt_crypto_rand+0x4a>
11025334:	6d87      	mov      	r6, r1
        return -1;
    }

    while (len > 8) {
11025336:	3e08      	cmphsi      	r6, 9
11025338:	5c19      	subu      	r0, r4, r6
1102533a:	6014      	addu      	r0, r5
1102533c:	0815      	bt      	0x11025366	// 11025366 <bt_crypto_rand+0x42>
        len -= 8;
        pdata += 8;
    }

    if (len) {
        hci_api_le_rand(tmp);
1102533e:	6c3b      	mov      	r0, r14
11025340:	5c63      	subi      	r3, r4, 1
11025342:	3200      	movi      	r2, 0
11025344:	2a07      	subi      	r2, 8
11025346:	688c      	and      	r2, r3
11025348:	610a      	subu      	r4, r2
1102534a:	3200      	movi      	r2, 0
1102534c:	2a07      	subi      	r2, 8
1102534e:	68c8      	and      	r3, r2
11025350:	614c      	addu      	r5, r3
11025352:	e0000703 	bsr      	0x11026158	// 11026158 <hci_api_le_rand>
        memcpy(pdata, tmp, len);
11025356:	6c93      	mov      	r2, r4
11025358:	6c7b      	mov      	r1, r14
1102535a:	6c17      	mov      	r0, r5
1102535c:	e0001e32 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
    }

    return 0;
11025360:	3000      	movi      	r0, 0
}
11025362:	1402      	addi      	r14, r14, 8
11025364:	1493      	pop      	r4-r6, r15
        hci_api_le_rand(pdata);
11025366:	e00006f9 	bsr      	0x11026158	// 11026158 <hci_api_le_rand>
        len -= 8;
1102536a:	2e07      	subi      	r6, 8
1102536c:	07e5      	br      	0x11025336	// 11025336 <bt_crypto_rand+0x12>
        return -1;
1102536e:	3000      	movi      	r0, 0
11025370:	2800      	subi      	r0, 1
11025372:	07f8      	br      	0x11025362	// 11025362 <bt_crypto_rand+0x3e>

11025374 <hci_event>:
}
11025374:	783c      	jmp      	r15

11025376 <h5_hw_init_ready_timeout_handler>:
}
11025376:	783c      	jmp      	r15

11025378 <h5_enqueue>:
{
11025378:	14d1      	push      	r4, r15
1102537a:	1421      	subi      	r14, r14, 4
1102537c:	b800      	st.w      	r0, (r14, 0x0)
    if (hci_skb_get_data_length(skb) > 0xFFF) {
1102537e:	e0001bd5 	bsr      	0x11028b28	// 11028b28 <cpu_task_stack_init+0x180>
11025382:	eb000fff 	cmphsi      	r0, 4096
11025386:	0c05      	bf      	0x11025390	// 11025390 <h5_enqueue+0x18>
            hci_skb_free(&skb);
11025388:	6c3b      	mov      	r0, r14
1102538a:	e0001cad 	bsr      	0x11028ce4	// 11028ce4 <cpu_task_stack_init+0x33c>
            break;
1102538e:	0431      	br      	0x110253f0	// 110253f0 <h5_enqueue+0x78>
    switch (hci_skb_get_pkt_type(skb)) {
11025390:	9860      	ld.w      	r3, (r14, 0x0)
11025392:	6c0f      	mov      	r0, r3
11025394:	e0002038 	bsr      	0x11029404	// 11029404 <cpu_task_stack_init+0xa5c>
11025398:	380f      	cmphsi      	r0, 16
1102539a:	0bf7      	bt      	0x11025388	// 11025388 <h5_enqueue+0x10>
1102539c:	3301      	movi      	r3, 1
1102539e:	c4034020 	lsl      	r0, r3, r0
110253a2:	ea03c001 	movi      	r3, 49153
110253a6:	68c0      	and      	r3, r0
110253a8:	3b40      	cmpnei      	r3, 0
110253aa:	0826      	bt      	0x110253f6	// 110253f6 <h5_enqueue+0x7e>
110253ac:	e4602016 	andi      	r3, r0, 22
110253b0:	3b40      	cmpnei      	r3, 0
110253b2:	0810      	bt      	0x110253d2	// 110253d2 <h5_enqueue+0x5a>
110253b4:	3380      	movi      	r3, 128
110253b6:	4366      	lsli      	r3, r3, 6
110253b8:	680c      	and      	r0, r3
110253ba:	3840      	cmpnei      	r0, 0
110253bc:	0fe6      	bf      	0x11025388	// 11025388 <h5_enqueue+0x10>
            aos_mutex_lock(&rtk_h5.data_mutex, AOS_WAIT_FOREVER);
110253be:	1094      	lrw      	r4, 0x1fffb908	// 1102540c <h5_enqueue+0x94>
110253c0:	3100      	movi      	r1, 0
110253c2:	e404006f 	addi      	r0, r4, 112
110253c6:	2900      	subi      	r1, 1
110253c8:	e3ffe160 	bsr      	0x11021688	// 11021688 <aos_mutex_lock>
            hci_skb_queue_tail(rtk_h5.adv_unref, skb);/* 3-wire LinkEstablishment*/
110253cc:	9820      	ld.w      	r1, (r14, 0x0)
110253ce:	9406      	ld.w      	r0, (r4, 0x18)
110253d0:	040a      	br      	0x110253e4	// 110253e4 <h5_enqueue+0x6c>
            aos_mutex_lock(&rtk_h5.data_mutex, AOS_WAIT_FOREVER);
110253d2:	108f      	lrw      	r4, 0x1fffb908	// 1102540c <h5_enqueue+0x94>
110253d4:	3100      	movi      	r1, 0
110253d6:	e404006f 	addi      	r0, r4, 112
110253da:	2900      	subi      	r1, 1
110253dc:	e3ffe156 	bsr      	0x11021688	// 11021688 <aos_mutex_lock>
            hci_skb_queue_tail(rtk_h5.rel, skb);
110253e0:	9820      	ld.w      	r1, (r14, 0x0)
110253e2:	9403      	ld.w      	r0, (r4, 0xc)
            hci_skb_queue_tail(rtk_h5.unrel, skb);/* 3-wire LinkEstablishment*/
110253e4:	e0001b6c 	bsr      	0x11028abc	// 11028abc <cpu_task_stack_init+0x114>
            aos_mutex_unlock(&rtk_h5.data_mutex);
110253e8:	e404006f 	addi      	r0, r4, 112
110253ec:	e3ffe17a 	bsr      	0x110216e0	// 110216e0 <aos_mutex_unlock>
}
110253f0:	3000      	movi      	r0, 0
110253f2:	1401      	addi      	r14, r14, 4
110253f4:	1491      	pop      	r4, r15
            aos_mutex_lock(&rtk_h5.data_mutex, AOS_WAIT_FOREVER);
110253f6:	1086      	lrw      	r4, 0x1fffb908	// 1102540c <h5_enqueue+0x94>
110253f8:	3100      	movi      	r1, 0
110253fa:	e404006f 	addi      	r0, r4, 112
110253fe:	2900      	subi      	r1, 1
11025400:	e3ffe144 	bsr      	0x11021688	// 11021688 <aos_mutex_lock>
            hci_skb_queue_tail(rtk_h5.unrel, skb);/* 3-wire LinkEstablishment*/
11025404:	9820      	ld.w      	r1, (r14, 0x0)
11025406:	9404      	ld.w      	r0, (r4, 0x10)
11025408:	07ee      	br      	0x110253e4	// 110253e4 <h5_enqueue+0x6c>
1102540a:	0000      	bkpt
1102540c:	1fffb908 	.long	0x1fffb908

11025410 <h5_retransfer_signal_event>:
{
11025410:	14d3      	push      	r4-r6, r15
11025412:	6d83      	mov      	r6, r0
    aos_mutex_lock(&rtk_h5.mutex, AOS_WAIT_FOREVER);
11025414:	108b      	lrw      	r4, 0x1fffb908	// 11025440 <h5_retransfer_signal_event+0x30>
11025416:	e4a40063 	addi      	r5, r4, 100
1102541a:	6c17      	mov      	r0, r5
1102541c:	3100      	movi      	r1, 0
1102541e:	2900      	subi      	r1, 1
11025420:	e3ffe134 	bsr      	0x11021688	// 11021688 <aos_mutex_lock>
    h5_ready_events |= event;
11025424:	1048      	lrw      	r2, 0x1fffb900	// 11025444 <h5_retransfer_signal_event+0x34>
    aos_sem_signal(&rtk_h5.cond);
11025426:	e4040067 	addi      	r0, r4, 104
    h5_ready_events |= event;
1102542a:	8a60      	ld.h      	r3, (r2, 0x0)
1102542c:	74cd      	zexth      	r3, r3
1102542e:	6cd8      	or      	r3, r6
11025430:	aa60      	st.h      	r3, (r2, 0x0)
    aos_sem_signal(&rtk_h5.cond);
11025432:	e3ffe1ab 	bsr      	0x11021788	// 11021788 <aos_sem_signal>
    aos_mutex_unlock(&rtk_h5.mutex);
11025436:	6c17      	mov      	r0, r5
11025438:	e3ffe154 	bsr      	0x110216e0	// 110216e0 <aos_mutex_unlock>
}
1102543c:	1493      	pop      	r4-r6, r15
1102543e:	0000      	bkpt
11025440:	1fffb908 	.long	0x1fffb908
11025444:	1fffb900 	.long	0x1fffb900

11025448 <OsAllocateTimer>:
{
11025448:	14d2      	push      	r4-r5, r15
1102544a:	1422      	subi      	r14, r14, 8
1102544c:	6d43      	mov      	r5, r0
    timer = malloc(sizeof(aos_timer_t));
1102544e:	3004      	movi      	r0, 4
11025450:	e000156e 	bsr      	0x11027f2c	// 11027f2c <malloc>
11025454:	6d03      	mov      	r4, r0
    if (timer == NULL) {
11025456:	3840      	cmpnei      	r0, 0
11025458:	0c0c      	bf      	0x11025470	// 11025470 <OsAllocateTimer+0x28>
    ret = aos_timer_new_ext(timer, timer_callback, NULL, 0xFFFFFFUL, 0, 0);
1102545a:	3300      	movi      	r3, 0
1102545c:	3200      	movi      	r2, 0
1102545e:	b861      	st.w      	r3, (r14, 0x4)
11025460:	b860      	st.w      	r3, (r14, 0x0)
11025462:	6c57      	mov      	r1, r5
11025464:	c6e05023 	bmaski      	r3, 24
11025468:	e3ffe1a8 	bsr      	0x110217b8	// 110217b8 <aos_timer_new_ext>
    if (ret == 0) {
1102546c:	3840      	cmpnei      	r0, 0
1102546e:	0c02      	bf      	0x11025472	// 11025472 <OsAllocateTimer+0x2a>
        return NULL;
11025470:	3400      	movi      	r4, 0
}
11025472:	6c13      	mov      	r0, r4
11025474:	1402      	addi      	r14, r14, 8
11025476:	1492      	pop      	r4-r5, r15

11025478 <hci_h5_int_init>:
{
11025478:	14d2      	push      	r4-r5, r15
1102547a:	1422      	subi      	r14, r14, 8
    h5_int_hal_callbacks = h5_callbacks;
1102547c:	1267      	lrw      	r3, 0x1fffb8fc	// 11025598 <hci_h5_int_init+0x120>
    memset(&rtk_h5, 0, sizeof(tHCI_H5_CB));
1102547e:	1288      	lrw      	r4, 0x1fffb908	// 1102559c <hci_h5_int_init+0x124>
11025480:	3100      	movi      	r1, 0
    h5_int_hal_callbacks = h5_callbacks;
11025482:	b300      	st.w      	r0, (r3, 0x0)
    memset(&rtk_h5, 0, sizeof(tHCI_H5_CB));
11025484:	3284      	movi      	r2, 132
11025486:	6c13      	mov      	r0, r4
    if (h5_data_ready_running) {
11025488:	12a6      	lrw      	r5, 0x1fffb8f9	// 110255a0 <hci_h5_int_init+0x128>
    memset(&rtk_h5, 0, sizeof(tHCI_H5_CB));
1102548a:	e3ffbdc1 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
    num_hci_h5_cmd_pkts = 1;
1102548e:	3201      	movi      	r2, 1
11025490:	1265      	lrw      	r3, 0x1fffa5d8	// 110255a4 <hci_h5_int_init+0x12c>
    rtk_h5.timer_data_retrans = OsAllocateTimer(h5_retransfer_timeout_handler);
11025492:	1206      	lrw      	r0, 0x110256e0	// 110255a8 <hci_h5_int_init+0x130>
    num_hci_h5_cmd_pkts = 1;
11025494:	b340      	st.w      	r2, (r3, 0x0)
    rtk_h5.timer_data_retrans = OsAllocateTimer(h5_retransfer_timeout_handler);
11025496:	e3ffffd9 	bsr      	0x11025448	// 11025448 <OsAllocateTimer>
    rtk_h5.timer_data_retrans_start = 0;
1102549a:	3300      	movi      	r3, 0
    rtk_h5.timer_data_retrans = OsAllocateTimer(h5_retransfer_timeout_handler);
1102549c:	b410      	st.w      	r0, (r4, 0x40)
    rtk_h5.timer_data_retrans_start = 0;
1102549e:	dc640044 	st.b      	r3, (r4, 0x44)
** h5 sync retrans timer functions
*/
static int h5_alloc_sync_retrans_timer()
{
    // Create and set the timer when to expire
    rtk_h5.timer_sync_retrans = OsAllocateTimer(h5_sync_retrans_timeout_handler);
110254a2:	1203      	lrw      	r0, 0x11025dfc	// 110255ac <hci_h5_int_init+0x134>
110254a4:	e3ffffd2 	bsr      	0x11025448	// 11025448 <OsAllocateTimer>
110254a8:	b412      	st.w      	r0, (r4, 0x48)
** h5 config retrans timer functions
*/
static int h5_alloc_conf_retrans_timer()
{
    // Create and set the timer when to expire
    rtk_h5.timer_conf_retrans = OsAllocateTimer(h5_conf_retrans_timeout_handler);
110254aa:	1202      	lrw      	r0, 0x11025e28	// 110255b0 <hci_h5_int_init+0x138>
110254ac:	e3ffffce 	bsr      	0x11025448	// 11025448 <OsAllocateTimer>
110254b0:	b413      	st.w      	r0, (r4, 0x4c)
** h5 wait controller baudrate ready timer functions
*/
static int h5_alloc_wait_controller_baudrate_ready_timer()
{
    // Create and set the timer when to expire
    rtk_h5.timer_wait_ct_baudrate_ready = OsAllocateTimer(h5_wait_controller_baudrate_ready_timeout_handler);
110254b2:	1201      	lrw      	r0, 0x11025700	// 110255b4 <hci_h5_int_init+0x13c>
110254b4:	e3ffffca 	bsr      	0x11025448	// 11025448 <OsAllocateTimer>
110254b8:	b414      	st.w      	r0, (r4, 0x50)
** h5 hw init ready timer functions
*/
static int h5_alloc_hw_init_ready_timer()
{
    // Create and set the timer when to expire
    rtk_h5.timer_h5_hw_init_ready = OsAllocateTimer(h5_hw_init_ready_timeout_handler);
110254ba:	1200      	lrw      	r0, 0x11025376	// 110255b8 <hci_h5_int_init+0x140>
110254bc:	e3ffffc6 	bsr      	0x11025448	// 11025448 <OsAllocateTimer>
110254c0:	b415      	st.w      	r0, (r4, 0x54)
    aos_mutex_new(&h5_wakeup_mutex);
110254c2:	111f      	lrw      	r0, 0x1fffb904	// 110255bc <hci_h5_int_init+0x144>
110254c4:	e3ffe2b2 	bsr      	0x11021a28	// 11021a28 <aos_mutex_new>
    rtk_h5.recv_data = RtbQueueInit();
110254c8:	e0001bb4 	bsr      	0x11028c30	// 11028c30 <cpu_task_stack_init+0x288>
    if (h5_data_ready_running) {
110254cc:	8560      	ld.b      	r3, (r5, 0x0)
    h5_data_ready_running = 1;
110254ce:	3301      	movi      	r3, 1
    rtk_h5.recv_data = RtbQueueInit();
110254d0:	b405      	st.w      	r0, (r4, 0x14)
    h5_data_ready_running = 1;
110254d2:	a560      	st.b      	r3, (r5, 0x0)
    int ret = aos_mutex_new(&rtk_h5.data_mutex);
110254d4:	e404006f 	addi      	r0, r4, 112
110254d8:	e3ffe2a8 	bsr      	0x11021a28	// 11021a28 <aos_mutex_new>
    if (ret != 0) {
110254dc:	3840      	cmpnei      	r0, 0
110254de:	080c      	bt      	0x110254f6	// 110254f6 <hci_h5_int_init+0x7e>
    ret = aos_sem_new(&rtk_h5.data_cond, 0);
110254e0:	3100      	movi      	r1, 0
110254e2:	e4040073 	addi      	r0, r4, 116
110254e6:	e3ffe2ed 	bsr      	0x11021ac0	// 11021ac0 <aos_sem_new>
    if (ret != 0) {
110254ea:	3840      	cmpnei      	r0, 0
110254ec:	0c3c      	bf      	0x11025564	// 11025564 <hci_h5_int_init+0xec>
        aos_mutex_free(&rtk_h5.data_mutex);
110254ee:	e404006f 	addi      	r0, r4, 112
110254f2:	e3ffe2c9 	bsr      	0x11021a84	// 11021a84 <aos_mutex_free>
    if (h5_retransfer_running) {
110254f6:	11b3      	lrw      	r5, 0x1fffb902	// 110255c0 <hci_h5_int_init+0x148>
    h5_ready_events = 0;
110254f8:	3200      	movi      	r2, 0
    if (h5_retransfer_running) {
110254fa:	8560      	ld.b      	r3, (r5, 0x0)
    h5_retransfer_running = 1;
110254fc:	3301      	movi      	r3, 1
    aos_mutex_new(&rtk_h5.mutex);
110254fe:	1112      	lrw      	r0, 0x1fffb96c	// 110255c4 <hci_h5_int_init+0x14c>
    h5_retransfer_running = 1;
11025500:	a560      	st.b      	r3, (r5, 0x0)
    h5_ready_events = 0;
11025502:	1172      	lrw      	r3, 0x1fffb900	// 110255c8 <hci_h5_int_init+0x150>
11025504:	ab40      	st.h      	r2, (r3, 0x0)
    aos_mutex_new(&rtk_h5.mutex);
11025506:	e3ffe291 	bsr      	0x11021a28	// 11021a28 <aos_mutex_new>
    aos_sem_new(&rtk_h5.cond, 0);
1102550a:	3100      	movi      	r1, 0
1102550c:	1110      	lrw      	r0, 0x1fffb970	// 110255cc <hci_h5_int_init+0x154>
1102550e:	e3ffe2d9 	bsr      	0x11021ac0	// 11021ac0 <aos_sem_new>
    if (aos_task_new_ext(&rtk_h5.thread_data_retrans, "data_retransfer",
11025512:	3306      	movi      	r3, 6
11025514:	114f      	lrw      	r2, 0x1102597c	// 110255d0 <hci_h5_int_init+0x158>
11025516:	1130      	lrw      	r1, 0x11011c52	// 110255d4 <hci_h5_int_init+0x15c>
11025518:	1110      	lrw      	r0, 0x1fffb974	// 110255d8 <hci_h5_int_init+0x160>
1102551a:	b861      	st.w      	r3, (r14, 0x4)
1102551c:	3380      	movi      	r3, 128
1102551e:	4363      	lsli      	r3, r3, 3
11025520:	b860      	st.w      	r3, (r14, 0x0)
11025522:	3300      	movi      	r3, 0
11025524:	e3ffe07e 	bsr      	0x11021620	// 11021620 <aos_task_new_ext>
11025528:	3840      	cmpnei      	r0, 0
1102552a:	0c03      	bf      	0x11025530	// 11025530 <hci_h5_int_init+0xb8>
        h5_retransfer_running = 0;
1102552c:	3300      	movi      	r3, 0
1102552e:	a560      	st.b      	r3, (r5, 0x0)
    rtk_h5.unack = RtbQueueInit();
11025530:	e0001b80 	bsr      	0x11028c30	// 11028c30 <cpu_task_stack_init+0x288>
11025534:	b402      	st.w      	r0, (r4, 0x8)
    rtk_h5.rel   = RtbQueueInit();
11025536:	e0001b7d 	bsr      	0x11028c30	// 11028c30 <cpu_task_stack_init+0x288>
1102553a:	b403      	st.w      	r0, (r4, 0xc)
    rtk_h5.unrel = RtbQueueInit();
1102553c:	e0001b7a 	bsr      	0x11028c30	// 11028c30 <cpu_task_stack_init+0x288>
11025540:	b404      	st.w      	r0, (r4, 0x10)
    rtk_h5.adv_unref = RtbQueueInit();
11025542:	e0001b77 	bsr      	0x11028c30	// 11028c30 <cpu_task_stack_init+0x288>
    rtk_h5.rx_state = H5_W4_PKT_DELIMITER;
11025546:	3300      	movi      	r3, 0
    rtk_h5.adv_unref = RtbQueueInit();
11025548:	b406      	st.w      	r0, (r4, 0x18)
    rtk_h5.rx_state = H5_W4_PKT_DELIMITER;
1102554a:	b46a      	st.w      	r3, (r4, 0x28)
    rtk_h5.rx_esc_state = H5_ESCSTATE_NOESC;
1102554c:	b46b      	st.w      	r3, (r4, 0x2c)
    rtk_h5.hci_dev = hci_open("hci");
1102554e:	1104      	lrw      	r0, 0x11011c62	// 110255dc <hci_h5_int_init+0x164>
11025550:	e3ffe44a 	bsr      	0x11021de4	// 11021de4 <device_open>
    hci_set_event(rtk_h5.hci_dev, hci_event, NULL);
11025554:	3200      	movi      	r2, 0
11025556:	1123      	lrw      	r1, 0x11025374	// 110255e0 <hci_h5_int_init+0x168>
    rtk_h5.hci_dev = hci_open("hci");
11025558:	dc042020 	st.w      	r0, (r4, 0x80)
    hci_set_event(rtk_h5.hci_dev, hci_event, NULL);
1102555c:	e3ffe536 	bsr      	0x11021fc8	// 11021fc8 <hci_set_event>
}
11025560:	1402      	addi      	r14, r14, 8
11025562:	1492      	pop      	r4-r5, r15
    if (aos_task_new_ext(&rtk_h5.thread_data_ready_cb, "data_ready_cb",
11025564:	3306      	movi      	r3, 6
11025566:	1140      	lrw      	r2, 0x110255ec	// 110255e4 <hci_h5_int_init+0x16c>
11025568:	1120      	lrw      	r1, 0x11011c44	// 110255e8 <hci_h5_int_init+0x170>
1102556a:	e4040077 	addi      	r0, r4, 120
1102556e:	b861      	st.w      	r3, (r14, 0x4)
11025570:	3380      	movi      	r3, 128
11025572:	4363      	lsli      	r3, r3, 3
11025574:	b860      	st.w      	r3, (r14, 0x0)
11025576:	3300      	movi      	r3, 0
11025578:	e3ffe054 	bsr      	0x11021620	// 11021620 <aos_task_new_ext>
1102557c:	3840      	cmpnei      	r0, 0
1102557e:	0fbc      	bf      	0x110254f6	// 110254f6 <hci_h5_int_init+0x7e>
        h5_data_ready_running = 0;
11025580:	3300      	movi      	r3, 0
        aos_mutex_free(&rtk_h5.data_mutex);
11025582:	e404006f 	addi      	r0, r4, 112
        h5_data_ready_running = 0;
11025586:	a560      	st.b      	r3, (r5, 0x0)
        aos_mutex_free(&rtk_h5.data_mutex);
11025588:	e3ffe27e 	bsr      	0x11021a84	// 11021a84 <aos_mutex_free>
        aos_sem_free(&rtk_h5.data_cond);
1102558c:	e4040073 	addi      	r0, r4, 116
11025590:	e3ffe2c8 	bsr      	0x11021b20	// 11021b20 <aos_sem_free>
11025594:	07b1      	br      	0x110254f6	// 110254f6 <hci_h5_int_init+0x7e>
11025596:	0000      	bkpt
11025598:	1fffb8fc 	.long	0x1fffb8fc
1102559c:	1fffb908 	.long	0x1fffb908
110255a0:	1fffb8f9 	.long	0x1fffb8f9
110255a4:	1fffa5d8 	.long	0x1fffa5d8
110255a8:	110256e0 	.long	0x110256e0
110255ac:	11025dfc 	.long	0x11025dfc
110255b0:	11025e28 	.long	0x11025e28
110255b4:	11025700 	.long	0x11025700
110255b8:	11025376 	.long	0x11025376
110255bc:	1fffb904 	.long	0x1fffb904
110255c0:	1fffb902 	.long	0x1fffb902
110255c4:	1fffb96c 	.long	0x1fffb96c
110255c8:	1fffb900 	.long	0x1fffb900
110255cc:	1fffb970 	.long	0x1fffb970
110255d0:	1102597c 	.long	0x1102597c
110255d4:	11011c52 	.long	0x11011c52
110255d8:	1fffb974 	.long	0x1fffb974
110255dc:	11011c62 	.long	0x11011c62
110255e0:	11025374 	.long	0x11025374
110255e4:	110255ec 	.long	0x110255ec
110255e8:	11011c44 	.long	0x11011c44

110255ec <data_ready_cb_thread>:
{
110255ec:	14d4      	push      	r4-r7, r15
110255ee:	1421      	subi      	r14, r14, 4
    while (h5_data_ready_running) {
110255f0:	10de      	lrw      	r6, 0x1fffb8f9	// 11025668 <data_ready_cb_thread+0x7c>
        while ((hci_skb_queue_get_length(rtk_h5.recv_data) == 0)) {
110255f2:	109f      	lrw      	r4, 0x1fffb908	// 1102566c <data_ready_cb_thread+0x80>
    while (h5_data_ready_running) {
110255f4:	8660      	ld.b      	r3, (r6, 0x0)
110255f6:	3b40      	cmpnei      	r3, 0
110255f8:	0803      	bt      	0x110255fe	// 110255fe <data_ready_cb_thread+0x12>
}
110255fa:	1401      	addi      	r14, r14, 4
110255fc:	1494      	pop      	r4-r7, r15
        aos_sem_wait(&rtk_h5.data_cond, AOS_WAIT_FOREVER);
110255fe:	101d      	lrw      	r0, 0x1fffb97c	// 11025670 <data_ready_cb_thread+0x84>
11025600:	3100      	movi      	r1, 0
            aos_sem_wait(&rtk_h5.data_cond, AOS_WAIT_FOREVER);
11025602:	10bc      	lrw      	r5, 0x1fffb97c	// 11025670 <data_ready_cb_thread+0x84>
        aos_sem_wait(&rtk_h5.data_cond, AOS_WAIT_FOREVER);
11025604:	2900      	subi      	r1, 1
11025606:	e3ffe095 	bsr      	0x11021730	// 11021730 <aos_sem_wait>
        while ((hci_skb_queue_get_length(rtk_h5.recv_data) == 0)) {
1102560a:	9405      	ld.w      	r0, (r4, 0x14)
1102560c:	e0001c50 	bsr      	0x11028eac	// 11028eac <cpu_task_stack_init+0x504>
            aos_sem_wait(&rtk_h5.data_cond, AOS_WAIT_FOREVER);
11025610:	3100      	movi      	r1, 0
        while ((hci_skb_queue_get_length(rtk_h5.recv_data) == 0)) {
11025612:	3840      	cmpnei      	r0, 0
            aos_sem_wait(&rtk_h5.data_cond, AOS_WAIT_FOREVER);
11025614:	2900      	subi      	r1, 1
        while ((hci_skb_queue_get_length(rtk_h5.recv_data) == 0)) {
11025616:	0c24      	bf      	0x1102565e	// 1102565e <data_ready_cb_thread+0x72>
        aos_mutex_lock(&rtk_h5.data_mutex, AOS_WAIT_FOREVER);
11025618:	1017      	lrw      	r0, 0x1fffb978	// 11025674 <data_ready_cb_thread+0x88>
1102561a:	e3ffe037 	bsr      	0x11021688	// 11021688 <aos_mutex_lock>
        if ((skb = hci_skb_dequeue_head(rtk_h5.recv_data)) != NULL) {
1102561e:	9405      	ld.w      	r0, (r4, 0x14)
11025620:	e0001bec 	bsr      	0x11028df8	// 11028df8 <cpu_task_stack_init+0x450>
11025624:	3840      	cmpnei      	r0, 0
11025626:	0c02      	bf      	0x1102562a	// 1102562a <data_ready_cb_thread+0x3e>
            rtk_h5.data_skb = skb;
11025628:	b40e      	st.w      	r0, (r4, 0x38)
        aos_mutex_unlock(&rtk_h5.data_mutex);
1102562a:	1013      	lrw      	r0, 0x1fffb978	// 11025674 <data_ready_cb_thread+0x88>
1102562c:	e3ffe05a 	bsr      	0x110216e0	// 110216e0 <aos_mutex_unlock>
        int length = hci_skb_get_data_length(rtk_h5.data_skb);
11025630:	940e      	ld.w      	r0, (r4, 0x38)
11025632:	e0001a7b 	bsr      	0x11028b28	// 11028b28 <cpu_task_stack_init+0x180>
        if (h5_int_hal_callbacks) {
11025636:	1071      	lrw      	r3, 0x1fffb8fc	// 11025678 <data_ready_cb_thread+0x8c>
        int length = hci_skb_get_data_length(rtk_h5.data_skb);
11025638:	b800      	st.w      	r0, (r14, 0x0)
        if (h5_int_hal_callbacks) {
1102563a:	93a0      	ld.w      	r5, (r3, 0x0)
1102563c:	3d40      	cmpnei      	r5, 0
1102563e:	0c0c      	bf      	0x11025656	// 11025656 <data_ready_cb_thread+0x6a>
            h5_int_hal_callbacks(hci_skb_get_pkt_type(rtk_h5.data_skb),
11025640:	940e      	ld.w      	r0, (r4, 0x38)
11025642:	e0001ee1 	bsr      	0x11029404	// 11029404 <cpu_task_stack_init+0xa5c>
11025646:	6dc3      	mov      	r7, r0
11025648:	940e      	ld.w      	r0, (r4, 0x38)
1102564a:	e0001ea1 	bsr      	0x1102938c	// 1102938c <cpu_task_stack_init+0x9e4>
1102564e:	9840      	ld.w      	r2, (r14, 0x0)
11025650:	6c43      	mov      	r1, r0
11025652:	6c1f      	mov      	r0, r7
11025654:	7bd5      	jsr      	r5
        hci_skb_free(&rtk_h5.data_skb);
11025656:	100a      	lrw      	r0, 0x1fffb940	// 1102567c <data_ready_cb_thread+0x90>
11025658:	e0001b46 	bsr      	0x11028ce4	// 11028ce4 <cpu_task_stack_init+0x33c>
1102565c:	07cc      	br      	0x110255f4	// 110255f4 <data_ready_cb_thread+0x8>
            aos_sem_wait(&rtk_h5.data_cond, AOS_WAIT_FOREVER);
1102565e:	6c17      	mov      	r0, r5
11025660:	e3ffe068 	bsr      	0x11021730	// 11021730 <aos_sem_wait>
11025664:	07d3      	br      	0x1102560a	// 1102560a <data_ready_cb_thread+0x1e>
11025666:	0000      	bkpt
11025668:	1fffb8f9 	.long	0x1fffb8f9
1102566c:	1fffb908 	.long	0x1fffb908
11025670:	1fffb97c 	.long	0x1fffb97c
11025674:	1fffb978 	.long	0x1fffb978
11025678:	1fffb8fc 	.long	0x1fffb8fc
1102567c:	1fffb940 	.long	0x1fffb940

11025680 <OsStartTimer>:
{
11025680:	14d3      	push      	r4-r6, r15
11025682:	6d03      	mov      	r4, r0
11025684:	6d47      	mov      	r5, r1
11025686:	6d8b      	mov      	r6, r2
    if (!aos_timer_is_valid(timerid)) {
11025688:	e3ffe17a 	bsr      	0x1102197c	// 1102197c <aos_timer_is_valid>
1102568c:	3840      	cmpnei      	r0, 0
1102568e:	0c0d      	bf      	0x110256a8	// 110256a8 <OsStartTimer+0x28>
    ret = aos_timer_stop(timerid);
11025690:	6c13      	mov      	r0, r4
11025692:	e3ffe105 	bsr      	0x1102189c	// 1102189c <aos_timer_stop>
    if (mode) {
11025696:	3e40      	cmpnei      	r6, 0
        ret = aos_timer_change(timerid, msec);
11025698:	6c57      	mov      	r1, r5
1102569a:	6c13      	mov      	r0, r4
    if (mode) {
1102569c:	0c08      	bf      	0x110256ac	// 110256ac <OsStartTimer+0x2c>
        ret = aos_timer_change(timerid, msec);
1102569e:	e3ffe11b 	bsr      	0x110218d4	// 110218d4 <aos_timer_change>
    ret = aos_timer_start(timerid);
110256a2:	6c13      	mov      	r0, r4
110256a4:	e3ffe0e0 	bsr      	0x11021864	// 11021864 <aos_timer_start>
}
110256a8:	3000      	movi      	r0, 0
110256aa:	1493      	pop      	r4-r6, r15
        ret = aos_timer_change_once(timerid, msec);
110256ac:	e3ffe142 	bsr      	0x11021930	// 11021930 <aos_timer_change_once>
110256b0:	07f9      	br      	0x110256a2	// 110256a2 <OsStartTimer+0x22>
	...

110256b4 <h5_start_conf_retrans_timer>:
{
110256b4:	14d0      	push      	r15
    return OsStartTimer(rtk_h5.timer_conf_retrans, CONF_RETRANS_TIMEOUT_VALUE, 1);
110256b6:	1065      	lrw      	r3, 0x1fffb908	// 110256c8 <h5_start_conf_retrans_timer+0x14>
110256b8:	31fa      	movi      	r1, 250
110256ba:	9313      	ld.w      	r0, (r3, 0x4c)
110256bc:	3201      	movi      	r2, 1
110256be:	4121      	lsli      	r1, r1, 1
110256c0:	e3ffffe0 	bsr      	0x11025680	// 11025680 <OsStartTimer>
}
110256c4:	1490      	pop      	r15
110256c6:	0000      	bkpt
110256c8:	1fffb908 	.long	0x1fffb908

110256cc <h5_start_sync_retrans_timer>:
{
110256cc:	14d0      	push      	r15
    return OsStartTimer(rtk_h5.timer_sync_retrans, SYNC_RETRANS_TIMEOUT_VALUE, 1);
110256ce:	1064      	lrw      	r3, 0x1fffb908	// 110256dc <h5_start_sync_retrans_timer+0x10>
110256d0:	3201      	movi      	r2, 1
110256d2:	9312      	ld.w      	r0, (r3, 0x48)
110256d4:	31fa      	movi      	r1, 250
110256d6:	e3ffffd5 	bsr      	0x11025680	// 11025680 <OsStartTimer>
}
110256da:	1490      	pop      	r15
110256dc:	1fffb908 	.long	0x1fffb908

110256e0 <h5_retransfer_timeout_handler>:
{
110256e0:	14d1      	push      	r4, r15
    if (rtk_h5.cleanuping) {
110256e2:	1087      	lrw      	r4, 0x1fffb908	// 110256fc <h5_retransfer_timeout_handler+0x1c>
110256e4:	d864007c 	ld.b      	r3, (r4, 0x7c)
110256e8:	3b40      	cmpnei      	r3, 0
110256ea:	0807      	bt      	0x110256f8	// 110256f8 <h5_retransfer_timeout_handler+0x18>
    h5_retransfer_signal_event(H5_EVENT_RX);
110256ec:	3001      	movi      	r0, 1
110256ee:	e3fffe91 	bsr      	0x11025410	// 11025410 <h5_retransfer_signal_event>
    rtk_h5.timer_data_retrans_start = 0;
110256f2:	3300      	movi      	r3, 0
110256f4:	dc640044 	st.b      	r3, (r4, 0x44)
}
110256f8:	1491      	pop      	r4, r15
110256fa:	0000      	bkpt
110256fc:	1fffb908 	.long	0x1fffb908

11025700 <h5_wait_controller_baudrate_ready_timeout_handler>:
{
11025700:	14d1      	push      	r4, r15
    if (rtk_h5.cleanuping) {
11025702:	1093      	lrw      	r4, 0x1fffb908	// 1102574c <h5_wait_controller_baudrate_ready_timeout_handler+0x4c>
11025704:	d864007c 	ld.b      	r3, (r4, 0x7c)
11025708:	3b40      	cmpnei      	r3, 0
1102570a:	946f      	ld.w      	r3, (r4, 0x3c)
1102570c:	0c08      	bf      	0x1102571c	// 1102571c <h5_wait_controller_baudrate_ready_timeout_handler+0x1c>
        if (rtk_h5.internal_skb) {
1102570e:	3b40      	cmpnei      	r3, 0
11025710:	0c05      	bf      	0x1102571a	// 1102571a <h5_wait_controller_baudrate_ready_timeout_handler+0x1a>
            hci_skb_free(&rtk_h5.internal_skb);
11025712:	e404003b 	addi      	r0, r4, 60
11025716:	e0001ae7 	bsr      	0x11028ce4	// 11028ce4 <cpu_task_stack_init+0x33c>
}
1102571a:	1491      	pop      	r4, r15
    if (rtk_h5.internal_skb == NULL) {
1102571c:	3b40      	cmpnei      	r3, 0
1102571e:	0ffe      	bf      	0x1102571a	// 1102571a <h5_wait_controller_baudrate_ready_timeout_handler+0x1a>
    aos_mutex_lock(&rtk_h5.data_mutex, AOS_WAIT_FOREVER);
11025720:	3100      	movi      	r1, 0
11025722:	e404006f 	addi      	r0, r4, 112
11025726:	2900      	subi      	r1, 1
11025728:	e3ffdfb0 	bsr      	0x11021688	// 11021688 <aos_mutex_lock>
    hci_skb_queue_tail(rtk_h5.recv_data, rtk_h5.internal_skb);
1102572c:	942f      	ld.w      	r1, (r4, 0x3c)
1102572e:	9405      	ld.w      	r0, (r4, 0x14)
11025730:	e00019c6 	bsr      	0x11028abc	// 11028abc <cpu_task_stack_init+0x114>
    aos_sem_signal(&rtk_h5.data_cond);
11025734:	e4040073 	addi      	r0, r4, 116
11025738:	e3ffe028 	bsr      	0x11021788	// 11021788 <aos_sem_signal>
    aos_mutex_unlock(&rtk_h5.data_mutex);
1102573c:	e404006f 	addi      	r0, r4, 112
11025740:	e3ffdfd0 	bsr      	0x110216e0	// 110216e0 <aos_mutex_unlock>
    rtk_h5.internal_skb = NULL;
11025744:	3300      	movi      	r3, 0
11025746:	b46f      	st.w      	r3, (r4, 0x3c)
11025748:	07e9      	br      	0x1102571a	// 1102571a <h5_wait_controller_baudrate_ready_timeout_handler+0x1a>
1102574a:	0000      	bkpt
1102574c:	1fffb908 	.long	0x1fffb908

11025750 <h5_prepare_pkt.constprop.13>:
static sk_buff *h5_prepare_pkt(tHCI_H5_CB *h5, uint8_t *data, signed long len, signed long pkt_type)
11025750:	14d4      	push      	r4-r7, r15
11025752:	1424      	subi      	r14, r14, 16
    uint16_t H5_CRC_INIT(h5_txmsg_crc);
11025754:	3300      	movi      	r3, 0
11025756:	3a0f      	cmphsi      	r2, 16
11025758:	2b00      	subi      	r3, 1
static sk_buff *h5_prepare_pkt(tHCI_H5_CB *h5, uint8_t *data, signed long len, signed long pkt_type)
1102575a:	b800      	st.w      	r0, (r14, 0x0)
1102575c:	6d87      	mov      	r6, r1
1102575e:	6dcb      	mov      	r7, r2
    uint16_t H5_CRC_INIT(h5_txmsg_crc);
11025760:	dc6e1005 	st.h      	r3, (r14, 0xa)
11025764:	0c05      	bf      	0x1102576e	// 1102576e <h5_prepare_pkt.constprop.13+0x1e>
            return NULL;
11025766:	3500      	movi      	r5, 0
}
11025768:	6c17      	mov      	r0, r5
1102576a:	1404      	addi      	r14, r14, 16
1102576c:	1494      	pop      	r4-r7, r15
1102576e:	3301      	movi      	r3, 1
11025770:	70c8      	lsl      	r3, r2
11025772:	e4232016 	andi      	r1, r3, 22
11025776:	3940      	cmpnei      	r1, 0
11025778:	087c      	bt      	0x11025870	// 11025870 <h5_prepare_pkt.constprop.13+0x120>
1102577a:	ea02e001 	movi      	r2, 57345
1102577e:	68c8      	and      	r3, r2
11025780:	3b40      	cmpnei      	r3, 0
11025782:	0ff2      	bf      	0x11025766	// 11025766 <h5_prepare_pkt.constprop.13+0x16>
            rel = H5_UNRELIABLE_PKT;// unreliable
11025784:	3400      	movi      	r4, 0
    nskb = hci_skb_alloc((len + 6) * 2 + 2);
11025786:	5e1a      	addi      	r0, r6, 7
11025788:	4001      	lsli      	r0, r0, 1
1102578a:	e000197b 	bsr      	0x11028a80	// 11028a80 <cpu_task_stack_init+0xd8>
1102578e:	6d43      	mov      	r5, r0
    if (!nskb) {
11025790:	3840      	cmpnei      	r0, 0
11025792:	0fea      	bf      	0x11025766	// 11025766 <h5_prepare_pkt.constprop.13+0x16>
    h5_slip_msgdelim(nskb);
11025794:	e0001a36 	bsr      	0x11028c00	// 11028c00 <cpu_task_stack_init+0x258>
    hdr[0] = h5->rxseq_txack << 3;
11025798:	113e      	lrw      	r1, 0x1fffb908	// 11025890 <h5_prepare_pkt.constprop.13+0x140>
    h5->is_txack_req = 0;
1102579a:	3200      	movi      	r2, 0
    hdr[0] = h5->rxseq_txack << 3;
1102579c:	817c      	ld.b      	r3, (r1, 0x1c)
1102579e:	4363      	lsli      	r3, r3, 3
    if (H5_RELIABLE_PKT == rel) {
110257a0:	3c41      	cmpnei      	r4, 1
    hdr[0] = h5->rxseq_txack << 3;
110257a2:	74cc      	zextb      	r3, r3
110257a4:	dc6e000c 	st.b      	r3, (r14, 0xc)
    h5->is_txack_req = 0;
110257a8:	a15f      	st.b      	r2, (r1, 0x1f)
110257aa:	6d07      	mov      	r4, r1
    if (H5_RELIABLE_PKT == rel) {
110257ac:	080d      	bt      	0x110257c6	// 110257c6 <h5_prepare_pkt.constprop.13+0x76>
        hdr[0] |= 0x80 + h5->msgq_txseq;
110257ae:	d8210020 	ld.b      	r1, (r1, 0x20)
110257b2:	e401107f 	subi      	r0, r1, 128
        ++(h5->msgq_txseq);
110257b6:	2100      	addi      	r1, 1
        hdr[0] |= 0x80 + h5->msgq_txseq;
110257b8:	6cc0      	or      	r3, r0
        h5->msgq_txseq = (h5->msgq_txseq) & 0x07;
110257ba:	e4212007 	andi      	r1, r1, 7
        hdr[0] |= 0x80 + h5->msgq_txseq;
110257be:	dc6e000c 	st.b      	r3, (r14, 0xc)
        h5->msgq_txseq = (h5->msgq_txseq) & 0x07;
110257c2:	dc240020 	st.b      	r1, (r4, 0x20)
    if (h5->use_crc) {
110257c6:	847e      	ld.b      	r3, (r4, 0x1e)
110257c8:	3b40      	cmpnei      	r3, 0
110257ca:	0c07      	bf      	0x110257d8	// 110257d8 <h5_prepare_pkt.constprop.13+0x88>
        hdr[0] |= 0x40;
110257cc:	d86e000c 	ld.b      	r3, (r14, 0xc)
110257d0:	ec630040 	ori      	r3, r3, 64
110257d4:	dc6e000c 	st.b      	r3, (r14, 0xc)
        pkt_type = HCI_EVENT_PKT;
110257d8:	3304      	movi      	r3, 4
110257da:	3f4d      	cmpnei      	r7, 13
110257dc:	c4e30c20 	incf      	r7, r3, 0
    hdr[1] = ((len << 4) & 0xff) | pkt_type;
110257e0:	4664      	lsli      	r3, r6, 4
110257e2:	c4e32422 	or      	r2, r3, r7
    hdr[2] = (uint8_t)(len >> 4);
110257e6:	5664      	asri      	r3, r6, 4
    hdr[1] = ((len << 4) & 0xff) | pkt_type;
110257e8:	7488      	zextb      	r2, r2
    hdr[2] = (uint8_t)(len >> 4);
110257ea:	74cc      	zextb      	r3, r3
    hdr[1] = ((len << 4) & 0xff) | pkt_type;
110257ec:	dc4e000d 	st.b      	r2, (r14, 0xd)
    hdr[2] = (uint8_t)(len >> 4);
110257f0:	dc6e000e 	st.b      	r3, (r14, 0xe)
    hdr[3] = ~(hdr[0] + hdr[1] + hdr[2]);
110257f4:	d82e000c 	ld.b      	r1, (r14, 0xc)
110257f8:	60c4      	addu      	r3, r1
110257fa:	608c      	addu      	r2, r3
110257fc:	6c8a      	nor      	r2, r2
110257fe:	dc4e000f 	st.b      	r2, (r14, 0xf)
    for (i = 0; i < 4; i++) {
11025802:	3700      	movi      	r7, 0
        h5_slip_one_byte(nskb, hdr[i]);
11025804:	1a03      	addi      	r2, r14, 12
11025806:	609c      	addu      	r2, r7
11025808:	8240      	ld.b      	r2, (r2, 0x0)
1102580a:	6c4b      	mov      	r1, r2
1102580c:	6c17      	mov      	r0, r5
1102580e:	b841      	st.w      	r2, (r14, 0x4)
11025810:	e00019da 	bsr      	0x11028bc4	// 11028bc4 <cpu_task_stack_init+0x21c>
        if (h5->use_crc) {
11025814:	843e      	ld.b      	r1, (r4, 0x1e)
11025816:	9841      	ld.w      	r2, (r14, 0x4)
11025818:	3940      	cmpnei      	r1, 0
1102581a:	0c06      	bf      	0x11025826	// 11025826 <h5_prepare_pkt.constprop.13+0xd6>
            h5_crc_update(&h5_txmsg_crc, hdr[i]);
1102581c:	6c4b      	mov      	r1, r2
1102581e:	e40e0009 	addi      	r0, r14, 10
11025822:	e00019e3 	bsr      	0x11028be8	// 11028be8 <cpu_task_stack_init+0x240>
    for (i = 0; i < 4; i++) {
11025826:	2700      	addi      	r7, 1
11025828:	3f44      	cmpnei      	r7, 4
1102582a:	0bed      	bt      	0x11025804	// 11025804 <h5_prepare_pkt.constprop.13+0xb4>
1102582c:	98e0      	ld.w      	r7, (r14, 0x0)
    for (i = 0; i < len; i++) {
1102582e:	9860      	ld.w      	r3, (r14, 0x0)
11025830:	5f4d      	subu      	r2, r7, r3
11025832:	6589      	cmplt      	r2, r6
11025834:	0820      	bt      	0x11025874	// 11025874 <h5_prepare_pkt.constprop.13+0x124>
    if (h5->use_crc) {
11025836:	847e      	ld.b      	r3, (r4, 0x1e)
11025838:	3b40      	cmpnei      	r3, 0
1102583a:	0c17      	bf      	0x11025868	// 11025868 <h5_prepare_pkt.constprop.13+0x118>
        h5_txmsg_crc = bit_rev16(h5_txmsg_crc);
1102583c:	d84e1005 	ld.h      	r2, (r14, 0xa)
    return byte_rev_table[byte];
11025840:	1075      	lrw      	r3, 0x11011b0f	// 11025894 <h5_prepare_pkt.constprop.13+0x144>
11025842:	7448      	zextb      	r1, r2
11025844:	604c      	addu      	r1, r3
    return (bit_rev8(x & 0xff) << 8) | bit_rev8(x >> 8);
11025846:	8120      	ld.b      	r1, (r1, 0x0)
    return byte_rev_table[byte];
11025848:	4a48      	lsri      	r2, r2, 8
1102584a:	60c8      	addu      	r3, r2
    return (bit_rev8(x & 0xff) << 8) | bit_rev8(x >> 8);
1102584c:	8360      	ld.b      	r3, (r3, 0x0)
1102584e:	4128      	lsli      	r1, r1, 8
11025850:	6c4c      	or      	r1, r3
        h5_txmsg_crc = bit_rev16(h5_txmsg_crc);
11025852:	dc2e1005 	st.h      	r1, (r14, 0xa)
        h5_slip_one_byte(nskb, (uint8_t)((h5_txmsg_crc >> 8) & 0x00ff));
11025856:	6c17      	mov      	r0, r5
11025858:	4928      	lsri      	r1, r1, 8
1102585a:	e00019b5 	bsr      	0x11028bc4	// 11028bc4 <cpu_task_stack_init+0x21c>
        h5_slip_one_byte(nskb, (uint8_t)(h5_txmsg_crc & 0x00ff));
1102585e:	d82e000a 	ld.b      	r1, (r14, 0xa)
11025862:	6c17      	mov      	r0, r5
11025864:	e00019b0 	bsr      	0x11028bc4	// 11028bc4 <cpu_task_stack_init+0x21c>
    h5_slip_msgdelim(nskb);
11025868:	6c17      	mov      	r0, r5
1102586a:	e00019cb 	bsr      	0x11028c00	// 11028c00 <cpu_task_stack_init+0x258>
1102586e:	077d      	br      	0x11025768	// 11025768 <h5_prepare_pkt.constprop.13+0x18>
            rel = H5_RELIABLE_PKT;  // reliable
11025870:	3401      	movi      	r4, 1
11025872:	078a      	br      	0x11025786	// 11025786 <h5_prepare_pkt.constprop.13+0x36>
        h5_slip_one_byte(nskb, data[i]);
11025874:	8720      	ld.b      	r1, (r7, 0x0)
11025876:	6c17      	mov      	r0, r5
11025878:	e00019a6 	bsr      	0x11028bc4	// 11028bc4 <cpu_task_stack_init+0x21c>
        if (h5->use_crc) {
1102587c:	845e      	ld.b      	r2, (r4, 0x1e)
1102587e:	3a40      	cmpnei      	r2, 0
11025880:	0c06      	bf      	0x1102588c	// 1102588c <h5_prepare_pkt.constprop.13+0x13c>
            h5_crc_update(&h5_txmsg_crc, data[i]);
11025882:	8720      	ld.b      	r1, (r7, 0x0)
11025884:	e40e0009 	addi      	r0, r14, 10
11025888:	e00019b0 	bsr      	0x11028be8	// 11028be8 <cpu_task_stack_init+0x240>
1102588c:	2700      	addi      	r7, 1
1102588e:	07d0      	br      	0x1102582e	// 1102582e <h5_prepare_pkt.constprop.13+0xde>
11025890:	1fffb908 	.long	0x1fffb908
11025894:	11011b0f 	.long	0x11011b0f

11025898 <hci_h5_send_conf_req>:
{
11025898:	14d0      	push      	r15
1102589a:	1421      	subi      	r14, r14, 4
    unsigned char h5conf[3] = {0x03, 0xFC, 0x14};
1102589c:	6c3b      	mov      	r0, r14
1102589e:	3203      	movi      	r2, 3
110258a0:	1028      	lrw      	r1, 0x110110c4	// 110258c0 <hci_h5_send_conf_req+0x28>
110258a2:	e0001b8f 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
    skb = hci_skb_alloc_and_init(H5_LINK_CTL_PKT, h5conf, sizeof(h5conf));
110258a6:	3203      	movi      	r2, 3
110258a8:	6c7b      	mov      	r1, r14
110258aa:	300f      	movi      	r0, 15
110258ac:	e0001b78 	bsr      	0x11028f9c	// 11028f9c <cpu_task_stack_init+0x5f4>
    if (!skb) {
110258b0:	3840      	cmpnei      	r0, 0
110258b2:	0c05      	bf      	0x110258bc	// 110258bc <hci_h5_send_conf_req+0x24>
    h5_enqueue(skb);
110258b4:	e3fffd62 	bsr      	0x11025378	// 11025378 <h5_enqueue>
    h5_wake_up();
110258b8:	e0001b2a 	bsr      	0x11028f0c	// 11028f0c <cpu_task_stack_init+0x564>
}
110258bc:	1401      	addi      	r14, r14, 4
110258be:	1490      	pop      	r15
110258c0:	110110c4 	.long	0x110110c4

110258c4 <hci_h5_send_sync_resp>:
{
110258c4:	14d0      	push      	r15
110258c6:	1421      	subi      	r14, r14, 4
    unsigned char h5syncresp[2] = {0x02, 0x7D};
110258c8:	3302      	movi      	r3, 2
    skb = hci_skb_alloc_and_init(H5_LINK_CTL_PKT, h5syncresp, sizeof(h5syncresp));
110258ca:	3202      	movi      	r2, 2
    unsigned char h5syncresp[2] = {0x02, 0x7D};
110258cc:	dc6e0000 	st.b      	r3, (r14, 0x0)
    skb = hci_skb_alloc_and_init(H5_LINK_CTL_PKT, h5syncresp, sizeof(h5syncresp));
110258d0:	6c7b      	mov      	r1, r14
    unsigned char h5syncresp[2] = {0x02, 0x7D};
110258d2:	337d      	movi      	r3, 125
    skb = hci_skb_alloc_and_init(H5_LINK_CTL_PKT, h5syncresp, sizeof(h5syncresp));
110258d4:	300f      	movi      	r0, 15
    unsigned char h5syncresp[2] = {0x02, 0x7D};
110258d6:	dc6e0001 	st.b      	r3, (r14, 0x1)
    skb = hci_skb_alloc_and_init(H5_LINK_CTL_PKT, h5syncresp, sizeof(h5syncresp));
110258da:	e0001b61 	bsr      	0x11028f9c	// 11028f9c <cpu_task_stack_init+0x5f4>
    if (!skb) {
110258de:	3840      	cmpnei      	r0, 0
110258e0:	0c05      	bf      	0x110258ea	// 110258ea <hci_h5_send_sync_resp+0x26>
    h5_enqueue(skb);
110258e2:	e3fffd4b 	bsr      	0x11025378	// 11025378 <h5_enqueue>
    h5_wake_up();
110258e6:	e0001b13 	bsr      	0x11028f0c	// 11028f0c <cpu_task_stack_init+0x564>
}
110258ea:	1401      	addi      	r14, r14, 4
110258ec:	1490      	pop      	r15

110258ee <hci_h5_send_sync_req>:
{
110258ee:	14d0      	push      	r15
110258f0:	1421      	subi      	r14, r14, 4
    unsigned char    h5sync[2]     = {0x01, 0x7E};
110258f2:	3301      	movi      	r3, 1
    skb = hci_skb_alloc_and_init(H5_LINK_CTL_PKT, h5sync, sizeof(h5sync));
110258f4:	3202      	movi      	r2, 2
    unsigned char    h5sync[2]     = {0x01, 0x7E};
110258f6:	dc6e0000 	st.b      	r3, (r14, 0x0)
    skb = hci_skb_alloc_and_init(H5_LINK_CTL_PKT, h5sync, sizeof(h5sync));
110258fa:	6c7b      	mov      	r1, r14
    unsigned char    h5sync[2]     = {0x01, 0x7E};
110258fc:	337e      	movi      	r3, 126
    skb = hci_skb_alloc_and_init(H5_LINK_CTL_PKT, h5sync, sizeof(h5sync));
110258fe:	300f      	movi      	r0, 15
    unsigned char    h5sync[2]     = {0x01, 0x7E};
11025900:	dc6e0001 	st.b      	r3, (r14, 0x1)
    skb = hci_skb_alloc_and_init(H5_LINK_CTL_PKT, h5sync, sizeof(h5sync));
11025904:	e0001b4c 	bsr      	0x11028f9c	// 11028f9c <cpu_task_stack_init+0x5f4>
    if (!skb) {
11025908:	3840      	cmpnei      	r0, 0
1102590a:	0c05      	bf      	0x11025914	// 11025914 <hci_h5_send_sync_req+0x26>
    h5_enqueue(skb);
1102590c:	e3fffd36 	bsr      	0x11025378	// 11025378 <h5_enqueue>
    h5_wake_up();
11025910:	e0001afe 	bsr      	0x11028f0c	// 11028f0c <cpu_task_stack_init+0x564>
}
11025914:	1401      	addi      	r14, r14, 4
11025916:	1490      	pop      	r15

11025918 <hci_h5_send_sync_cmd>:
{
11025918:	14d0      	push      	r15
    if (rtk_h5.link_estab_state == H5_UNINITIALIZED) {
1102591a:	104d      	lrw      	r2, 0x1fffb908	// 1102594c <hci_h5_send_sync_cmd+0x34>
1102591c:	926c      	ld.w      	r3, (r2, 0x30)
1102591e:	3b40      	cmpnei      	r3, 0
11025920:	0810      	bt      	0x11025940	// 11025940 <hci_h5_send_sync_cmd+0x28>
        if (opcode == HCI_VSC_H5_INIT) {
11025922:	eb40fcee 	cmpnei      	r0, 64750
11025926:	080b      	bt      	0x1102593c	// 1102593c <hci_h5_send_sync_cmd+0x24>
    return OsFreeTimer(rtk_h5.timer_h5_hw_init_ready);
}

static int h5_start_hw_init_ready_timer()
{
    return OsStartTimer(rtk_h5.timer_h5_hw_init_ready, H5_HW_INIT_READY_TIMEOUT_VALUE, 0);
11025928:	ea019c40 	movi      	r1, 40000
1102592c:	9215      	ld.w      	r0, (r2, 0x54)
1102592e:	3200      	movi      	r2, 0
11025930:	e3fffea8 	bsr      	0x11025680	// 11025680 <OsStartTimer>
            hci_h5_send_sync_req();
11025934:	e3ffffdd 	bsr      	0x110258ee	// 110258ee <hci_h5_send_sync_req>
            h5_start_sync_retrans_timer();
11025938:	e3fffeca 	bsr      	0x110256cc	// 110256cc <h5_start_sync_retrans_timer>
    return 1;
1102593c:	3001      	movi      	r0, 1
1102593e:	0405      	br      	0x11025948	// 11025948 <hci_h5_send_sync_cmd+0x30>
    } else if (rtk_h5.link_estab_state == H5_ACTIVE) {
11025940:	3b42      	cmpnei      	r3, 2
11025942:	c4000500 	mvc      	r0
        return 0;
11025946:	7400      	zextb      	r0, r0
}
11025948:	1490      	pop      	r15
1102594a:	0000      	bkpt
1102594c:	1fffb908 	.long	0x1fffb908

11025950 <hci_h5_send_conf_resp>:
{
11025950:	14d0      	push      	r15
11025952:	1421      	subi      	r14, r14, 4
    unsigned char h5confresp[3] = {0x04, 0x7B, 0x14};
11025954:	6c3b      	mov      	r0, r14
11025956:	3203      	movi      	r2, 3
11025958:	1028      	lrw      	r1, 0x110110c7	// 11025978 <hci_h5_send_conf_resp+0x28>
1102595a:	e0001b33 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
    skb = hci_skb_alloc_and_init(H5_LINK_CTL_PKT, h5confresp, sizeof(h5confresp));
1102595e:	3203      	movi      	r2, 3
11025960:	6c7b      	mov      	r1, r14
11025962:	300f      	movi      	r0, 15
11025964:	e0001b1c 	bsr      	0x11028f9c	// 11028f9c <cpu_task_stack_init+0x5f4>
    if (!skb) {
11025968:	3840      	cmpnei      	r0, 0
1102596a:	0c05      	bf      	0x11025974	// 11025974 <hci_h5_send_conf_resp+0x24>
    h5_enqueue(skb);
1102596c:	e3fffd06 	bsr      	0x11025378	// 11025378 <h5_enqueue>
    h5_wake_up();
11025970:	e0001ace 	bsr      	0x11028f0c	// 11028f0c <cpu_task_stack_init+0x564>
}
11025974:	1401      	addi      	r14, r14, 4
11025976:	1490      	pop      	r15
11025978:	110110c7 	.long	0x110110c7

1102597c <data_retransfer_thread>:
{
1102597c:	14d2      	push      	r4-r5, r15
        aos_sem_wait(&rtk_h5.cond, AOS_WAIT_FOREVER);
1102597e:	109b      	lrw      	r4, 0x1fffb908	// 110259e8 <data_retransfer_thread+0x6c>
11025980:	e4a40067 	addi      	r5, r4, 104
    while (h5_retransfer_running) {
11025984:	107a      	lrw      	r3, 0x1fffb902	// 110259ec <data_retransfer_thread+0x70>
11025986:	8360      	ld.b      	r3, (r3, 0x0)
11025988:	3b40      	cmpnei      	r3, 0
1102598a:	0c2e      	bf      	0x110259e6	// 110259e6 <data_retransfer_thread+0x6a>
        aos_sem_wait(&rtk_h5.cond, AOS_WAIT_FOREVER);
1102598c:	6c17      	mov      	r0, r5
1102598e:	3100      	movi      	r1, 0
11025990:	2900      	subi      	r1, 1
11025992:	e3ffdecf 	bsr      	0x11021730	// 11021730 <aos_sem_wait>
        events = h5_ready_events;
11025996:	1057      	lrw      	r2, 0x1fffb900	// 110259f0 <data_retransfer_thread+0x74>
        h5_ready_events = 0;
11025998:	3100      	movi      	r1, 0
        events = h5_ready_events;
1102599a:	8a60      	ld.h      	r3, (r2, 0x0)
1102599c:	74cd      	zexth      	r3, r3
        h5_ready_events = 0;
1102599e:	aa20      	st.h      	r1, (r2, 0x0)
        if (events & H5_EVENT_RX) {
110259a0:	e4432001 	andi      	r2, r3, 1
110259a4:	3a40      	cmpnei      	r2, 0
110259a6:	0c1c      	bf      	0x110259de	// 110259de <data_retransfer_thread+0x62>
            if (rtk_h5.data_retrans_count < DATA_RETRANS_COUNT) {
110259a8:	9476      	ld.w      	r3, (r4, 0x58)
110259aa:	eb030027 	cmphsi      	r3, 40
110259ae:	0beb      	bt      	0x11025984	// 11025984 <data_retransfer_thread+0x8>
                while ((skb = hci_skb_dequeue_tail(rtk_h5.unack)) != NULL) {
110259b0:	9402      	ld.w      	r0, (r4, 0x8)
110259b2:	e0001cf3 	bsr      	0x11029398	// 11029398 <cpu_task_stack_init+0x9f0>
110259b6:	6c43      	mov      	r1, r0
110259b8:	3840      	cmpnei      	r0, 0
110259ba:	0807      	bt      	0x110259c8	// 110259c8 <data_retransfer_thread+0x4c>
                rtk_h5.data_retrans_count++;
110259bc:	9476      	ld.w      	r3, (r4, 0x58)
110259be:	2300      	addi      	r3, 1
110259c0:	b476      	st.w      	r3, (r4, 0x58)
                h5_wake_up();
110259c2:	e0001aa5 	bsr      	0x11028f0c	// 11028f0c <cpu_task_stack_init+0x564>
110259c6:	07df      	br      	0x11025984	// 11025984 <data_retransfer_thread+0x8>
                    hci_skb_queue_head(rtk_h5.rel, skb);
110259c8:	9403      	ld.w      	r0, (r4, 0xc)
                    rtk_h5.msgq_txseq = (rtk_h5.msgq_txseq - 1) & 0x07;
110259ca:	d8640020 	ld.b      	r3, (r4, 0x20)
110259ce:	2b00      	subi      	r3, 1
110259d0:	e4632007 	andi      	r3, r3, 7
110259d4:	dc640020 	st.b      	r3, (r4, 0x20)
                    hci_skb_queue_head(rtk_h5.rel, skb);
110259d8:	e0001a5e 	bsr      	0x11028e94	// 11028e94 <cpu_task_stack_init+0x4ec>
110259dc:	07ea      	br      	0x110259b0	// 110259b0 <data_retransfer_thread+0x34>
        } else if (events & H5_EVENT_EXIT) {
110259de:	e4632200 	andi      	r3, r3, 512
110259e2:	3b40      	cmpnei      	r3, 0
110259e4:	0fd0      	bf      	0x11025984	// 11025984 <data_retransfer_thread+0x8>
}
110259e6:	1492      	pop      	r4-r5, r15
110259e8:	1fffb908 	.long	0x1fffb908
110259ec:	1fffb902 	.long	0x1fffb902
110259f0:	1fffb900 	.long	0x1fffb900

110259f4 <h5_complete_rx_pkt.constprop.11>:
static uint8_t h5_complete_rx_pkt(tHCI_H5_CB *h5)
110259f4:	14d4      	push      	r4-r7, r15
110259f6:	142b      	subi      	r14, r14, 44
    h5_hdr = (uint8_t *)hci_skb_get_data(h5->rx_skb);
110259f8:	0193      	lrw      	r4, 0x1fffb908	// 11025d28 <h5_complete_rx_pkt.constprop.11+0x334>
110259fa:	940d      	ld.w      	r0, (r4, 0x34)
110259fc:	e0001cc8 	bsr      	0x1102938c	// 1102938c <cpu_task_stack_init+0x9e4>
    if (H5_HDR_RELIABLE(h5_hdr)) {
11025a00:	8060      	ld.b      	r3, (r0, 0x0)
11025a02:	4b67      	lsri      	r3, r3, 7
    h5_hdr = (uint8_t *)hci_skb_get_data(h5->rx_skb);
11025a04:	6d43      	mov      	r5, r0
    if (H5_HDR_RELIABLE(h5_hdr)) {
11025a06:	3b40      	cmpnei      	r3, 0
11025a08:	0c12      	bf      	0x11025a2c	// 11025a2c <h5_complete_rx_pkt.constprop.11+0x38>
        aos_mutex_lock(&h5_wakeup_mutex, AOS_WAIT_FOREVER);
11025a0a:	0116      	lrw      	r0, 0x1fffb904	// 11025d2c <h5_complete_rx_pkt.constprop.11+0x338>
11025a0c:	3100      	movi      	r1, 0
11025a0e:	2900      	subi      	r1, 1
11025a10:	e3ffde3c 	bsr      	0x11021688	// 11021688 <aos_mutex_lock>
        h5->rxseq_txack = H5_HDR_SEQ(h5_hdr) + 1;
11025a14:	8560      	ld.b      	r3, (r5, 0x0)
11025a16:	2300      	addi      	r3, 1
        h5->rxseq_txack %= 8;
11025a18:	e4632007 	andi      	r3, r3, 7
11025a1c:	a47c      	st.b      	r3, (r4, 0x1c)
        h5->is_txack_req = 1;
11025a1e:	3301      	movi      	r3, 1
        aos_mutex_unlock(&h5_wakeup_mutex);
11025a20:	011c      	lrw      	r0, 0x1fffb904	// 11025d2c <h5_complete_rx_pkt.constprop.11+0x338>
        h5->is_txack_req = 1;
11025a22:	a47f      	st.b      	r3, (r4, 0x1f)
        aos_mutex_unlock(&h5_wakeup_mutex);
11025a24:	e3ffde5e 	bsr      	0x110216e0	// 110216e0 <aos_mutex_unlock>
        h5_wake_up();
11025a28:	e0001a72 	bsr      	0x11028f0c	// 11028f0c <cpu_task_stack_init+0x564>
    h5->rxack = H5_HDR_ACK(h5_hdr);
11025a2c:	8560      	ld.b      	r3, (r5, 0x0)
11025a2e:	4b63      	lsri      	r3, r3, 3
11025a30:	e4632007 	andi      	r3, r3, 7
11025a34:	a47d      	st.b      	r3, (r4, 0x1d)
    aos_mutex_lock(&h5_wakeup_mutex, AOS_WAIT_FOREVER);
11025a36:	3100      	movi      	r1, 0
    pkt_type = H5_HDR_PKT_TYPE(h5_hdr);
11025a38:	8561      	ld.b      	r3, (r5, 0x1)
11025a3a:	e463200f 	andi      	r3, r3, 15
11025a3e:	b860      	st.w      	r3, (r14, 0x0)
    aos_mutex_lock(&h5_wakeup_mutex, AOS_WAIT_FOREVER);
11025a40:	2900      	subi      	r1, 1
11025a42:	9840      	ld.w      	r2, (r14, 0x0)
11025a44:	0264      	lrw      	r3, 0x11011aff	// 11025d30 <h5_complete_rx_pkt.constprop.11+0x33c>
11025a46:	60c8      	addu      	r3, r2
11025a48:	d8634000 	ld.bs      	r3, (r3, 0x0)
11025a4c:	b861      	st.w      	r3, (r14, 0x4)
    RTK_BUFFER *skb = NULL;
11025a4e:	3300      	movi      	r3, 0
    aos_mutex_lock(&h5_wakeup_mutex, AOS_WAIT_FOREVER);
11025a50:	0208      	lrw      	r0, 0x1fffb904	// 11025d2c <h5_complete_rx_pkt.constprop.11+0x338>
    RTK_BUFFER *skb = NULL;
11025a52:	b869      	st.w      	r3, (r14, 0x24)
    aos_mutex_lock(&h5_wakeup_mutex, AOS_WAIT_FOREVER);
11025a54:	e3ffde1a 	bsr      	0x11021688	// 11021688 <aos_mutex_lock>
    pkts_to_be_removed = RtbGetQueueLen(h5->unack);
11025a58:	9402      	ld.w      	r0, (r4, 0x8)
    seqno = h5->msgq_txseq;
11025a5a:	d8e40020 	ld.b      	r7, (r4, 0x20)
    pkts_to_be_removed = RtbGetQueueLen(h5->unack);
11025a5e:	e0001a39 	bsr      	0x11028ed0	// 11028ed0 <cpu_task_stack_init+0x528>
11025a62:	6d83      	mov      	r6, r0
        if (h5->rxack == seqno) {
11025a64:	847d      	ld.b      	r3, (r4, 0x1d)
        seqno = (seqno - 1) & 0x07;
11025a66:	3207      	movi      	r2, 7
    while (pkts_to_be_removed) {
11025a68:	3e40      	cmpnei      	r6, 0
11025a6a:	0882      	bt      	0x11025b6e	// 11025b6e <h5_complete_rx_pkt.constprop.11+0x17a>
    Head = (RT_LIST_HEAD *)(h5->unack);
11025a6c:	9442      	ld.w      	r2, (r4, 0x8)
    i = 0;//  number of pkts has been removed from un_ack queue.
11025a6e:	3700      	movi      	r7, 0
    LIST_FOR_EACH_SAFELY(Iter, Temp, Head) {
11025a70:	9200      	ld.w      	r0, (r2, 0x0)
11025a72:	9060      	ld.w      	r3, (r0, 0x0)
11025a74:	640a      	cmpne      	r2, r0
11025a76:	0c04      	bf      	0x11025a7e	// 11025a7e <h5_complete_rx_pkt.constprop.11+0x8a>
        if (i >= pkts_to_be_removed) {
11025a78:	659d      	cmplt      	r7, r6
        skb = LIST_ENTRY(Iter, sk_buff, List);
11025a7a:	b809      	st.w      	r0, (r14, 0x24)
        if (i >= pkts_to_be_removed) {
11025a7c:	087f      	bt      	0x11025b7a	// 11025b7a <h5_complete_rx_pkt.constprop.11+0x186>
    if (0 == hci_skb_queue_get_length(h5->unack)) {
11025a7e:	9402      	ld.w      	r0, (r4, 0x8)
11025a80:	e0001a16 	bsr      	0x11028eac	// 11028eac <cpu_task_stack_init+0x504>
11025a84:	3840      	cmpnei      	r0, 0
11025a86:	080f      	bt      	0x11025aa4	// 11025aa4 <h5_complete_rx_pkt.constprop.11+0xb0>
    if (rtk_h5.timer_data_retrans_start) {
11025a88:	d8640044 	ld.b      	r3, (r4, 0x44)
11025a8c:	3b40      	cmpnei      	r3, 0
11025a8e:	0c07      	bf      	0x11025a9c	// 11025a9c <h5_complete_rx_pkt.constprop.11+0xa8>
        rtk_h5.timer_data_retrans_start = 0;
11025a90:	3300      	movi      	r3, 0
    return  aos_timer_stop(timerid);
11025a92:	9410      	ld.w      	r0, (r4, 0x40)
        rtk_h5.timer_data_retrans_start = 0;
11025a94:	dc640044 	st.b      	r3, (r4, 0x44)
    return  aos_timer_stop(timerid);
11025a98:	e3ffdf02 	bsr      	0x1102189c	// 1102189c <aos_timer_stop>
        rtk_h5.data_retrans_count = 0;
11025a9c:	3300      	movi      	r3, 0
11025a9e:	b476      	st.w      	r3, (r4, 0x58)
        h5_wake_up();
11025aa0:	e0001a36 	bsr      	0x11028f0c	// 11028f0c <cpu_task_stack_init+0x564>
    aos_mutex_unlock(&h5_wakeup_mutex);
11025aa4:	021d      	lrw      	r0, 0x1fffb904	// 11025d2c <h5_complete_rx_pkt.constprop.11+0x338>
11025aa6:	e3ffde1d 	bsr      	0x110216e0	// 110216e0 <aos_mutex_unlock>
    if (H5_HDR_PKT_TYPE(h5_hdr) == H5_LINK_CTL_PKT) {
11025aaa:	8561      	ld.b      	r3, (r5, 0x1)
11025aac:	e463200f 	andi      	r3, r3, 15
11025ab0:	3b4f      	cmpnei      	r3, 15
11025ab2:	082e      	bt      	0x11025b0e	// 11025b0e <h5_complete_rx_pkt.constprop.11+0x11a>
        hci_skb_pull(h5->rx_skb, H5_HDR_SIZE);
11025ab4:	3104      	movi      	r1, 4
11025ab6:	940d      	ld.w      	r0, (r4, 0x34)
    unsigned char   h5sync[2]     = {0x01, 0x7E},
11025ab8:	3601      	movi      	r6, 1
        hci_skb_pull(h5->rx_skb, H5_HDR_SIZE);
11025aba:	e00019e1 	bsr      	0x11028e7c	// 11028e7c <cpu_task_stack_init+0x4d4>
    unsigned char   h5sync[2]     = {0x01, 0x7E},
11025abe:	3301      	movi      	r3, 1
                                            h5conf[3]     = {0x03, 0xFC, 0x14},
11025ac0:	3203      	movi      	r2, 3
    unsigned char   h5sync[2]     = {0x01, 0x7E},
11025ac2:	dc6e0014 	st.b      	r3, (r14, 0x14)
11025ac6:	337e      	movi      	r3, 126
                                            h5conf[3]     = {0x03, 0xFC, 0x14},
11025ac8:	0324      	lrw      	r1, 0x110110c4	// 11025d34 <h5_complete_rx_pkt.constprop.11+0x340>
11025aca:	1808      	addi      	r0, r14, 32
    unsigned char   h5sync[2]     = {0x01, 0x7E},
11025acc:	dc6e0015 	st.b      	r3, (r14, 0x15)
                                    h5syncresp[2] = {0x02, 0x7D},
11025ad0:	3302      	movi      	r3, 2
    sk_buff *skb = rtk_h5.rx_skb;
11025ad2:	94ad      	ld.w      	r5, (r4, 0x34)
                                    h5syncresp[2] = {0x02, 0x7D},
11025ad4:	dc6e0018 	st.b      	r3, (r14, 0x18)
11025ad8:	337d      	movi      	r3, 125
11025ada:	dc6e0019 	st.b      	r3, (r14, 0x19)
                                            h5conf[3]     = {0x03, 0xFC, 0x14},
11025ade:	e0001a71 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
                                                    h5confresp[2] = {0x04, 0x7B};
11025ae2:	3304      	movi      	r3, 4
11025ae4:	dc6e001c 	st.b      	r3, (r14, 0x1c)
11025ae8:	337b      	movi      	r3, 123
11025aea:	dc6e001d 	st.b      	r3, (r14, 0x1d)
    if (rtk_h5.link_estab_state == H5_UNINITIALIZED) { //sync
11025aee:	946c      	ld.w      	r3, (r4, 0x30)
11025af0:	3b40      	cmpnei      	r3, 0
11025af2:	0867      	bt      	0x11025bc0	// 11025bc0 <h5_complete_rx_pkt.constprop.11+0x1cc>
        if (!memcmp(hci_skb_get_data(skb), h5sync, 2)) {
11025af4:	6c17      	mov      	r0, r5
11025af6:	e0001c4b 	bsr      	0x1102938c	// 1102938c <cpu_task_stack_init+0x9e4>
11025afa:	3202      	movi      	r2, 2
11025afc:	1905      	addi      	r1, r14, 20
11025afe:	e3ffbb6b 	bsr      	0x1101d1d4	// 1101d1d4 <__memcmp_fast>
11025b02:	3840      	cmpnei      	r0, 0
11025b04:	0849      	bt      	0x11025b96	// 11025b96 <h5_complete_rx_pkt.constprop.11+0x1a2>
            hci_h5_send_sync_resp();
11025b06:	e3fffedf 	bsr      	0x110258c4	// 110258c4 <hci_h5_send_sync_resp>
            rtk_h5.link_estab_state = H5_INITIALIZED;
11025b0a:	3301      	movi      	r3, 1
11025b0c:	b46c      	st.w      	r3, (r4, 0x30)
    if (pass_up) {
11025b0e:	9861      	ld.w      	r3, (r14, 0x4)
11025b10:	3b40      	cmpnei      	r3, 0
11025b12:	0cf6      	bf      	0x11025cfe	// 11025cfe <h5_complete_rx_pkt.constprop.11+0x30a>
        hci_skb_pull(h5->rx_skb, H5_HDR_SIZE);
11025b14:	3104      	movi      	r1, 4
11025b16:	940d      	ld.w      	r0, (r4, 0x34)
11025b18:	e00019b2 	bsr      	0x11028e7c	// 11028e7c <cpu_task_stack_init+0x4d4>
        hci_skb_set_pkt_type(h5->rx_skb, pkt_type);
11025b1c:	9820      	ld.w      	r1, (r14, 0x0)
11025b1e:	940d      	ld.w      	r0, (r4, 0x34)
11025b20:	e0001af2 	bsr      	0x11029104	// 11029104 <cpu_task_stack_init+0x75c>
        sk_buff *skb_complete_pkt = h5->rx_skb;
11025b24:	94ad      	ld.w      	r5, (r4, 0x34)
    uint32_t data_len = hci_skb_get_data_length(skb);
11025b26:	6c17      	mov      	r0, r5
11025b28:	e0001800 	bsr      	0x11028b28	// 11028b28 <cpu_task_stack_init+0x180>
    if (pkt_type == HCI_EVENT_PKT) {
11025b2c:	9860      	ld.w      	r3, (r14, 0x0)
11025b2e:	3b44      	cmpnei      	r3, 4
11025b30:	08eb      	bt      	0x11025d06	// 11025d06 <h5_complete_rx_pkt.constprop.11+0x312>
        p = (uint8_t *)hci_skb_get_data(skb);
11025b32:	6c17      	mov      	r0, r5
11025b34:	e0001c2c 	bsr      	0x1102938c	// 1102938c <cpu_task_stack_init+0x9e4>
        if (event_code == HCI_COMMAND_COMPLETE_EVT) {
11025b38:	8060      	ld.b      	r3, (r0, 0x0)
11025b3a:	3b4e      	cmpnei      	r3, 14
11025b3c:	08e5      	bt      	0x11025d06	// 11025d06 <h5_complete_rx_pkt.constprop.11+0x312>
            num_hci_h5_cmd_pkts = *p++;
11025b3e:	8041      	ld.b      	r2, (r0, 0x1)
11025b40:	137e      	lrw      	r3, 0x1fffa5d8	// 11025d38 <h5_complete_rx_pkt.constprop.11+0x344>
11025b42:	b340      	st.w      	r2, (r3, 0x0)
            STREAM_TO_UINT16(opcode, p);
11025b44:	8063      	ld.b      	r3, (r0, 0x3)
11025b46:	4368      	lsli      	r3, r3, 8
11025b48:	8042      	ld.b      	r2, (r0, 0x2)
11025b4a:	60c8      	addu      	r3, r2
            if (opcode == HCI_VSC_UPDATE_BAUDRATE) {
11025b4c:	74cd      	zexth      	r3, r3
11025b4e:	eb43fc17 	cmpnei      	r3, 64535
11025b52:	08da      	bt      	0x11025d06	// 11025d06 <h5_complete_rx_pkt.constprop.11+0x312>
    return OsStartTimer(rtk_h5.timer_wait_ct_baudrate_ready, WAIT_CT_BAUDRATE_READY_TIMEOUT_VALUE, 0);
11025b54:	31fa      	movi      	r1, 250
11025b56:	3200      	movi      	r2, 0
11025b58:	4121      	lsli      	r1, r1, 1
11025b5a:	9414      	ld.w      	r0, (r4, 0x50)
                rtk_h5.internal_skb = skb;
11025b5c:	b4af      	st.w      	r5, (r4, 0x3c)
    return OsStartTimer(rtk_h5.timer_wait_ct_baudrate_ready, WAIT_CT_BAUDRATE_READY_TIMEOUT_VALUE, 0);
11025b5e:	e3fffd91 	bsr      	0x11025680	// 11025680 <OsStartTimer>
    h5->rx_state = H5_W4_PKT_DELIMITER;
11025b62:	3300      	movi      	r3, 0
}
11025b64:	9800      	ld.w      	r0, (r14, 0x0)
    h5->rx_state = H5_W4_PKT_DELIMITER;
11025b66:	b46a      	st.w      	r3, (r4, 0x28)
    rtk_h5.rx_skb = NULL;
11025b68:	b46d      	st.w      	r3, (r4, 0x34)
}
11025b6a:	140b      	addi      	r14, r14, 44
11025b6c:	1494      	pop      	r4-r7, r15
        if (h5->rxack == seqno) {
11025b6e:	65ce      	cmpne      	r3, r7
11025b70:	0f7e      	bf      	0x11025a6c	// 11025a6c <h5_complete_rx_pkt.constprop.11+0x78>
        seqno = (seqno - 1) & 0x07;
11025b72:	2f00      	subi      	r7, 1
        pkts_to_be_removed--;
11025b74:	2e00      	subi      	r6, 1
        seqno = (seqno - 1) & 0x07;
11025b76:	69c8      	and      	r7, r2
11025b78:	0778      	br      	0x11025a68	// 11025a68 <h5_complete_rx_pkt.constprop.11+0x74>
        hci_skb_unlink(skb, h5->unack);
11025b7a:	9422      	ld.w      	r1, (r4, 0x8)
11025b7c:	b863      	st.w      	r3, (r14, 0xc)
11025b7e:	b842      	st.w      	r2, (r14, 0x8)
11025b80:	e0001bb8 	bsr      	0x110292f0	// 110292f0 <cpu_task_stack_init+0x948>
        hci_skb_free(&skb);
11025b84:	1809      	addi      	r0, r14, 36
11025b86:	e00018af 	bsr      	0x11028ce4	// 11028ce4 <cpu_task_stack_init+0x33c>
    LIST_FOR_EACH_SAFELY(Iter, Temp, Head) {
11025b8a:	9863      	ld.w      	r3, (r14, 0xc)
11025b8c:	6c0f      	mov      	r0, r3
        i++;
11025b8e:	2700      	addi      	r7, 1
    LIST_FOR_EACH_SAFELY(Iter, Temp, Head) {
11025b90:	9360      	ld.w      	r3, (r3, 0x0)
11025b92:	9842      	ld.w      	r2, (r14, 0x8)
11025b94:	0770      	br      	0x11025a74	// 11025a74 <h5_complete_rx_pkt.constprop.11+0x80>
        } else if (!memcmp(hci_skb_get_data(skb), h5syncresp, 2)) {
11025b96:	6c17      	mov      	r0, r5
11025b98:	e0001bfa 	bsr      	0x1102938c	// 1102938c <cpu_task_stack_init+0x9e4>
11025b9c:	3202      	movi      	r2, 2
11025b9e:	1906      	addi      	r1, r14, 24
11025ba0:	e3ffbb1a 	bsr      	0x1101d1d4	// 1101d1d4 <__memcmp_fast>
11025ba4:	3840      	cmpnei      	r0, 0
11025ba6:	0bb4      	bt      	0x11025b0e	// 11025b0e <h5_complete_rx_pkt.constprop.11+0x11a>
    return  aos_timer_stop(timerid);
11025ba8:	9412      	ld.w      	r0, (r4, 0x48)
11025baa:	e3ffde79 	bsr      	0x1102189c	// 1102189c <aos_timer_stop>
            rtk_h5.sync_retrans_count  = 0;
11025bae:	3300      	movi      	r3, 0
11025bb0:	b477      	st.w      	r3, (r4, 0x5c)
            rtk_h5.link_estab_state = H5_INITIALIZED;
11025bb2:	3301      	movi      	r3, 1
11025bb4:	b46c      	st.w      	r3, (r4, 0x30)
            hci_h5_send_conf_req();
11025bb6:	e3fffe71 	bsr      	0x11025898	// 11025898 <hci_h5_send_conf_req>
            h5_start_conf_retrans_timer();
11025bba:	e3fffd7d 	bsr      	0x110256b4	// 110256b4 <h5_start_conf_retrans_timer>
11025bbe:	07a8      	br      	0x11025b0e	// 11025b0e <h5_complete_rx_pkt.constprop.11+0x11a>
    } else if (rtk_h5.link_estab_state == H5_INITIALIZED) { //config
11025bc0:	3b41      	cmpnei      	r3, 1
11025bc2:	0879      	bt      	0x11025cb4	// 11025cb4 <h5_complete_rx_pkt.constprop.11+0x2c0>
        if (!memcmp(hci_skb_get_data(skb), h5sync, 0x2)) {
11025bc4:	6c17      	mov      	r0, r5
11025bc6:	e0001be3 	bsr      	0x1102938c	// 1102938c <cpu_task_stack_init+0x9e4>
11025bca:	3202      	movi      	r2, 2
11025bcc:	1905      	addi      	r1, r14, 20
11025bce:	e3ffbb03 	bsr      	0x1101d1d4	// 1101d1d4 <__memcmp_fast>
11025bd2:	3840      	cmpnei      	r0, 0
11025bd4:	0804      	bt      	0x11025bdc	// 11025bdc <h5_complete_rx_pkt.constprop.11+0x1e8>
            hci_h5_send_sync_resp();
11025bd6:	e3fffe77 	bsr      	0x110258c4	// 110258c4 <hci_h5_send_sync_resp>
11025bda:	079a      	br      	0x11025b0e	// 11025b0e <h5_complete_rx_pkt.constprop.11+0x11a>
        } else if (!memcmp(hci_skb_get_data(skb), h5conf, 0x2)) {
11025bdc:	6c17      	mov      	r0, r5
11025bde:	e0001bd7 	bsr      	0x1102938c	// 1102938c <cpu_task_stack_init+0x9e4>
11025be2:	3202      	movi      	r2, 2
11025be4:	1908      	addi      	r1, r14, 32
11025be6:	e3ffbaf7 	bsr      	0x1101d1d4	// 1101d1d4 <__memcmp_fast>
11025bea:	3840      	cmpnei      	r0, 0
11025bec:	081e      	bt      	0x11025c28	// 11025c28 <h5_complete_rx_pkt.constprop.11+0x234>
            rtk_h5.link_estab_state = H5_ACTIVE;
11025bee:	3302      	movi      	r3, 2
            memcpy(&cfg, hci_skb_get_data(skb) + 2, H5_CFG_SIZE);
11025bf0:	6c17      	mov      	r0, r5
            rtk_h5.link_estab_state = H5_ACTIVE;
11025bf2:	b46c      	st.w      	r3, (r4, 0x30)
            memcpy(&cfg, hci_skb_get_data(skb) + 2, H5_CFG_SIZE);
11025bf4:	e0001bcc 	bsr      	0x1102938c	// 1102938c <cpu_task_stack_init+0x9e4>
11025bf8:	3201      	movi      	r2, 1
11025bfa:	5826      	addi      	r1, r0, 2
11025bfc:	e40e0012 	addi      	r0, r14, 19
11025c00:	e00019e0 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
            rtk_h5.sliding_window_size = H5_CFG_SLID_WIN(cfg);
11025c04:	d86e0013 	ld.b      	r3, (r14, 0x13)
11025c08:	e4432007 	andi      	r2, r3, 7
11025c0c:	a444      	st.b      	r2, (r4, 0x4)
            rtk_h5.oof_flow_control = H5_CFG_OOF_CNTRL(cfg);
11025c0e:	4b43      	lsri      	r2, r3, 3
            rtk_h5.dic_type = H5_CFG_DIC_TYPE(cfg);
11025c10:	4b64      	lsri      	r3, r3, 4
            rtk_h5.oof_flow_control = H5_CFG_OOF_CNTRL(cfg);
11025c12:	6898      	and      	r2, r6
            rtk_h5.dic_type = H5_CFG_DIC_TYPE(cfg);
11025c14:	698c      	and      	r6, r3
            rtk_h5.oof_flow_control = H5_CFG_OOF_CNTRL(cfg);
11025c16:	a445      	st.b      	r2, (r4, 0x5)
            if (rtk_h5.dic_type) {
11025c18:	3e40      	cmpnei      	r6, 0
            rtk_h5.dic_type = H5_CFG_DIC_TYPE(cfg);
11025c1a:	a4c6      	st.b      	r6, (r4, 0x6)
            if (rtk_h5.dic_type) {
11025c1c:	0c03      	bf      	0x11025c22	// 11025c22 <h5_complete_rx_pkt.constprop.11+0x22e>
                rtk_h5.use_crc = 1;
11025c1e:	3301      	movi      	r3, 1
11025c20:	a47e      	st.b      	r3, (r4, 0x1e)
            hci_h5_send_conf_resp();
11025c22:	e3fffe97 	bsr      	0x11025950	// 11025950 <hci_h5_send_conf_resp>
11025c26:	0774      	br      	0x11025b0e	// 11025b0e <h5_complete_rx_pkt.constprop.11+0x11a>
        } else if (!memcmp(hci_skb_get_data(skb), h5confresp,  0x2)) {
11025c28:	6c17      	mov      	r0, r5
11025c2a:	e0001bb1 	bsr      	0x1102938c	// 1102938c <cpu_task_stack_init+0x9e4>
11025c2e:	3202      	movi      	r2, 2
11025c30:	1907      	addi      	r1, r14, 28
11025c32:	e3ffbad1 	bsr      	0x1101d1d4	// 1101d1d4 <__memcmp_fast>
11025c36:	3840      	cmpnei      	r0, 0
11025c38:	0b6b      	bt      	0x11025b0e	// 11025b0e <h5_complete_rx_pkt.constprop.11+0x11a>
    return  aos_timer_stop(timerid);
11025c3a:	9413      	ld.w      	r0, (r4, 0x4c)
11025c3c:	e3ffde30 	bsr      	0x1102189c	// 1102189c <aos_timer_stop>
            rtk_h5.conf_retrans_count  = 0;
11025c40:	3300      	movi      	r3, 0
            memcpy(&cfg, hci_skb_get_data(skb) + 2, H5_CFG_SIZE);
11025c42:	6c17      	mov      	r0, r5
            rtk_h5.conf_retrans_count  = 0;
11025c44:	b478      	st.w      	r3, (r4, 0x60)
            rtk_h5.link_estab_state = H5_ACTIVE;
11025c46:	3302      	movi      	r3, 2
11025c48:	b46c      	st.w      	r3, (r4, 0x30)
            memcpy(&cfg, hci_skb_get_data(skb) + 2, H5_CFG_SIZE);
11025c4a:	e0001ba1 	bsr      	0x1102938c	// 1102938c <cpu_task_stack_init+0x9e4>
11025c4e:	3201      	movi      	r2, 1
11025c50:	5826      	addi      	r1, r0, 2
11025c52:	e40e0012 	addi      	r0, r14, 19
11025c56:	e00019b5 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
            rtk_h5.sliding_window_size = H5_CFG_SLID_WIN(cfg);
11025c5a:	d86e0013 	ld.b      	r3, (r14, 0x13)
11025c5e:	e4432007 	andi      	r2, r3, 7
11025c62:	a444      	st.b      	r2, (r4, 0x4)
            rtk_h5.oof_flow_control = H5_CFG_OOF_CNTRL(cfg);
11025c64:	4b43      	lsri      	r2, r3, 3
            rtk_h5.dic_type = H5_CFG_DIC_TYPE(cfg);
11025c66:	4b64      	lsri      	r3, r3, 4
            rtk_h5.oof_flow_control = H5_CFG_OOF_CNTRL(cfg);
11025c68:	6898      	and      	r2, r6
            rtk_h5.dic_type = H5_CFG_DIC_TYPE(cfg);
11025c6a:	698c      	and      	r6, r3
            rtk_h5.oof_flow_control = H5_CFG_OOF_CNTRL(cfg);
11025c6c:	a445      	st.b      	r2, (r4, 0x5)
            if (rtk_h5.dic_type) {
11025c6e:	3e40      	cmpnei      	r6, 0
            rtk_h5.dic_type = H5_CFG_DIC_TYPE(cfg);
11025c70:	a4c6      	st.b      	r6, (r4, 0x6)
            if (rtk_h5.dic_type) {
11025c72:	0c03      	bf      	0x11025c78	// 11025c78 <h5_complete_rx_pkt.constprop.11+0x284>
                rtk_h5.use_crc = 1;
11025c74:	3301      	movi      	r3, 1
11025c76:	a47e      	st.b      	r3, (r4, 0x1e)
    uint8_t sync_event[6] = {0x0e, 0x04, 0x03, 0xee, 0xfc, 0x00};
11025c78:	3206      	movi      	r2, 6
11025c7a:	1131      	lrw      	r1, 0x110110ca	// 11025d3c <h5_complete_rx_pkt.constprop.11+0x348>
11025c7c:	1809      	addi      	r0, r14, 36
11025c7e:	e00019a1 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
    rx_skb = hci_skb_alloc_and_init(HCI_EVENT_PKT, sync_event, sizeof(sync_event));
11025c82:	3206      	movi      	r2, 6
11025c84:	3004      	movi      	r0, 4
11025c86:	1909      	addi      	r1, r14, 36
11025c88:	e000198a 	bsr      	0x11028f9c	// 11028f9c <cpu_task_stack_init+0x5f4>
11025c8c:	6d43      	mov      	r5, r0
    aos_mutex_lock(&rtk_h5.data_mutex, AOS_WAIT_FOREVER);
11025c8e:	110d      	lrw      	r0, 0x1fffb978	// 11025d40 <h5_complete_rx_pkt.constprop.11+0x34c>
11025c90:	3100      	movi      	r1, 0
11025c92:	2900      	subi      	r1, 1
11025c94:	e3ffdcfa 	bsr      	0x11021688	// 11021688 <aos_mutex_lock>
    hci_skb_queue_tail(rtk_h5.recv_data, rx_skb);
11025c98:	6c57      	mov      	r1, r5
11025c9a:	9405      	ld.w      	r0, (r4, 0x14)
11025c9c:	e0001710 	bsr      	0x11028abc	// 11028abc <cpu_task_stack_init+0x114>
    aos_sem_signal(&rtk_h5.data_cond);
11025ca0:	1109      	lrw      	r0, 0x1fffb97c	// 11025d44 <h5_complete_rx_pkt.constprop.11+0x350>
11025ca2:	e3ffdd73 	bsr      	0x11021788	// 11021788 <aos_sem_signal>
    aos_mutex_unlock(&rtk_h5.data_mutex);
11025ca6:	1107      	lrw      	r0, 0x1fffb978	// 11025d40 <h5_complete_rx_pkt.constprop.11+0x34c>
11025ca8:	e3ffdd1c 	bsr      	0x110216e0	// 110216e0 <aos_mutex_unlock>
    return  aos_timer_stop(timerid);
11025cac:	9415      	ld.w      	r0, (r4, 0x54)
11025cae:	e3ffddf7 	bsr      	0x1102189c	// 1102189c <aos_timer_stop>
11025cb2:	072e      	br      	0x11025b0e	// 11025b0e <h5_complete_rx_pkt.constprop.11+0x11a>
    } else if (rtk_h5.link_estab_state == H5_ACTIVE) {
11025cb4:	3b42      	cmpnei      	r3, 2
11025cb6:	0b2c      	bt      	0x11025b0e	// 11025b0e <h5_complete_rx_pkt.constprop.11+0x11a>
        if (!memcmp(hci_skb_get_data(skb), h5sync, 0x2)) {
11025cb8:	6c17      	mov      	r0, r5
11025cba:	e0001b69 	bsr      	0x1102938c	// 1102938c <cpu_task_stack_init+0x9e4>
11025cbe:	3202      	movi      	r2, 2
11025cc0:	1905      	addi      	r1, r14, 20
11025cc2:	e3ffba89 	bsr      	0x1101d1d4	// 1101d1d4 <__memcmp_fast>
11025cc6:	3840      	cmpnei      	r0, 0
11025cc8:	080a      	bt      	0x11025cdc	// 11025cdc <h5_complete_rx_pkt.constprop.11+0x2e8>
            hci_h5_send_sync_resp();
11025cca:	e3fffdfd 	bsr      	0x110258c4	// 110258c4 <hci_h5_send_sync_resp>
            rtk_h5.link_estab_state = H5_UNINITIALIZED;
11025cce:	3300      	movi      	r3, 0
11025cd0:	b46c      	st.w      	r3, (r4, 0x30)
            hci_h5_send_sync_req();
11025cd2:	e3fffe0e 	bsr      	0x110258ee	// 110258ee <hci_h5_send_sync_req>
            h5_start_sync_retrans_timer();
11025cd6:	e3fffcfb 	bsr      	0x110256cc	// 110256cc <h5_start_sync_retrans_timer>
11025cda:	071a      	br      	0x11025b0e	// 11025b0e <h5_complete_rx_pkt.constprop.11+0x11a>
        } else if (!memcmp(hci_skb_get_data(skb), h5conf, 0x2)) {
11025cdc:	6c17      	mov      	r0, r5
11025cde:	e0001b57 	bsr      	0x1102938c	// 1102938c <cpu_task_stack_init+0x9e4>
11025ce2:	3202      	movi      	r2, 2
11025ce4:	1908      	addi      	r1, r14, 32
11025ce6:	e3ffba77 	bsr      	0x1101d1d4	// 1101d1d4 <__memcmp_fast>
11025cea:	3840      	cmpnei      	r0, 0
11025cec:	0f9b      	bf      	0x11025c22	// 11025c22 <h5_complete_rx_pkt.constprop.11+0x22e>
        } else if (!memcmp(hci_skb_get_data(skb), h5confresp,  0x2)) {
11025cee:	6c17      	mov      	r0, r5
11025cf0:	e0001b4e 	bsr      	0x1102938c	// 1102938c <cpu_task_stack_init+0x9e4>
11025cf4:	3202      	movi      	r2, 2
11025cf6:	1907      	addi      	r1, r14, 28
11025cf8:	e3ffba6e 	bsr      	0x1101d1d4	// 1101d1d4 <__memcmp_fast>
11025cfc:	0709      	br      	0x11025b0e	// 11025b0e <h5_complete_rx_pkt.constprop.11+0x11a>
        hci_skb_free(&h5->rx_skb);
11025cfe:	1013      	lrw      	r0, 0x1fffb93c	// 11025d48 <h5_complete_rx_pkt.constprop.11+0x354>
11025d00:	e00017f2 	bsr      	0x11028ce4	// 11028ce4 <cpu_task_stack_init+0x33c>
11025d04:	072f      	br      	0x11025b62	// 11025b62 <h5_complete_rx_pkt.constprop.11+0x16e>
            aos_mutex_lock(&rtk_h5.data_mutex, AOS_WAIT_FOREVER);
11025d06:	100f      	lrw      	r0, 0x1fffb978	// 11025d40 <h5_complete_rx_pkt.constprop.11+0x34c>
11025d08:	3100      	movi      	r1, 0
11025d0a:	2900      	subi      	r1, 1
11025d0c:	e3ffdcbe 	bsr      	0x11021688	// 11021688 <aos_mutex_lock>
            hci_skb_queue_tail(rtk_h5.recv_data, h5->rx_skb);
11025d10:	942d      	ld.w      	r1, (r4, 0x34)
11025d12:	9405      	ld.w      	r0, (r4, 0x14)
11025d14:	e00016d4 	bsr      	0x11028abc	// 11028abc <cpu_task_stack_init+0x114>
            aos_sem_signal(&rtk_h5.data_cond);
11025d18:	100b      	lrw      	r0, 0x1fffb97c	// 11025d44 <h5_complete_rx_pkt.constprop.11+0x350>
11025d1a:	e3ffdd37 	bsr      	0x11021788	// 11021788 <aos_sem_signal>
            aos_mutex_unlock(&rtk_h5.data_mutex);
11025d1e:	1009      	lrw      	r0, 0x1fffb978	// 11025d40 <h5_complete_rx_pkt.constprop.11+0x34c>
11025d20:	e3ffdce0 	bsr      	0x110216e0	// 110216e0 <aos_mutex_unlock>
11025d24:	071f      	br      	0x11025b62	// 11025b62 <h5_complete_rx_pkt.constprop.11+0x16e>
11025d26:	0000      	bkpt
11025d28:	1fffb908 	.long	0x1fffb908
11025d2c:	1fffb904 	.long	0x1fffb904
11025d30:	11011aff 	.long	0x11011aff
11025d34:	110110c4 	.long	0x110110c4
11025d38:	1fffa5d8 	.long	0x1fffa5d8
11025d3c:	110110ca 	.long	0x110110ca
11025d40:	1fffb978 	.long	0x1fffb978
11025d44:	1fffb97c 	.long	0x1fffb97c
11025d48:	1fffb93c 	.long	0x1fffb93c

11025d4c <hci_h5_cleanup>:
{
11025d4c:	14d2      	push      	r4-r5, r15
    rtk_h5.cleanuping = 1;
11025d4e:	1187      	lrw      	r4, 0x1fffb908	// 11025de8 <hci_h5_cleanup+0x9c>
11025d50:	3301      	movi      	r3, 1
    return OsFreeTimer(rtk_h5.timer_data_retrans);
11025d52:	94b0      	ld.w      	r5, (r4, 0x40)
    aos_timer_free(timerid);
11025d54:	6c17      	mov      	r0, r5
    rtk_h5.cleanuping = 1;
11025d56:	dc64007c 	st.b      	r3, (r4, 0x7c)
    rtk_h5.timer_data_retrans_start = 0;
11025d5a:	3300      	movi      	r3, 0
11025d5c:	dc640044 	st.b      	r3, (r4, 0x44)
    aos_timer_free(timerid);
11025d60:	e3ffdd68 	bsr      	0x11021830	// 11021830 <aos_timer_free>
    free(timerid);
11025d64:	6c17      	mov      	r0, r5
11025d66:	e00010e8 	bsr      	0x11027f36	// 11027f36 <free>
    return OsFreeTimer(rtk_h5.timer_sync_retrans);
11025d6a:	94b2      	ld.w      	r5, (r4, 0x48)
    aos_timer_free(timerid);
11025d6c:	6c17      	mov      	r0, r5
11025d6e:	e3ffdd61 	bsr      	0x11021830	// 11021830 <aos_timer_free>
    free(timerid);
11025d72:	6c17      	mov      	r0, r5
11025d74:	e00010e1 	bsr      	0x11027f36	// 11027f36 <free>
    return OsFreeTimer(rtk_h5.timer_conf_retrans);
11025d78:	94b3      	ld.w      	r5, (r4, 0x4c)
    aos_timer_free(timerid);
11025d7a:	6c17      	mov      	r0, r5
11025d7c:	e3ffdd5a 	bsr      	0x11021830	// 11021830 <aos_timer_free>
    free(timerid);
11025d80:	6c17      	mov      	r0, r5
11025d82:	e00010da 	bsr      	0x11027f36	// 11027f36 <free>
    return OsFreeTimer(rtk_h5.timer_wait_ct_baudrate_ready);
11025d86:	94b4      	ld.w      	r5, (r4, 0x50)
    aos_timer_free(timerid);
11025d88:	6c17      	mov      	r0, r5
11025d8a:	e3ffdd53 	bsr      	0x11021830	// 11021830 <aos_timer_free>
    free(timerid);
11025d8e:	6c17      	mov      	r0, r5
11025d90:	e00010d3 	bsr      	0x11027f36	// 11027f36 <free>
    return OsFreeTimer(rtk_h5.timer_h5_hw_init_ready);
11025d94:	94b5      	ld.w      	r5, (r4, 0x54)
    aos_timer_free(timerid);
11025d96:	6c17      	mov      	r0, r5
11025d98:	e3ffdd4c 	bsr      	0x11021830	// 11021830 <aos_timer_free>
    free(timerid);
11025d9c:	6c17      	mov      	r0, r5
11025d9e:	e00010cc 	bsr      	0x11027f36	// 11027f36 <free>
    if (h5_retransfer_running) {
11025da2:	1073      	lrw      	r3, 0x1fffb902	// 11025dec <hci_h5_cleanup+0xa0>
11025da4:	8340      	ld.b      	r2, (r3, 0x0)
11025da6:	3a40      	cmpnei      	r2, 0
11025da8:	0c07      	bf      	0x11025db6	// 11025db6 <hci_h5_cleanup+0x6a>
        h5_retransfer_signal_event(H5_EVENT_EXIT);
11025daa:	3080      	movi      	r0, 128
        h5_retransfer_running = 0;
11025dac:	3200      	movi      	r2, 0
        h5_retransfer_signal_event(H5_EVENT_EXIT);
11025dae:	4002      	lsli      	r0, r0, 2
        h5_retransfer_running = 0;
11025db0:	a340      	st.b      	r2, (r3, 0x0)
        h5_retransfer_signal_event(H5_EVENT_EXIT);
11025db2:	e3fffb2f 	bsr      	0x11025410	// 11025410 <h5_retransfer_signal_event>
    aos_mutex_free(&rtk_h5.mutex);
11025db6:	100f      	lrw      	r0, 0x1fffb96c	// 11025df0 <hci_h5_cleanup+0xa4>
11025db8:	e3ffde66 	bsr      	0x11021a84	// 11021a84 <aos_mutex_free>
    aos_sem_free(&rtk_h5.cond);
11025dbc:	100e      	lrw      	r0, 0x1fffb970	// 11025df4 <hci_h5_cleanup+0xa8>
11025dbe:	e3ffdeb1 	bsr      	0x11021b20	// 11021b20 <aos_sem_free>
    RtbQueueFree(rtk_h5.unack);
11025dc2:	9402      	ld.w      	r0, (r4, 0x8)
11025dc4:	e00016ee 	bsr      	0x11028ba0	// 11028ba0 <cpu_task_stack_init+0x1f8>
    RtbQueueFree(rtk_h5.rel);
11025dc8:	9403      	ld.w      	r0, (r4, 0xc)
11025dca:	e00016eb 	bsr      	0x11028ba0	// 11028ba0 <cpu_task_stack_init+0x1f8>
    RtbQueueFree(rtk_h5.unrel);
11025dce:	9404      	ld.w      	r0, (r4, 0x10)
11025dd0:	e00016e8 	bsr      	0x11028ba0	// 11028ba0 <cpu_task_stack_init+0x1f8>
    RtbQueueFree(rtk_h5.adv_unref);
11025dd4:	9406      	ld.w      	r0, (r4, 0x18)
11025dd6:	e00016e5 	bsr      	0x11028ba0	// 11028ba0 <cpu_task_stack_init+0x1f8>
    h5_int_hal_callbacks = NULL;
11025dda:	1068      	lrw      	r3, 0x1fffb8fc	// 11025df8 <hci_h5_cleanup+0xac>
11025ddc:	3200      	movi      	r2, 0
11025dde:	b340      	st.w      	r2, (r3, 0x0)
    rtk_h5.internal_skb = NULL;
11025de0:	3300      	movi      	r3, 0
11025de2:	b46f      	st.w      	r3, (r4, 0x3c)
}
11025de4:	1492      	pop      	r4-r5, r15
11025de6:	0000      	bkpt
11025de8:	1fffb908 	.long	0x1fffb908
11025dec:	1fffb902 	.long	0x1fffb902
11025df0:	1fffb96c 	.long	0x1fffb96c
11025df4:	1fffb970 	.long	0x1fffb970
11025df8:	1fffb8fc 	.long	0x1fffb8fc

11025dfc <h5_sync_retrans_timeout_handler>:
{
11025dfc:	14d1      	push      	r4, r15
    if (rtk_h5.cleanuping) {
11025dfe:	108a      	lrw      	r4, 0x1fffb908	// 11025e24 <h5_sync_retrans_timeout_handler+0x28>
11025e00:	d864007c 	ld.b      	r3, (r4, 0x7c)
11025e04:	3b40      	cmpnei      	r3, 0
11025e06:	0809      	bt      	0x11025e18	// 11025e18 <h5_sync_retrans_timeout_handler+0x1c>
    if (rtk_h5.sync_retrans_count < SYNC_RETRANS_COUNT) {
11025e08:	9477      	ld.w      	r3, (r4, 0x5c)
11025e0a:	3b13      	cmphsi      	r3, 20
11025e0c:	0807      	bt      	0x11025e1a	// 11025e1a <h5_sync_retrans_timeout_handler+0x1e>
        hci_h5_send_sync_req();
11025e0e:	e3fffd70 	bsr      	0x110258ee	// 110258ee <hci_h5_send_sync_req>
        rtk_h5.sync_retrans_count ++;
11025e12:	9477      	ld.w      	r3, (r4, 0x5c)
11025e14:	2300      	addi      	r3, 1
11025e16:	b477      	st.w      	r3, (r4, 0x5c)
}
11025e18:	1491      	pop      	r4, r15
    return  aos_timer_stop(timerid);
11025e1a:	9412      	ld.w      	r0, (r4, 0x48)
11025e1c:	e3ffdd40 	bsr      	0x1102189c	// 1102189c <aos_timer_stop>
11025e20:	07fc      	br      	0x11025e18	// 11025e18 <h5_sync_retrans_timeout_handler+0x1c>
11025e22:	0000      	bkpt
11025e24:	1fffb908 	.long	0x1fffb908

11025e28 <h5_conf_retrans_timeout_handler>:
{
11025e28:	14d1      	push      	r4, r15
    if (rtk_h5.cleanuping) {
11025e2a:	108b      	lrw      	r4, 0x1fffb908	// 11025e54 <h5_conf_retrans_timeout_handler+0x2c>
11025e2c:	d864007c 	ld.b      	r3, (r4, 0x7c)
11025e30:	3b40      	cmpnei      	r3, 0
11025e32:	080b      	bt      	0x11025e48	// 11025e48 <h5_conf_retrans_timeout_handler+0x20>
    if (rtk_h5.conf_retrans_count < CONF_RETRANS_COUNT) {
11025e34:	9478      	ld.w      	r3, (r4, 0x60)
11025e36:	3b13      	cmphsi      	r3, 20
11025e38:	0809      	bt      	0x11025e4a	// 11025e4a <h5_conf_retrans_timeout_handler+0x22>
        h5_start_conf_retrans_timer();
11025e3a:	e3fffc3d 	bsr      	0x110256b4	// 110256b4 <h5_start_conf_retrans_timer>
        hci_h5_send_conf_req();
11025e3e:	e3fffd2d 	bsr      	0x11025898	// 11025898 <hci_h5_send_conf_req>
        rtk_h5.conf_retrans_count++;
11025e42:	9478      	ld.w      	r3, (r4, 0x60)
11025e44:	2300      	addi      	r3, 1
11025e46:	b478      	st.w      	r3, (r4, 0x60)
}
11025e48:	1491      	pop      	r4, r15
    return  aos_timer_stop(timerid);
11025e4a:	9413      	ld.w      	r0, (r4, 0x4c)
11025e4c:	e3ffdd28 	bsr      	0x1102189c	// 1102189c <aos_timer_stop>
11025e50:	07fc      	br      	0x11025e48	// 11025e48 <h5_conf_retrans_timeout_handler+0x20>
11025e52:	0000      	bkpt
11025e54:	1fffb908 	.long	0x1fffb908

11025e58 <hci_h5_send_cmd>:
{
11025e58:	14d2      	push      	r4-r5, r15
    skb = hci_skb_alloc_and_init(type, data, length);
11025e5a:	7400      	zextb      	r0, r0
{
11025e5c:	6d47      	mov      	r5, r1
11025e5e:	6d0b      	mov      	r4, r2
    skb = hci_skb_alloc_and_init(type, data, length);
11025e60:	e000189e 	bsr      	0x11028f9c	// 11028f9c <cpu_task_stack_init+0x5f4>
    if (!skb) {
11025e64:	3840      	cmpnei      	r0, 0
11025e66:	0c17      	bf      	0x11025e94	// 11025e94 <hci_h5_send_cmd+0x3c>
    h5_enqueue(skb);
11025e68:	e3fffa88 	bsr      	0x11025378	// 11025378 <h5_enqueue>
    num_hci_h5_cmd_pkts--;
11025e6c:	104c      	lrw      	r2, 0x1fffa5d8	// 11025e9c <hci_h5_send_cmd+0x44>
11025e6e:	9260      	ld.w      	r3, (r2, 0x0)
11025e70:	2b00      	subi      	r3, 1
11025e72:	b260      	st.w      	r3, (r2, 0x0)
    STREAM_TO_UINT16(opcode, data);
11025e74:	8561      	ld.b      	r3, (r5, 0x1)
11025e76:	4368      	lsli      	r3, r3, 8
11025e78:	8540      	ld.b      	r2, (r5, 0x0)
11025e7a:	60c8      	addu      	r3, r2
    if (opcode == 0x0c03) {
11025e7c:	74cd      	zexth      	r3, r3
11025e7e:	eb430c03 	cmpnei      	r3, 3075
11025e82:	0805      	bt      	0x11025e8c	// 11025e8c <hci_h5_send_cmd+0x34>
}

static int h5_stop_hw_init_ready_timer()
{
    return OsStopTimer(rtk_h5.timer_h5_hw_init_ready);
11025e84:	1067      	lrw      	r3, 0x1fffb908	// 11025ea0 <hci_h5_send_cmd+0x48>
    return  aos_timer_stop(timerid);
11025e86:	9315      	ld.w      	r0, (r3, 0x54)
11025e88:	e3ffdd0a 	bsr      	0x1102189c	// 1102189c <aos_timer_stop>
    h5_wake_up();
11025e8c:	e0001840 	bsr      	0x11028f0c	// 11028f0c <cpu_task_stack_init+0x564>
}
11025e90:	6c13      	mov      	r0, r4
11025e92:	1492      	pop      	r4-r5, r15
        return -1;
11025e94:	ea04ffff 	movi      	r4, 65535
11025e98:	07fc      	br      	0x11025e90	// 11025e90 <hci_h5_send_cmd+0x38>
11025e9a:	0000      	bkpt
11025e9c:	1fffa5d8 	.long	0x1fffa5d8
11025ea0:	1fffb908 	.long	0x1fffb908

11025ea4 <rtk_unrel_is_high_level>:
{
11025ea4:	14d0      	push      	r15
    return RtbGetQueueLen(rtk_h5.unrel) > 10;
11025ea6:	1064      	lrw      	r3, 0x1fffb908	// 11025eb4 <rtk_unrel_is_high_level+0x10>
11025ea8:	9304      	ld.w      	r0, (r3, 0x10)
11025eaa:	e0001813 	bsr      	0x11028ed0	// 11028ed0 <cpu_task_stack_init+0x528>
11025eae:	382a      	cmplti      	r0, 11
11025eb0:	6403      	mvcv      	r0
}
11025eb2:	1490      	pop      	r15
11025eb4:	1fffb908 	.long	0x1fffb908

11025eb8 <hci_h5_receive_msg>:
{
11025eb8:	14d4      	push      	r4-r7, r15
11025eba:	1425      	subi      	r14, r14, 20
11025ebc:	6d43      	mov      	r5, r0
    if (byte && length > 0) {
11025ebe:	3840      	cmpnei      	r0, 0
11025ec0:	0d3e      	bf      	0x1102613c	// 1102613c <hci_h5_receive_msg+0x284>
11025ec2:	3940      	cmpnei      	r1, 0
11025ec4:	0d3c      	bf      	0x1102613c	// 1102613c <hci_h5_receive_msg+0x284>
    bool     complete_packet = 0;
11025ec6:	3300      	movi      	r3, 0
        ret = h5_recv(&rtk_h5, byte, length);
11025ec8:	6d07      	mov      	r4, r1
    bool     complete_packet = 0;
11025eca:	b860      	st.w      	r3, (r14, 0x0)
        if (h5->rx_count) {
11025ecc:	03e2      	lrw      	r7, 0x1fffb908	// 11026140 <hci_h5_receive_msg+0x288>
    return byte_rev_table[byte];
11025ece:	0361      	lrw      	r3, 0x11011b0f	// 11026144 <hci_h5_receive_msg+0x28c>
11025ed0:	b861      	st.w      	r3, (r14, 0x4)
        if (h5->rx_count) {
11025ed2:	97c9      	ld.w      	r6, (r7, 0x24)
11025ed4:	3e40      	cmpnei      	r6, 0
11025ed6:	0cac      	bf      	0x1102602e	// 1102602e <hci_h5_receive_msg+0x176>
            if (*ptr == 0xc0) {
11025ed8:	8520      	ld.b      	r1, (r5, 0x0)
11025eda:	3200      	movi      	r2, 0
11025edc:	eb4100c0 	cmpnei      	r1, 192
11025ee0:	2a3f      	subi      	r2, 64
11025ee2:	0809      	bt      	0x11025ef4	// 11025ef4 <hci_h5_receive_msg+0x3c>
                hci_skb_free(&h5->rx_skb);
11025ee4:	0306      	lrw      	r0, 0x1fffb93c	// 11026148 <hci_h5_receive_msg+0x290>
11025ee6:	e00016ff 	bsr      	0x11028ce4	// 11028ce4 <cpu_task_stack_init+0x33c>
                h5->rx_state = H5_W4_PKT_START;
11025eea:	3301      	movi      	r3, 1
11025eec:	b76a      	st.w      	r3, (r7, 0x28)
                h5->rx_count = 0;
11025eee:	3300      	movi      	r3, 0
                h5->rx_count = 0;
11025ef0:	b769      	st.w      	r3, (r7, 0x24)
11025ef2:	041d      	br      	0x11025f2c	// 11025f2c <hci_h5_receive_msg+0x74>
    const uint8_t c0 = 0xc0, db = 0xdb;
11025ef4:	3300      	movi      	r3, 0
11025ef6:	2b24      	subi      	r3, 37
11025ef8:	dc6e0011 	st.b      	r3, (r14, 0x11)
    const uint8_t oof1 = 0x11, oof2 = 0x13;
11025efc:	3311      	movi      	r3, 17
    uint8_t *hdr = (uint8_t *)hci_skb_get_data(h5->rx_skb);
11025efe:	970d      	ld.w      	r0, (r7, 0x34)
    const uint8_t oof1 = 0x11, oof2 = 0x13;
11025f00:	dc6e0012 	st.b      	r3, (r14, 0x12)
11025f04:	3313      	movi      	r3, 19
    const uint8_t c0 = 0xc0, db = 0xdb;
11025f06:	dc4e0010 	st.b      	r2, (r14, 0x10)
11025f0a:	dc2e000f 	st.b      	r1, (r14, 0xf)
    const uint8_t oof1 = 0x11, oof2 = 0x13;
11025f0e:	dc6e0013 	st.b      	r3, (r14, 0x13)
    uint8_t *hdr = (uint8_t *)hci_skb_get_data(h5->rx_skb);
11025f12:	e0001a3d 	bsr      	0x1102938c	// 1102938c <cpu_task_stack_init+0x9e4>
    if (H5_ESCSTATE_NOESC == h5->rx_esc_state) {
11025f16:	974b      	ld.w      	r2, (r7, 0x2c)
    uint8_t *hdr = (uint8_t *)hci_skb_get_data(h5->rx_skb);
11025f18:	6d83      	mov      	r6, r0
    if (H5_ESCSTATE_NOESC == h5->rx_esc_state) {
11025f1a:	3a40      	cmpnei      	r2, 0
11025f1c:	0828      	bt      	0x11025f6c	// 11025f6c <hci_h5_receive_msg+0xb4>
        if (0xdb == byte) {
11025f1e:	d84e000f 	ld.b      	r2, (r14, 0xf)
11025f22:	eb4200db 	cmpnei      	r2, 219
11025f26:	0809      	bt      	0x11025f38	// 11025f38 <hci_h5_receive_msg+0x80>
            h5->rx_esc_state = H5_ESCSTATE_ESC;
11025f28:	3301      	movi      	r3, 1
11025f2a:	b76b      	st.w      	r3, (r7, 0x2c)
                        count--;
11025f2c:	2c00      	subi      	r4, 1
    while (count) {
11025f2e:	3c40      	cmpnei      	r4, 0
                        ptr++;
11025f30:	2500      	addi      	r5, 1
    while (count) {
11025f32:	0bd0      	bt      	0x11025ed2	// 11025ed2 <hci_h5_receive_msg+0x1a>
    return complete_packet;
11025f34:	98c0      	ld.w      	r6, (r14, 0x0)
11025f36:	0500      	br      	0x11026136	// 11026136 <hci_h5_receive_msg+0x27e>
            memcpy(hci_skb_put(h5->rx_skb, 1), &byte, 1);
11025f38:	3101      	movi      	r1, 1
11025f3a:	970d      	ld.w      	r0, (r7, 0x34)
11025f3c:	e00015e4 	bsr      	0x11028b04	// 11028b04 <cpu_task_stack_init+0x15c>
11025f40:	3201      	movi      	r2, 1
11025f42:	e42e000e 	addi      	r1, r14, 15
11025f46:	e000183d 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
            if (H5_HDR_CRC(hdr) && h5->rx_state != H5_W4_CRC) {
11025f4a:	8640      	ld.b      	r2, (r6, 0x0)
11025f4c:	e4422040 	andi      	r2, r2, 64
11025f50:	3a40      	cmpnei      	r2, 0
11025f52:	0c09      	bf      	0x11025f64	// 11025f64 <hci_h5_receive_msg+0xac>
11025f54:	974a      	ld.w      	r2, (r7, 0x28)
11025f56:	3a44      	cmpnei      	r2, 4
11025f58:	0c06      	bf      	0x11025f64	// 11025f64 <hci_h5_receive_msg+0xac>
                h5_crc_update(&h5->message_crc, byte);
11025f5a:	d82e000f 	ld.b      	r1, (r14, 0xf)
11025f5e:	131c      	lrw      	r0, 0x1fffb92a	// 1102614c <hci_h5_receive_msg+0x294>
11025f60:	e0001644 	bsr      	0x11028be8	// 11028be8 <cpu_task_stack_init+0x240>
                h5->rx_count--;
11025f64:	9749      	ld.w      	r2, (r7, 0x24)
11025f66:	2a00      	subi      	r2, 1
11025f68:	b749      	st.w      	r2, (r7, 0x24)
11025f6a:	07e1      	br      	0x11025f2c	// 11025f2c <hci_h5_receive_msg+0x74>
    } else if (H5_ESCSTATE_ESC == h5->rx_esc_state) {
11025f6c:	3a41      	cmpnei      	r2, 1
11025f6e:	0bdf      	bt      	0x11025f2c	// 11025f2c <hci_h5_receive_msg+0x74>
        switch (byte) {
11025f70:	d80e000f 	ld.b      	r0, (r14, 0xf)
11025f74:	28db      	subi      	r0, 220
11025f76:	3803      	cmphsi      	r0, 4
11025f78:	0854      	bt      	0x11026020	// 11026020 <hci_h5_receive_msg+0x168>
                memcpy(hci_skb_put(h5->rx_skb, 1), &oof2, 1);
11025f7a:	3101      	movi      	r1, 1
        switch (byte) {
11025f7c:	e0001a3e 	bsr      	0x110293f8	// 110293f8 <cpu_task_stack_init+0xa50>
11025f80:	3d2a1802 	.long	0x3d2a1802
                memcpy(hci_skb_put(h5->rx_skb, 1), &c0, 1);
11025f84:	970d      	ld.w      	r0, (r7, 0x34)
11025f86:	e00015bf 	bsr      	0x11028b04	// 11028b04 <cpu_task_stack_init+0x15c>
11025f8a:	3201      	movi      	r2, 1
11025f8c:	1904      	addi      	r1, r14, 16
11025f8e:	e0001819 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
                if (H5_HDR_CRC(hdr) && h5->rx_state != H5_W4_CRC) {
11025f92:	8640      	ld.b      	r2, (r6, 0x0)
11025f94:	e4422040 	andi      	r2, r2, 64
11025f98:	3a40      	cmpnei      	r2, 0
11025f9a:	0c08      	bf      	0x11025faa	// 11025faa <hci_h5_receive_msg+0xf2>
11025f9c:	974a      	ld.w      	r2, (r7, 0x28)
11025f9e:	3a44      	cmpnei      	r2, 4
11025fa0:	0c05      	bf      	0x11025faa	// 11025faa <hci_h5_receive_msg+0xf2>
                    h5_crc_update(&h5-> message_crc, 0xc0);
11025fa2:	31c0      	movi      	r1, 192
                    h5_crc_update(&h5-> message_crc, oof2);
11025fa4:	130a      	lrw      	r0, 0x1fffb92a	// 1102614c <hci_h5_receive_msg+0x294>
11025fa6:	e0001621 	bsr      	0x11028be8	// 11028be8 <cpu_task_stack_init+0x240>
                h5->rx_esc_state = H5_ESCSTATE_NOESC;
11025faa:	3300      	movi      	r3, 0
11025fac:	b76b      	st.w      	r3, (r7, 0x2c)
11025fae:	07db      	br      	0x11025f64	// 11025f64 <hci_h5_receive_msg+0xac>
                memcpy(hci_skb_put(h5->rx_skb, 1), &db, 1);
11025fb0:	970d      	ld.w      	r0, (r7, 0x34)
11025fb2:	e00015a9 	bsr      	0x11028b04	// 11028b04 <cpu_task_stack_init+0x15c>
11025fb6:	3201      	movi      	r2, 1
11025fb8:	e42e0010 	addi      	r1, r14, 17
11025fbc:	e0001802 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
                if (H5_HDR_CRC(hdr) && h5->rx_state != H5_W4_CRC) {
11025fc0:	8640      	ld.b      	r2, (r6, 0x0)
11025fc2:	e4422040 	andi      	r2, r2, 64
11025fc6:	3a40      	cmpnei      	r2, 0
11025fc8:	0ff1      	bf      	0x11025faa	// 11025faa <hci_h5_receive_msg+0xf2>
11025fca:	974a      	ld.w      	r2, (r7, 0x28)
11025fcc:	3a44      	cmpnei      	r2, 4
11025fce:	0fee      	bf      	0x11025faa	// 11025faa <hci_h5_receive_msg+0xf2>
                    h5_crc_update(&h5-> message_crc, 0xdb);
11025fd0:	31db      	movi      	r1, 219
11025fd2:	07e9      	br      	0x11025fa4	// 11025fa4 <hci_h5_receive_msg+0xec>
                memcpy(hci_skb_put(h5->rx_skb, 1), &oof1, 1);
11025fd4:	970d      	ld.w      	r0, (r7, 0x34)
11025fd6:	e0001597 	bsr      	0x11028b04	// 11028b04 <cpu_task_stack_init+0x15c>
11025fda:	3201      	movi      	r2, 1
11025fdc:	e42e0011 	addi      	r1, r14, 18
11025fe0:	e00017f0 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
                if (H5_HDR_CRC(hdr) && h5->rx_state != H5_W4_CRC) {
11025fe4:	8640      	ld.b      	r2, (r6, 0x0)
11025fe6:	e4422040 	andi      	r2, r2, 64
11025fea:	3a40      	cmpnei      	r2, 0
11025fec:	0fdf      	bf      	0x11025faa	// 11025faa <hci_h5_receive_msg+0xf2>
11025fee:	974a      	ld.w      	r2, (r7, 0x28)
11025ff0:	3a44      	cmpnei      	r2, 4
11025ff2:	0fdc      	bf      	0x11025faa	// 11025faa <hci_h5_receive_msg+0xf2>
                    h5_crc_update(&h5-> message_crc, oof1);
11025ff4:	d82e0012 	ld.b      	r1, (r14, 0x12)
11025ff8:	07d6      	br      	0x11025fa4	// 11025fa4 <hci_h5_receive_msg+0xec>
                memcpy(hci_skb_put(h5->rx_skb, 1), &oof2, 1);
11025ffa:	970d      	ld.w      	r0, (r7, 0x34)
11025ffc:	e0001584 	bsr      	0x11028b04	// 11028b04 <cpu_task_stack_init+0x15c>
11026000:	3201      	movi      	r2, 1
11026002:	e42e0012 	addi      	r1, r14, 19
11026006:	e00017dd 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
                if (H5_HDR_CRC(hdr) && h5->rx_state != H5_W4_CRC) {
1102600a:	8640      	ld.b      	r2, (r6, 0x0)
1102600c:	e4422040 	andi      	r2, r2, 64
11026010:	3a40      	cmpnei      	r2, 0
11026012:	0fcc      	bf      	0x11025faa	// 11025faa <hci_h5_receive_msg+0xf2>
11026014:	974a      	ld.w      	r2, (r7, 0x28)
11026016:	3a44      	cmpnei      	r2, 4
11026018:	0fc9      	bf      	0x11025faa	// 11025faa <hci_h5_receive_msg+0xf2>
                    h5_crc_update(&h5-> message_crc, oof2);
1102601a:	d82e0013 	ld.b      	r1, (r14, 0x13)
1102601e:	07c3      	br      	0x11025fa4	// 11025fa4 <hci_h5_receive_msg+0xec>
                hci_skb_free(&h5->rx_skb);
11026020:	120a      	lrw      	r0, 0x1fffb93c	// 11026148 <hci_h5_receive_msg+0x290>
11026022:	e0001661 	bsr      	0x11028ce4	// 11028ce4 <cpu_task_stack_init+0x33c>
                h5->rx_skb = NULL;
11026026:	3300      	movi      	r3, 0
11026028:	b76d      	st.w      	r3, (r7, 0x34)
                h5->rx_state = H5_W4_PKT_DELIMITER;
1102602a:	b76a      	st.w      	r3, (r7, 0x28)
1102602c:	0762      	br      	0x11025ef0	// 11025ef0 <hci_h5_receive_msg+0x38>
        switch (h5->rx_state) {
1102602e:	970a      	ld.w      	r0, (r7, 0x28)
11026030:	3804      	cmphsi      	r0, 5
11026032:	0b50      	bt      	0x11025ed2	// 11025ed2 <hci_h5_receive_msg+0x1a>
11026034:	e00019e2 	bsr      	0x110293f8	// 110293f8 <cpu_task_stack_init+0xa50>
11026038:	2d036861 	.long	0x2d036861
1102603c:	0039      	.short	0x0039
                skb_data = hci_skb_get_data(h5->rx_skb);
1102603e:	970d      	ld.w      	r0, (r7, 0x34)
11026040:	e00019a6 	bsr      	0x1102938c	// 1102938c <cpu_task_stack_init+0x9e4>
                if ((0xff & (uint8_t) ~(skb_data[0] + skb_data[1] +
11026044:	80c2      	ld.b      	r6, (r0, 0x2)
11026046:	8020      	ld.b      	r1, (r0, 0x0)
11026048:	8041      	ld.b      	r2, (r0, 0x1)
1102604a:	6084      	addu      	r2, r1
1102604c:	6098      	addu      	r2, r6
                                        skb_data[2])) != skb_data[3]) {
1102604e:	6c8a      	nor      	r2, r2
                if ((0xff & (uint8_t) ~(skb_data[0] + skb_data[1] +
11026050:	80c3      	ld.b      	r6, (r0, 0x3)
11026052:	7488      	zextb      	r2, r2
11026054:	649a      	cmpne      	r6, r2
11026056:	0c08      	bf      	0x11026066	// 11026066 <hci_h5_receive_msg+0x1ae>
                    hci_skb_free(&h5->rx_skb);
11026058:	111c      	lrw      	r0, 0x1fffb93c	// 11026148 <hci_h5_receive_msg+0x290>
1102605a:	e0001645 	bsr      	0x11028ce4	// 11028ce4 <cpu_task_stack_init+0x33c>
                    h5->rx_state = H5_W4_PKT_DELIMITER;
1102605e:	3300      	movi      	r3, 0
11026060:	b76a      	st.w      	r3, (r7, 0x28)
                    h5->rx_count = 0;
11026062:	b769      	st.w      	r3, (r7, 0x24)
11026064:	0737      	br      	0x11025ed2	// 11025ed2 <hci_h5_receive_msg+0x1a>
                if (H5_HDR_RELIABLE(hdr)
11026066:	4947      	lsri      	r2, r1, 7
11026068:	3a40      	cmpnei      	r2, 0
1102606a:	0c0b      	bf      	0x11026080	// 11026080 <hci_h5_receive_msg+0x1c8>
                    && (H5_HDR_SEQ(hdr) != h5->rxseq_txack)) {
1102606c:	875c      	ld.b      	r2, (r7, 0x1c)
1102606e:	e4212007 	andi      	r1, r1, 7
11026072:	644a      	cmpne      	r2, r1
11026074:	0c06      	bf      	0x11026080	// 11026080 <hci_h5_receive_msg+0x1c8>
                    h5->is_txack_req = 1;
11026076:	3301      	movi      	r3, 1
11026078:	a77f      	st.b      	r3, (r7, 0x1f)
                    h5_wake_up();
1102607a:	e0001749 	bsr      	0x11028f0c	// 11028f0c <cpu_task_stack_init+0x564>
1102607e:	07ed      	br      	0x11026058	// 11026058 <hci_h5_receive_msg+0x1a0>
                h5->rx_state = H5_W4_DATA;
11026080:	3303      	movi      	r3, 3
11026082:	b76a      	st.w      	r3, (r7, 0x28)
                h5->rx_count = H5_HDR_LEN(hdr);
11026084:	8041      	ld.b      	r2, (r0, 0x1)
11026086:	8022      	ld.b      	r1, (r0, 0x2)
11026088:	4a44      	lsri      	r2, r2, 4
1102608a:	4124      	lsli      	r1, r1, 4
1102608c:	6084      	addu      	r2, r1
1102608e:	b749      	st.w      	r2, (r7, 0x24)
11026090:	0721      	br      	0x11025ed2	// 11025ed2 <hci_h5_receive_msg+0x1a>
                hdr = (uint8_t *)hci_skb_get_data(h5->rx_skb);
11026092:	970d      	ld.w      	r0, (r7, 0x34)
11026094:	e000197c 	bsr      	0x1102938c	// 1102938c <cpu_task_stack_init+0x9e4>
                if (H5_HDR_CRC(hdr)) {
11026098:	8040      	ld.b      	r2, (r0, 0x0)
1102609a:	e4422040 	andi      	r2, r2, 64
1102609e:	3a40      	cmpnei      	r2, 0
110260a0:	0c28      	bf      	0x110260f0	// 110260f0 <hci_h5_receive_msg+0x238>
                    h5->rx_state = H5_W4_CRC;
110260a2:	3304      	movi      	r3, 4
110260a4:	b76a      	st.w      	r3, (r7, 0x28)
                    h5->rx_count = 2;
110260a6:	3302      	movi      	r3, 2
110260a8:	07dd      	br      	0x11026062	// 11026062 <hci_h5_receive_msg+0x1aa>
                if (bit_rev16(h5->message_crc) != h5_get_crc(h5)) {
110260aa:	8f51      	ld.h      	r2, (r7, 0x22)
    return byte_rev_table[byte];
110260ac:	9861      	ld.w      	r3, (r14, 0x4)
110260ae:	7448      	zextb      	r1, r2
110260b0:	604c      	addu      	r1, r3
    return (bit_rev8(x & 0xff) << 8) | bit_rev8(x >> 8);
110260b2:	81c0      	ld.b      	r6, (r1, 0x0)
    return byte_rev_table[byte];
110260b4:	4a48      	lsri      	r2, r2, 8
    uint8_t *data = hci_skb_get_data(h5->rx_skb) + hci_skb_get_data_length(h5->rx_skb) - 2;
110260b6:	970d      	ld.w      	r0, (r7, 0x34)
    return byte_rev_table[byte];
110260b8:	608c      	addu      	r2, r3
    return (bit_rev8(x & 0xff) << 8) | bit_rev8(x >> 8);
110260ba:	8240      	ld.b      	r2, (r2, 0x0)
110260bc:	46c8      	lsli      	r6, r6, 8
110260be:	6d88      	or      	r6, r2
    uint8_t *data = hci_skb_get_data(h5->rx_skb) + hci_skb_get_data_length(h5->rx_skb) - 2;
110260c0:	e0001966 	bsr      	0x1102938c	// 1102938c <cpu_task_stack_init+0x9e4>
110260c4:	b802      	st.w      	r0, (r14, 0x8)
110260c6:	970d      	ld.w      	r0, (r7, 0x34)
110260c8:	e0001530 	bsr      	0x11028b28	// 11028b28 <cpu_task_stack_init+0x180>
110260cc:	9842      	ld.w      	r2, (r14, 0x8)
110260ce:	2801      	subi      	r0, 2
110260d0:	6008      	addu      	r0, r2
    crc = data[1] + (data[0] << 8);
110260d2:	8040      	ld.b      	r2, (r0, 0x0)
110260d4:	4248      	lsli      	r2, r2, 8
110260d6:	8021      	ld.b      	r1, (r0, 0x1)
110260d8:	6084      	addu      	r2, r1
                if (bit_rev16(h5->message_crc) != h5_get_crc(h5)) {
110260da:	7489      	zexth      	r2, r2
110260dc:	658a      	cmpne      	r2, r6
110260de:	0bbd      	bt      	0x11026058	// 11026058 <hci_h5_receive_msg+0x1a0>
                hci_skb_trim(h5->rx_skb, hci_skb_get_data_length(h5->rx_skb) - 2);
110260e0:	97cd      	ld.w      	r6, (r7, 0x34)
110260e2:	6c1b      	mov      	r0, r6
110260e4:	e0001522 	bsr      	0x11028b28	// 11028b28 <cpu_task_stack_init+0x180>
110260e8:	5827      	subi      	r1, r0, 2
110260ea:	6c1b      	mov      	r0, r6
110260ec:	e0001788 	bsr      	0x11028ffc	// 11028ffc <cpu_task_stack_init+0x654>
                h5_complete_rx_pkt(h5);
110260f0:	e3fffc82 	bsr      	0x110259f4	// 110259f4 <h5_complete_rx_pkt.constprop.11>
                complete_packet = 1;
110260f4:	3301      	movi      	r3, 1
110260f6:	b860      	st.w      	r3, (r14, 0x0)
110260f8:	06ed      	br      	0x11025ed2	// 11025ed2 <hci_h5_receive_msg+0x1a>
                switch (*ptr) {
110260fa:	8540      	ld.b      	r2, (r5, 0x0)
110260fc:	eb4200c0 	cmpnei      	r2, 192
11026100:	0b16      	bt      	0x11025f2c	// 11025f2c <hci_h5_receive_msg+0x74>
                        h5->rx_state = H5_W4_PKT_START;
11026102:	3301      	movi      	r3, 1
11026104:	b76a      	st.w      	r3, (r7, 0x28)
11026106:	0713      	br      	0x11025f2c	// 11025f2c <hci_h5_receive_msg+0x74>
                switch (*ptr) {
11026108:	8540      	ld.b      	r2, (r5, 0x0)
1102610a:	eb4200c0 	cmpnei      	r2, 192
1102610e:	0f0f      	bf      	0x11025f2c	// 11025f2c <hci_h5_receive_msg+0x74>
                        h5->rx_state = H5_W4_HDR;
11026110:	3302      	movi      	r3, 2
                        h5->rx_skb = hci_skb_alloc(300);
11026112:	3096      	movi      	r0, 150
                        h5->rx_state = H5_W4_HDR;
11026114:	b76a      	st.w      	r3, (r7, 0x28)
                        h5->rx_count = 4;
11026116:	3304      	movi      	r3, 4
                        h5->rx_skb = hci_skb_alloc(300);
11026118:	4001      	lsli      	r0, r0, 1
                        h5->rx_count = 4;
1102611a:	b769      	st.w      	r3, (r7, 0x24)
                        h5->rx_esc_state = H5_ESCSTATE_NOESC;
1102611c:	3300      	movi      	r3, 0
1102611e:	b76b      	st.w      	r3, (r7, 0x2c)
                        H5_CRC_INIT(h5->message_crc);
11026120:	3300      	movi      	r3, 0
11026122:	2b00      	subi      	r3, 1
11026124:	af71      	st.h      	r3, (r7, 0x22)
                        h5->rx_skb = hci_skb_alloc(300);
11026126:	e00014ad 	bsr      	0x11028a80	// 11028a80 <cpu_task_stack_init+0xd8>
                        if (!h5->rx_skb) {
1102612a:	3840      	cmpnei      	r0, 0
                        h5->rx_skb = hci_skb_alloc(300);
1102612c:	b70d      	st.w      	r0, (r7, 0x34)
                        if (!h5->rx_skb) {
1102612e:	0ad2      	bt      	0x11025ed2	// 11025ed2 <hci_h5_receive_msg+0x1a>
                            h5->rx_state = H5_W4_PKT_DELIMITER;
11026130:	3300      	movi      	r3, 0
11026132:	b76a      	st.w      	r3, (r7, 0x28)
                            h5->rx_count = 0;
11026134:	b769      	st.w      	r3, (r7, 0x24)
}
11026136:	6c1b      	mov      	r0, r6
11026138:	1405      	addi      	r14, r14, 20
1102613a:	1494      	pop      	r4-r7, r15
        return 0;
1102613c:	3600      	movi      	r6, 0
1102613e:	07fc      	br      	0x11026136	// 11026136 <hci_h5_receive_msg+0x27e>
11026140:	1fffb908 	.long	0x1fffb908
11026144:	11011b0f 	.long	0x11011b0f
11026148:	1fffb93c 	.long	0x1fffb93c
1102614c:	1fffb92a 	.long	0x1fffb92a

11026150 <get_h5_controller_interface>:
};

const h5_t *get_h5_controller_interface()
{
    return &hci_h5_int_func;
}
11026150:	1001      	lrw      	r0, 0x11011c30	// 11026154 <get_h5_controller_interface+0x4>
11026152:	783c      	jmp      	r15
11026154:	11011c30 	.long	0x11011c30

11026158 <hci_api_le_rand>:
    return LL_EncLtkNegReply(conn_handle);
}


int hci_api_le_rand(uint8_t random_data[8])
{
11026158:	14d2      	push      	r4-r5, r15
1102615a:	6d03      	mov      	r4, r0
    extern uint8_t TRNG_Rand(uint8_t* buf, uint8 len);
	uint8_t status = 0;
    unsigned int irq_key = 0;
    irq_key = irq_lock();
1102615c:	e3ffe5db 	bsr      	0x11022d12	// 11022d12 <irq_lock>
11026160:	6d43      	mov      	r5, r0
	status = TRNG_Rand(random_data, 8);
11026162:	3108      	movi      	r1, 8
11026164:	6c13      	mov      	r0, r4
11026166:	e0001769 	bsr      	0x11029038	// 11029038 <cpu_task_stack_init+0x690>
1102616a:	6d03      	mov      	r4, r0
    irq_unlock(irq_key);
1102616c:	6c17      	mov      	r0, r5
1102616e:	e3ffe5d6 	bsr      	0x11022d1a	// 11022d1a <irq_unlock>
    return status;
}
11026172:	6c13      	mov      	r0, r4
11026174:	1492      	pop      	r4-r5, r15

11026176 <hciLESetPrivacyMode>:
{
    return 0;
//    return HCI_LE_Set_Privacy_ModeCmd    (pBuf[0],
//                                       &pBuf[1],
//                                        pBuf[7]);
}
11026176:	3000      	movi      	r0, 0
11026178:	783c      	jmp      	r15

1102617a <adv_scan_schd_idle_exit>:
static int adv_scan_schd_idle_exit(adv_scan_schd_state_en st)
{
    SCHD_LOGD("idle exit\n");
    // do nothing
    return 0;
}
1102617a:	3000      	movi      	r0, 0
1102617c:	783c      	jmp      	r15

1102617e <hciDisconnect>:
{
1102617e:	14d0      	push      	r15
    return HCI_DisconnectCmd(BUILD_UINT16(pBuf[0],
11026180:	8061      	ld.b      	r3, (r0, 0x1)
11026182:	8022      	ld.b      	r1, (r0, 0x2)
11026184:	4368      	lsli      	r3, r3, 8
11026186:	8000      	ld.b      	r0, (r0, 0x0)
11026188:	600c      	addu      	r0, r3
1102618a:	7401      	zexth      	r0, r0
1102618c:	e0001804 	bsr      	0x11029194	// 11029194 <cpu_task_stack_init+0x7ec>
}
11026190:	1490      	pop      	r15

11026192 <hciReadRemoteVersionInfo>:
{
11026192:	14d0      	push      	r15
    return HCI_ReadRemoteVersionInfoCmd(BUILD_UINT16(pBuf[0],
11026194:	8061      	ld.b      	r3, (r0, 0x1)
11026196:	4368      	lsli      	r3, r3, 8
11026198:	8000      	ld.b      	r0, (r0, 0x0)
1102619a:	600c      	addu      	r0, r3
1102619c:	7401      	zexth      	r0, r0
1102619e:	e0001651 	bsr      	0x11028e40	// 11028e40 <cpu_task_stack_init+0x498>
}
110261a2:	1490      	pop      	r15

110261a4 <hciSetEventMask>:
{
110261a4:	14d0      	push      	r15
    return HCI_SetEventMaskCmd(pBuf);
110261a6:	e00015e1 	bsr      	0x11028d68	// 11028d68 <cpu_task_stack_init+0x3c0>
}
110261aa:	1490      	pop      	r15

110261ac <hciReset>:
{
110261ac:	14d1      	push      	r4, r15
    int err = HCI_ResetCmd();
110261ae:	e0001547 	bsr      	0x11028c3c	// 11028c3c <cpu_task_stack_init+0x294>
110261b2:	6d03      	mov      	r4, r0
    llInitFeatureSetDLE(1);
110261b4:	3001      	movi      	r0, 1
110261b6:	e000188b 	bsr      	0x110292cc	// 110292cc <cpu_task_stack_init+0x924>
}
110261ba:	6c13      	mov      	r0, r4
110261bc:	1491      	pop      	r4, r15

110261be <hciReadTransmitPowerLevel>:
{
110261be:	14d0      	push      	r15
    return HCI_ReadTransmitPowerLevelCmd(BUILD_UINT16(pBuf[0],
110261c0:	8061      	ld.b      	r3, (r0, 0x1)
110261c2:	8022      	ld.b      	r1, (r0, 0x2)
110261c4:	4368      	lsli      	r3, r3, 8
110261c6:	8000      	ld.b      	r0, (r0, 0x0)
110261c8:	600c      	addu      	r0, r3
110261ca:	7401      	zexth      	r0, r0
110261cc:	e0001520 	bsr      	0x11028c0c	// 11028c0c <cpu_task_stack_init+0x264>
}
110261d0:	1490      	pop      	r15

110261d2 <hciSetControllerToHostFlowCtrl>:
{
110261d2:	14d0      	push      	r15
    return HCI_SetControllerToHostFlowCtrlCmd(pBuf[0]);
110261d4:	8000      	ld.b      	r0, (r0, 0x0)
110261d6:	e00014df 	bsr      	0x11028b94	// 11028b94 <cpu_task_stack_init+0x1ec>
}
110261da:	1490      	pop      	r15

110261dc <hciHostBufferSize>:
{
110261dc:	14d1      	push      	r4, r15
                                 BUILD_UINT16(pBuf[5], pBuf[6]));
110261de:	8066      	ld.b      	r3, (r0, 0x6)
110261e0:	8045      	ld.b      	r2, (r0, 0x5)
    return HCI_HostBufferSizeCmd(BUILD_UINT16(pBuf[0], pBuf[1]),
110261e2:	8081      	ld.b      	r4, (r0, 0x1)
                                 BUILD_UINT16(pBuf[5], pBuf[6]));
110261e4:	4368      	lsli      	r3, r3, 8
    return HCI_HostBufferSizeCmd(BUILD_UINT16(pBuf[0], pBuf[1]),
110261e6:	60c8      	addu      	r3, r2
                                 BUILD_UINT16(pBuf[3], pBuf[4]),
110261e8:	8044      	ld.b      	r2, (r0, 0x4)
110261ea:	8023      	ld.b      	r1, (r0, 0x3)
    return HCI_HostBufferSizeCmd(BUILD_UINT16(pBuf[0], pBuf[1]),
110261ec:	74cd      	zexth      	r3, r3
110261ee:	4488      	lsli      	r4, r4, 8
                                 BUILD_UINT16(pBuf[3], pBuf[4]),
110261f0:	4248      	lsli      	r2, r2, 8
    return HCI_HostBufferSizeCmd(BUILD_UINT16(pBuf[0], pBuf[1]),
110261f2:	6084      	addu      	r2, r1
110261f4:	8022      	ld.b      	r1, (r0, 0x2)
110261f6:	7489      	zexth      	r2, r2
110261f8:	8000      	ld.b      	r0, (r0, 0x0)
110261fa:	6010      	addu      	r0, r4
110261fc:	7401      	zexth      	r0, r0
110261fe:	e00014a1 	bsr      	0x11028b40	// 11028b40 <cpu_task_stack_init+0x198>
}
11026202:	1491      	pop      	r4, r15

11026204 <hciHostNumCompletedPkt>:
{
11026204:	14d0      	push      	r15
11026206:	1421      	subi      	r14, r14, 4
    return HCI_HostNumCompletedPktCmd(pBuf[0],
11026208:	6c7b      	mov      	r1, r14
    connHandle = BUILD_UINT16(pBuf[1], pBuf[2]);
1102620a:	8062      	ld.b      	r3, (r0, 0x2)
1102620c:	8041      	ld.b      	r2, (r0, 0x1)
1102620e:	4368      	lsli      	r3, r3, 8
11026210:	60c8      	addu      	r3, r2
11026212:	dc6e1000 	st.h      	r3, (r14, 0x0)
    numCmp     = BUILD_UINT16(pBuf[3], pBuf[4]);
11026216:	8043      	ld.b      	r2, (r0, 0x3)
11026218:	8064      	ld.b      	r3, (r0, 0x4)
    return HCI_HostNumCompletedPktCmd(pBuf[0],
1102621a:	8000      	ld.b      	r0, (r0, 0x0)
    numCmp     = BUILD_UINT16(pBuf[3], pBuf[4]);
1102621c:	4368      	lsli      	r3, r3, 8
1102621e:	60c8      	addu      	r3, r2
11026220:	dc6e1001 	st.h      	r3, (r14, 0x2)
    return HCI_HostNumCompletedPktCmd(pBuf[0],
11026224:	e44e0001 	addi      	r2, r14, 2
11026228:	e0001624 	bsr      	0x11028e70	// 11028e70 <cpu_task_stack_init+0x4c8>
}
1102622c:	1401      	addi      	r14, r14, 4
1102622e:	1490      	pop      	r15

11026230 <hciReadLocalSupportedCommands>:
{
11026230:	14d0      	push      	r15
    return HCI_ReadLocalSupportedCommandsCmd();
11026232:	e00016a3 	bsr      	0x11028f78	// 11028f78 <cpu_task_stack_init+0x5d0>
}
11026236:	1490      	pop      	r15

11026238 <hciReadLocalSupportedFeatures>:
{
11026238:	14d0      	push      	r15
    return HCI_ReadLocalSupportedFeaturesCmd();
1102623a:	e0001681 	bsr      	0x11028f3c	// 11028f3c <cpu_task_stack_init+0x594>
}
1102623e:	1490      	pop      	r15

11026240 <hciReadRssi>:
{
11026240:	14d0      	push      	r15
    return HCI_ReadRssiCmd(BUILD_UINT16(pBuf[0], pBuf[1]));
11026242:	8061      	ld.b      	r3, (r0, 0x1)
11026244:	4368      	lsli      	r3, r3, 8
11026246:	8000      	ld.b      	r0, (r0, 0x0)
11026248:	600c      	addu      	r0, r3
1102624a:	7401      	zexth      	r0, r0
1102624c:	e0001684 	bsr      	0x11028f54	// 11028f54 <cpu_task_stack_init+0x5ac>
}
11026250:	1490      	pop      	r15

11026252 <hciLEReadLocalSupportedFeatures>:
{
11026252:	14d0      	push      	r15
    return HCI_LE_ReadLocalSupportedFeaturesCmd();
11026254:	e0001554 	bsr      	0x11028cfc	// 11028cfc <cpu_task_stack_init+0x354>
}
11026258:	1490      	pop      	r15

1102625a <hciLESetRandomAddr>:
{
1102625a:	14d0      	push      	r15
    return HCI_LE_SetRandomAddressCmd(pBuf);
1102625c:	e00015c8 	bsr      	0x11028dec	// 11028dec <cpu_task_stack_init+0x444>
}
11026260:	1490      	pop      	r15

11026262 <hciLESetScanRspData>:
{
11026262:	14d0      	push      	r15
    return HCI_LE_SetScanRspDataCmd(pBuf[0],
11026264:	5822      	addi      	r1, r0, 1
11026266:	8000      	ld.b      	r0, (r0, 0x0)
11026268:	e00015e0 	bsr      	0x11028e28	// 11028e28 <cpu_task_stack_init+0x480>
}
1102626c:	1490      	pop      	r15

1102626e <hciLEReadAdvChanTxPower>:
{
1102626e:	14d0      	push      	r15
    return HCI_LE_ReadAdvChanTxPowerCmd();
11026270:	e000184c 	bsr      	0x11029308	// 11029308 <cpu_task_stack_init+0x960>
}
11026274:	1490      	pop      	r15

11026276 <hciLESetScanParam>:
{
11026276:	14d1      	push      	r4, r15
11026278:	1421      	subi      	r14, r14, 4
                                  BUILD_UINT16(pBuf[3], pBuf[4]),
1102627a:	8044      	ld.b      	r2, (r0, 0x4)
1102627c:	8023      	ld.b      	r1, (r0, 0x3)
1102627e:	4248      	lsli      	r2, r2, 8
    return HCI_LE_SetScanParamCmd(pBuf[0],
11026280:	6084      	addu      	r2, r1
                                  BUILD_UINT16(pBuf[1], pBuf[2]),
11026282:	8022      	ld.b      	r1, (r0, 0x2)
11026284:	8081      	ld.b      	r4, (r0, 0x1)
    return HCI_LE_SetScanParamCmd(pBuf[0],
11026286:	8065      	ld.b      	r3, (r0, 0x5)
                                  BUILD_UINT16(pBuf[1], pBuf[2]),
11026288:	4128      	lsli      	r1, r1, 8
    return HCI_LE_SetScanParamCmd(pBuf[0],
1102628a:	6050      	addu      	r1, r4
1102628c:	8080      	ld.b      	r4, (r0, 0x0)
1102628e:	8006      	ld.b      	r0, (r0, 0x6)
11026290:	b800      	st.w      	r0, (r14, 0x0)
11026292:	7489      	zexth      	r2, r2
11026294:	7445      	zexth      	r1, r1
11026296:	6c13      	mov      	r0, r4
11026298:	e000168e 	bsr      	0x11028fb4	// 11028fb4 <cpu_task_stack_init+0x60c>
}
1102629c:	1401      	addi      	r14, r14, 4
1102629e:	1491      	pop      	r4, r15

110262a0 <hciLECreateConnCancel>:
{
110262a0:	14d0      	push      	r15
    printf("ca\n");
110262a2:	1004      	lrw      	r0, 0x11012034	// 110262b0 <hciLECreateConnCancel+0x10>
110262a4:	e3ffb50a 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
    return HCI_LE_CreateConnCancelCmd();
110262a8:	e0001470 	bsr      	0x11028b88	// 11028b88 <cpu_task_stack_init+0x1e0>
}
110262ac:	1490      	pop      	r15
110262ae:	0000      	bkpt
110262b0:	11012034 	.long	0x11012034

110262b4 <hciLEReadWhiteListSize>:
{
110262b4:	14d0      	push      	r15
    return HCI_LE_ReadWhiteListSizeCmd();
110262b6:	e00014b7 	bsr      	0x11028c24	// 11028c24 <cpu_task_stack_init+0x27c>
}
110262ba:	1490      	pop      	r15

110262bc <hciLEClearWhiteList>:
{
110262bc:	14d0      	push      	r15
    return HCI_LE_ClearWhiteListCmd();
110262be:	e0001861 	bsr      	0x11029380	// 11029380 <cpu_task_stack_init+0x9d8>
}
110262c2:	1490      	pop      	r15

110262c4 <hciLEAddWhiteList>:
{
110262c4:	14d0      	push      	r15
    return HCI_LE_AddWhiteListCmd(pBuf[0],
110262c6:	5822      	addi      	r1, r0, 1
110262c8:	8000      	ld.b      	r0, (r0, 0x0)
110262ca:	e0001513 	bsr      	0x11028cf0	// 11028cf0 <cpu_task_stack_init+0x348>
}
110262ce:	1490      	pop      	r15

110262d0 <hciLERemoveWhiteList>:
{
110262d0:	14d0      	push      	r15
    return HCI_LE_RemoveWhiteListCmd(pBuf[0],
110262d2:	5822      	addi      	r1, r0, 1
110262d4:	8000      	ld.b      	r0, (r0, 0x0)
110262d6:	e0001825 	bsr      	0x11029320	// 11029320 <cpu_task_stack_init+0x978>
}
110262da:	1490      	pop      	r15

110262dc <hciLEConnUpdate>:
{
110262dc:	14d4      	push      	r4-r7, r15
110262de:	1423      	subi      	r14, r14, 12
110262e0:	6d03      	mov      	r4, r0
    __ASM volatile("psrclr ie");
110262e2:	c0807020 	psrclr      	ie
    g_ll_conn_ctx.scheduleInfo[BUILD_UINT16(pBuf[0], pBuf[1])].linkRole = LL_ROLE_INVALID;
110262e6:	8061      	ld.b      	r3, (r0, 0x1)
110262e8:	8040      	ld.b      	r2, (r0, 0x0)
110262ea:	4368      	lsli      	r3, r3, 8
110262ec:	60c8      	addu      	r3, r2
110262ee:	74cd      	zexth      	r3, r3
110262f0:	10bf      	lrw      	r5, 0x1fff11c4	// 1102636c <hciLEConnUpdate+0x90>
110262f2:	4364      	lsli      	r3, r3, 4
110262f4:	3200      	movi      	r2, 0
110262f6:	60d4      	addu      	r3, r5
110262f8:	2a00      	subi      	r2, 1
110262fa:	a346      	st.b      	r2, (r3, 0x6)
                                 BUILD_UINT16(pBuf[6], pBuf[7]),
110262fc:	8067      	ld.b      	r3, (r0, 0x7)
110262fe:	8046      	ld.b      	r2, (r0, 0x6)
11026300:	4368      	lsli      	r3, r3, 8
    int ret = HCI_LE_ConnUpdateCmd(BUILD_UINT16(pBuf[0], pBuf[1]),
11026302:	60c8      	addu      	r3, r2
                                 BUILD_UINT16(pBuf[4], pBuf[5]),
11026304:	8045      	ld.b      	r2, (r0, 0x5)
11026306:	8024      	ld.b      	r1, (r0, 0x4)
11026308:	4248      	lsli      	r2, r2, 8
    int ret = HCI_LE_ConnUpdateCmd(BUILD_UINT16(pBuf[0], pBuf[1]),
1102630a:	6084      	addu      	r2, r1
                                 BUILD_UINT16(pBuf[2], pBuf[3]),
1102630c:	8023      	ld.b      	r1, (r0, 0x3)
1102630e:	4128      	lsli      	r1, r1, 8
11026310:	8002      	ld.b      	r0, (r0, 0x2)
    int ret = HCI_LE_ConnUpdateCmd(BUILD_UINT16(pBuf[0], pBuf[1]),
11026312:	6040      	addu      	r1, r0
11026314:	8401      	ld.b      	r0, (r4, 0x1)
11026316:	84c0      	ld.b      	r6, (r4, 0x0)
11026318:	4008      	lsli      	r0, r0, 8
1102631a:	6018      	addu      	r0, r6
                                 BUILD_UINT16(pBuf[12], pBuf[13]));
1102631c:	84cd      	ld.b      	r6, (r4, 0xd)
1102631e:	84ec      	ld.b      	r7, (r4, 0xc)
11026320:	46c8      	lsli      	r6, r6, 8
    int ret = HCI_LE_ConnUpdateCmd(BUILD_UINT16(pBuf[0], pBuf[1]),
11026322:	619c      	addu      	r6, r7
11026324:	7599      	zexth      	r6, r6
11026326:	b8c2      	st.w      	r6, (r14, 0x8)
                                 BUILD_UINT16(pBuf[10], pBuf[11]),
11026328:	84cb      	ld.b      	r6, (r4, 0xb)
1102632a:	84ea      	ld.b      	r7, (r4, 0xa)
1102632c:	46c8      	lsli      	r6, r6, 8
    int ret = HCI_LE_ConnUpdateCmd(BUILD_UINT16(pBuf[0], pBuf[1]),
1102632e:	619c      	addu      	r6, r7
11026330:	7599      	zexth      	r6, r6
11026332:	b8c1      	st.w      	r6, (r14, 0x4)
                                 BUILD_UINT16(pBuf[8], pBuf[9]),
11026334:	84c9      	ld.b      	r6, (r4, 0x9)
11026336:	84e8      	ld.b      	r7, (r4, 0x8)
11026338:	46c8      	lsli      	r6, r6, 8
    int ret = HCI_LE_ConnUpdateCmd(BUILD_UINT16(pBuf[0], pBuf[1]),
1102633a:	619c      	addu      	r6, r7
1102633c:	7599      	zexth      	r6, r6
1102633e:	74cd      	zexth      	r3, r3
11026340:	7489      	zexth      	r2, r2
11026342:	7445      	zexth      	r1, r1
11026344:	b8c0      	st.w      	r6, (r14, 0x0)
11026346:	7401      	zexth      	r0, r0
11026348:	e00015ee 	bsr      	0x11028f24	// 11028f24 <cpu_task_stack_init+0x57c>
    g_ll_conn_ctx.scheduleInfo[BUILD_UINT16(pBuf[0], pBuf[1])].linkRole = LL_ROLE_MASTER;
1102634c:	8461      	ld.b      	r3, (r4, 0x1)
1102634e:	8440      	ld.b      	r2, (r4, 0x0)
11026350:	4368      	lsli      	r3, r3, 8
11026352:	60c8      	addu      	r3, r2
11026354:	74cd      	zexth      	r3, r3
11026356:	4364      	lsli      	r3, r3, 4
11026358:	614c      	addu      	r5, r3
1102635a:	3302      	movi      	r3, 2
1102635c:	a566      	st.b      	r3, (r5, 0x6)
    __ASM volatile("mtcr %0, psr" : : "r"(psr));
1102635e:	c0006023 	mfcr      	r3, cr<0, 0>
11026362:	c0036420 	mtcr      	r3, cr<0, 0>
}
11026366:	1403      	addi      	r14, r14, 12
11026368:	1494      	pop      	r4-r7, r15
1102636a:	0000      	bkpt
1102636c:	1fff11c4 	.long	0x1fff11c4

11026370 <hciLESetHostChanClass>:
{
11026370:	14d0      	push      	r15
    return HCI_LE_SetHostChanClassificationCmd(pBuf);
11026372:	e00015a3 	bsr      	0x11028eb8	// 11028eb8 <cpu_task_stack_init+0x510>
}
11026376:	1490      	pop      	r15

11026378 <hciLEReadChanMap>:
{
11026378:	14d0      	push      	r15
    return HCI_LE_ReadChannelMapCmd(BUILD_UINT16(pBuf[0], pBuf[1]));
1102637a:	8061      	ld.b      	r3, (r0, 0x1)
1102637c:	4368      	lsli      	r3, r3, 8
1102637e:	8000      	ld.b      	r0, (r0, 0x0)
11026380:	600c      	addu      	r0, r3
11026382:	7401      	zexth      	r0, r0
11026384:	e000168a 	bsr      	0x11029098	// 11029098 <cpu_task_stack_init+0x6f0>
}
11026388:	1490      	pop      	r15

1102638a <hciLEReadRemoteUsedFeatures>:
{
1102638a:	14d0      	push      	r15
    return HCI_LE_ReadRemoteUsedFeaturesCmd(BUILD_UINT16(pBuf[0], pBuf[1]));
1102638c:	8061      	ld.b      	r3, (r0, 0x1)
1102638e:	4368      	lsli      	r3, r3, 8
11026390:	8000      	ld.b      	r0, (r0, 0x0)
11026392:	600c      	addu      	r0, r3
11026394:	7401      	zexth      	r0, r0
11026396:	e00014e3 	bsr      	0x11028d5c	// 11028d5c <cpu_task_stack_init+0x3b4>
}
1102639a:	1490      	pop      	r15

1102639c <hciLEEncrypt>:
{
1102639c:	14d2      	push      	r4-r5, r15
    HCI_ReverseBytes(&pBuf[0], KEYLEN);
1102639e:	3110      	movi      	r1, 16
{
110263a0:	6d03      	mov      	r4, r0
    HCI_ReverseBytes(&pBuf[0], KEYLEN);
110263a2:	e000151f 	bsr      	0x11028de0	// 11028de0 <cpu_task_stack_init+0x438>
    HCI_ReverseBytes(&pBuf[KEYLEN], KEYLEN);
110263a6:	e4a4000f 	addi      	r5, r4, 16
110263aa:	3110      	movi      	r1, 16
110263ac:	6c17      	mov      	r0, r5
110263ae:	e0001519 	bsr      	0x11028de0	// 11028de0 <cpu_task_stack_init+0x438>
    return HCI_LE_EncryptCmd(&pBuf[0],
110263b2:	6c57      	mov      	r1, r5
110263b4:	6c13      	mov      	r0, r4
110263b6:	e00013ad 	bsr      	0x11028b10	// 11028b10 <cpu_task_stack_init+0x168>
}
110263ba:	1492      	pop      	r4-r5, r15

110263bc <hciLERand>:
{
110263bc:	14d0      	push      	r15
    return HCI_LE_RandCmd();
110263be:	e00015d1 	bsr      	0x11028f60	// 11028f60 <cpu_task_stack_init+0x5b8>
}
110263c2:	1490      	pop      	r15

110263c4 <hciLEStartEncrypt>:
{
110263c4:	14d1      	push      	r4, r15
    return HCI_LE_StartEncyptCmd(BUILD_UINT16(pBuf[0], pBuf[1]),
110263c6:	e460000b 	addi      	r3, r0, 12
110263ca:	8081      	ld.b      	r4, (r0, 0x1)
110263cc:	e4400009 	addi      	r2, r0, 10
110263d0:	5826      	addi      	r1, r0, 2
110263d2:	4488      	lsli      	r4, r4, 8
110263d4:	8000      	ld.b      	r0, (r0, 0x0)
110263d6:	6010      	addu      	r0, r4
110263d8:	7401      	zexth      	r0, r0
110263da:	e000167d 	bsr      	0x110290d4	// 110290d4 <cpu_task_stack_init+0x72c>
}
110263de:	1491      	pop      	r4, r15

110263e0 <hciLELtkReqReply>:
{
110263e0:	14d0      	push      	r15
    return HCI_LE_LtkReqReplyCmd(BUILD_UINT16(pBuf[0], pBuf[1]),
110263e2:	5826      	addi      	r1, r0, 2
110263e4:	8061      	ld.b      	r3, (r0, 0x1)
110263e6:	4368      	lsli      	r3, r3, 8
110263e8:	8000      	ld.b      	r0, (r0, 0x0)
110263ea:	600c      	addu      	r0, r3
110263ec:	7401      	zexth      	r0, r0
110263ee:	e00013df 	bsr      	0x11028bac	// 11028bac <cpu_task_stack_init+0x204>
}
110263f2:	1490      	pop      	r15

110263f4 <hciLELtkReqNegReply>:
{
110263f4:	14d0      	push      	r15
    return HCI_LE_LtkReqNegReplyCmd(BUILD_UINT16(pBuf[0], pBuf[1]));
110263f6:	8061      	ld.b      	r3, (r0, 0x1)
110263f8:	4368      	lsli      	r3, r3, 8
110263fa:	8000      	ld.b      	r0, (r0, 0x0)
110263fc:	600c      	addu      	r0, r3
110263fe:	7401      	zexth      	r0, r0
11026400:	e0001352 	bsr      	0x11028aa4	// 11028aa4 <cpu_task_stack_init+0xfc>
}
11026404:	1490      	pop      	r15

11026406 <hciLEReadSupportedStates>:
{
11026406:	14d0      	push      	r15
    return HCI_LE_ReadSupportedStatesCmd();
11026408:	e0001570 	bsr      	0x11028ee8	// 11028ee8 <cpu_task_stack_init+0x540>
}
1102640c:	1490      	pop      	r15

1102640e <hciLEReceiverTest>:
{
1102640e:	14d0      	push      	r15
    return HCI_LE_ReceiverTestCmd(pBuf[0]);
11026410:	8000      	ld.b      	r0, (r0, 0x0)
11026412:	e000174b 	bsr      	0x110292a8	// 110292a8 <cpu_task_stack_init+0x900>
}
11026416:	1490      	pop      	r15

11026418 <hciLETransmitterTest>:
{
11026418:	14d0      	push      	r15
    return HCI_LE_TransmitterTestCmd(pBuf[0],
1102641a:	8042      	ld.b      	r2, (r0, 0x2)
1102641c:	8021      	ld.b      	r1, (r0, 0x1)
1102641e:	8000      	ld.b      	r0, (r0, 0x0)
11026420:	e00015a6 	bsr      	0x11028f6c	// 11028f6c <cpu_task_stack_init+0x5c4>
}
11026424:	1490      	pop      	r15

11026426 <hciLETestEnd>:
{
11026426:	14d0      	push      	r15
    return HCI_LE_TestEndCmd();
11026428:	e00016a4 	bsr      	0x11029170	// 11029170 <cpu_task_stack_init+0x7c8>
}
1102642c:	1490      	pop      	r15

1102642e <hciLESetDataLength>:
{
1102642e:	14d0      	push      	r15
                                   BUILD_UINT16(pBuf[4], pBuf[5]));
11026430:	8045      	ld.b      	r2, (r0, 0x5)
                                   BUILD_UINT16(pBuf[2], pBuf[3]),
11026432:	8023      	ld.b      	r1, (r0, 0x3)
                                   BUILD_UINT16(pBuf[4], pBuf[5]));
11026434:	8064      	ld.b      	r3, (r0, 0x4)
11026436:	4248      	lsli      	r2, r2, 8
                                   BUILD_UINT16(pBuf[2], pBuf[3]),
11026438:	4128      	lsli      	r1, r1, 8
    return HCI_LE_SetDataLengthCmd(BUILD_UINT16(pBuf[0], pBuf[1]),
1102643a:	608c      	addu      	r2, r3
                                   BUILD_UINT16(pBuf[2], pBuf[3]),
1102643c:	8062      	ld.b      	r3, (r0, 0x2)
    return HCI_LE_SetDataLengthCmd(BUILD_UINT16(pBuf[0], pBuf[1]),
1102643e:	604c      	addu      	r1, r3
11026440:	8061      	ld.b      	r3, (r0, 0x1)
11026442:	4368      	lsli      	r3, r3, 8
11026444:	7489      	zexth      	r2, r2
11026446:	7445      	zexth      	r1, r1
11026448:	8000      	ld.b      	r0, (r0, 0x0)
1102644a:	600c      	addu      	r0, r3
1102644c:	7401      	zexth      	r0, r0
1102644e:	e0001739 	bsr      	0x110292c0	// 110292c0 <cpu_task_stack_init+0x918>
}
11026452:	1490      	pop      	r15

11026454 <hciLEReadSuggestedDefaultDataLength>:
{
11026454:	14d0      	push      	r15
    return HCI_LE_ReadSuggestedDefaultDataLengthCmd();
11026456:	e00016ed 	bsr      	0x11029230	// 11029230 <cpu_task_stack_init+0x888>
}
1102645a:	1490      	pop      	r15

1102645c <hciLEWriteSuggestedDefaultDataLength>:
{
1102645c:	14d0      	push      	r15
            BUILD_UINT16(pBuf[2], pBuf[3]));
1102645e:	8023      	ld.b      	r1, (r0, 0x3)
11026460:	8062      	ld.b      	r3, (r0, 0x2)
11026462:	4128      	lsli      	r1, r1, 8
    return HCI_LE_WriteSuggestedDefaultDataLengthCmd(BUILD_UINT16(pBuf[0], pBuf[1]),
11026464:	604c      	addu      	r1, r3
11026466:	8061      	ld.b      	r3, (r0, 0x1)
11026468:	4368      	lsli      	r3, r3, 8
1102646a:	7445      	zexth      	r1, r1
1102646c:	8000      	ld.b      	r0, (r0, 0x0)
1102646e:	600c      	addu      	r0, r3
11026470:	7401      	zexth      	r0, r0
11026472:	e0001415 	bsr      	0x11028c9c	// 11028c9c <cpu_task_stack_init+0x2f4>
}
11026476:	1490      	pop      	r15

11026478 <hciLEReadPhyMode>:
{
11026478:	14d0      	push      	r15
    return HCI_LE_ReadPhyMode(BUILD_UINT16(pBuf[0], pBuf[1]));
1102647a:	8061      	ld.b      	r3, (r0, 0x1)
1102647c:	4368      	lsli      	r3, r3, 8
1102647e:	8000      	ld.b      	r0, (r0, 0x0)
11026480:	600c      	addu      	r0, r3
11026482:	7401      	zexth      	r0, r0
11026484:	e000134c 	bsr      	0x11028b1c	// 11028b1c <cpu_task_stack_init+0x174>
}
11026488:	1490      	pop      	r15

1102648a <hciLESetDefaultPhyMode>:
{
1102648a:	14d0      	push      	r15
    return HCI_LE_SetDefaultPhyMode(0, pBuf[0], pBuf[1], pBuf[2]);
1102648c:	8062      	ld.b      	r3, (r0, 0x2)
1102648e:	8041      	ld.b      	r2, (r0, 0x1)
11026490:	8020      	ld.b      	r1, (r0, 0x0)
11026492:	3000      	movi      	r0, 0
11026494:	e0001518 	bsr      	0x11028ec4	// 11028ec4 <cpu_task_stack_init+0x51c>
}
11026498:	1490      	pop      	r15

1102649a <hciLESetPhyMode>:
{
1102649a:	14d2      	push      	r4-r5, r15
1102649c:	1421      	subi      	r14, r14, 4
1102649e:	6d43      	mov      	r5, r0
    return HCI_LE_SetPhyMode(BUILD_UINT16(pBuf[0], pBuf[1]),
110264a0:	8064      	ld.b      	r3, (r0, 0x4)
110264a2:	8043      	ld.b      	r2, (r0, 0x3)
110264a4:	8022      	ld.b      	r1, (r0, 0x2)
110264a6:	8001      	ld.b      	r0, (r0, 0x1)
110264a8:	8580      	ld.b      	r4, (r5, 0x0)
110264aa:	4008      	lsli      	r0, r0, 8
110264ac:	6010      	addu      	r0, r4
                             BUILD_UINT16(pBuf[5], pBuf[6]));
110264ae:	8586      	ld.b      	r4, (r5, 0x6)
110264b0:	4488      	lsli      	r4, r4, 8
110264b2:	85a5      	ld.b      	r5, (r5, 0x5)
    return HCI_LE_SetPhyMode(BUILD_UINT16(pBuf[0], pBuf[1]),
110264b4:	6114      	addu      	r4, r5
110264b6:	7511      	zexth      	r4, r4
110264b8:	b880      	st.w      	r4, (r14, 0x0)
110264ba:	7401      	zexth      	r0, r0
110264bc:	e00017b0 	bsr      	0x1102941c	// 1102941c <cpu_task_stack_init+0xa74>
}
110264c0:	1401      	addi      	r14, r14, 4
110264c2:	1492      	pop      	r4-r5, r15

110264c4 <hciLEAddDeviceToRL>:
{
110264c4:	14d0      	push      	r15
    return HCI_LE_AddDevToResolvingListCmd(pBuf[0],
110264c6:	e4600016 	addi      	r3, r0, 23
110264ca:	585a      	addi      	r2, r0, 7
110264cc:	5822      	addi      	r1, r0, 1
110264ce:	8000      	ld.b      	r0, (r0, 0x0)
110264d0:	e000172e 	bsr      	0x1102932c	// 1102932c <cpu_task_stack_init+0x984>
}
110264d4:	1490      	pop      	r15

110264d6 <hciLERemoveDeviceFromRL>:
{
110264d6:	14d0      	push      	r15
    return HCI_LE_RemoveResolvingListCmd(pBuf[0],
110264d8:	5822      	addi      	r1, r0, 1
110264da:	8000      	ld.b      	r0, (r0, 0x0)
110264dc:	e000138c 	bsr      	0x11028bf4	// 11028bf4 <cpu_task_stack_init+0x24c>
}
110264e0:	1490      	pop      	r15

110264e2 <hciLEClearRL>:
{
110264e2:	14d0      	push      	r15
    return HCI_LE_ClearResolvingListCmd();
110264e4:	e000169a 	bsr      	0x11029218	// 11029218 <cpu_task_stack_init+0x870>
}
110264e8:	1490      	pop      	r15

110264ea <hciLEReadRLSize>:
{
110264ea:	14d0      	push      	r15
    return HCI_LE_ReadResolvingListSizeCmd();
110264ec:	e00012fa 	bsr      	0x11028ae0	// 11028ae0 <cpu_task_stack_init+0x138>
}
110264f0:	1490      	pop      	r15

110264f2 <hciLESetAddrResolutionEnable>:
{
110264f2:	14d0      	push      	r15
    return HCI_LE_SetAddressResolutionEnableCmd(pBuf[0]);
110264f4:	8000      	ld.b      	r0, (r0, 0x0)
110264f6:	e000143f 	bsr      	0x11028d74	// 11028d74 <cpu_task_stack_init+0x3cc>
}
110264fa:	1490      	pop      	r15

110264fc <hciLESetRpaTo>:
{
110264fc:	14d0      	push      	r15
    return HCI_LE_SetResolvablePrivateAddressTimeoutCmd(BUILD_UINT16(pBuf[0], pBuf[1]));
110264fe:	8061      	ld.b      	r3, (r0, 0x1)
11026500:	4368      	lsli      	r3, r3, 8
11026502:	8000      	ld.b      	r0, (r0, 0x0)
11026504:	600c      	addu      	r0, r3
11026506:	7401      	zexth      	r0, r0
11026508:	e00013ac 	bsr      	0x11028c60	// 11028c60 <cpu_task_stack_init+0x2b8>
}
1102650c:	1490      	pop      	r15

1102650e <hciLESetAdvSetRandomAddress>:
{
1102650e:	14d0      	push      	r15
    return HCI_LE_SetExtAdvSetRandomAddressCmd(pBuf[0],
11026510:	5822      	addi      	r1, r0, 1
11026512:	8000      	ld.b      	r0, (r0, 0x0)
11026514:	e0001664 	bsr      	0x110291dc	// 110291dc <cpu_task_stack_init+0x834>
}
11026518:	1490      	pop      	r15

1102651a <hciLESetExtAdvParam>:
{
1102651a:	14d2      	push      	r4-r5, r15
1102651c:	142b      	subi      	r14, r14, 44
                                    BUILD_UINT32(pBuf[6], pBuf[7], pBuf[8], 0),
1102651e:	8067      	ld.b      	r3, (r0, 0x7)
11026520:	8048      	ld.b      	r2, (r0, 0x8)
                                    BUILD_UINT32(pBuf[3], pBuf[4], pBuf[5], 0),
11026522:	8025      	ld.b      	r1, (r0, 0x5)
    return HCI_LE_SetExtAdvParamCmd(pBuf[0],
11026524:	80b8      	ld.b      	r5, (r0, 0x18)
                                    BUILD_UINT32(pBuf[6], pBuf[7], pBuf[8], 0),
11026526:	4250      	lsli      	r2, r2, 16
11026528:	4368      	lsli      	r3, r3, 8
    return HCI_LE_SetExtAdvParamCmd(pBuf[0],
1102652a:	60c8      	addu      	r3, r2
                                    BUILD_UINT32(pBuf[6], pBuf[7], pBuf[8], 0),
1102652c:	8046      	ld.b      	r2, (r0, 0x6)
    return HCI_LE_SetExtAdvParamCmd(pBuf[0],
1102652e:	60c8      	addu      	r3, r2
                                    BUILD_UINT32(pBuf[3], pBuf[4], pBuf[5], 0),
11026530:	8044      	ld.b      	r2, (r0, 0x4)
11026532:	4130      	lsli      	r1, r1, 16
11026534:	4248      	lsli      	r2, r2, 8
    return HCI_LE_SetExtAdvParamCmd(pBuf[0],
11026536:	6084      	addu      	r2, r1
                                    BUILD_UINT32(pBuf[3], pBuf[4], pBuf[5], 0),
11026538:	8023      	ld.b      	r1, (r0, 0x3)
    return HCI_LE_SetExtAdvParamCmd(pBuf[0],
1102653a:	6084      	addu      	r2, r1
                                    BUILD_UINT16(pBuf[1], pBuf[2]),
1102653c:	8022      	ld.b      	r1, (r0, 0x2)
1102653e:	8081      	ld.b      	r4, (r0, 0x1)
11026540:	4128      	lsli      	r1, r1, 8
    return HCI_LE_SetExtAdvParamCmd(pBuf[0],
11026542:	6050      	addu      	r1, r4
11026544:	8080      	ld.b      	r4, (r0, 0x0)
11026546:	b8aa      	st.w      	r5, (r14, 0x28)
11026548:	7445      	zexth      	r1, r1
1102654a:	80b7      	ld.b      	r5, (r0, 0x17)
1102654c:	b8a9      	st.w      	r5, (r14, 0x24)
1102654e:	80b6      	ld.b      	r5, (r0, 0x16)
11026550:	b8a8      	st.w      	r5, (r14, 0x20)
11026552:	80b5      	ld.b      	r5, (r0, 0x15)
11026554:	b8a7      	st.w      	r5, (r14, 0x1c)
11026556:	80b4      	ld.b      	r5, (r0, 0x14)
11026558:	b8a6      	st.w      	r5, (r14, 0x18)
1102655a:	d8a04013 	ld.bs      	r5, (r0, 0x13)
1102655e:	b8a5      	st.w      	r5, (r14, 0x14)
11026560:	80b2      	ld.b      	r5, (r0, 0x12)
11026562:	b8a4      	st.w      	r5, (r14, 0x10)
11026564:	e4a0000b 	addi      	r5, r0, 12
11026568:	b8a3      	st.w      	r5, (r14, 0xc)
1102656a:	80ab      	ld.b      	r5, (r0, 0xb)
1102656c:	b8a2      	st.w      	r5, (r14, 0x8)
1102656e:	80aa      	ld.b      	r5, (r0, 0xa)
11026570:	b8a1      	st.w      	r5, (r14, 0x4)
11026572:	8009      	ld.b      	r0, (r0, 0x9)
11026574:	b800      	st.w      	r0, (r14, 0x0)
11026576:	6c13      	mov      	r0, r4
11026578:	e3ffc9aa 	bsr      	0x1101f8cc	// 1101f8cc <HCI_LE_SetExtAdvParamCmd>
}
1102657c:	140b      	addi      	r14, r14, 44
1102657e:	1492      	pop      	r4-r5, r15

11026580 <hciLESetExtAdvData>:
{
11026580:	14d2      	push      	r4-r5, r15
11026582:	1421      	subi      	r14, r14, 4
    return HCI_LE_SetExtAdvDataCmd(pBuf[0],
11026584:	588e      	addi      	r4, r0, 4
11026586:	80a0      	ld.b      	r5, (r0, 0x0)
11026588:	8063      	ld.b      	r3, (r0, 0x3)
1102658a:	8042      	ld.b      	r2, (r0, 0x2)
1102658c:	8021      	ld.b      	r1, (r0, 0x1)
1102658e:	b880      	st.w      	r4, (r14, 0x0)
11026590:	6c17      	mov      	r0, r5
11026592:	e3ffca53 	bsr      	0x1101fa38	// 1101fa38 <HCI_LE_SetExtAdvDataCmd>
}
11026596:	1401      	addi      	r14, r14, 4
11026598:	1492      	pop      	r4-r5, r15

1102659a <hciLESetExtScanRspData>:
{
1102659a:	14d2      	push      	r4-r5, r15
1102659c:	1421      	subi      	r14, r14, 4
    return HCI_LE_SetExtScanRspDataCmd(pBuf[0],
1102659e:	588e      	addi      	r4, r0, 4
110265a0:	80a0      	ld.b      	r5, (r0, 0x0)
110265a2:	8063      	ld.b      	r3, (r0, 0x3)
110265a4:	8042      	ld.b      	r2, (r0, 0x2)
110265a6:	8021      	ld.b      	r1, (r0, 0x1)
110265a8:	b880      	st.w      	r4, (r14, 0x0)
110265aa:	6c17      	mov      	r0, r5
110265ac:	e3ffcf54 	bsr      	0x11020454	// 11020454 <HCI_LE_SetExtScanRspDataCmd>
}
110265b0:	1401      	addi      	r14, r14, 4
110265b2:	1492      	pop      	r4-r5, r15

110265b4 <hciLEReadMaximumAdvDataLength>:
{
110265b4:	14d0      	push      	r15
    return HCI_LE_ReadMaximumAdvDataLengthCmd();
110265b6:	e3ffca91 	bsr      	0x1101fad8	// 1101fad8 <HCI_LE_ReadMaximumAdvDataLengthCmd>
}
110265ba:	1490      	pop      	r15

110265bc <hciLEReadNumberOfSupportAdvSet>:
{
110265bc:	14d0      	push      	r15
    return HCI_LE_ReadNumberOfSupportAdvSetCmd();
110265be:	e0001597 	bsr      	0x110290ec	// 110290ec <cpu_task_stack_init+0x744>
}
110265c2:	1490      	pop      	r15

110265c4 <hciLERemoveAdvSet>:
{
110265c4:	14d0      	push      	r15
    return HCI_LE_RemoveAdvSetCmd(pBuf[0]);
110265c6:	8000      	ld.b      	r0, (r0, 0x0)
110265c8:	e3ffcb32 	bsr      	0x1101fc2c	// 1101fc2c <HCI_LE_RemoveAdvSetCmd>
}
110265cc:	1490      	pop      	r15

110265ce <hciLEClearAdvSets>:
{
110265ce:	14d0      	push      	r15
    return HCI_LE_ClearAdvSetsCmd();
110265d0:	e3ffcbbe 	bsr      	0x1101fd4c	// 1101fd4c <HCI_LE_ClearAdvSetsCmd>
}
110265d4:	1490      	pop      	r15

110265d6 <hciLESetPeriodicAdvParameter>:
{
110265d6:	14d1      	push      	r4, r15
            BUILD_UINT16(pBuf[5], pBuf[6])
110265d8:	8066      	ld.b      	r3, (r0, 0x6)
110265da:	8045      	ld.b      	r2, (r0, 0x5)
110265dc:	4368      	lsli      	r3, r3, 8
    return HCI_LE_SetPeriodicAdvParameterCmd(pBuf[0],
110265de:	60c8      	addu      	r3, r2
            BUILD_UINT16(pBuf[3], pBuf[4]),
110265e0:	8044      	ld.b      	r2, (r0, 0x4)
110265e2:	8023      	ld.b      	r1, (r0, 0x3)
110265e4:	4248      	lsli      	r2, r2, 8
    return HCI_LE_SetPeriodicAdvParameterCmd(pBuf[0],
110265e6:	6084      	addu      	r2, r1
            BUILD_UINT16(pBuf[1], pBuf[2]),
110265e8:	8022      	ld.b      	r1, (r0, 0x2)
110265ea:	8081      	ld.b      	r4, (r0, 0x1)
    return HCI_LE_SetPeriodicAdvParameterCmd(pBuf[0],
110265ec:	74cd      	zexth      	r3, r3
110265ee:	7489      	zexth      	r2, r2
            BUILD_UINT16(pBuf[1], pBuf[2]),
110265f0:	4128      	lsli      	r1, r1, 8
    return HCI_LE_SetPeriodicAdvParameterCmd(pBuf[0],
110265f2:	8000      	ld.b      	r0, (r0, 0x0)
110265f4:	6050      	addu      	r1, r4
110265f6:	7445      	zexth      	r1, r1
110265f8:	e3ffcc5e 	bsr      	0x1101feb4	// 1101feb4 <HCI_LE_SetPeriodicAdvParameterCmd>
}
110265fc:	1491      	pop      	r4, r15

110265fe <hciLESetPeriodicAdvData>:
{
110265fe:	14d0      	push      	r15
    return HCI_LE_SetPeriodicAdvDataCmd(pBuf[0],
11026600:	586a      	addi      	r3, r0, 3
11026602:	8042      	ld.b      	r2, (r0, 0x2)
11026604:	8021      	ld.b      	r1, (r0, 0x1)
11026606:	8000      	ld.b      	r0, (r0, 0x0)
11026608:	e00013da 	bsr      	0x11028dbc	// 11028dbc <cpu_task_stack_init+0x414>
}
1102660c:	1490      	pop      	r15

1102660e <hciLESetPeriodicAdvEnable>:
{
1102660e:	14d0      	push      	r15
    return HCI_LE_SetPeriodicAdvEnableCmd(pBuf[0],
11026610:	8021      	ld.b      	r1, (r0, 0x1)
11026612:	8000      	ld.b      	r0, (r0, 0x0)
11026614:	e3ffceaa 	bsr      	0x11020368	// 11020368 <HCI_LE_SetPeriodicAdvEnableCmd>
}
11026618:	1490      	pop      	r15

1102661a <hciLESetExtendedScanParameters>:
{
1102661a:	14d1      	push      	r4, r15
1102661c:	1425      	subi      	r14, r14, 20
    numPhy = (scanPhy & LL_SCAN_PHY_1M_BITMASK) + ((scanPhy & LL_SCAN_PHY_CODED_BITMASK) >> 2);
1102661e:	3101      	movi      	r1, 1
    scanPhy = pBuf[2];
11026620:	8042      	ld.b      	r2, (r0, 0x2)
    numPhy = (scanPhy & LL_SCAN_PHY_1M_BITMASK) + ((scanPhy & LL_SCAN_PHY_CODED_BITMASK) >> 2);
11026622:	5262      	asri      	r3, r2, 2
11026624:	68c4      	and      	r3, r1
11026626:	6848      	and      	r1, r2
11026628:	60c4      	addu      	r3, r1
    for (int i = 0; i < numPhy; i++) {
1102662a:	3b40      	cmpnei      	r3, 0
1102662c:	0c21      	bf      	0x1102666e	// 1102666e <hciLESetExtendedScanParameters+0x54>
        scan_types[i] = pBuf[offset];
1102662e:	8023      	ld.b      	r1, (r0, 0x3)
        scan_interval[i] = BUILD_UINT16(pBuf[offset], pBuf[offset + 1]);
11026630:	8084      	ld.b      	r4, (r0, 0x4)
        scan_types[i] = pBuf[offset];
11026632:	dc2e0008 	st.b      	r1, (r14, 0x8)
        scan_interval[i] = BUILD_UINT16(pBuf[offset], pBuf[offset + 1]);
11026636:	8025      	ld.b      	r1, (r0, 0x5)
11026638:	4128      	lsli      	r1, r1, 8
1102663a:	6050      	addu      	r1, r4
1102663c:	dc2e1006 	st.h      	r1, (r14, 0xc)
    for (int i = 0; i < numPhy; i++) {
11026640:	3b42      	cmpnei      	r3, 2
        scan_window[i] = BUILD_UINT16(pBuf[offset], pBuf[offset + 1]);
11026642:	8027      	ld.b      	r1, (r0, 0x7)
11026644:	4128      	lsli      	r1, r1, 8
11026646:	8086      	ld.b      	r4, (r0, 0x6)
11026648:	6050      	addu      	r1, r4
1102664a:	dc2e1008 	st.h      	r1, (r14, 0x10)
    for (int i = 0; i < numPhy; i++) {
1102664e:	0810      	bt      	0x1102666e	// 1102666e <hciLESetExtendedScanParameters+0x54>
        scan_types[i] = pBuf[offset];
11026650:	8068      	ld.b      	r3, (r0, 0x8)
        scan_interval[i] = BUILD_UINT16(pBuf[offset], pBuf[offset + 1]);
11026652:	8029      	ld.b      	r1, (r0, 0x9)
        scan_types[i] = pBuf[offset];
11026654:	dc6e0009 	st.b      	r3, (r14, 0x9)
        scan_interval[i] = BUILD_UINT16(pBuf[offset], pBuf[offset + 1]);
11026658:	806a      	ld.b      	r3, (r0, 0xa)
1102665a:	4368      	lsli      	r3, r3, 8
1102665c:	60c4      	addu      	r3, r1
1102665e:	dc6e1007 	st.h      	r3, (r14, 0xe)
        scan_window[i] = BUILD_UINT16(pBuf[offset], pBuf[offset + 1]);
11026662:	806c      	ld.b      	r3, (r0, 0xc)
11026664:	4368      	lsli      	r3, r3, 8
11026666:	802b      	ld.b      	r1, (r0, 0xb)
11026668:	60c4      	addu      	r3, r1
1102666a:	dc6e1009 	st.h      	r3, (r14, 0x12)
    return HCI_LE_SetExtendedScanParametersCmd(pBuf[0],
1102666e:	8021      	ld.b      	r1, (r0, 0x1)
11026670:	1b04      	addi      	r3, r14, 16
11026672:	8000      	ld.b      	r0, (r0, 0x0)
11026674:	b861      	st.w      	r3, (r14, 0x4)
11026676:	1b03      	addi      	r3, r14, 12
11026678:	b860      	st.w      	r3, (r14, 0x0)
1102667a:	1b02      	addi      	r3, r14, 8
1102667c:	e00014d2 	bsr      	0x11029020	// 11029020 <cpu_task_stack_init+0x678>
}
11026680:	1405      	addi      	r14, r14, 20
11026682:	1491      	pop      	r4, r15

11026684 <hciLEExtendedCreateConnection>:
{
11026684:	14d4      	push      	r4-r7, r15
11026686:	1439      	subi      	r14, r14, 100
             + ((initPhy & 0x02) >> 1)
11026688:	3201      	movi      	r2, 1
    uint8 initPhy = pBuf[9], numPhy;
1102668a:	8089      	ld.b      	r4, (r0, 0x9)
             + ((initPhy & 0x02) >> 1)
1102668c:	5421      	asri      	r1, r4, 1
             + ((initPhy & 0x04) >> 2);
1102668e:	54a2      	asri      	r5, r4, 2
             + ((initPhy & 0x02) >> 1)
11026690:	6848      	and      	r1, r2
             + ((initPhy & 0x04) >> 2);
11026692:	6948      	and      	r5, r2
    numPhy = (initPhy & 0x01)
11026694:	6890      	and      	r2, r4
11026696:	6054      	addu      	r1, r5
11026698:	6048      	addu      	r1, r2
    for (int i = 0; i < numPhy; i++) {
1102669a:	3200      	movi      	r2, 0
1102669c:	4121      	lsli      	r1, r1, 1
1102669e:	e4600009 	addi      	r3, r0, 10
110266a2:	644a      	cmpne      	r2, r1
110266a4:	081a      	bt      	0x110266d8	// 110266d8 <hciLEExtendedCreateConnection+0x54>
    return HCI_LE_ExtendedCreateConnectionCmd(pBuf[0],     // uint8 initiator_filter_policy,
110266a6:	8042      	ld.b      	r2, (r0, 0x2)
110266a8:	8021      	ld.b      	r1, (r0, 0x1)
110266aa:	586a      	addi      	r3, r0, 3
110266ac:	1d17      	addi      	r5, r14, 92
110266ae:	8000      	ld.b      	r0, (r0, 0x0)
110266b0:	b8a8      	st.w      	r5, (r14, 0x20)
110266b2:	b880      	st.w      	r4, (r14, 0x0)
110266b4:	1d15      	addi      	r5, r14, 84
110266b6:	b8a7      	st.w      	r5, (r14, 0x1c)
110266b8:	1d13      	addi      	r5, r14, 76
110266ba:	b8a6      	st.w      	r5, (r14, 0x18)
110266bc:	1d11      	addi      	r5, r14, 68
110266be:	b8a5      	st.w      	r5, (r14, 0x14)
110266c0:	1d0f      	addi      	r5, r14, 60
110266c2:	b8a4      	st.w      	r5, (r14, 0x10)
110266c4:	1d0d      	addi      	r5, r14, 52
110266c6:	b8a3      	st.w      	r5, (r14, 0xc)
110266c8:	1d0b      	addi      	r5, r14, 44
110266ca:	b8a2      	st.w      	r5, (r14, 0x8)
110266cc:	1d09      	addi      	r5, r14, 36
110266ce:	b8a1      	st.w      	r5, (r14, 0x4)
110266d0:	e00012d4 	bsr      	0x11028c78	// 11028c78 <cpu_task_stack_init+0x2d0>
}
110266d4:	1419      	addi      	r14, r14, 100
110266d6:	1494      	pop      	r4-r7, r15
        scan_interval[i] = BUILD_UINT16(pBuf[offset], pBuf[offset + 1]);
110266d8:	83a1      	ld.b      	r5, (r3, 0x1)
110266da:	83e0      	ld.b      	r7, (r3, 0x0)
110266dc:	1e09      	addi      	r6, r14, 36
110266de:	45a8      	lsli      	r5, r5, 8
110266e0:	6188      	addu      	r6, r2
110266e2:	615c      	addu      	r5, r7
110266e4:	aea0      	st.h      	r5, (r6, 0x0)
        scan_window[i]   = BUILD_UINT16(pBuf[offset], pBuf[offset + 1]);
110266e6:	83a3      	ld.b      	r5, (r3, 0x3)
110266e8:	83e2      	ld.b      	r7, (r3, 0x2)
110266ea:	1e0b      	addi      	r6, r14, 44
110266ec:	45a8      	lsli      	r5, r5, 8
110266ee:	6188      	addu      	r6, r2
110266f0:	615c      	addu      	r5, r7
110266f2:	aea0      	st.h      	r5, (r6, 0x0)
        conn_interval_min[i] = BUILD_UINT16(pBuf[offset], pBuf[offset + 1]);
110266f4:	83a5      	ld.b      	r5, (r3, 0x5)
110266f6:	83e4      	ld.b      	r7, (r3, 0x4)
110266f8:	1e0d      	addi      	r6, r14, 52
110266fa:	45a8      	lsli      	r5, r5, 8
110266fc:	6188      	addu      	r6, r2
110266fe:	615c      	addu      	r5, r7
11026700:	aea0      	st.h      	r5, (r6, 0x0)
        conn_interval_max[i] = BUILD_UINT16(pBuf[offset], pBuf[offset + 1]);
11026702:	83a7      	ld.b      	r5, (r3, 0x7)
11026704:	83e6      	ld.b      	r7, (r3, 0x6)
11026706:	1e0f      	addi      	r6, r14, 60
11026708:	45a8      	lsli      	r5, r5, 8
1102670a:	6188      	addu      	r6, r2
1102670c:	615c      	addu      	r5, r7
1102670e:	aea0      	st.h      	r5, (r6, 0x0)
        conn_latency[i] = BUILD_UINT16(pBuf[offset], pBuf[offset + 1]);
11026710:	83a9      	ld.b      	r5, (r3, 0x9)
11026712:	83e8      	ld.b      	r7, (r3, 0x8)
11026714:	1e11      	addi      	r6, r14, 68
11026716:	45a8      	lsli      	r5, r5, 8
11026718:	6188      	addu      	r6, r2
1102671a:	615c      	addu      	r5, r7
1102671c:	aea0      	st.h      	r5, (r6, 0x0)
        supervision_timeout[i] = BUILD_UINT16(pBuf[offset], pBuf[offset + 1]);
1102671e:	83ab      	ld.b      	r5, (r3, 0xb)
11026720:	83ea      	ld.b      	r7, (r3, 0xa)
11026722:	1e13      	addi      	r6, r14, 76
11026724:	45a8      	lsli      	r5, r5, 8
11026726:	6188      	addu      	r6, r2
11026728:	615c      	addu      	r5, r7
1102672a:	aea0      	st.h      	r5, (r6, 0x0)
        minimum_CE_length[i] = BUILD_UINT16(pBuf[offset], pBuf[offset + 1]);
1102672c:	83ad      	ld.b      	r5, (r3, 0xd)
1102672e:	83ec      	ld.b      	r7, (r3, 0xc)
11026730:	1e15      	addi      	r6, r14, 84
11026732:	45a8      	lsli      	r5, r5, 8
11026734:	6188      	addu      	r6, r2
11026736:	615c      	addu      	r5, r7
11026738:	aea0      	st.h      	r5, (r6, 0x0)
        maximum_CE_length[i] = BUILD_UINT16(pBuf[offset], pBuf[offset + 1]);
1102673a:	83af      	ld.b      	r5, (r3, 0xf)
1102673c:	83ee      	ld.b      	r7, (r3, 0xe)
1102673e:	1e17      	addi      	r6, r14, 92
11026740:	45a8      	lsli      	r5, r5, 8
11026742:	6188      	addu      	r6, r2
11026744:	615c      	addu      	r5, r7
11026746:	aea0      	st.h      	r5, (r6, 0x0)
11026748:	230f      	addi      	r3, 16
1102674a:	2201      	addi      	r2, 2
1102674c:	07ab      	br      	0x110266a2	// 110266a2 <hciLEExtendedCreateConnection+0x1e>

1102674e <hciLEPeriodicAdvertisingCreateSync>:
{
1102674e:	14d3      	push      	r4-r6, r15
11026750:	1423      	subi      	r14, r14, 12
    return HCI_LE_PeriodicAdvertisingCreateSyncCmd(pBuf[0],
11026752:	586a      	addi      	r3, r0, 3
11026754:	808d      	ld.b      	r4, (r0, 0xd)
11026756:	80a0      	ld.b      	r5, (r0, 0x0)
11026758:	8042      	ld.b      	r2, (r0, 0x2)
1102675a:	8021      	ld.b      	r1, (r0, 0x1)
1102675c:	b882      	st.w      	r4, (r14, 0x8)
            BUILD_UINT16(pBuf[11], pBuf[12]),
1102675e:	808c      	ld.b      	r4, (r0, 0xc)
11026760:	80cb      	ld.b      	r6, (r0, 0xb)
11026762:	4488      	lsli      	r4, r4, 8
    return HCI_LE_PeriodicAdvertisingCreateSyncCmd(pBuf[0],
11026764:	6118      	addu      	r4, r6
11026766:	7511      	zexth      	r4, r4
11026768:	b881      	st.w      	r4, (r14, 0x4)
            BUILD_UINT16(pBuf[9], pBuf[10]),
1102676a:	808a      	ld.b      	r4, (r0, 0xa)
1102676c:	4488      	lsli      	r4, r4, 8
1102676e:	8009      	ld.b      	r0, (r0, 0x9)
    return HCI_LE_PeriodicAdvertisingCreateSyncCmd(pBuf[0],
11026770:	6100      	addu      	r4, r0
11026772:	7511      	zexth      	r4, r4
11026774:	b880      	st.w      	r4, (r14, 0x0)
11026776:	6c17      	mov      	r0, r5
11026778:	e00014de 	bsr      	0x11029134	// 11029134 <cpu_task_stack_init+0x78c>
}
1102677c:	1403      	addi      	r14, r14, 12
1102677e:	1493      	pop      	r4-r6, r15

11026780 <hciLEPeriodicAdvertisingCreateSyncCancel>:
{
11026780:	14d0      	push      	r15
    return HCI_LE_PeriodicAdvertisingCreateSyncCancelCmd();
11026782:	e000146d 	bsr      	0x1102905c	// 1102905c <cpu_task_stack_init+0x6b4>
}
11026786:	1490      	pop      	r15

11026788 <hciLEPeriodicAdvertisingTerminateSync>:
{
11026788:	14d0      	push      	r15
    return HCI_LE_PeriodicAdvertisingTerminateSyncCmd(BUILD_UINT16(pBuf[0], pBuf[1]));
1102678a:	8061      	ld.b      	r3, (r0, 0x1)
1102678c:	4368      	lsli      	r3, r3, 8
1102678e:	8000      	ld.b      	r0, (r0, 0x0)
11026790:	600c      	addu      	r0, r3
11026792:	7401      	zexth      	r0, r0
11026794:	e000128a 	bsr      	0x11028ca8	// 11028ca8 <cpu_task_stack_init+0x300>
}
11026798:	1490      	pop      	r15

1102679a <hciLEReadMaxDataLength>:
{
1102679a:	14d0      	push      	r15
    return HCI_LE_ReadMaxDataLengthCmd();
1102679c:	e000135e 	bsr      	0x11028e58	// 11028e58 <cpu_task_stack_init+0x4b0>
}
110267a0:	1490      	pop      	r15

110267a2 <hciReadBDADDR>:
{
110267a2:	14d0      	push      	r15
    return HCI_ReadBDADDRCmd();
110267a4:	e00012d6 	bsr      	0x11028d50	// 11028d50 <cpu_task_stack_init+0x3a8>
}
110267a8:	1490      	pop      	r15
	...

110267ac <adv_scan_schd_adv_exit>:

    return -EINVAL;;
}

static int adv_scan_schd_adv_exit(adv_scan_schd_state_en st)
{
110267ac:	14d0      	push      	r15
    SCHD_LOGD("adv on exit\n");
    int ret = 0;

    if (st == SCHD_ADV_SCAN || st == SCHD_IDLE || st == SCHD_ADV) {
110267ae:	3843      	cmpnei      	r0, 3
110267b0:	0c03      	bf      	0x110267b6	// 110267b6 <adv_scan_schd_adv_exit+0xa>
110267b2:	3801      	cmphsi      	r0, 2
110267b4:	080a      	bt      	0x110267c8	// 110267c8 <adv_scan_schd_adv_exit+0x1c>
        adv_scan_schd.flag = FLAG_STOP;
110267b6:	1007      	lrw      	r0, 0x1fffb98c	// 110267d0 <adv_scan_schd_adv_exit+0x24>
110267b8:	3302      	movi      	r3, 2
        k_timer_stop(&adv_scan_schd.timer);
110267ba:	202f      	addi      	r0, 48
        adv_scan_schd.flag = FLAG_STOP;
110267bc:	dc600054 	st.b      	r3, (r0, 0x54)
        k_timer_stop(&adv_scan_schd.timer);
110267c0:	e3ffe2ed 	bsr      	0x11022d9a	// 11022d9a <k_timer_stop>

        if (ret) {
            SCHD_LOGD("adv stop err %d\n", ret);
        }

        return 0;
110267c4:	3000      	movi      	r0, 0
    }

    return -EINVAL;
}
110267c6:	1490      	pop      	r15
    return -EINVAL;
110267c8:	3000      	movi      	r0, 0
110267ca:	2815      	subi      	r0, 22
110267cc:	07fd      	br      	0x110267c6	// 110267c6 <adv_scan_schd_adv_exit+0x1a>
110267ce:	0000      	bkpt
110267d0:	1fffb98c 	.long	0x1fffb98c

110267d4 <adv_scan_schd_adv_scan_enter>:

    return -EINVAL;
}

static int adv_scan_schd_adv_scan_enter(adv_scan_schd_state_en st)
{
110267d4:	14d0      	push      	r15
    SCHD_LOGD("adv scan on enter\n");

    if (st == SCHD_ADV || st == SCHD_SCAN || st == SCHD_ADV_SCAN || st == SCHD_IDLE) {
110267d6:	3803      	cmphsi      	r0, 4
110267d8:	080b      	bt      	0x110267ee	// 110267ee <adv_scan_schd_adv_scan_enter+0x1a>
        adv_scan_schd.flag = FLAG_RESTART;
110267da:	1007      	lrw      	r0, 0x1fffb98c	// 110267f4 <adv_scan_schd_adv_scan_enter+0x20>
110267dc:	3301      	movi      	r3, 1
        k_timer_start(&adv_scan_schd.timer, 1);
110267de:	3101      	movi      	r1, 1
        adv_scan_schd.flag = FLAG_RESTART;
110267e0:	dc600084 	st.b      	r3, (r0, 0x84)
        k_timer_start(&adv_scan_schd.timer, 1);
110267e4:	202f      	addi      	r0, 48
110267e6:	e3ffe2bf 	bsr      	0x11022d64	// 11022d64 <k_timer_start>
        return 0;
110267ea:	3000      	movi      	r0, 0
    }

    return -EINVAL;
}
110267ec:	1490      	pop      	r15
    return -EINVAL;
110267ee:	3000      	movi      	r0, 0
110267f0:	2815      	subi      	r0, 22
110267f2:	07fd      	br      	0x110267ec	// 110267ec <adv_scan_schd_adv_scan_enter+0x18>
110267f4:	1fffb98c 	.long	0x1fffb98c

110267f8 <adv_scan_schd_adv_enter>:
{
110267f8:	14d0      	push      	r15
    if (st == SCHD_IDLE || st == SCHD_ADV_SCAN || st == SCHD_ADV) {
110267fa:	3801      	cmphsi      	r0, 2
110267fc:	0c03      	bf      	0x11026802	// 11026802 <adv_scan_schd_adv_enter+0xa>
110267fe:	3843      	cmpnei      	r0, 3
11026800:	0811      	bt      	0x11026822	// 11026822 <adv_scan_schd_adv_enter+0x2a>
        if (adv_scan_schd.param.adv_on) {
11026802:	100a      	lrw      	r0, 0x1fffb98c	// 11026828 <adv_scan_schd_adv_enter+0x30>
11026804:	d860008c 	ld.b      	r3, (r0, 0x8c)
11026808:	e4632008 	andi      	r3, r3, 8
1102680c:	3b40      	cmpnei      	r3, 0
1102680e:	0c0a      	bf      	0x11026822	// 11026822 <adv_scan_schd_adv_enter+0x2a>
            adv_scan_schd.flag = FLAG_RESTART;
11026810:	3301      	movi      	r3, 1
            k_timer_start(&adv_scan_schd.timer, 1);
11026812:	3101      	movi      	r1, 1
            adv_scan_schd.flag = FLAG_RESTART;
11026814:	dc600084 	st.b      	r3, (r0, 0x84)
            k_timer_start(&adv_scan_schd.timer, 1);
11026818:	202f      	addi      	r0, 48
1102681a:	e3ffe2a5 	bsr      	0x11022d64	// 11022d64 <k_timer_start>
            return 0;
1102681e:	3000      	movi      	r0, 0
}
11026820:	1490      	pop      	r15
    return -EINVAL;;
11026822:	3000      	movi      	r0, 0
11026824:	2815      	subi      	r0, 22
11026826:	07fd      	br      	0x11026820	// 11026820 <adv_scan_schd_adv_enter+0x28>
11026828:	1fffb98c 	.long	0x1fffb98c

1102682c <adv_scan_schd_idle_enter>:
{
1102682c:	14d0      	push      	r15
    memset(&adv_scan_schd.param, 0, sizeof(struct adv_scan_data_t));
1102682e:	3220      	movi      	r2, 32
11026830:	3100      	movi      	r1, 0
11026832:	1003      	lrw      	r0, 0x1fffba18	// 1102683c <adv_scan_schd_idle_enter+0x10>
11026834:	e3ffb3ec 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
}
11026838:	3000      	movi      	r0, 0
1102683a:	1490      	pop      	r15
1102683c:	1fffba18 	.long	0x1fffba18

11026840 <hciLESet_ConnectionCTE_ReceiveParam>:
11026840:	3000      	movi      	r0, 0
11026842:	783c      	jmp      	r15

11026844 <hciLE_ConnectionCTERequestEnable>:
11026844:	3000      	movi      	r0, 0
11026846:	783c      	jmp      	r15

11026848 <hciLEReadPeerRA>:
11026848:	3000      	movi      	r0, 0
1102684a:	783c      	jmp      	r15

1102684c <hciLEAddDevToPeriodicAdvList>:
1102684c:	3000      	movi      	r0, 0
1102684e:	783c      	jmp      	r15

11026850 <hciLERemovePeriodicAdvList>:
11026850:	3000      	movi      	r0, 0
11026852:	783c      	jmp      	r15

11026854 <hciLEClearPeriodicAdvList>:
11026854:	3000      	movi      	r0, 0
11026856:	783c      	jmp      	r15

11026858 <hciLEReadPeriodicAdvListSize>:
11026858:	3000      	movi      	r0, 0
1102685a:	783c      	jmp      	r15

1102685c <hciLEReadTransmitPower>:
1102685c:	3000      	movi      	r0, 0
1102685e:	783c      	jmp      	r15

11026860 <hciLEReadRfPathCompensation>:
11026860:	3000      	movi      	r0, 0
11026862:	783c      	jmp      	r15

11026864 <hciLEWriteRfPathCompensation>:
11026864:	3000      	movi      	r0, 0
11026866:	783c      	jmp      	r15

11026868 <wait_llWaitingIrq>:
{
11026868:	14d4      	push      	r4-r7, r15
1102686a:	6d43      	mov      	r5, r0
    uint32_t t0 = read_current_fine_time();
1102686c:	e000143a 	bsr      	0x110290e0	// 110290e0 <cpu_task_stack_init+0x738>
        if (t1 > ms * 1000) {
11026870:	33fa      	movi      	r3, 250
11026872:	4362      	lsli      	r3, r3, 2
    uint32_t t0 = read_current_fine_time();
11026874:	6d03      	mov      	r4, r0
        if (t1 > ms * 1000) {
11026876:	7d4c      	mult      	r5, r3
    while (*pwait_flag) {
11026878:	10ca      	lrw      	r6, 0x1fff0df8	// 110268a0 <wait_llWaitingIrq+0x38>
        t1 = tmp >= t0 ? tmp - t0 : BASE_TIME_UNITS - t0 + tmp;
1102687a:	c6a05027 	bmaski      	r7, 22
    while (*pwait_flag) {
1102687e:	9660      	ld.w      	r3, (r6, 0x0)
11026880:	3b40      	cmpnei      	r3, 0
11026882:	0803      	bt      	0x11026888	// 11026888 <wait_llWaitingIrq+0x20>
    return 0;
11026884:	3000      	movi      	r0, 0
}
11026886:	1494      	pop      	r4-r7, r15
        tmp = read_current_fine_time();
11026888:	e000142c 	bsr      	0x110290e0	// 110290e0 <cpu_task_stack_init+0x738>
        t1 = tmp >= t0 ? tmp - t0 : BASE_TIME_UNITS - t0 + tmp;
1102688c:	6500      	cmphs      	r0, r4
1102688e:	0c06      	bf      	0x1102689a	// 1102689a <wait_llWaitingIrq+0x32>
11026890:	6012      	subu      	r0, r4
        if (t1 > ms * 1000) {
11026892:	6414      	cmphs      	r5, r0
11026894:	0bf5      	bt      	0x1102687e	// 1102687e <wait_llWaitingIrq+0x16>
            return LL_STATUS_ERROR_COMMAND_DISALLOWED;
11026896:	300c      	movi      	r0, 12
11026898:	07f7      	br      	0x11026886	// 11026886 <wait_llWaitingIrq+0x1e>
        t1 = tmp >= t0 ? tmp - t0 : BASE_TIME_UNITS - t0 + tmp;
1102689a:	5f71      	subu      	r3, r7, r4
1102689c:	600c      	addu      	r0, r3
1102689e:	07fa      	br      	0x11026892	// 11026892 <wait_llWaitingIrq+0x2a>
110268a0:	1fff0df8 	.long	0x1fff0df8

110268a4 <hciLECreateConn>:
{
110268a4:	14d3      	push      	r4-r6, r15
110268a6:	1428      	subi      	r14, r14, 32
110268a8:	6d03      	mov      	r4, r0
    printf("CC\n");
110268aa:	1104      	lrw      	r0, 0x11012030	// 11026938 <hciLECreateConn+0x94>
110268ac:	e3ffb206 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
    int ret = wait_llWaitingIrq(100);
110268b0:	3064      	movi      	r0, 100
110268b2:	e3ffffdb 	bsr      	0x11026868	// 11026868 <wait_llWaitingIrq>
    if (ret) {
110268b6:	3840      	cmpnei      	r0, 0
110268b8:	0c04      	bf      	0x110268c0	// 110268c0 <hciLECreateConn+0x1c>
        return ret;
110268ba:	7400      	zextb      	r0, r0
}
110268bc:	1408      	addi      	r14, r14, 32
110268be:	1493      	pop      	r4-r6, r15
    memcpy(peerInfo_recored, &pBuf[5], 7);
110268c0:	3207      	movi      	r2, 7
110268c2:	101f      	lrw      	r0, 0x1fffba44	// 1102693c <hciLECreateConn+0x98>
110268c4:	5c32      	addi      	r1, r4, 5
110268c6:	e000137d 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
                                BUILD_UINT16(pBuf[2], pBuf[3]),
110268ca:	8423      	ld.b      	r1, (r4, 0x3)
110268cc:	8402      	ld.b      	r0, (r4, 0x2)
110268ce:	4128      	lsli      	r1, r1, 8
    return HCI_LE_CreateConnCmd(BUILD_UINT16(pBuf[0], pBuf[1]),
110268d0:	6040      	addu      	r1, r0
110268d2:	8401      	ld.b      	r0, (r4, 0x1)
110268d4:	84a0      	ld.b      	r5, (r4, 0x0)
110268d6:	4008      	lsli      	r0, r0, 8
110268d8:	6014      	addu      	r0, r5
                                BUILD_UINT16(pBuf[23], pBuf[24]));
110268da:	84b8      	ld.b      	r5, (r4, 0x18)
110268dc:	84d7      	ld.b      	r6, (r4, 0x17)
110268de:	45a8      	lsli      	r5, r5, 8
    return HCI_LE_CreateConnCmd(BUILD_UINT16(pBuf[0], pBuf[1]),
110268e0:	6158      	addu      	r5, r6
110268e2:	7555      	zexth      	r5, r5
110268e4:	8465      	ld.b      	r3, (r4, 0x5)
110268e6:	8444      	ld.b      	r2, (r4, 0x4)
110268e8:	b8a7      	st.w      	r5, (r14, 0x1c)
110268ea:	2405      	addi      	r4, 6
                                BUILD_UINT16(pBuf[21], pBuf[22]),
110268ec:	84b0      	ld.b      	r5, (r4, 0x10)
110268ee:	84cf      	ld.b      	r6, (r4, 0xf)
110268f0:	45a8      	lsli      	r5, r5, 8
    return HCI_LE_CreateConnCmd(BUILD_UINT16(pBuf[0], pBuf[1]),
110268f2:	6158      	addu      	r5, r6
110268f4:	7555      	zexth      	r5, r5
110268f6:	b8a6      	st.w      	r5, (r14, 0x18)
110268f8:	7445      	zexth      	r1, r1
                                BUILD_UINT16(pBuf[19], pBuf[20]),
110268fa:	84ae      	ld.b      	r5, (r4, 0xe)
110268fc:	84cd      	ld.b      	r6, (r4, 0xd)
110268fe:	45a8      	lsli      	r5, r5, 8
    return HCI_LE_CreateConnCmd(BUILD_UINT16(pBuf[0], pBuf[1]),
11026900:	6158      	addu      	r5, r6
11026902:	7555      	zexth      	r5, r5
11026904:	b8a5      	st.w      	r5, (r14, 0x14)
11026906:	7401      	zexth      	r0, r0
                                BUILD_UINT16(pBuf[17], pBuf[18]),
11026908:	84ac      	ld.b      	r5, (r4, 0xc)
1102690a:	84cb      	ld.b      	r6, (r4, 0xb)
1102690c:	45a8      	lsli      	r5, r5, 8
    return HCI_LE_CreateConnCmd(BUILD_UINT16(pBuf[0], pBuf[1]),
1102690e:	6158      	addu      	r5, r6
11026910:	7555      	zexth      	r5, r5
11026912:	b8a4      	st.w      	r5, (r14, 0x10)
                                BUILD_UINT16(pBuf[15], pBuf[16]),
11026914:	84aa      	ld.b      	r5, (r4, 0xa)
11026916:	84c9      	ld.b      	r6, (r4, 0x9)
11026918:	45a8      	lsli      	r5, r5, 8
    return HCI_LE_CreateConnCmd(BUILD_UINT16(pBuf[0], pBuf[1]),
1102691a:	6158      	addu      	r5, r6
1102691c:	7555      	zexth      	r5, r5
1102691e:	b8a3      	st.w      	r5, (r14, 0xc)
                                BUILD_UINT16(pBuf[13], pBuf[14]),
11026920:	84a8      	ld.b      	r5, (r4, 0x8)
11026922:	84c7      	ld.b      	r6, (r4, 0x7)
11026924:	45a8      	lsli      	r5, r5, 8
    return HCI_LE_CreateConnCmd(BUILD_UINT16(pBuf[0], pBuf[1]),
11026926:	6158      	addu      	r5, r6
11026928:	7555      	zexth      	r5, r5
1102692a:	b8a2      	st.w      	r5, (r14, 0x8)
1102692c:	84a6      	ld.b      	r5, (r4, 0x6)
1102692e:	b880      	st.w      	r4, (r14, 0x0)
11026930:	b8a1      	st.w      	r5, (r14, 0x4)
11026932:	e000118b 	bsr      	0x11028c48	// 11028c48 <cpu_task_stack_init+0x2a0>
11026936:	07c3      	br      	0x110268bc	// 110268bc <hciLECreateConn+0x18>
11026938:	11012030 	.long	0x11012030
1102693c:	1fffba44 	.long	0x1fffba44

11026940 <hciProcessHostToCtrlData>:
{
11026940:	14d1      	push      	r4, r15
11026942:	6d03      	mov      	r4, r0
    switch (pMsg->pktType) {
11026944:	8062      	ld.b      	r3, (r0, 0x2)
11026946:	3b42      	cmpnei      	r3, 2
11026948:	0810      	bt      	0x11026968	// 11026968 <hciProcessHostToCtrlData+0x28>
            err = HCI_SendDataPkt(pMsg->connHandle,
1102694a:	8844      	ld.h      	r2, (r0, 0x8)
1102694c:	8026      	ld.b      	r1, (r0, 0x6)
1102694e:	9463      	ld.w      	r3, (r4, 0xc)
11026950:	8802      	ld.h      	r0, (r0, 0x4)
11026952:	e000141b 	bsr      	0x11029188	// 11029188 <cpu_task_stack_init+0x7e0>
            if (err != HCI_SUCCESS)
11026956:	3840      	cmpnei      	r0, 0
11026958:	0c08      	bf      	0x11026968	// 11026968 <hciProcessHostToCtrlData+0x28>
                printf("err , len = %d\n", pMsg->pktLen);
1102695a:	8c24      	ld.h      	r1, (r4, 0x8)
1102695c:	1005      	lrw      	r0, 0x110120ca	// 11026970 <hciProcessHostToCtrlData+0x30>
1102695e:	e3ffb1ad 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
                osal_bm_free((void *)pMsg->pData);
11026962:	9403      	ld.w      	r0, (r4, 0xc)
11026964:	e0001496 	bsr      	0x11029290	// 11029290 <cpu_task_stack_init+0x8e8>
    (void)osal_msg_deallocate((uint8 *)pMsg);
11026968:	6c13      	mov      	r0, r4
1102696a:	e000152f 	bsr      	0x110293c8	// 110293c8 <cpu_task_stack_init+0xa20>
}
1102696e:	1491      	pop      	r4, r15
11026970:	110120ca 	.long	0x110120ca

11026974 <LL_ReadLocalResolvableAddress1>:
    localRpa[0] = g_currentLocalRpa[0];
11026974:	1068      	lrw      	r3, 0x1fff15d1	// 11026994 <LL_ReadLocalResolvableAddress1+0x20>
11026976:	8340      	ld.b      	r2, (r3, 0x0)
11026978:	a040      	st.b      	r2, (r0, 0x0)
    localRpa[1] = g_currentLocalRpa[1];
1102697a:	8341      	ld.b      	r2, (r3, 0x1)
1102697c:	a041      	st.b      	r2, (r0, 0x1)
    localRpa[2] = g_currentLocalRpa[2];
1102697e:	8342      	ld.b      	r2, (r3, 0x2)
11026980:	a042      	st.b      	r2, (r0, 0x2)
    localRpa[3] = g_currentLocalRpa[3];
11026982:	8343      	ld.b      	r2, (r3, 0x3)
11026984:	a043      	st.b      	r2, (r0, 0x3)
    localRpa[4] = g_currentLocalRpa[4];
11026986:	8344      	ld.b      	r2, (r3, 0x4)
11026988:	a044      	st.b      	r2, (r0, 0x4)
    localRpa[5] = g_currentLocalRpa[5];
1102698a:	8365      	ld.b      	r3, (r3, 0x5)
1102698c:	a065      	st.b      	r3, (r0, 0x5)
}
1102698e:	3000      	movi      	r0, 0
11026990:	783c      	jmp      	r15
11026992:	0000      	bkpt
11026994:	1fff15d1 	.long	0x1fff15d1

11026998 <hciLESetExtAdvEnable1>:
{
11026998:	14d3      	push      	r4-r6, r15
1102699a:	1428      	subi      	r14, r14, 32
1102699c:	6d43      	mov      	r5, r0
    uint8 number_of_sets = pBuf[1];
1102699e:	8081      	ld.b      	r4, (r0, 0x1)
    if (number_of_sets > LL_MAX_ADV_SET || number_of_sets == 0) {
110269a0:	5c63      	subi      	r3, r4, 1
110269a2:	74cc      	zextb      	r3, r3
110269a4:	3b05      	cmphsi      	r3, 6
110269a6:	082d      	bt      	0x11026a00	// 11026a00 <hciLESetExtAdvEnable1+0x68>
    if (pBuf[0]) {
110269a8:	8060      	ld.b      	r3, (r0, 0x0)
110269aa:	3b40      	cmpnei      	r3, 0
110269ac:	080f      	bt      	0x110269ca	// 110269ca <hciLESetExtAdvEnable1+0x32>
{
110269ae:	3300      	movi      	r3, 0
110269b0:	5d46      	addi      	r2, r5, 2
    for (int i = 0; i < number_of_sets; i++) {
110269b2:	650d      	cmplt      	r3, r4
110269b4:	0813      	bt      	0x110269da	// 110269da <hciLESetExtAdvEnable1+0x42>
    status = LL_SetExtAdvEnable(enable, number_of_sets, advertising_handle, duration, max_extended_advertising_events);
110269b6:	1b03      	addi      	r3, r14, 12
110269b8:	8500      	ld.b      	r0, (r5, 0x0)
110269ba:	b860      	st.w      	r3, (r14, 0x0)
110269bc:	6c53      	mov      	r1, r4
110269be:	1b05      	addi      	r3, r14, 20
110269c0:	1a01      	addi      	r2, r14, 4
110269c2:	e3ffc84d 	bsr      	0x1101fa5c	// 1101fa5c <LL_SetExtAdvEnable>
    return HCI_LE_SetExtAdvEnableCmd1(pBuf[0],
110269c6:	3000      	movi      	r0, 0
110269c8:	0407      	br      	0x110269d6	// 110269d6 <hciLESetExtAdvEnable1+0x3e>
        int ret = wait_llWaitingIrq(100);
110269ca:	3064      	movi      	r0, 100
110269cc:	e3ffff4e 	bsr      	0x11026868	// 11026868 <wait_llWaitingIrq>
        if (ret) {
110269d0:	3840      	cmpnei      	r0, 0
110269d2:	0fee      	bf      	0x110269ae	// 110269ae <hciLESetExtAdvEnable1+0x16>
            return ret;
110269d4:	7400      	zextb      	r0, r0
}
110269d6:	1408      	addi      	r14, r14, 32
110269d8:	1493      	pop      	r4-r6, r15
        adv_handler[i] = pBuf[2 + i * 4];
110269da:	8200      	ld.b      	r0, (r2, 0x0)
110269dc:	1901      	addi      	r1, r14, 4
110269de:	604c      	addu      	r1, r3
110269e0:	a100      	st.b      	r0, (r1, 0x0)
        duration[i]    = BUILD_UINT16(pBuf[3 + i * 4], pBuf[4 + i * 4]);
110269e2:	4321      	lsli      	r1, r3, 1
110269e4:	1805      	addi      	r0, r14, 20
110269e6:	6040      	addu      	r1, r0
110269e8:	8202      	ld.b      	r0, (r2, 0x2)
110269ea:	82c1      	ld.b      	r6, (r2, 0x1)
110269ec:	4008      	lsli      	r0, r0, 8
110269ee:	6018      	addu      	r0, r6
110269f0:	a900      	st.h      	r0, (r1, 0x0)
        max_ext_adv_evt[i] = pBuf[5 + i * 4];
110269f2:	8203      	ld.b      	r0, (r2, 0x3)
110269f4:	1903      	addi      	r1, r14, 12
110269f6:	604c      	addu      	r1, r3
110269f8:	a100      	st.b      	r0, (r1, 0x0)
110269fa:	2300      	addi      	r3, 1
110269fc:	2203      	addi      	r2, 4
110269fe:	07da      	br      	0x110269b2	// 110269b2 <hciLESetExtAdvEnable1+0x1a>
        return 0x12;
11026a00:	3012      	movi      	r0, 18
11026a02:	07ea      	br      	0x110269d6	// 110269d6 <hciLESetExtAdvEnable1+0x3e>

11026a04 <HCI_H5_Send>:
{
11026a04:	14d3      	push      	r4-r6, r15
11026a06:	6d03      	mov      	r4, r0
11026a08:	6d87      	mov      	r6, r1
11026a0a:	6d4b      	mov      	r5, r2
    h5_ctx = get_h5_controller_interface();
11026a0c:	e3fffba2 	bsr      	0x11026150	// 11026150 <get_h5_controller_interface>
    h5_ctx->h5_send_acl_data(type, buf, len);
11026a10:	9064      	ld.w      	r3, (r0, 0x10)
11026a12:	6c97      	mov      	r2, r5
11026a14:	6c5b      	mov      	r1, r6
11026a16:	6c13      	mov      	r0, r4
11026a18:	7bcd      	jsr      	r3
}
11026a1a:	3000      	movi      	r0, 0
11026a1c:	1493      	pop      	r4-r6, r15
	...

11026a20 <HCI_CommandCompleteEvent1>:
{
11026a20:	1423      	subi      	r14, r14, 12
11026a22:	dd0e2001 	st.w      	r8, (r14, 0x4)
11026a26:	6e3b      	mov      	r8, r14
11026a28:	b880      	st.w      	r4, (r14, 0x0)
11026a2a:	ddee2002 	st.w      	r15, (r14, 0x8)
11026a2e:	6d07      	mov      	r4, r1
    uint8_t msg[5 + numParam];
11026a30:	5c7e      	addi      	r3, r4, 8
11026a32:	e46321fc 	andi      	r3, r3, 508
11026a36:	638e      	subu      	r14, r3
    msg[0] = 0x0e;
11026a38:	330e      	movi      	r3, 14
{
11026a3a:	6c4b      	mov      	r1, r2
    msg[0] = 0x0e;
11026a3c:	dc6e0000 	st.b      	r3, (r14, 0x0)
    msg[1] = 3 + numParam;
11026a40:	5c6a      	addi      	r3, r4, 3
11026a42:	dc6e0001 	st.b      	r3, (r14, 0x1)
    memcpy(&msg[5], param, numParam);
11026a46:	6c93      	mov      	r2, r4
    msg[2] = hciCtrlCmdToken;
11026a48:	106d      	lrw      	r3, 0x1fff0f70	// 11026a7c <HCI_CommandCompleteEvent1+0x5c>
    msg[3] = LO_UINT16(opcode);
11026a4a:	dc0e0003 	st.b      	r0, (r14, 0x3)
    msg[2] = hciCtrlCmdToken;
11026a4e:	8360      	ld.b      	r3, (r3, 0x0)
    msg[4] = HI_UINT16(opcode);
11026a50:	4808      	lsri      	r0, r0, 8
    msg[2] = hciCtrlCmdToken;
11026a52:	dc6e0002 	st.b      	r3, (r14, 0x2)
    msg[4] = HI_UINT16(opcode);
11026a56:	dc0e0004 	st.b      	r0, (r14, 0x4)
    memcpy(&msg[5], param, numParam);
11026a5a:	e40e0004 	addi      	r0, r14, 5
11026a5e:	e00012b1 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
    HCI_H5_Send(DATA_TYPE_EVENT, msg, 5 + numParam);
11026a62:	6c7b      	mov      	r1, r14
11026a64:	3004      	movi      	r0, 4
11026a66:	5c52      	addi      	r2, r4, 5
11026a68:	e3ffffce 	bsr      	0x11026a04	// 11026a04 <HCI_H5_Send>
}
11026a6c:	6fa3      	mov      	r14, r8
11026a6e:	d9ee2002 	ld.w      	r15, (r14, 0x8)
11026a72:	d90e2001 	ld.w      	r8, (r14, 0x4)
11026a76:	9880      	ld.w      	r4, (r14, 0x0)
11026a78:	1403      	addi      	r14, r14, 12
11026a7a:	783c      	jmp      	r15
11026a7c:	1fff0f70 	.long	0x1fff0f70

11026a80 <hciProcessHostToCtrlVendorCmd_RAW>:
{
11026a80:	14d3      	push      	r4-r6, r15
11026a82:	1421      	subi      	r14, r14, 4
    uint8  i = 0;
11026a84:	3100      	movi      	r1, 0
    cmdOpCode = BUILD_UINT16(Data[0], Data[1]);
11026a86:	8061      	ld.b      	r3, (r0, 0x1)
11026a88:	8040      	ld.b      	r2, (r0, 0x0)
11026a8a:	4368      	lsli      	r3, r3, 8
11026a8c:	60c8      	addu      	r3, r2
    status = 0;
11026a8e:	3200      	movi      	r2, 0
    cmdOpCode = BUILD_UINT16(Data[0], Data[1]);
11026a90:	74cd      	zexth      	r3, r3
    status = 0;
11026a92:	dc4e0003 	st.b      	r2, (r14, 0x3)
    while ((hciVendorCmdTable[i].opCode != 0xFFFF) && (hciVendorCmdTable[i].hciFunc != NULL)) {
11026a96:	ea05ffff 	movi      	r5, 65535
11026a9a:	1090      	lrw      	r4, 0x110120dc	// 11026ad8 <hciProcessHostToCtrlVendorCmd_RAW+0x58>
11026a9c:	4143      	lsli      	r2, r1, 3
11026a9e:	6090      	addu      	r2, r4
11026aa0:	8ac0      	ld.h      	r6, (r2, 0x0)
11026aa2:	9241      	ld.w      	r2, (r2, 0x4)
11026aa4:	655a      	cmpne      	r6, r5
11026aa6:	0c0c      	bf      	0x11026abe	// 11026abe <hciProcessHostToCtrlVendorCmd_RAW+0x3e>
11026aa8:	3a40      	cmpnei      	r2, 0
11026aaa:	0c05      	bf      	0x11026ab4	// 11026ab4 <hciProcessHostToCtrlVendorCmd_RAW+0x34>
        if (hciVendorCmdTable[i].opCode == cmdOpCode) { //((pMsg->pData[2] << 8 ) + pMsg->pData[1]))//cmdOpCode)
11026aac:	658e      	cmpne      	r3, r6
11026aae:	0805      	bt      	0x11026ab8	// 11026ab8 <hciProcessHostToCtrlVendorCmd_RAW+0x38>
            (void)(hciVendorCmdTable[i].hciFunc)(&Data[3]);
11026ab0:	2002      	addi      	r0, 3
11026ab2:	7bc9      	jsr      	r2
}
11026ab4:	1401      	addi      	r14, r14, 4
11026ab6:	1493      	pop      	r4-r6, r15
        i++;
11026ab8:	2100      	addi      	r1, 1
11026aba:	7444      	zextb      	r1, r1
11026abc:	07f0      	br      	0x11026a9c	// 11026a9c <hciProcessHostToCtrlVendorCmd_RAW+0x1c>
    if ((hciVendorCmdTable[i].opCode == 0xFFFF) && (hciVendorCmdTable[i].hciFunc == NULL)) {
11026abe:	3a40      	cmpnei      	r2, 0
11026ac0:	0bfa      	bt      	0x11026ab4	// 11026ab4 <hciProcessHostToCtrlVendorCmd_RAW+0x34>
        status = HCI_ERROR_CODE_UNKNOWN_HCI_CMD;
11026ac2:	3201      	movi      	r2, 1
        HCI_CommandCompleteEvent1(cmdOpCode, 1, &status);
11026ac4:	3101      	movi      	r1, 1
11026ac6:	6c0f      	mov      	r0, r3
        status = HCI_ERROR_CODE_UNKNOWN_HCI_CMD;
11026ac8:	dc4e0003 	st.b      	r2, (r14, 0x3)
        HCI_CommandCompleteEvent1(cmdOpCode, 1, &status);
11026acc:	e44e0002 	addi      	r2, r14, 3
11026ad0:	e3ffffa8 	bsr      	0x11026a20	// 11026a20 <HCI_CommandCompleteEvent1>
    return;
11026ad4:	07f0      	br      	0x11026ab4	// 11026ab4 <hciProcessHostToCtrlVendorCmd_RAW+0x34>
11026ad6:	0000      	bkpt
11026ad8:	110120dc 	.long	0x110120dc

11026adc <hciProcessHostToCtrlCmd_RAW>:
{
11026adc:	14d3      	push      	r4-r6, r15
11026ade:	1421      	subi      	r14, r14, 4
    uint8  i = 0;
11026ae0:	3100      	movi      	r1, 0
    cmdOpCode = BUILD_UINT16(Data[0], Data[1]);
11026ae2:	8061      	ld.b      	r3, (r0, 0x1)
11026ae4:	8040      	ld.b      	r2, (r0, 0x0)
11026ae6:	4368      	lsli      	r3, r3, 8
11026ae8:	60c8      	addu      	r3, r2
    status = 0;
11026aea:	3200      	movi      	r2, 0
    cmdOpCode = BUILD_UINT16(Data[0], Data[1]);
11026aec:	74cd      	zexth      	r3, r3
    status = 0;
11026aee:	dc4e0003 	st.b      	r2, (r14, 0x3)
    while ((hciCmdTable[i].opCode != 0xFFFF) && (hciCmdTable[i].hciFunc != NULL)) {
11026af2:	ea05ffff 	movi      	r5, 65535
11026af6:	1090      	lrw      	r4, 0x11011ca4	// 11026b34 <hciProcessHostToCtrlCmd_RAW+0x58>
11026af8:	4143      	lsli      	r2, r1, 3
11026afa:	6090      	addu      	r2, r4
11026afc:	8ac0      	ld.h      	r6, (r2, 0x0)
11026afe:	9241      	ld.w      	r2, (r2, 0x4)
11026b00:	655a      	cmpne      	r6, r5
11026b02:	0c0c      	bf      	0x11026b1a	// 11026b1a <hciProcessHostToCtrlCmd_RAW+0x3e>
11026b04:	3a40      	cmpnei      	r2, 0
11026b06:	0c05      	bf      	0x11026b10	// 11026b10 <hciProcessHostToCtrlCmd_RAW+0x34>
        if (hciCmdTable[i].opCode == cmdOpCode) { //((pMsg->pData[2] << 8 ) + pMsg->pData[1]))//cmdOpCode)
11026b08:	658e      	cmpne      	r3, r6
11026b0a:	0805      	bt      	0x11026b14	// 11026b14 <hciProcessHostToCtrlCmd_RAW+0x38>
            (void)(hciCmdTable[i].hciFunc)(&Data[3]);
11026b0c:	2002      	addi      	r0, 3
11026b0e:	7bc9      	jsr      	r2
}
11026b10:	1401      	addi      	r14, r14, 4
11026b12:	1493      	pop      	r4-r6, r15
        i++;
11026b14:	2100      	addi      	r1, 1
11026b16:	7444      	zextb      	r1, r1
11026b18:	07f0      	br      	0x11026af8	// 11026af8 <hciProcessHostToCtrlCmd_RAW+0x1c>
    if ((hciCmdTable[i].opCode == 0xFFFF) && (hciCmdTable[i].hciFunc == NULL)) {
11026b1a:	3a40      	cmpnei      	r2, 0
11026b1c:	0bfa      	bt      	0x11026b10	// 11026b10 <hciProcessHostToCtrlCmd_RAW+0x34>
        status = HCI_ERROR_CODE_UNKNOWN_HCI_CMD;
11026b1e:	3201      	movi      	r2, 1
        HCI_CommandCompleteEvent1(cmdOpCode, 1, &status);
11026b20:	3101      	movi      	r1, 1
11026b22:	6c0f      	mov      	r0, r3
        status = HCI_ERROR_CODE_UNKNOWN_HCI_CMD;
11026b24:	dc4e0003 	st.b      	r2, (r14, 0x3)
        HCI_CommandCompleteEvent1(cmdOpCode, 1, &status);
11026b28:	e44e0002 	addi      	r2, r14, 3
11026b2c:	e3ffff7a 	bsr      	0x11026a20	// 11026a20 <HCI_CommandCompleteEvent1>
    return;
11026b30:	07f0      	br      	0x11026b10	// 11026b10 <hciProcessHostToCtrlCmd_RAW+0x34>
11026b32:	0000      	bkpt
11026b34:	11011ca4 	.long	0x11011ca4

11026b38 <HCI_H5_RecvCallback>:
{
11026b38:	14d2      	push      	r4-r5, r15
11026b3a:	6d47      	mov      	r5, r1
    if (packet_type == HCI_CMD_PACKET) {
11026b3c:	3841      	cmpnei      	r0, 1
{
11026b3e:	6c4b      	mov      	r1, r2
    if (packet_type == HCI_CMD_PACKET) {
11026b40:	0805      	bt      	0x11026b4a	// 11026b4a <HCI_H5_RecvCallback+0x12>
        hciProcessHostToCtrlCmd_RAW(data, length);
11026b42:	6c17      	mov      	r0, r5
11026b44:	e3ffffcc 	bsr      	0x11026adc	// 11026adc <hciProcessHostToCtrlCmd_RAW>
}
11026b48:	1492      	pop      	r4-r5, r15
    } else if (packet_type == HCI_ACL_DATA_PACKET) {
11026b4a:	3842      	cmpnei      	r0, 2
11026b4c:	0838      	bt      	0x11026bbc	// 11026bbc <HCI_H5_RecvCallback+0x84>
        pMsg = (hciDataPacket_t *)osal_msg_allocate(sizeof(hciDataPacket_t));
11026b4e:	3010      	movi      	r0, 16
11026b50:	e000111e 	bsr      	0x11028d8c	// 11028d8c <cpu_task_stack_init+0x3e4>
11026b54:	6d03      	mov      	r4, r0
        if (pMsg) {
11026b56:	3840      	cmpnei      	r0, 0
11026b58:	0c30      	bf      	0x11026bb8	// 11026bb8 <HCI_H5_RecvCallback+0x80>
            pMsg->hdr.event  = HCI_HOST_TO_CTRL_DATA_EVENT;
11026b5a:	3303      	movi      	r3, 3
11026b5c:	a060      	st.b      	r3, (r0, 0x0)
            pMsg->hdr.status = 0xFF;
11026b5e:	3300      	movi      	r3, 0
11026b60:	2b00      	subi      	r3, 1
11026b62:	a061      	st.b      	r3, (r0, 0x1)
            pMsg->pktType    = packet_type;
11026b64:	3302      	movi      	r3, 2
11026b66:	a062      	st.b      	r3, (r0, 0x2)
            param1 = BUILD_UINT16(data[0], data[1]);
11026b68:	8561      	ld.b      	r3, (r5, 0x1)
11026b6a:	8540      	ld.b      	r2, (r5, 0x0)
            pktLen = BUILD_UINT16(data[2], data[3]);
11026b6c:	8503      	ld.b      	r0, (r5, 0x3)
            param1 = BUILD_UINT16(data[0], data[1]);
11026b6e:	4368      	lsli      	r3, r3, 8
11026b70:	60c8      	addu      	r3, r2
11026b72:	74cd      	zexth      	r3, r3
            pktLen = BUILD_UINT16(data[2], data[3]);
11026b74:	8542      	ld.b      	r2, (r5, 0x2)
11026b76:	4008      	lsli      	r0, r0, 8
11026b78:	6008      	addu      	r0, r2
            pMsg->connHandle = param1 & 0x0FFF;         // mask out PB and BC flags
11026b7a:	e4432fff 	andi      	r2, r3, 4095
            pMsg->pbFlag     = (param1 & 0x3000) >> 12; // isolate PB flag
11026b7e:	536c      	asri      	r3, r3, 12
            pktLen = BUILD_UINT16(data[2], data[3]);
11026b80:	7401      	zexth      	r0, r0
            pMsg->pbFlag     = (param1 & 0x3000) >> 12; // isolate PB flag
11026b82:	e4632003 	andi      	r3, r3, 3
            pMsg->connHandle = param1 & 0x0FFF;         // mask out PB and BC flags
11026b86:	ac42      	st.h      	r2, (r4, 0x4)
            pMsg->pbFlag     = (param1 & 0x3000) >> 12; // isolate PB flag
11026b88:	a466      	st.b      	r3, (r4, 0x6)
            pMsg->pktLen     = pktLen;
11026b8a:	ac04      	st.h      	r0, (r4, 0x8)
            pMsg->pData      = HCI_bm_alloc(pMsg->pktLen);
11026b8c:	e0001250 	bsr      	0x1102902c	// 1102902c <cpu_task_stack_init+0x684>
            if (pMsg->pData) {
11026b90:	3840      	cmpnei      	r0, 0
            pMsg->pData      = HCI_bm_alloc(pMsg->pktLen);
11026b92:	b403      	st.w      	r0, (r4, 0xc)
            if (pMsg->pData) {
11026b94:	0c0b      	bf      	0x11026baa	// 11026baa <HCI_H5_RecvCallback+0x72>
                memcpy(pMsg->pData, &data[4], pMsg->pktLen);
11026b96:	8c44      	ld.h      	r2, (r4, 0x8)
11026b98:	5d2e      	addi      	r1, r5, 4
11026b9a:	e0001213 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
                (void)osal_msg_send(hciTaskID, (uint8 *)pMsg);
11026b9e:	106e      	lrw      	r3, 0x1fff0f80	// 11026bd4 <HCI_H5_RecvCallback+0x9c>
11026ba0:	6c53      	mov      	r1, r4
11026ba2:	8300      	ld.b      	r0, (r3, 0x0)
11026ba4:	e0001232 	bsr      	0x11029008	// 11029008 <cpu_task_stack_init+0x660>
11026ba8:	07d0      	br      	0x11026b48	// 11026b48 <HCI_H5_RecvCallback+0x10>
                (void)osal_msg_deallocate((uint8 *)pMsg);
11026baa:	6c13      	mov      	r0, r4
11026bac:	e000140e 	bsr      	0x110293c8	// 110293c8 <cpu_task_stack_init+0xa20>
                printf("malloc pData fail\n");
11026bb0:	100a      	lrw      	r0, 0x11011c66	// 11026bd8 <HCI_H5_RecvCallback+0xa0>
            printf("malloc pMsg fail\n");
11026bb2:	e3ffb083 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
11026bb6:	07c9      	br      	0x11026b48	// 11026b48 <HCI_H5_RecvCallback+0x10>
11026bb8:	1009      	lrw      	r0, 0x11011c79	// 11026bdc <HCI_H5_RecvCallback+0xa4>
11026bba:	07fc      	br      	0x11026bb2	// 11026bb2 <HCI_H5_RecvCallback+0x7a>
    } else  if (packet_type == H5_VDRSPEC_PKT) {
11026bbc:	384e      	cmpnei      	r0, 14
11026bbe:	0805      	bt      	0x11026bc8	// 11026bc8 <HCI_H5_RecvCallback+0x90>
        hciProcessHostToCtrlVendorCmd_RAW(data, length);
11026bc0:	6c17      	mov      	r0, r5
11026bc2:	e3ffff5f 	bsr      	0x11026a80	// 11026a80 <hciProcessHostToCtrlVendorCmd_RAW>
11026bc6:	07c1      	br      	0x11026b48	// 11026b48 <HCI_H5_RecvCallback+0x10>
        printf("unhandle packet type %d\n", packet_type);
11026bc8:	6c43      	mov      	r1, r0
11026bca:	1006      	lrw      	r0, 0x11011c8b	// 11026be0 <HCI_H5_RecvCallback+0xa8>
11026bcc:	e3ffb076 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
}
11026bd0:	07bc      	br      	0x11026b48	// 11026b48 <HCI_H5_RecvCallback+0x10>
11026bd2:	0000      	bkpt
11026bd4:	1fff0f80 	.long	0x1fff0f80
11026bd8:	11011c66 	.long	0x11011c66
11026bdc:	11011c79 	.long	0x11011c79
11026be0:	11011c8b 	.long	0x11011c8b

11026be4 <hciProcessHostToCtrlCmd>:
{
11026be4:	14d4      	push      	r4-r7, r15
11026be6:	1421      	subi      	r14, r14, 4
11026be8:	6d03      	mov      	r4, r0
    cmdOpCode = BUILD_UINT16(pMsg->pData[1], pMsg->pData[2]);
11026bea:	9041      	ld.w      	r2, (r0, 0x4)
    while ((hciCmdTable[i].opCode != 0xFFFF) && (hciCmdTable[i].hciFunc != NULL)) {
11026bec:	ea07ffff 	movi      	r7, 65535
    cmdOpCode = BUILD_UINT16(pMsg->pData[1], pMsg->pData[2]);
11026bf0:	8202      	ld.b      	r0, (r2, 0x2)
11026bf2:	8261      	ld.b      	r3, (r2, 0x1)
11026bf4:	4008      	lsli      	r0, r0, 8
11026bf6:	600c      	addu      	r0, r3
    status = 0;
11026bf8:	3300      	movi      	r3, 0
    cmdOpCode = BUILD_UINT16(pMsg->pData[1], pMsg->pData[2]);
11026bfa:	7401      	zexth      	r0, r0
    status = 0;
11026bfc:	dc6e0003 	st.b      	r3, (r14, 0x3)
    uint8  i = 0;
11026c00:	3300      	movi      	r3, 0
    while ((hciCmdTable[i].opCode != 0xFFFF) && (hciCmdTable[i].hciFunc != NULL)) {
11026c02:	10d1      	lrw      	r6, 0x11011ca4	// 11026c44 <hciProcessHostToCtrlCmd+0x60>
11026c04:	4323      	lsli      	r1, r3, 3
11026c06:	6058      	addu      	r1, r6
11026c08:	89a0      	ld.h      	r5, (r1, 0x0)
11026c0a:	65d6      	cmpne      	r5, r7
11026c0c:	0c10      	bf      	0x11026c2c	// 11026c2c <hciProcessHostToCtrlCmd+0x48>
11026c0e:	9121      	ld.w      	r1, (r1, 0x4)
11026c10:	3940      	cmpnei      	r1, 0
11026c12:	0c05      	bf      	0x11026c1c	// 11026c1c <hciProcessHostToCtrlCmd+0x38>
        if (hciCmdTable[i].opCode == cmdOpCode) { //((pMsg->pData[2] << 8 ) + pMsg->pData[1]))//cmdOpCode)
11026c14:	6542      	cmpne      	r0, r5
11026c16:	0808      	bt      	0x11026c26	// 11026c26 <hciProcessHostToCtrlCmd+0x42>
            (void)(hciCmdTable[i].hciFunc)(&pMsg->pData[4]);
11026c18:	5a0e      	addi      	r0, r2, 4
11026c1a:	7bc5      	jsr      	r1
    (void)osal_msg_deallocate((uint8 *)pMsg);
11026c1c:	6c13      	mov      	r0, r4
11026c1e:	e00013d5 	bsr      	0x110293c8	// 110293c8 <cpu_task_stack_init+0xa20>
}
11026c22:	1401      	addi      	r14, r14, 4
11026c24:	1494      	pop      	r4-r7, r15
        i++;
11026c26:	2300      	addi      	r3, 1
11026c28:	74cc      	zextb      	r3, r3
11026c2a:	07ed      	br      	0x11026c04	// 11026c04 <hciProcessHostToCtrlCmd+0x20>
    if ((hciCmdTable[i].opCode == 0xFFFF) && (hciCmdTable[i].hciFunc == NULL)) {
11026c2c:	9161      	ld.w      	r3, (r1, 0x4)
11026c2e:	3b40      	cmpnei      	r3, 0
11026c30:	0bf6      	bt      	0x11026c1c	// 11026c1c <hciProcessHostToCtrlCmd+0x38>
        status = HCI_ERROR_CODE_UNKNOWN_HCI_CMD;
11026c32:	3301      	movi      	r3, 1
        HCI_CommandCompleteEvent1(cmdOpCode, 1, &status);
11026c34:	3101      	movi      	r1, 1
        status = HCI_ERROR_CODE_UNKNOWN_HCI_CMD;
11026c36:	dc6e0003 	st.b      	r3, (r14, 0x3)
        HCI_CommandCompleteEvent1(cmdOpCode, 1, &status);
11026c3a:	e44e0002 	addi      	r2, r14, 3
11026c3e:	e3fffef1 	bsr      	0x11026a20	// 11026a20 <HCI_CommandCompleteEvent1>
11026c42:	07ed      	br      	0x11026c1c	// 11026c1c <hciProcessHostToCtrlCmd+0x38>
11026c44:	11011ca4 	.long	0x11011ca4

11026c48 <HCI_ReadLocalVersionInfoCmd_1>:
{
11026c48:	14d0      	push      	r15
11026c4a:	1425      	subi      	r14, r14, 20
    rtnParam[0] = LL_ReadLocalVersionInfo(&version,
11026c4c:	e44e0005 	addi      	r2, r14, 6
11026c50:	1901      	addi      	r1, r14, 4
11026c52:	e40e0002 	addi      	r0, r14, 3
11026c56:	e000106b 	bsr      	0x11028d2c	// 11028d2c <cpu_task_stack_init+0x384>
    rtnParam[1] = HCI_VERSION;
11026c5a:	3309      	movi      	r3, 9
    rtnParam[0] = LL_ReadLocalVersionInfo(&version,
11026c5c:	dc0e0008 	st.b      	r0, (r14, 0x8)
    rtnParam[1] = HCI_VERSION;
11026c60:	dc6e0009 	st.b      	r3, (r14, 0x9)
    rtnParam[2] = LO_UINT16(HCI_REVISION);
11026c64:	3320      	movi      	r3, 32
    HCI_CommandCompleteEvent1(HCI_READ_LOCAL_VERSION_INFO, sizeof(rtnParam), rtnParam);
11026c66:	3109      	movi      	r1, 9
    rtnParam[2] = LO_UINT16(HCI_REVISION);
11026c68:	dc6e000a 	st.b      	r3, (r14, 0xa)
    rtnParam[3] = HI_UINT16(HCI_REVISION);
11026c6c:	3301      	movi      	r3, 1
    HCI_CommandCompleteEvent1(HCI_READ_LOCAL_VERSION_INFO, sizeof(rtnParam), rtnParam);
11026c6e:	ea001001 	movi      	r0, 4097
    rtnParam[3] = HI_UINT16(HCI_REVISION);
11026c72:	dc6e000b 	st.b      	r3, (r14, 0xb)
    rtnParam[4] = version;
11026c76:	d86e0003 	ld.b      	r3, (r14, 0x3)
    HCI_CommandCompleteEvent1(HCI_READ_LOCAL_VERSION_INFO, sizeof(rtnParam), rtnParam);
11026c7a:	1a02      	addi      	r2, r14, 8
    rtnParam[4] = version;
11026c7c:	dc6e000c 	st.b      	r3, (r14, 0xc)
    rtnParam[5] = LO_UINT16(comID);
11026c80:	d86e1002 	ld.h      	r3, (r14, 0x4)
11026c84:	dc6e000d 	st.b      	r3, (r14, 0xd)
    rtnParam[6] = HI_UINT16(comID);
11026c88:	4b68      	lsri      	r3, r3, 8
11026c8a:	dc6e000e 	st.b      	r3, (r14, 0xe)
    rtnParam[7] = LO_UINT16(subverNum);
11026c8e:	d86e1003 	ld.h      	r3, (r14, 0x6)
11026c92:	dc6e000f 	st.b      	r3, (r14, 0xf)
    rtnParam[8] = HI_UINT16(subverNum);
11026c96:	4b68      	lsri      	r3, r3, 8
11026c98:	dc6e0010 	st.b      	r3, (r14, 0x10)
    HCI_CommandCompleteEvent1(HCI_READ_LOCAL_VERSION_INFO, sizeof(rtnParam), rtnParam);
11026c9c:	e3fffec2 	bsr      	0x11026a20	// 11026a20 <HCI_CommandCompleteEvent1>
}
11026ca0:	3000      	movi      	r0, 0
11026ca2:	1405      	addi      	r14, r14, 20
11026ca4:	1490      	pop      	r15

11026ca6 <hciReadLocalVersionInfo>:
{
11026ca6:	14d0      	push      	r15
    return HCI_ReadLocalVersionInfoCmd_1();
11026ca8:	e3ffffd0 	bsr      	0x11026c48	// 11026c48 <HCI_ReadLocalVersionInfoCmd_1>
}
11026cac:	1490      	pop      	r15
	...

11026cb0 <HCI_LE_SetEventMaskCmd1>:
{
11026cb0:	14d0      	push      	r15
11026cb2:	1421      	subi      	r14, r14, 4
    if (pEventMask != NULL) {
11026cb4:	3840      	cmpnei      	r0, 0
11026cb6:	0c1c      	bf      	0x11026cee	// 11026cee <HCI_LE_SetEventMaskCmd1+0x3e>
        bleEvtMask = BUILD_UINT32(pEventMask[0], pEventMask[1], pEventMask[2], pEventMask[3]);
11026cb8:	8061      	ld.b      	r3, (r0, 0x1)
11026cba:	8042      	ld.b      	r2, (r0, 0x2)
11026cbc:	4250      	lsli      	r2, r2, 16
11026cbe:	4368      	lsli      	r3, r3, 8
11026cc0:	60c8      	addu      	r3, r2
11026cc2:	8040      	ld.b      	r2, (r0, 0x0)
11026cc4:	60c8      	addu      	r3, r2
11026cc6:	8043      	ld.b      	r2, (r0, 0x3)
11026cc8:	4258      	lsli      	r2, r2, 24
11026cca:	60c8      	addu      	r3, r2
        bleEvtMask |= 0x01;
11026ccc:	104a      	lrw      	r2, 0x1fff0f74	// 11026cf4 <HCI_LE_SetEventMaskCmd1+0x44>
11026cce:	ec630001 	ori      	r3, r3, 1
11026cd2:	b260      	st.w      	r3, (r2, 0x0)
        status = HCI_SUCCESS;
11026cd4:	3300      	movi      	r3, 0
    HCI_CommandCompleteEvent1(HCI_LE_SET_EVENT_MASK, sizeof(status), &status);
11026cd6:	3101      	movi      	r1, 1
11026cd8:	ea002001 	movi      	r0, 8193
        status = HCI_ERROR_CODE_INVALID_HCI_CMD_PARAMS;
11026cdc:	dc6e0003 	st.b      	r3, (r14, 0x3)
    HCI_CommandCompleteEvent1(HCI_LE_SET_EVENT_MASK, sizeof(status), &status);
11026ce0:	e44e0002 	addi      	r2, r14, 3
11026ce4:	e3fffe9e 	bsr      	0x11026a20	// 11026a20 <HCI_CommandCompleteEvent1>
}
11026ce8:	3000      	movi      	r0, 0
11026cea:	1401      	addi      	r14, r14, 4
11026cec:	1490      	pop      	r15
        status = HCI_ERROR_CODE_INVALID_HCI_CMD_PARAMS;
11026cee:	3312      	movi      	r3, 18
11026cf0:	07f3      	br      	0x11026cd6	// 11026cd6 <HCI_LE_SetEventMaskCmd1+0x26>
11026cf2:	0000      	bkpt
11026cf4:	1fff0f74 	.long	0x1fff0f74

11026cf8 <hciLESetEventMask>:
{
11026cf8:	14d0      	push      	r15
    return HCI_LE_SetEventMaskCmd1(pBuf);
11026cfa:	e3ffffdb 	bsr      	0x11026cb0	// 11026cb0 <HCI_LE_SetEventMaskCmd1>
}
11026cfe:	1490      	pop      	r15

11026d00 <hciLEReadBufSize>:
{
11026d00:	14d0      	push      	r15
11026d02:	1421      	subi      	r14, r14, 4
    uint8 msg[4] = {0};
11026d04:	3300      	movi      	r3, 0
    HCI_CommandCompleteEvent1(HCI_LE_READ_BUFFER_SIZE, sizeof(msg), msg);
11026d06:	6cbb      	mov      	r2, r14
    uint8 msg[4] = {0};
11026d08:	b860      	st.w      	r3, (r14, 0x0)
    msg[1] = LO_UINT16(27);
11026d0a:	331b      	movi      	r3, 27
    HCI_CommandCompleteEvent1(HCI_LE_READ_BUFFER_SIZE, sizeof(msg), msg);
11026d0c:	3104      	movi      	r1, 4
    msg[1] = LO_UINT16(27);
11026d0e:	dc6e0001 	st.b      	r3, (r14, 0x1)
    HCI_CommandCompleteEvent1(HCI_LE_READ_BUFFER_SIZE, sizeof(msg), msg);
11026d12:	ea002002 	movi      	r0, 8194
    msg[3] = CONFIG_BLE_MAX_ALLOW_PKT_PER_EVENT_TX;
11026d16:	3302      	movi      	r3, 2
11026d18:	dc6e0003 	st.b      	r3, (r14, 0x3)
    HCI_CommandCompleteEvent1(HCI_LE_READ_BUFFER_SIZE, sizeof(msg), msg);
11026d1c:	e3fffe82 	bsr      	0x11026a20	// 11026a20 <HCI_CommandCompleteEvent1>
}
11026d20:	3000      	movi      	r0, 0
11026d22:	1401      	addi      	r14, r14, 4
11026d24:	1490      	pop      	r15
	...

11026d28 <hciLESetAdvParam>:
{
11026d28:	14d2      	push      	r4-r5, r15
11026d2a:	1425      	subi      	r14, r14, 20
    if (llState == LL_STATE_INIT) {
11026d2c:	107a      	lrw      	r3, 0x1fff117d	// 11026d94 <hciLESetAdvParam+0x6c>
{
11026d2e:	6d03      	mov      	r4, r0
    if (llState == LL_STATE_INIT) {
11026d30:	8360      	ld.b      	r3, (r3, 0x0)
11026d32:	3b46      	cmpnei      	r3, 6
11026d34:	0811      	bt      	0x11026d56	// 11026d56 <hciLESetAdvParam+0x2e>
        printf("set adv param not allowed\r\n");
11026d36:	1019      	lrw      	r0, 0x11012080	// 11026d98 <hciLESetAdvParam+0x70>
11026d38:	e3ffafc0 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
        status = HCI_ERROR_CODE_CMD_DISALLOWED;
11026d3c:	330c      	movi      	r3, 12
11026d3e:	dc6e0013 	st.b      	r3, (r14, 0x13)
    HCI_CommandCompleteEvent1(HCI_LE_SET_ADV_PARAM, sizeof(status), &status);
11026d42:	3101      	movi      	r1, 1
11026d44:	ea002006 	movi      	r0, 8198
11026d48:	e44e0012 	addi      	r2, r14, 19
11026d4c:	e3fffe6a 	bsr      	0x11026a20	// 11026a20 <HCI_CommandCompleteEvent1>
}
11026d50:	3000      	movi      	r0, 0
11026d52:	1405      	addi      	r14, r14, 20
11026d54:	1492      	pop      	r4-r5, r15
        if (adv_param.advMode == 1) {
11026d56:	1072      	lrw      	r3, 0x1fff1528	// 11026d9c <hciLESetAdvParam+0x74>
11026d58:	8b42      	ld.h      	r2, (r3, 0x4)
11026d5a:	3a41      	cmpnei      	r2, 1
11026d5c:	0803      	bt      	0x11026d62	// 11026d62 <hciLESetAdvParam+0x3a>
            adv_param.advMode = 0;
11026d5e:	3200      	movi      	r2, 0
11026d60:	ab42      	st.h      	r2, (r3, 0x4)
                                BUILD_UINT16(pBuf[2], pBuf[3]),
11026d62:	8423      	ld.b      	r1, (r4, 0x3)
11026d64:	8402      	ld.b      	r0, (r4, 0x2)
11026d66:	4128      	lsli      	r1, r1, 8
        status = LL_SetAdvParam(BUILD_UINT16(pBuf[0], pBuf[1]),
11026d68:	6040      	addu      	r1, r0
11026d6a:	8401      	ld.b      	r0, (r4, 0x1)
11026d6c:	84a0      	ld.b      	r5, (r4, 0x0)
11026d6e:	4008      	lsli      	r0, r0, 8
11026d70:	6014      	addu      	r0, r5
11026d72:	84ae      	ld.b      	r5, (r4, 0xe)
11026d74:	8465      	ld.b      	r3, (r4, 0x5)
11026d76:	8444      	ld.b      	r2, (r4, 0x4)
11026d78:	b8a3      	st.w      	r5, (r14, 0xc)
11026d7a:	7445      	zexth      	r1, r1
11026d7c:	84ad      	ld.b      	r5, (r4, 0xd)
11026d7e:	7401      	zexth      	r0, r0
11026d80:	b8a2      	st.w      	r5, (r14, 0x8)
11026d82:	5cba      	addi      	r5, r4, 7
11026d84:	b8a1      	st.w      	r5, (r14, 0x4)
11026d86:	8486      	ld.b      	r4, (r4, 0x6)
11026d88:	b880      	st.w      	r4, (r14, 0x0)
11026d8a:	e000123b 	bsr      	0x11029200	// 11029200 <cpu_task_stack_init+0x858>
11026d8e:	dc0e0013 	st.b      	r0, (r14, 0x13)
11026d92:	07d8      	br      	0x11026d42	// 11026d42 <hciLESetAdvParam+0x1a>
11026d94:	1fff117d 	.long	0x1fff117d
11026d98:	11012080 	.long	0x11012080
11026d9c:	1fff1528 	.long	0x1fff1528

11026da0 <hciLESetAdvData>:
{
11026da0:	14d0      	push      	r15
11026da2:	1421      	subi      	r14, r14, 4
    if (llState == LL_STATE_INIT) {
11026da4:	106e      	lrw      	r3, 0x1fff117d	// 11026ddc <hciLESetAdvData+0x3c>
11026da6:	8360      	ld.b      	r3, (r3, 0x0)
11026da8:	3b46      	cmpnei      	r3, 6
11026daa:	0811      	bt      	0x11026dcc	// 11026dcc <hciLESetAdvData+0x2c>
        printf("set adv data not allowed\r\n");
11026dac:	100d      	lrw      	r0, 0x11012038	// 11026de0 <hciLESetAdvData+0x40>
11026dae:	e3ffaf85 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
        status = HCI_ERROR_CODE_CMD_DISALLOWED;
11026db2:	330c      	movi      	r3, 12
11026db4:	dc6e0003 	st.b      	r3, (r14, 0x3)
    HCI_CommandCompleteEvent1(HCI_LE_SET_ADV_DATA, sizeof(status), &status);
11026db8:	3101      	movi      	r1, 1
11026dba:	ea002008 	movi      	r0, 8200
11026dbe:	e44e0002 	addi      	r2, r14, 3
11026dc2:	e3fffe2f 	bsr      	0x11026a20	// 11026a20 <HCI_CommandCompleteEvent1>
}
11026dc6:	3000      	movi      	r0, 0
11026dc8:	1401      	addi      	r14, r14, 4
11026dca:	1490      	pop      	r15
        status = LL_SetAdvData(pBuf[0],
11026dcc:	5822      	addi      	r1, r0, 1
11026dce:	8000      	ld.b      	r0, (r0, 0x0)
11026dd0:	e0001032 	bsr      	0x11028e34	// 11028e34 <cpu_task_stack_init+0x48c>
11026dd4:	dc0e0003 	st.b      	r0, (r14, 0x3)
11026dd8:	07f0      	br      	0x11026db8	// 11026db8 <hciLESetAdvData+0x18>
11026dda:	0000      	bkpt
11026ddc:	1fff117d 	.long	0x1fff117d
11026de0:	11012038 	.long	0x11012038

11026de4 <HCI_LE_ReadLocalResolvableAddressCmd1>:
{
11026de4:	14d0      	push      	r15
11026de6:	1422      	subi      	r14, r14, 8
    rtnParam[0] = LL_ReadLocalResolvableAddress1(&(rtnParam[1]));
11026de8:	e40e0000 	addi      	r0, r14, 1
11026dec:	e3fffdc4 	bsr      	0x11026974	// 11026974 <LL_ReadLocalResolvableAddress1>
    HCI_CommandCompleteEvent1(HCI_LE_READ_LOCAL_RESOLVABLE_ADDRESS, sizeof(rtnParam), rtnParam);
11026df0:	6cbb      	mov      	r2, r14
    rtnParam[0] = LL_ReadLocalResolvableAddress1(&(rtnParam[1]));
11026df2:	dc0e0000 	st.b      	r0, (r14, 0x0)
    HCI_CommandCompleteEvent1(HCI_LE_READ_LOCAL_RESOLVABLE_ADDRESS, sizeof(rtnParam), rtnParam);
11026df6:	3107      	movi      	r1, 7
11026df8:	ea00202c 	movi      	r0, 8236
11026dfc:	e3fffe12 	bsr      	0x11026a20	// 11026a20 <HCI_CommandCompleteEvent1>
}
11026e00:	3000      	movi      	r0, 0
11026e02:	1402      	addi      	r14, r14, 8
11026e04:	1490      	pop      	r15

11026e06 <hciLEReadLocalRA>:
{
11026e06:	14d0      	push      	r15
    return HCI_LE_ReadLocalResolvableAddressCmd1(pBuf[0],
11026e08:	5822      	addi      	r1, r0, 1
11026e0a:	8000      	ld.b      	r0, (r0, 0x0)
11026e0c:	e3ffffec 	bsr      	0x11026de4	// 11026de4 <HCI_LE_ReadLocalResolvableAddressCmd1>
}
11026e10:	1490      	pop      	r15
	...

11026e14 <hciExtSwUpgrade>:
{
11026e14:	14d0      	push      	r15
11026e16:	1421      	subi      	r14, r14, 4
    uint8 cmd = pBuf[0];
11026e18:	8060      	ld.b      	r3, (r0, 0x0)
    if (cmd == CMD_START) {
11026e1a:	3b41      	cmpnei      	r3, 1
    status.ops = cmd;
11026e1c:	dc6e0001 	st.b      	r3, (r14, 0x1)
    if (cmd == CMD_START) {
11026e20:	0818      	bt      	0x11026e50	// 11026e50 <hciExtSwUpgrade+0x3c>
        if (swUpgradeMode) {
11026e22:	1160      	lrw      	r3, 0x1fffba4b	// 11026ea0 <hciExtSwUpgrade+0x8c>
11026e24:	8340      	ld.b      	r2, (r3, 0x0)
11026e26:	3a40      	cmpnei      	r2, 0
11026e28:	0c05      	bf      	0x11026e32	// 11026e32 <hciExtSwUpgrade+0x1e>
            status.ops_status = 0x01;
11026e2a:	3301      	movi      	r3, 1
        status.ops_status = CMD_FAIL_NOT_START;
11026e2c:	dc6e0000 	st.b      	r3, (r14, 0x0)
11026e30:	0409      	br      	0x11026e42	// 11026e42 <hciExtSwUpgrade+0x2e>
            swUpgradeMode = TRUE;
11026e32:	3201      	movi      	r2, 1
            printf("start upgrade\r\n");
11026e34:	101c      	lrw      	r0, 0x11011ff6	// 11026ea4 <hciExtSwUpgrade+0x90>
            swUpgradeMode = TRUE;
11026e36:	a340      	st.b      	r2, (r3, 0x0)
            status.ops_status = 0x00;
11026e38:	3300      	movi      	r3, 0
11026e3a:	dc6e0000 	st.b      	r3, (r14, 0x0)
            printf("stop upgrade\r\n");
11026e3e:	e3ffaf3d 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
        HCI_CommandCompleteEvent1(HCI_EXT_H5_SW_UPGRADE, sizeof(status), (uint8 *)&status);
11026e42:	6cbb      	mov      	r2, r14
11026e44:	3102      	movi      	r1, 2
11026e46:	ea00fc20 	movi      	r0, 64544
11026e4a:	e3fffdeb 	bsr      	0x11026a20	// 11026a20 <HCI_CommandCompleteEvent1>
11026e4e:	041c      	br      	0x11026e86	// 11026e86 <hciExtSwUpgrade+0x72>
    } else if (cmd == CMD_STOP) {
11026e50:	3b42      	cmpnei      	r3, 2
11026e52:	080c      	bt      	0x11026e6a	// 11026e6a <hciExtSwUpgrade+0x56>
        if (!swUpgradeMode) {
11026e54:	1073      	lrw      	r3, 0x1fffba4b	// 11026ea0 <hciExtSwUpgrade+0x8c>
11026e56:	8340      	ld.b      	r2, (r3, 0x0)
11026e58:	3a40      	cmpnei      	r2, 0
11026e5a:	0fe8      	bf      	0x11026e2a	// 11026e2a <hciExtSwUpgrade+0x16>
            swUpgradeMode = FALSE;
11026e5c:	3200      	movi      	r2, 0
            printf("stop upgrade\r\n");
11026e5e:	1013      	lrw      	r0, 0x11012006	// 11026ea8 <hciExtSwUpgrade+0x94>
            swUpgradeMode = FALSE;
11026e60:	a340      	st.b      	r2, (r3, 0x0)
            status.ops_status = 0x00;
11026e62:	3300      	movi      	r3, 0
11026e64:	dc6e0000 	st.b      	r3, (r14, 0x0)
11026e68:	07eb      	br      	0x11026e3e	// 11026e3e <hciExtSwUpgrade+0x2a>
    } else if (cmd == CMD_DATA) {
11026e6a:	3b43      	cmpnei      	r3, 3
11026e6c:	0814      	bt      	0x11026e94	// 11026e94 <hciExtSwUpgrade+0x80>
        if (swUpgradeMode) {
11026e6e:	106d      	lrw      	r3, 0x1fffba4b	// 11026ea0 <hciExtSwUpgrade+0x8c>
11026e70:	8360      	ld.b      	r3, (r3, 0x0)
11026e72:	3b40      	cmpnei      	r3, 0
11026e74:	0c0c      	bf      	0x11026e8c	// 11026e8c <hciExtSwUpgrade+0x78>
            uint8 len = pBuf[1];
11026e76:	8021      	ld.b      	r1, (r0, 0x1)
            status.ops_status = CMD_SUCCESS;
11026e78:	3300      	movi      	r3, 0
            _ble_ais_service_write(&pBuf[2], len);
11026e7a:	7445      	zexth      	r1, r1
            status.ops_status = CMD_SUCCESS;
11026e7c:	dc6e0000 	st.b      	r3, (r14, 0x0)
            _ble_ais_service_write(&pBuf[2], len);
11026e80:	2001      	addi      	r0, 2
11026e82:	e3ffcfe5 	bsr      	0x11020e4c	// 11020e4c <_ble_ais_service_write>
}
11026e86:	3000      	movi      	r0, 0
11026e88:	1401      	addi      	r14, r14, 4
11026e8a:	1490      	pop      	r15
            printf("not enable\r\n");
11026e8c:	1008      	lrw      	r0, 0x11012015	// 11026eac <hciExtSwUpgrade+0x98>
11026e8e:	e3ffaf15 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
11026e92:	07fa      	br      	0x11026e86	// 11026e86 <hciExtSwUpgrade+0x72>
        printf("invalid ops\r\n");
11026e94:	1007      	lrw      	r0, 0x11012022	// 11026eb0 <hciExtSwUpgrade+0x9c>
11026e96:	e3ffaf11 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
        status.ops_status = CMD_FAIL_NOT_START;
11026e9a:	3304      	movi      	r3, 4
11026e9c:	07c8      	br      	0x11026e2c	// 11026e2c <hciExtSwUpgrade+0x18>
11026e9e:	0000      	bkpt
11026ea0:	1fffba4b 	.long	0x1fffba4b
11026ea4:	11011ff6 	.long	0x11011ff6
11026ea8:	11012006 	.long	0x11012006
11026eac:	11012015 	.long	0x11012015
11026eb0:	11012022 	.long	0x11012022

11026eb4 <hciProcessCtrlToHost>:
{
11026eb4:	14d2      	push      	r4-r5, r15
11026eb6:	6d43      	mov      	r5, r0
    switch (pBuf->pData[0]) {
11026eb8:	9021      	ld.w      	r1, (r0, 0x4)
11026eba:	8100      	ld.b      	r0, (r1, 0x0)
11026ebc:	3801      	cmphsi      	r0, 2
11026ebe:	0c05      	bf      	0x11026ec8	// 11026ec8 <hciProcessCtrlToHost+0x14>
11026ec0:	3803      	cmphsi      	r0, 4
11026ec2:	0c07      	bf      	0x11026ed0	// 11026ed0 <hciProcessCtrlToHost+0x1c>
11026ec4:	3844      	cmpnei      	r0, 4
11026ec6:	0c12      	bf      	0x11026eea	// 11026eea <hciProcessCtrlToHost+0x36>
    (void)osal_msg_deallocate((uint8 *)pBuf);
11026ec8:	6c17      	mov      	r0, r5
11026eca:	e000127f 	bsr      	0x110293c8	// 110293c8 <cpu_task_stack_init+0xa20>
    return;
11026ece:	042a      	br      	0x11026f22	// 11026f22 <hciProcessCtrlToHost+0x6e>
                        HCI_DATA_MIN_LENGTH + BUILD_UINT16(pBuf->pData[3], pBuf->pData[4]) - 1);
11026ed0:	8144      	ld.b      	r2, (r1, 0x4)
11026ed2:	8163      	ld.b      	r3, (r1, 0x3)
11026ed4:	4248      	lsli      	r2, r2, 8
            HCI_H5_Send(pBuf->pData[0],
11026ed6:	2303      	addi      	r3, 4
11026ed8:	608c      	addu      	r2, r3
11026eda:	7489      	zexth      	r2, r2
11026edc:	2100      	addi      	r1, 1
11026ede:	e3fffd93 	bsr      	0x11026a04	// 11026a04 <HCI_H5_Send>
            osal_bm_free(pBuf->pData);
11026ee2:	9501      	ld.w      	r0, (r5, 0x4)
11026ee4:	e00011d6 	bsr      	0x11029290	// 11029290 <cpu_task_stack_init+0x8e8>
            break;
11026ee8:	07f0      	br      	0x11026ec8	// 11026ec8 <hciProcessCtrlToHost+0x14>
            memcpy(tmp_data, pBuf->pData,  HCI_EVENT_MIN_LENGTH + pBuf->pData[2]);
11026eea:	1092      	lrw      	r4, 0x1fffba4c	// 11026f30 <hciProcessCtrlToHost+0x7c>
11026eec:	6c13      	mov      	r0, r4
11026eee:	8142      	ld.b      	r2, (r1, 0x2)
11026ef0:	2202      	addi      	r2, 3
11026ef2:	e0001067 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
            osal_msg_deallocate((uint8 *)pBuf);
11026ef6:	6c17      	mov      	r0, r5
11026ef8:	e0001268 	bsr      	0x110293c8	// 110293c8 <cpu_task_stack_init+0xa20>
            if (tmp_data[1] == 0x3e && (tmp_data[3] == 0x02 || tmp_data[3] == 0x0d)) {
11026efc:	8461      	ld.b      	r3, (r4, 0x1)
11026efe:	eb43003e 	cmpnei      	r3, 62
11026f02:	0811      	bt      	0x11026f24	// 11026f24 <hciProcessCtrlToHost+0x70>
11026f04:	8463      	ld.b      	r3, (r4, 0x3)
11026f06:	3b42      	cmpnei      	r3, 2
11026f08:	0c03      	bf      	0x11026f0e	// 11026f0e <hciProcessCtrlToHost+0x5a>
11026f0a:	3b4d      	cmpnei      	r3, 13
11026f0c:	080c      	bt      	0x11026f24	// 11026f24 <hciProcessCtrlToHost+0x70>
                if (! rtk_unrel_is_high_level()) {
11026f0e:	e3fff7cb 	bsr      	0x11025ea4	// 11025ea4 <rtk_unrel_is_high_level>
11026f12:	3840      	cmpnei      	r0, 0
11026f14:	0807      	bt      	0x11026f22	// 11026f22 <hciProcessCtrlToHost+0x6e>
                    HCI_H5_Send(0x0D,
11026f16:	1028      	lrw      	r1, 0x1fffba4d	// 11026f34 <hciProcessCtrlToHost+0x80>
11026f18:	300d      	movi      	r0, 13
11026f1a:	8442      	ld.b      	r2, (r4, 0x2)
11026f1c:	2201      	addi      	r2, 2
            HCI_H5_Send(tmp_data[0],
11026f1e:	e3fffd73 	bsr      	0x11026a04	// 11026a04 <HCI_H5_Send>
}
11026f22:	1492      	pop      	r4-r5, r15
            HCI_H5_Send(tmp_data[0],
11026f24:	8442      	ld.b      	r2, (r4, 0x2)
11026f26:	8400      	ld.b      	r0, (r4, 0x0)
11026f28:	2201      	addi      	r2, 2
11026f2a:	1023      	lrw      	r1, 0x1fffba4d	// 11026f34 <hciProcessCtrlToHost+0x80>
11026f2c:	07f9      	br      	0x11026f1e	// 11026f1e <hciProcessCtrlToHost+0x6a>
11026f2e:	0000      	bkpt
11026f30:	1fffba4c 	.long	0x1fffba4c
11026f34:	1fffba4d 	.long	0x1fffba4d

11026f38 <HCI_ProcessEvent1>:
{
11026f38:	14d1      	push      	r4, r15
    if (events & SYS_EVENT_MSG) {
11026f3a:	74c7      	sexth      	r3, r1
{
11026f3c:	6d07      	mov      	r4, r1
    if (events & SYS_EVENT_MSG) {
11026f3e:	3bdf      	btsti      	r3, 31
11026f40:	0c1b      	bf      	0x11026f76	// 11026f76 <HCI_ProcessEvent1+0x3e>
        pMsg = (osal_event_hdr_t *)osal_msg_receive(hciTaskID);
11026f42:	106f      	lrw      	r3, 0x1fff0f80	// 11026f7c <HCI_ProcessEvent1+0x44>
11026f44:	8300      	ld.b      	r0, (r3, 0x0)
11026f46:	e0000f6b 	bsr      	0x11028e1c	// 11028e1c <cpu_task_stack_init+0x474>
        if (pMsg) {
11026f4a:	3840      	cmpnei      	r0, 0
11026f4c:	0c0d      	bf      	0x11026f66	// 11026f66 <HCI_ProcessEvent1+0x2e>
            switch (pMsg->event) {
11026f4e:	8060      	ld.b      	r3, (r0, 0x0)
11026f50:	3b42      	cmpnei      	r3, 2
11026f52:	0c0f      	bf      	0x11026f70	// 11026f70 <HCI_ProcessEvent1+0x38>
11026f54:	3b43      	cmpnei      	r3, 3
11026f56:	0c06      	bf      	0x11026f62	// 11026f62 <HCI_ProcessEvent1+0x2a>
11026f58:	3b41      	cmpnei      	r3, 1
11026f5a:	0806      	bt      	0x11026f66	// 11026f66 <HCI_ProcessEvent1+0x2e>
                    hciProcessCtrlToHost((hciPacket_t *)pMsg);
11026f5c:	e3ffffac 	bsr      	0x11026eb4	// 11026eb4 <hciProcessCtrlToHost>
                    break;
11026f60:	0403      	br      	0x11026f66	// 11026f66 <HCI_ProcessEvent1+0x2e>
                    hciProcessHostToCtrlData((hciDataPacket_t *)pMsg);
11026f62:	e3fffcef 	bsr      	0x11026940	// 11026940 <hciProcessHostToCtrlData>
        return (events ^ SYS_EVENT_MSG);
11026f66:	3380      	movi      	r3, 128
11026f68:	4368      	lsli      	r3, r3, 8
11026f6a:	c4642440 	xor      	r0, r4, r3
}
11026f6e:	1491      	pop      	r4, r15
                    hciProcessHostToCtrlCmd((hciPacket_t *)pMsg);
11026f70:	e3fffe3a 	bsr      	0x11026be4	// 11026be4 <hciProcessHostToCtrlCmd>
                    break;
11026f74:	07f9      	br      	0x11026f66	// 11026f66 <HCI_ProcessEvent1+0x2e>
    return (0);
11026f76:	3000      	movi      	r0, 0
11026f78:	07fb      	br      	0x11026f6e	// 11026f6e <HCI_ProcessEvent1+0x36>
11026f7a:	0000      	bkpt
11026f7c:	1fff0f80 	.long	0x1fff0f80

11026f80 <HCI_LL_SetScanControl>:
{
11026f80:	14d2      	push      	r4-r5, r15
    if (llState == LL_STATE_INIT) {
11026f82:	106c      	lrw      	r3, 0x1fff117d	// 11026fb0 <HCI_LL_SetScanControl+0x30>
{
11026f84:	6d03      	mov      	r4, r0
    if (llState == LL_STATE_INIT) {
11026f86:	8360      	ld.b      	r3, (r3, 0x0)
11026f88:	3b46      	cmpnei      	r3, 6
11026f8a:	0c10      	bf      	0x11026faa	// 11026faa <HCI_LL_SetScanControl+0x2a>
    if (scanMode) {
11026f8c:	3840      	cmpnei      	r0, 0
11026f8e:	0c0a      	bf      	0x11026fa2	// 11026fa2 <HCI_LL_SetScanControl+0x22>
        ret = wait_llWaitingIrq(100);
11026f90:	3064      	movi      	r0, 100
11026f92:	6d47      	mov      	r5, r1
11026f94:	e3fffc6a 	bsr      	0x11026868	// 11026868 <wait_llWaitingIrq>
        if (ret) {
11026f98:	6c57      	mov      	r1, r5
11026f9a:	3840      	cmpnei      	r0, 0
11026f9c:	0c03      	bf      	0x11026fa2	// 11026fa2 <HCI_LL_SetScanControl+0x22>
            return ret;
11026f9e:	7400      	zextb      	r0, r0
}
11026fa0:	1492      	pop      	r4-r5, r15
    ret = LL_SetScanControl(scanMode, filterReports);
11026fa2:	6c13      	mov      	r0, r4
11026fa4:	e00011d0 	bsr      	0x11029344	// 11029344 <cpu_task_stack_init+0x99c>
11026fa8:	07fc      	br      	0x11026fa0	// 11026fa0 <HCI_LL_SetScanControl+0x20>
        return LL_STATUS_ERROR_COMMAND_DISALLOWED;
11026faa:	300c      	movi      	r0, 12
11026fac:	07fa      	br      	0x11026fa0	// 11026fa0 <HCI_LL_SetScanControl+0x20>
11026fae:	0000      	bkpt
11026fb0:	1fff117d 	.long	0x1fff117d

11026fb4 <adv_scan_schd_scan_exit>:
{
11026fb4:	14d0      	push      	r15
    if (st == SCHD_ADV_SCAN || st == SCHD_IDLE || st == SCHD_SCAN) {
11026fb6:	3840      	cmpnei      	r0, 0
11026fb8:	0c04      	bf      	0x11026fc0	// 11026fc0 <adv_scan_schd_scan_exit+0xc>
11026fba:	2801      	subi      	r0, 2
11026fbc:	3801      	cmphsi      	r0, 2
11026fbe:	0819      	bt      	0x11026ff0	// 11026ff0 <adv_scan_schd_scan_exit+0x3c>
            if (adv_scan_schd.param.ext_scan)
11026fc0:	104e      	lrw      	r2, 0x1fffb98c	// 11026ff8 <adv_scan_schd_scan_exit+0x44>
11026fc2:	d862008c 	ld.b      	r3, (r2, 0x8c)
11026fc6:	e4632002 	andi      	r3, r3, 2
11026fca:	d822008d 	ld.b      	r1, (r2, 0x8d)
11026fce:	3b40      	cmpnei      	r3, 0
11026fd0:	0c0b      	bf      	0x11026fe6	// 11026fe6 <adv_scan_schd_scan_exit+0x32>

    //gpio_write(P14, 1);
    //gpio_write(P14, 0);
    //gpio_write(P14, 1);
    //gpio_write(P14, 0);
    status = LL_SetExtendedScanEnable(enable, filter_duplicates, duration, period);
11026fd2:	d8621048 	ld.h      	r3, (r2, 0x90)
11026fd6:	7444      	zextb      	r1, r1
11026fd8:	d8421047 	ld.h      	r2, (r2, 0x8e)
11026fdc:	3000      	movi      	r0, 0
11026fde:	e0001045 	bsr      	0x11029068	// 11029068 <cpu_task_stack_init+0x6c0>
        return 0;
11026fe2:	3000      	movi      	r0, 0
}
11026fe4:	1490      	pop      	r15
                ret = HCI_LL_SetScanControl(0, adv_scan_schd.param.filterReports);
11026fe6:	7444      	zextb      	r1, r1
11026fe8:	3000      	movi      	r0, 0
11026fea:	e3ffffcb 	bsr      	0x11026f80	// 11026f80 <HCI_LL_SetScanControl>
11026fee:	07fa      	br      	0x11026fe2	// 11026fe2 <adv_scan_schd_scan_exit+0x2e>
    return -EINVAL;
11026ff0:	3000      	movi      	r0, 0
11026ff2:	2815      	subi      	r0, 22
11026ff4:	07f8      	br      	0x11026fe4	// 11026fe4 <adv_scan_schd_scan_exit+0x30>
11026ff6:	0000      	bkpt
11026ff8:	1fffb98c 	.long	0x1fffb98c

11026ffc <HCI_LL_SetAdvControl>:
{
11026ffc:	14d3      	push      	r4-r6, r15
    if (llState == LL_STATE_INIT) {
11026ffe:	1076      	lrw      	r3, 0x1fff117d	// 11027054 <HCI_LL_SetAdvControl+0x58>
{
11027000:	6d83      	mov      	r6, r0
    if (llState == LL_STATE_INIT) {
11027002:	8360      	ld.b      	r3, (r3, 0x0)
11027004:	3b46      	cmpnei      	r3, 6
11027006:	0c25      	bf      	0x11027050	// 11027050 <HCI_LL_SetAdvControl+0x54>
    g_rx_adv_buf.rxheader = 0;
11027008:	10b4      	lrw      	r5, 0x1fff17f8	// 11027058 <HCI_LL_SetAdvControl+0x5c>
1102700a:	3300      	movi      	r3, 0
    if (advMode) {
1102700c:	3840      	cmpnei      	r0, 0
    g_rx_adv_buf.rxheader = 0;
1102700e:	ad62      	st.h      	r3, (r5, 0x4)
    if (advMode) {
11027010:	0c09      	bf      	0x11027022	// 11027022 <HCI_LL_SetAdvControl+0x26>
        int ret = wait_llWaitingIrq(100);
11027012:	3064      	movi      	r0, 100
11027014:	e3fffc2a 	bsr      	0x11026868	// 11026868 <wait_llWaitingIrq>
        if (ret) {
11027018:	3840      	cmpnei      	r0, 0
1102701a:	0c04      	bf      	0x11027022	// 11027022 <HCI_LL_SetAdvControl+0x26>
            return ret;
1102701c:	7500      	zextb      	r4, r0
}
1102701e:	6c13      	mov      	r0, r4
11027020:	1493      	pop      	r4-r6, r15
    ret = LL_SetAdvControl(advMode);
11027022:	6c1b      	mov      	r0, r6
11027024:	e0000d58 	bsr      	0x11028ad4	// 11028ad4 <cpu_task_stack_init+0x12c>
    if (llSecondaryState == LL_SEC_STATE_IDLE_PENDING) {
11027028:	106d      	lrw      	r3, 0x1fff1184	// 1102705c <HCI_LL_SetAdvControl+0x60>
    ret = LL_SetAdvControl(advMode);
1102702a:	6d83      	mov      	r6, r0
    if (llSecondaryState == LL_SEC_STATE_IDLE_PENDING) {
1102702c:	8340      	ld.b      	r2, (r3, 0x0)
    ret = LL_SetAdvControl(advMode);
1102702e:	6d03      	mov      	r4, r0
    if (llSecondaryState == LL_SEC_STATE_IDLE_PENDING) {
11027030:	3a45      	cmpnei      	r2, 5
11027032:	0808      	bt      	0x11027042	// 11027042 <HCI_LL_SetAdvControl+0x46>
        llSecondaryState = LL_SEC_STATE_IDLE;
11027034:	3200      	movi      	r2, 0
11027036:	a340      	st.b      	r2, (r3, 0x0)
    if (ret == 0) {
11027038:	3e40      	cmpnei      	r6, 0
1102703a:	0bf2      	bt      	0x1102701e	// 1102701e <HCI_LL_SetAdvControl+0x22>
        g_rx_adv_buf.rxheader = 0;
1102703c:	3300      	movi      	r3, 0
1102703e:	ad62      	st.h      	r3, (r5, 0x4)
11027040:	07ef      	br      	0x1102701e	// 1102701e <HCI_LL_SetAdvControl+0x22>
        osal_stop_timerEx(LL_TaskID, LL_EVT_SECONDARY_ADV);
11027042:	1068      	lrw      	r3, 0x1fff14ac	// 11027060 <HCI_LL_SetAdvControl+0x64>
11027044:	3180      	movi      	r1, 128
11027046:	8300      	ld.b      	r0, (r3, 0x0)
11027048:	4126      	lsli      	r1, r1, 6
1102704a:	e00011ad 	bsr      	0x110293a4	// 110293a4 <cpu_task_stack_init+0x9fc>
1102704e:	07f5      	br      	0x11027038	// 11027038 <HCI_LL_SetAdvControl+0x3c>
        return LL_STATUS_ERROR_COMMAND_DISALLOWED;
11027050:	340c      	movi      	r4, 12
11027052:	07e6      	br      	0x1102701e	// 1102701e <HCI_LL_SetAdvControl+0x22>
11027054:	1fff117d 	.long	0x1fff117d
11027058:	1fff17f8 	.long	0x1fff17f8
1102705c:	1fff1184 	.long	0x1fff1184
11027060:	1fff14ac 	.long	0x1fff14ac

11027064 <adv_scan_schd_adv_scan_exit>:

    return (HCI_SUCCESS);
}

static int adv_scan_schd_adv_scan_exit(adv_scan_schd_state_en st)
{
11027064:	14d1      	push      	r4, r15
    int ret;
    SCHD_LOGD("adv scan on exit\n");

    if (st == SCHD_ADV || st == SCHD_SCAN || st == SCHD_ADV_SCAN) {
11027066:	2800      	subi      	r0, 1
11027068:	3802      	cmphsi      	r0, 3
1102706a:	0830      	bt      	0x110270ca	// 110270ca <adv_scan_schd_adv_scan_exit+0x66>
        adv_scan_schd.flag = FLAG_STOP;
1102706c:	1099      	lrw      	r4, 0x1fffb98c	// 110270d0 <adv_scan_schd_adv_scan_exit+0x6c>
1102706e:	3302      	movi      	r3, 2
        k_timer_stop(&adv_scan_schd.timer);
11027070:	e404002f 	addi      	r0, r4, 48
        adv_scan_schd.flag = FLAG_STOP;
11027074:	dc640084 	st.b      	r3, (r4, 0x84)
        k_timer_stop(&adv_scan_schd.timer);
11027078:	e3ffde91 	bsr      	0x11022d9a	// 11022d9a <k_timer_stop>

            if (adv_scan_schd.param.ext_scan)
1102707c:	d864008c 	ld.b      	r3, (r4, 0x8c)
11027080:	e4632002 	andi      	r3, r3, 2
11027084:	d824008d 	ld.b      	r1, (r4, 0x8d)
11027088:	3b40      	cmpnei      	r3, 0
1102708a:	0c17      	bf      	0x110270b8	// 110270b8 <adv_scan_schd_adv_scan_exit+0x54>
    status = LL_SetExtendedScanEnable(enable, filter_duplicates, duration, period);
1102708c:	d8641048 	ld.h      	r3, (r4, 0x90)
11027090:	d8441047 	ld.h      	r2, (r4, 0x8e)
11027094:	7444      	zextb      	r1, r1
11027096:	3000      	movi      	r0, 0
11027098:	e0000fe8 	bsr      	0x11029068	// 11029068 <cpu_task_stack_init+0x6c0>

        if (ret) {
            SCHD_LOGD("scan stop err %d\n", ret);
        }

        if (adv_scan_schd.param.ext_adv)
1102709c:	d864008c 	ld.b      	r3, (r4, 0x8c)
110270a0:	e4632001 	andi      	r3, r3, 1
110270a4:	3b40      	cmpnei      	r3, 0
110270a6:	0c0e      	bf      	0x110270c2	// 110270c2 <adv_scan_schd_adv_scan_exit+0x5e>
        {
            adv_scan_schd.param.ext_adv_enable[0] = 0;
110270a8:	3300      	movi      	r3, 0
            ret = hciLESetExtAdvEnable1(adv_scan_schd.param.ext_adv_enable);
110270aa:	100b      	lrw      	r0, 0x1fffba1e	// 110270d4 <adv_scan_schd_adv_scan_exit+0x70>
            adv_scan_schd.param.ext_adv_enable[0] = 0;
110270ac:	dc640092 	st.b      	r3, (r4, 0x92)
            ret = hciLESetExtAdvEnable1(adv_scan_schd.param.ext_adv_enable);
110270b0:	e3fffc74 	bsr      	0x11026998	// 11026998 <hciLESetExtAdvEnable1>

        if (ret) {
            SCHD_LOGD("adv stop err %d\n", ret);
        }

        return 0;
110270b4:	3000      	movi      	r0, 0
    }

    return -EINVAL;
}
110270b6:	1491      	pop      	r4, r15
                ret = HCI_LL_SetScanControl(0, adv_scan_schd.param.filterReports);
110270b8:	7444      	zextb      	r1, r1
110270ba:	3000      	movi      	r0, 0
110270bc:	e3ffff62 	bsr      	0x11026f80	// 11026f80 <HCI_LL_SetScanControl>
110270c0:	07ee      	br      	0x1102709c	// 1102709c <adv_scan_schd_adv_scan_exit+0x38>
            ret = HCI_LL_SetAdvControl(0);
110270c2:	3000      	movi      	r0, 0
110270c4:	e3ffff9c 	bsr      	0x11026ffc	// 11026ffc <HCI_LL_SetAdvControl>
110270c8:	07f6      	br      	0x110270b4	// 110270b4 <adv_scan_schd_adv_scan_exit+0x50>
    return -EINVAL;
110270ca:	3000      	movi      	r0, 0
110270cc:	2815      	subi      	r0, 22
110270ce:	07f4      	br      	0x110270b6	// 110270b6 <adv_scan_schd_adv_scan_exit+0x52>
110270d0:	1fffb98c 	.long	0x1fffb98c
110270d4:	1fffba1e 	.long	0x1fffba1e

110270d8 <HCI_LE_SetExtendedScanEnableCmd1>:
{
110270d8:	14d4      	push      	r4-r7, r15
110270da:	6d03      	mov      	r4, r0
    if (enable) {
110270dc:	3840      	cmpnei      	r0, 0
110270de:	0c0e      	bf      	0x110270fa	// 110270fa <HCI_LE_SetExtendedScanEnableCmd1+0x22>
        int ret = wait_llWaitingIrq(100);
110270e0:	3064      	movi      	r0, 100
110270e2:	6dcf      	mov      	r7, r3
110270e4:	6d8b      	mov      	r6, r2
110270e6:	6d47      	mov      	r5, r1
110270e8:	e3fffbc0 	bsr      	0x11026868	// 11026868 <wait_llWaitingIrq>
        if (ret) {
110270ec:	6c57      	mov      	r1, r5
110270ee:	3840      	cmpnei      	r0, 0
110270f0:	6c9b      	mov      	r2, r6
110270f2:	6cdf      	mov      	r3, r7
110270f4:	0c03      	bf      	0x110270fa	// 110270fa <HCI_LE_SetExtendedScanEnableCmd1+0x22>
            return ret;
110270f6:	7400      	zextb      	r0, r0
}
110270f8:	1494      	pop      	r4-r7, r15
    status = LL_SetExtendedScanEnable(enable, filter_duplicates, duration, period);
110270fa:	6c13      	mov      	r0, r4
110270fc:	e0000fb6 	bsr      	0x11029068	// 11029068 <cpu_task_stack_init+0x6c0>
    return (HCI_SUCCESS);
11027100:	3000      	movi      	r0, 0
11027102:	07fb      	br      	0x110270f8	// 110270f8 <HCI_LE_SetExtendedScanEnableCmd1+0x20>

11027104 <adv_scan_schd_scan_enter>:
{
11027104:	14d1      	push      	r4, r15
11027106:	1422      	subi      	r14, r14, 8
    if (st == SCHD_IDLE || st == SCHD_ADV_SCAN || st == SCHD_SCAN) {
11027108:	3840      	cmpnei      	r0, 0
1102710a:	0c04      	bf      	0x11027112	// 11027112 <adv_scan_schd_scan_enter+0xe>
1102710c:	2801      	subi      	r0, 2
1102710e:	3801      	cmphsi      	r0, 2
11027110:	0828      	bt      	0x11027160	// 11027160 <adv_scan_schd_scan_enter+0x5c>
            if (adv_scan_schd.param.ext_scan)
11027112:	1056      	lrw      	r2, 0x1fffb98c	// 11027168 <adv_scan_schd_scan_enter+0x64>
11027114:	d862008c 	ld.b      	r3, (r2, 0x8c)
11027118:	e4632002 	andi      	r3, r3, 2
1102711c:	d822008d 	ld.b      	r1, (r2, 0x8d)
11027120:	3b40      	cmpnei      	r3, 0
11027122:	0c0d      	bf      	0x1102713c	// 1102713c <adv_scan_schd_scan_enter+0x38>
                HCI_LE_SetExtendedScanEnableCmd1(1, adv_scan_schd.param.filterReports, adv_scan_schd.param.duration, adv_scan_schd.param.period);
11027124:	d8621048 	ld.h      	r3, (r2, 0x90)
11027128:	7444      	zextb      	r1, r1
1102712a:	d8421047 	ld.h      	r2, (r2, 0x8e)
1102712e:	3001      	movi      	r0, 1
        return 0;
11027130:	3400      	movi      	r4, 0
                HCI_LE_SetExtendedScanEnableCmd1(1, adv_scan_schd.param.filterReports, adv_scan_schd.param.duration, adv_scan_schd.param.period);
11027132:	e3ffffd3 	bsr      	0x110270d8	// 110270d8 <HCI_LE_SetExtendedScanEnableCmd1>
}
11027136:	6c13      	mov      	r0, r4
11027138:	1402      	addi      	r14, r14, 8
1102713a:	1491      	pop      	r4, r15
                ret = HCI_LL_SetScanControl(1, adv_scan_schd.param.filterReports);
1102713c:	7444      	zextb      	r1, r1
1102713e:	3001      	movi      	r0, 1
11027140:	e3ffff20 	bsr      	0x11026f80	// 11026f80 <HCI_LL_SetScanControl>
11027144:	6d03      	mov      	r4, r0
        if (ret) {
11027146:	3840      	cmpnei      	r0, 0
11027148:	0ff7      	bf      	0x11027136	// 11027136 <adv_scan_schd_scan_enter+0x32>
            SCHD_LOGE("scan start err %d\n", ret);
1102714a:	1069      	lrw      	r3, 0x11011f99	// 1102716c <adv_scan_schd_scan_enter+0x68>
1102714c:	1049      	lrw      	r2, 0x11011f6c	// 11027170 <adv_scan_schd_scan_enter+0x6c>
1102714e:	102a      	lrw      	r1, 0x11011f95	// 11027174 <adv_scan_schd_scan_enter+0x70>
11027150:	b801      	st.w      	r0, (r14, 0x4)
11027152:	b860      	st.w      	r3, (r14, 0x0)
11027154:	3003      	movi      	r0, 3
11027156:	ea030e0f 	movi      	r3, 3599
1102715a:	e3ffdca9 	bsr      	0x11022aac	// 11022aac <ulog>
            return ret;
1102715e:	07ec      	br      	0x11027136	// 11027136 <adv_scan_schd_scan_enter+0x32>
    return -EINVAL;
11027160:	3400      	movi      	r4, 0
11027162:	2c15      	subi      	r4, 22
11027164:	07e9      	br      	0x11027136	// 11027136 <adv_scan_schd_scan_enter+0x32>
11027166:	0000      	bkpt
11027168:	1fffb98c 	.long	0x1fffb98c
1102716c:	11011f99 	.long	0x11011f99
11027170:	11011f6c 	.long	0x11011f6c
11027174:	11011f95 	.long	0x11011f95

11027178 <adv_scan_timer>:

    return -EINVAL;
}

void adv_scan_timer(void *timer, void *arg)
{
11027178:	14d4      	push      	r4-r7, r15
1102717a:	1426      	subi      	r14, r14, 24
    } next_state = ADV;
    static int adv_time = 0;
    static int negative_flag = 0;
    uint8_t random_delay = 0;
    uint32_t next_time = 0;
    k_mutex_lock(&adv_scan_schd.mutex, K_FOREVER);
1102717c:	13b4      	lrw      	r5, 0x1fffb98c	// 1102734c <adv_scan_timer+0x1d4>
    uint8_t random_delay = 0;
1102717e:	3300      	movi      	r3, 0
    k_mutex_lock(&adv_scan_schd.mutex, K_FOREVER);
11027180:	6c17      	mov      	r0, r5
    uint8_t random_delay = 0;
11027182:	dc6e0017 	st.b      	r3, (r14, 0x17)
    k_mutex_lock(&adv_scan_schd.mutex, K_FOREVER);
11027186:	3100      	movi      	r1, 0
11027188:	2900      	subi      	r1, 1
1102718a:	e3ffdda9 	bsr      	0x11022cdc	// 11022cdc <k_mutex_lock>

    if (adv_scan_schd.flag == FLAG_RESTART) {
1102718e:	d8650084 	ld.b      	r3, (r5, 0x84)
11027192:	6d17      	mov      	r4, r5
11027194:	3b41      	cmpnei      	r3, 1
11027196:	0845      	bt      	0x11027220	// 11027220 <adv_scan_timer+0xa8>
        next_state = ADV;
11027198:	136e      	lrw      	r3, 0x1fffba40	// 11027350 <adv_scan_timer+0x1d8>
1102719a:	3200      	movi      	r2, 0
1102719c:	b340      	st.w      	r2, (r3, 0x0)
        adv_scan_schd.flag = 0;
1102719e:	3300      	movi      	r3, 0
110271a0:	dc650084 	st.b      	r3, (r5, 0x84)
        return;
    }

    SCHD_LOGD("adv_time %d, next_state %d, flag %d\n", adv_time, next_state, adv_scan_schd.flag);
    //gpio_write(P11, 1);
    if (next_state == ADV) {
110271a4:	13cb      	lrw      	r6, 0x1fffba40	// 11027350 <adv_scan_timer+0x1d8>
110271a6:	9660      	ld.w      	r3, (r6, 0x0)
110271a8:	3b40      	cmpnei      	r3, 0
110271aa:	084f      	bt      	0x11027248	// 11027248 <adv_scan_timer+0xd0>
            if (adv_scan_schd.param.ext_scan)
110271ac:	d864008c 	ld.b      	r3, (r4, 0x8c)
110271b0:	e4632002 	andi      	r3, r3, 2
110271b4:	d824008d 	ld.b      	r1, (r4, 0x8d)
110271b8:	3b40      	cmpnei      	r3, 0
110271ba:	0c3a      	bf      	0x1102722e	// 1102722e <adv_scan_timer+0xb6>
    status = LL_SetExtendedScanEnable(enable, filter_duplicates, duration, period);
110271bc:	d8641048 	ld.h      	r3, (r4, 0x90)
110271c0:	d8441047 	ld.h      	r2, (r4, 0x8e)
110271c4:	7444      	zextb      	r1, r1
110271c6:	3000      	movi      	r0, 0
110271c8:	e0000f50 	bsr      	0x11029068	// 11029068 <cpu_task_stack_init+0x6c0>

        if (ret) {
            SCHD_LOGD("scan stop err %d\n", ret);
        }

        if (adv_scan_schd.param.ext_adv)
110271cc:	d864008c 	ld.b      	r3, (r4, 0x8c)
110271d0:	e4632001 	andi      	r3, r3, 1
110271d4:	3b40      	cmpnei      	r3, 0
110271d6:	0c31      	bf      	0x11027238	// 11027238 <adv_scan_timer+0xc0>
        {
            adv_scan_schd.param.ext_adv_enable[0] = 1;
110271d8:	3301      	movi      	r3, 1
            ret = hciLESetExtAdvEnable1(adv_scan_schd.param.ext_adv_enable);
110271da:	121f      	lrw      	r0, 0x1fffba1e	// 11027354 <adv_scan_timer+0x1dc>
            adv_scan_schd.param.ext_adv_enable[0] = 1;
110271dc:	dc640092 	st.b      	r3, (r4, 0x92)
            ret = hciLESetExtAdvEnable1(adv_scan_schd.param.ext_adv_enable);
110271e0:	e3fffbdc 	bsr      	0x11026998	// 11026998 <hciLESetExtAdvEnable1>
        else
        {
            ret = HCI_LL_SetAdvControl(1);
        }

        if (ret) {
110271e4:	3840      	cmpnei      	r0, 0
110271e6:	0c0b      	bf      	0x110271fc	// 110271fc <adv_scan_timer+0x84>
            SCHD_LOGE("adv start err %d\n", ret);
110271e8:	127c      	lrw      	r3, 0x11011fac	// 11027358 <adv_scan_timer+0x1e0>
110271ea:	125d      	lrw      	r2, 0x11011f6c	// 1102735c <adv_scan_timer+0x1e4>
110271ec:	123d      	lrw      	r1, 0x11011f95	// 11027360 <adv_scan_timer+0x1e8>
110271ee:	b801      	st.w      	r0, (r14, 0x4)
110271f0:	b860      	st.w      	r3, (r14, 0x0)
110271f2:	3003      	movi      	r0, 3
110271f4:	ea030ee3 	movi      	r3, 3811
110271f8:	e3ffdc5a 	bsr      	0x11022aac	// 11022aac <ulog>
        }

        if (adv_scan_schd.cur_st == SCHD_ADV_SCAN) {
110271fc:	d8642022 	ld.w      	r3, (r4, 0x88)
11027200:	3b43      	cmpnei      	r3, 3
11027202:	081f      	bt      	0x11027240	// 11027240 <adv_scan_timer+0xc8>
            next_state = SCAN;
11027204:	3301      	movi      	r3, 1
        } else if (adv_scan_schd.cur_st == SCHD_ADV) {
            next_state = ADV_IDLE;
11027206:	b660      	st.w      	r3, (r6, 0x0)
        }

        adv_time = NOCONN_ADV_DATA_TIEMOUT;
11027208:	1277      	lrw      	r3, 0x1fffba38	// 11027364 <adv_scan_timer+0x1ec>
1102720a:	3205      	movi      	r2, 5
        next_time = adv_time;
1102720c:	3505      	movi      	r5, 5
        adv_time = NOCONN_ADV_DATA_TIEMOUT;
1102720e:	b340      	st.w      	r2, (r3, 0x0)

        adv_time = 0;
        next_state = ADV;
    }

    k_mutex_unlock(&adv_scan_schd.mutex);
11027210:	120f      	lrw      	r0, 0x1fffb98c	// 1102734c <adv_scan_timer+0x1d4>
11027212:	e3ffdd7a 	bsr      	0x11022d06	// 11022d06 <k_mutex_unlock>
   // gpio_write(P11, 0);
    k_timer_start(&adv_scan_schd.timer, next_time);
11027216:	6c57      	mov      	r1, r5
11027218:	1214      	lrw      	r0, 0x1fffb9bc	// 11027368 <adv_scan_timer+0x1f0>
1102721a:	e3ffdda5 	bsr      	0x11022d64	// 11022d64 <k_timer_start>
1102721e:	0406      	br      	0x1102722a	// 1102722a <adv_scan_timer+0xb2>
    } else if (adv_scan_schd.flag == FLAG_STOP) {
11027220:	3b42      	cmpnei      	r3, 2
11027222:	0bc1      	bt      	0x110271a4	// 110271a4 <adv_scan_timer+0x2c>
        k_mutex_unlock(&adv_scan_schd.mutex);
11027224:	6c17      	mov      	r0, r5
11027226:	e3ffdd70 	bsr      	0x11022d06	// 11022d06 <k_mutex_unlock>
}
1102722a:	1406      	addi      	r14, r14, 24
1102722c:	1494      	pop      	r4-r7, r15
                ret = HCI_LL_SetScanControl(0, adv_scan_schd.param.filterReports);
1102722e:	7444      	zextb      	r1, r1
11027230:	3000      	movi      	r0, 0
11027232:	e3fffea7 	bsr      	0x11026f80	// 11026f80 <HCI_LL_SetScanControl>
11027236:	07cb      	br      	0x110271cc	// 110271cc <adv_scan_timer+0x54>
            ret = HCI_LL_SetAdvControl(1);
11027238:	3001      	movi      	r0, 1
1102723a:	e3fffee1 	bsr      	0x11026ffc	// 11026ffc <HCI_LL_SetAdvControl>
1102723e:	07d3      	br      	0x110271e4	// 110271e4 <adv_scan_timer+0x6c>
        } else if (adv_scan_schd.cur_st == SCHD_ADV) {
11027240:	3b41      	cmpnei      	r3, 1
11027242:	0be3      	bt      	0x11027208	// 11027208 <adv_scan_timer+0x90>
            next_state = ADV_IDLE;
11027244:	3302      	movi      	r3, 2
11027246:	07e0      	br      	0x11027206	// 11027206 <adv_scan_timer+0x8e>
    } else if (next_state == SCAN) {
11027248:	3b41      	cmpnei      	r3, 1
1102724a:	0864      	bt      	0x11027312	// 11027312 <adv_scan_timer+0x19a>
        if (adv_scan_schd.param.ext_adv)
1102724c:	d864008c 	ld.b      	r3, (r4, 0x8c)
11027250:	e4632001 	andi      	r3, r3, 1
11027254:	3b40      	cmpnei      	r3, 0
11027256:	0c50      	bf      	0x110272f6	// 110272f6 <adv_scan_timer+0x17e>
            adv_scan_schd.param.ext_adv_enable[0] = 0;
11027258:	3300      	movi      	r3, 0
            ret = hciLESetExtAdvEnable1(adv_scan_schd.param.ext_adv_enable);
1102725a:	111f      	lrw      	r0, 0x1fffba1e	// 11027354 <adv_scan_timer+0x1dc>
            adv_scan_schd.param.ext_adv_enable[0] = 0;
1102725c:	dc640092 	st.b      	r3, (r4, 0x92)
            ret = hciLESetExtAdvEnable1(adv_scan_schd.param.ext_adv_enable);
11027260:	e3fffb9c 	bsr      	0x11026998	// 11026998 <hciLESetExtAdvEnable1>
		bt_rand(&random_delay, 1);
11027264:	3101      	movi      	r1, 1
            ret = HCI_LL_SetAdvControl(0);
11027266:	6dc3      	mov      	r7, r0
		bt_rand(&random_delay, 1);
11027268:	e40e0016 	addi      	r0, r14, 23
1102726c:	e3ffdd26 	bsr      	0x11022cb8	// 11022cb8 <bt_rand>
		random_delay = random_delay % 5;
11027270:	d80e0017 	ld.b      	r0, (r14, 0x17)
11027274:	3105      	movi      	r1, 5
11027276:	e3ffa411 	bsr      	0x1101ba98	// 1101ba98 <__umodsi3>
	    if(random_delay <= 3) {
1102727a:	7400      	zextb      	r0, r0
		random_delay = random_delay % 5;
1102727c:	3844      	cmpnei      	r0, 4
1102727e:	64c3      	mvcv      	r3
11027280:	2302      	addi      	r3, 3
11027282:	dc6e0017 	st.b      	r3, (r14, 0x17)
        if(negative_flag) {
11027286:	117a      	lrw      	r3, 0x1fffba3c	// 1102736c <adv_scan_timer+0x1f4>
11027288:	9340      	ld.w      	r2, (r3, 0x0)
1102728a:	3a40      	cmpnei      	r2, 0
1102728c:	0c39      	bf      	0x110272fe	// 110272fe <adv_scan_timer+0x186>
           next_time = CONFIG_ADV_INTERVAL_TIMER - NOCONN_ADV_DATA_TIEMOUT - random_delay;
1102728e:	d82e0017 	ld.b      	r1, (r14, 0x17)
11027292:	350f      	movi      	r5, 15
11027294:	6146      	subu      	r5, r1
		negative_flag = !negative_flag;
11027296:	3a40      	cmpnei      	r2, 0
11027298:	6483      	mvcv      	r2
        if (next_time > CONFIG_ADV_SCAN_INTERVAL_TIMER) {
1102729a:	3d01      	cmphsi      	r5, 2
		negative_flag = !negative_flag;
1102729c:	b340      	st.w      	r2, (r3, 0x0)
        if (next_time > CONFIG_ADV_SCAN_INTERVAL_TIMER) {
1102729e:	0c26      	bf      	0x110272ea	// 110272ea <adv_scan_timer+0x172>
            if (adv_scan_schd.param.ext_scan)
110272a0:	d864008c 	ld.b      	r3, (r4, 0x8c)
110272a4:	e4632002 	andi      	r3, r3, 2
110272a8:	d824008d 	ld.b      	r1, (r4, 0x8d)
110272ac:	3b40      	cmpnei      	r3, 0
110272ae:	0c2c      	bf      	0x11027306	// 11027306 <adv_scan_timer+0x18e>
                HCI_LE_SetExtendedScanEnableCmd1(1, adv_scan_schd.param.filterReports, adv_scan_schd.param.duration, adv_scan_schd.param.period);
110272b0:	d8641048 	ld.h      	r3, (r4, 0x90)
110272b4:	d8441047 	ld.h      	r2, (r4, 0x8e)
110272b8:	7444      	zextb      	r1, r1
110272ba:	3001      	movi      	r0, 1
110272bc:	e3ffff0e 	bsr      	0x110270d8	// 110270d8 <HCI_LE_SetExtendedScanEnableCmd1>
            if (ret) {
110272c0:	3f40      	cmpnei      	r7, 0
110272c2:	0c14      	bf      	0x110272ea	// 110272ea <adv_scan_timer+0x172>
                SCHD_LOGE("%d,%d,%d,%d\n", ret, llState, llSecondaryState, scanInfo.scanMode);
110272c4:	116b      	lrw      	r3, 0x1fff1494	// 11027370 <adv_scan_timer+0x1f8>
110272c6:	1146      	lrw      	r2, 0x11011f6c	// 1102735c <adv_scan_timer+0x1e4>
110272c8:	8368      	ld.b      	r3, (r3, 0x8)
110272ca:	b864      	st.w      	r3, (r14, 0x10)
110272cc:	3003      	movi      	r0, 3
110272ce:	116a      	lrw      	r3, 0x1fff1184	// 11027374 <adv_scan_timer+0x1fc>
110272d0:	1124      	lrw      	r1, 0x11011f95	// 11027360 <adv_scan_timer+0x1e8>
110272d2:	8360      	ld.b      	r3, (r3, 0x0)
110272d4:	b863      	st.w      	r3, (r14, 0xc)
110272d6:	1169      	lrw      	r3, 0x1fff117d	// 11027378 <adv_scan_timer+0x200>
110272d8:	8360      	ld.b      	r3, (r3, 0x0)
110272da:	b862      	st.w      	r3, (r14, 0x8)
110272dc:	b8e1      	st.w      	r7, (r14, 0x4)
110272de:	1168      	lrw      	r3, 0x11011fbe	// 1102737c <adv_scan_timer+0x204>
110272e0:	b860      	st.w      	r3, (r14, 0x0)
110272e2:	ea030f17 	movi      	r3, 3863
110272e6:	e3ffdbe3 	bsr      	0x11022aac	// 11022aac <ulog>
        adv_time = 0;
110272ea:	107f      	lrw      	r3, 0x1fffba38	// 11027364 <adv_scan_timer+0x1ec>
110272ec:	3200      	movi      	r2, 0
110272ee:	b340      	st.w      	r2, (r3, 0x0)
        next_state = ADV;
110272f0:	3300      	movi      	r3, 0
        next_state = ADV;
110272f2:	b660      	st.w      	r3, (r6, 0x0)
110272f4:	078e      	br      	0x11027210	// 11027210 <adv_scan_timer+0x98>
            ret = HCI_LL_SetAdvControl(0);
110272f6:	3000      	movi      	r0, 0
110272f8:	e3fffe82 	bsr      	0x11026ffc	// 11026ffc <HCI_LL_SetAdvControl>
110272fc:	07b4      	br      	0x11027264	// 11027264 <adv_scan_timer+0xec>
           next_time = CONFIG_ADV_INTERVAL_TIMER - NOCONN_ADV_DATA_TIEMOUT + random_delay;
110272fe:	d8ae0017 	ld.b      	r5, (r14, 0x17)
11027302:	250e      	addi      	r5, 15
11027304:	07c9      	br      	0x11027296	// 11027296 <adv_scan_timer+0x11e>
                ret = HCI_LL_SetScanControl(1, adv_scan_schd.param.filterReports);
11027306:	7444      	zextb      	r1, r1
11027308:	3001      	movi      	r0, 1
1102730a:	e3fffe3b 	bsr      	0x11026f80	// 11026f80 <HCI_LL_SetScanControl>
1102730e:	6dc3      	mov      	r7, r0
11027310:	07d8      	br      	0x110272c0	// 110272c0 <adv_scan_timer+0x148>
    } else if (next_state == ADV_IDLE) {
11027312:	3b42      	cmpnei      	r3, 2
11027314:	0819      	bt      	0x11027346	// 11027346 <adv_scan_timer+0x1ce>
        next_time = CONFIG_ADV_INTERVAL_TIMER - adv_time;
11027316:	1074      	lrw      	r3, 0x1fffba38	// 11027364 <adv_scan_timer+0x1ec>
11027318:	3514      	movi      	r5, 20
1102731a:	9340      	ld.w      	r2, (r3, 0x0)
1102731c:	614a      	subu      	r5, r2
        if (adv_scan_schd.param.ext_adv)
1102731e:	d844008c 	ld.b      	r2, (r4, 0x8c)
11027322:	e4422001 	andi      	r2, r2, 1
11027326:	6dcf      	mov      	r7, r3
11027328:	3a40      	cmpnei      	r2, 0
1102732a:	0c0a      	bf      	0x1102733e	// 1102733e <adv_scan_timer+0x1c6>
            adv_scan_schd.param.ext_adv_enable[0] = 0;
1102732c:	3300      	movi      	r3, 0
            ret = hciLESetExtAdvEnable1(adv_scan_schd.param.ext_adv_enable);
1102732e:	100a      	lrw      	r0, 0x1fffba1e	// 11027354 <adv_scan_timer+0x1dc>
            adv_scan_schd.param.ext_adv_enable[0] = 0;
11027330:	dc640092 	st.b      	r3, (r4, 0x92)
            ret = hciLESetExtAdvEnable1(adv_scan_schd.param.ext_adv_enable);
11027334:	e3fffb32 	bsr      	0x11026998	// 11026998 <hciLESetExtAdvEnable1>
        adv_time = 0;
11027338:	3300      	movi      	r3, 0
1102733a:	b760      	st.w      	r3, (r7, 0x0)
1102733c:	07db      	br      	0x110272f2	// 110272f2 <adv_scan_timer+0x17a>
            ret = HCI_LL_SetAdvControl(0);
1102733e:	3000      	movi      	r0, 0
11027340:	e3fffe5e 	bsr      	0x11026ffc	// 11026ffc <HCI_LL_SetAdvControl>
11027344:	07fa      	br      	0x11027338	// 11027338 <adv_scan_timer+0x1c0>
    uint32_t next_time = 0;
11027346:	3500      	movi      	r5, 0
11027348:	0764      	br      	0x11027210	// 11027210 <adv_scan_timer+0x98>
1102734a:	0000      	bkpt
1102734c:	1fffb98c 	.long	0x1fffb98c
11027350:	1fffba40 	.long	0x1fffba40
11027354:	1fffba1e 	.long	0x1fffba1e
11027358:	11011fac 	.long	0x11011fac
1102735c:	11011f6c 	.long	0x11011f6c
11027360:	11011f95 	.long	0x11011f95
11027364:	1fffba38 	.long	0x1fffba38
11027368:	1fffb9bc 	.long	0x1fffb9bc
1102736c:	1fffba3c 	.long	0x1fffba3c
11027370:	1fff1494 	.long	0x1fff1494
11027374:	1fff1184 	.long	0x1fff1184
11027378:	1fff117d 	.long	0x1fff117d
1102737c:	11011fbe 	.long	0x11011fbe

11027380 <bt_mesh_adv_scan_schd>:
{
11027380:	14d3      	push      	r4-r6, r15
11027382:	6d03      	mov      	r4, r0
    if (st < SCHD_INVAILD) {
11027384:	3803      	cmphsi      	r0, 4
11027386:	0817      	bt      	0x110273b4	// 110273b4 <bt_mesh_adv_scan_schd+0x34>
        ret = adv_scan_schd_funcs[adv_scan_schd.cur_st].exit(st);
11027388:	10cd      	lrw      	r6, 0x1fffb98c	// 110273bc <bt_mesh_adv_scan_schd+0x3c>
1102738a:	10ae      	lrw      	r5, 0x1fffa5dc	// 110273c0 <bt_mesh_adv_scan_schd+0x40>
1102738c:	d8662022 	ld.w      	r3, (r6, 0x88)
11027390:	4363      	lsli      	r3, r3, 3
11027392:	60d4      	addu      	r3, r5
11027394:	9361      	ld.w      	r3, (r3, 0x4)
11027396:	7bcd      	jsr      	r3
        if (ret) {
11027398:	3840      	cmpnei      	r0, 0
1102739a:	080c      	bt      	0x110273b2	// 110273b2 <bt_mesh_adv_scan_schd+0x32>
        adv_scan_schd.cur_st = SCHD_IDLE;
1102739c:	3300      	movi      	r3, 0
1102739e:	dc662022 	st.w      	r3, (r6, 0x88)
        ret = adv_scan_schd_funcs[st].enter(adv_scan_schd.cur_st);
110273a2:	4463      	lsli      	r3, r4, 3
110273a4:	614c      	addu      	r5, r3
110273a6:	9560      	ld.w      	r3, (r5, 0x0)
110273a8:	7bcd      	jsr      	r3
        if (ret) {
110273aa:	3840      	cmpnei      	r0, 0
110273ac:	0803      	bt      	0x110273b2	// 110273b2 <bt_mesh_adv_scan_schd+0x32>
        adv_scan_schd.cur_st = st;
110273ae:	dc862022 	st.w      	r4, (r6, 0x88)
}
110273b2:	1493      	pop      	r4-r6, r15
    return -EINVAL;
110273b4:	3000      	movi      	r0, 0
110273b6:	2815      	subi      	r0, 22
110273b8:	07fd      	br      	0x110273b2	// 110273b2 <bt_mesh_adv_scan_schd+0x32>
110273ba:	0000      	bkpt
110273bc:	1fffb98c 	.long	0x1fffb98c
110273c0:	1fffa5dc 	.long	0x1fffa5dc

110273c4 <bt_mesh_adv_scan_schd_action>:
{
110273c4:	14d4      	push      	r4-r7, r15
110273c6:	1426      	subi      	r14, r14, 24
110273c8:	6d43      	mov      	r5, r0
    if (action < ACTION_INVAILD) {
110273ca:	3803      	cmphsi      	r0, 4
110273cc:	082e      	bt      	0x11027428	// 11027428 <bt_mesh_adv_scan_schd_action+0x64>
        adv_scan_schd_state_en cur_st = adv_scan_schd.cur_st;
110273ce:	10d9      	lrw      	r6, 0x1fffb98c	// 11027430 <bt_mesh_adv_scan_schd_action+0x6c>
        k_mutex_lock(&adv_scan_schd.mutex, K_FOREVER);
110273d0:	3100      	movi      	r1, 0
        adv_scan_schd_state_en cur_st = adv_scan_schd.cur_st;
110273d2:	d8462022 	ld.w      	r2, (r6, 0x88)
        adv_scan_schd_state_en target_st = adv_scan_schd_st_change_map[cur_st][action];
110273d6:	4262      	lsli      	r3, r2, 2
110273d8:	b845      	st.w      	r2, (r14, 0x14)
110273da:	60c0      	addu      	r3, r0
110273dc:	1056      	lrw      	r2, 0x1fffa5fc	// 11027434 <bt_mesh_adv_scan_schd_action+0x70>
110273de:	4362      	lsli      	r3, r3, 2
        k_mutex_lock(&adv_scan_schd.mutex, K_FOREVER);
110273e0:	6c1b      	mov      	r0, r6
        adv_scan_schd_state_en target_st = adv_scan_schd_st_change_map[cur_st][action];
110273e2:	60c8      	addu      	r3, r2
110273e4:	93e0      	ld.w      	r7, (r3, 0x0)
        k_mutex_lock(&adv_scan_schd.mutex, K_FOREVER);
110273e6:	2900      	subi      	r1, 1
110273e8:	e3ffdc7a 	bsr      	0x11022cdc	// 11022cdc <k_mutex_lock>
        ret = bt_mesh_adv_scan_schd(target_st);
110273ec:	6c1f      	mov      	r0, r7
110273ee:	e3ffffc9 	bsr      	0x11027380	// 11027380 <bt_mesh_adv_scan_schd>
110273f2:	6d03      	mov      	r4, r0
        k_mutex_unlock(&adv_scan_schd.mutex);
110273f4:	6c1b      	mov      	r0, r6
110273f6:	e3ffdc88 	bsr      	0x11022d06	// 11022d06 <k_mutex_unlock>
        if (ret && ret != -EALREADY) {
110273fa:	3c40      	cmpnei      	r4, 0
110273fc:	0c13      	bf      	0x11027422	// 11027422 <bt_mesh_adv_scan_schd_action+0x5e>
110273fe:	3300      	movi      	r3, 0
11027400:	2b71      	subi      	r3, 114
11027402:	64d2      	cmpne      	r4, r3
11027404:	0c0f      	bf      	0x11027422	// 11027422 <bt_mesh_adv_scan_schd_action+0x5e>
            SCHD_LOGE("action %d, cur_st %d target_st %d, ret %d\n", action, cur_st, target_st, ret);
11027406:	9845      	ld.w      	r2, (r14, 0x14)
11027408:	b884      	st.w      	r4, (r14, 0x10)
1102740a:	b842      	st.w      	r2, (r14, 0x8)
1102740c:	b8e3      	st.w      	r7, (r14, 0xc)
1102740e:	b8a1      	st.w      	r5, (r14, 0x4)
11027410:	3003      	movi      	r0, 3
11027412:	106a      	lrw      	r3, 0x11011fcb	// 11027438 <bt_mesh_adv_scan_schd_action+0x74>
11027414:	104a      	lrw      	r2, 0x11011f6c	// 1102743c <bt_mesh_adv_scan_schd_action+0x78>
11027416:	102b      	lrw      	r1, 0x11011f95	// 11027440 <bt_mesh_adv_scan_schd_action+0x7c>
11027418:	b860      	st.w      	r3, (r14, 0x0)
1102741a:	ea030ea9 	movi      	r3, 3753
1102741e:	e3ffdb47 	bsr      	0x11022aac	// 11022aac <ulog>
}
11027422:	6c13      	mov      	r0, r4
11027424:	1406      	addi      	r14, r14, 24
11027426:	1494      	pop      	r4-r7, r15
    return -EINVAL;
11027428:	3400      	movi      	r4, 0
1102742a:	2c15      	subi      	r4, 22
1102742c:	07fb      	br      	0x11027422	// 11027422 <bt_mesh_adv_scan_schd_action+0x5e>
1102742e:	0000      	bkpt
11027430:	1fffb98c 	.long	0x1fffb98c
11027434:	1fffa5fc 	.long	0x1fffa5fc
11027438:	11011fcb 	.long	0x11011fcb
1102743c:	11011f6c 	.long	0x11011f6c
11027440:	11011f95 	.long	0x11011f95

11027444 <hciLESetExtAdvEnable>:
    k_mutex_init(&adv_scan_schd.mutex);
    return 0;
}

hciStatus_t hciLESetExtAdvEnable(uint8 *pBuf)
{
11027444:	14d4      	push      	r4-r7, r15
11027446:	1421      	subi      	r14, r14, 4
    hciStatus_t status = HCI_SUCCESS;
11027448:	3300      	movi      	r3, 0
    uint8 number_of_sets = pBuf[1];
1102744a:	80a1      	ld.b      	r5, (r0, 0x1)
    hciStatus_t status = HCI_SUCCESS;
1102744c:	dc6e0003 	st.b      	r3, (r14, 0x3)

    if (number_of_sets > LL_MAX_ADV_SET || number_of_sets == 0) {
11027450:	5d63      	subi      	r3, r5, 1
11027452:	74cc      	zextb      	r3, r3
{
11027454:	6d83      	mov      	r6, r0
    if (number_of_sets > LL_MAX_ADV_SET || number_of_sets == 0) {
11027456:	3b05      	cmphsi      	r3, 6
11027458:	0838      	bt      	0x110274c8	// 110274c8 <hciLESetExtAdvEnable+0x84>
        return 0x12;
    }

    k_mutex_lock(&adv_scan_schd.mutex, K_FOREVER);
1102745a:	109d      	lrw      	r4, 0x1fffb98c	// 110274cc <hciLESetExtAdvEnable+0x88>
1102745c:	6c13      	mov      	r0, r4

    adv_scan_schd.param.ext_adv = 1;
1102745e:	3701      	movi      	r7, 1
    k_mutex_lock(&adv_scan_schd.mutex, K_FOREVER);
11027460:	3100      	movi      	r1, 0
11027462:	2900      	subi      	r1, 1
11027464:	e3ffdc3c 	bsr      	0x11022cdc	// 11022cdc <k_mutex_lock>
    adv_scan_schd.param.ext_adv = 1;
11027468:	d864008c 	ld.b      	r3, (r4, 0x8c)
1102746c:	6cdc      	or      	r3, r7
1102746e:	dc64008c 	st.b      	r3, (r4, 0x8c)
    adv_scan_schd.param.adv_on = pBuf[0];
    memcpy(adv_scan_schd.param.ext_adv_enable, pBuf, 2 + number_of_sets * 4);
11027472:	6c5b      	mov      	r1, r6
    adv_scan_schd.param.adv_on = pBuf[0];
11027474:	8660      	ld.b      	r3, (r6, 0x0)
11027476:	68dc      	and      	r3, r7
11027478:	4343      	lsli      	r2, r3, 3
1102747a:	d864008c 	ld.b      	r3, (r4, 0x8c)
1102747e:	3b83      	bclri      	r3, 3
11027480:	6cc8      	or      	r3, r2
11027482:	dc64008c 	st.b      	r3, (r4, 0x8c)
    memcpy(adv_scan_schd.param.ext_adv_enable, pBuf, 2 + number_of_sets * 4);
11027486:	4542      	lsli      	r2, r5, 2
11027488:	e4040091 	addi      	r0, r4, 146
1102748c:	2201      	addi      	r2, 2
1102748e:	e0000d99 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>


    adv_scan_schd.param.adv_on = pBuf[0];
11027492:	8660      	ld.b      	r3, (r6, 0x0)
11027494:	69cc      	and      	r7, r3
11027496:	4763      	lsli      	r3, r7, 3
11027498:	d8e4008c 	ld.b      	r7, (r4, 0x8c)
    k_mutex_unlock(&adv_scan_schd.mutex);
1102749c:	6c13      	mov      	r0, r4
    adv_scan_schd.param.adv_on = pBuf[0];
1102749e:	3f83      	bclri      	r7, 3
110274a0:	6dcc      	or      	r7, r3
110274a2:	dce4008c 	st.b      	r7, (r4, 0x8c)
    k_mutex_unlock(&adv_scan_schd.mutex);
110274a6:	e3ffdc30 	bsr      	0x11022d06	// 11022d06 <k_mutex_unlock>
    bt_mesh_adv_scan_schd_action(pBuf[0] ? ADV_ON : ADV_OFF);
110274aa:	8660      	ld.b      	r3, (r6, 0x0)
110274ac:	3b40      	cmpnei      	r3, 0
110274ae:	6403      	mvcv      	r0
110274b0:	e3ffff8a 	bsr      	0x110273c4	// 110273c4 <bt_mesh_adv_scan_schd_action>

    HCI_CommandCompleteEvent1(HCI_LE_Set_EXTENDED_ADVERTISING_ENABLE, sizeof(status), &status);
110274b4:	ea002039 	movi      	r0, 8249
110274b8:	3101      	movi      	r1, 1
110274ba:	e44e0002 	addi      	r2, r14, 3
110274be:	e3fffab1 	bsr      	0x11026a20	// 11026a20 <HCI_CommandCompleteEvent1>

    return (HCI_SUCCESS);
110274c2:	3000      	movi      	r0, 0
}
110274c4:	1401      	addi      	r14, r14, 4
110274c6:	1494      	pop      	r4-r7, r15
        return 0x12;
110274c8:	3012      	movi      	r0, 18
110274ca:	07fd      	br      	0x110274c4	// 110274c4 <hciLESetExtAdvEnable+0x80>
110274cc:	1fffb98c 	.long	0x1fffb98c

110274d0 <hciLESetExtendedScanEnableCmd>:

hciStatus_t hciLESetExtendedScanEnableCmd(uint8 *pBuf)
{
110274d0:	14d2      	push      	r4-r5, r15
110274d2:	1421      	subi      	r14, r14, 4
    hciStatus_t status = HCI_SUCCESS;

    SCHD_LOGD("bt_mesh_scan_disable\n");
    k_mutex_lock(&adv_scan_schd.mutex, K_FOREVER);
110274d4:	1180      	lrw      	r4, 0x1fffb98c	// 11027554 <hciLESetExtendedScanEnableCmd+0x84>
{
110274d6:	6d43      	mov      	r5, r0
    hciStatus_t status = HCI_SUCCESS;
110274d8:	3300      	movi      	r3, 0
    k_mutex_lock(&adv_scan_schd.mutex, K_FOREVER);
110274da:	6c13      	mov      	r0, r4
    hciStatus_t status = HCI_SUCCESS;
110274dc:	dc6e0003 	st.b      	r3, (r14, 0x3)
    k_mutex_lock(&adv_scan_schd.mutex, K_FOREVER);
110274e0:	3100      	movi      	r1, 0
110274e2:	2900      	subi      	r1, 1
110274e4:	e3ffdbfc 	bsr      	0x11022cdc	// 11022cdc <k_mutex_lock>
    adv_scan_schd.param.ext_scan = 1;
110274e8:	d864008c 	ld.b      	r3, (r4, 0x8c)
110274ec:	ec630002 	ori      	r3, r3, 2
110274f0:	dc64008c 	st.b      	r3, (r4, 0x8c)
    adv_scan_schd.param.scan_on = pBuf[0];
    adv_scan_schd.param.filterReports = pBuf[1];
    adv_scan_schd.param.duration = BUILD_UINT16(pBuf[2], pBuf[3]);
    adv_scan_schd.param.period = BUILD_UINT16(pBuf[4], pBuf[5]);

    k_mutex_unlock(&adv_scan_schd.mutex);
110274f4:	6c13      	mov      	r0, r4
    adv_scan_schd.param.scan_on = pBuf[0];
110274f6:	8560      	ld.b      	r3, (r5, 0x0)
110274f8:	e4632001 	andi      	r3, r3, 1
110274fc:	4342      	lsli      	r2, r3, 2
110274fe:	d864008c 	ld.b      	r3, (r4, 0x8c)
11027502:	3b82      	bclri      	r3, 2
11027504:	6cc8      	or      	r3, r2
11027506:	dc64008c 	st.b      	r3, (r4, 0x8c)
    adv_scan_schd.param.filterReports = pBuf[1];
1102750a:	8561      	ld.b      	r3, (r5, 0x1)
1102750c:	dc64008d 	st.b      	r3, (r4, 0x8d)
    adv_scan_schd.param.duration = BUILD_UINT16(pBuf[2], pBuf[3]);
11027510:	8563      	ld.b      	r3, (r5, 0x3)
11027512:	8542      	ld.b      	r2, (r5, 0x2)
11027514:	4368      	lsli      	r3, r3, 8
11027516:	60c8      	addu      	r3, r2
11027518:	dc641047 	st.h      	r3, (r4, 0x8e)
    adv_scan_schd.param.period = BUILD_UINT16(pBuf[4], pBuf[5]);
1102751c:	8565      	ld.b      	r3, (r5, 0x5)
1102751e:	8544      	ld.b      	r2, (r5, 0x4)
11027520:	4368      	lsli      	r3, r3, 8
11027522:	60c8      	addu      	r3, r2
11027524:	dc641048 	st.h      	r3, (r4, 0x90)
    k_mutex_unlock(&adv_scan_schd.mutex);
11027528:	e3ffdbef 	bsr      	0x11022d06	// 11022d06 <k_mutex_unlock>
    bt_mesh_adv_scan_schd_action(adv_scan_schd.param.scan_on ? SCAN_ON : SCAN_OFF);
1102752c:	d864008c 	ld.b      	r3, (r4, 0x8c)
11027530:	e4632004 	andi      	r3, r3, 4
11027534:	3b40      	cmpnei      	r3, 0
11027536:	6403      	mvcv      	r0
11027538:	2001      	addi      	r0, 2
1102753a:	e3ffff45 	bsr      	0x110273c4	// 110273c4 <bt_mesh_adv_scan_schd_action>

    HCI_CommandCompleteEvent1(HCI_LE_SET_EXTENDED_SCAN_ENABLE, sizeof(status), &status);
1102753e:	3101      	movi      	r1, 1
11027540:	ea002042 	movi      	r0, 8258
11027544:	e44e0002 	addi      	r2, r14, 3
11027548:	e3fffa6c 	bsr      	0x11026a20	// 11026a20 <HCI_CommandCompleteEvent1>

    return (HCI_SUCCESS);
}
1102754c:	3000      	movi      	r0, 0
1102754e:	1401      	addi      	r14, r14, 4
11027550:	1492      	pop      	r4-r5, r15
11027552:	0000      	bkpt
11027554:	1fffb98c 	.long	0x1fffb98c

11027558 <bt_mesh_adv_scan_schd_init>:
{
11027558:	14d1      	push      	r4, r15
    memset(&adv_scan_schd, 0, sizeof(adv_scan_schd));
1102755a:	1089      	lrw      	r4, 0x1fffb98c	// 1102757c <bt_mesh_adv_scan_schd_init+0x24>
1102755c:	32ac      	movi      	r2, 172
1102755e:	3100      	movi      	r1, 0
11027560:	6c13      	mov      	r0, r4
11027562:	e3ffad55 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
    k_timer_init(&adv_scan_schd.timer, adv_scan_timer,  &adv_scan_schd);
11027566:	6c93      	mov      	r2, r4
11027568:	1026      	lrw      	r1, 0x11027178	// 11027580 <bt_mesh_adv_scan_schd_init+0x28>
1102756a:	e404002f 	addi      	r0, r4, 48
1102756e:	e3ffdbdb 	bsr      	0x11022d24	// 11022d24 <k_timer_init>
    k_mutex_init(&adv_scan_schd.mutex);
11027572:	6c13      	mov      	r0, r4
11027574:	e3ffdba6 	bsr      	0x11022cc0	// 11022cc0 <k_mutex_init>
}
11027578:	3000      	movi      	r0, 0
1102757a:	1491      	pop      	r4, r15
1102757c:	1fffb98c 	.long	0x1fffb98c
11027580:	11027178 	.long	0x11027178

11027584 <bt_mesh_adv_enable>:

int bt_mesh_adv_enable()
{
11027584:	14d1      	push      	r4, r15
    adv_scan_schd.param.ext_adv = 0;
11027586:	108d      	lrw      	r4, 0x1fffb98c	// 110275b8 <bt_mesh_adv_enable+0x34>
    SCHD_LOGD("bt_mesh_scan_disable\n");
    k_mutex_lock(&adv_scan_schd.mutex, K_FOREVER);
11027588:	6c13      	mov      	r0, r4
    adv_scan_schd.param.ext_adv = 0;
1102758a:	d864008c 	ld.b      	r3, (r4, 0x8c)
1102758e:	3b80      	bclri      	r3, 0
11027590:	dc64008c 	st.b      	r3, (r4, 0x8c)
    k_mutex_lock(&adv_scan_schd.mutex, K_FOREVER);
11027594:	3100      	movi      	r1, 0
11027596:	2900      	subi      	r1, 1
11027598:	e3ffdba2 	bsr      	0x11022cdc	// 11022cdc <k_mutex_lock>
    adv_scan_schd.param.adv_on = 1;
1102759c:	d864008c 	ld.b      	r3, (r4, 0x8c)
    k_mutex_unlock(&adv_scan_schd.mutex);
110275a0:	6c13      	mov      	r0, r4
    adv_scan_schd.param.adv_on = 1;
110275a2:	ec630008 	ori      	r3, r3, 8
110275a6:	dc64008c 	st.b      	r3, (r4, 0x8c)
    k_mutex_unlock(&adv_scan_schd.mutex);
110275aa:	e3ffdbae 	bsr      	0x11022d06	// 11022d06 <k_mutex_unlock>
    bt_mesh_adv_scan_schd_action(ADV_ON);
110275ae:	3000      	movi      	r0, 0
110275b0:	e3ffff0a 	bsr      	0x110273c4	// 110273c4 <bt_mesh_adv_scan_schd_action>
    return 0;
}
110275b4:	3000      	movi      	r0, 0
110275b6:	1491      	pop      	r4, r15
110275b8:	1fffb98c 	.long	0x1fffb98c

110275bc <bt_mesh_adv_disable>:

int bt_mesh_adv_disable()
{
110275bc:	14d1      	push      	r4, r15
    adv_scan_schd.param.ext_adv = 0;
110275be:	108d      	lrw      	r4, 0x1fffb98c	// 110275f0 <bt_mesh_adv_disable+0x34>
    SCHD_LOGD("bt_mesh_scan_disable\n");
    k_mutex_lock(&adv_scan_schd.mutex, K_FOREVER);
110275c0:	6c13      	mov      	r0, r4
    adv_scan_schd.param.ext_adv = 0;
110275c2:	d864008c 	ld.b      	r3, (r4, 0x8c)
110275c6:	3b80      	bclri      	r3, 0
110275c8:	dc64008c 	st.b      	r3, (r4, 0x8c)
    k_mutex_lock(&adv_scan_schd.mutex, K_FOREVER);
110275cc:	3100      	movi      	r1, 0
110275ce:	2900      	subi      	r1, 1
110275d0:	e3ffdb86 	bsr      	0x11022cdc	// 11022cdc <k_mutex_lock>
    adv_scan_schd.param.adv_on = 0;
110275d4:	d864008c 	ld.b      	r3, (r4, 0x8c)
    k_mutex_unlock(&adv_scan_schd.mutex);
110275d8:	6c13      	mov      	r0, r4
    adv_scan_schd.param.adv_on = 0;
110275da:	3b83      	bclri      	r3, 3
110275dc:	dc64008c 	st.b      	r3, (r4, 0x8c)
    k_mutex_unlock(&adv_scan_schd.mutex);
110275e0:	e3ffdb93 	bsr      	0x11022d06	// 11022d06 <k_mutex_unlock>
    bt_mesh_adv_scan_schd_action(ADV_OFF);
110275e4:	3001      	movi      	r0, 1
110275e6:	e3fffeef 	bsr      	0x110273c4	// 110273c4 <bt_mesh_adv_scan_schd_action>
    return 0;
}
110275ea:	3000      	movi      	r0, 0
110275ec:	1491      	pop      	r4, r15
110275ee:	0000      	bkpt
110275f0:	1fffb98c 	.long	0x1fffb98c

110275f4 <hciLESetAdvEnab>:
{
110275f4:	14d1      	push      	r4, r15
110275f6:	1421      	subi      	r14, r14, 4
110275f8:	6d03      	mov      	r4, r0
    printf("a1%02d\n", pBuf[0]);
110275fa:	8020      	ld.b      	r1, (r0, 0x0)
110275fc:	1013      	lrw      	r0, 0x11012053	// 11027648 <hciLESetAdvEnab+0x54>
110275fe:	e3ffab5d 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
    if (llState == LL_STATE_INIT) {
11027602:	1073      	lrw      	r3, 0x1fff117d	// 1102764c <hciLESetAdvEnab+0x58>
11027604:	8360      	ld.b      	r3, (r3, 0x0)
11027606:	3b46      	cmpnei      	r3, 6
11027608:	0815      	bt      	0x11027632	// 11027632 <hciLESetAdvEnab+0x3e>
        printf("set adv enable not allowed\r\n");
1102760a:	1012      	lrw      	r0, 0x1101205b	// 11027650 <hciLESetAdvEnab+0x5c>
1102760c:	e3ffab56 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
        status = HCI_ERROR_CODE_CMD_DISALLOWED;
11027610:	330c      	movi      	r3, 12
11027612:	dc6e0003 	st.b      	r3, (r14, 0x3)
    HCI_CommandCompleteEvent1(HCI_LE_SET_ADV_ENABLE, sizeof(status), &status);
11027616:	3101      	movi      	r1, 1
11027618:	ea00200a 	movi      	r0, 8202
1102761c:	e44e0002 	addi      	r2, r14, 3
11027620:	e3fffa00 	bsr      	0x11026a20	// 11026a20 <HCI_CommandCompleteEvent1>
    printf("a2%02d\n", pBuf[0]);
11027624:	8420      	ld.b      	r1, (r4, 0x0)
11027626:	100c      	lrw      	r0, 0x11012078	// 11027654 <hciLESetAdvEnab+0x60>
11027628:	e3ffab48 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
}
1102762c:	3000      	movi      	r0, 0
1102762e:	1401      	addi      	r14, r14, 4
11027630:	1491      	pop      	r4, r15
        if (pBuf[0]) {
11027632:	8460      	ld.b      	r3, (r4, 0x0)
11027634:	3b40      	cmpnei      	r3, 0
11027636:	0c06      	bf      	0x11027642	// 11027642 <hciLESetAdvEnab+0x4e>
            status = bt_mesh_adv_enable();
11027638:	e3ffffa6 	bsr      	0x11027584	// 11027584 <bt_mesh_adv_enable>
            status = bt_mesh_adv_disable();
1102763c:	dc0e0003 	st.b      	r0, (r14, 0x3)
11027640:	07eb      	br      	0x11027616	// 11027616 <hciLESetAdvEnab+0x22>
11027642:	e3ffffbd 	bsr      	0x110275bc	// 110275bc <bt_mesh_adv_disable>
11027646:	07fb      	br      	0x1102763c	// 1102763c <hciLESetAdvEnab+0x48>
11027648:	11012053 	.long	0x11012053
1102764c:	1fff117d 	.long	0x1fff117d
11027650:	1101205b 	.long	0x1101205b
11027654:	11012078 	.long	0x11012078

11027658 <bt_mesh_scan_enable>:

int bt_mesh_scan_enable(uint8 filterReports)
{
11027658:	14d2      	push      	r4-r5, r15
    SCHD_LOGD("bt_mesh_scan_disable\n");
    k_mutex_lock(&adv_scan_schd.mutex, K_FOREVER);
1102765a:	108d      	lrw      	r4, 0x1fffb98c	// 1102768c <bt_mesh_scan_enable+0x34>
{
1102765c:	6d43      	mov      	r5, r0
    k_mutex_lock(&adv_scan_schd.mutex, K_FOREVER);
1102765e:	6c13      	mov      	r0, r4
11027660:	3100      	movi      	r1, 0
11027662:	2900      	subi      	r1, 1
11027664:	e3ffdb3c 	bsr      	0x11022cdc	// 11022cdc <k_mutex_lock>
    adv_scan_schd.param.scan_on = 1;
11027668:	d864008c 	ld.b      	r3, (r4, 0x8c)
    adv_scan_schd.param.ext_scan = 0;
    adv_scan_schd.param.filterReports = filterReports;
    k_mutex_unlock(&adv_scan_schd.mutex);
1102766c:	6c13      	mov      	r0, r4
    adv_scan_schd.param.ext_scan = 0;
1102766e:	ec630004 	ori      	r3, r3, 4
11027672:	3b81      	bclri      	r3, 1
11027674:	dc64008c 	st.b      	r3, (r4, 0x8c)
    adv_scan_schd.param.filterReports = filterReports;
11027678:	dca4008d 	st.b      	r5, (r4, 0x8d)
    k_mutex_unlock(&adv_scan_schd.mutex);
1102767c:	e3ffdb45 	bsr      	0x11022d06	// 11022d06 <k_mutex_unlock>
    bt_mesh_adv_scan_schd_action(SCAN_ON);
11027680:	3002      	movi      	r0, 2
11027682:	e3fffea1 	bsr      	0x110273c4	// 110273c4 <bt_mesh_adv_scan_schd_action>
    return 0;
}
11027686:	3000      	movi      	r0, 0
11027688:	1492      	pop      	r4-r5, r15
1102768a:	0000      	bkpt
1102768c:	1fffb98c 	.long	0x1fffb98c

11027690 <bt_mesh_scan_disable>:

int bt_mesh_scan_disable(void)
{
11027690:	14d1      	push      	r4, r15
    SCHD_LOGD("bt_mesh_scan_disable\n");
    k_mutex_lock(&adv_scan_schd.mutex, K_FOREVER);
11027692:	108b      	lrw      	r4, 0x1fffb98c	// 110276bc <bt_mesh_scan_disable+0x2c>
11027694:	6c13      	mov      	r0, r4
11027696:	3100      	movi      	r1, 0
11027698:	2900      	subi      	r1, 1
1102769a:	e3ffdb21 	bsr      	0x11022cdc	// 11022cdc <k_mutex_lock>
    adv_scan_schd.param.ext_scan = 0;
1102769e:	d864008c 	ld.b      	r3, (r4, 0x8c)
    adv_scan_schd.param.scan_on = 0;
    k_mutex_unlock(&adv_scan_schd.mutex);
110276a2:	6c13      	mov      	r0, r4
    adv_scan_schd.param.scan_on = 0;
110276a4:	e46320f9 	andi      	r3, r3, 249
110276a8:	dc64008c 	st.b      	r3, (r4, 0x8c)
    k_mutex_unlock(&adv_scan_schd.mutex);
110276ac:	e3ffdb2d 	bsr      	0x11022d06	// 11022d06 <k_mutex_unlock>
    bt_mesh_adv_scan_schd_action(SCAN_OFF);
110276b0:	3003      	movi      	r0, 3
110276b2:	e3fffe89 	bsr      	0x110273c4	// 110273c4 <bt_mesh_adv_scan_schd_action>
    return 0;
}
110276b6:	3000      	movi      	r0, 0
110276b8:	1491      	pop      	r4, r15
110276ba:	0000      	bkpt
110276bc:	1fffb98c 	.long	0x1fffb98c

110276c0 <hciLESetScanEnable>:
{
110276c0:	14d1      	push      	r4, r15
110276c2:	1421      	subi      	r14, r14, 4
110276c4:	6d03      	mov      	r4, r0
    printf("s1%02d\n", pBuf[0]);
110276c6:	8020      	ld.b      	r1, (r0, 0x0)
110276c8:	1014      	lrw      	r0, 0x1101209c	// 11027718 <hciLESetScanEnable+0x58>
110276ca:	e3ffaaf7 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
    if (llState == LL_STATE_INIT) {
110276ce:	1074      	lrw      	r3, 0x1fff117d	// 1102771c <hciLESetScanEnable+0x5c>
110276d0:	8360      	ld.b      	r3, (r3, 0x0)
110276d2:	3b46      	cmpnei      	r3, 6
110276d4:	0815      	bt      	0x110276fe	// 110276fe <hciLESetScanEnable+0x3e>
        printf("set scan enable not allowed\r\n");
110276d6:	1013      	lrw      	r0, 0x110120a4	// 11027720 <hciLESetScanEnable+0x60>
110276d8:	e3ffaaf0 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
        status = HCI_ERROR_CODE_CMD_DISALLOWED;
110276dc:	330c      	movi      	r3, 12
110276de:	dc6e0003 	st.b      	r3, (r14, 0x3)
    HCI_CommandCompleteEvent1(HCI_LE_SET_SCAN_ENABLE, sizeof(status), &status);
110276e2:	3101      	movi      	r1, 1
110276e4:	ea00200c 	movi      	r0, 8204
110276e8:	e44e0002 	addi      	r2, r14, 3
110276ec:	e3fff99a 	bsr      	0x11026a20	// 11026a20 <HCI_CommandCompleteEvent1>
    printf("s2%02d\n", pBuf[0]);
110276f0:	8420      	ld.b      	r1, (r4, 0x0)
110276f2:	100d      	lrw      	r0, 0x110120c2	// 11027724 <hciLESetScanEnable+0x64>
110276f4:	e3ffaae2 	bsr      	0x1101ccb8	// 1101ccb8 <__GI_printf>
}
110276f8:	3000      	movi      	r0, 0
110276fa:	1401      	addi      	r14, r14, 4
110276fc:	1491      	pop      	r4, r15
        if (pBuf[0]) {
110276fe:	8460      	ld.b      	r3, (r4, 0x0)
11027700:	3b40      	cmpnei      	r3, 0
11027702:	0c07      	bf      	0x11027710	// 11027710 <hciLESetScanEnable+0x50>
            status = bt_mesh_scan_enable(pBuf[1]);
11027704:	8401      	ld.b      	r0, (r4, 0x1)
11027706:	e3ffffa9 	bsr      	0x11027658	// 11027658 <bt_mesh_scan_enable>
            status = bt_mesh_scan_disable();
1102770a:	dc0e0003 	st.b      	r0, (r14, 0x3)
1102770e:	07ea      	br      	0x110276e2	// 110276e2 <hciLESetScanEnable+0x22>
11027710:	e3ffffc0 	bsr      	0x11027690	// 11027690 <bt_mesh_scan_disable>
11027714:	07fb      	br      	0x1102770a	// 1102770a <hciLESetScanEnable+0x4a>
11027716:	0000      	bkpt
11027718:	1101209c 	.long	0x1101209c
1102771c:	1fff117d 	.long	0x1fff117d
11027720:	110120a4 	.long	0x110120a4
11027724:	110120c2 	.long	0x110120c2

11027728 <h5_recv_data>:
}

static int h5_recv_data(aos_dev_t *dev, uint8_t *data, uint32_t size)
{
    return 0;
}
11027728:	3000      	movi      	r0, 0
1102772a:	783c      	jmp      	r15

1102772c <h5_set_event>:

static int h5_set_event(aos_dev_t *dev, hci_event_cb_t event, void *priv)
{
    hci_uart_h5.event = event;
1102772c:	1063      	lrw      	r3, 0x1fffbd00	// 11027738 <h5_set_event+0xc>
    hci_uart_h5.event_priv = priv;

    return 0;
}
1102772e:	3000      	movi      	r0, 0
    hci_uart_h5.event = event;
11027730:	b329      	st.w      	r1, (r3, 0x24)
    hci_uart_h5.event_priv = priv;
11027732:	b34a      	st.w      	r2, (r3, 0x28)
}
11027734:	783c      	jmp      	r15
11027736:	0000      	bkpt
11027738:	1fffbd00 	.long	0x1fffbd00

1102773c <h5_start>:

static int h5_start(aos_dev_t *dev, hci_driver_send_cmd_t send_cmd)
{
1102773c:	14d1      	push      	r4, r15
1102773e:	1421      	subi      	r14, r14, 4
    hci_uart_h5.cmd_send = send_cmd;
11027740:	1066      	lrw      	r3, 0x1fffbd00	// 11027758 <h5_start+0x1c>
{
11027742:	6d07      	mov      	r4, r1
    hci_uart_h5.cmd_send = send_cmd;
11027744:	b328      	st.w      	r1, (r3, 0x20)
    return send_cmd(HCI_VSC_H5_INIT, NULL, 0, NULL, NULL);
11027746:	3300      	movi      	r3, 0
11027748:	3200      	movi      	r2, 0
1102774a:	b860      	st.w      	r3, (r14, 0x0)
1102774c:	3100      	movi      	r1, 0
1102774e:	ea00fcee 	movi      	r0, 64750
11027752:	7bd1      	jsr      	r4
}
11027754:	1401      	addi      	r14, r14, 4
11027756:	1491      	pop      	r4, r15
11027758:	1fffbd00 	.long	0x1fffbd00

1102775c <osalInitTasks>:
{
1102775c:	14d1      	push      	r4, r15
    tasksEvents = (uint16 *)osal_mem_alloc(sizeof(uint16) * tasksCnt);
1102775e:	108a      	lrw      	r4, 0x1fffa67c	// 11027784 <osalInitTasks+0x28>
11027760:	8400      	ld.b      	r0, (r4, 0x0)
11027762:	4001      	lsli      	r0, r0, 1
11027764:	e0000a36 	bsr      	0x11028bd0	// 11028bd0 <cpu_task_stack_init+0x228>
    osal_memset(tasksEvents, 0, (sizeof(uint16) * tasksCnt));
11027768:	8440      	ld.b      	r2, (r4, 0x0)
    tasksEvents = (uint16 *)osal_mem_alloc(sizeof(uint16) * tasksCnt);
1102776a:	1068      	lrw      	r3, 0x1fffcf6c	// 11027788 <osalInitTasks+0x2c>
    osal_memset(tasksEvents, 0, (sizeof(uint16) * tasksCnt));
1102776c:	4241      	lsli      	r2, r2, 1
1102776e:	3100      	movi      	r1, 0
    tasksEvents = (uint16 *)osal_mem_alloc(sizeof(uint16) * tasksCnt);
11027770:	b300      	st.w      	r0, (r3, 0x0)
    osal_memset(tasksEvents, 0, (sizeof(uint16) * tasksCnt));
11027772:	e0000a71 	bsr      	0x11028c54	// 11028c54 <cpu_task_stack_init+0x2ac>
    LL_Init(taskID++);
11027776:	3000      	movi      	r0, 0
11027778:	e0000d7a 	bsr      	0x1102926c	// 1102926c <cpu_task_stack_init+0x8c4>
    HCI_Init(taskID++);
1102777c:	3001      	movi      	r0, 1
1102777e:	e0000b67 	bsr      	0x11028e4c	// 11028e4c <cpu_task_stack_init+0x4a4>
}
11027782:	1491      	pop      	r4, r15
11027784:	1fffa67c 	.long	0x1fffa67c
11027788:	1fffcf6c 	.long	0x1fffcf6c

1102778c <h5_send_data>:
{
1102778c:	14d0      	push      	r15
    return csi_usart_send(hci_uart_h5.uart_dev, data, size);
1102778e:	1063      	lrw      	r3, 0x1fffbd00	// 11027798 <h5_send_data+0xc>
11027790:	9307      	ld.w      	r0, (r3, 0x1c)
11027792:	e3ffe0fb 	bsr      	0x11023988	// 11023988 <csi_usart_send>
}
11027796:	1490      	pop      	r15
11027798:	1fffbd00 	.long	0x1fffbd00

1102779c <h5_hal_close>:
{
1102779c:	14d0      	push      	r15
    csi_usart_uninitialize(hci_uart_h5.uart_dev);
1102779e:	1064      	lrw      	r3, 0x1fffbd00	// 110277ac <h5_hal_close+0x10>
110277a0:	9307      	ld.w      	r0, (r3, 0x1c)
110277a2:	e3ffe0b3 	bsr      	0x11023908	// 11023908 <csi_usart_uninitialize>
}
110277a6:	3000      	movi      	r0, 0
110277a8:	1490      	pop      	r15
110277aa:	0000      	bkpt
110277ac:	1fffbd00 	.long	0x1fffbd00

110277b0 <h5_hal_init>:

static aos_dev_t *h5_hal_init(driver_t *drv, void *g_uart_config, int id)
{
110277b0:	14d0      	push      	r15
    hci_uart_h5.hci_dev = (aos_dev_t *)device_new(drv, sizeof(aos_dev_t), id);
110277b2:	3114      	movi      	r1, 20
110277b4:	e3ffd228 	bsr      	0x11021c04	// 11021c04 <device_new>
110277b8:	1062      	lrw      	r3, 0x1fffbd00	// 110277c0 <h5_hal_init+0x10>
110277ba:	b30b      	st.w      	r0, (r3, 0x2c)

    return (aos_dev_t *)hci_uart_h5.hci_dev;
}
110277bc:	1490      	pop      	r15
110277be:	0000      	bkpt
110277c0:	1fffbd00 	.long	0x1fffbd00

110277c4 <osal_set_event1>:
{
110277c4:	14d3      	push      	r4-r6, r15
    uint8 task_cnt = *(uint8 *)JUMP_FUNCTION(TASK_COUNT);
110277c6:	ea261fff 	movih      	r6, 8191
110277ca:	9663      	ld.w      	r3, (r6, 0xc)
{
110277cc:	6d03      	mov      	r4, r0
    if (task_id < task_cnt) { //tasksCnt )
110277ce:	8360      	ld.b      	r3, (r3, 0x0)
{
110277d0:	6d47      	mov      	r5, r1
    if (task_id < task_cnt) { //tasksCnt )
110277d2:	64c0      	cmphs      	r0, r3
110277d4:	081d      	bt      	0x1102780e	// 1102780e <osal_set_event1+0x4a>
        RHINO_CPU_INTRPT_DISABLE();    // Hold off interrupts
110277d6:	e0000a5d 	bsr      	0x11028c90	// 11028c90 <cpu_task_stack_init+0x2e8>
        events = *(uint16 **)(JUMP_FUNCTION(TASK_EVENTS));
110277da:	9664      	ld.w      	r3, (r6, 0x10)
110277dc:	9360      	ld.w      	r3, (r3, 0x0)
        if (events != NULL) {
110277de:	3b40      	cmpnei      	r3, 0
110277e0:	0c06      	bf      	0x110277ec	// 110277ec <osal_set_event1+0x28>
            events[task_id] |= event_flag;
110277e2:	4481      	lsli      	r4, r4, 1
110277e4:	60d0      	addu      	r3, r4
110277e6:	8b40      	ld.h      	r2, (r3, 0x0)
110277e8:	6c94      	or      	r2, r5
110277ea:	ab40      	st.h      	r2, (r3, 0x0)
        RHINO_CPU_INTRPT_ENABLE();    // Release interrupts
110277ec:	e0000bcc 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
        if (g_intrpt_nested_level[0] == 0 && event_flag == LL_EVT_SECONDARY_ADV) {
110277f0:	1069      	lrw      	r3, 0x1fffd9b8	// 11027814 <osal_set_event1+0x50>
110277f2:	8360      	ld.b      	r3, (r3, 0x0)
110277f4:	3b40      	cmpnei      	r3, 0
110277f6:	0806      	bt      	0x11027802	// 11027802 <osal_set_event1+0x3e>
110277f8:	eb452000 	cmpnei      	r5, 8192
110277fc:	0803      	bt      	0x11027802	// 11027802 <osal_set_event1+0x3e>
            osal_run_system();
110277fe:	e0000ad9 	bsr      	0x11028db0	// 11028db0 <cpu_task_stack_init+0x408>
    VIC->ISPR[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
11027802:	1066      	lrw      	r3, 0xe000e100	// 11027818 <osal_set_event1+0x54>
11027804:	3204      	movi      	r2, 4
11027806:	3000      	movi      	r0, 0
11027808:	dc432040 	st.w      	r2, (r3, 0x100)
}
1102780c:	1493      	pop      	r4-r6, r15
        return (INVALID_TASK);
1102780e:	3003      	movi      	r0, 3
11027810:	07fe      	br      	0x1102780c	// 1102780c <osal_set_event1+0x48>
11027812:	0000      	bkpt
11027814:	1fffd9b8 	.long	0x1fffd9b8
11027818:	e000e100 	.long	0xe000e100

1102781c <patch_efuse_init>:
    write_reg(0x4000f054, 0x0);
1102781c:	1064      	lrw      	r3, 0x4000f000	// 1102782c <patch_efuse_init+0x10>
1102781e:	3200      	movi      	r2, 0
11027820:	b355      	st.w      	r2, (r3, 0x54)
    write_reg(0x4000f140, 0x0);
11027822:	dc432050 	st.w      	r2, (r3, 0x140)
    write_reg(0x4000f144, 0x0);
11027826:	dc432051 	st.w      	r2, (r3, 0x144)
}
1102782a:	783c      	jmp      	r15
1102782c:	4000f000 	.long	0x4000f000

11027830 <LL_InitConnectContext0>:
{
11027830:	14d4      	push      	r4-r7, r15
11027832:	1428      	subi      	r14, r14, 32
11027834:	6d0f      	mov      	r4, r3
11027836:	b842      	st.w      	r2, (r14, 0x8)
11027838:	d8ce0034 	ld.b      	r6, (r14, 0x34)
    if (maxConnNum > MAX_NUM_LL_CONN) {
1102783c:	9862      	ld.w      	r3, (r14, 0x8)
{
1102783e:	d84e0038 	ld.b      	r2, (r14, 0x38)
    if (maxConnNum > MAX_NUM_LL_CONN) {
11027842:	3b08      	cmphsi      	r3, 9
11027844:	0881      	bt      	0x11027946	// 11027946 <LL_InitConnectContext0+0x116>
    if (pConnContext == NULL) {
11027846:	3840      	cmpnei      	r0, 0
11027848:	0c7f      	bf      	0x11027946	// 11027946 <LL_InitConnectContext0+0x116>
    if (pConnBuffer == NULL) {
1102784a:	3940      	cmpnei      	r1, 0
1102784c:	0c7d      	bf      	0x11027946	// 11027946 <LL_InitConnectContext0+0x116>
    g_maxConnNum = maxConnNum;
1102784e:	1260      	lrw      	r3, 0x1fff0dd8	// 1102794c <LL_InitConnectContext0+0x11c>
11027850:	d8ae0008 	ld.b      	r5, (r14, 0x8)
11027854:	a3a0      	st.b      	r5, (r3, 0x0)
    g_maxPktPerEventTx = maxPktPerEventTx;
11027856:	117f      	lrw      	r3, 0x1fff088d	// 11027950 <LL_InitConnectContext0+0x120>
    conn_param   = pConnContext;
11027858:	11bf      	lrw      	r5, 0x1fff0dd4	// 11027954 <LL_InitConnectContext0+0x124>
    g_maxPktPerEventTx = maxPktPerEventTx;
1102785a:	a380      	st.b      	r4, (r3, 0x0)
    conn_param   = pConnContext;
1102785c:	b500      	st.w      	r0, (r5, 0x0)
    g_maxPktPerEventRx = maxPktPerEventRx;
1102785e:	117f      	lrw      	r3, 0x1fff088e	// 11027958 <LL_InitConnectContext0+0x128>
11027860:	a3c0      	st.b      	r6, (r3, 0x0)
    g_blePktVersion = blePktVersion;
11027862:	117f      	lrw      	r3, 0x1fff0de8	// 1102795c <LL_InitConnectContext0+0x12c>
11027864:	a340      	st.b      	r2, (r3, 0x0)
11027866:	5e62      	addi      	r3, r6, 1
11027868:	60d0      	addu      	r3, r4
1102786a:	60d0      	addu      	r3, r4
1102786c:	4342      	lsli      	r2, r3, 2
1102786e:	60c8      	addu      	r3, r2
11027870:	4364      	lsli      	r3, r3, 4
11027872:	5c58      	addu      	r2, r4, r6
11027874:	b865      	st.w      	r3, (r14, 0x14)
11027876:	4262      	lsli      	r3, r2, 2
11027878:	60c8      	addu      	r3, r2
1102787a:	4364      	lsli      	r3, r3, 4
1102787c:	604c      	addu      	r1, r3
1102787e:	3200      	movi      	r2, 0
11027880:	b820      	st.w      	r1, (r14, 0x0)
11027882:	4462      	lsli      	r3, r4, 2
11027884:	60d0      	addu      	r3, r4
11027886:	4364      	lsli      	r3, r3, 4
11027888:	5a2d      	subu      	r1, r2, r3
1102788a:	4662      	lsli      	r3, r6, 2
1102788c:	60d8      	addu      	r3, r6
1102788e:	4364      	lsli      	r3, r3, 4
11027890:	604e      	subu      	r1, r3
11027892:	5a6d      	subu      	r3, r2, r3
11027894:	b863      	st.w      	r3, (r14, 0xc)
    for (i = 0; i < maxConnNum; i++) {
11027896:	3300      	movi      	r3, 0
11027898:	b824      	st.w      	r1, (r14, 0x10)
1102789a:	b861      	st.w      	r3, (r14, 0x4)
1102789c:	33a1      	movi      	r3, 161
1102789e:	4362      	lsli      	r3, r3, 2
110278a0:	b866      	st.w      	r3, (r14, 0x18)
110278a2:	9844      	ld.w      	r2, (r14, 0x10)
110278a4:	9860      	ld.w      	r3, (r14, 0x0)
110278a6:	9822      	ld.w      	r1, (r14, 0x8)
110278a8:	60c8      	addu      	r3, r2
110278aa:	9841      	ld.w      	r2, (r14, 0x4)
110278ac:	6449      	cmplt      	r2, r1
110278ae:	0804      	bt      	0x110278b6	// 110278b6 <LL_InitConnectContext0+0x86>
110278b0:	3000      	movi      	r0, 0
}
110278b2:	1408      	addi      	r14, r14, 32
110278b4:	1494      	pop      	r4-r7, r15
110278b6:	9846      	ld.w      	r2, (r14, 0x18)
110278b8:	b867      	st.w      	r3, (r14, 0x1c)
110278ba:	9861      	ld.w      	r3, (r14, 0x4)
110278bc:	c4438427 	mult      	r7, r3, r2
        memset(&conn_param[i], 0, sizeof(llConnState_t));
110278c0:	32a1      	movi      	r2, 161
110278c2:	4242      	lsli      	r2, r2, 2
110278c4:	3100      	movi      	r1, 0
110278c6:	9500      	ld.w      	r0, (r5, 0x0)
110278c8:	601c      	addu      	r0, r7
110278ca:	e3ffaba1 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
        for (j = 0; j < maxPktPerEventTx; j++) {
110278ce:	3100      	movi      	r1, 0
110278d0:	9867      	ld.w      	r3, (r14, 0x1c)
110278d2:	e447016b 	addi      	r2, r7, 364
110278d6:	9500      	ld.w      	r0, (r5, 0x0)
110278d8:	6008      	addu      	r0, r2
110278da:	6505      	cmplt      	r1, r4
110278dc:	4142      	lsli      	r2, r1, 2
110278de:	6084      	addu      	r2, r1
110278e0:	4244      	lsli      	r2, r2, 4
110278e2:	608c      	addu      	r2, r3
110278e4:	0824      	bt      	0x1102792c	// 1102792c <LL_InitConnectContext0+0xfc>
            conn_param[i].ll_buf.rx_conn_desc[j] = (struct ll_pkt_desc *)p;
110278e6:	3200      	movi      	r2, 0
110278e8:	9863      	ld.w      	r3, (r14, 0xc)
110278ea:	9800      	ld.w      	r0, (r14, 0x0)
110278ec:	e427018b 	addi      	r1, r7, 396
110278f0:	600c      	addu      	r0, r3
110278f2:	9560      	ld.w      	r3, (r5, 0x0)
110278f4:	604c      	addu      	r1, r3
        for (j = 0; j < maxPktPerEventRx; j++) {
110278f6:	6589      	cmplt      	r2, r6
110278f8:	4262      	lsli      	r3, r2, 2
110278fa:	60c8      	addu      	r3, r2
110278fc:	4364      	lsli      	r3, r3, 4
110278fe:	60c0      	addu      	r3, r0
11027900:	081a      	bt      	0x11027934	// 11027934 <LL_InitConnectContext0+0x104>
        conn_param[i].ll_buf.tx_not_ack_pkt = (struct ll_pkt_desc *)p;
11027902:	9560      	ld.w      	r3, (r5, 0x0)
11027904:	61cc      	addu      	r7, r3
11027906:	9860      	ld.w      	r3, (r14, 0x0)
            p += pktLen;
11027908:	3150      	movi      	r1, 80
        conn_param[i].ll_buf.tx_not_ack_pkt = (struct ll_pkt_desc *)p;
1102790a:	dc67206b 	st.w      	r3, (r7, 0x1ac)
1102790e:	e443004f 	addi      	r2, r3, 80
        for (j = 0; j < maxPktPerEventTx; j++) {
11027912:	3300      	movi      	r3, 0
11027914:	e4e701af 	addi      	r7, r7, 432
11027918:	650d      	cmplt      	r3, r4
1102791a:	0811      	bt      	0x1102793c	// 1102793c <LL_InitConnectContext0+0x10c>
    for (i = 0; i < maxConnNum; i++) {
1102791c:	9861      	ld.w      	r3, (r14, 0x4)
1102791e:	2300      	addi      	r3, 1
11027920:	b861      	st.w      	r3, (r14, 0x4)
11027922:	9845      	ld.w      	r2, (r14, 0x14)
11027924:	9860      	ld.w      	r3, (r14, 0x0)
11027926:	60c8      	addu      	r3, r2
11027928:	b860      	st.w      	r3, (r14, 0x0)
1102792a:	07bc      	br      	0x110278a2	// 110278a2 <LL_InitConnectContext0+0x72>
            conn_param[i].ll_buf.tx_conn_desc[j] = (struct ll_pkt_desc *)p;
1102792c:	b040      	st.w      	r2, (r0, 0x0)
        for (j = 0; j < maxPktPerEventTx; j++) {
1102792e:	2100      	addi      	r1, 1
11027930:	2003      	addi      	r0, 4
11027932:	07d4      	br      	0x110278da	// 110278da <LL_InitConnectContext0+0xaa>
            conn_param[i].ll_buf.rx_conn_desc[j] = (struct ll_pkt_desc *)p;
11027934:	b160      	st.w      	r3, (r1, 0x0)
        for (j = 0; j < maxPktPerEventRx; j++) {
11027936:	2200      	addi      	r2, 1
11027938:	2103      	addi      	r1, 4
1102793a:	07de      	br      	0x110278f6	// 110278f6 <LL_InitConnectContext0+0xc6>
            conn_param[i].ll_buf.tx_ntrm_pkts[j] = (struct ll_pkt_desc *)p;
1102793c:	b740      	st.w      	r2, (r7, 0x0)
        for (j = 0; j < maxPktPerEventTx; j++) {
1102793e:	2300      	addi      	r3, 1
            p += pktLen;
11027940:	6084      	addu      	r2, r1
11027942:	2703      	addi      	r7, 4
11027944:	07ea      	br      	0x11027918	// 11027918 <LL_InitConnectContext0+0xe8>
        return LL_STATUS_ERROR_BAD_PARAMETER;
11027946:	3012      	movi      	r0, 18
11027948:	07b5      	br      	0x110278b2	// 110278b2 <LL_InitConnectContext0+0x82>
1102794a:	0000      	bkpt
1102794c:	1fff0dd8 	.long	0x1fff0dd8
11027950:	1fff088d 	.long	0x1fff088d
11027954:	1fff0dd4 	.long	0x1fff0dd4
11027958:	1fff088e 	.long	0x1fff088e
1102795c:	1fff0de8 	.long	0x1fff0de8

11027960 <h5_hal_open>:
{
11027960:	14d1      	push      	r4, r15
11027962:	1422      	subi      	r14, r14, 8
    osal_mem_set_heap((osalMemHdr_t *)largeHeap, LARGE_HEAP_SIZE);
11027964:	3180      	movi      	r1, 128
11027966:	4124      	lsli      	r1, r1, 4
11027968:	1105      	lrw      	r0, 0x1fffc140	// 110279fc <h5_hal_open+0x9c>
    hci_uart_h5.uart_dev = csi_usart_initialize(hci_uart_h5.uart_idx, uart_recv_event);
1102796a:	1186      	lrw      	r4, 0x1fffbd00	// 11027a00 <h5_hal_open+0xa0>
    osal_mem_set_heap((osalMemHdr_t *)largeHeap, LARGE_HEAP_SIZE);
1102796c:	e0000c1a 	bsr      	0x110291a0	// 110291a0 <cpu_task_stack_init+0x7f8>
    LL_InitConnectContext0(pConnContext,
11027970:	3301      	movi      	r3, 1
11027972:	3201      	movi      	r2, 1
11027974:	b861      	st.w      	r3, (r14, 0x4)
11027976:	3302      	movi      	r3, 2
11027978:	1123      	lrw      	r1, 0x1fffbad0	// 11027a04 <h5_hal_open+0xa4>
1102797a:	1104      	lrw      	r0, 0x1fffc940	// 11027a08 <h5_hal_open+0xa8>
1102797c:	b860      	st.w      	r3, (r14, 0x0)
1102797e:	e3ffff59 	bsr      	0x11027830	// 11027830 <LL_InitConnectContext0>
    setSleepMode(SYSTEM_SLEEP_MODE);
11027982:	3001      	movi      	r0, 1
11027984:	e0000be4 	bsr      	0x1102914c	// 1102914c <cpu_task_stack_init+0x7a4>
    osal_init_system();
11027988:	e0000ab6 	bsr      	0x11028ef4	// 11028ef4 <cpu_task_stack_init+0x54c>
        extAdvInfo[i].data.advertisingData = &advertisingData[i][0];
1102798c:	1160      	lrw      	r3, 0x1fffcf70	// 11027a0c <h5_hal_open+0xac>
1102798e:	1101      	lrw      	r0, 0x1fffcf14	// 11027a10 <h5_hal_open+0xb0>
	LL_InitialExtendedAdv(extAdvInfo, MAX_EXT_ADV_INSTANCE, MAX_EXT_ADV_DATA_LENGTH);
11027990:	3101      	movi      	r1, 1
        extAdvInfo[i].data.advertisingData = &advertisingData[i][0];
11027992:	b06b      	st.w      	r3, (r0, 0x2c)
	LL_InitialExtendedAdv(extAdvInfo, MAX_EXT_ADV_INSTANCE, MAX_EXT_ADV_DATA_LENGTH);
11027994:	32fa      	movi      	r2, 250
11027996:	e3ffc1eb 	bsr      	0x1101fd6c	// 1101fd6c <LL_InitialExtendedAdv>
    hciCtrlCmdToken = 1;
1102799a:	107f      	lrw      	r3, 0x1fff0f70	// 11027a14 <h5_hal_open+0xb4>
1102799c:	3201      	movi      	r2, 1
    osal_pwrmgr_device(PWRMGR_BATTERY);
1102799e:	3001      	movi      	r0, 1
    hciCtrlCmdToken = 1;
110279a0:	a340      	st.b      	r2, (r3, 0x0)
    osal_pwrmgr_device(PWRMGR_BATTERY);
110279a2:	e00008a5 	bsr      	0x11028aec	// 11028aec <cpu_task_stack_init+0x144>
    hci_uart_h5.uart_dev = csi_usart_initialize(hci_uart_h5.uart_idx, uart_recv_event);
110279a6:	103d      	lrw      	r1, 0x1fffa278	// 11027a18 <h5_hal_open+0xb8>
110279a8:	9400      	ld.w      	r0, (r4, 0x0)
110279aa:	e3ffdf69 	bsr      	0x1102387c	// 1102387c <csi_usart_initialize>
    csi_usart_config(hci_uart_h5.uart_dev, 1000000, USART_MODE_ASYNCHRONOUS, USART_PARITY_NONE, USART_STOP_BITS_1, USART_DATA_BITS_8);
110279ae:	3303      	movi      	r3, 3
110279b0:	3200      	movi      	r2, 0
110279b2:	b861      	st.w      	r3, (r14, 0x4)
110279b4:	3300      	movi      	r3, 0
110279b6:	103a      	lrw      	r1, 0xf4240	// 11027a1c <h5_hal_open+0xbc>
110279b8:	b860      	st.w      	r3, (r14, 0x0)
    hci_uart_h5.uart_dev = csi_usart_initialize(hci_uart_h5.uart_idx, uart_recv_event);
110279ba:	b407      	st.w      	r0, (r4, 0x1c)
    csi_usart_config(hci_uart_h5.uart_dev, 1000000, USART_MODE_ASYNCHRONOUS, USART_PARITY_NONE, USART_STOP_BITS_1, USART_DATA_BITS_8);
110279bc:	e3ffdfb8 	bsr      	0x1102392c	// 1102392c <csi_usart_config>
    csi_usart_receive_dma(hci_uart_h5.uart_dev, hci_uart_h5.dma_recv, DMA_RECV_BUFFER_SIZE);
110279c0:	3280      	movi      	r2, 128
110279c2:	4243      	lsli      	r2, r2, 3
110279c4:	9407      	ld.w      	r0, (r4, 0x1c)
    hci_uart_h5.dma_recv = hci_uart_h5.dma_recv1;
110279c6:	e4240037 	addi      	r1, r4, 56
110279ca:	b42d      	st.w      	r1, (r4, 0x34)
    hci_uart_h5.dma_read = (uint32_t)hci_uart_h5.dma_recv;
110279cc:	dc24210e 	st.w      	r1, (r4, 0x438)
    csi_usart_receive_dma(hci_uart_h5.uart_dev, hci_uart_h5.dma_recv, DMA_RECV_BUFFER_SIZE);
110279d0:	e3ffdffa 	bsr      	0x110239c4	// 110239c4 <csi_usart_receive_dma>
    phy_gpio_pin_init(GPIO_P07, GPIO_OUTPUT_1);
110279d4:	3101      	movi      	r1, 1
110279d6:	3004      	movi      	r0, 4
110279d8:	e3ffdaa2 	bsr      	0x11022f1c	// 11022f1c <phy_gpio_pin_init>
    phy_gpio_pin_init(GPIO_P33, GPIO_OUTPUT_1);
110279dc:	3101      	movi      	r1, 1
110279de:	3015      	movi      	r0, 21
110279e0:	e3ffda9e 	bsr      	0x11022f1c	// 11022f1c <phy_gpio_pin_init>
    phy_gpio_fmux_set(GPIO_P07, FMUX_RF_TX_EN);
110279e4:	3107      	movi      	r1, 7
110279e6:	3004      	movi      	r0, 4
110279e8:	e3ffda7c 	bsr      	0x11022ee0	// 11022ee0 <phy_gpio_fmux_set>
    phy_gpio_fmux_set(GPIO_P33, FMUX_RF_RX_EN);
110279ec:	3106      	movi      	r1, 6
110279ee:	3015      	movi      	r0, 21
110279f0:	e3ffda78 	bsr      	0x11022ee0	// 11022ee0 <phy_gpio_fmux_set>
}
110279f4:	3000      	movi      	r0, 0
110279f6:	1402      	addi      	r14, r14, 8
110279f8:	1491      	pop      	r4, r15
110279fa:	0000      	bkpt
110279fc:	1fffc140 	.long	0x1fffc140
11027a00:	1fffbd00 	.long	0x1fffbd00
11027a04:	1fffbad0 	.long	0x1fffbad0
11027a08:	1fffc940 	.long	0x1fffc940
11027a0c:	1fffcf70 	.long	0x1fffcf70
11027a10:	1fffcf14 	.long	0x1fffcf14
11027a14:	1fff0f70 	.long	0x1fff0f70
11027a18:	1fffa278 	.long	0x1fffa278
11027a1c:	000f4240 	.long	0x000f4240

11027a20 <init_config>:
{
11027a20:	14c2      	push      	r4-r5
        pGlobal_config[i] = 0;
11027a22:	0342      	lrw      	r2, 0x1fffa670	// 11027c94 <init_config+0x274>
{
11027a24:	3300      	movi      	r3, 0
11027a26:	6c4b      	mov      	r1, r2
        pGlobal_config[i] = 0;
11027a28:	9200      	ld.w      	r0, (r2, 0x0)
11027a2a:	3400      	movi      	r4, 0
11027a2c:	600c      	addu      	r0, r3
11027a2e:	2303      	addi      	r3, 4
    for (i = 0; i < 256; i ++) {
11027a30:	eb430400 	cmpnei      	r3, 1024
        pGlobal_config[i] = 0;
11027a34:	b080      	st.w      	r4, (r0, 0x0)
    for (i = 0; i < 256; i ++) {
11027a36:	0bf9      	bt      	0x11027a28	// 11027a28 <init_config+0x8>
    pGlobal_config[LL_SWITCH] =  LL_DEBUG_ALLOW | SLAVE_LATENCY_ALLOW | LL_WHITELIST_ALLOW
11027a38:	9260      	ld.w      	r3, (r2, 0x0)
        pGlobal_config[LL_SWITCH] |= RC32_TRACKINK_ALLOW | LL_RC32K_SEL;
11027a3a:	306e      	movi      	r0, 110
    if (g_clk32K_config == CLK_32K_XTAL) {
11027a3c:	0348      	lrw      	r2, 0x1fffbacc	// 11027c98 <init_config+0x278>
11027a3e:	8240      	ld.b      	r2, (r2, 0x0)
        pGlobal_config[LL_SWITCH] |= RC32_TRACKINK_ALLOW | LL_RC32K_SEL;
11027a40:	3a40      	cmpnei      	r2, 0
11027a42:	327f      	movi      	r2, 127
11027a44:	c4400c20 	incf      	r2, r0, 0
11027a48:	b34b      	st.w      	r2, (r3, 0x2c)
    pGlobal_config[MIN_TIME_TO_STABLE_32KHZ_XOSC] = 0;
11027a4a:	3200      	movi      	r2, 0
11027a4c:	b354      	st.w      	r2, (r3, 0x50)
    pGlobal_config[CLOCK_SETTING] = g_system_clk;//CLOCK_32MHZ;
11027a4e:	034b      	lrw      	r2, 0x1fff08a8	// 11027c9c <init_config+0x27c>
11027a50:	9200      	ld.w      	r0, (r2, 0x0)
11027a52:	b30e      	st.w      	r0, (r3, 0x38)
    pGlobal_config[WAKEUP_ADVANCE] = 1850;//650;//600;//310;
11027a54:	ea00073a 	movi      	r0, 1850
11027a58:	b307      	st.w      	r0, (r3, 0x1c)
    if (g_system_clk == SYS_CLK_XTAL_16M) {
11027a5a:	9200      	ld.w      	r0, (r2, 0x0)
11027a5c:	3842      	cmpnei      	r0, 2
11027a5e:	08ff      	bt      	0x11027c5c	// 11027c5c <init_config+0x23c>
        pGlobal_config[WAKEUP_DELAY] = 16;
11027a60:	3010      	movi      	r0, 16
        pGlobal_config[WAKEUP_DELAY] = 20;
11027a62:	b308      	st.w      	r0, (r3, 0x20)
    pGlobal_config[MAX_SLEEP_TIME] = MAX_32KRC_CALIBRATION_TIME;//1500000;
11027a64:	0310      	lrw      	r0, 0x3938700	// 11027ca0 <init_config+0x280>
11027a66:	b305      	st.w      	r0, (r3, 0x14)
    pGlobal_config[MIN_SLEEP_TIME] = 1500;
11027a68:	ea0005dc 	movi      	r0, 1500
11027a6c:	b306      	st.w      	r0, (r3, 0x18)
    pGlobal_config[ALLOW_TO_SLEEP_TICK_RC32K] = 60;// 30.5 per tick
11027a6e:	303c      	movi      	r0, 60
11027a70:	dc032023 	st.w      	r0, (r3, 0x8c)
    pGlobal_config[LL_HW_BB_DELAY] = 54;//54-8;
11027a74:	3036      	movi      	r0, 54
11027a76:	b30f      	st.w      	r0, (r3, 0x3c)
    pGlobal_config[LL_HW_AFE_DELAY] = 8;
11027a78:	3008      	movi      	r0, 8
11027a7a:	b310      	st.w      	r0, (r3, 0x40)
    pGlobal_config[LL_HW_PLL_DELAY] = 40;//52;
11027a7c:	3028      	movi      	r0, 40
11027a7e:	b311      	st.w      	r0, (r3, 0x44)
    pGlobal_config[LL_HW_Rx_TO_TX_INTV] = 63 - RF_PHY_EXT_PREAMBLE_US; //63
11027a80:	3037      	movi      	r0, 55
11027a82:	dc032021 	st.w      	r0, (r3, 0x84)
    pGlobal_config[LL_HW_Tx_TO_RX_INTV] = 50;//65
11027a86:	3032      	movi      	r0, 50
11027a88:	dc032020 	st.w      	r0, (r3, 0x80)
    pGlobal_config[LL_HW_BB_DELAY_2MPHY] = 59;
11027a8c:	303b      	movi      	r0, 59
11027a8e:	dc03202f 	st.w      	r0, (r3, 0xbc)
    pGlobal_config[LL_HW_AFE_DELAY_2MPHY] = 8;
11027a92:	3008      	movi      	r0, 8
11027a94:	dc032030 	st.w      	r0, (r3, 0xc0)
    pGlobal_config[LL_HW_PLL_DELAY_2MPHY] = 52;
11027a98:	3034      	movi      	r0, 52
11027a9a:	dc032031 	st.w      	r0, (r3, 0xc4)
    pGlobal_config[LL_HW_Rx_TO_TX_INTV_2MPHY] = 72 - RF_PHY_EXT_PREAMBLE_US; //72
11027a9e:	3040      	movi      	r0, 64
11027aa0:	dc032033 	st.w      	r0, (r3, 0xcc)
    pGlobal_config[LL_HW_Tx_TO_RX_INTV_2MPHY] = 57;//72
11027aa4:	3039      	movi      	r0, 57
11027aa6:	dc032032 	st.w      	r0, (r3, 0xc8)
    pGlobal_config[LL_HW_BB_DELAY_500KPHY] = 50;//54-8;
11027aaa:	3032      	movi      	r0, 50
11027aac:	dc032034 	st.w      	r0, (r3, 0xd0)
    pGlobal_config[LL_HW_AFE_DELAY_500KPHY] = 8;
11027ab0:	3008      	movi      	r0, 8
11027ab2:	dc032035 	st.w      	r0, (r3, 0xd4)
    pGlobal_config[LL_HW_PLL_DELAY_500KPHY] = 52;
11027ab6:	3034      	movi      	r0, 52
11027ab8:	dc032036 	st.w      	r0, (r3, 0xd8)
    pGlobal_config[LL_HW_Rx_TO_TX_INTV_500KPHY] =  2;
11027abc:	3002      	movi      	r0, 2
11027abe:	dc032038 	st.w      	r0, (r3, 0xe0)
    pGlobal_config[LL_HW_Tx_TO_RX_INTV_500KPHY] = 66;//72
11027ac2:	3042      	movi      	r0, 66
11027ac4:	dc032037 	st.w      	r0, (r3, 0xdc)
    pGlobal_config[LL_HW_BB_DELAY_125KPHY] = 30;//54-8;
11027ac8:	301e      	movi      	r0, 30
11027aca:	dc032039 	st.w      	r0, (r3, 0xe4)
    pGlobal_config[LL_HW_AFE_DELAY_125KPHY] = 8;
11027ace:	3008      	movi      	r0, 8
11027ad0:	dc03203a 	st.w      	r0, (r3, 0xe8)
    pGlobal_config[LL_HW_PLL_DELAY_125KPHY] = 52;
11027ad4:	3034      	movi      	r0, 52
11027ad6:	dc03203b 	st.w      	r0, (r3, 0xec)
    pGlobal_config[LL_HW_Rx_TO_TX_INTV_125KPHY] = 5;
11027ada:	3005      	movi      	r0, 5
11027adc:	dc03203d 	st.w      	r0, (r3, 0xf4)
    pGlobal_config[LL_HW_Tx_TO_RX_INTV_125KPHY] = 66;//72
11027ae0:	3042      	movi      	r0, 66
11027ae2:	dc03203c 	st.w      	r0, (r3, 0xf0)
    pGlobal_config[LL_HW_BB_DELAY_ADV] = 90;
11027ae6:	305a      	movi      	r0, 90
11027ae8:	dc032024 	st.w      	r0, (r3, 0x90)
    pGlobal_config[LL_HW_AFE_DELAY_ADV] = 8;
11027aec:	3008      	movi      	r0, 8
11027aee:	dc032025 	st.w      	r0, (r3, 0x94)
    pGlobal_config[LL_HW_PLL_DELAY_ADV] = 60;
11027af2:	303c      	movi      	r0, 60
11027af4:	dc032026 	st.w      	r0, (r3, 0x98)
    pGlobal_config[ADV_CHANNEL_INTERVAL] = 1400;//6250;
11027af8:	30af      	movi      	r0, 175
11027afa:	4003      	lsli      	r0, r0, 3
11027afc:	b300      	st.w      	r0, (r3, 0x0)
    pGlobal_config[NON_ADV_CHANNEL_INTERVAL] = 666;//6250;
11027afe:	9160      	ld.w      	r3, (r1, 0x0)
11027b00:	ea01029a 	movi      	r1, 666
11027b04:	b32c      	st.w      	r1, (r3, 0x30)
    if (g_system_clk == SYS_CLK_XTAL_16M) {
11027b06:	9220      	ld.w      	r1, (r2, 0x0)
11027b08:	3942      	cmpnei      	r1, 2
11027b0a:	08ae      	bt      	0x11027c66	// 11027c66 <init_config+0x246>
        pGlobal_config[SCAN_RSP_DELAY] = 10 + RF_PHY_EXT_PREAMBLE_US;      // 12    //  2019/3/19 A2: 12 --> 9
11027b0c:	3112      	movi      	r1, 18
        pGlobal_config[SCAN_RSP_DELAY] = 3 + RF_PHY_EXT_PREAMBLE_US;
11027b0e:	b321      	st.w      	r1, (r3, 0x4)
    pGlobal_config[LL_HW_RTLP_TO_GAP]       = 1000;
11027b10:	30fa      	movi      	r0, 250
11027b12:	4002      	lsli      	r0, r0, 2
11027b14:	dc03203f 	st.w      	r0, (r3, 0xfc)
    pGlobal_config[HDC_DIRECT_ADV_INTERVAL] = 1000;
11027b18:	b309      	st.w      	r0, (r3, 0x24)
    pGlobal_config[LDC_DIRECT_ADV_INTERVAL] = 6250;
11027b1a:	ea00186a 	movi      	r0, 6250
    pGlobal_config[CONN_REQ_TO_SLAVE_DELAY] = 300;//192;//500;//192;
11027b1e:	3196      	movi      	r1, 150
    pGlobal_config[LDC_DIRECT_ADV_INTERVAL] = 6250;
11027b20:	b30a      	st.w      	r0, (r3, 0x28)
    pGlobal_config[DIR_ADV_DELAY] = 115;   // in us, consider both direct adv broadcast time & SW delay, ... etc.
11027b22:	3073      	movi      	r0, 115
    pGlobal_config[CONN_REQ_TO_SLAVE_DELAY] = 300;//192;//500;//192;
11027b24:	4121      	lsli      	r1, r1, 1
    pGlobal_config[DIR_ADV_DELAY] = 115;   // in us, consider both direct adv broadcast time & SW delay, ... etc.
11027b26:	b317      	st.w      	r0, (r3, 0x5c)
    pGlobal_config[LL_TX_PKTS_PER_CONN_EVT] = 6;//8;
11027b28:	3006      	movi      	r0, 6
    pGlobal_config[CONN_REQ_TO_SLAVE_DELAY] = 300;//192;//500;//192;
11027b2a:	b322      	st.w      	r1, (r3, 0x8)
    pGlobal_config[LL_TX_PKTS_PER_CONN_EVT] = 6;//8;
11027b2c:	b315      	st.w      	r0, (r3, 0x54)
    pGlobal_config[LL_RX_PKTS_PER_CONN_EVT] = 6;//8;
11027b2e:	b316      	st.w      	r0, (r3, 0x58)
    pGlobal_config[LL_TRX_NUM_ADAPTIVE_CONFIG] = 8;     //0:        disable adaptive
11027b30:	3008      	movi      	r0, 8
    pGlobal_config[SLAVE_CONN_DELAY] = 400;//0;//1500;//0;//3000;//0;          ---> update 11-20
11027b32:	31c8      	movi      	r1, 200
    pGlobal_config[LL_TRX_NUM_ADAPTIVE_CONFIG] = 8;     //0:        disable adaptive
11027b34:	dc032040 	st.w      	r0, (r3, 0x100)
    pGlobal_config[LL_SMART_WINDOW_COEF_ALPHA]      = 2;
11027b38:	3002      	movi      	r0, 2
    pGlobal_config[SLAVE_CONN_DELAY] = 400;//0;//1500;//0;//3000;//0;          ---> update 11-20
11027b3a:	4121      	lsli      	r1, r1, 1
    pGlobal_config[LL_SMART_WINDOW_COEF_ALPHA]      = 2;
11027b3c:	b319      	st.w      	r0, (r3, 0x64)
    pGlobal_config[LL_SMART_WINDOW_TARGET]          = 600;
11027b3e:	3096      	movi      	r0, 150
11027b40:	4002      	lsli      	r0, r0, 2
11027b42:	b31a      	st.w      	r0, (r3, 0x68)
    pGlobal_config[LL_SMART_WINDOW_INCREMENT]       = 9;
11027b44:	3009      	movi      	r0, 9
    pGlobal_config[SLAVE_CONN_DELAY] = 400;//0;//1500;//0;//3000;//0;          ---> update 11-20
11027b46:	b323      	st.w      	r1, (r3, 0xc)
    pGlobal_config[LL_SMART_WINDOW_INCREMENT]       = 9;
11027b48:	b31b      	st.w      	r0, (r3, 0x6c)
    pGlobal_config[LL_SMART_WINDOW_LIMIT]           = 20000;
11027b4a:	ea004e20 	movi      	r0, 20000
    pGlobal_config[SLAVE_CONN_DELAY_BEFORE_SYNC] = 110;//160 NG//500 OK
11027b4e:	316e      	movi      	r1, 110
    pGlobal_config[LL_SMART_WINDOW_LIMIT]           = 20000;
11027b50:	b31c      	st.w      	r0, (r3, 0x70)
    pGlobal_config[LL_SMART_WINDOW_ACTIVE_THD]      = 8;
11027b52:	3008      	movi      	r0, 8
    pGlobal_config[SLAVE_CONN_DELAY_BEFORE_SYNC] = 110;//160 NG//500 OK
11027b54:	b324      	st.w      	r1, (r3, 0x10)
    pGlobal_config[LL_SMART_WINDOW_ACTIVE_THD]      = 8;
11027b56:	b31d      	st.w      	r0, (r3, 0x74)
    pGlobal_config[LL_SMART_WINDOW_ACTIVE_RANGE]    = 0;//300
11027b58:	3000      	movi      	r0, 0
    pGlobal_config[LL_HW_RTLP_LOOP_TIMEOUT] = 50000;
11027b5a:	ea01c350 	movi      	r1, 50000
    pGlobal_config[LL_SMART_WINDOW_ACTIVE_RANGE]    = 0;//300
11027b5e:	b31e      	st.w      	r0, (r3, 0x78)
    pGlobal_config[LL_SMART_WINDOW_FIRST_WINDOW]    = 5000;
11027b60:	ea001388 	movi      	r0, 5000
    pGlobal_config[LL_HW_RTLP_LOOP_TIMEOUT] = 50000;
11027b64:	b332      	st.w      	r1, (r3, 0x48)
    pGlobal_config[LL_SMART_WINDOW_FIRST_WINDOW]    = 5000;
11027b66:	b31f      	st.w      	r0, (r3, 0x7c)
    pGlobal_config[LL_HW_RTLP_1ST_TIMEOUT]  = 4000 + pGlobal_config[SLAVE_CONN_DELAY] * 2;//500;
11027b68:	3196      	movi      	r1, 150
    g_smartWindowSize = pGlobal_config[LL_HW_RTLP_1ST_TIMEOUT] ;
11027b6a:	120f      	lrw      	r0, 0x1fff0e44	// 11027ca4 <init_config+0x284>
    pGlobal_config[LL_HW_RTLP_1ST_TIMEOUT]  = 4000 + pGlobal_config[SLAVE_CONN_DELAY] * 2;//500;
11027b6c:	4125      	lsli      	r1, r1, 5
11027b6e:	b333      	st.w      	r1, (r3, 0x4c)
    g_smartWindowSize = pGlobal_config[LL_HW_RTLP_1ST_TIMEOUT] ;
11027b70:	b020      	st.w      	r1, (r0, 0x0)
    if (g_system_clk == SYS_CLK_XTAL_16M) {
11027b72:	9220      	ld.w      	r1, (r2, 0x0)
11027b74:	3942      	cmpnei      	r1, 2
11027b76:	0880      	bt      	0x11027c76	// 11027c76 <init_config+0x256>
        pGlobal_config[LL_ADV_TO_SCAN_REQ_DELAY]    = 18 + RF_PHY_EXT_PREAMBLE_US; //20;      //  2019/3/19 A2: 20 --> 18
11027b78:	311a      	movi      	r1, 26
11027b7a:	dc232027 	st.w      	r1, (r3, 0x9c)
        pGlobal_config[LL_ADV_TO_CONN_REQ_DELAY]    = 15 + RF_PHY_EXT_PREAMBLE_US; //27;      //  2019/3/19 A2: 27 --> 25
11027b7e:	3117      	movi      	r1, 23
        pGlobal_config[LL_ADV_TO_CONN_REQ_DELAY]    = 10 + RF_PHY_EXT_PREAMBLE_US;
11027b80:	dc232028 	st.w      	r1, (r3, 0xa0)
    pGlobal_config[LL_HW_TRLP_TO_GAP]       = 1000;
11027b84:	30fa      	movi      	r0, 250
11027b86:	4002      	lsli      	r0, r0, 2
11027b88:	dc03203e 	st.w      	r0, (r3, 0xf8)
    pGlobal_config[LL_MOVE_TO_MASTER_DELAY] = 100;
11027b8c:	3064      	movi      	r0, 100
    pGlobal_config[LL_HW_TRLP_LOOP_TIMEOUT] = 50000;    // enough for 8Tx + 8Rx : (41 * 8 + 150) * 16 - 150 = 7498us
11027b8e:	ea01c350 	movi      	r1, 50000
    pGlobal_config[LL_MOVE_TO_MASTER_DELAY] = 100;
11027b92:	dc032029 	st.w      	r0, (r3, 0xa4)
    pGlobal_config[LL_CONN_REQ_WIN_SIZE] = 5;
11027b96:	3005      	movi      	r0, 5
    pGlobal_config[LL_SEC_SCAN_MARGIN] = 2500;//1400;  to avoid mesh proxy llTrigErr 0x15
11027b98:	ea0409c4 	movi      	r4, 2500
    pGlobal_config[LL_CONN_REQ_WIN_SIZE] = 5;
11027b9c:	dc03202b 	st.w      	r0, (r3, 0xac)
    pGlobal_config[LL_CONN_REQ_WIN_OFFSET] = 2;
11027ba0:	3002      	movi      	r0, 2
    pGlobal_config[LL_CONN_TASK_DURATION] = 5000;
11027ba2:	ea051388 	movi      	r5, 5000
    pGlobal_config[LL_CONN_REQ_WIN_OFFSET] = 2;
11027ba6:	dc03202c 	st.w      	r0, (r3, 0xb0)
    pGlobal_config[LL_MASTER_PROCESS_TARGET] = 200;   // reserve time for preparing master conn event, delay should be insert if needn't so long time
11027baa:	30c8      	movi      	r0, 200
    if (g_system_clk == SYS_CLK_DLL_48M) {
11027bac:	9240      	ld.w      	r2, (r2, 0x0)
    pGlobal_config[LL_MASTER_PROCESS_TARGET] = 200;   // reserve time for preparing master conn event, delay should be insert if needn't so long time
11027bae:	dc03202d 	st.w      	r0, (r3, 0xb4)
    pGlobal_config[LL_MASTER_TIRQ_DELAY] = 0;         // timer IRQ -> timer ISR delay
11027bb2:	3000      	movi      	r0, 0
    pGlobal_config[LL_HW_TRLP_LOOP_TIMEOUT] = 50000;    // enough for 8Tx + 8Rx : (41 * 8 + 150) * 16 - 150 = 7498us
11027bb4:	dc23202a 	st.w      	r1, (r3, 0xa8)
    pGlobal_config[LL_MASTER_TIRQ_DELAY] = 0;         // timer IRQ -> timer ISR delay
11027bb8:	dc03202e 	st.w      	r0, (r3, 0xb8)
    pGlobal_config[OSAL_SYS_TICK_WAKEUP_TRIM] = 56;  // 0.125us
11027bbc:	3038      	movi      	r0, 56
    pGlobal_config[LL_SEC_SCAN_MARGIN] = 2500;//1400;  to avoid mesh proxy llTrigErr 0x15
11027bbe:	dc832048 	st.w      	r4, (r3, 0x120)
    pGlobal_config[OSAL_SYS_TICK_WAKEUP_TRIM] = 56;  // 0.125us
11027bc2:	dc032041 	st.w      	r0, (r3, 0x104)
    pGlobal_config[MAC_ADDRESS_LOC] = 0x11004000;
11027bc6:	1119      	lrw      	r0, 0x11004000	// 11027ca8 <init_config+0x288>
    pGlobal_config[LL_CONN_TASK_DURATION] = 5000;
11027bc8:	dca32058 	st.w      	r5, (r3, 0x160)
    pGlobal_config[MAC_ADDRESS_LOC] = 0x11004000;
11027bcc:	dc032050 	st.w      	r0, (r3, 0x140)
    pGlobal_config[LL_NOCONN_ADV_EST_TIME] = 1400 * 3;
11027bd0:	ea001068 	movi      	r0, 4200
    pGlobal_config[LL_EXT_ADV_INTER_PRI_CHN_INT] = 450; // 5000 --> 450
11027bd4:	35e1      	movi      	r5, 225
    pGlobal_config[LL_NOCONN_ADV_EST_TIME] = 1400 * 3;
11027bd6:	dc032046 	st.w      	r0, (r3, 0x118)
    pGlobal_config[LL_NOCONN_ADV_MARGIN] = 600;
11027bda:	3096      	movi      	r0, 150
11027bdc:	4002      	lsli      	r0, r0, 2
11027bde:	dc032047 	st.w      	r0, (r3, 0x11c)
    pGlobal_config[LL_MIN_SCAN_TIME] = 2000 * 2;
11027be2:	30fa      	movi      	r0, 250
11027be4:	4004      	lsli      	r0, r0, 4
11027be6:	dc032049 	st.w      	r0, (r3, 0x124)
    pGlobal_config[TIMER_ISR_ENTRY_TIME] = 15;
11027bea:	300f      	movi      	r0, 15
    pGlobal_config[LL_EXT_ADV_INTER_SEC_CHN_INT] = 2500;    // 5000 ---> 2500		1500: temp add for 2M OTA, shall not archive
11027bec:	dc83205d 	st.w      	r4, (r3, 0x174)
    pGlobal_config[TIMER_ISR_ENTRY_TIME] = 15;
11027bf0:	dc03205a 	st.w      	r0, (r3, 0x168)
    pGlobal_config[LL_MULTICONN_MASTER_PREEMP] = 0;
11027bf4:	3000      	movi      	r0, 0
    pGlobal_config[LL_EXT_ADV_PRI_2_SEC_CHN_INT] = 1500;
11027bf6:	ea0405dc 	movi      	r4, 1500
    pGlobal_config[LL_MULTICONN_MASTER_PREEMP] = 0;
11027bfa:	dc03205b 	st.w      	r0, (r3, 0x16c)
    pGlobal_config[LL_MULTICONN_SLAVE_PREEMP] = 0;
11027bfe:	dc03205c 	st.w      	r0, (r3, 0x170)
    pGlobal_config[LL_EXT_ADV_TASK_DURATION] = 2000; //20000
11027c02:	30fa      	movi      	r0, 250
11027c04:	4003      	lsli      	r0, r0, 3
11027c06:	dc032056 	st.w      	r0, (r3, 0x158)
    pGlobal_config[LL_PRD_ADV_TASK_DURATION] = 20000;
11027c0a:	ea004e20 	movi      	r0, 20000
    pGlobal_config[LL_PRD_ADV_RSC_PERIOD] = 50000;      // 1000000
11027c0e:	dc232061 	st.w      	r1, (r3, 0x184)
    pGlobal_config[LL_PRD_ADV_TASK_DURATION] = 20000;
11027c12:	dc032057 	st.w      	r0, (r3, 0x15c)
    pGlobal_config[LL_EXT_ADV_RSC_PERIOD] = 20000;//1000000;
11027c16:	dc03205f 	st.w      	r0, (r3, 0x17c)
    pGlobal_config[LL_PRD_ADV_RSC_SLOT_DURATION] = 50000; //10000
11027c1a:	dc232062 	st.w      	r1, (r3, 0x188)
    pGlobal_config[LL_EXT_ADV_RSC_SLOT_DURATION] = 10000;
11027c1e:	ea002710 	movi      	r0, 10000
    pGlobal_config[LL_EXT_ADV_PROCESS_TARGET] = 150;  //500
11027c22:	3196      	movi      	r1, 150
    if (g_system_clk == SYS_CLK_DLL_48M) {
11027c24:	3a43      	cmpnei      	r2, 3
    pGlobal_config[LL_EXT_ADV_INTER_PRI_CHN_INT] = 450; // 5000 --> 450
11027c26:	45a1      	lsli      	r5, r5, 1
11027c28:	dca32051 	st.w      	r5, (r3, 0x144)
    pGlobal_config[LL_EXT_ADV_PRI_2_SEC_CHN_INT] = 1500;
11027c2c:	dc83205e 	st.w      	r4, (r3, 0x178)
    pGlobal_config[LL_EXT_ADV_RSC_SLOT_DURATION] = 10000;
11027c30:	dc032060 	st.w      	r0, (r3, 0x180)
    pGlobal_config[LL_EXT_ADV_PROCESS_TARGET] = 150;  //500
11027c34:	dc232063 	st.w      	r1, (r3, 0x18c)
    pGlobal_config[LL_PRD_ADV_PROCESS_TARGET] = 150;
11027c38:	dc232064 	st.w      	r1, (r3, 0x190)
    if (g_system_clk == SYS_CLK_DLL_48M) {
11027c3c:	080f      	bt      	0x11027c5a	// 11027c5a <init_config+0x23a>
        pGlobal_config[EXT_ADV_AUXSCANRSP_DELAY_1MPHY] = 7 + RF_PHY_EXT_PREAMBLE_US;
11027c3e:	320f      	movi      	r2, 15
11027c40:	dc432065 	st.w      	r2, (r3, 0x194)
        pGlobal_config[EXT_ADV_AUXCONNRSP_DELAY_1MPHY] = 7 + RF_PHY_EXT_PREAMBLE_US;
11027c44:	dc432066 	st.w      	r2, (r3, 0x198)
        pGlobal_config[EXT_ADV_AUXSCANRSP_DELAY_2MPHY] = 7 + RF_PHY_EXT_PREAMBLE_US;
11027c48:	dc432067 	st.w      	r2, (r3, 0x19c)
        pGlobal_config[EXT_ADV_AUXCONNRSP_DELAY_2MPHY] = 7 + RF_PHY_EXT_PREAMBLE_US;
11027c4c:	dc432068 	st.w      	r2, (r3, 0x1a0)
        pGlobal_config[EXT_ADV_AUXSCANRSP_DELAY_125KPHY] = 63;
11027c50:	323f      	movi      	r2, 63
11027c52:	dc43206b 	st.w      	r2, (r3, 0x1ac)
        pGlobal_config[EXT_ADV_AUXCONNRSP_DELAY_125KPHY] = 63;
11027c56:	dc43206c 	st.w      	r2, (r3, 0x1b0)
}
11027c5a:	1482      	pop      	r4-r5
    } else if (g_system_clk == SYS_CLK_DLL_48M) {
11027c5c:	9200      	ld.w      	r0, (r2, 0x0)
11027c5e:	3843      	cmpnei      	r0, 3
11027c60:	0b02      	bt      	0x11027a64	// 11027a64 <init_config+0x44>
        pGlobal_config[WAKEUP_DELAY] = 20;
11027c62:	3014      	movi      	r0, 20
11027c64:	06ff      	br      	0x11027a62	// 11027a62 <init_config+0x42>
    } else if (g_system_clk == SYS_CLK_DLL_48M) {
11027c66:	9220      	ld.w      	r1, (r2, 0x0)
11027c68:	3943      	cmpnei      	r1, 3
11027c6a:	0f51      	bf      	0x11027b0c	// 11027b0c <init_config+0xec>
    } else if (g_system_clk == SYS_CLK_DLL_64M) {   //  2019/3/26 add
11027c6c:	9220      	ld.w      	r1, (r2, 0x0)
11027c6e:	3944      	cmpnei      	r1, 4
11027c70:	0b50      	bt      	0x11027b10	// 11027b10 <init_config+0xf0>
        pGlobal_config[SCAN_RSP_DELAY] = 3 + RF_PHY_EXT_PREAMBLE_US;
11027c72:	310b      	movi      	r1, 11
11027c74:	074d      	br      	0x11027b0e	// 11027b0e <init_config+0xee>
    } else if (g_system_clk == SYS_CLK_DLL_48M) {
11027c76:	9220      	ld.w      	r1, (r2, 0x0)
11027c78:	3943      	cmpnei      	r1, 3
11027c7a:	0805      	bt      	0x11027c84	// 11027c84 <init_config+0x264>
        pGlobal_config[LL_ADV_TO_SCAN_REQ_DELAY]    = 10 + RF_PHY_EXT_PREAMBLE_US; //12;      //  2019/3/19 A2: 12 --> 10
11027c7c:	3112      	movi      	r1, 18
11027c7e:	dc232027 	st.w      	r1, (r3, 0x9c)
11027c82:	077f      	br      	0x11027b80	// 11027b80 <init_config+0x160>
    } else if (g_system_clk == SYS_CLK_DLL_64M) {
11027c84:	9220      	ld.w      	r1, (r2, 0x0)
11027c86:	3944      	cmpnei      	r1, 4
11027c88:	0b7e      	bt      	0x11027b84	// 11027b84 <init_config+0x164>
        pGlobal_config[LL_ADV_TO_SCAN_REQ_DELAY]    = 8 + RF_PHY_EXT_PREAMBLE_US;              //  2019/3/26 add
11027c8a:	3110      	movi      	r1, 16
11027c8c:	dc232027 	st.w      	r1, (r3, 0x9c)
        pGlobal_config[LL_ADV_TO_CONN_REQ_DELAY]    = 10 + RF_PHY_EXT_PREAMBLE_US;
11027c90:	3112      	movi      	r1, 18
11027c92:	0777      	br      	0x11027b80	// 11027b80 <init_config+0x160>
11027c94:	1fffa670 	.long	0x1fffa670
11027c98:	1fffbacc 	.long	0x1fffbacc
11027c9c:	1fff08a8 	.long	0x1fff08a8
11027ca0:	03938700 	.long	0x03938700
11027ca4:	1fff0e44 	.long	0x1fff0e44
11027ca8:	11004000 	.long	0x11004000

11027cac <ll_patch_extended_com>:
    JUMP_FUNCTION(LL_ADV_SCHEDULER)                 = (uint32_t)&ll_adv_scheduler1;
11027cac:	106e      	lrw      	r3, 0x1fff0200	// 11027ce4 <ll_patch_extended_com+0x38>
11027cae:	104f      	lrw      	r2, 0x1fff6050	// 11027ce8 <ll_patch_extended_com+0x3c>
    JUMP_FUNCTION(V23_IRQ_HANDLER)                  = (uint32_t)&TIM4_IRQHandler1;
11027cb0:	102f      	lrw      	r1, 0x1fffa008	// 11027cec <ll_patch_extended_com+0x40>
    JUMP_FUNCTION(LL_ADV_SCHEDULER)                 = (uint32_t)&ll_adv_scheduler1;
11027cb2:	b358      	st.w      	r2, (r3, 0x60)
    JUMP_FUNCTION(LL_ADV_ADD_TASK)                  = (uint32_t)&ll_add_adv_task1;
11027cb4:	104f      	lrw      	r2, 0x1101f4dc	// 11027cf0 <ll_patch_extended_com+0x44>
11027cb6:	b359      	st.w      	r2, (r3, 0x64)
    JUMP_FUNCTION(LL_ADV_DEL_TASK)                  = (uint32_t)&ll_delete_adv_task1;
11027cb8:	104f      	lrw      	r2, 0x1101f688	// 11027cf4 <ll_patch_extended_com+0x48>
11027cba:	b35a      	st.w      	r2, (r3, 0x68)
    JUMP_FUNCTION(V23_IRQ_HANDLER)                  = (uint32_t)&TIM4_IRQHandler1;
11027cbc:	104f      	lrw      	r2, 0x1fff0380	// 11027cf8 <ll_patch_extended_com+0x4c>
11027cbe:	b237      	st.w      	r1, (r2, 0x5c)
    JUMP_FUNCTION(LL_SETUP_ADV_EXT_IND_PDU)         = (uint32_t)&llSetupAdvExtIndPDU1;
11027cc0:	104f      	lrw      	r2, 0x1fff71fc	// 11027cfc <ll_patch_extended_com+0x50>
11027cc2:	b34f      	st.w      	r2, (r3, 0x3c)
    JUMP_FUNCTION(LL_SETUP_AUX_ADV_IND_PDU)         = (uint32_t)&llSetupAuxAdvIndPDU1;
11027cc4:	104f      	lrw      	r2, 0x1fff7490	// 11027d00 <ll_patch_extended_com+0x54>
11027cc6:	b350      	st.w      	r2, (r3, 0x40)
    JUMP_FUNCTION(LL_SETUP_AUX_CHAIN_IND_PDU)       = (uint32_t)&llSetupAuxChainIndPDU1;
11027cc8:	104f      	lrw      	r2, 0x1fff7738	// 11027d04 <ll_patch_extended_com+0x58>
11027cca:	b352      	st.w      	r2, (r3, 0x48)
    JUMP_FUNCTION(LL_SETUP_AUX_SCAN_RSP_PDU)        = (uint32_t)&llSetupAuxScanRspPDU1;
11027ccc:	104f      	lrw      	r2, 0x1fffa088	// 11027d08 <ll_patch_extended_com+0x5c>
11027cce:	b35f      	st.w      	r2, (r3, 0x7c)
    JUMP_FUNCTION(LL_SETUP_AUX_CONN_RSP_PDU)        = (uint32_t)&llSetupAuxConnectRspPDU1;
11027cd0:	104f      	lrw      	r2, 0x1fff79a8	// 11027d0c <ll_patch_extended_com+0x60>
11027cd2:	b354      	st.w      	r2, (r3, 0x50)
    JUMP_FUNCTION(LL_SETUP_EXT_ADV_EVENT)           = (uint32_t)&llSetupExtAdvEvent1;
11027cd4:	104f      	lrw      	r2, 0x1fff7c98	// 11027d10 <ll_patch_extended_com+0x64>
11027cd6:	b34d      	st.w      	r2, (r3, 0x34)
    JUMP_FUNCTION(LL_PROCESS_EVENT)           = (uint32_t)&LL_ProcessEvent1;
11027cd8:	ea231fff 	movih      	r3, 8191
11027cdc:	104e      	lrw      	r2, 0x1fff6c50	// 11027d14 <ll_patch_extended_com+0x68>
11027cde:	b34c      	st.w      	r2, (r3, 0x30)
}
11027ce0:	783c      	jmp      	r15
11027ce2:	0000      	bkpt
11027ce4:	1fff0200 	.long	0x1fff0200
11027ce8:	1fff6050 	.long	0x1fff6050
11027cec:	1fffa008 	.long	0x1fffa008
11027cf0:	1101f4dc 	.long	0x1101f4dc
11027cf4:	1101f688 	.long	0x1101f688
11027cf8:	1fff0380 	.long	0x1fff0380
11027cfc:	1fff71fc 	.long	0x1fff71fc
11027d00:	1fff7490 	.long	0x1fff7490
11027d04:	1fff7738 	.long	0x1fff7738
11027d08:	1fffa088 	.long	0x1fffa088
11027d0c:	1fff79a8 	.long	0x1fff79a8
11027d10:	1fff7c98 	.long	0x1fff7c98
11027d14:	1fff6c50 	.long	0x1fff6c50

11027d18 <ll_patch_init>:
{
11027d18:	14d2      	push      	r4-r5, r15
    JUMP_FUNCTION(OSAL_INIT_TASKS) = (uint32_t)osalInitTasks;
11027d1a:	107a      	lrw      	r3, 0x1102775c	// 11027d80 <ll_patch_init+0x68>
11027d1c:	ea221fff 	movih      	r2, 8191
11027d20:	b261      	st.w      	r3, (r2, 0x4)
    JUMP_FUNCTION(LL_GEN_TRUE_RANDOM)               = (uint32_t)&LL_ENC_GenerateTrueRandNum1;
11027d22:	1019      	lrw      	r0, 0x1fff0100	// 11027d84 <ll_patch_init+0x6c>
    JUMP_FUNCTION(TASKS_ARRAY) = (uint32_t)tasksArr;
11027d24:	1079      	lrw      	r3, 0x1fffa674	// 11027d88 <ll_patch_init+0x70>
    JUMP_FUNCTION(RF_INIT) = (uint32_t)&rf_phy_ini;
11027d26:	103a      	lrw      	r1, 0x1fff46c4	// 11027d8c <ll_patch_init+0x74>
    JUMP_FUNCTION(OSAL_POWER_CONSERVE)              = (uint32_t)&osal_pwrmgr_powerconserve1;
11027d28:	109a      	lrw      	r4, 0x1fff5ba8	// 11027d90 <ll_patch_init+0x78>
    JUMP_FUNCTION(OSAL_SET_EVENT)                     = (uint32_t)&osal_set_event1;
11027d2a:	10bb      	lrw      	r5, 0x110277c4	// 11027d94 <ll_patch_init+0x7c>
    JUMP_FUNCTION(TASKS_ARRAY) = (uint32_t)tasksArr;
11027d2c:	b262      	st.w      	r3, (r2, 0x8)
    JUMP_FUNCTION(TASK_COUNT) = (uint32_t)&tasksCnt;
11027d2e:	107b      	lrw      	r3, 0x1fffa67c	// 11027d98 <ll_patch_init+0x80>
11027d30:	b263      	st.w      	r3, (r2, 0xc)
    JUMP_FUNCTION(TASK_EVENTS) = (uint32_t)&tasksEvents;
11027d32:	107b      	lrw      	r3, 0x1fffcf6c	// 11027d9c <ll_patch_init+0x84>
11027d34:	b264      	st.w      	r3, (r2, 0x10)
    JUMP_FUNCTION(RF_INIT) = (uint32_t)&rf_phy_ini;
11027d36:	107b      	lrw      	r3, 0x1fff0180	// 11027da0 <ll_patch_init+0x88>
11027d38:	b326      	st.w      	r1, (r3, 0x18)
    JUMP_FUNCTION(RF_PHY_CHANGE)                    = (uint32_t)&rf_phy_change_cfg0;
11027d3a:	103b      	lrw      	r1, 0x1fff42d4	// 11027da4 <ll_patch_init+0x8c>
11027d3c:	b32b      	st.w      	r1, (r3, 0x2c)
    JUMP_FUNCTION(LL_GEN_TRUE_RANDOM)               = (uint32_t)&LL_ENC_GenerateTrueRandNum1;
11027d3e:	103b      	lrw      	r1, 0x1fff5e78	// 11027da8 <ll_patch_init+0x90>
11027d40:	b027      	st.w      	r1, (r0, 0x1c)
    JUMP_FUNCTION(OSAL_POWER_CONSERVE)              = (uint32_t)&osal_pwrmgr_powerconserve1;
11027d42:	103b      	lrw      	r1, 0x1fff0080	// 11027dac <ll_patch_init+0x94>
11027d44:	b19c      	st.w      	r4, (r1, 0x70)
    JUMP_FUNCTION(OSAL_SET_EVENT)                     = (uint32_t)&osal_set_event1;
11027d46:	109b      	lrw      	r4, 0x1fff0300	// 11027db0 <ll_patch_init+0x98>
11027d48:	b4b2      	st.w      	r5, (r4, 0x48)
    JUMP_FUNCTION(HCI_PROCESS_EVENT)                     = (uint32_t)&HCI_ProcessEvent1;
11027d4a:	109b      	lrw      	r4, 0x11026f38	// 11027db4 <ll_patch_init+0x9c>
11027d4c:	b09b      	st.w      	r4, (r0, 0x6c)
    JUMP_FUNCTION(LL_HW_GO)                         = (uint32_t)&ll_hw_go1;
11027d4e:	109b      	lrw      	r4, 0x1fff58f4	// 11027db8 <ll_patch_init+0xa0>
11027d50:	b082      	st.w      	r4, (r0, 0x8)
    JUMP_FUNCTION(WAKEUP_INIT)                         = (uint32_t)&wakeup_init1;
11027d52:	101b      	lrw      	r0, 0x1fff3c2c	// 11027dbc <ll_patch_init+0xa4>
11027d54:	b307      	st.w      	r0, (r3, 0x1c)
    JUMP_FUNCTION(LL_TXDATA)                         = (uint32_t)&LL_TxData1;
11027d56:	101b      	lrw      	r0, 0x1fff5bac	// 11027dc0 <ll_patch_init+0xa8>
11027d58:	b20e      	st.w      	r0, (r2, 0x38)
    JUMP_FUNCTION(RF_CALIBRATTE)                    = (uint32_t)&rf_calibrate1;
11027d5a:	105b      	lrw      	r2, 0x1fff978c	// 11027dc4 <ll_patch_init+0xac>
11027d5c:	b34a      	st.w      	r2, (r3, 0x28)
    JUMP_FUNCTION(LL_CONN_TERMINATE)                = (uint32_t)&llConnTerminate1;
11027d5e:	105b      	lrw      	r2, 0x1fff5c1c	// 11027dc8 <ll_patch_init+0xb0>
11027d60:	b142      	st.w      	r2, (r1, 0x8)
    JUMP_FUNCTION(LL_SEC_ADV_ALLOW)                = (uint32_t)&llSecAdvAllow1;
11027d62:	105b      	lrw      	r2, 0x1fff5c7c	// 11027dcc <ll_patch_init+0xb4>
11027d64:	b35c      	st.w      	r2, (r3, 0x70)
    JUMP_FUNCTION(LL_CALC_MAX_SCAN_TIME)                = (uint32_t)&llCalcMaxScanTime1;
11027d66:	105b      	lrw      	r2, 0x1fff5cd0	// 11027dd0 <ll_patch_init+0xb8>
11027d68:	b35d      	st.w      	r2, (r3, 0x74)
    JUMP_FUNCTION(LL_ADP_ADJ_NEXT_TIME)            = (uint32_t)&ll_adptive_adj_next_time1;
11027d6a:	105b      	lrw      	r2, 0x1fff5acc	// 11027dd4 <ll_patch_init+0xbc>
    JUMP_FUNCTION(LL_MOVE_TO_SLAVE_FUNCTION)            = (uint32_t)&move_to_slave_function3;
11027d6c:	107b      	lrw      	r3, 0x1fffa1f4	// 11027dd8 <ll_patch_init+0xc0>
11027d6e:	b165      	st.w      	r3, (r1, 0x14)
    JUMP_FUNCTION(CONFIG_RTC)                       = (uint32_t)&config_RTC1;
11027d70:	107b      	lrw      	r3, 0x1fff5e80	// 11027ddc <ll_patch_init+0xc4>
11027d72:	b17f      	st.w      	r3, (r1, 0x7c)
    JUMP_FUNCTION(LL_ADP_ADJ_NEXT_TIME)            = (uint32_t)&ll_adptive_adj_next_time1;
11027d74:	107b      	lrw      	r3, 0x1fff0200	// 11027de0 <ll_patch_init+0xc8>
11027d76:	b348      	st.w      	r2, (r3, 0x20)
    ll_patch_extended_com();
11027d78:	e3ffff9a 	bsr      	0x11027cac	// 11027cac <ll_patch_extended_com>
}
11027d7c:	1492      	pop      	r4-r5, r15
11027d7e:	0000      	bkpt
11027d80:	1102775c 	.long	0x1102775c
11027d84:	1fff0100 	.long	0x1fff0100
11027d88:	1fffa674 	.long	0x1fffa674
11027d8c:	1fff46c4 	.long	0x1fff46c4
11027d90:	1fff5ba8 	.long	0x1fff5ba8
11027d94:	110277c4 	.long	0x110277c4
11027d98:	1fffa67c 	.long	0x1fffa67c
11027d9c:	1fffcf6c 	.long	0x1fffcf6c
11027da0:	1fff0180 	.long	0x1fff0180
11027da4:	1fff42d4 	.long	0x1fff42d4
11027da8:	1fff5e78 	.long	0x1fff5e78
11027dac:	1fff0080 	.long	0x1fff0080
11027db0:	1fff0300 	.long	0x1fff0300
11027db4:	11026f38 	.long	0x11026f38
11027db8:	1fff58f4 	.long	0x1fff58f4
11027dbc:	1fff3c2c 	.long	0x1fff3c2c
11027dc0:	1fff5bac 	.long	0x1fff5bac
11027dc4:	1fff978c 	.long	0x1fff978c
11027dc8:	1fff5c1c 	.long	0x1fff5c1c
11027dcc:	1fff5c7c 	.long	0x1fff5c7c
11027dd0:	1fff5cd0 	.long	0x1fff5cd0
11027dd4:	1fff5acc 	.long	0x1fff5acc
11027dd8:	1fffa1f4 	.long	0x1fffa1f4
11027ddc:	1fff5e80 	.long	0x1fff5e80
11027de0:	1fff0200 	.long	0x1fff0200

11027de4 <hal_rfphy_init>:
{
11027de4:	14d1      	push      	r4, r15
11027de6:	1421      	subi      	r14, r14, 4
    g_rfPhyFreqOffSet   = RF_PHY_FREQ_FOFF_00KHZ;
11027de8:	119a      	lrw      	r4, 0x1fff0ea6	// 11027ed0 <hal_rfphy_init+0xec>
    ll_patch_init();
11027dea:	e3ffff97 	bsr      	0x11027d18	// 11027d18 <ll_patch_init>
    g_rfPhyTxPower  = RF_PHY_TX_POWER_0DBM;
11027dee:	117a      	lrw      	r3, 0x1fff08ac	// 11027ed4 <hal_rfphy_init+0xf0>
11027df0:	321f      	movi      	r2, 31
    int ret = dut_hal_freqoff_get(&freqoff);
11027df2:	6c3b      	mov      	r0, r14
    g_rfPhyTxPower  = RF_PHY_TX_POWER_0DBM;
11027df4:	a340      	st.b      	r2, (r3, 0x0)
    g_rfPhyPktFmt   = PKT_FMT_BLE1M;
11027df6:	3201      	movi      	r2, 1
11027df8:	1178      	lrw      	r3, 0x1fff08ae	// 11027ed8 <hal_rfphy_init+0xf4>
11027dfa:	a340      	st.b      	r2, (r3, 0x0)
    g_rfPhyFreqOffSet   = RF_PHY_FREQ_FOFF_00KHZ;
11027dfc:	3300      	movi      	r3, 0
11027dfe:	a460      	st.b      	r3, (r4, 0x0)
    int32_t freqoff = RF_PHY_FREQ_FOFF_00KHZ;
11027e00:	3300      	movi      	r3, 0
11027e02:	b860      	st.w      	r3, (r14, 0x0)
    int ret = dut_hal_freqoff_get(&freqoff);
11027e04:	e3ffe3e4 	bsr      	0x110245cc	// 110245cc <dut_hal_freqoff_get>
    if (ret == 0 && freqoff != 0) {
11027e08:	3840      	cmpnei      	r0, 0
11027e0a:	0807      	bt      	0x11027e18	// 11027e18 <hal_rfphy_init+0x34>
11027e0c:	9860      	ld.w      	r3, (r14, 0x0)
11027e0e:	3b40      	cmpnei      	r3, 0
11027e10:	0c04      	bf      	0x11027e18	// 11027e18 <hal_rfphy_init+0x34>
        g_rfPhyFreqOffSet = freqoff >> 2; // x/4
11027e12:	5362      	asri      	r3, r3, 2
11027e14:	74ce      	sextb      	r3, r3
11027e16:	a460      	st.b      	r3, (r4, 0x0)
    XTAL16M_CAP_SETTING(xtalcap);
11027e18:	1151      	lrw      	r2, 0x4000f080	// 11027edc <hal_rfphy_init+0xf8>
11027e1a:	3100      	movi      	r1, 0
11027e1c:	926f      	ld.w      	r3, (r2, 0x3c)
11027e1e:	291f      	subi      	r1, 32
11027e20:	68c4      	and      	r3, r1
11027e22:	ec630009 	ori      	r3, r3, 9
11027e26:	b26f      	st.w      	r3, (r2, 0x3c)
11027e28:	6c03      	mov      	r0, r0
    XTAL16M_CURRENT_SETTING(0x1);
11027e2a:	926f      	ld.w      	r3, (r2, 0x3c)
11027e2c:	3b85      	bclri      	r3, 5
11027e2e:	3b86      	bclri      	r3, 6
11027e30:	ec630020 	ori      	r3, r3, 32
11027e34:	b26f      	st.w      	r3, (r2, 0x3c)
11027e36:	6c03      	mov      	r0, r0
    patch_efuse_init();
11027e38:	e3fffcf2 	bsr      	0x1102781c	// 1102781c <patch_efuse_init>
    VIC->ICER[_IR_IDX(IRQn)] = (uint32_t)(1UL << ((uint32_t)(int32_t)IRQn % 32));
11027e3c:	1189      	lrw      	r4, 0xe000e100	// 11027ee0 <hal_rfphy_init+0xfc>
    ble_main();
11027e3e:	e0000a95 	bsr      	0x11029368	// 11029368 <cpu_task_stack_init+0x9c0>
11027e42:	3380      	movi      	r3, 128
11027e44:	436e      	lsli      	r3, r3, 14
11027e46:	dc642020 	st.w      	r3, (r4, 0x80)
    VIC->IPR[_IP_IDX(IRQn)] = ((uint32_t)(VIC->IPR[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
11027e4a:	3200      	movi      	r2, 0
11027e4c:	d86420c1 	ld.w      	r3, (r4, 0x304)
11027e50:	2aff      	subi      	r2, 256
11027e52:	68c8      	and      	r3, r2
11027e54:	dc6420c1 	st.w      	r3, (r4, 0x304)
    drv_irq_register(BB_IRQn,   __LL_IRQHandler);
11027e58:	3004      	movi      	r0, 4
11027e5a:	d86420c5 	ld.w      	r3, (r4, 0x314)
11027e5e:	68c8      	and      	r3, r2
11027e60:	ec630040 	ori      	r3, r3, 64
11027e64:	dc6420c5 	st.w      	r3, (r4, 0x314)
11027e68:	103f      	lrw      	r1, 0x1fffa4b4	// 11027ee4 <hal_rfphy_init+0x100>
11027e6a:	d86420c5 	ld.w      	r3, (r4, 0x314)
11027e6e:	4368      	lsli      	r3, r3, 8
11027e70:	4b68      	lsri      	r3, r3, 8
11027e72:	3bbe      	bseti      	r3, 30
11027e74:	dc6420c5 	st.w      	r3, (r4, 0x314)
11027e78:	e3ffd936 	bsr      	0x110230e4	// 110230e4 <drv_irq_register>
    drv_irq_register(TIM1_IRQn, __TIM1_IRQHandler);
11027e7c:	103b      	lrw      	r1, 0x1fff5d14	// 11027ee8 <hal_rfphy_init+0x104>
11027e7e:	3014      	movi      	r0, 20
11027e80:	e3ffd932 	bsr      	0x110230e4	// 110230e4 <drv_irq_register>
    drv_irq_register(TIM3_IRQn, TIM3_IRQHandler);
11027e84:	103a      	lrw      	r1, 0x5870	// 11027eec <hal_rfphy_init+0x108>
11027e86:	3016      	movi      	r0, 22
11027e88:	e3ffd92e 	bsr      	0x110230e4	// 110230e4 <drv_irq_register>
    drv_irq_register(TIM4_IRQn, TIM4_IRQHandler1);
11027e8c:	1039      	lrw      	r1, 0x1fffa008	// 11027ef0 <hal_rfphy_init+0x10c>
11027e8e:	3017      	movi      	r0, 23
11027e90:	e3ffd92a 	bsr      	0x110230e4	// 110230e4 <drv_irq_register>
11027e94:	d86420c1 	ld.w      	r3, (r4, 0x304)
11027e98:	3200      	movi      	r2, 0
11027e9a:	2aff      	subi      	r2, 256
11027e9c:	68c8      	and      	r3, r2
11027e9e:	dc6420c1 	st.w      	r3, (r4, 0x304)
    drv_irq_register(RX_SIGNAL_IRQn, rx_signal_handler);
11027ea2:	3002      	movi      	r0, 2
11027ea4:	d86420c5 	ld.w      	r3, (r4, 0x314)
11027ea8:	68c8      	and      	r3, r2
11027eaa:	dc6420c5 	st.w      	r3, (r4, 0x314)
11027eae:	1032      	lrw      	r1, 0x1fffa1dc	// 11027ef4 <hal_rfphy_init+0x110>
11027eb0:	e3ffd91a 	bsr      	0x110230e4	// 110230e4 <drv_irq_register>
    drv_irq_enable(RX_SIGNAL_IRQn);
11027eb4:	3002      	movi      	r0, 2
11027eb6:	e0000a95 	bsr      	0x110293e0	// 110293e0 <cpu_task_stack_init+0xa38>
11027eba:	d86420c0 	ld.w      	r3, (r4, 0x300)
11027ebe:	ea22ff01 	movih      	r2, 65281
11027ec2:	2a00      	subi      	r2, 1
11027ec4:	68c8      	and      	r3, r2
11027ec6:	3bb7      	bseti      	r3, 23
11027ec8:	dc6420c0 	st.w      	r3, (r4, 0x300)
}
11027ecc:	1401      	addi      	r14, r14, 4
11027ece:	1491      	pop      	r4, r15
11027ed0:	1fff0ea6 	.long	0x1fff0ea6
11027ed4:	1fff08ac 	.long	0x1fff08ac
11027ed8:	1fff08ae 	.long	0x1fff08ae
11027edc:	4000f080 	.long	0x4000f080
11027ee0:	e000e100 	.long	0xe000e100
11027ee4:	1fffa4b4 	.long	0x1fffa4b4
11027ee8:	1fff5d14 	.long	0x1fff5d14
11027eec:	00005870 	.long	0x00005870
11027ef0:	1fffa008 	.long	0x1fffa008
11027ef4:	1fffa1dc 	.long	0x1fffa1dc

11027ef8 <bt_hci_uart_h5_register>:
 * @brief  register bluetooth driver of h5
 * @param  [in] config
 * @return
 */
void bt_hci_uart_h5_register(int uart_idx, uart_config_t config)
{
11027ef8:	1423      	subi      	r14, r14, 12
11027efa:	14d0      	push      	r15
11027efc:	b842      	st.w      	r2, (r14, 0x8)
11027efe:	b863      	st.w      	r3, (r14, 0xc)
    hci_uart_h5.uart_idx = uart_idx;
    hci_uart_h5.uart_config = config;
11027f00:	3218      	movi      	r2, 24
    hci_uart_h5.uart_idx = uart_idx;
11027f02:	1069      	lrw      	r3, 0x1fffbd00	// 11027f24 <bt_hci_uart_h5_register+0x2c>
{
11027f04:	b821      	st.w      	r1, (r14, 0x4)
    hci_uart_h5.uart_idx = uart_idx;
11027f06:	b300      	st.w      	r0, (r3, 0x0)
    hci_uart_h5.uart_config = config;
11027f08:	1901      	addi      	r1, r14, 4
11027f0a:	5b0e      	addi      	r0, r3, 4
11027f0c:	e000085a 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
    driver_register(&h5_driver.drv, NULL, 0);
11027f10:	3200      	movi      	r2, 0
11027f12:	3100      	movi      	r1, 0
11027f14:	1005      	lrw      	r0, 0x1fffa63c	// 11027f28 <bt_hci_uart_h5_register+0x30>
11027f16:	e3ffcecd 	bsr      	0x11021cb0	// 11021cb0 <driver_register>
}
11027f1a:	d9ee2000 	ld.w      	r15, (r14, 0x0)
11027f1e:	1404      	addi      	r14, r14, 16
11027f20:	783c      	jmp      	r15
11027f22:	0000      	bkpt
11027f24:	1fffbd00 	.long	0x1fffbd00
11027f28:	1fffa63c 	.long	0x1fffa63c

11027f2c <malloc>:
void *yoc_realloc(void *ptr, size_t size, void *caller);
void *yoc_malloc(int32_t size, void *caller);
void yoc_free(void *ptr, void *unsed);

void *malloc(size_t size)
{
11027f2c:	14d0      	push      	r15
    return yoc_malloc(size, __builtin_return_address(0));
11027f2e:	6c7f      	mov      	r1, r15
11027f30:	e3ffcd4c 	bsr      	0x110219c8	// 110219c8 <yoc_malloc>
}
11027f34:	1490      	pop      	r15

11027f36 <free>:

void free(void *ptr)
{
11027f36:	14d0      	push      	r15
    if (ptr)
11027f38:	3840      	cmpnei      	r0, 0
11027f3a:	0c04      	bf      	0x11027f42	// 11027f42 <free+0xc>
        yoc_free(ptr, __builtin_return_address(0));
11027f3c:	6c7f      	mov      	r1, r15
11027f3e:	e3ffcd51 	bsr      	0x110219e0	// 110219e0 <yoc_free>
}
11027f42:	1490      	pop      	r15

11027f44 <vasprintf>:


#define CHUNKSIZE (256)

int vasprintf(char **ret, const char *fmt, va_list ap)
{
11027f44:	14d4      	push      	r4-r7, r15
11027f46:	1423      	subi      	r14, r14, 12
11027f48:	b800      	st.w      	r0, (r14, 0x0)
    size_t chunks;
    size_t buflen;
    char * buf;
    int    len;

    chunks = ((strlen(fmt) + 1) / CHUNKSIZE) + 1;
11027f4a:	6c07      	mov      	r0, r1
{
11027f4c:	b842      	st.w      	r2, (r14, 0x8)
11027f4e:	b821      	st.w      	r1, (r14, 0x4)
    chunks = ((strlen(fmt) + 1) / CHUNKSIZE) + 1;
11027f50:	e3ffa8b2 	bsr      	0x1101d0b4	// 1101d0b4 <__strlen_fast>
    buflen = chunks * CHUNKSIZE;

    *ret = NULL;
11027f54:	9860      	ld.w      	r3, (r14, 0x0)
11027f56:	3200      	movi      	r2, 0
    chunks = ((strlen(fmt) + 1) / CHUNKSIZE) + 1;
11027f58:	5882      	addi      	r4, r0, 1
    *ret = NULL;
11027f5a:	b340      	st.w      	r2, (r3, 0x0)
    chunks = ((strlen(fmt) + 1) / CHUNKSIZE) + 1;
11027f5c:	4c88      	lsri      	r4, r4, 8
11027f5e:	2400      	addi      	r4, 1
    buflen = chunks * CHUNKSIZE;
11027f60:	4488      	lsli      	r4, r4, 8
11027f62:	e4c400ff 	addi      	r6, r4, 256
    for (;;) {
        buf = malloc(buflen);
11027f66:	6c13      	mov      	r0, r4
11027f68:	e3ffffe2 	bsr      	0x11027f2c	// 11027f2c <malloc>
11027f6c:	6d43      	mov      	r5, r0
        if (buf == NULL) {
11027f6e:	3840      	cmpnei      	r0, 0
11027f70:	0c2b      	bf      	0x11027fc6	// 11027fc6 <vasprintf+0x82>
            return -ENOMEM;
        }
        len = vsnprintf(buf, buflen, fmt, ap);
11027f72:	9862      	ld.w      	r3, (r14, 0x8)
11027f74:	9841      	ld.w      	r2, (r14, 0x4)
11027f76:	6c53      	mov      	r1, r4
11027f78:	e3ffa6f7 	bsr      	0x1101cd66	// 1101cd66 <__GI_vsnprintf>
11027f7c:	6dc3      	mov      	r7, r0

        if (len >= 0 && (size_t)len < buflen - 1) {
11027f7e:	38df      	btsti      	r0, 31
11027f80:	0804      	bt      	0x11027f88	// 11027f88 <vasprintf+0x44>
11027f82:	2c00      	subi      	r4, 1
11027f84:	6500      	cmphs      	r0, r4
11027f86:	0c0e      	bf      	0x11027fa2	// 11027fa2 <vasprintf+0x5e>
            break;
        }
        free(buf);
11027f88:	6c17      	mov      	r0, r5
11027f8a:	e3ffffd6 	bsr      	0x11027f36	// 11027f36 <free>
        /*
        * len >= 0 is required for vsnprintf implementations that
        * return -1 for insufficient buffer
        */

        if (len >= 0 && buflen <= (size_t)len) {
11027f8e:	3fdf      	btsti      	r7, 31
11027f90:	0806      	bt      	0x11027f9c	// 11027f9c <vasprintf+0x58>
            buflen = len + 1;
11027f92:	659c      	cmphs      	r7, r6
11027f94:	5f82      	addi      	r4, r7, 1
11027f96:	c4860c20 	incf      	r4, r6, 0
11027f9a:	0402      	br      	0x11027f9e	// 11027f9e <vasprintf+0x5a>
11027f9c:	6d1b      	mov      	r4, r6
11027f9e:	26ff      	addi      	r6, 256
11027fa0:	07e3      	br      	0x11027f66	// 11027f66 <vasprintf+0x22>
        }
    }

    if (len > 0 && buf != NULL) {
11027fa2:	3840      	cmpnei      	r0, 0
11027fa4:	0c0b      	bf      	0x11027fba	// 11027fba <vasprintf+0x76>
        // strip the string
        *ret = strdup(buf);
11027fa6:	6c17      	mov      	r0, r5
11027fa8:	e000006d 	bsr      	0x11028082	// 11028082 <strdup>
11027fac:	9860      	ld.w      	r3, (r14, 0x0)
        if (*ret != NULL)
11027fae:	3840      	cmpnei      	r0, 0
        *ret = strdup(buf);
11027fb0:	b300      	st.w      	r0, (r3, 0x0)
        if (*ret != NULL)
11027fb2:	0c07      	bf      	0x11027fc0	// 11027fc0 <vasprintf+0x7c>
            free(buf);
11027fb4:	6c17      	mov      	r0, r5
11027fb6:	e3ffffc0 	bsr      	0x11027f36	// 11027f36 <free>
        else
            *ret = buf;
    }

    return len;
}
11027fba:	6c1f      	mov      	r0, r7
11027fbc:	1403      	addi      	r14, r14, 12
11027fbe:	1494      	pop      	r4-r7, r15
            *ret = buf;
11027fc0:	9860      	ld.w      	r3, (r14, 0x0)
11027fc2:	b3a0      	st.w      	r5, (r3, 0x0)
11027fc4:	07fb      	br      	0x11027fba	// 11027fba <vasprintf+0x76>
            return -ENOMEM;
11027fc6:	3700      	movi      	r7, 0
11027fc8:	2f0b      	subi      	r7, 12
11027fca:	07f8      	br      	0x11027fba	// 11027fba <vasprintf+0x76>

11027fcc <strtoul>:
 
#define isdigit(c)    ('0' <= (c) && (c) <= '9')


unsigned long strtoul(const char *cp,char **endp,unsigned int base)
{
11027fcc:	14c4      	push      	r4-r7
11027fce:	6cc3      	mov      	r3, r0
    unsigned long result = 0,value;
 
    if (!base) {
11027fd0:	3a40      	cmpnei      	r2, 0
11027fd2:	082a      	bt      	0x11028026	// 11028026 <strtoul+0x5a>
        base = 10;
        if (*cp == '0') {
11027fd4:	8040      	ld.b      	r2, (r0, 0x0)
11027fd6:	eb420030 	cmpnei      	r2, 48
11027fda:	0834      	bt      	0x11028042	// 11028042 <strtoul+0x76>
            base = 8;
            cp++;
            if ((TOLOWER(*cp) == 'x') && isxdigit(cp[1])) {
11027fdc:	8041      	ld.b      	r2, (r0, 0x1)
11027fde:	ec420020 	ori      	r2, r2, 32
            cp++;
11027fe2:	5882      	addi      	r4, r0, 1
            if ((TOLOWER(*cp) == 'x') && isxdigit(cp[1])) {
11027fe4:	eb420078 	cmpnei      	r2, 120
11027fe8:	082f      	bt      	0x11028046	// 11028046 <strtoul+0x7a>
11027fea:	8042      	ld.b      	r2, (r0, 0x2)
11027fec:	e402102f 	subi      	r0, r2, 48
11027ff0:	7400      	zextb      	r0, r0
11027ff2:	3809      	cmphsi      	r0, 10
11027ff4:	0c06      	bf      	0x11028000	// 11028000 <strtoul+0x34>
11027ff6:	3a85      	bclri      	r2, 5
11027ff8:	2a40      	subi      	r2, 65
11027ffa:	7488      	zextb      	r2, r2
11027ffc:	3a05      	cmphsi      	r2, 6
11027ffe:	0824      	bt      	0x11028046	// 11028046 <strtoul+0x7a>
                cp++;
                base = 16;
11028000:	3210      	movi      	r2, 16
                cp++;
11028002:	2301      	addi      	r3, 2
        base = 10;
11028004:	3000      	movi      	r0, 0
    } else if (base == 16) {
        if (cp[0] == '0' && TOLOWER(cp[1]) == 'x')
            cp += 2;
    }
    while (isxdigit(*cp) &&
           (value = isdigit(*cp) ? *cp-'0' : TOLOWER(*cp)-'a'+10) < base) {
11028006:	3520      	movi      	r5, 32
    while (isxdigit(*cp) &&
11028008:	8380      	ld.b      	r4, (r3, 0x0)
1102800a:	e4c4102f 	subi      	r6, r4, 48
1102800e:	75d8      	zextb      	r7, r6
11028010:	3f09      	cmphsi      	r7, 10
11028012:	0c1d      	bf      	0x1102804c	// 1102804c <strtoul+0x80>
11028014:	c4a42826 	bclri      	r6, r4, 5
11028018:	2e40      	subi      	r6, 65
1102801a:	7598      	zextb      	r6, r6
1102801c:	3e05      	cmphsi      	r6, 6
1102801e:	0c1e      	bf      	0x1102805a	// 1102805a <strtoul+0x8e>
        result = result*base + value;
        cp++;
    }
    if (endp)
11028020:	3940      	cmpnei      	r1, 0
11028022:	0820      	bt      	0x11028062	// 11028062 <strtoul+0x96>
        *endp = (char *)cp;
    return result;
}
11028024:	1484      	pop      	r4-r7
    } else if (base == 16) {
11028026:	3a50      	cmpnei      	r2, 16
11028028:	0bee      	bt      	0x11028004	// 11028004 <strtoul+0x38>
        if (cp[0] == '0' && TOLOWER(cp[1]) == 'x')
1102802a:	8000      	ld.b      	r0, (r0, 0x0)
1102802c:	eb400030 	cmpnei      	r0, 48
11028030:	0bea      	bt      	0x11028004	// 11028004 <strtoul+0x38>
11028032:	8301      	ld.b      	r0, (r3, 0x1)
11028034:	ec000020 	ori      	r0, r0, 32
            cp += 2;
11028038:	eb400078 	cmpnei      	r0, 120
1102803c:	c4630c22 	incf      	r3, r3, 2
11028040:	07e2      	br      	0x11028004	// 11028004 <strtoul+0x38>
        base = 10;
11028042:	320a      	movi      	r2, 10
11028044:	07e0      	br      	0x11028004	// 11028004 <strtoul+0x38>
            cp++;
11028046:	6cd3      	mov      	r3, r4
            base = 8;
11028048:	3208      	movi      	r2, 8
1102804a:	07dd      	br      	0x11028004	// 11028004 <strtoul+0x38>
           (value = isdigit(*cp) ? *cp-'0' : TOLOWER(*cp)-'a'+10) < base) {
1102804c:	6d1b      	mov      	r4, r6
    while (isxdigit(*cp) &&
1102804e:	6490      	cmphs      	r4, r2
11028050:	0be8      	bt      	0x11028020	// 11028020 <strtoul+0x54>
        result = result*base + value;
11028052:	7c08      	mult      	r0, r2
        cp++;
11028054:	2300      	addi      	r3, 1
        result = result*base + value;
11028056:	6010      	addu      	r0, r4
11028058:	07d8      	br      	0x11028008	// 11028008 <strtoul+0x3c>
           (value = isdigit(*cp) ? *cp-'0' : TOLOWER(*cp)-'a'+10) < base) {
1102805a:	6d14      	or      	r4, r5
1102805c:	7510      	zextb      	r4, r4
1102805e:	2c56      	subi      	r4, 87
11028060:	07f7      	br      	0x1102804e	// 1102804e <strtoul+0x82>
        *endp = (char *)cp;
11028062:	b160      	st.w      	r3, (r1, 0x0)
    return result;
11028064:	07e0      	br      	0x11028024	// 11028024 <strtoul+0x58>

11028066 <strtol>:


long strtol(const char *cp,char **endp,unsigned int base)
{
11028066:	14d0      	push      	r15
    if(*cp=='-')
11028068:	8060      	ld.b      	r3, (r0, 0x0)
1102806a:	eb43002d 	cmpnei      	r3, 45
1102806e:	0807      	bt      	0x1102807c	// 1102807c <strtol+0x16>
        return -strtoul(cp+1,endp,base);
11028070:	2000      	addi      	r0, 1
11028072:	e3ffffad 	bsr      	0x11027fcc	// 11027fcc <strtoul>
11028076:	3300      	movi      	r3, 0
11028078:	5b01      	subu      	r0, r3, r0
    return strtoul(cp,endp,base);
1102807a:	1490      	pop      	r15
    return strtoul(cp,endp,base);
1102807c:	e3ffffa8 	bsr      	0x11027fcc	// 11027fcc <strtoul>
11028080:	07fd      	br      	0x1102807a	// 1102807a <strtol+0x14>

11028082 <strdup>:

#include <string.h>
#include <stdlib.h>

char *strdup(const char *s)
{
11028082:	14d3      	push      	r4-r6, r15
11028084:	6d83      	mov      	r6, r0
    if (s != NULL) {
11028086:	3840      	cmpnei      	r0, 0
11028088:	0c10      	bf      	0x110280a8	// 110280a8 <strdup+0x26>
        char *ptr;
        int   len;

        len = strlen(s) + 1;
1102808a:	e3ffa815 	bsr      	0x1101d0b4	// 1101d0b4 <__strlen_fast>
1102808e:	58a2      	addi      	r5, r0, 1
        ptr = (char *)malloc(len);
11028090:	6c17      	mov      	r0, r5
11028092:	e3ffff4d 	bsr      	0x11027f2c	// 11027f2c <malloc>
11028096:	6d03      	mov      	r4, r0

        if (ptr) {
11028098:	3840      	cmpnei      	r0, 0
1102809a:	0c05      	bf      	0x110280a4	// 110280a4 <strdup+0x22>
            memcpy(ptr, s, len);
1102809c:	6c97      	mov      	r2, r5
1102809e:	6c5b      	mov      	r1, r6
110280a0:	e0000790 	bsr      	0x11028fc0	// 11028fc0 <cpu_task_stack_init+0x618>
            return ptr;
        }
    }

    return NULL;
}
110280a4:	6c13      	mov      	r0, r4
110280a6:	1493      	pop      	r4-r6, r15
    return NULL;
110280a8:	3400      	movi      	r4, 0
110280aa:	07fd      	br      	0x110280a4	// 110280a4 <strdup+0x22>

110280ac <strerror>:
#include <string.h>
#include <errno.h>

static char g_strerr[16];
char *strerror(int errnum)
{
110280ac:	14d0      	push      	r15
    if (errnum > ESTRPIPE || errnum < EPERM) {
110280ae:	5863      	subi      	r3, r0, 1
110280b0:	eb030055 	cmphsi      	r3, 86
{
110280b4:	6c83      	mov      	r2, r0
    if (errnum > ESTRPIPE || errnum < EPERM) {
110280b6:	0817      	bt      	0x110280e4	// 110280e4 <strerror+0x38>
        return NULL;
    }

    switch (errnum) {
110280b8:	384c      	cmpnei      	r0, 12
110280ba:	0c11      	bf      	0x110280dc	// 110280dc <strerror+0x30>
110280bc:	382c      	cmplti      	r0, 13
110280be:	0c09      	bf      	0x110280d0	// 110280d0 <strerror+0x24>
110280c0:	3845      	cmpnei      	r0, 5
110280c2:	0c13      	bf      	0x110280e8	// 110280e8 <strerror+0x3c>
        case ENOMEM:
            return "ENOMEM";
        case EBUSY:
            return "EBUSY";
        default:
            sprintf(g_strerr, "%d", errnum);
110280c4:	102a      	lrw      	r1, 0x11011a71	// 110280ec <strerror+0x40>
110280c6:	100b      	lrw      	r0, 0x1fffcbc4	// 110280f0 <strerror+0x44>
110280c8:	e3ffa67c 	bsr      	0x1101cdc0	// 1101cdc0 <__GI_sprintf>
    }

    return g_strerr;
110280cc:	1009      	lrw      	r0, 0x1fffcbc4	// 110280f0 <strerror+0x44>
110280ce:	0406      	br      	0x110280da	// 110280da <strerror+0x2e>
    switch (errnum) {
110280d0:	3850      	cmpnei      	r0, 16
110280d2:	0c07      	bf      	0x110280e0	// 110280e0 <strerror+0x34>
110280d4:	3856      	cmpnei      	r0, 22
110280d6:	0bf7      	bt      	0x110280c4	// 110280c4 <strerror+0x18>
            return "EINVAL";
110280d8:	1007      	lrw      	r0, 0x11012148	// 110280f4 <strerror+0x48>
}
110280da:	1490      	pop      	r15
            return "ENOMEM";
110280dc:	1007      	lrw      	r0, 0x1101214f	// 110280f8 <strerror+0x4c>
110280de:	07fe      	br      	0x110280da	// 110280da <strerror+0x2e>
            return "EBUSY";
110280e0:	1007      	lrw      	r0, 0x11012156	// 110280fc <strerror+0x50>
110280e2:	07fc      	br      	0x110280da	// 110280da <strerror+0x2e>
        return NULL;
110280e4:	3000      	movi      	r0, 0
110280e6:	07fa      	br      	0x110280da	// 110280da <strerror+0x2e>
            return "EIO";
110280e8:	1006      	lrw      	r0, 0x11012144	// 11028100 <strerror+0x54>
110280ea:	07f8      	br      	0x110280da	// 110280da <strerror+0x2e>
110280ec:	11011a71 	.long	0x11011a71
110280f0:	1fffcbc4 	.long	0x1fffcbc4
110280f4:	11012148 	.long	0x11012148
110280f8:	1101214f 	.long	0x1101214f
110280fc:	11012156 	.long	0x11012156
11028100:	11012144 	.long	0x11012144

11028104 <dyn_mem_proc_task_start>:
11028104:	783c      	jmp      	r15

11028106 <krhino_idle_hook>:
#ifdef CONFIG_BT_ECC
	extern void ecc_work_handler();
	ecc_work_handler();
#endif
#endif
}
11028106:	783c      	jmp      	r15

11028108 <krhino_sem_create>:
{
11028108:	14d3      	push      	r4-r6, r15
1102810a:	6d03      	mov      	r4, r0
    NULL_PARA_CHK(sem);
1102810c:	3840      	cmpnei      	r0, 0
{
1102810e:	6d47      	mov      	r5, r1
11028110:	6d8b      	mov      	r6, r2
    NULL_PARA_CHK(sem);
11028112:	0c16      	bf      	0x1102813e	// 1102813e <krhino_sem_create+0x36>
    NULL_PARA_CHK(name);
11028114:	3940      	cmpnei      	r1, 0
11028116:	0c14      	bf      	0x1102813e	// 1102813e <krhino_sem_create+0x36>
    memset(sem, 0, sizeof(ksem_t));
11028118:	3224      	movi      	r2, 36
1102811a:	3100      	movi      	r1, 0
1102811c:	e3ffa778 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
    sem->blk_obj.blk_policy = BLK_POLICY_PRI;
11028120:	3300      	movi      	r3, 0
11028122:	b480      	st.w      	r4, (r4, 0x0)
11028124:	b463      	st.w      	r3, (r4, 0xc)
    sem->mm_alloc_flag      = mm_alloc_flag;
11028126:	3301      	movi      	r3, 1
    list_head->prev = list_head;
11028128:	b481      	st.w      	r4, (r4, 0x4)
1102812a:	dc640020 	st.b      	r3, (r4, 0x20)
    sem->blk_obj.cancel     = 1u;
1102812e:	a474      	st.b      	r3, (r4, 0x14)
    sem->blk_obj.obj_type = RHINO_SEM_OBJ_TYPE;
11028130:	3301      	movi      	r3, 1
    sem->count              = count;
11028132:	b4c6      	st.w      	r6, (r4, 0x18)
    sem->peak_count         = count;
11028134:	b4c7      	st.w      	r6, (r4, 0x1c)
    sem->blk_obj.name       = name;
11028136:	b4a2      	st.w      	r5, (r4, 0x8)
    sem->blk_obj.obj_type = RHINO_SEM_OBJ_TYPE;
11028138:	b464      	st.w      	r3, (r4, 0x10)
1102813a:	3000      	movi      	r0, 0
}
1102813c:	1493      	pop      	r4-r6, r15
    NULL_PARA_CHK(sem);
1102813e:	3006      	movi      	r0, 6
    return sem_create(sem, name, count, K_OBJ_STATIC_ALLOC);
11028140:	07fe      	br      	0x1102813c	// 1102813c <krhino_sem_create+0x34>
	...

11028144 <krhino_sem_del>:
{
11028144:	14d2      	push      	r4-r5, r15
11028146:	6d03      	mov      	r4, r0
    NULL_PARA_CHK(sem);
11028148:	3840      	cmpnei      	r0, 0
1102814a:	0c2c      	bf      	0x110281a2	// 110281a2 <krhino_sem_del+0x5e>
    RHINO_CRITICAL_ENTER();
1102814c:	e00005a2 	bsr      	0x11028c90	// 11028c90 <cpu_task_stack_init+0x2e8>
    INTRPT_NESTED_LEVEL_CHK();
11028150:	1076      	lrw      	r3, 0x1fffd9b8	// 110281a8 <krhino_sem_del+0x64>
    RHINO_CRITICAL_ENTER();
11028152:	6d43      	mov      	r5, r0
    INTRPT_NESTED_LEVEL_CHK();
11028154:	8360      	ld.b      	r3, (r3, 0x0)
11028156:	3b40      	cmpnei      	r3, 0
11028158:	0c06      	bf      	0x11028164	// 11028164 <krhino_sem_del+0x20>
1102815a:	e0000715 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
1102815e:	30fa      	movi      	r0, 250
11028160:	4002      	lsli      	r0, r0, 2
}
11028162:	1492      	pop      	r4-r5, r15
    if (sem->blk_obj.obj_type != RHINO_SEM_OBJ_TYPE) {
11028164:	9464      	ld.w      	r3, (r4, 0x10)
11028166:	3b41      	cmpnei      	r3, 1
11028168:	0c05      	bf      	0x11028172	// 11028172 <krhino_sem_del+0x2e>
        RHINO_CRITICAL_EXIT();
1102816a:	e000070d 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
        return RHINO_KOBJ_TYPE_ERR;
1102816e:	3008      	movi      	r0, 8
11028170:	07f9      	br      	0x11028162	// 11028162 <krhino_sem_del+0x1e>
    if (sem->mm_alloc_flag != K_OBJ_STATIC_ALLOC) {
11028172:	d8640020 	ld.b      	r3, (r4, 0x20)
11028176:	3b41      	cmpnei      	r3, 1
11028178:	0c05      	bf      	0x11028182	// 11028182 <krhino_sem_del+0x3e>
        RHINO_CRITICAL_EXIT();
1102817a:	e0000705 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
        return RHINO_KOBJ_DEL_ERR;
1102817e:	3009      	movi      	r0, 9
11028180:	07f1      	br      	0x11028162	// 11028162 <krhino_sem_del+0x1e>
    sem->blk_obj.obj_type = RHINO_OBJ_TYPE_NONE;
11028182:	3300      	movi      	r3, 0
11028184:	b464      	st.w      	r3, (r4, 0x10)
    return (list->next == list);
11028186:	9400      	ld.w      	r0, (r4, 0x0)
    while (!is_klist_empty(blk_list_head)) {
11028188:	6412      	cmpne      	r4, r0
1102818a:	0808      	bt      	0x1102819a	// 1102819a <krhino_sem_del+0x56>
    RHINO_CRITICAL_EXIT_SCHED();
1102818c:	e00005a6 	bsr      	0x11028cd8	// 11028cd8 <cpu_task_stack_init+0x330>
11028190:	6c17      	mov      	r0, r5
11028192:	e00006f9 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
    return RHINO_SUCCESS;
11028196:	3000      	movi      	r0, 0
11028198:	07e5      	br      	0x11028162	// 11028162 <krhino_sem_del+0x1e>
        pend_task_rm(krhino_list_entry(blk_list_head->next, ktask_t, task_list));
1102819a:	280f      	subi      	r0, 16
1102819c:	e00005fe 	bsr      	0x11028d98	// 11028d98 <cpu_task_stack_init+0x3f0>
110281a0:	07f3      	br      	0x11028186	// 11028186 <krhino_sem_del+0x42>
    NULL_PARA_CHK(sem);
110281a2:	3006      	movi      	r0, 6
110281a4:	07df      	br      	0x11028162	// 11028162 <krhino_sem_del+0x1e>
110281a6:	0000      	bkpt
110281a8:	1fffd9b8 	.long	0x1fffd9b8

110281ac <krhino_sem_take>:

    return sem_give(sem, WAKE_ALL_SEM);
}

kstat_t krhino_sem_take(ksem_t *sem, tick_t ticks)
{
110281ac:	14d4      	push      	r4-r7, r15
110281ae:	1421      	subi      	r14, r14, 4
110281b0:	6d03      	mov      	r4, r0
    CPSR_ALLOC();

    uint8_t cur_cpu_num;
    kstat_t stat;

    NULL_PARA_CHK(sem);
110281b2:	3840      	cmpnei      	r0, 0
{
110281b4:	b820      	st.w      	r1, (r14, 0x0)
110281b6:	6dcb      	mov      	r7, r2
    NULL_PARA_CHK(sem);
110281b8:	0c59      	bf      	0x1102826a	// 1102826a <krhino_sem_take+0xbe>

    RHINO_CRITICAL_ENTER();

    cur_cpu_num = cpu_cur_get();
    TASK_CANCEL_CHK(sem);
110281ba:	11ce      	lrw      	r6, 0x1fffdad4	// 11028270 <krhino_sem_take+0xc4>
    RHINO_CRITICAL_ENTER();
110281bc:	e000056a 	bsr      	0x11028c90	// 11028c90 <cpu_task_stack_init+0x2e8>
    TASK_CANCEL_CHK(sem);
110281c0:	9620      	ld.w      	r1, (r6, 0x0)
    RHINO_CRITICAL_ENTER();
110281c2:	6d43      	mov      	r5, r0
    TASK_CANCEL_CHK(sem);
110281c4:	d8410063 	ld.b      	r2, (r1, 0x63)
110281c8:	9860      	ld.w      	r3, (r14, 0x0)
110281ca:	3a41      	cmpnei      	r2, 1
110281cc:	0809      	bt      	0x110281de	// 110281de <krhino_sem_take+0x32>
110281ce:	8454      	ld.b      	r2, (r4, 0x14)
110281d0:	3a41      	cmpnei      	r2, 1
110281d2:	0806      	bt      	0x110281de	// 110281de <krhino_sem_take+0x32>
110281d4:	e00006d8 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
110281d8:	3498      	movi      	r4, 152
    }

    /* can't get semphore, and return immediately if wait_option is  RHINO_NO_WAIT */
    if (ticks == RHINO_NO_WAIT) {
        RHINO_CRITICAL_EXIT();
        return RHINO_NO_PEND_WAIT;
110281da:	4481      	lsli      	r4, r4, 1
110281dc:	040a      	br      	0x110281f0	// 110281f0 <krhino_sem_take+0x44>
    INTRPT_NESTED_LEVEL_CHK();
110281de:	1146      	lrw      	r2, 0x1fffd9b8	// 11028274 <krhino_sem_take+0xc8>
110281e0:	8240      	ld.b      	r2, (r2, 0x0)
110281e2:	3a40      	cmpnei      	r2, 0
110281e4:	0c09      	bf      	0x110281f6	// 110281f6 <krhino_sem_take+0x4a>
110281e6:	6c17      	mov      	r0, r5
110281e8:	34fa      	movi      	r4, 250
110281ea:	e00006cd 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
110281ee:	4482      	lsli      	r4, r4, 2
    stat = pend_state_end_proc(g_active_task[cpu_cur_get()], &sem->blk_obj);

    RHINO_CPU_INTRPT_ENABLE();

    return stat;
}
110281f0:	6c13      	mov      	r0, r4
110281f2:	1401      	addi      	r14, r14, 4
110281f4:	1494      	pop      	r4-r7, r15
    if (sem->blk_obj.obj_type != RHINO_SEM_OBJ_TYPE) {
110281f6:	9444      	ld.w      	r2, (r4, 0x10)
110281f8:	3a41      	cmpnei      	r2, 1
110281fa:	0c06      	bf      	0x11028206	// 11028206 <krhino_sem_take+0x5a>
        RHINO_CRITICAL_EXIT();
110281fc:	6c17      	mov      	r0, r5
        return RHINO_KOBJ_TYPE_ERR;
110281fe:	3408      	movi      	r4, 8
        RHINO_CRITICAL_EXIT();
11028200:	e00006c2 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
        return RHINO_KOBJ_TYPE_ERR;
11028204:	07f6      	br      	0x110281f0	// 110281f0 <krhino_sem_take+0x44>
    if (sem->count > 0u) {
11028206:	9446      	ld.w      	r2, (r4, 0x18)
11028208:	3a40      	cmpnei      	r2, 0
1102820a:	0c08      	bf      	0x1102821a	// 1102821a <krhino_sem_take+0x6e>
        sem->count--;
1102820c:	2a00      	subi      	r2, 1
1102820e:	b446      	st.w      	r2, (r4, 0x18)
        RHINO_CRITICAL_EXIT();
11028210:	6c17      	mov      	r0, r5
        return RHINO_SUCCESS;
11028212:	3400      	movi      	r4, 0
        RHINO_CRITICAL_EXIT();
11028214:	e00006b8 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
        return RHINO_SUCCESS;
11028218:	07ec      	br      	0x110281f0	// 110281f0 <krhino_sem_take+0x44>
    if (ticks == RHINO_NO_WAIT) {
1102821a:	c4e32422 	or      	r2, r3, r7
1102821e:	3a40      	cmpnei      	r2, 0
11028220:	0806      	bt      	0x1102822c	// 1102822c <krhino_sem_take+0x80>
        RHINO_CRITICAL_EXIT();
11028222:	6c17      	mov      	r0, r5
        return RHINO_NO_PEND_WAIT;
11028224:	34c8      	movi      	r4, 200
        RHINO_CRITICAL_EXIT();
11028226:	e00006af 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
1102822a:	07d8      	br      	0x110281da	// 110281da <krhino_sem_take+0x2e>
    if (g_sched_lock[cur_cpu_num] > 0u) {
1102822c:	1053      	lrw      	r2, 0x1fffd2b4	// 11028278 <krhino_sem_take+0xcc>
1102822e:	8240      	ld.b      	r2, (r2, 0x0)
11028230:	3a40      	cmpnei      	r2, 0
11028232:	0c06      	bf      	0x1102823e	// 1102823e <krhino_sem_take+0x92>
        RHINO_CRITICAL_EXIT();
11028234:	6c17      	mov      	r0, r5
        return RHINO_SCHED_DISABLE;
11028236:	34c8      	movi      	r4, 200
        RHINO_CRITICAL_EXIT();
11028238:	e00006a6 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
        return RHINO_SCHED_DISABLE;
1102823c:	07da      	br      	0x110281f0	// 110281f0 <krhino_sem_take+0x44>
    pend_to_blk_obj(&sem->blk_obj, g_active_task[cur_cpu_num], ticks);
1102823e:	6c8f      	mov      	r2, r3
11028240:	6c13      	mov      	r0, r4
11028242:	6cdf      	mov      	r3, r7
11028244:	e00007e4 	bsr      	0x1102920c	// 1102920c <cpu_task_stack_init+0x864>
    RHINO_CRITICAL_EXIT_SCHED();
11028248:	e0000548 	bsr      	0x11028cd8	// 11028cd8 <cpu_task_stack_init+0x330>
1102824c:	6c17      	mov      	r0, r5
1102824e:	e000069b 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
    RHINO_CPU_INTRPT_DISABLE();
11028252:	e000051f 	bsr      	0x11028c90	// 11028c90 <cpu_task_stack_init+0x2e8>
11028256:	6d43      	mov      	r5, r0
    stat = pend_state_end_proc(g_active_task[cpu_cur_get()], &sem->blk_obj);
11028258:	6c53      	mov      	r1, r4
1102825a:	9600      	ld.w      	r0, (r6, 0x0)
1102825c:	e00008aa 	bsr      	0x110293b0	// 110293b0 <cpu_task_stack_init+0xa08>
11028260:	6d03      	mov      	r4, r0
    RHINO_CPU_INTRPT_ENABLE();
11028262:	6c17      	mov      	r0, r5
11028264:	e0000690 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
    return stat;
11028268:	07c4      	br      	0x110281f0	// 110281f0 <krhino_sem_take+0x44>
    NULL_PARA_CHK(sem);
1102826a:	3406      	movi      	r4, 6
1102826c:	07c2      	br      	0x110281f0	// 110281f0 <krhino_sem_take+0x44>
1102826e:	0000      	bkpt
11028270:	1fffdad4 	.long	0x1fffdad4
11028274:	1fffd9b8 	.long	0x1fffd9b8
11028278:	1fffd2b4 	.long	0x1fffd2b4

1102827c <krhino_init>:
{
1102827c:	14d0      	push      	r15
1102827e:	1426      	subi      	r14, r14, 24
    g_sys_stat = RHINO_STOPPED;
11028280:	1076      	lrw      	r3, 0x1fffd7e4	// 110282d8 <krhino_init+0x5c>
11028282:	3204      	movi      	r2, 4
    runqueue_init(&g_ready_queue);
11028284:	1016      	lrw      	r0, 0x1fffd274	// 110282dc <krhino_init+0x60>
    g_sys_stat = RHINO_STOPPED;
11028286:	b340      	st.w      	r2, (r3, 0x0)
    runqueue_init(&g_ready_queue);
11028288:	e0000768 	bsr      	0x11029158	// 11029158 <cpu_task_stack_init+0x7b0>
    tick_list_init();
1102828c:	e000057a 	bsr      	0x11028d80	// 11028d80 <cpu_task_stack_init+0x3d8>
    krhino_init_hook();
11028290:	e0000638 	bsr      	0x11028f00	// 11028f00 <cpu_task_stack_init+0x558>
    k_mm_init();
11028294:	e0000774 	bsr      	0x1102917c	// 1102917c <cpu_task_stack_init+0x7d4>
    list_head->next = list_head;
11028298:	1072      	lrw      	r3, 0x1fffd9b0	// 110282e0 <krhino_init+0x64>
    krhino_sem_create(&g_res_sem, "res_sem", 0);
1102829a:	3200      	movi      	r2, 0
1102829c:	1032      	lrw      	r1, 0x11012204	// 110282e4 <krhino_init+0x68>
1102829e:	1013      	lrw      	r0, 0x1fffd070	// 110282e8 <krhino_init+0x6c>
    list_head->prev = list_head;
110282a0:	b361      	st.w      	r3, (r3, 0x4)
    list_head->next = list_head;
110282a2:	b360      	st.w      	r3, (r3, 0x0)
110282a4:	e3ffff32 	bsr      	0x11028108	// 11028108 <krhino_sem_create>
    dyn_mem_proc_task_start();
110282a8:	e3ffff2e 	bsr      	0x11028104	// 11028104 <dyn_mem_proc_task_start>
    krhino_task_create(&g_idle_task[0], "idle_task", NULL, RHINO_IDLE_PRI, 0,
110282ac:	3301      	movi      	r3, 1
110282ae:	3200      	movi      	r2, 0
110282b0:	b865      	st.w      	r3, (r14, 0x14)
110282b2:	102f      	lrw      	r1, 0x1101220c	// 110282ec <krhino_init+0x70>
110282b4:	106f      	lrw      	r3, 0x1fff223c	// 110282f0 <krhino_init+0x74>
110282b6:	1010      	lrw      	r0, 0x1fffd7e8	// 110282f4 <krhino_init+0x78>
110282b8:	b864      	st.w      	r3, (r14, 0x10)
110282ba:	3340      	movi      	r3, 64
110282bc:	b863      	st.w      	r3, (r14, 0xc)
110282be:	106f      	lrw      	r3, 0x1fffd9d4	// 110282f8 <krhino_init+0x7c>
110282c0:	b862      	st.w      	r3, (r14, 0x8)
110282c2:	3300      	movi      	r3, 0
110282c4:	b840      	st.w      	r2, (r14, 0x0)
110282c6:	b861      	st.w      	r3, (r14, 0x4)
110282c8:	330d      	movi      	r3, 13
110282ca:	e00000d9 	bsr      	0x1102847c	// 1102847c <krhino_task_create>
    ktimer_init();
110282ce:	e000063d 	bsr      	0x11028f48	// 11028f48 <cpu_task_stack_init+0x5a0>
}
110282d2:	3000      	movi      	r0, 0
110282d4:	1406      	addi      	r14, r14, 24
110282d6:	1490      	pop      	r15
110282d8:	1fffd7e4 	.long	0x1fffd7e4
110282dc:	1fffd274 	.long	0x1fffd274
110282e0:	1fffd9b0 	.long	0x1fffd9b0
110282e4:	11012204 	.long	0x11012204
110282e8:	1fffd070 	.long	0x1fffd070
110282ec:	1101220c 	.long	0x1101220c
110282f0:	1fff223c 	.long	0x1fff223c
110282f4:	1fffd7e8 	.long	0x1fffd7e8
110282f8:	1fffd9d4 	.long	0x1fffd9d4

110282fc <krhino_start>:
{
110282fc:	14d1      	push      	r4, r15
    if (g_sys_stat == RHINO_STOPPED) {
110282fe:	108c      	lrw      	r4, 0x1fffd7e4	// 1102832c <krhino_start+0x30>
11028300:	9460      	ld.w      	r3, (r4, 0x0)
11028302:	3b44      	cmpnei      	r3, 4
11028304:	0811      	bt      	0x11028326	// 11028326 <krhino_start+0x2a>
        preferred_task = preferred_cpu_ready_task_get(&g_ready_queue, 0);
11028306:	3100      	movi      	r1, 0
11028308:	100a      	lrw      	r0, 0x1fffd274	// 11028330 <krhino_start+0x34>
1102830a:	e00004bd 	bsr      	0x11028c84	// 11028c84 <cpu_task_stack_init+0x2dc>
        g_preferred_ready_task[0] = preferred_task;
1102830e:	106a      	lrw      	r3, 0x1fffd858	// 11028334 <krhino_start+0x38>
11028310:	b300      	st.w      	r0, (r3, 0x0)
        g_active_task[0] = preferred_task;
11028312:	106a      	lrw      	r3, 0x1fffdad4	// 11028338 <krhino_start+0x3c>
11028314:	b300      	st.w      	r0, (r3, 0x0)
        krhino_start_hook();
11028316:	e0000823 	bsr      	0x1102935c	// 1102935c <cpu_task_stack_init+0x9b4>
        g_sys_stat = RHINO_RUNNING;
1102831a:	3303      	movi      	r3, 3
1102831c:	b460      	st.w      	r3, (r4, 0x0)
        cpu_first_task_start();
1102831e:	e000078f 	bsr      	0x1102923c	// 1102923c <cpu_task_stack_init+0x894>
        return RHINO_SYS_FATAL_ERR;
11028322:	3001      	movi      	r0, 1
}
11028324:	1491      	pop      	r4, r15
    return RHINO_RUNNING;
11028326:	3003      	movi      	r0, 3
11028328:	07fe      	br      	0x11028324	// 11028324 <krhino_start+0x28>
1102832a:	0000      	bkpt
1102832c:	1fffd7e4 	.long	0x1fffd7e4
11028330:	1fffd274 	.long	0x1fffd274
11028334:	1fffd858 	.long	0x1fffd858
11028338:	1fffdad4 	.long	0x1fffdad4

1102833c <task_mutex_free.isra.3>:

    return RHINO_SUCCESS;
}

#if (RHINO_CONFIG_TASK_DEL > 0)
static void task_mutex_free(ktask_t *task)
1102833c:	14d3      	push      	r4-r6, r15
1102833e:	6d03      	mov      	r4, r0
    ktask_t  *next_task;
    klist_t *blk_list_head;

    next_mutex = task->mutex_list;

    while ((mutex = next_mutex) != NULL) {
11028340:	3c40      	cmpnei      	r4, 0
11028342:	0802      	bt      	0x11028346	// 11028346 <task_mutex_free.isra.3+0xa>
        } else {
            /* no wait task */
            mutex->mutex_task = NULL;
        }
    }
}
11028344:	1493      	pop      	r4-r6, r15
    return (list->next == list);
11028346:	94a0      	ld.w      	r5, (r4, 0x0)
        next_mutex = mutex->mutex_list;
11028348:	94c7      	ld.w      	r6, (r4, 0x1c)
        if (!is_klist_empty(blk_list_head)) {
1102834a:	6552      	cmpne      	r4, r5
1102834c:	0c0b      	bf      	0x11028362	// 11028362 <task_mutex_free.isra.3+0x26>
            next_task = krhino_list_entry(blk_list_head->next, ktask_t, task_list);
1102834e:	2d0f      	subi      	r5, 16
            pend_task_wakeup(next_task);
11028350:	6c17      	mov      	r0, r5
11028352:	e00007a5 	bsr      	0x1102929c	// 1102929c <cpu_task_stack_init+0x8f4>
            mutex->mutex_task     = next_task;
11028356:	b4a6      	st.w      	r5, (r4, 0x18)
            mutex->mutex_list     = next_task->mutex_list;
11028358:	9567      	ld.w      	r3, (r5, 0x1c)
1102835a:	b467      	st.w      	r3, (r4, 0x1c)
            next_task->mutex_list = mutex;
1102835c:	b587      	st.w      	r4, (r5, 0x1c)
static void task_mutex_free(ktask_t *task)
1102835e:	6d1b      	mov      	r4, r6
11028360:	07f0      	br      	0x11028340	// 11028340 <task_mutex_free.isra.3+0x4>
            mutex->mutex_task = NULL;
11028362:	3300      	movi      	r3, 0
11028364:	b466      	st.w      	r3, (r4, 0x18)
11028366:	07fc      	br      	0x1102835e	// 1102835e <task_mutex_free.isra.3+0x22>

11028368 <task_create.isra.0.part.1.constprop.10>:
static kstat_t task_create(ktask_t *task, const name_t *name, void *arg,
11028368:	14d4      	push      	r4-r7, r15
1102836a:	1427      	subi      	r14, r14, 28
1102836c:	6d8f      	mov      	r6, r3
1102836e:	986d      	ld.w      	r3, (r14, 0x34)
11028370:	6d03      	mov      	r4, r0
11028372:	b866      	st.w      	r3, (r14, 0x18)
11028374:	986e      	ld.w      	r3, (r14, 0x38)
11028376:	b822      	st.w      	r1, (r14, 0x8)
11028378:	b860      	st.w      	r3, (r14, 0x0)
1102837a:	986f      	ld.w      	r3, (r14, 0x3c)
1102837c:	b843      	st.w      	r2, (r14, 0xc)
1102837e:	b861      	st.w      	r3, (r14, 0x4)
11028380:	9870      	ld.w      	r3, (r14, 0x40)
11028382:	98ac      	ld.w      	r5, (r14, 0x30)
11028384:	b864      	st.w      	r3, (r14, 0x10)
11028386:	d86e0048 	ld.b      	r3, (r14, 0x48)
1102838a:	d8ee0044 	ld.b      	r7, (r14, 0x44)
1102838e:	b865      	st.w      	r3, (r14, 0x14)
    RHINO_CRITICAL_ENTER();
11028390:	e0000480 	bsr      	0x11028c90	// 11028c90 <cpu_task_stack_init+0x2e8>
    INTRPT_NESTED_LEVEL_CHK();
11028394:	1176      	lrw      	r3, 0x1fffd9b8	// 1102846c <task_create.isra.0.part.1.constprop.10+0x104>
11028396:	8360      	ld.b      	r3, (r3, 0x0)
11028398:	3b40      	cmpnei      	r3, 0
1102839a:	0c07      	bf      	0x110283a8	// 110283a8 <task_create.isra.0.part.1.constprop.10+0x40>
1102839c:	e00005f4 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
110283a0:	30fa      	movi      	r0, 250
110283a2:	4002      	lsli      	r0, r0, 2
}
110283a4:	1407      	addi      	r14, r14, 28
110283a6:	1494      	pop      	r4-r7, r15
    if (prio == RHINO_IDLE_PRI) {
110283a8:	3e4d      	cmpnei      	r6, 13
110283aa:	080c      	bt      	0x110283c2	// 110283c2 <task_create.isra.0.part.1.constprop.10+0x5a>
        if (g_idle_task_spawned[cpu_num] > 0u) {
110283ac:	1171      	lrw      	r3, 0x1fffd9d0	// 11028470 <task_create.isra.0.part.1.constprop.10+0x108>
110283ae:	8340      	ld.b      	r2, (r3, 0x0)
110283b0:	3a40      	cmpnei      	r2, 0
110283b2:	0c06      	bf      	0x110283be	// 110283be <task_create.isra.0.part.1.constprop.10+0x56>
            RHINO_CRITICAL_EXIT();
110283b4:	e00005e8 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
            return RHINO_IDLE_TASK_EXIST;
110283b8:	ea000135 	movi      	r0, 309
110283bc:	07f4      	br      	0x110283a4	// 110283a4 <task_create.isra.0.part.1.constprop.10+0x3c>
        g_idle_task_spawned[cpu_num] = 1u;
110283be:	3201      	movi      	r2, 1
110283c0:	a340      	st.b      	r2, (r3, 0x0)
    RHINO_CRITICAL_EXIT();
110283c2:	e00005e1 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
    memset(task, 0, sizeof(ktask_t));
110283c6:	3268      	movi      	r2, 104
110283c8:	3100      	movi      	r1, 0
110283ca:	6c13      	mov      	r0, r4
110283cc:	e3ffa620 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
    if (ticks > 0u) {
110283d0:	9866      	ld.w      	r3, (r14, 0x18)
110283d2:	6cd4      	or      	r3, r5
        task->time_total = ticks;
110283d4:	3b40      	cmpnei      	r3, 0
110283d6:	3332      	movi      	r3, 50
110283d8:	c4a30c20 	incf      	r5, r3, 0
    task->sched_policy = sched_policy;
110283dc:	3301      	movi      	r3, 1
    if (autorun > 0u) {
110283de:	3f40      	cmpnei      	r7, 0
        task->time_total = ticks;
110283e0:	b4b5      	st.w      	r5, (r4, 0x54)
    task->time_slice   = task->time_total;
110283e2:	b4b4      	st.w      	r5, (r4, 0x50)
    task->sched_policy = sched_policy;
110283e4:	dc640061 	st.b      	r3, (r4, 0x61)
    if (autorun > 0u) {
110283e8:	0c3c      	bf      	0x11028460	// 11028460 <task_create.isra.0.part.1.constprop.10+0xf8>
        task->task_state = K_RDY;
110283ea:	3301      	movi      	r3, 1
110283ec:	b470      	st.w      	r3, (r4, 0x40)
    task->task_stack_base = stack_buf;
110283ee:	9860      	ld.w      	r3, (r14, 0x0)
    memset(tmp, 0, stack_size * sizeof(cpu_stack_t));
110283f0:	3100      	movi      	r1, 0
    task->task_stack_base = stack_buf;
110283f2:	b462      	st.w      	r3, (r4, 0x8)
    memset(tmp, 0, stack_size * sizeof(cpu_stack_t));
110283f4:	9861      	ld.w      	r3, (r14, 0x4)
110283f6:	4342      	lsli      	r2, r3, 2
110283f8:	9800      	ld.w      	r0, (r14, 0x0)
110283fa:	e3ffa609 	bsr      	0x1101d00c	// 1101d00c <__memset_fast>
    klist_init(&task->tick_list);
110283fe:	e464001f 	addi      	r3, r4, 32
    list_head->next = list_head;
11028402:	b468      	st.w      	r3, (r4, 0x20)
    list_head->prev = list_head;
11028404:	b469      	st.w      	r3, (r4, 0x24)
    task->task_name     = name;
11028406:	9862      	ld.w      	r3, (r14, 0x8)
    task->task_stack = cpu_task_stack_init(stack_buf, stack_size, arg, entry);
11028408:	9843      	ld.w      	r2, (r14, 0xc)
    task->task_name     = name;
1102840a:	b461      	st.w      	r3, (r4, 0x4)
    task->stack_size    = stack_size;
1102840c:	9861      	ld.w      	r3, (r14, 0x4)
    task->task_stack = cpu_task_stack_init(stack_buf, stack_size, arg, entry);
1102840e:	9821      	ld.w      	r1, (r14, 0x4)
    task->stack_size    = stack_size;
11028410:	b463      	st.w      	r3, (r4, 0xc)
    task->mm_alloc_flag = mm_alloc_flag;
11028412:	d86e0014 	ld.b      	r3, (r14, 0x14)
    task->prio          = prio;
11028416:	dcc40064 	st.b      	r6, (r4, 0x64)
    task->mm_alloc_flag = mm_alloc_flag;
1102841a:	dc640066 	st.b      	r3, (r4, 0x66)
    task->cpu_num       = cpu_num;
1102841e:	3300      	movi      	r3, 0
    task->b_prio        = prio;
11028420:	dcc40065 	st.b      	r6, (r4, 0x65)
    task->cpu_num       = cpu_num;
11028424:	dc640062 	st.b      	r3, (r4, 0x62)
    task->task_stack = cpu_task_stack_init(stack_buf, stack_size, arg, entry);
11028428:	9800      	ld.w      	r0, (r14, 0x0)
1102842a:	9864      	ld.w      	r3, (r14, 0x10)
1102842c:	e00002be 	bsr      	0x110289a8	// 110289a8 <cpu_task_stack_init>
11028430:	b400      	st.w      	r0, (r4, 0x0)
    krhino_task_create_hook(task);
11028432:	6c13      	mov      	r0, r4
11028434:	e0000752 	bsr      	0x110292d8	// 110292d8 <cpu_task_stack_init+0x930>
    RHINO_CRITICAL_ENTER();
11028438:	e000042c 	bsr      	0x11028c90	// 11028c90 <cpu_task_stack_init+0x2e8>
    if (autorun > 0u) {
1102843c:	3f40      	cmpnei      	r7, 0
    RHINO_CRITICAL_ENTER();
1102843e:	6d43      	mov      	r5, r0
    if (autorun > 0u) {
11028440:	0c0b      	bf      	0x11028456	// 11028456 <task_create.isra.0.part.1.constprop.10+0xee>
        ready_list_add_tail(&g_ready_queue, task);
11028442:	6c53      	mov      	r1, r4
11028444:	100c      	lrw      	r0, 0x1fffd274	// 11028474 <task_create.isra.0.part.1.constprop.10+0x10c>
11028446:	e0000377 	bsr      	0x11028b34	// 11028b34 <cpu_task_stack_init+0x18c>
        if (g_sys_stat == RHINO_RUNNING) {
1102844a:	106c      	lrw      	r3, 0x1fffd7e4	// 11028478 <task_create.isra.0.part.1.constprop.10+0x110>
1102844c:	9360      	ld.w      	r3, (r3, 0x0)
1102844e:	3b43      	cmpnei      	r3, 3
11028450:	0803      	bt      	0x11028456	// 11028456 <task_create.isra.0.part.1.constprop.10+0xee>
            RHINO_CRITICAL_EXIT_SCHED();
11028452:	e0000443 	bsr      	0x11028cd8	// 11028cd8 <cpu_task_stack_init+0x330>
    RHINO_CRITICAL_EXIT();
11028456:	6c17      	mov      	r0, r5
11028458:	e0000596 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
    return RHINO_SUCCESS;
1102845c:	3000      	movi      	r0, 0
1102845e:	07a3      	br      	0x110283a4	// 110283a4 <task_create.isra.0.part.1.constprop.10+0x3c>
        task->task_state    = K_SUSPENDED;
11028460:	3303      	movi      	r3, 3
11028462:	b470      	st.w      	r3, (r4, 0x40)
        task->suspend_count = 1u;
11028464:	3301      	movi      	r3, 1
11028466:	a478      	st.b      	r3, (r4, 0x18)
11028468:	07c3      	br      	0x110283ee	// 110283ee <task_create.isra.0.part.1.constprop.10+0x86>
1102846a:	0000      	bkpt
1102846c:	1fffd9b8 	.long	0x1fffd9b8
11028470:	1fffd9d0 	.long	0x1fffd9d0
11028474:	1fffd274 	.long	0x1fffd274
11028478:	1fffd7e4 	.long	0x1fffd7e4

1102847c <krhino_task_create>:
{
1102847c:	14d4      	push      	r4-r7, r15
1102847e:	142a      	subi      	r14, r14, 40
11028480:	988f      	ld.w      	r4, (r14, 0x3c)
11028482:	98b0      	ld.w      	r5, (r14, 0x40)
    NULL_PARA_CHK(task);
11028484:	3840      	cmpnei      	r0, 0
{
11028486:	b888      	st.w      	r4, (r14, 0x20)
11028488:	b8a9      	st.w      	r5, (r14, 0x24)
1102848a:	b847      	st.w      	r2, (r14, 0x1c)
1102848c:	9891      	ld.w      	r4, (r14, 0x44)
1102848e:	98b2      	ld.w      	r5, (r14, 0x48)
11028490:	98d3      	ld.w      	r6, (r14, 0x4c)
11028492:	d8ee0050 	ld.b      	r7, (r14, 0x50)
    NULL_PARA_CHK(task);
11028496:	0c1a      	bf      	0x110284ca	// 110284ca <krhino_task_create+0x4e>
    NULL_PARA_CHK(name);
11028498:	3940      	cmpnei      	r1, 0
1102849a:	0c18      	bf      	0x110284ca	// 110284ca <krhino_task_create+0x4e>
    NULL_PARA_CHK(entry);
1102849c:	3e40      	cmpnei      	r6, 0
1102849e:	0c16      	bf      	0x110284ca	// 110284ca <krhino_task_create+0x4e>
    NULL_PARA_CHK(stack_buf);
110284a0:	3c40      	cmpnei      	r4, 0
110284a2:	0c14      	bf      	0x110284ca	// 110284ca <krhino_task_create+0x4e>
    if (stack_size == 0u) {
110284a4:	3d40      	cmpnei      	r5, 0
110284a6:	0c14      	bf      	0x110284ce	// 110284ce <krhino_task_create+0x52>
    if (prio >= RHINO_CONFIG_PRI_MAX) {
110284a8:	3b0d      	cmphsi      	r3, 14
110284aa:	0815      	bt      	0x110284d4	// 110284d4 <krhino_task_create+0x58>
110284ac:	3201      	movi      	r2, 1
110284ae:	b8a3      	st.w      	r5, (r14, 0xc)
110284b0:	b882      	st.w      	r4, (r14, 0x8)
110284b2:	9888      	ld.w      	r4, (r14, 0x20)
110284b4:	98a9      	ld.w      	r5, (r14, 0x24)
110284b6:	b846      	st.w      	r2, (r14, 0x18)
110284b8:	b8e5      	st.w      	r7, (r14, 0x14)
110284ba:	b8c4      	st.w      	r6, (r14, 0x10)
110284bc:	b880      	st.w      	r4, (r14, 0x0)
110284be:	b8a1      	st.w      	r5, (r14, 0x4)
110284c0:	9847      	ld.w      	r2, (r14, 0x1c)
110284c2:	e3ffff53 	bsr      	0x11028368	// 11028368 <task_create.isra.0.part.1.constprop.10>
}
110284c6:	140a      	addi      	r14, r14, 40
110284c8:	1494      	pop      	r4-r7, r15
    NULL_PARA_CHK(task);
110284ca:	3006      	movi      	r0, 6
110284cc:	07fd      	br      	0x110284c6	// 110284c6 <krhino_task_create+0x4a>
        return RHINO_TASK_INV_STACK_SIZE;
110284ce:	3096      	movi      	r0, 150
        return RHINO_BEYOND_MAX_PRI;
110284d0:	4001      	lsli      	r0, r0, 1
    return task_create(task, name, arg, prio, ticks, stack_buf, stack_size, entry,
110284d2:	07fa      	br      	0x110284c6	// 110284c6 <krhino_task_create+0x4a>
        return RHINO_BEYOND_MAX_PRI;
110284d4:	3099      	movi      	r0, 153
110284d6:	07fd      	br      	0x110284d0	// 110284d0 <krhino_task_create+0x54>

110284d8 <krhino_task_dyn_create>:
{
110284d8:	14d4      	push      	r4-r7, r15
110284da:	142e      	subi      	r14, r14, 56
110284dc:	b807      	st.w      	r0, (r14, 0x1c)
110284de:	9815      	ld.w      	r0, (r14, 0x54)
110284e0:	6d83      	mov      	r6, r0
110284e2:	9816      	ld.w      	r0, (r14, 0x58)
110284e4:	9893      	ld.w      	r4, (r14, 0x4c)
110284e6:	98b4      	ld.w      	r5, (r14, 0x50)
110284e8:	b808      	st.w      	r0, (r14, 0x20)
    NULL_PARA_CHK(task);
110284ea:	9807      	ld.w      	r0, (r14, 0x1c)
{
110284ec:	b889      	st.w      	r4, (r14, 0x24)
110284ee:	b8aa      	st.w      	r5, (r14, 0x28)
    NULL_PARA_CHK(task);
110284f0:	3840      	cmpnei      	r0, 0
{
110284f2:	d8ee005c 	ld.b      	r7, (r14, 0x5c)
    NULL_PARA_CHK(task);
110284f6:	0c42      	bf      	0x1102857a	// 1102857a <krhino_task_dyn_create+0xa2>
    if (stack == 0) {
110284f8:	3e40      	cmpnei      	r6, 0
110284fa:	0c42      	bf      	0x1102857e	// 1102857e <krhino_task_dyn_create+0xa6>
    task_stack = krhino_mm_alloc(stack * sizeof(cpu_stack_t));
110284fc:	4602      	lsli      	r0, r6, 2
110284fe:	b86d      	st.w      	r3, (r14, 0x34)
11028500:	b84c      	st.w      	r2, (r14, 0x30)
11028502:	b82b      	st.w      	r1, (r14, 0x2c)
11028504:	e000038a 	bsr      	0x11028c18	// 11028c18 <cpu_task_stack_init+0x270>
11028508:	6d03      	mov      	r4, r0
    if (task_stack == NULL) {
1102850a:	3840      	cmpnei      	r0, 0
1102850c:	0c0d      	bf      	0x11028526	// 11028526 <krhino_task_dyn_create+0x4e>
    task_obj = krhino_mm_alloc(sizeof(ktask_t));
1102850e:	3068      	movi      	r0, 104
11028510:	e0000384 	bsr      	0x11028c18	// 11028c18 <cpu_task_stack_init+0x270>
11028514:	6d43      	mov      	r5, r0
    if (task_obj == NULL) {
11028516:	3840      	cmpnei      	r0, 0
11028518:	982b      	ld.w      	r1, (r14, 0x2c)
1102851a:	984c      	ld.w      	r2, (r14, 0x30)
1102851c:	986d      	ld.w      	r3, (r14, 0x34)
1102851e:	0806      	bt      	0x1102852a	// 1102852a <krhino_task_dyn_create+0x52>
        krhino_mm_free(task_stack);
11028520:	6c13      	mov      	r0, r4
11028522:	e0000669 	bsr      	0x110291f4	// 110291f4 <cpu_task_stack_init+0x84c>
        return RHINO_NO_MEM;
11028526:	3769      	movi      	r7, 105
    return task_dyn_create(task, name, arg, pri, ticks, stack, entry, 0, 0, autorun, KSCHED_RR);
11028528:	0426      	br      	0x11028574	// 11028574 <krhino_task_dyn_create+0x9c>
    *task = task_obj;
1102852a:	9807      	ld.w      	r0, (r14, 0x1c)
    NULL_PARA_CHK(name);
1102852c:	3940      	cmpnei      	r1, 0
    *task = task_obj;
1102852e:	b0a0      	st.w      	r5, (r0, 0x0)
    NULL_PARA_CHK(name);
11028530:	0c29      	bf      	0x11028582	// 11028582 <krhino_task_dyn_create+0xaa>
    NULL_PARA_CHK(entry);
11028532:	9808      	ld.w      	r0, (r14, 0x20)
11028534:	3840      	cmpnei      	r0, 0
11028536:	0c26      	bf      	0x11028582	// 11028582 <krhino_task_dyn_create+0xaa>
    if (prio >= RHINO_CONFIG_PRI_MAX) {
11028538:	3b0d      	cmphsi      	r3, 14
1102853a:	0826      	bt      	0x11028586	// 11028586 <krhino_task_dyn_create+0xae>
1102853c:	3002      	movi      	r0, 2
1102853e:	b8e5      	st.w      	r7, (r14, 0x14)
11028540:	b806      	st.w      	r0, (r14, 0x18)
11028542:	b8c3      	st.w      	r6, (r14, 0xc)
11028544:	9808      	ld.w      	r0, (r14, 0x20)
11028546:	98c9      	ld.w      	r6, (r14, 0x24)
11028548:	98ea      	ld.w      	r7, (r14, 0x28)
1102854a:	b804      	st.w      	r0, (r14, 0x10)
1102854c:	b8c0      	st.w      	r6, (r14, 0x0)
1102854e:	b8e1      	st.w      	r7, (r14, 0x4)
11028550:	b882      	st.w      	r4, (r14, 0x8)
11028552:	6c17      	mov      	r0, r5
11028554:	e3ffff0a 	bsr      	0x11028368	// 11028368 <task_create.isra.0.part.1.constprop.10>
11028558:	6dc3      	mov      	r7, r0
    if ((ret != RHINO_SUCCESS) && (ret != RHINO_STOPPED)) {
1102855a:	3840      	cmpnei      	r0, 0
1102855c:	0c0c      	bf      	0x11028574	// 11028574 <krhino_task_dyn_create+0x9c>
1102855e:	3844      	cmpnei      	r0, 4
11028560:	0c0a      	bf      	0x11028574	// 11028574 <krhino_task_dyn_create+0x9c>
        krhino_mm_free(task_stack);
11028562:	6c13      	mov      	r0, r4
11028564:	e0000648 	bsr      	0x110291f4	// 110291f4 <cpu_task_stack_init+0x84c>
        krhino_mm_free(task_obj);
11028568:	6c17      	mov      	r0, r5
1102856a:	e0000645 	bsr      	0x110291f4	// 110291f4 <cpu_task_stack_init+0x84c>
        *task = NULL;
1102856e:	3300      	movi      	r3, 0
11028570:	9847      	ld.w      	r2, (r14, 0x1c)
11028572:	b260      	st.w      	r3, (r2, 0x0)
}
11028574:	6c1f      	mov      	r0, r7
11028576:	140e      	addi      	r14, r14, 56
11028578:	1494      	pop      	r4-r7, r15
    NULL_PARA_CHK(task);
1102857a:	3706      	movi      	r7, 6
1102857c:	07fc      	br      	0x11028574	// 11028574 <krhino_task_dyn_create+0x9c>
        return RHINO_INV_PARAM;
1102857e:	3705      	movi      	r7, 5
11028580:	07fa      	br      	0x11028574	// 11028574 <krhino_task_dyn_create+0x9c>
    NULL_PARA_CHK(name);
11028582:	3706      	movi      	r7, 6
11028584:	07ef      	br      	0x11028562	// 11028562 <krhino_task_dyn_create+0x8a>
        return RHINO_BEYOND_MAX_PRI;
11028586:	3799      	movi      	r7, 153
11028588:	47e1      	lsli      	r7, r7, 1
1102858a:	07ec      	br      	0x11028562	// 11028562 <krhino_task_dyn_create+0x8a>

1102858c <krhino_task_sleep>:
{
1102858c:	14d4      	push      	r4-r7, r15
    if (ticks == 0u) {
1102858e:	c4202423 	or      	r3, r0, r1
{
11028592:	6dc3      	mov      	r7, r0
    if (ticks == 0u) {
11028594:	3b40      	cmpnei      	r3, 0
{
11028596:	6d87      	mov      	r6, r1
    if (ticks == 0u) {
11028598:	0c33      	bf      	0x110285fe	// 110285fe <krhino_task_sleep+0x72>
    RHINO_CRITICAL_ENTER();
1102859a:	e000037b 	bsr      	0x11028c90	// 11028c90 <cpu_task_stack_init+0x2e8>
    INTRPT_NESTED_LEVEL_CHK();
1102859e:	107a      	lrw      	r3, 0x1fffd9b8	// 11028604 <krhino_task_sleep+0x78>
    RHINO_CRITICAL_ENTER();
110285a0:	6d43      	mov      	r5, r0
    INTRPT_NESTED_LEVEL_CHK();
110285a2:	8360      	ld.b      	r3, (r3, 0x0)
110285a4:	3b40      	cmpnei      	r3, 0
110285a6:	0c07      	bf      	0x110285b4	// 110285b4 <krhino_task_sleep+0x28>
110285a8:	34fa      	movi      	r4, 250
110285aa:	e00004ed 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
110285ae:	4482      	lsli      	r4, r4, 2
}
110285b0:	6c13      	mov      	r0, r4
110285b2:	1494      	pop      	r4-r7, r15
    if (g_sched_lock[cur_cpu_num] > 0u) {
110285b4:	1075      	lrw      	r3, 0x1fffd2b4	// 11028608 <krhino_task_sleep+0x7c>
110285b6:	8360      	ld.b      	r3, (r3, 0x0)
110285b8:	3b40      	cmpnei      	r3, 0
110285ba:	0c05      	bf      	0x110285c4	// 110285c4 <krhino_task_sleep+0x38>
        RHINO_CRITICAL_EXIT();
110285bc:	e00004e4 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
        return RHINO_SCHED_DISABLE;
110285c0:	34c8      	movi      	r4, 200
110285c2:	07f7      	br      	0x110285b0	// 110285b0 <krhino_task_sleep+0x24>
    g_active_task[cur_cpu_num]->task_state = K_SLEEP;
110285c4:	1092      	lrw      	r4, 0x1fffdad4	// 1102860c <krhino_task_sleep+0x80>
110285c6:	3305      	movi      	r3, 5
110285c8:	9400      	ld.w      	r0, (r4, 0x0)
    tick_list_insert(g_active_task[cur_cpu_num], ticks);
110285ca:	6c9b      	mov      	r2, r6
    g_active_task[cur_cpu_num]->task_state = K_SLEEP;
110285cc:	b070      	st.w      	r3, (r0, 0x40)
    tick_list_insert(g_active_task[cur_cpu_num], ticks);
110285ce:	6c5f      	mov      	r1, r7
110285d0:	e000025e 	bsr      	0x11028a8c	// 11028a8c <cpu_task_stack_init+0xe4>
    ready_list_rm(&g_ready_queue, g_active_task[cur_cpu_num]);
110285d4:	9420      	ld.w      	r1, (r4, 0x0)
110285d6:	100f      	lrw      	r0, 0x1fffd274	// 11028610 <krhino_task_sleep+0x84>
110285d8:	e00003a4 	bsr      	0x11028d20	// 11028d20 <cpu_task_stack_init+0x378>
    RHINO_CRITICAL_EXIT_SCHED();
110285dc:	e000037e 	bsr      	0x11028cd8	// 11028cd8 <cpu_task_stack_init+0x330>
110285e0:	6c17      	mov      	r0, r5
110285e2:	e00004d1 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
    RHINO_CPU_INTRPT_DISABLE();
110285e6:	e0000355 	bsr      	0x11028c90	// 11028c90 <cpu_task_stack_init+0x2e8>
110285ea:	6d43      	mov      	r5, r0
    ret = pend_state_end_proc(g_active_task[cpu_cur_get()], NULL);
110285ec:	3100      	movi      	r1, 0
110285ee:	9400      	ld.w      	r0, (r4, 0x0)
110285f0:	e00006e0 	bsr      	0x110293b0	// 110293b0 <cpu_task_stack_init+0xa08>
110285f4:	6d03      	mov      	r4, r0
    RHINO_CPU_INTRPT_ENABLE();
110285f6:	6c17      	mov      	r0, r5
110285f8:	e00004c6 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
    return ret;
110285fc:	07da      	br      	0x110285b0	// 110285b0 <krhino_task_sleep+0x24>
        return RHINO_INV_PARAM;
110285fe:	3405      	movi      	r4, 5
11028600:	07d8      	br      	0x110285b0	// 110285b0 <krhino_task_sleep+0x24>
11028602:	0000      	bkpt
11028604:	1fffd9b8 	.long	0x1fffd9b8
11028608:	1fffd2b4 	.long	0x1fffd2b4
1102860c:	1fffdad4 	.long	0x1fffdad4
11028610:	1fffd274 	.long	0x1fffd274

11028614 <krhino_cur_task_get>:
{
11028614:	14d1      	push      	r4, r15
    RHINO_CRITICAL_ENTER();
11028616:	e000033d 	bsr      	0x11028c90	// 11028c90 <cpu_task_stack_init+0x2e8>
    task = g_active_task[cpu_cur_get()];
1102861a:	1064      	lrw      	r3, 0x1fffdad4	// 11028628 <krhino_cur_task_get+0x14>
1102861c:	9380      	ld.w      	r4, (r3, 0x0)
    RHINO_CRITICAL_EXIT();
1102861e:	e00004b3 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
}
11028622:	6c13      	mov      	r0, r4
11028624:	1491      	pop      	r4, r15
11028626:	0000      	bkpt
11028628:	1fffdad4 	.long	0x1fffdad4

1102862c <task_pri_change>:
{
1102862c:	14d4      	push      	r4-r7, r15
1102862e:	6d03      	mov      	r4, r0
11028630:	6d47      	mov      	r5, r1
        if (task->prio != new_pri) {
11028632:	d8e40064 	ld.b      	r7, (r4, 0x64)
11028636:	65d6      	cmpne      	r5, r7
11028638:	0803      	bt      	0x1102863e	// 1102863e <task_pri_change+0x12>
    return RHINO_SUCCESS;
1102863a:	3000      	movi      	r0, 0
}
1102863c:	1494      	pop      	r4-r7, r15
            switch (task->task_state) {
1102863e:	9450      	ld.w      	r2, (r4, 0x40)
11028640:	3a06      	cmphsi      	r2, 7
11028642:	084e      	bt      	0x110286de	// 110286de <task_pri_change+0xb2>
11028644:	3301      	movi      	r3, 1
11028646:	70c8      	lsl      	r3, r2
11028648:	e4432014 	andi      	r2, r3, 20
1102864c:	3a40      	cmpnei      	r2, 0
1102864e:	082b      	bt      	0x110286a4	// 110286a4 <task_pri_change+0x78>
11028650:	e4432068 	andi      	r2, r3, 104
11028654:	3a40      	cmpnei      	r2, 0
11028656:	0824      	bt      	0x1102869e	// 1102869e <task_pri_change+0x72>
11028658:	e4632002 	andi      	r3, r3, 2
1102865c:	3b40      	cmpnei      	r3, 0
1102865e:	0c40      	bf      	0x110286de	// 110286de <task_pri_change+0xb2>
     }
     else {
        return RHINO_FALSE;
     }
#else
    if (g_active_task[0] == task) {
11028660:	1168      	lrw      	r3, 0x1fffdad4	// 11028700 <task_pri_change+0xd4>
11028662:	9360      	ld.w      	r3, (r3, 0x0)
11028664:	64d2      	cmpne      	r4, r3
11028666:	0846      	bt      	0x110286f2	// 110286f2 <task_pri_change+0xc6>
                        if (task->sched_policy != KSCHED_CFS) {
11028668:	d8640061 	ld.b      	r3, (r4, 0x61)
1102866c:	3b42      	cmpnei      	r3, 2
1102866e:	0c05      	bf      	0x11028678	// 11028678 <task_pri_change+0x4c>
                            ready_list_rm(&g_ready_queue, task);
11028670:	6c53      	mov      	r1, r4
11028672:	1105      	lrw      	r0, 0x1fffd274	// 11028704 <task_pri_change+0xd8>
11028674:	e0000356 	bsr      	0x11028d20	// 11028d20 <cpu_task_stack_init+0x378>
        return RHINO_TRUE;
11028678:	3301      	movi      	r3, 1
                    if (task_exec > 0u) {
1102867a:	3b40      	cmpnei      	r3, 0
                    task->prio = new_pri;
1102867c:	dca40064 	st.b      	r5, (r4, 0x64)
                    if (task_exec > 0u) {
11028680:	0c0a      	bf      	0x11028694	// 11028694 <task_pri_change+0x68>
                        if (task->sched_policy != KSCHED_CFS) {
11028682:	d8640061 	ld.b      	r3, (r4, 0x61)
11028686:	3b42      	cmpnei      	r3, 2
11028688:	0fd9      	bf      	0x1102863a	// 1102863a <task_pri_change+0xe>
                            ready_list_add_head(&g_ready_queue, task);
1102868a:	6c53      	mov      	r1, r4
1102868c:	101e      	lrw      	r0, 0x1fffd274	// 11028704 <task_pri_change+0xd8>
1102868e:	e0000295 	bsr      	0x11028bb8	// 11028bb8 <cpu_task_stack_init+0x210>
11028692:	07d4      	br      	0x1102863a	// 1102863a <task_pri_change+0xe>
                        ready_list_add_tail(&g_ready_queue, task);
11028694:	6c53      	mov      	r1, r4
11028696:	101c      	lrw      	r0, 0x1fffd274	// 11028704 <task_pri_change+0xd8>
11028698:	e000024e 	bsr      	0x11028b34	// 11028b34 <cpu_task_stack_init+0x18c>
1102869c:	07cf      	br      	0x1102863a	// 1102863a <task_pri_change+0xe>
                    task->prio = new_pri;
1102869e:	dca40064 	st.b      	r5, (r4, 0x64)
110286a2:	07cc      	br      	0x1102863a	// 1102863a <task_pri_change+0xe>
                    task->prio = new_pri;
110286a4:	dca40064 	st.b      	r5, (r4, 0x64)
                    pend_list_reorder(task);
110286a8:	6c13      	mov      	r0, r4
110286aa:	e0000653 	bsr      	0x11029350	// 11029350 <cpu_task_stack_init+0x9a8>
                    if (task->blk_obj->obj_type == RHINO_MUTEX_OBJ_TYPE) {
110286ae:	9472      	ld.w      	r3, (r4, 0x48)
110286b0:	9344      	ld.w      	r2, (r3, 0x10)
110286b2:	3a42      	cmpnei      	r2, 2
110286b4:	0bc3      	bt      	0x1102863a	// 1102863a <task_pri_change+0xe>
                        mutex_task = mutex_tmp->mutex_task;
110286b6:	93c6      	ld.w      	r6, (r3, 0x18)
                        if (mutex_task->prio > task->prio) {
110286b8:	d8440064 	ld.b      	r2, (r4, 0x64)
110286bc:	d8660064 	ld.b      	r3, (r6, 0x64)
110286c0:	64c8      	cmphs      	r2, r3
110286c2:	0c0c      	bf      	0x110286da	// 110286da <task_pri_change+0xae>
                        } else if (mutex_task->prio == old_pri) {
110286c4:	64de      	cmpne      	r7, r3
110286c6:	0bba      	bt      	0x1102863a	// 1102863a <task_pri_change+0xe>
                            new_pri = mutex_pri_look(mutex_task, 0);
110286c8:	3100      	movi      	r1, 0
110286ca:	6c1b      	mov      	r0, r6
110286cc:	e0000582 	bsr      	0x110291d0	// 110291d0 <cpu_task_stack_init+0x828>
                            if (new_pri != mutex_task->prio) {
110286d0:	d8660064 	ld.b      	r3, (r6, 0x64)
                            new_pri = mutex_pri_look(mutex_task, 0);
110286d4:	6d43      	mov      	r5, r0
                            if (new_pri != mutex_task->prio) {
110286d6:	640e      	cmpne      	r3, r0
110286d8:	0fb1      	bf      	0x1102863a	// 1102863a <task_pri_change+0xe>
{
110286da:	6d1b      	mov      	r4, r6
110286dc:	07ab      	br      	0x11028632	// 11028632 <task_pri_change+0x6>
                    k_err_proc(RHINO_INV_TASK_STATE);
110286de:	309a      	movi      	r0, 154
110286e0:	4001      	lsli      	r0, r0, 1
110286e2:	ea020289 	movi      	r2, 649
110286e6:	1029      	lrw      	r1, 0x11012216	// 11028708 <task_pri_change+0xdc>
110286e8:	e0000370 	bsr      	0x11028dc8	// 11028dc8 <cpu_task_stack_init+0x420>
                    return RHINO_INV_TASK_STATE;
110286ec:	309a      	movi      	r0, 154
110286ee:	4001      	lsli      	r0, r0, 1
110286f0:	07a6      	br      	0x1102863c	// 1102863c <task_pri_change+0x10>
                        ready_list_rm(&g_ready_queue, task);
110286f2:	6c53      	mov      	r1, r4
110286f4:	1004      	lrw      	r0, 0x1fffd274	// 11028704 <task_pri_change+0xd8>
110286f6:	e0000315 	bsr      	0x11028d20	// 11028d20 <cpu_task_stack_init+0x378>
    }
    else {
        return RHINO_FALSE;
110286fa:	3300      	movi      	r3, 0
110286fc:	07bf      	br      	0x1102867a	// 1102867a <task_pri_change+0x4e>
110286fe:	0000      	bkpt
11028700:	1fffdad4 	.long	0x1fffdad4
11028704:	1fffd274 	.long	0x1fffd274
11028708:	11012216 	.long	0x11012216

1102870c <krhino_task_del>:

kstat_t krhino_task_del(ktask_t *task)
{
1102870c:	14d2      	push      	r4-r5, r15
1102870e:	6d03      	mov      	r4, r0

#if (RHINO_CONFIG_USER_HOOK > 0)
    res_free_t *res_free;
#endif

    RHINO_CRITICAL_ENTER();
11028710:	e00002c0 	bsr      	0x11028c90	// 11028c90 <cpu_task_stack_init+0x2e8>
    cur_cpu_num = cpu_cur_get();

    INTRPT_NESTED_LEVEL_CHK();
11028714:	1173      	lrw      	r3, 0x1fffd9b8	// 110287e0 <krhino_task_del+0xd4>
    RHINO_CRITICAL_ENTER();
11028716:	6d43      	mov      	r5, r0
    INTRPT_NESTED_LEVEL_CHK();
11028718:	8360      	ld.b      	r3, (r3, 0x0)
1102871a:	3b40      	cmpnei      	r3, 0
1102871c:	0c06      	bf      	0x11028728	// 11028728 <krhino_task_del+0x1c>
1102871e:	e0000433 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
11028722:	30fa      	movi      	r0, 250
11028724:	4002      	lsli      	r0, r0, 2
#endif

    RHINO_CRITICAL_EXIT_SCHED();

    return RHINO_SUCCESS;
}
11028726:	1492      	pop      	r4-r5, r15
    if (task == NULL) {
11028728:	3c40      	cmpnei      	r4, 0
1102872a:	0803      	bt      	0x11028730	// 11028730 <krhino_task_del+0x24>
        task = g_active_task[cur_cpu_num];
1102872c:	116e      	lrw      	r3, 0x1fffdad4	// 110287e4 <krhino_task_del+0xd8>
1102872e:	9380      	ld.w      	r4, (r3, 0x0)
    if (task->prio == RHINO_IDLE_PRI) {
11028730:	d8640064 	ld.b      	r3, (r4, 0x64)
11028734:	3b4d      	cmpnei      	r3, 13
11028736:	0807      	bt      	0x11028744	// 11028744 <krhino_task_del+0x38>
        RHINO_CRITICAL_EXIT();
11028738:	6c17      	mov      	r0, r5
1102873a:	e0000425 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
        return RHINO_TASK_DEL_NOT_ALLOWED;
1102873e:	3097      	movi      	r0, 151
            return RHINO_INV_TASK_STATE;
11028740:	4001      	lsli      	r0, r0, 1
11028742:	07f2      	br      	0x11028726	// 11028726 <krhino_task_del+0x1a>
    if (task->mm_alloc_flag != K_OBJ_STATIC_ALLOC) {
11028744:	d8640066 	ld.b      	r3, (r4, 0x66)
11028748:	3b41      	cmpnei      	r3, 1
1102874a:	0c06      	bf      	0x11028756	// 11028756 <krhino_task_del+0x4a>
        RHINO_CRITICAL_EXIT();
1102874c:	6c17      	mov      	r0, r5
1102874e:	e000041b 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
        return RHINO_KOBJ_DEL_ERR;
11028752:	3009      	movi      	r0, 9
11028754:	07e9      	br      	0x11028726	// 11028726 <krhino_task_del+0x1a>
    if (task == g_active_task[cpu_cur_get()]) {
11028756:	1164      	lrw      	r3, 0x1fffdad4	// 110287e4 <krhino_task_del+0xd8>
11028758:	9360      	ld.w      	r3, (r3, 0x0)
1102875a:	64d2      	cmpne      	r4, r3
1102875c:	080a      	bt      	0x11028770	// 11028770 <krhino_task_del+0x64>
        if (g_sched_lock[cpu_cur_get()] > 0u) {
1102875e:	1163      	lrw      	r3, 0x1fffd2b4	// 110287e8 <krhino_task_del+0xdc>
11028760:	8360      	ld.b      	r3, (r3, 0x0)
11028762:	3b40      	cmpnei      	r3, 0
11028764:	0c06      	bf      	0x11028770	// 11028770 <krhino_task_del+0x64>
            RHINO_CRITICAL_EXIT();
11028766:	6c17      	mov      	r0, r5
11028768:	e000040e 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
            return RHINO_SCHED_DISABLE;
1102876c:	30c8      	movi      	r0, 200
1102876e:	07dc      	br      	0x11028726	// 11028726 <krhino_task_del+0x1a>
    task_mutex_free(task);
11028770:	9407      	ld.w      	r0, (r4, 0x1c)
11028772:	e3fffde5 	bsr      	0x1102833c	// 1102833c <task_mutex_free.isra.3>
    switch (task->task_state) {
11028776:	9410      	ld.w      	r0, (r4, 0x40)
11028778:	2800      	subi      	r0, 1
1102877a:	3805      	cmphsi      	r0, 6
1102877c:	082d      	bt      	0x110287d6	// 110287d6 <krhino_task_del+0xca>
1102877e:	e000063d 	bsr      	0x110293f8	// 110293f8 <cpu_task_stack_init+0xa50>
11028782:	1b03      	.short	0x1b03
11028784:	17171b07 	.long	0x17171b07
            ready_list_rm(&g_ready_queue, task);
11028788:	6c53      	mov      	r1, r4
1102878a:	1019      	lrw      	r0, 0x1fffd274	// 110287ec <krhino_task_del+0xe0>
1102878c:	e00002ca 	bsr      	0x11028d20	// 11028d20 <cpu_task_stack_init+0x378>
            task->task_state = K_DELETED;
11028790:	3307      	movi      	r3, 7
11028792:	b470      	st.w      	r3, (r4, 0x40)
    res_free = (res_free_t *)(task->task_stack_base + RHINO_CONFIG_STK_CHK_WORDS);
11028794:	9462      	ld.w      	r3, (r4, 0x8)
    res_free->cnt = 0;
11028796:	3200      	movi      	r2, 0
    krhino_task_del_hook(task, res_free);
11028798:	6c13      	mov      	r0, r4
    res_free->cnt = 0;
1102879a:	b341      	st.w      	r2, (r3, 0x4)
1102879c:	5b2e      	addi      	r1, r3, 4
    krhino_task_del_hook(task, res_free);
1102879e:	e0000417 	bsr      	0x11028fcc	// 11028fcc <cpu_task_stack_init+0x624>
    RHINO_CRITICAL_EXIT_SCHED();
110287a2:	e000029b 	bsr      	0x11028cd8	// 11028cd8 <cpu_task_stack_init+0x330>
110287a6:	6c17      	mov      	r0, r5
110287a8:	e00003ee 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
    return RHINO_SUCCESS;
110287ac:	3000      	movi      	r0, 0
110287ae:	07bc      	br      	0x11028726	// 11028726 <krhino_task_del+0x1a>
            tick_list_rm(task);
110287b0:	6c13      	mov      	r0, r4
110287b2:	e000048b 	bsr      	0x110290c8	// 110290c8 <cpu_task_stack_init+0x720>
110287b6:	07ed      	br      	0x11028790	// 11028790 <krhino_task_del+0x84>
            tick_list_rm(task);
110287b8:	6c13      	mov      	r0, r4
110287ba:	e0000487 	bsr      	0x110290c8	// 110290c8 <cpu_task_stack_init+0x720>
    element->prev->next = element->next;
110287be:	9465      	ld.w      	r3, (r4, 0x14)
110287c0:	9444      	ld.w      	r2, (r4, 0x10)
            mutex_task_pri_reset(task);
110287c2:	6c13      	mov      	r0, r4
110287c4:	b340      	st.w      	r2, (r3, 0x0)
    element->next->prev = element->prev;
110287c6:	9464      	ld.w      	r3, (r4, 0x10)
110287c8:	9445      	ld.w      	r2, (r4, 0x14)
110287ca:	b341      	st.w      	r2, (r3, 0x4)
            task->task_state = K_DELETED;
110287cc:	3307      	movi      	r3, 7
110287ce:	b470      	st.w      	r3, (r4, 0x40)
            mutex_task_pri_reset(task);
110287d0:	e00001be 	bsr      	0x11028b4c	// 11028b4c <cpu_task_stack_init+0x1a4>
            break;
110287d4:	07e0      	br      	0x11028794	// 11028794 <krhino_task_del+0x88>
            RHINO_CRITICAL_EXIT();
110287d6:	6c17      	mov      	r0, r5
110287d8:	e00003d6 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
            return RHINO_INV_TASK_STATE;
110287dc:	309a      	movi      	r0, 154
110287de:	07b1      	br      	0x11028740	// 11028740 <krhino_task_del+0x34>
110287e0:	1fffd9b8 	.long	0x1fffd9b8
110287e4:	1fffdad4 	.long	0x1fffdad4
110287e8:	1fffd2b4 	.long	0x1fffd2b4
110287ec:	1fffd274 	.long	0x1fffd274

110287f0 <krhino_task_dyn_del>:

#if (RHINO_CONFIG_KOBJ_DYN_ALLOC > 0)
kstat_t krhino_task_dyn_del(ktask_t *task)
{
110287f0:	14d4      	push      	r4-r7, r15
110287f2:	1421      	subi      	r14, r14, 4
110287f4:	6d03      	mov      	r4, r0

    kstat_t    ret;
    uint8_t    cur_cpu_num;
    res_free_t *res_free;

    RHINO_CRITICAL_ENTER();
110287f6:	e000024d 	bsr      	0x11028c90	// 11028c90 <cpu_task_stack_init+0x2e8>

    cur_cpu_num = cpu_cur_get();

    INTRPT_NESTED_LEVEL_CHK();
110287fa:	126a      	lrw      	r3, 0x1fffd9b8	// 11028920 <krhino_task_dyn_del+0x130>
    RHINO_CRITICAL_ENTER();
110287fc:	6d83      	mov      	r6, r0
    INTRPT_NESTED_LEVEL_CHK();
110287fe:	8360      	ld.b      	r3, (r3, 0x0)
11028800:	3b40      	cmpnei      	r3, 0
11028802:	0c08      	bf      	0x11028812	// 11028812 <krhino_task_dyn_del+0x22>
11028804:	35fa      	movi      	r5, 250
11028806:	e00003bf 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
1102880a:	45a2      	lsli      	r5, r5, 2
#endif

    RHINO_CRITICAL_EXIT_SCHED();

    return RHINO_SUCCESS;
}
1102880c:	6c17      	mov      	r0, r5
1102880e:	1401      	addi      	r14, r14, 4
11028810:	1494      	pop      	r4-r7, r15
    if (task == NULL) {
11028812:	3c40      	cmpnei      	r4, 0
11028814:	0803      	bt      	0x1102881a	// 1102881a <krhino_task_dyn_del+0x2a>
        task = g_active_task[cur_cpu_num];
11028816:	1264      	lrw      	r3, 0x1fffdad4	// 11028924 <krhino_task_dyn_del+0x134>
11028818:	9380      	ld.w      	r4, (r3, 0x0)
    if (task->prio == RHINO_IDLE_PRI) {
1102881a:	d8640064 	ld.b      	r3, (r4, 0x64)
1102881e:	3b4d      	cmpnei      	r3, 13
11028820:	0807      	bt      	0x1102882e	// 1102882e <krhino_task_dyn_del+0x3e>
        RHINO_CRITICAL_EXIT();
11028822:	6c1b      	mov      	r0, r6
        return RHINO_TASK_DEL_NOT_ALLOWED;
11028824:	3597      	movi      	r5, 151
        RHINO_CRITICAL_EXIT();
11028826:	e00003af 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
        return RHINO_INV_TASK_STATE;
1102882a:	45a1      	lsli      	r5, r5, 1
1102882c:	07f0      	br      	0x1102880c	// 1102880c <krhino_task_dyn_del+0x1c>
    if (task->mm_alloc_flag != K_OBJ_DYN_ALLOC) {
1102882e:	d8640066 	ld.b      	r3, (r4, 0x66)
11028832:	3b42      	cmpnei      	r3, 2
11028834:	0c06      	bf      	0x11028840	// 11028840 <krhino_task_dyn_del+0x50>
        RHINO_CRITICAL_EXIT();
11028836:	6c1b      	mov      	r0, r6
        return RHINO_KOBJ_DEL_ERR;
11028838:	3509      	movi      	r5, 9
        RHINO_CRITICAL_EXIT();
1102883a:	e00003a5 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
        return RHINO_KOBJ_DEL_ERR;
1102883e:	07e7      	br      	0x1102880c	// 1102880c <krhino_task_dyn_del+0x1c>
    if (task == g_active_task[cpu_cur_get()]) {
11028840:	1179      	lrw      	r3, 0x1fffdad4	// 11028924 <krhino_task_dyn_del+0x134>
11028842:	9360      	ld.w      	r3, (r3, 0x0)
11028844:	64d2      	cmpne      	r4, r3
11028846:	080a      	bt      	0x1102885a	// 1102885a <krhino_task_dyn_del+0x6a>
        if (g_sched_lock[cpu_cur_get()] > 0u) {
11028848:	1178      	lrw      	r3, 0x1fffd2b4	// 11028928 <krhino_task_dyn_del+0x138>
1102884a:	8360      	ld.b      	r3, (r3, 0x0)
1102884c:	3b40      	cmpnei      	r3, 0
1102884e:	0c06      	bf      	0x1102885a	// 1102885a <krhino_task_dyn_del+0x6a>
            RHINO_CRITICAL_EXIT();
11028850:	6c1b      	mov      	r0, r6
            return RHINO_SCHED_DISABLE;
11028852:	35c8      	movi      	r5, 200
            RHINO_CRITICAL_EXIT();
11028854:	e0000398 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
            return RHINO_SCHED_DISABLE;
11028858:	07da      	br      	0x1102880c	// 1102880c <krhino_task_dyn_del+0x1c>
    if (task->task_state == K_DELETED) {
1102885a:	9470      	ld.w      	r3, (r4, 0x40)
1102885c:	3b47      	cmpnei      	r3, 7
1102885e:	0806      	bt      	0x1102886a	// 1102886a <krhino_task_dyn_del+0x7a>
        RHINO_CRITICAL_EXIT();
11028860:	6c1b      	mov      	r0, r6
        return RHINO_INV_TASK_STATE;
11028862:	359a      	movi      	r5, 154
        RHINO_CRITICAL_EXIT();
11028864:	e0000390 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
11028868:	07e1      	br      	0x1102882a	// 1102882a <krhino_task_dyn_del+0x3a>
    res_free = (res_free_t *)(task->task_stack_base + RHINO_CONFIG_STK_CHK_WORDS);
1102886a:	9462      	ld.w      	r3, (r4, 0x8)
    res_free->cnt = 0;
1102886c:	3200      	movi      	r2, 0
1102886e:	5bee      	addi      	r7, r3, 4
11028870:	b341      	st.w      	r2, (r3, 0x4)
    klist_insert(&g_res_list, &res_free->res_list);
11028872:	e4070013 	addi      	r0, r7, 20
    g_sched_lock[cpu_cur_get()]++;
11028876:	114d      	lrw      	r2, 0x1fffd2b4	// 11028928 <krhino_task_dyn_del+0x138>
11028878:	8220      	ld.b      	r1, (r2, 0x0)
1102887a:	2100      	addi      	r1, 1
1102887c:	a220      	st.b      	r1, (r2, 0x0)
1102887e:	b840      	st.w      	r2, (r14, 0x0)
    element->prev = head->prev;
11028880:	112b      	lrw      	r1, 0x1fffd9b0	// 1102892c <krhino_task_dyn_del+0x13c>
    element->next = head;
11028882:	b326      	st.w      	r1, (r3, 0x18)
    element->prev = head->prev;
11028884:	91a1      	ld.w      	r5, (r1, 0x4)
11028886:	b3a7      	st.w      	r5, (r3, 0x1c)
    head->prev->next = element;
11028888:	b500      	st.w      	r0, (r5, 0x0)
    head->prev       = element;
1102888a:	b101      	st.w      	r0, (r1, 0x4)
    res_free->res[0] = task->task_stack_base;
1102888c:	9442      	ld.w      	r2, (r4, 0x8)
    ret = krhino_sem_give(&g_res_sem);
1102888e:	1109      	lrw      	r0, 0x1fffd070	// 11028930 <krhino_task_dyn_del+0x140>
    res_free->res[0] = task->task_stack_base;
11028890:	b741      	st.w      	r2, (r7, 0x4)
    res_free->res[1] = task;
11028892:	b383      	st.w      	r4, (r3, 0xc)
    res_free->cnt += 2;
11028894:	9321      	ld.w      	r1, (r3, 0x4)
11028896:	2101      	addi      	r1, 2
11028898:	b321      	st.w      	r1, (r3, 0x4)
    ret = krhino_sem_give(&g_res_sem);
1102889a:	e00004e3 	bsr      	0x11029260	// 11029260 <cpu_task_stack_init+0x8b8>
    g_sched_lock[cpu_cur_get()]--;
1102889e:	9840      	ld.w      	r2, (r14, 0x0)
    if (ret != RHINO_SUCCESS) {
110288a0:	3840      	cmpnei      	r0, 0
    g_sched_lock[cpu_cur_get()]--;
110288a2:	8260      	ld.b      	r3, (r2, 0x0)
110288a4:	2b00      	subi      	r3, 1
    ret = krhino_sem_give(&g_res_sem);
110288a6:	6d43      	mov      	r5, r0
    g_sched_lock[cpu_cur_get()]--;
110288a8:	a260      	st.b      	r3, (r2, 0x0)
    if (ret != RHINO_SUCCESS) {
110288aa:	0c0b      	bf      	0x110288c0	// 110288c0 <krhino_task_dyn_del+0xd0>
        RHINO_CRITICAL_EXIT();
110288ac:	6c1b      	mov      	r0, r6
110288ae:	e000036b 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
        k_err_proc(RHINO_SYS_SP_ERR);
110288b2:	ea0203c7 	movi      	r2, 967
110288b6:	1120      	lrw      	r1, 0x11012216	// 11028934 <krhino_task_dyn_del+0x144>
110288b8:	3002      	movi      	r0, 2
110288ba:	e0000287 	bsr      	0x11028dc8	// 11028dc8 <cpu_task_stack_init+0x420>
        return ret;
110288be:	07a7      	br      	0x1102880c	// 1102880c <krhino_task_dyn_del+0x1c>
    task_mutex_free(task);
110288c0:	9407      	ld.w      	r0, (r4, 0x1c)
110288c2:	e3fffd3d 	bsr      	0x1102833c	// 1102833c <task_mutex_free.isra.3>
    switch (task->task_state) {
110288c6:	9410      	ld.w      	r0, (r4, 0x40)
110288c8:	2800      	subi      	r0, 1
110288ca:	3805      	cmphsi      	r0, 6
110288cc:	080c      	bt      	0x110288e4	// 110288e4 <krhino_task_dyn_del+0xf4>
110288ce:	e0000595 	bsr      	0x110293f8	// 110293f8 <cpu_task_stack_init+0xa50>
110288d2:	1703      	.short	0x1703
110288d4:	13131707 	.long	0x13131707
            ready_list_rm(&g_ready_queue, task);
110288d8:	6c53      	mov      	r1, r4
110288da:	1018      	lrw      	r0, 0x1fffd274	// 11028938 <krhino_task_dyn_del+0x148>
110288dc:	e0000222 	bsr      	0x11028d20	// 11028d20 <cpu_task_stack_init+0x378>
            task->task_state = K_DELETED;
110288e0:	3307      	movi      	r3, 7
110288e2:	b470      	st.w      	r3, (r4, 0x40)
    krhino_task_del_hook(task, res_free);
110288e4:	6c13      	mov      	r0, r4
110288e6:	6c5f      	mov      	r1, r7
110288e8:	e0000372 	bsr      	0x11028fcc	// 11028fcc <cpu_task_stack_init+0x624>
    RHINO_CRITICAL_EXIT_SCHED();
110288ec:	e00001f6 	bsr      	0x11028cd8	// 11028cd8 <cpu_task_stack_init+0x330>
110288f0:	6c1b      	mov      	r0, r6
110288f2:	e0000349 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>
    return RHINO_SUCCESS;
110288f6:	078b      	br      	0x1102880c	// 1102880c <krhino_task_dyn_del+0x1c>
            tick_list_rm(task);
110288f8:	6c13      	mov      	r0, r4
110288fa:	e00003e7 	bsr      	0x110290c8	// 110290c8 <cpu_task_stack_init+0x720>
110288fe:	07f1      	br      	0x110288e0	// 110288e0 <krhino_task_dyn_del+0xf0>
            tick_list_rm(task);
11028900:	6c13      	mov      	r0, r4
11028902:	e00003e3 	bsr      	0x110290c8	// 110290c8 <cpu_task_stack_init+0x720>
    element->prev->next = element->next;
11028906:	9465      	ld.w      	r3, (r4, 0x14)
11028908:	9444      	ld.w      	r2, (r4, 0x10)
            mutex_task_pri_reset(task);
1102890a:	6c13      	mov      	r0, r4
1102890c:	b340      	st.w      	r2, (r3, 0x0)
    element->next->prev = element->prev;
1102890e:	9464      	ld.w      	r3, (r4, 0x10)
11028910:	9445      	ld.w      	r2, (r4, 0x14)
11028912:	b341      	st.w      	r2, (r3, 0x4)
            task->task_state = K_DELETED;
11028914:	3307      	movi      	r3, 7
11028916:	b470      	st.w      	r3, (r4, 0x40)
            mutex_task_pri_reset(task);
11028918:	e000011a 	bsr      	0x11028b4c	// 11028b4c <cpu_task_stack_init+0x1a4>
            break;
1102891c:	07e4      	br      	0x110288e4	// 110288e4 <krhino_task_dyn_del+0xf4>
1102891e:	0000      	bkpt
11028920:	1fffd9b8 	.long	0x1fffd9b8
11028924:	1fffdad4 	.long	0x1fffdad4
11028928:	1fffd2b4 	.long	0x1fffd2b4
1102892c:	1fffd9b0 	.long	0x1fffd9b0
11028930:	1fffd070 	.long	0x1fffd070
11028934:	11012216 	.long	0x11012216
11028938:	1fffd274 	.long	0x1fffd274

1102893c <krhino_task_deathbed>:
    return RHINO_SUCCESS;
}
#endif

void krhino_task_deathbed(void)
{
1102893c:	14d0      	push      	r15
#if (RHINO_CONFIG_TASK_DEL > 0)
    ktask_t *task;

    task = krhino_cur_task_get();
1102893e:	e3fffe6b 	bsr      	0x11028614	// 11028614 <krhino_cur_task_get>

    if (task->mm_alloc_flag == K_OBJ_DYN_ALLOC) {
11028942:	d8600066 	ld.b      	r3, (r0, 0x66)
        /* del my self*/
#if (RHINO_CONFIG_KOBJ_DYN_ALLOC > 0)
        krhino_task_dyn_del(NULL);
11028946:	3000      	movi      	r0, 0
    if (task->mm_alloc_flag == K_OBJ_DYN_ALLOC) {
11028948:	3b42      	cmpnei      	r3, 2
1102894a:	0804      	bt      	0x11028952	// 11028952 <krhino_task_deathbed+0x16>
        krhino_task_dyn_del(NULL);
1102894c:	e3ffff52 	bsr      	0x110287f0	// 110287f0 <krhino_task_dyn_del>

    while (1) {
        krhino_task_sleep(RHINO_CONFIG_TICKS_PER_SECOND * 10);
    }
#endif
}
11028950:	1490      	pop      	r15
        krhino_task_del(NULL);
11028952:	e3fffedd 	bsr      	0x1102870c	// 1102870c <krhino_task_del>
}
11028956:	07fd      	br      	0x11028950	// 11028950 <krhino_task_deathbed+0x14>

11028958 <krhino_sys_tick_get>:

tick_t krhino_sys_tick_get(void)
{
11028958:	14d2      	push      	r4-r5, r15
    CPSR_ALLOC();

    tick_t tick_tmp;

    RHINO_CPU_INTRPT_DISABLE();
1102895a:	e000019b 	bsr      	0x11028c90	// 11028c90 <cpu_task_stack_init+0x2e8>
    tick_tmp = g_tick_count;
1102895e:	1065      	lrw      	r3, 0x1fffd850	// 11028970 <krhino_sys_tick_get+0x18>
11028960:	9380      	ld.w      	r4, (r3, 0x0)
11028962:	93a1      	ld.w      	r5, (r3, 0x4)
    RHINO_CPU_INTRPT_ENABLE();
11028964:	e0000310 	bsr      	0x11028f84	// 11028f84 <cpu_task_stack_init+0x5dc>

    return tick_tmp;
}
11028968:	6c13      	mov      	r0, r4
1102896a:	6c57      	mov      	r1, r5
1102896c:	1492      	pop      	r4-r5, r15
1102896e:	0000      	bkpt
11028970:	1fffd850 	.long	0x1fffd850

11028974 <krhino_sys_time_get>:

sys_time_t krhino_sys_time_get(void)
{
11028974:	14d0      	push      	r15
    return (sys_time_t)(krhino_sys_tick_get() * 1000 / RHINO_CONFIG_TICKS_PER_SECOND);
11028976:	e3fffff1 	bsr      	0x11028958	// 11028958 <krhino_sys_tick_get>
1102897a:	32fa      	movi      	r2, 250
1102897c:	4242      	lsli      	r2, r2, 2
1102897e:	3300      	movi      	r3, 0
11028980:	e3ff98a4 	bsr      	0x1101bac8	// 1101bac8 <__muldi3>
11028984:	32fa      	movi      	r2, 250
11028986:	4242      	lsli      	r2, r2, 2
11028988:	3300      	movi      	r3, 0
1102898a:	e3ff9cb3 	bsr      	0x1101c2f0	// 1101c2f0 <__udivdi3>
}
1102898e:	1490      	pop      	r15

11028990 <krhino_ms_to_ticks>:
11028990:	14d0      	push      	r15
11028992:	32fa      	movi      	r2, 250
11028994:	4242      	lsli      	r2, r2, 2
11028996:	3300      	movi      	r3, 0
11028998:	e3ff9898 	bsr      	0x1101bac8	// 1101bac8 <__muldi3>
1102899c:	32fa      	movi      	r2, 250
1102899e:	4242      	lsli      	r2, r2, 2
110289a0:	3300      	movi      	r3, 0
110289a2:	e3ff9ca7 	bsr      	0x1101c2f0	// 1101c2f0 <__udivdi3>
110289a6:	1490      	pop      	r15

110289a8 <cpu_task_stack_init>:
    return (__get_PSR() & PSR_T_Msk) ? 1: 0;
}

void *cpu_task_stack_init(cpu_stack_t *stack_base, size_t stack_size,
                          void *arg, task_entry_t entry)
{
110289a8:	14c1      	push      	r4
    cpu_stack_t *stk;
    uint32_t temp = (uint32_t)(stack_base + stack_size);
110289aa:	4122      	lsli      	r1, r1, 2
110289ac:	6004      	addu      	r0, r1
    uint32_t psr;

    temp &= 0xfffffffc;
110289ae:	3880      	bclri      	r0, 0
110289b0:	3881      	bclri      	r0, 1
    __ASM volatile("mfcr %0, psr" : "=r"(result));
110289b2:	c0006021 	mfcr      	r1, cr<0, 0>
    return (__get_PSR() & PSR_T_Msk) ? 1: 0;
110289b6:	3480      	movi      	r4, 128
110289b8:	4497      	lsli      	r4, r4, 23
110289ba:	6850      	and      	r1, r4
    stk = (cpu_stack_t *)temp;

    if (is_tee_mode()) {
        psr = 0xE0000340L;
    } else {
        psr = 0x80000340L;
110289bc:	1182      	lrw      	r4, 0x80000340	// 11028a44 <cpu_task_stack_init+0x9c>
110289be:	3940      	cmpnei      	r1, 0
110289c0:	1122      	lrw      	r1, 0xe0000340	// 11028a48 <cpu_task_stack_init+0xa0>
110289c2:	c4240c20 	incf      	r1, r4, 0
    }

    *(--stk) = (uint32_t)entry;                   /* entry point   */
110289c6:	588f      	subi      	r4, r0, 4
110289c8:	b460      	st.w      	r3, (r4, 0x0)
    *(--stk) = (uint32_t)psr;                     /* PSR           */
110289ca:	587f      	subi      	r3, r0, 8
110289cc:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)krhino_task_deathbed;    /* R15 (LR)      */
110289ce:	e460100b 	subi      	r3, r0, 12
110289d2:	103f      	lrw      	r1, 0x1102893c	// 11028a4c <cpu_task_stack_init+0xa4>
110289d4:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x13131313L;             /* R13           */
110289d6:	103f      	lrw      	r1, 0x13131313	// 11028a50 <cpu_task_stack_init+0xa8>
110289d8:	e460100f 	subi      	r3, r0, 16
110289dc:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x12121212L;             /* R12           */
110289de:	103e      	lrw      	r1, 0x12121212	// 11028a54 <cpu_task_stack_init+0xac>
110289e0:	e4601013 	subi      	r3, r0, 20
110289e4:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x11111111L;             /* R11           */
110289e6:	103d      	lrw      	r1, 0x11111111	// 11028a58 <cpu_task_stack_init+0xb0>
110289e8:	e4601017 	subi      	r3, r0, 24
110289ec:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x10101010L;             /* R10           */
110289ee:	103c      	lrw      	r1, 0x10101010	// 11028a5c <cpu_task_stack_init+0xb4>
110289f0:	e460101b 	subi      	r3, r0, 28
110289f4:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x09090909L;             /* R9            */
110289f6:	103b      	lrw      	r1, 0x9090909	// 11028a60 <cpu_task_stack_init+0xb8>
110289f8:	e460101f 	subi      	r3, r0, 32
110289fc:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x00000000L;             /* R8            */
110289fe:	3100      	movi      	r1, 0
11028a00:	e4601023 	subi      	r3, r0, 36
11028a04:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x07070707L;             /* R7            */
11028a06:	1038      	lrw      	r1, 0x7070707	// 11028a64 <cpu_task_stack_init+0xbc>
11028a08:	e4601027 	subi      	r3, r0, 40
11028a0c:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x06060606L;             /* R6            */
11028a0e:	1037      	lrw      	r1, 0x6060606	// 11028a68 <cpu_task_stack_init+0xc0>
11028a10:	e460102b 	subi      	r3, r0, 44
11028a14:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x05050505L;             /* R5            */
11028a16:	1036      	lrw      	r1, 0x5050505	// 11028a6c <cpu_task_stack_init+0xc4>
11028a18:	e460102f 	subi      	r3, r0, 48
11028a1c:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x04040404L;             /* R4            */
11028a1e:	1035      	lrw      	r1, 0x4040404	// 11028a70 <cpu_task_stack_init+0xc8>
11028a20:	e4601033 	subi      	r3, r0, 52
11028a24:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x03030303L;             /* R3            */
11028a26:	1034      	lrw      	r1, 0x3030303	// 11028a74 <cpu_task_stack_init+0xcc>
11028a28:	e4601037 	subi      	r3, r0, 56
11028a2c:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x02020202L;             /* R2            */
11028a2e:	1033      	lrw      	r1, 0x2020202	// 11028a78 <cpu_task_stack_init+0xd0>
11028a30:	e460103b 	subi      	r3, r0, 60
11028a34:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)0x01010101L;             /* R1            */
11028a36:	1032      	lrw      	r1, 0x1010101	// 11028a7c <cpu_task_stack_init+0xd4>
11028a38:	e460103f 	subi      	r3, r0, 64
    *(--stk) = (uint32_t)arg;                     /* R0 : argument */
11028a3c:	2843      	subi      	r0, 68
    *(--stk) = (uint32_t)0x01010101L;             /* R1            */
11028a3e:	b320      	st.w      	r1, (r3, 0x0)
    *(--stk) = (uint32_t)arg;                     /* R0 : argument */
11028a40:	b040      	st.w      	r2, (r0, 0x0)

    return stk;
}
11028a42:	1481      	pop      	r4
11028a44:	80000340 	.long	0x80000340
11028a48:	e0000340 	.long	0xe0000340
11028a4c:	1102893c 	.long	0x1102893c
11028a50:	13131313 	.long	0x13131313
11028a54:	12121212 	.long	0x12121212
11028a58:	11111111 	.long	0x11111111
11028a5c:	10101010 	.long	0x10101010
11028a60:	09090909 	.long	0x09090909
11028a64:	07070707 	.long	0x07070707
11028a68:	06060606 	.long	0x06060606
11028a6c:	05050505 	.long	0x05050505
11028a70:	04040404 	.long	0x04040404
11028a74:	03030303 	.long	0x03030303
11028a78:	02020202 	.long	0x02020202
11028a7c:	01010101 	.long	0x01010101
11028a80:	0002ea8d 	.long	0x0002ea8d
11028a84:	6c037834 	.long	0x6c037834
11028a88:	1fff4ca8 	.long	0x1fff4ca8
11028a8c:	0002ea8d 	.long	0x0002ea8d
11028a90:	6c037834 	.long	0x6c037834
11028a94:	1fff1ce4 	.long	0x1fff1ce4
11028a98:	0002ea8d 	.long	0x0002ea8d
11028a9c:	6c037834 	.long	0x6c037834
11028aa0:	1fff3ef4 	.long	0x1fff3ef4
11028aa4:	0002ea8d 	.long	0x0002ea8d
11028aa8:	6c037834 	.long	0x6c037834
11028aac:	000074c2 	.long	0x000074c2
11028ab0:	0002ea8d 	.long	0x0002ea8d
11028ab4:	6c037834 	.long	0x6c037834
11028ab8:	1fff3d84 	.long	0x1fff3d84
11028abc:	0002ea8d 	.long	0x0002ea8d
11028ac0:	6c037834 	.long	0x6c037834
11028ac4:	1fff4d2a 	.long	0x1fff4d2a
11028ac8:	0002ea8d 	.long	0x0002ea8d
11028acc:	6c037834 	.long	0x6c037834
11028ad0:	1fff4704 	.long	0x1fff4704
11028ad4:	0002ea8d 	.long	0x0002ea8d
11028ad8:	6c037834 	.long	0x6c037834
11028adc:	0000416e 	.long	0x0000416e
11028ae0:	0002ea8d 	.long	0x0002ea8d
11028ae4:	6c037834 	.long	0x6c037834
11028ae8:	0000773a 	.long	0x0000773a
11028aec:	0002ea8d 	.long	0x0002ea8d
11028af0:	6c037834 	.long	0x6c037834
11028af4:	00006a00 	.long	0x00006a00
11028af8:	0002ea8d 	.long	0x0002ea8d
11028afc:	6c037834 	.long	0x6c037834
11028b00:	1fff3e84 	.long	0x1fff3e84
11028b04:	0002ea8d 	.long	0x0002ea8d
11028b08:	6c037834 	.long	0x6c037834
11028b0c:	1fff4cd0 	.long	0x1fff4cd0
11028b10:	0002ea8d 	.long	0x0002ea8d
11028b14:	6c037834 	.long	0x6c037834
11028b18:	00007420 	.long	0x00007420
11028b1c:	0002ea8d 	.long	0x0002ea8d
11028b20:	6c037834 	.long	0x6c037834
11028b24:	0000768c 	.long	0x0000768c
11028b28:	0002ea8d 	.long	0x0002ea8d
11028b2c:	6c037834 	.long	0x6c037834
11028b30:	1fff4ca4 	.long	0x1fff4ca4
11028b34:	0002ea8d 	.long	0x0002ea8d
11028b38:	6c037834 	.long	0x6c037834
11028b3c:	1fff2428 	.long	0x1fff2428
11028b40:	0002ea8d 	.long	0x0002ea8d
11028b44:	6c037834 	.long	0x6c037834
11028b48:	00006f58 	.long	0x00006f58
11028b4c:	0002ea8d 	.long	0x0002ea8d
11028b50:	6c037834 	.long	0x6c037834
11028b54:	1fff2892 	.long	0x1fff2892
11028b58:	0002ea8d 	.long	0x0002ea8d
11028b5c:	6c037834 	.long	0x6c037834
11028b60:	1fff57ec 	.long	0x1fff57ec
11028b64:	0002ea8d 	.long	0x0002ea8d
11028b68:	6c037834 	.long	0x6c037834
11028b6c:	1fff56bc 	.long	0x1fff56bc
11028b70:	0002ea8d 	.long	0x0002ea8d
11028b74:	6c037834 	.long	0x6c037834
11028b78:	00003e5c 	.long	0x00003e5c
11028b7c:	0002ea8d 	.long	0x0002ea8d
11028b80:	6c037834 	.long	0x6c037834
11028b84:	00010be4 	.long	0x00010be4
11028b88:	0002ea8d 	.long	0x0002ea8d
11028b8c:	6c037834 	.long	0x6c037834
11028b90:	000072e6 	.long	0x000072e6
11028b94:	0002ea8d 	.long	0x0002ea8d
11028b98:	6c037834 	.long	0x6c037834
11028b9c:	00006f10 	.long	0x00006f10
11028ba0:	0002ea8d 	.long	0x0002ea8d
11028ba4:	6c037834 	.long	0x6c037834
11028ba8:	1fff4c84 	.long	0x1fff4c84
11028bac:	0002ea8d 	.long	0x0002ea8d
11028bb0:	6c037834 	.long	0x6c037834
11028bb4:	00007498 	.long	0x00007498
11028bb8:	0002ea8d 	.long	0x0002ea8d
11028bbc:	6c037834 	.long	0x6c037834
11028bc0:	1fff23ec 	.long	0x1fff23ec
11028bc4:	0002ea8d 	.long	0x0002ea8d
11028bc8:	6c037834 	.long	0x6c037834
11028bcc:	1fff480c 	.long	0x1fff480c
11028bd0:	0002ea8d 	.long	0x0002ea8d
11028bd4:	6c037834 	.long	0x6c037834
11028bd8:	000068d8 	.long	0x000068d8
11028bdc:	0002ea8d 	.long	0x0002ea8d
11028be0:	6c037834 	.long	0x6c037834
11028be4:	0000f1b0 	.long	0x0000f1b0
11028be8:	0002ea8d 	.long	0x0002ea8d
11028bec:	6c037834 	.long	0x6c037834
11028bf0:	1fff47dc 	.long	0x1fff47dc
11028bf4:	0002ea8d 	.long	0x0002ea8d
11028bf8:	6c037834 	.long	0x6c037834
11028bfc:	000076f4 	.long	0x000076f4
11028c00:	0002ea8d 	.long	0x0002ea8d
11028c04:	6c037834 	.long	0x6c037834
11028c08:	1fff48b8 	.long	0x1fff48b8
11028c0c:	0002ea8d 	.long	0x0002ea8d
11028c10:	6c037834 	.long	0x6c037834
11028c14:	00006edc 	.long	0x00006edc
11028c18:	0002ea8d 	.long	0x0002ea8d
11028c1c:	6c037834 	.long	0x6c037834
11028c20:	1fff34d4 	.long	0x1fff34d4
11028c24:	0002ea8d 	.long	0x0002ea8d
11028c28:	6c037834 	.long	0x6c037834
11028c2c:	00007306 	.long	0x00007306
11028c30:	0002ea8d 	.long	0x0002ea8d
11028c34:	6c037834 	.long	0x6c037834
11028c38:	1fff4b5c 	.long	0x1fff4b5c
11028c3c:	0002ea8d 	.long	0x0002ea8d
11028c40:	6c037834 	.long	0x6c037834
11028c44:	00006ea4 	.long	0x00006ea4
11028c48:	0002ea8d 	.long	0x0002ea8d
11028c4c:	6c037834 	.long	0x6c037834
11028c50:	0000729e 	.long	0x0000729e
11028c54:	0002ea8d 	.long	0x0002ea8d
11028c58:	6c037834 	.long	0x6c037834
11028c5c:	00005e8c 	.long	0x00005e8c
11028c60:	0002ea8d 	.long	0x0002ea8d
11028c64:	6c037834 	.long	0x6c037834
11028c68:	000077c0 	.long	0x000077c0
11028c6c:	0002ea8d 	.long	0x0002ea8d
11028c70:	6c037834 	.long	0x6c037834
11028c74:	1fff2d30 	.long	0x1fff2d30
11028c78:	0002ea8d 	.long	0x0002ea8d
11028c7c:	6c037834 	.long	0x6c037834
11028c80:	000079c8 	.long	0x000079c8
11028c84:	0002ea8d 	.long	0x0002ea8d
11028c88:	6c037834 	.long	0x6c037834
11028c8c:	1fff24f4 	.long	0x1fff24f4
11028c90:	0002ea8d 	.long	0x0002ea8d
11028c94:	6c037834 	.long	0x6c037834
11028c98:	1fff35f0 	.long	0x1fff35f0
11028c9c:	0002ea8d 	.long	0x0002ea8d
11028ca0:	6c037834 	.long	0x6c037834
11028ca4:	00007630 	.long	0x00007630
11028ca8:	0002ea8d 	.long	0x0002ea8d
11028cac:	6c037834 	.long	0x6c037834
11028cb0:	00007ada 	.long	0x00007ada
11028cb4:	0002ea8d 	.long	0x0002ea8d
11028cb8:	6c037834 	.long	0x6c037834
11028cbc:	1fff2e22 	.long	0x1fff2e22
11028cc0:	0002ea8d 	.long	0x0002ea8d
11028cc4:	6c037834 	.long	0x6c037834
11028cc8:	1fff2d08 	.long	0x1fff2d08
11028ccc:	0002ea8d 	.long	0x0002ea8d
11028cd0:	6c037834 	.long	0x6c037834
11028cd4:	00005e20 	.long	0x00005e20
11028cd8:	0002ea8d 	.long	0x0002ea8d
11028cdc:	6c037834 	.long	0x6c037834
11028ce0:	1fff2334 	.long	0x1fff2334
11028ce4:	0002ea8d 	.long	0x0002ea8d
11028ce8:	6c037834 	.long	0x6c037834
11028cec:	1fff4cb2 	.long	0x1fff4cb2
11028cf0:	0002ea8d 	.long	0x0002ea8d
11028cf4:	6c037834 	.long	0x6c037834
11028cf8:	00007348 	.long	0x00007348
11028cfc:	0002ea8d 	.long	0x0002ea8d
11028d00:	6c037834 	.long	0x6c037834
11028d04:	0000714e 	.long	0x0000714e
11028d08:	0002ea8d 	.long	0x0002ea8d
11028d0c:	6c037834 	.long	0x6c037834
11028d10:	000057f0 	.long	0x000057f0
11028d14:	0002ea8d 	.long	0x0002ea8d
11028d18:	6c037834 	.long	0x6c037834
11028d1c:	000059e0 	.long	0x000059e0
11028d20:	0002ea8d 	.long	0x0002ea8d
11028d24:	6c037834 	.long	0x6c037834
11028d28:	1fff2438 	.long	0x1fff2438
11028d2c:	0002ea8d 	.long	0x0002ea8d
11028d30:	6c037834 	.long	0x6c037834
11028d34:	0000a5e4 	.long	0x0000a5e4
11028d38:	0002ea8d 	.long	0x0002ea8d
11028d3c:	6c037834 	.long	0x6c037834
11028d40:	1fff2ed4 	.long	0x1fff2ed4
11028d44:	0002ea8d 	.long	0x0002ea8d
11028d48:	6c037834 	.long	0x6c037834
11028d4c:	0000f03c 	.long	0x0000f03c
11028d50:	0002ea8d 	.long	0x0002ea8d
11028d54:	6c037834 	.long	0x6c037834
11028d58:	00007092 	.long	0x00007092
11028d5c:	0002ea8d 	.long	0x0002ea8d
11028d60:	6c037834 	.long	0x6c037834
11028d64:	0000740e 	.long	0x0000740e
11028d68:	0002ea8d 	.long	0x0002ea8d
11028d6c:	6c037834 	.long	0x6c037834
11028d70:	00006e70 	.long	0x00006e70
11028d74:	0002ea8d 	.long	0x0002ea8d
11028d78:	6c037834 	.long	0x6c037834
11028d7c:	000077a0 	.long	0x000077a0
11028d80:	0002ea8d 	.long	0x0002ea8d
11028d84:	6c037834 	.long	0x6c037834
11028d88:	1fff1cd8 	.long	0x1fff1cd8
11028d8c:	0002ea8d 	.long	0x0002ea8d
11028d90:	6c037834 	.long	0x6c037834
11028d94:	00005ef8 	.long	0x00005ef8
11028d98:	0002ea8d 	.long	0x0002ea8d
11028d9c:	6c037834 	.long	0x6c037834
11028da0:	1fff1c00 	.long	0x1fff1c00
11028da4:	0002ea8d 	.long	0x0002ea8d
11028da8:	6c037834 	.long	0x6c037834
11028dac:	00004730 	.long	0x00004730
11028db0:	0002ea8d 	.long	0x0002ea8d
11028db4:	6c037834 	.long	0x6c037834
11028db8:	000061a8 	.long	0x000061a8
11028dbc:	0002ea8d 	.long	0x0002ea8d
11028dc0:	6c037834 	.long	0x6c037834
11028dc4:	00007a48 	.long	0x00007a48
11028dc8:	0002ea8d 	.long	0x0002ea8d
11028dcc:	6c037834 	.long	0x6c037834
11028dd0:	1fff2228 	.long	0x1fff2228
11028dd4:	0002ea8d 	.long	0x0002ea8d
11028dd8:	6c037834 	.long	0x6c037834
11028ddc:	1fffa6d8 	.long	0x1fffa6d8
11028de0:	0002ea8d 	.long	0x0002ea8d
11028de4:	6c037834 	.long	0x6c037834
11028de8:	00007c42 	.long	0x00007c42
11028dec:	0002ea8d 	.long	0x0002ea8d
11028df0:	6c037834 	.long	0x6c037834
11028df4:	00007170 	.long	0x00007170
11028df8:	0002ea8d 	.long	0x0002ea8d
11028dfc:	6c037834 	.long	0x6c037834
11028e00:	1fff4d32 	.long	0x1fff4d32
11028e04:	0002ea8d 	.long	0x0002ea8d
11028e08:	6c037834 	.long	0x6c037834
11028e0c:	00006c02 	.long	0x00006c02
11028e10:	0002ea8d 	.long	0x0002ea8d
11028e14:	6c037834 	.long	0x6c037834
11028e18:	1fff2894 	.long	0x1fff2894
11028e1c:	0002ea8d 	.long	0x0002ea8d
11028e20:	6c037834 	.long	0x6c037834
11028e24:	00006118 	.long	0x00006118
11028e28:	0002ea8d 	.long	0x0002ea8d
11028e2c:	6c037834 	.long	0x6c037834
11028e30:	000071f6 	.long	0x000071f6
11028e34:	0002ea8d 	.long	0x0002ea8d
11028e38:	6c037834 	.long	0x6c037834
11028e3c:	00004158 	.long	0x00004158
11028e40:	0002ea8d 	.long	0x0002ea8d
11028e44:	6c037834 	.long	0x6c037834
11028e48:	00006e3e 	.long	0x00006e3e
11028e4c:	0002ea8d 	.long	0x0002ea8d
11028e50:	6c037834 	.long	0x6c037834
11028e54:	00004524 	.long	0x00004524
11028e58:	0002ea8d 	.long	0x0002ea8d
11028e5c:	6c037834 	.long	0x6c037834
11028e60:	000075a8 	.long	0x000075a8
11028e64:	0002ea8d 	.long	0x0002ea8d
11028e68:	6c037834 	.long	0x6c037834
11028e6c:	000047c0 	.long	0x000047c0
11028e70:	0002ea8d 	.long	0x0002ea8d
11028e74:	6c037834 	.long	0x6c037834
11028e78:	00006f8c 	.long	0x00006f8c
11028e7c:	0002ea8d 	.long	0x0002ea8d
11028e80:	6c037834 	.long	0x6c037834
11028e84:	1fff4cf0 	.long	0x1fff4cf0
11028e88:	0002ea8d 	.long	0x0002ea8d
11028e8c:	6c037834 	.long	0x6c037834
11028e90:	1fff3f7c 	.long	0x1fff3f7c
11028e94:	0002ea8d 	.long	0x0002ea8d
11028e98:	6c037834 	.long	0x6c037834
11028e9c:	1fff4d22 	.long	0x1fff4d22
11028ea0:	0002ea8d 	.long	0x0002ea8d
11028ea4:	6c037834 	.long	0x6c037834
11028ea8:	1fff2eac 	.long	0x1fff2eac
11028eac:	0002ea8d 	.long	0x0002ea8d
11028eb0:	6c037834 	.long	0x6c037834
11028eb4:	1fff4d42 	.long	0x1fff4d42
11028eb8:	0002ea8d 	.long	0x0002ea8d
11028ebc:	6c037834 	.long	0x6c037834
11028ec0:	000073bc 	.long	0x000073bc
11028ec4:	0002ea8d 	.long	0x0002ea8d
11028ec8:	6c037834 	.long	0x6c037834
11028ecc:	00007650 	.long	0x00007650
11028ed0:	0002ea8d 	.long	0x0002ea8d
11028ed4:	6c037834 	.long	0x6c037834
11028ed8:	1fff4c4e 	.long	0x1fff4c4e
11028edc:	0002ea8d 	.long	0x0002ea8d
11028ee0:	6c037834 	.long	0x6c037834
11028ee4:	1fff544c 	.long	0x1fff544c
11028ee8:	0002ea8d 	.long	0x0002ea8d
11028eec:	6c037834 	.long	0x6c037834
11028ef0:	000074ec 	.long	0x000074ec
11028ef4:	0002ea8d 	.long	0x0002ea8d
11028ef8:	6c037834 	.long	0x6c037834
11028efc:	0000617c 	.long	0x0000617c
11028f00:	0002ea8d 	.long	0x0002ea8d
11028f04:	6c037834 	.long	0x6c037834
11028f08:	1fff363c 	.long	0x1fff363c
11028f0c:	0002ea8d 	.long	0x0002ea8d
11028f10:	6c037834 	.long	0x6c037834
11028f14:	1fff48d8 	.long	0x1fff48d8
11028f18:	0002ea8d 	.long	0x0002ea8d
11028f1c:	6c037834 	.long	0x6c037834
11028f20:	00004790 	.long	0x00004790
11028f24:	0002ea8d 	.long	0x0002ea8d
11028f28:	6c037834 	.long	0x6c037834
11028f2c:	00007394 	.long	0x00007394
11028f30:	0002ea8d 	.long	0x0002ea8d
11028f34:	6c037834 	.long	0x6c037834
11028f38:	1fff3e10 	.long	0x1fff3e10
11028f3c:	0002ea8d 	.long	0x0002ea8d
11028f40:	6c037834 	.long	0x6c037834
11028f44:	0000706c 	.long	0x0000706c
11028f48:	0002ea8d 	.long	0x0002ea8d
11028f4c:	6c037834 	.long	0x6c037834
11028f50:	1fff2f24 	.long	0x1fff2f24
11028f54:	0002ea8d 	.long	0x0002ea8d
11028f58:	6c037834 	.long	0x6c037834
11028f5c:	000070b4 	.long	0x000070b4
11028f60:	0002ea8d 	.long	0x0002ea8d
11028f64:	6c037834 	.long	0x6c037834
11028f68:	00007456 	.long	0x00007456
11028f6c:	0002ea8d 	.long	0x0002ea8d
11028f70:	6c037834 	.long	0x6c037834
11028f74:	00007530 	.long	0x00007530
11028f78:	0002ea8d 	.long	0x0002ea8d
11028f7c:	6c037834 	.long	0x6c037834
11028f80:	00007054 	.long	0x00007054
11028f84:	0002ea8d 	.long	0x0002ea8d
11028f88:	6c037834 	.long	0x6c037834
11028f8c:	1fff35fa 	.long	0x1fff35fa
11028f90:	0002ea8d 	.long	0x0002ea8d
11028f94:	6c037834 	.long	0x6c037834
11028f98:	00004748 	.long	0x00004748
11028f9c:	0002ea8d 	.long	0x0002ea8d
11028fa0:	6c037834 	.long	0x6c037834
11028fa4:	1fff4cf8 	.long	0x1fff4cf8
11028fa8:	0002ea8d 	.long	0x0002ea8d
11028fac:	6c037834 	.long	0x6c037834
11028fb0:	00007ee4 	.long	0x00007ee4
11028fb4:	0002ea8d 	.long	0x0002ea8d
11028fb8:	6c037834 	.long	0x6c037834
11028fbc:	00007258 	.long	0x00007258
11028fc0:	0002ea8d 	.long	0x0002ea8d
11028fc4:	6c037834 	.long	0x6c037834
11028fc8:	1fff4730 	.long	0x1fff4730
11028fcc:	0002ea8d 	.long	0x0002ea8d
11028fd0:	6c037834 	.long	0x6c037834
11028fd4:	1fff366c 	.long	0x1fff366c
11028fd8:	0002ea8d 	.long	0x0002ea8d
11028fdc:	6c037834 	.long	0x6c037834
11028fe0:	1fff4e70 	.long	0x1fff4e70
11028fe4:	0002ea8d 	.long	0x0002ea8d
11028fe8:	6c037834 	.long	0x6c037834
11028fec:	1fff572c 	.long	0x1fff572c
11028ff0:	0002ea8d 	.long	0x0002ea8d
11028ff4:	6c037834 	.long	0x6c037834
11028ff8:	1fff5850 	.long	0x1fff5850
11028ffc:	0002ea8d 	.long	0x0002ea8d
11029000:	6c037834 	.long	0x6c037834
11029004:	1fff4cd8 	.long	0x1fff4cd8
11029008:	0002ea8d 	.long	0x0002ea8d
1102900c:	6c037834 	.long	0x6c037834
11029010:	00004904 	.long	0x00004904
11029014:	0002ea8d 	.long	0x0002ea8d
11029018:	6c037834 	.long	0x6c037834
1102901c:	1fff5efc 	.long	0x1fff5efc
11029020:	0002ea8d 	.long	0x0002ea8d
11029024:	6c037834 	.long	0x6c037834
11029028:	0000797e 	.long	0x0000797e
1102902c:	0002ea8d 	.long	0x0002ea8d
11029030:	6c037834 	.long	0x6c037834
11029034:	00006dac 	.long	0x00006dac
11029038:	0002ea8d 	.long	0x0002ea8d
1102903c:	6c037834 	.long	0x6c037834
11029040:	1fff5ddc 	.long	0x1fff5ddc
11029044:	0002ea8d 	.long	0x0002ea8d
11029048:	6c037834 	.long	0x6c037834
1102904c:	1fff3936 	.long	0x1fff3936
11029050:	0002ea8d 	.long	0x0002ea8d
11029054:	6c037834 	.long	0x6c037834
11029058:	1fff3d68 	.long	0x1fff3d68
1102905c:	0002ea8d 	.long	0x0002ea8d
11029060:	6c037834 	.long	0x6c037834
11029064:	00007aba 	.long	0x00007aba
11029068:	0002ea8d 	.long	0x0002ea8d
1102906c:	6c037834 	.long	0x6c037834
11029070:	1fff3f90 	.long	0x1fff3f90
11029074:	0002ea8d 	.long	0x0002ea8d
11029078:	6c037834 	.long	0x6c037834
1102907c:	0000d110 	.long	0x0000d110
11029080:	0002ea8d 	.long	0x0002ea8d
11029084:	6c037834 	.long	0x6c037834
11029088:	1fff29ac 	.long	0x1fff29ac
1102908c:	0002ea8d 	.long	0x0002ea8d
11029090:	6c037834 	.long	0x6c037834
11029094:	1fff3f68 	.long	0x1fff3f68
11029098:	0002ea8d 	.long	0x0002ea8d
1102909c:	6c037834 	.long	0x6c037834
110290a0:	000073dc 	.long	0x000073dc
110290a4:	0002ea8d 	.long	0x0002ea8d
110290a8:	6c037834 	.long	0x6c037834
110290ac:	00016400 	.long	0x00016400
110290b0:	0002ea8d 	.long	0x0002ea8d
110290b4:	6c037834 	.long	0x6c037834
110290b8:	0000edac 	.long	0x0000edac
110290bc:	0002ea8d 	.long	0x0002ea8d
110290c0:	6c037834 	.long	0x6c037834
110290c4:	000122f8 	.long	0x000122f8
110290c8:	0002ea8d 	.long	0x0002ea8d
110290cc:	6c037834 	.long	0x6c037834
110290d0:	1fff1d58 	.long	0x1fff1d58
110290d4:	0002ea8d 	.long	0x0002ea8d
110290d8:	6c037834 	.long	0x6c037834
110290dc:	00007486 	.long	0x00007486
110290e0:	0002ea8d 	.long	0x0002ea8d
110290e4:	6c037834 	.long	0x6c037834
110290e8:	00005a00 	.long	0x00005a00
110290ec:	0002ea8d 	.long	0x0002ea8d
110290f0:	6c037834 	.long	0x6c037834
110290f4:	0000791c 	.long	0x0000791c
110290f8:	0002ea8d 	.long	0x0002ea8d
110290fc:	6c037834 	.long	0x6c037834
11029100:	00010b48 	.long	0x00010b48
11029104:	0002ea8d 	.long	0x0002ea8d
11029108:	6c037834 	.long	0x6c037834
1102910c:	1fff4cea 	.long	0x1fff4cea
11029110:	0002ea8d 	.long	0x0002ea8d
11029114:	6c037834 	.long	0x6c037834
11029118:	1fff3d7c 	.long	0x1fff3d7c
1102911c:	0002ea8d 	.long	0x0002ea8d
11029120:	6c037834 	.long	0x6c037834
11029124:	1fff5464 	.long	0x1fff5464
11029128:	0002ea8d 	.long	0x0002ea8d
1102912c:	6c037834 	.long	0x6c037834
11029130:	0000f0d2 	.long	0x0000f0d2
11029134:	0002ea8d 	.long	0x0002ea8d
11029138:	6c037834 	.long	0x6c037834
1102913c:	00007a88 	.long	0x00007a88
11029140:	0002ea8d 	.long	0x0002ea8d
11029144:	6c037834 	.long	0x6c037834
11029148:	1fffa298 	.long	0x1fffa298
1102914c:	0002ea8d 	.long	0x0002ea8d
11029150:	6c037834 	.long	0x6c037834
11029154:	000162b8 	.long	0x000162b8
11029158:	0002ea8d 	.long	0x0002ea8d
1102915c:	6c037834 	.long	0x6c037834
11029160:	1fff23d4 	.long	0x1fff23d4
11029164:	0002ea8d 	.long	0x0002ea8d
11029168:	6c037834 	.long	0x6c037834
1102916c:	00010b6c 	.long	0x00010b6c
11029170:	0002ea8d 	.long	0x0002ea8d
11029174:	6c037834 	.long	0x6c037834
11029178:	00007550 	.long	0x00007550
1102917c:	0002ea8d 	.long	0x0002ea8d
11029180:	6c037834 	.long	0x6c037834
11029184:	1fff349c 	.long	0x1fff349c
11029188:	0002ea8d 	.long	0x0002ea8d
1102918c:	6c037834 	.long	0x6c037834
11029190:	00006df4 	.long	0x00006df4
11029194:	0002ea8d 	.long	0x0002ea8d
11029198:	6c037834 	.long	0x6c037834
1102919c:	00006e2c 	.long	0x00006e2c
110291a0:	0002ea8d 	.long	0x0002ea8d
110291a4:	6c037834 	.long	0x6c037834
110291a8:	000068b4 	.long	0x000068b4
110291ac:	0002ea8d 	.long	0x0002ea8d
110291b0:	6c037834 	.long	0x6c037834
110291b4:	00004778 	.long	0x00004778
110291b8:	0002ea8d 	.long	0x0002ea8d
110291bc:	6c037834 	.long	0x6c037834
110291c0:	1fff3d72 	.long	0x1fff3d72
110291c4:	0002ea8d 	.long	0x0002ea8d
110291c8:	6c037834 	.long	0x6c037834
110291cc:	1fffa680 	.long	0x1fffa680
110291d0:	0002ea8d 	.long	0x0002ea8d
110291d4:	6c037834 	.long	0x6c037834
110291d8:	1fff288c 	.long	0x1fff288c
110291dc:	0002ea8d 	.long	0x0002ea8d
110291e0:	6c037834 	.long	0x6c037834
110291e4:	000077f0 	.long	0x000077f0
110291e8:	0002ea8d 	.long	0x0002ea8d
110291ec:	6c037834 	.long	0x6c037834
110291f0:	1fff57b4 	.long	0x1fff57b4
110291f4:	0002ea8d 	.long	0x0002ea8d
110291f8:	6c037834 	.long	0x6c037834
110291fc:	1fff3504 	.long	0x1fff3504
11029200:	0002ea8d 	.long	0x0002ea8d
11029204:	6c037834 	.long	0x6c037834
11029208:	0000411e 	.long	0x0000411e
1102920c:	0002ea8d 	.long	0x0002ea8d
11029210:	6c037834 	.long	0x6c037834
11029214:	1fff1bb0 	.long	0x1fff1bb0
11029218:	0002ea8d 	.long	0x0002ea8d
1102921c:	6c037834 	.long	0x6c037834
11029220:	0000771a 	.long	0x0000771a
11029224:	0002ea8d 	.long	0x0002ea8d
11029228:	6c037834 	.long	0x6c037834
1102922c:	000059f0 	.long	0x000059f0
11029230:	0002ea8d 	.long	0x0002ea8d
11029234:	6c037834 	.long	0x6c037834
11029238:	000075f4 	.long	0x000075f4
1102923c:	0002ea8d 	.long	0x0002ea8d
11029240:	6c037834 	.long	0x6c037834
11029244:	1fff3868 	.long	0x1fff3868
11029248:	0002ea8d 	.long	0x0002ea8d
1102924c:	6c037834 	.long	0x6c037834
11029250:	1fff2d58 	.long	0x1fff2d58
11029254:	0002ea8d 	.long	0x0002ea8d
11029258:	6c037834 	.long	0x6c037834
1102925c:	1fff4d76 	.long	0x1fff4d76
11029260:	0002ea8d 	.long	0x0002ea8d
11029264:	6c037834 	.long	0x6c037834
11029268:	1fff2260 	.long	0x1fff2260
1102926c:	0002ea8d 	.long	0x0002ea8d
11029270:	6c037834 	.long	0x6c037834
11029274:	000040b0 	.long	0x000040b0
11029278:	0002ea8d 	.long	0x0002ea8d
1102927c:	6c037834 	.long	0x6c037834
11029280:	1fff4dc0 	.long	0x1fff4dc0
11029284:	0002ea8d 	.long	0x0002ea8d
11029288:	6c037834 	.long	0x6c037834
1102928c:	000047a8 	.long	0x000047a8
11029290:	0002ea8d 	.long	0x0002ea8d
11029294:	6c037834 	.long	0x6c037834
11029298:	0000634c 	.long	0x0000634c
1102929c:	0002ea8d 	.long	0x0002ea8d
110292a0:	6c037834 	.long	0x6c037834
110292a4:	1fff1b64 	.long	0x1fff1b64
110292a8:	0002ea8d 	.long	0x0002ea8d
110292ac:	6c037834 	.long	0x6c037834
110292b0:	00007518 	.long	0x00007518
110292b4:	0002ea8d 	.long	0x0002ea8d
110292b8:	6c037834 	.long	0x6c037834
110292bc:	1fff4fcc 	.long	0x1fff4fcc
110292c0:	0002ea8d 	.long	0x0002ea8d
110292c4:	6c037834 	.long	0x6c037834
110292c8:	0000757e 	.long	0x0000757e
110292cc:	0002ea8d 	.long	0x0002ea8d
110292d0:	6c037834 	.long	0x6c037834
110292d4:	0000e4f0 	.long	0x0000e4f0
110292d8:	0002ea8d 	.long	0x0002ea8d
110292dc:	6c037834 	.long	0x6c037834
110292e0:	1fff366a 	.long	0x1fff366a
110292e4:	0002ea8d 	.long	0x0002ea8d
110292e8:	6c037834 	.long	0x6c037834
110292ec:	1fff2810 	.long	0x1fff2810
110292f0:	0002ea8d 	.long	0x0002ea8d
110292f4:	6c037834 	.long	0x6c037834
110292f8:	1fff4cc2 	.long	0x1fff4cc2
110292fc:	0002ea8d 	.long	0x0002ea8d
11029300:	6c037834 	.long	0x6c037834
11029304:	0000ec4a 	.long	0x0000ec4a
11029308:	0002ea8d 	.long	0x0002ea8d
1102930c:	6c037834 	.long	0x6c037834
11029310:	00007236 	.long	0x00007236
11029314:	0002ea8d 	.long	0x0002ea8d
11029318:	6c037834 	.long	0x6c037834
1102931c:	0000f20c 	.long	0x0000f20c
11029320:	0002ea8d 	.long	0x0002ea8d
11029324:	6c037834 	.long	0x6c037834
11029328:	0000736e 	.long	0x0000736e
1102932c:	0002ea8d 	.long	0x0002ea8d
11029330:	6c037834 	.long	0x6c037834
11029334:	000076d4 	.long	0x000076d4
11029338:	0002ea8d 	.long	0x0002ea8d
1102933c:	6c037834 	.long	0x6c037834
11029340:	1fff4f2c 	.long	0x1fff4f2c
11029344:	0002ea8d 	.long	0x0002ea8d
11029348:	6c037834 	.long	0x6c037834
1102934c:	00003fb8 	.long	0x00003fb8
11029350:	0002ea8d 	.long	0x0002ea8d
11029354:	6c037834 	.long	0x6c037834
11029358:	1fff1c50 	.long	0x1fff1c50
1102935c:	0002ea8d 	.long	0x0002ea8d
11029360:	6c037834 	.long	0x6c037834
11029364:	1fff3668 	.long	0x1fff3668
11029368:	0002ea8d 	.long	0x0002ea8d
1102936c:	6c037834 	.long	0x6c037834
11029370:	000012f4 	.long	0x000012f4
11029374:	0002ea8d 	.long	0x0002ea8d
11029378:	6c037834 	.long	0x6c037834
1102937c:	0000f158 	.long	0x0000f158
11029380:	0002ea8d 	.long	0x0002ea8d
11029384:	6c037834 	.long	0x6c037834
11029388:	00007328 	.long	0x00007328
1102938c:	0002ea8d 	.long	0x0002ea8d
11029390:	6c037834 	.long	0x6c037834
11029394:	1fff4ca0 	.long	0x1fff4ca0
11029398:	0002ea8d 	.long	0x0002ea8d
1102939c:	6c037834 	.long	0x6c037834
110293a0:	1fff4d3a 	.long	0x1fff4d3a
110293a4:	0002ea8d 	.long	0x0002ea8d
110293a8:	6c037834 	.long	0x6c037834
110293ac:	00006c58 	.long	0x00006c58
110293b0:	0002ea8d 	.long	0x0002ea8d
110293b4:	6c037834 	.long	0x6c037834
110293b8:	1fff1c6c 	.long	0x1fff1c6c
110293bc:	0002ea8d 	.long	0x0002ea8d
110293c0:	6c037834 	.long	0x6c037834
110293c4:	1fff281c 	.long	0x1fff281c
110293c8:	0002ea8d 	.long	0x0002ea8d
110293cc:	6c037834 	.long	0x6c037834
110293d0:	00005f20 	.long	0x00005f20
110293d4:	0002ea8d 	.long	0x0002ea8d
110293d8:	6c037834 	.long	0x6c037834
110293dc:	1fff5430 	.long	0x1fff5430
110293e0:	0002ea8d 	.long	0x0002ea8d
110293e4:	6c037834 	.long	0x6c037834
110293e8:	1fff4e50 	.long	0x1fff4e50
110293ec:	0002ea8d 	.long	0x0002ea8d
110293f0:	6c037834 	.long	0x6c037834
110293f4:	1fff5738 	.long	0x1fff5738
110293f8:	0002ea8d 	.long	0x0002ea8d
110293fc:	6c037834 	.long	0x6c037834
11029400:	1fff367c 	.long	0x1fff367c
11029404:	0002ea8d 	.long	0x0002ea8d
11029408:	6c037834 	.long	0x6c037834
1102940c:	1fff4ce4 	.long	0x1fff4ce4
11029410:	0002ea8d 	.long	0x0002ea8d
11029414:	6c037834 	.long	0x6c037834
11029418:	00012798 	.long	0x00012798
1102941c:	0002ea8d 	.long	0x0002ea8d
11029420:	6c037834 	.long	0x6c037834
11029424:	00007670 	.long	0x00007670
	...
