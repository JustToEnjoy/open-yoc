<!DOCTYPE html PUBLIC "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
<title>Static Call Graph - [Obj/ble_controller_phy6220.elf]</title>
</head>
<body><hr>
<h1>Static Call Graph for image Obj/ble_controller_phy6220.elf</h1><hr>
<br>
<p>#&#060CALLGRAPH&#062# Csky GNU Linker<br>
<h3>Maximum Stack Usage = 916 bytes + Unknown(Cycles, Untraceable Function Pointers)</h3>
<h3>Call Chain for Maximum Stack Depth:</h3>
application_task_entry &rArr; main &rArr; board_yoc_init  &rArr; dut_task_entry  &rArr; dut_test_at.constprop.1  &rArr; cmd_parse_func.part.0  &rArr; dut_at_send  &rArr; dut_sendv  &rArr; vasprintf  &rArr; strdup  &rArr; malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<h3>Mutually Recursive functions</h3><ul>
<li><a href="#[ae1]">__GI___dtostr</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[ae1]">__GI___dtostr</a><br></ul><h3>Function Pointers</h3><ul>
<li><a href="#[2]">ble_ota_status_report</a> from Obj/src_ais_ota_client.o(.text.ble_ota_status_report) referenced from Obj/src_ais_ota_client.o(.text.ble_ota_parse_pdu)
<li><a href="#[3]">ble_ota_handle_version_request</a> from Obj/src_ais_ota_client.o(.text.ble_ota_handle_version_request) referenced from Obj/src_ais_server.o(.text._ble_ais_service_write)
<li><a href="#[4]">ble_ota_handle_update_request</a> from Obj/src_ais_ota_client.o(.text.ble_ota_handle_update_request) referenced from Obj/src_ais_server.o(.text._ble_ais_service_write)
<li><a href="#[5]">ble_ota_parse_pdu</a> from Obj/src_ais_ota_client.o(.text.ble_ota_parse_pdu) referenced from Obj/src_ais_server.o(.text._ble_ais_service_write)
<li><a href="#[6]">ble_ota_check_firmware</a> from Obj/src_ais_ota_client.o(.text.ble_ota_check_firmware) referenced from Obj/src_ais_server.o(.text._ble_ais_service_write)
<li><a href="#[b]">ble_ais_state_update</a> from Obj/src_ais_server.o(.text.ble_ais_state_update) referenced from Obj/src_ais_server.o(.text.state_update_timer_cb)
<li><a href="#[d]">ble_ais_notify</a> from Obj/src_ais_server.o(.text.ble_ais_notify) referenced from Obj/src_ais_ota_client.o(.text.ble_ota_status_report)
<li><a href="#[f]">_ble_ais_service_write</a> from Obj/src_ais_server.o(.text._ble_ais_service_write) referenced from hci_tl.o(.text.hciExtSwUpgrade)
<li><a href="#[10]">ble_ais_state_set</a> from Obj/src_ais_server.o(.text.ble_ais_state_set) referenced from Obj/src_ais_ota_client.o(.text.ble_ota_handle_update_request)
<li><a href="#[11]">ble_ais_state_get</a> from Obj/src_ais_server.o(.text.ble_ais_state_get) referenced from Obj/src_ais_ota_client.o(.text.ble_ota_handle_version_request)
<li><a href="#[12]">ble_ais_server_init</a> from Obj/src_ais_server.o(.text.ble_ais_server_init) referenced from Obj/src_app_main.o(.text.startup.main)
<li><a href="#[13]">ble_version_appver_get</a> from Obj/src_ble_version.o(.text.ble_version_appver_get) referenced from Obj/src_ais_ota_client.o(.text.ble_ota_handle_version_request)
<li><a href="#[19]">dfu_image_update</a> from Obj/src_dfu_port.o(.text.dfu_image_update) referenced from Obj/src_ais_ota_client.o(.text.ble_ota_parse_pdu)
<li><a href="#[1a]">dfu_check_checksum</a> from Obj/src_dfu_port.o(.text.dfu_check_checksum) referenced from Obj/src_ais_ota_client.o(.text.ble_ota_check_firmware)
<li><a href="#[1b]">dfu_reboot</a> from Obj/src_dfu_port.o(.text.dfu_reboot) referenced from Obj/src_ais_server.o(.text.state_update_timer_cb)
<li><a href="#[1c]">erase_dfu_flash</a> from Obj/src_dfu_port.o(.text.erase_dfu_flash) referenced from Obj/src_app_main.o(.text.startup.main)
<li><a href="#[1d]">dfu_get_ota_partition_max_size</a> from Obj/src_dfu_port.o(.text.dfu_get_ota_partition_max_size) referenced from Obj/src_ais_ota_client.o(.text.ble_ota_handle_update_request)
<li><a href="#[20]">util_crc16_ccitt</a> from Obj/crc_crc16.o(.text.util_crc16_ccitt) referenced from Obj/src_dfu_port.o(.text.dfu_image_update)
<li><a href="#[22]">main</a> from Obj/src_app_main.o(.text.startup.main) referenced from src_main.o(.text.application_task_entry)
<li><a href="#[24]">os_critical_enter</a> from critical.o(.text) referenced from vprintf_required.o(.text)
<li><a href="#[25]">os_critical_exit</a> from critical.o(.text) referenced from vprintf_required.o(.text)
<li><a href="#[26]">hci_board_init</a> from Obj/init_init.o(.text.hci_board_init) referenced from Obj/init_init.o(.text.board_yoc_init)
<li><a href="#[27]">board_yoc_init</a> from Obj/init_init.o(.text.board_yoc_init) referenced from Obj/src_app_main.o(.text.startup.main)
<li><a href="#[29]">aos_task_exit</a> from src_adapter_rhino_aos_rhino.o(.text.aos_task_exit) referenced from src_main.o(.text.application_task_entry)
<li><a href="#[2f]">aos_mutex_lock</a> from src_adapter_rhino_aos_rhino.o(.text.aos_mutex_lock) referenced from h5.o(.text.h5_enqueue)
<li><a href="#[30]">aos_mutex_unlock</a> from src_adapter_rhino_aos_rhino.o(.text.aos_mutex_unlock) referenced from h5.o(.text.h5_enqueue)
<li><a href="#[31]">aos_mutex_is_valid</a> from src_adapter_rhino_aos_rhino.o(.text.aos_mutex_is_valid) referenced from src_devices_device.o(.text.device_find)
<li><a href="#[32]">rhino2stderrno</a> from src_adapter_rhino_aos_rhino.o(.text.rhino2stderrno) referenced from src_adapter_rhino_aos_rhino.o(.text.aos_task_new_ext)
<li><a href="#[37]">aos_task_new_ext</a> from src_adapter_rhino_aos_rhino.o(.text.aos_task_new_ext) referenced from h5.o(.text.hci_h5_int_init)
<li><a href="#[3b]">aos_sem_wait</a> from src_adapter_rhino_aos_rhino.o(.text.aos_sem_wait) referenced from h5.o(.text.data_ready_cb_thread)
<li><a href="#[3c]">aos_sem_signal</a> from src_adapter_rhino_aos_rhino.o(.text.aos_sem_signal) referenced from h5.o(.text.h5_retransfer_signal_event)
<li><a href="#[4a]">aos_timer_new_ext</a> from src_adapter_rhino_aos_rhino.o(.text.aos_timer_new_ext) referenced from h5.o(.text.OsAllocateTimer)
<li><a href="#[4b]">aos_timer_free</a> from src_adapter_rhino_aos_rhino.o(.text.aos_timer_free) referenced from h5.o(.text.hci_h5_cleanup)
<li><a href="#[4c]">aos_timer_start</a> from src_adapter_rhino_aos_rhino.o(.text.aos_timer_start) referenced from h5.o(.text.OsStartTimer)
<li><a href="#[4d]">aos_timer_stop</a> from src_adapter_rhino_aos_rhino.o(.text.aos_timer_stop) referenced from h5.o(.text.OsStartTimer)
<li><a href="#[4e]">aos_timer_change</a> from src_adapter_rhino_aos_rhino.o(.text.aos_timer_change) referenced from h5.o(.text.OsStartTimer)
<li><a href="#[4f]">aos_timer_change_once</a> from src_adapter_rhino_aos_rhino.o(.text.aos_timer_change_once) referenced from h5.o(.text.OsStartTimer)
<li><a href="#[50]">aos_timer_is_valid</a> from src_adapter_rhino_aos_rhino.o(.text.aos_timer_is_valid) referenced from h5.o(.text.OsStartTimer)
<li><a href="#[52]">aos_now_ms</a> from src_adapter_rhino_aos_rhino.o(.text.aos_now_ms) referenced from ulog_utility.o(.text.ulog_format_time)
<li><a href="#[53]">aos_msleep</a> from src_adapter_rhino_aos_rhino.o(.text.aos_msleep) referenced from Obj/init_init.o(.text.board_yoc_init)
<li><a href="#[54]">aos_init</a> from src_adapter_rhino_aos_rhino.o(.text.aos_init) referenced from src_main.o(.text.pre_main)
<li><a href="#[55]">aos_start</a> from src_adapter_rhino_aos_rhino.o(.text.aos_start) referenced from src_main.o(.text.pre_main)
<li><a href="#[5a]">aos_kernel_sched_suspend</a> from src_adapter_rhino_aos_rhino.o(.text.aos_kernel_sched_suspend) referenced from src_adapter_rhino_aos_rhino.o(.text.yoc_malloc)
<li><a href="#[5b]">aos_kernel_sched_resume</a> from src_adapter_rhino_aos_rhino.o(.text.aos_kernel_sched_resume) referenced from src_adapter_rhino_aos_rhino.o(.text.yoc_malloc)
<li><a href="#[66]">yoc_malloc</a> from src_adapter_rhino_aos_rhino.o(.text.yoc_malloc) referenced from src_adapter_rhino_aos_rhino.o(.text.aos_zalloc)
<li><a href="#[68]">yoc_free</a> from src_adapter_rhino_aos_rhino.o(.text.yoc_free) referenced from src_adapter_rhino_aos_rhino.o(.text.aos_free)
<li><a href="#[6a]">aos_zalloc</a> from src_adapter_rhino_aos_rhino.o(.text.aos_zalloc) referenced from src_devices_device.o(.text.device_new)
<li><a href="#[6b]">aos_malloc</a> from src_adapter_rhino_aos_rhino.o(.text.aos_malloc) referenced from src_dut_main.o(.text.dut_service_cmd_reg)
<li><a href="#[73]">aos_free</a> from src_adapter_rhino_aos_rhino.o(.text.aos_free) referenced from src_adapter_rhino_aos_rhino.o(.text.aos_mutex_new)
<li><a href="#[74]">aos_mutex_new</a> from src_adapter_rhino_aos_rhino.o(.text.aos_mutex_new) referenced from h5.o(.text.hci_h5_int_init)
<li><a href="#[75]">aos_mutex_free</a> from src_adapter_rhino_aos_rhino.o(.text.aos_mutex_free) referenced from h5.o(.text.hci_h5_int_init)
<li><a href="#[76]">aos_sem_new</a> from src_adapter_rhino_aos_rhino.o(.text.aos_sem_new) referenced from h5.o(.text.hci_h5_int_init)
<li><a href="#[77]">aos_sem_free</a> from src_adapter_rhino_aos_rhino.o(.text.aos_sem_free) referenced from h5.o(.text.hci_h5_int_init)
<li><a href="#[7a]">krhino_init_hook</a> from src_adapter_rhino_hook_impl.o(.text.krhino_init_hook) referenced from k_sys.o(.text.krhino_init)
<li><a href="#[7b]">krhino_start_hook</a> from src_adapter_rhino_hook_impl.o(.text.krhino_start_hook) referenced from k_sys.o(.text.krhino_start)
<li><a href="#[7c]">krhino_task_create_hook</a> from src_adapter_rhino_hook_impl.o(.text.krhino_task_create_hook) referenced from k_task.o(.text.task_create.isra.0.part.1.constprop.10)
<li><a href="#[7d]">krhino_task_del_hook</a> from src_adapter_rhino_hook_impl.o(.text.krhino_task_del_hook) referenced from k_task.o(.text.krhino_task_del)
<li><a href="#[7f]">krhino_task_switch_hook</a> from src_adapter_rhino_hook_impl.o(.text.krhino_task_switch_hook) referenced from k_sched.o(.text.core_sched)
<li><a href="#[80]">krhino_tick_hook</a> from src_adapter_rhino_hook_impl.o(.text.krhino_tick_hook) referenced from k_time.o(.text.krhino_tick_proc)
<li><a href="#[81]">krhino_idle_pre_hook</a> from src_adapter_rhino_hook_impl.o(.text.krhino_idle_pre_hook) referenced from k_idle.o(.text.idle_task)
<li><a href="#[83]">krhino_idle_hook</a> from board_init.o(.text.krhino_idle_hook) referenced from k_idle.o(.text.idle_task)
<li><a href="#[85]">krhino_mm_alloc_hook</a> from src_adapter_rhino_hook_impl.o(.text.krhino_mm_alloc_hook) referenced from k_mm.o(.text.krhino_mm_alloc)
<li><a href="#[89]">lpm_idle_pre_hook</a> from src_adapter_rhino_hook_weak.o(.text.lpm_idle_pre_hook) referenced from src_adapter_rhino_hook_impl.o(.text.krhino_idle_pre_hook)
<li><a href="#[a5]">uart_putc</a> from src_devices_console_uart.o(.text.uart_putc) referenced from src_ustdio.o(.text.fputc)
<li><a href="#[24]">os_critical_enter</a> from critical.o(.text) referenced from vprintf_required.o(.text)
<li><a href="#[25]">os_critical_exit</a> from critical.o(.text) referenced from vprintf_required.o(.text)
<li><a href="#[a7]">dev_name_parse.constprop.0</a> from src_devices_device.o(.text.dev_name_parse.constprop.0) referenced from src_devices_device.o(.text.device_open)
<li><a href="#[a8]">device_new</a> from src_devices_device.o(.text.device_new) referenced from hci_uart_h5.o(.text.h5_hal_init)
<li><a href="#[aa]">device_lock</a> from src_devices_device.o(.text.device_lock) referenced from src_devices_uart.o(.text.uart_send)
<li><a href="#[ab]">device_unlock</a> from src_devices_device.o(.text.device_unlock) referenced from src_devices_uart.o(.text.uart_send)
<li><a href="#[ac]">device_find</a> from src_devices_device.o(.text.device_find) referenced from src_devices_device.o(.text.driver_register)
<li><a href="#[ad]">driver_register</a> from src_devices_device.o(.text.driver_register) referenced from hci_uart_h5.o(.text.bt_hci_uart_h5_register)
<li><a href="#[af]">device_open_id</a> from src_devices_device.o(.text.device_open_id) referenced from src_partition_flash.o(.text.part_flash_open)
<li><a href="#[b0]">device_open</a> from src_devices_device.o(.text.device_open) referenced from h5.o(.text.hci_h5_int_init)
<li><a href="#[b1]">device_close</a> from src_devices_device.o(.text.device_close) referenced from src_partition_flash.o(.text.part_flash_close)
<li><a href="#[b2]">device_valid</a> from src_devices_device.o(.text.device_valid) referenced from src_devices_uart.o(.text.uart_send)
<li><a href="#[b7]">flash_read</a> from src_devices_flash.o(.text.flash_read) referenced from src_partition_flash.o(.text.part_flash_read)
<li><a href="#[b8]">flash_program</a> from src_devices_flash.o(.text.flash_program) referenced from src_partition_flash.o(.text.part_flash_write)
<li><a href="#[b9]">flash_erase</a> from src_devices_flash.o(.text.flash_erase) referenced from src_partition_flash.o(.text.part_flash_erase)
<li><a href="#[ba]">flash_get_info</a> from src_devices_flash.o(.text.flash_get_info) referenced from src_partition_flash.o(.text.part_flash_info_get)
<li><a href="#[bc]">hci_send</a> from src_devices_hci.o(.text.hci_send) referenced from h5.o(.text.h5_wake_up)
<li><a href="#[bd]">hci_set_event</a> from src_devices_hci.o(.text.hci_set_event) referenced from h5.o(.text.hci_h5_int_init)
<li><a href="#[cb]">uart_config_default</a> from src_devices_uart.o(.text.uart_config_default) referenced from Obj/init_init.o(.text.hci_board_init)
<li><a href="#[cf]">uart_send</a> from src_devices_uart.o(.text.uart_send) referenced from src_devices_console_uart.o(.text.uart_putc)
<li><a href="#[ed]">aos_except_process</a> from src_except.o(.text.aos_except_process) referenced from src_dut_main.o(.text.dut_at_send)
<li><a href="#[10e]">slist_add_tail</a> from src_list.o(.text.slist_add_tail) referenced from src_dut_main.o(.text.dut_service_cmd_reg)
<li><a href="#[12b]">ringbuffer_create</a> from src_ringbuffer.o(.text.ringbuffer_create) referenced from src_uart.o(.text.hal_uart_init)
<li><a href="#[12d]">ringbuffer_available_read_space</a> from src_ringbuffer.o(.text.ringbuffer_available_read_space) referenced from src_ringbuffer.o(.text.ringbuffer_write)
<li><a href="#[12e]">ringbuffer_write</a> from src_ringbuffer.o(.text.ringbuffer_write) referenced from src_uart.o(.text.uart_event_cb)
<li><a href="#[12f]">ringbuffer_read</a> from src_ringbuffer.o(.text.ringbuffer_read) referenced from src_uart.o(.text.hal_uart_recv_II)
<li><a href="#[141]">aos_get_app_version</a> from src_sysinfo.o(.text.aos_get_app_version) referenced from Obj/src_ble_version.o(.text.ble_version_appver_get)
<li><a href="#[147]">fputc</a> from src_ustdio.o(.text.fputc) referenced from vprintf_required.o(.text)
<li><a href="#[186]">get_sys_partition</a> from mtb_mtb.o(.text.get_sys_partition) referenced from src_partition.o(.text.partition_init)
<li><a href="#[187]">get_app_version</a> from mtb_mtb.o(.text.get_app_version) referenced from src_sysinfo.o(.text.aos_get_app_version)
<li><a href="#[188]">mtb_get</a> from mtb_mtb.o(.text.mtb_get) referenced from mtb_mtbv.o(.text.mtb_version)
<li><a href="#[18a]">mtb_init</a> from mtb_mtb.o(.text.mtb_init) referenced from src_partition.o(.text.partition_init)
<li><a href="#[192]">mtb_version</a> from mtb_mtbv.o(.text.mtb_version) referenced from mtb_mtbv.o(.text.get_scn_offset.isra.0)
<li><a href="#[193]">get_scn_offset.isra.0</a> from mtb_mtbv.o(.text.get_scn_offset.isra.0) referenced from mtb_mtbv.o(.text.get_section_addr)
<li><a href="#[195]">get_section_addr</a> from mtb_mtbv.o(.text.get_section_addr) referenced from mtb_mtbv.o(.text.mtbv_get_part_info)
<li><a href="#[196]">mtbv_get_part_info</a> from mtb_mtbv.o(.text.mtbv_get_part_info) referenced from mtb_mtbv.o(.text.mtbv_init)
<li><a href="#[19a]">mtbv_init</a> from mtb_mtbv.o(.text.mtbv_init) referenced from mtb_mtb.o(.text.mtb_init)
<li><a href="#[19f]">mtbv4_partition_count</a> from mtb_mtbv4.o(.text.mtbv4_partition_count) referenced from mtb_mtb.o(.text.get_sys_partition)
<li><a href="#[1a0]">mtbv4_get_partition_info</a> from mtb_mtbv4.o(.text.mtbv4_get_partition_info) referenced from mtb_mtbv4.o(.text.mtbv4_init)
<li><a href="#[1a1]">mtbv4_init</a> from mtb_mtbv4.o(.text.mtbv4_init) referenced from mtb_mtb.o(.text.mtb_init)
<li><a href="#[1a2]">mtbv4_get_partition_info_with_index</a> from mtb_mtbv4.o(.text.mtbv4_get_partition_info_with_index) referenced from mtb_mtb.o(.text.get_sys_partition)
<li><a href="#[1a7]">partition_init</a> from src_partition.o(.text.partition_init) referenced from Obj/init_init.o(.text.board_yoc_init)
<li><a href="#[1a8]">partition_info_get</a> from src_partition.o(.text.partition_info_get) referenced from Obj/src_dfu_port.o(.text.dfu_image_update)
<li><a href="#[1a9]">partition_open</a> from src_partition.o(.text.partition_open) referenced from Obj/src_dfu_port.o(.text.dfu_image_update)
<li><a href="#[1aa]">partition_close</a> from src_partition.o(.text.partition_close) referenced from Obj/src_dfu_port.o(.text.dfu_image_update)
<li><a href="#[1ab]">partition_read</a> from src_partition.o(.text.partition_read) referenced from Obj/src_dfu_port.o(.text.erase_dfu_flash)
<li><a href="#[1ac]">partition_write</a> from src_partition.o(.text.partition_write) referenced from Obj/src_dfu_port.o(.text.dfu_image_update)
<li><a href="#[1ad]">partition_erase</a> from src_partition.o(.text.partition_erase) referenced from Obj/src_dfu_port.o(.text.erase_dfu_flash)
<li><a href="#[1b7]">partition_flash_open</a> from src_partition_flash.o(.text.partition_flash_open) referenced from mtb_mtb.o(.text.mtb_init)
<li><a href="#[1b8]">partition_flash_close</a> from src_partition_flash.o(.text.partition_flash_close) referenced from mtb_mtb.o(.text.mtb_init)
<li><a href="#[1b9]">partition_flash_info_get</a> from src_partition_flash.o(.text.partition_flash_info_get) referenced from mtb_mtb.o(.text.mtb_init)
<li><a href="#[1ba]">partition_flash_read</a> from src_partition_flash.o(.text.partition_flash_read) referenced from src_partition.o(.text.partition_read)
<li><a href="#[1bb]">partition_flash_write</a> from src_partition_flash.o(.text.partition_flash_write) referenced from src_partition.o(.text.partition_write)
<li><a href="#[1bc]">partition_flash_erase</a> from src_partition_flash.o(.text.partition_flash_erase) referenced from src_partition.o(.text.partition_erase)
<li><a href="#[1ce]">ulog</a> from ulog.o(.text.ulog) referenced from Obj/src_ais_ota_client.o(.text.ble_ota_handle_update_request)
<li><a href="#[1cf]">on_filter_level_changes</a> from ulog.o(.text.on_filter_level_changes) referenced from ulog.o(.text.aos_set_log_level)
<li><a href="#[1d0]">aos_set_log_level</a> from ulog.o(.text.aos_set_log_level) referenced from Obj/init_init.o(.text.board_yoc_init)
<li><a href="#[1d3]">ulog_init</a> from ulog_init.o(.text.ulog_init) referenced from Obj/init_init.o(.text.board_yoc_init)
<li><a href="#[1d4]">log_init_mutex</a> from ulog_utility.o(.text.log_init_mutex) referenced from ulog_init.o(.text.ulog_init)
<li><a href="#[1d5]">log_get_mutex</a> from ulog_utility.o(.text.log_get_mutex) referenced from ulog.o(.text.ulog)
<li><a href="#[1d6]">log_release_mutex</a> from ulog_utility.o(.text.log_release_mutex) referenced from ulog.o(.text.ulog)
<li><a href="#[1d7]">ulog_format_time</a> from ulog_utility.o(.text.ulog_format_time) referenced from ulog.o(.text.ulog)
<li><a href="#[251]">bt_crypto_rand</a> from bt_crypto.o(.text.bt_crypto_rand) referenced from bt_host_host_crypto.o(.text.bt_rand)
<li><a href="#[2fe]">char2hex</a> from bt_host_common_hex.o(.text.char2hex) referenced from src_dut_utility.o(.text.str2_char)
<li><a href="#[302]">bt_hex_real</a> from bt_host_common_log.o(.text.bt_hex_real) referenced from Obj/src_ais_server.o(.text._ble_ais_service_write)
<li><a href="#[309]">ListInitializeHeader</a> from bt_host_hci_driver_bt_list.o(.text.ListInitializeHeader) referenced from bt_host_hci_driver_bt_skbuff.o(.text.RtbAllocate)
<li><a href="#[30c]">ListAddToHead</a> from bt_host_hci_driver_bt_list.o(.text.ListAddToHead) referenced from bt_host_hci_driver_bt_skbuff.o(.text.RtbQueueHead)
<li><a href="#[30d]">ListAddToTail</a> from bt_host_hci_driver_bt_list.o(.text.ListAddToTail) referenced from bt_host_hci_driver_bt_skbuff.o(.text.RtbQueueTail)
<li><a href="#[310]">ListDeleteNode</a> from bt_host_hci_driver_bt_list.o(.text.ListDeleteNode) referenced from bt_host_hci_driver_bt_skbuff.o(.text.RtbRemoveNode)
<li><a href="#[311]">RtbQueueHead</a> from bt_host_hci_driver_bt_skbuff.o(.text.RtbQueueHead) referenced from bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_queue_head)
<li><a href="#[315]">RtbRemoveNode</a> from bt_host_hci_driver_bt_skbuff.o(.text.RtbRemoveNode) referenced from bt_host_hci_driver_bt_skbuff.o(.text.RtbDequeueTail)
<li><a href="#[317]">RtbDequeueTail</a> from bt_host_hci_driver_bt_skbuff.o(.text.RtbDequeueTail) referenced from bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_dequeue_tail)
<li><a href="#[318]">RtbDequeueHead</a> from bt_host_hci_driver_bt_skbuff.o(.text.RtbDequeueHead) referenced from bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_dequeue_head)
<li><a href="#[319]">RtbGetQueueLen</a> from bt_host_hci_driver_bt_skbuff.o(.text.RtbGetQueueLen) referenced from h5.o(.text.h5_wake_up)
<li><a href="#[31a]">RtbEmptyQueue</a> from bt_host_hci_driver_bt_skbuff.o(.text.RtbEmptyQueue) referenced from bt_host_hci_driver_bt_skbuff.o(.text.RtbQueueFree)
<li><a href="#[31c]">RtbAllocate</a> from bt_host_hci_driver_bt_skbuff.o(.text.RtbAllocate) referenced from bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_alloc)
<li><a href="#[31d]">RtbFree</a> from bt_host_hci_driver_bt_skbuff.o(.text.RtbFree) referenced from bt_host_hci_driver_bt_skbuff.o(.text.RtbEmptyQueue)
<li><a href="#[31f]">RtbRemoveHead</a> from bt_host_hci_driver_bt_skbuff.o(.text.RtbRemoveHead) referenced from bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_pull)
<li><a href="#[320]">RtbAddTail</a> from bt_host_hci_driver_bt_skbuff.o(.text.RtbAddTail) referenced from bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_put)
<li><a href="#[321]">RtbRemoveTail</a> from bt_host_hci_driver_bt_skbuff.o(.text.RtbRemoveTail) referenced from bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_trim)
<li><a href="#[322]">RtbQueueInit</a> from bt_host_hci_driver_bt_skbuff.o(.text.RtbQueueInit) referenced from h5.o(.text.hci_h5_int_init)
<li><a href="#[323]">RtbQueueTail</a> from bt_host_hci_driver_bt_skbuff.o(.text.RtbQueueTail) referenced from bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_queue_tail)
<li><a href="#[324]">RtbQueueFree</a> from bt_host_hci_driver_bt_skbuff.o(.text.RtbQueueFree) referenced from h5.o(.text.hci_h5_cleanup)
<li><a href="#[327]">hci_skb_get_data</a> from bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_get_data) referenced from h5.o(.text.data_ready_cb_thread)
<li><a href="#[328]">hci_skb_get_data_length</a> from bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_get_data_length) referenced from h5.o(.text.h5_enqueue)
<li><a href="#[329]">hci_skb_alloc</a> from bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_alloc) referenced from h5.o(.text.h5_prepare_pkt.constprop.13)
<li><a href="#[32a]">hci_skb_free</a> from bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_free) referenced from h5.o(.text.h5_enqueue)
<li><a href="#[32b]">hci_skb_unlink</a> from bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_unlink) referenced from h5.o(.text.h5_complete_rx_pkt.constprop.11)
<li><a href="#[32c]">hci_skb_put</a> from bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_put) referenced from h5.o(.text.h5_slip_one_byte)
<li><a href="#[32d]">hci_skb_trim</a> from bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_trim) referenced from h5.o(.text.hci_h5_receive_msg)
<li><a href="#[32e]">hci_skb_get_pkt_type</a> from bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_get_pkt_type) referenced from h5.o(.text.h5_enqueue)
<li><a href="#[32f]">hci_skb_set_pkt_type</a> from bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_set_pkt_type) referenced from h5.o(.text.h5_complete_rx_pkt.constprop.11)
<li><a href="#[330]">hci_skb_pull</a> from bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_pull) referenced from h5.o(.text.h5_complete_rx_pkt.constprop.11)
<li><a href="#[331]">hci_skb_alloc_and_init</a> from bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_alloc_and_init) referenced from h5.o(.text.hci_h5_send_conf_req)
<li><a href="#[332]">hci_skb_queue_head</a> from bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_queue_head) referenced from h5.o(.text.h5_wake_up)
<li><a href="#[333]">hci_skb_queue_tail</a> from bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_queue_tail) referenced from h5.o(.text.h5_enqueue)
<li><a href="#[334]">hci_skb_dequeue_head</a> from bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_dequeue_head) referenced from h5.o(.text.data_ready_cb_thread)
<li><a href="#[335]">hci_skb_dequeue_tail</a> from bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_dequeue_tail) referenced from h5.o(.text.data_retransfer_thread)
<li><a href="#[336]">hci_skb_queue_get_length</a> from bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_queue_get_length) referenced from h5.o(.text.data_ready_cb_thread)
<li><a href="#[3c3]">bt_rand</a> from bt_host_host_crypto.o(.text.bt_rand) referenced from hci_tl.o(.text.adv_scan_timer)
<li><a href="#[43b]">hci_api_le_rand</a> from hci_api.o(.text.hci_api_le_rand) referenced from bt_crypto.o(.text.bt_crypto_rand)
<li><a href="#[4ee]">k_mutex_init</a> from bt_host_port_aos_aos_port.o(.text.k_mutex_init) referenced from hci_tl.o(.text.bt_mesh_adv_scan_schd_init)
<li><a href="#[4ef]">k_mutex_lock</a> from bt_host_port_aos_aos_port.o(.text.k_mutex_lock) referenced from hci_tl.o(.text.adv_scan_timer)
<li><a href="#[4f0]">k_mutex_unlock</a> from bt_host_port_aos_aos_port.o(.text.k_mutex_unlock) referenced from hci_tl.o(.text.adv_scan_timer)
<li><a href="#[503]">irq_lock</a> from bt_host_port_aos_aos_port.o(.text.irq_lock) referenced from src_except.o(.text.except_process_function)
<li><a href="#[504]">irq_unlock</a> from bt_host_port_aos_aos_port.o(.text.irq_unlock) referenced from hci_uart_h5.o(.__sram.code)
<li><a href="#[506]">k_timer_init</a> from bt_host_port_aos_aos_port.o(.text.k_timer_init) referenced from Obj/src_ais_server.o(.text.ble_ais_server_init)
<li><a href="#[507]">k_timer_start</a> from bt_host_port_aos_aos_port.o(.text.k_timer_start) referenced from Obj/src_ais_server.o(.text.ble_ais_state_update)
<li><a href="#[508]">k_timer_stop</a> from bt_host_port_aos_aos_port.o(.text.k_timer_stop) referenced from Obj/src_ais_server.o(.text.ble_ais_state_update)
<li><a href="#[59c]">hal_clk_gate_enable</a> from components_driver_src_clock.o(.__sram.code.hal_clk_gate_enable) referenced from system.o(.__sram.code.hal_cache_init)
<li><a href="#[59d]">hal_clk_gate_disable</a> from components_driver_src_clock.o(.text.hal_clk_gate_disable) referenced from csi_drivers_dw_wdt.o(.text.csi_wdt_uninitialize)
<li><a href="#[5a0]">hal_clk_reset</a> from components_driver_src_clock.o(.__sram.code.hal_clk_reset) referenced from csi_drivers_dw_usart.o(.text.csi_usart_initialize)
<li><a href="#[5a7]">hal_rtc_clock_config</a> from components_driver_src_clock.o(.text.hal_rtc_clock_config) referenced from system.o(.text.SystemInit)
<li><a href="#[5bc]">phy_gpio_pull_set</a> from components_driver_src_gpio.o(.text.phy_gpio_pull_set) referenced from system.o(.text.SystemInit)
<li><a href="#[5bd]">phy_gpio_cfg_analog_io</a> from components_driver_src_gpio.o(.text.phy_gpio_cfg_analog_io) referenced from components_driver_src_pinmux.o(.text.drv_pinmux_config)
<li><a href="#[5c0]">phy_gpio_pin2pin3_control</a> from components_driver_src_gpio.o(.text.phy_gpio_pin2pin3_control) referenced from components_driver_src_pinmux.o(.text.drv_pinmux_config)
<li><a href="#[5c6]">phy_gpioretention_register</a> from components_driver_src_gpio.o(.text.phy_gpioretention_register) referenced from csi_drivers_dw_gpio.o(.text.csi_gpio_pin_config_direction)
<li><a href="#[5cf]">phy_gpio_pin2pin3_control.part.2</a> from components_driver_src_gpio.o(.text.phy_gpio_pin2pin3_control.part.2) referenced from components_driver_src_gpio.o(.text.phy_gpio_pin_init)
<li><a href="#[5d1]">phy_gpio_read</a> from components_driver_src_gpio.o(.text.phy_gpio_read) referenced from Obj/init_init.o(.text.board_yoc_init)
<li><a href="#[5d2]">phy_gpio_fmux</a> from components_driver_src_gpio.o(.text.phy_gpio_fmux) referenced from components_driver_src_gpio.o(.text.phy_gpio_pin_init)
<li><a href="#[5d3]">phy_gpio_fmux_set</a> from components_driver_src_gpio.o(.text.phy_gpio_fmux_set) referenced from Obj/init_init.o(.text.board_yoc_init)
<li><a href="#[5d4]">phy_gpio_pin_init</a> from components_driver_src_gpio.o(.text.phy_gpio_pin_init) referenced from Obj/init_init.o(.text.board_yoc_init)
<li><a href="#[5f4]">drv_pinmux_config</a> from components_driver_src_pinmux.o(.text.drv_pinmux_config) referenced from Obj/init_init.o(.text.hci_board_init)
<li><a href="#[615]">hal_pwrmgr_RAM_retention</a> from components_driver_src_pwrmgr.o(.text.hal_pwrmgr_RAM_retention) referenced from pm.o(.text.drv_pm_ram_retention)
<li><a href="#[617]">hal_pwrmgr_RAM_retention_set</a> from components_driver_src_pwrmgr.o(.text.hal_pwrmgr_RAM_retention_set) referenced from system.o(.text.SystemInit)
<li><a href="#[648]">drv_irq_enable</a> from csi_drivers_ck_irq.o(.__sram.code.drv_irq_enable) referenced from system.o(.text.SystemInit)
<li><a href="#[649]">drv_irq_disable</a> from csi_drivers_ck_irq.o(.__sram.code.drv_irq_disable) referenced from pm.o(.text.boot_wdt_close)
<li><a href="#[64a]">drv_irq_register</a> from csi_drivers_ck_irq.o(.text.drv_irq_register) referenced from hci_uart_h5.o(.text.hal_rfphy_init)
<li><a href="#[64b]">drv_irq_unregister</a> from csi_drivers_ck_irq.o(.text.drv_irq_unregister) referenced from pm.o(.text.boot_wdt_close)
<li><a href="#[64c]">target_get</a> from csi_drivers_device.o(.text.target_get) referenced from csi_drivers_device.o(.text.target_usart_init)
<li><a href="#[64d]">target_usart_init</a> from csi_drivers_device.o(.text.target_usart_init) referenced from csi_drivers_dw_usart.o(.text.csi_usart_initialize)
<li><a href="#[64e]">target_gpio_port_init</a> from csi_drivers_device.o(.text.target_gpio_port_init) referenced from csi_drivers_dw_gpio.o(.text.csi_gpio_port_initialize)
<li><a href="#[64f]">target_gpio_pin_init</a> from csi_drivers_device.o(.text.target_gpio_pin_init) referenced from csi_drivers_dw_gpio.o(.text.csi_gpio_pin_initialize)
<li><a href="#[654]">target_get_wdt</a> from csi_drivers_device.o(.text.target_get_wdt) referenced from pm.o(.text.boot_wdt_close)
<li><a href="#[656]">target_get_dmac</a> from csi_drivers_device.o(.text.target_get_dmac) referenced from csi_drivers_dw_dmac.o(.text.csi_dma_alloc_channel)
<li><a href="#[657]">dw_dma_set_addrinc</a> from csi_drivers_dw_dmac.o(.text.dw_dma_set_addrinc) referenced from csi_drivers_dw_dmac.o(.text.csi_dma_config_channel)
<li><a href="#[658]">dw_dmac_irqhandler</a> from csi_drivers_dw_dmac.o(.__sram.code.dw_dmac_irqhandler) referenced from csi_drivers_isr.o(.text.CSI_DMAC_IRQHandler)
<li><a href="#[659]">csi_dma_start</a> from csi_drivers_dw_dmac.o(.__sram.code.csi_dma_start) referenced from csi_drivers_dw_usart.o(.__sram.code.dw_usart_dma_event_cb)
<li><a href="#[65a]">csi_dma_stop</a> from csi_drivers_dw_dmac.o(.__sram.code.csi_dma_stop) referenced from csi_drivers_dw_usart.o(.__sram.code.dw_usart_dma_event_cb)
<li><a href="#[65c]">csi_dma_alloc_channel</a> from csi_drivers_dw_dmac.o(.text.csi_dma_alloc_channel) referenced from csi_drivers_dw_usart.o(.text.csi_usart_receive_dma)
<li><a href="#[65e]">csi_dma_release_channel</a> from csi_drivers_dw_dmac.o(.text.csi_dma_release_channel) referenced from csi_drivers_dw_usart.o(.__sram.code.dw_usart_dma_event_cb)
<li><a href="#[65f]">csi_dma_config_channel</a> from csi_drivers_dw_dmac.o(.text.csi_dma_config_channel) referenced from csi_drivers_dw_usart.o(.text.csi_usart_receive_dma)
<li><a href="#[661]">dw_gpio_set_direction</a> from csi_drivers_dw_gpio.o(.text.dw_gpio_set_direction) referenced from csi_drivers_dw_gpio.o(.text.csi_gpio_pin_config_direction)
<li><a href="#[662]">dw_gpio_irqhandler</a> from csi_drivers_dw_gpio.o(.__sram.code.dw_gpio_irqhandler) referenced from csi_drivers_isr.o(.text.CSI_GPIO_IRQHandler)
<li><a href="#[667]">csi_gpio_port_initialize</a> from csi_drivers_dw_gpio.o(.text.csi_gpio_port_initialize) referenced from csi_drivers_dw_gpio.o(.text.csi_gpio_pin_initialize)
<li><a href="#[669]">csi_gpio_pin_initialize</a> from csi_drivers_dw_gpio.o(.text.csi_gpio_pin_initialize) referenced from src_ble_dut_test.o(.text.dut_hal_test_gpio_write)
<li><a href="#[66d]">csi_gpio_pin_config_direction</a> from csi_drivers_dw_gpio.o(.text.csi_gpio_pin_config_direction) referenced from src_ble_dut_test.o(.text.dut_hal_test_gpio_write)
<li><a href="#[66f]">csi_gpio_pin_write</a> from csi_drivers_dw_gpio.o(.text.csi_gpio_pin_write) referenced from src_ble_dut_test.o(.text.dut_hal_test_gpio_write)
<li><a href="#[670]">csi_gpio_pin_read</a> from csi_drivers_dw_gpio.o(.text.csi_gpio_pin_read) referenced from src_ble_dut_test.o(.text.dut_hal_test_gpio_read)
<li><a href="#[6a9]">usart_wait_timeout.isra.0</a> from csi_drivers_dw_usart.o(.text.usart_wait_timeout.isra.0) referenced from csi_drivers_dw_usart.o(.text.csi_usart_config_baudrate)
<li><a href="#[6ac]">csi_usart_restart_receive_dma</a> from csi_drivers_dw_usart.o(.__sram.code.csi_usart_restart_receive_dma) referenced from hci_uart_h5.o(.__sram.code)
<li><a href="#[6ad]">csi_usart_config_baudrate</a> from csi_drivers_dw_usart.o(.text.csi_usart_config_baudrate) referenced from csi_drivers_dw_usart.o(.text.csi_usart_config)
<li><a href="#[6af]">csi_usart_config_parity</a> from csi_drivers_dw_usart.o(.text.csi_usart_config_parity) referenced from csi_drivers_dw_usart.o(.text.csi_usart_config)
<li><a href="#[6b0]">csi_usart_config_stopbits</a> from csi_drivers_dw_usart.o(.text.csi_usart_config_stopbits) referenced from csi_drivers_dw_usart.o(.text.csi_usart_config)
<li><a href="#[6b1]">csi_usart_config_databits</a> from csi_drivers_dw_usart.o(.text.csi_usart_config_databits) referenced from csi_drivers_dw_usart.o(.text.csi_usart_config)
<li><a href="#[6b3]">csi_usart_putchar</a> from csi_drivers_dw_usart.o(.text.csi_usart_putchar) referenced from csi_drivers_dw_usart.o(.text.csi_usart_send)
<li><a href="#[6b5]">csi_usart_initialize</a> from csi_drivers_dw_usart.o(.text.csi_usart_initialize) referenced from Obj/init_init.o(.text.hci_board_init)
<li><a href="#[6b6]">csi_usart_uninitialize</a> from csi_drivers_dw_usart.o(.text.csi_usart_uninitialize) referenced from hci_uart_h5.o(.text.h5_hal_close)
<li><a href="#[6b7]">csi_usart_config</a> from csi_drivers_dw_usart.o(.text.csi_usart_config) referenced from Obj/init_init.o(.text.hci_board_init)
<li><a href="#[6b9]">csi_usart_send</a> from csi_drivers_dw_usart.o(.text.csi_usart_send) referenced from Obj/init_init.o(.text.fputstr)
<li><a href="#[6bb]">csi_usart_receive_dma</a> from csi_drivers_dw_usart.o(.text.csi_usart_receive_dma) referenced from hci_uart_h5.o(.text.h5_hal_open)
<li><a href="#[6c4]">csi_usart_receive_query</a> from csi_drivers_dw_usart.o(.text.csi_usart_receive_query) referenced from csi_drivers_dw_usart.o(.__sram.code.dw_usart_intr_recv_data)
<li><a href="#[6c5]">dw_usart_intr_recv_data</a> from csi_drivers_dw_usart.o(.__sram.code.dw_usart_intr_recv_data) referenced from csi_drivers_dw_usart.o(.__sram.code.dw_usart_irqhandler)
<li><a href="#[6c6]">dw_usart_irqhandler</a> from csi_drivers_dw_usart.o(.__sram.code.dw_usart_irqhandler) referenced from csi_drivers_isr.o(.text.UART0_IRQHandler)
<li><a href="#[6ce]">dw_wdt_irqhandler</a> from csi_drivers_dw_wdt.o(.__sram.code.dw_wdt_irqhandler) referenced from csi_drivers_dw_wdt.o(.text.CSI_WDT_IRQHandler)
<li><a href="#[6cf]">csi_wdt_restart</a> from csi_drivers_dw_wdt.o(.__sram.code.csi_wdt_restart) referenced from csi_drivers_dw_wdt.o(.__sram.code.csi_wdt_set_timeout)
<li><a href="#[6d0]">csi_wdt_set_timeout</a> from csi_drivers_dw_wdt.o(.__sram.code.csi_wdt_set_timeout) referenced from src_wdg.o(.text.hal_wdg_init)
<li><a href="#[6d1]">csi_wdt_initialize</a> from csi_drivers_dw_wdt.o(.text.csi_wdt_initialize) referenced from src_wdg.o(.text.hal_wdg_init)
<li><a href="#[6d2]">csi_wdt_uninitialize</a> from csi_drivers_dw_wdt.o(.text.csi_wdt_uninitialize) referenced from src_wdg.o(.text.hal_wdg_finalize)
<li><a href="#[6d4]">csi_wdt_start</a> from csi_drivers_dw_wdt.o(.text.csi_wdt_start) referenced from src_wdg.o(.text.hal_wdg_init)
<li><a href="#[6e6]">irq_vectors_init</a> from csi_drivers_novic_irq_tbl.o(.text.irq_vectors_init) referenced from system.o(.text.SystemInit)
<li><a href="#[705]">spif_lock</a> from csi_drivers_spif.o(.__sram.code.spif_lock) referenced from csi_drivers_spif.o(.__sram.code.hal_flash_write)
<li><a href="#[706]">spif_unlock</a> from csi_drivers_spif.o(.__sram.code.spif_unlock) referenced from csi_drivers_spif.o(.__sram.code.hal_flash_write)
<li><a href="#[707]">hal_cache_tag_flush</a> from csi_drivers_spif.o(.__sram.code.hal_cache_tag_flush) referenced from csi_drivers_spif.o(.__sram.code.hal_flash_erase_sector)
<li><a href="#[708]">_spif_read_status_reg_x</a> from csi_drivers_spif.o(.__sram.code._spif_read_status_reg_x) referenced from csi_drivers_spif.o(.__sram.code._spif_wait_nobusy_x)
<li><a href="#[709]">_spif_wait_nobusy_x.constprop.1</a> from csi_drivers_spif.o(.__sram.code._spif_wait_nobusy_x) referenced from csi_drivers_spif.o(.__sram.code.hal_flash_write)
<li><a href="#[70a]">hal_flash_write</a> from csi_drivers_spif.o(.__sram.code.hal_flash_write) referenced from csi_drivers_spif.o(.__sram.code.phy_ProgramPage64)
<li><a href="#[70b]">hal_flash_erase_sector</a> from csi_drivers_spif.o(.__sram.code.hal_flash_erase_sector) referenced from csi_drivers_spif.o(.text.phy_flash_sector_erase)
<li><a href="#[717]">csi_spiflash_power_down</a> from csi_drivers_spif.o(.text.csi_spiflash_power_down) referenced from csi1_spiflash_spiflash_drv.o(.text.yoc_spiflash_lpm)
<li><a href="#[718]">csi_spiflash_release_power_down</a> from csi_drivers_spif.o(.text.csi_spiflash_release_power_down) referenced from csi1_spiflash_spiflash_drv.o(.text.yoc_spiflash_lpm)
<li><a href="#[71a]">csi_spiflash_initialize</a> from src_flash_weak.o(.text.weak_func) referenced from csi1_spiflash_spiflash_drv.o(.text.yoc_spiflash_open)
<li><a href="#[71b]">csi_spiflash_uninitialize</a> from src_flash_weak.o(.text.weak_func) referenced from csi1_spiflash_spiflash_drv.o(.text.yoc_spiflash_close)
<li><a href="#[71c]">csi_spiflash_read</a> from src_flash_weak.o(.text.weak_func) referenced from csi1_spiflash_spiflash_drv.o(.text.yoc_spiflash_read)
<li><a href="#[71d]">csi_spiflash_program</a> from src_flash_weak.o(.text.weak_func) referenced from csi1_spiflash_spiflash_drv.o(.text.yoc_spiflash_program)
<li><a href="#[71e]">csi_spiflash_erase_sector</a> from src_flash_weak.o(.text.weak_func) referenced from csi1_spiflash_spiflash_drv.o(.text.yoc_spiflash_erase)
<li><a href="#[720]">csi_spiflash_get_info</a> from src_flash_weak.o(.text.weak_func) referenced from csi1_spiflash_spiflash_drv.o(.text.yoc_spiflash_open)
<li><a href="#[725]">drv_get_sys_freq</a> from csi_drivers_sys_freq.o(.text.drv_get_sys_freq) referenced from system.o(.text.SystemInit)
<li><a href="#[726]">drv_get_apb_freq</a> from csi_drivers_sys_freq.o(.text.drv_get_apb_freq) referenced from csi_drivers_dw_usart.o(.text.csi_usart_config_baudrate)
<li><a href="#[732]">_symrom_set_sleep_flag.part.0</a> from pm.o(.text._symrom_set_sleep_flag.part.0) referenced from pm.o(.text.just_enter_sleep)
<li><a href="#[737]">boot_wdt_close</a> from pm.o(.text.boot_wdt_close) referenced from pm.o(.text.wdt_init)
<li><a href="#[738]">wdt_init</a> from pm.o(.text.wdt_init) referenced from Obj/init_init.o(.text.hci_board_init)
<li><a href="#[73c]">enableSleepInPM</a> from pm.o(.text.enableSleepInPM) referenced from pm.o(.text.drv_pm_sleep_enable)
<li><a href="#[73d]">disableSleepInPM</a> from pm.o(.text.disableSleepInPM) referenced from pm.o(.text.drv_pm_sleep_disable)
<li><a href="#[73e]">_symrom_setSleepMode</a> from pm.o(.text._symrom_setSleepMode) referenced from hci_uart_h5.o(.text.h5_hal_open)
<li><a href="#[740]">_symrom_set_sleep_flag</a> from pm.o(.text._symrom_set_sleep_flag) referenced from src_ble_dut_test.o(.text.dut_hal_sleep)
<li><a href="#[744]">just_enter_sleep</a> from pm.o(.text.just_enter_sleep) referenced from pm.o(.text.check_16MXtal_by_rcTracking)
<li><a href="#[745]">check_16MXtal_by_rcTracking</a> from pm.o(.text.check_16MXtal_by_rcTracking) referenced from pm.o(.text.wakeup_init1)
<li><a href="#[746]">check_96MXtal_by_rcTracking</a> from pm.o(.text.check_96MXtal_by_rcTracking) referenced from pm.o(.text.wakeup_init1)
<li><a href="#[749]">drv_pm_sleep_enable</a> from pm.o(.text.drv_pm_sleep_enable) referenced from src_ble_dut_test.o(.text.dut_hal_sleep)
<li><a href="#[74a]">drv_pm_sleep_disable</a> from pm.o(.text.drv_pm_sleep_disable) referenced from src_ble_dut_test.o(.text.dut_hal_rx_current_test)
<li><a href="#[74c]">drv_pm_ram_retention</a> from pm.o(.text.drv_pm_ram_retention) referenced from system.o(.text.SystemInit)
<li><a href="#[750]">cpu_task_switch</a> from port_s.o(.text.cpu_task_switch) referenced from k_sched.o(.text.core_sched)
<li><a href="#[751]">cpu_intrpt_switch</a> from port_s.o(.text.cpu_intrpt_switch) referenced from k_sys.o(.text.krhino_intrpt_exit)
<li><a href="#[752]">cpu_first_task_start</a> from port_s.o(.text.cpu_first_task_start) referenced from k_sys.o(.text.krhino_start)
<li><a href="#[754]">drv_reboot</a> from reboot.o(.__sram.code.drv_reboot) referenced from Obj/src_dfu_port.o(.text.dfu_reboot)
<li><a href="#[755]">Startup</a> from startup.o(.__data_copy_first__) referenced from startup.o(.text)
<li><a href="#[757]">hal_cache_init</a> from system.o(.__sram.code.hal_cache_init) referenced from system.o(.text.SystemInit)
<li><a href="#[758]">hal_mpu_config</a> from system.o(.text.hal_mpu_config) referenced from system.o(.text.SystemInit)
<li><a href="#[759]">hal_wakeup_irq_config</a> from system.o(.text.hal_wakeup_irq_config) referenced from system.o(.text.SystemInit)
<li><a href="#[75b]">check_before_startup</a> from system.o(.__data_copy_first__) referenced from startup.o(.text)
<li><a href="#[76b]">dut_ble_default_cmds_reg</a> from src_ble_dut_cmd.o(.text.dut_ble_default_cmds_reg) referenced from Obj/init_init.o(.text.board_yoc_init)
<li><a href="#[76e]">dut_hal_ble_tx_single_tone</a> from src_ble_dut_test.o(.text.dut_hal_ble_tx_single_tone) referenced from src_ble_dut_cmd.o(.text.dut_cmd_tx_single_tone)
<li><a href="#[76f]">dut_hal_ble_tx_mod_burst</a> from src_ble_dut_test.o(.text.dut_hal_ble_tx_mod_burst) referenced from src_ble_dut_cmd.o(.text.dut_cmd_tx_mod_burst)
<li><a href="#[770]">dut_hal_ble_rx_demod_burst</a> from src_ble_dut_test.o(.text.dut_hal_ble_rx_demod_burst) referenced from src_ble_dut_cmd.o(.text.dut_cmd_rx_demod_burst)
<li><a href="#[771]">dut_hal_mac_get</a> from src_ble_dut_test.o(.text.dut_hal_mac_get) referenced from src_ble_dut_cmd.o(.text.dut_cmd_opt_mac)
<li><a href="#[772]">dut_hal_mac_store</a> from src_ble_dut_test.o(.text.dut_hal_mac_store) referenced from src_ble_dut_cmd.o(.text.dut_cmd_opt_mac)
<li><a href="#[773]">dut_hal_sleep</a> from src_ble_dut_test.o(.text.dut_hal_sleep) referenced from src_ble_dut_cmd.o(.text.dut_cmd_sleep)
<li><a href="#[774]">dut_hal_xtalcap_get</a> from src_ble_dut_hal_ble_weak.o(.text.dut_hal_xtalcap_get) referenced from src_ble_dut_cmd.o(.text.dut_cmd_xtal_cap)
<li><a href="#[775]">dut_hal_xtalcap_store</a> from src_ble_dut_hal_ble_weak.o(.text.dut_hal_xtalcap_store) referenced from src_ble_dut_cmd.o(.text.dut_cmd_xtal_cap)
<li><a href="#[776]">dut_hal_freqoff_get</a> from src_ble_dut_test.o(.text.dut_hal_freqoff_get) referenced from src_ble_dut_cmd.o(.text.dut_cmd_freqoff)
<li><a href="#[777]">dut_hal_freqoff_store</a> from src_ble_dut_test.o(.text.dut_hal_freqoff_store) referenced from src_ble_dut_cmd.o(.text.dut_cmd_freqoff)
<li><a href="#[778]">dut_hal_ble_transmit_stop</a> from src_ble_dut_test.o(.text.dut_hal_ble_transmit_stop) referenced from src_ble_dut_cmd.o(.text.dut_cmd_transmit_stop)
<li><a href="#[779]">nvram_read</a> from src_ble_dut_test.o(.text.nvram_read) referenced from src_ble_dut_test.o(.text.dut_hal_mac_get)
<li><a href="#[77a]">nvram_write.constprop.0</a> from src_ble_dut_test.o(.text.nvram_write.constprop.0) referenced from src_ble_dut_test.o(.text.dut_hal_mac_store)
<li><a href="#[773]">dut_hal_sleep</a> from src_ble_dut_test.o(.text.dut_hal_sleep) referenced from src_ble_dut_cmd.o(.text.dut_cmd_sleep)
<li><a href="#[771]">dut_hal_mac_get</a> from src_ble_dut_test.o(.text.dut_hal_mac_get) referenced from src_ble_dut_cmd.o(.text.dut_cmd_opt_mac)
<li><a href="#[772]">dut_hal_mac_store</a> from src_ble_dut_test.o(.text.dut_hal_mac_store) referenced from src_ble_dut_cmd.o(.text.dut_cmd_opt_mac)
<li><a href="#[776]">dut_hal_freqoff_get</a> from src_ble_dut_test.o(.text.dut_hal_freqoff_get) referenced from src_ble_dut_cmd.o(.text.dut_cmd_freqoff)
<li><a href="#[777]">dut_hal_freqoff_store</a> from src_ble_dut_test.o(.text.dut_hal_freqoff_store) referenced from src_ble_dut_cmd.o(.text.dut_cmd_freqoff)
<li><a href="#[76e]">dut_hal_ble_tx_single_tone</a> from src_ble_dut_test.o(.text.dut_hal_ble_tx_single_tone) referenced from src_ble_dut_cmd.o(.text.dut_cmd_tx_single_tone)
<li><a href="#[76f]">dut_hal_ble_tx_mod_burst</a> from src_ble_dut_test.o(.text.dut_hal_ble_tx_mod_burst) referenced from src_ble_dut_cmd.o(.text.dut_cmd_tx_mod_burst)
<li><a href="#[770]">dut_hal_ble_rx_demod_burst</a> from src_ble_dut_test.o(.text.dut_hal_ble_rx_demod_burst) referenced from src_ble_dut_cmd.o(.text.dut_cmd_rx_demod_burst)
<li><a href="#[778]">dut_hal_ble_transmit_stop</a> from src_ble_dut_test.o(.text.dut_hal_ble_transmit_stop) referenced from src_ble_dut_cmd.o(.text.dut_cmd_transmit_stop)
<li><a href="#[77b]">dut_hal_rx_current_test</a> from src_ble_dut_test.o(.text.dut_hal_rx_current_test) referenced from src_ble_dut_cmd.o(.text.dut_cmd_rx_current_test)
<li><a href="#[77c]">dut_hal_test_gpio_write</a> from src_ble_dut_test.o(.text.dut_hal_test_gpio_write) referenced from src_ble_dut_cmd.o(.text.dut_cmd_gpio_test)
<li><a href="#[77d]">dut_hal_test_gpio_read</a> from src_ble_dut_test.o(.text.dut_hal_test_gpio_read) referenced from src_ble_dut_cmd.o(.text.dut_cmd_gpio_test)
<li><a href="#[77e]">dut_sendv</a> from src_dut_main.o(.text.dut_sendv) referenced from src_dut_main.o(.text.dut_at_send)
<li><a href="#[77f]">dut_at_send</a> from src_dut_main.o(.text.dut_at_send) referenced from src_ble_dut_cmd.o(.text.dut_cmd_rx_demod_burst)
<li><a href="#[780]">cmd_parse_func.part.0</a> from src_dut_main.o(.text.cmd_parse_func.part.0) referenced from src_dut_main.o(.text.dut_test_at.constprop.1)
<li><a href="#[781]">dut_test_at.constprop.1</a> from src_dut_main.o(.text.dut_test_at.constprop.1) referenced from src_dut_main.o(.text.dut_task_entry)
<li><a href="#[782]">dut_task_entry</a> from src_dut_main.o(.text.dut_task_entry) referenced from Obj/init_init.o(.text.board_yoc_init)
<li><a href="#[783]">dut_service_init</a> from src_dut_main.o(.text.dut_service_init) referenced from Obj/init_init.o(.text.board_yoc_init)
<li><a href="#[784]">dut_service_cmd_reg</a> from src_dut_main.o(.text.dut_service_cmd_reg) referenced from src_dut_main.o(.text.dut_service_cmds_reg)
<li><a href="#[786]">dut_service_cmds_reg</a> from src_dut_main.o(.text.dut_service_cmds_reg) referenced from src_ble_dut_cmd.o(.text.dut_ble_default_cmds_reg)
<li><a href="#[788]">str2_char</a> from src_dut_utility.o(.text.str2_char) referenced from src_ble_dut_cmd.o(.text.dut_cmd_opt_mac)
<li><a href="#[789]">int_num_check</a> from src_dut_utility.o(.text.int_num_check) referenced from src_ble_dut_cmd.o(.text.dut_cmd_freqoff)
<li><a href="#[78a]">str_chr</a> from src_dut_utility.o(.text.str_chr) referenced from src_dut_main.o(.text.dut_test_at.constprop.1)
<li><a href="#[78b]">argc_len</a> from src_dut_utility.o(.text.argc_len) referenced from src_dut_main.o(.text.dut_test_at.constprop.1)
<li><a href="#[78c]">char_cut</a> from src_dut_utility.o(.text.char_cut) referenced from src_dut_main.o(.text.dut_test_at.constprop.1)
<li><a href="#[71e]">csi_spiflash_erase_sector</a> from src_flash_weak.o(.text.weak_func) referenced from csi1_spiflash_spiflash_drv.o(.text.yoc_spiflash_erase)
<li><a href="#[720]">csi_spiflash_get_info</a> from src_flash_weak.o(.text.weak_func) referenced from csi1_spiflash_spiflash_drv.o(.text.yoc_spiflash_open)
<li><a href="#[71a]">csi_spiflash_initialize</a> from src_flash_weak.o(.text.weak_func) referenced from csi1_spiflash_spiflash_drv.o(.text.yoc_spiflash_open)
<li><a href="#[71d]">csi_spiflash_program</a> from src_flash_weak.o(.text.weak_func) referenced from csi1_spiflash_spiflash_drv.o(.text.yoc_spiflash_program)
<li><a href="#[71c]">csi_spiflash_read</a> from src_flash_weak.o(.text.weak_func) referenced from csi1_spiflash_spiflash_drv.o(.text.yoc_spiflash_read)
<li><a href="#[71b]">csi_spiflash_uninitialize</a> from src_flash_weak.o(.text.weak_func) referenced from csi1_spiflash_spiflash_drv.o(.text.yoc_spiflash_close)
<li><a href="#[7da]">hal_uart_init</a> from src_uart.o(.text.hal_uart_init) referenced from src_dut_main.o(.text.dut_service_init)
<li><a href="#[7db]">hal_uart_send_poll</a> from src_uart.o(.text.hal_uart_send_poll) referenced from src_dut_main.o(.text.dut_sendv)
<li><a href="#[7df]">hal_uart_recv_II</a> from src_uart.o(.text.hal_uart_recv_II) referenced from src_dut_main.o(.text.dut_task_entry)
<li><a href="#[7e1]">hal_wdg_init</a> from src_wdg.o(.text.hal_wdg_init) referenced from src_dut_main.o(.text.dut_service_init)
<li><a href="#[7e3]">hal_wdg_finalize</a> from src_wdg.o(.text.hal_wdg_finalize) referenced from src_dut_main.o(.text.dut_service_init)
<li><a href="#[809]">spiflash_csky_register</a> from csi1_spiflash_spiflash_drv.o(.text.spiflash_csky_register) referenced from Obj/init_init.o(.text.hci_board_init)
<li><a href="#[817]">read_LL_remainder_time1</a> from ble_controller_ll_patch.o(.__sram.code.read_LL_remainder_time1) referenced from ble_controller_ll_patch.o(.__sram.code.llSecAdvAllow1)
<li><a href="#[818]">ll_hw_read_rfifo1</a> from ble_controller_ll_patch.o(.__sram.code.ll_hw_read_rfifo1) referenced from ble_controller_ll_patch.o(.__sram.code.ll_processExtInitIRQ)
<li><a href="#[829]">patch_extScan_updateNode</a> from ble_controller_ll_patch.o(.__sram.code.patch_extScan_updateNode) referenced from ble_controller_ll_patch.o(.__sram.code.ll_processExtScanIRQ)
<li><a href="#[82a]">patch_extScan_addNode</a> from ble_controller_ll_patch.o(.__sram.code.patch_extScan_addNode) referenced from ble_controller_ll_patch.o(.__sram.code.ll_processExtScanIRQ)
<li><a href="#[82b]">ll_processBasicIRQ_secondaryAdvTRX0</a> from ble_controller_ll_patch.o(.__sram.code.ll_processBasicIRQ_secondaryAdvTRX0) referenced from hci_uart_h5.o(.__sram.code.LL_IRQHandler_process)
<li><a href="#[82d]">ll_processBasicIRQ_secondaryScanSRX0</a> from ble_controller_ll_patch.o(.__sram.code.ll_processBasicIRQ_secondaryScanSRX0) referenced from hci_uart_h5.o(.__sram.code.LL_IRQHandler_process)
<li><a href="#[82e]">llSetupExtScan1</a> from ble_controller_ll_patch.o(.__sram.code.llSetupExtScan1) referenced from ble_controller_ll_patch.o(.__sram.code.ll_processExtScanIRQ)
<li><a href="#[82f]">ll_processExtScanIRQ</a> from ble_controller_ll_patch.o(.__sram.code.ll_processExtScanIRQ) referenced from hci_uart_h5.o(.__sram.code.LL_IRQHandler_process)
<li><a href="#[830]">LL_extScanTimerExpProcess</a> from ble_controller_ll_patch.o(.__sram.code.LL_extScanTimerExpProcess) referenced from ble_controller_ll_patch.o(.__sram.code.TIM4_IRQHandler1)
<li><a href="#[833]">rc32k_calibration</a> from ble_controller_ll_patch.o(.__sram.rc32k_calibration) referenced from ble_controller_ll_patch.o(.__sram.code.rf_calibrate1)
<li><a href="#[838]">LL_AdvSetTerminatedCback</a> from ble_controller_ll_patch.o(.__xip.code.LL_AdvSetTerminatedCback) referenced from ble_controller_ll_patch.o(.__sram.code.ll_processExtAdvIRQ)
<li><a href="#[839]">ll_processExtAdvIRQ</a> from ble_controller_ll_patch.o(.__sram.code.ll_processExtAdvIRQ) referenced from hci_uart_h5.o(.__sram.code.LL_IRQHandler_process)
<li><a href="#[83c]">LL_extAdvTimerExpProcess</a> from ble_controller_ll_patch.o(.__sram.code.LL_extAdvTimerExpProcess) referenced from ble_controller_ll_patch.o(.__sram.code.TIM4_IRQHandler1)
<li><a href="#[841]">LL_SetExtAdvParam</a> from ble_controller_ll_patch.o(.__xip.code.LL_SetExtAdvParam) referenced from ble_controller_ll_patch.o(.__xip.code)
<li><a href="#[842]">LL_SetExtendedScanEnable</a> from ble_controller_ll_patch.o(.text.LL_SetExtendedScanEnable) referenced from hci_tl.o(.text.adv_scan_schd_scan_exit)
<li><a href="#[845]">TRNG_Output</a> from ble_controller_ll_patch.o(.__sram.code.TRNG_Output) referenced from ble_controller_ll_patch.o(.__sram.code.TRNG_INIT)
<li><a href="#[846]">TRNG_INIT</a> from ble_controller_ll_patch.o(.__sram.code.TRNG_INIT) referenced from ble_controller_ll_patch.o(.__sram.code.TRNG_Rand)
<li><a href="#[847]">TRNG_Rand</a> from ble_controller_ll_patch.o(.__sram.code.TRNG_Rand) referenced from ble_controller_ll_patch.o(.__sram.code.LL_ENC_GenerateTrueRandNum1)
<li><a href="#[851]">ll_isLegacyAdv</a> from ble_controller_ll_patch.o(.__sram.code.ll_isLegacyAdv) referenced from ble_controller_ll_patch.o(.__xip.code)
<li><a href="#[852]">LL_SetExtAdvEnable.part.8</a> from ble_controller_ll_patch.o(.__xip.code) referenced from ble_controller_ll_patch.o(.__xip.code)
<li><a href="#[853]">LL_ExtAdvReportCback</a> from ble_controller_ll_patch.o(.__sram.code.LL_ExtAdvReportCback) referenced from ble_controller_ll_patch.o(.__sram.code.ll_processExtScanIRQ)
<li><a href="#[857]">ll_processExtInitIRQ</a> from ble_controller_ll_patch.o(.__sram.code.ll_processExtInitIRQ) referenced from hci_uart_h5.o(.__sram.code.LL_IRQHandler_process)
<li><a href="#[859]">LL_prdAdvTimerExpProcess</a> from ble_controller_ll_patch.o(.__sram.code.LL_prdAdvTimerExpProcess) referenced from ble_controller_ll_patch.o(.__sram.code.TIM4_IRQHandler1)
<li><a href="#[85a]">LL_prdScanTimerExpProcess</a> from ble_controller_ll_patch.o(.__sram.code.LL_prdScanTimerExpProcess) referenced from ble_controller_ll_patch.o(.__sram.code.TIM4_IRQHandler1)
<li><a href="#[85e]">llSetupSyncInfo</a> from ble_controller_ll_patch.o(.__sram.code.llSetupSyncInfo) referenced from ble_controller_ll_patch.o(.__sram.code.llSetupAuxAdvIndPDU1)
<li><a href="#[862]">llSetupAuxConnectRspPDU1</a> from ble_controller_ll_patch.o(.__sram.code.llSetupAuxConnectRspPDU1) referenced from ble_controller_ll_patch.o(.__sram.code.ll_processExtAdvIRQ)
<li><a href="#[863]">llSetupExtAdvLegacyEvent</a> from ble_controller_ll_patch.o(.__sram.code.llSetupExtAdvLegacyEvent) referenced from ble_controller_ll_patch.o(.__sram.code.llSetupExtAdvEvent1)
<li><a href="#[865]">move_to_slave_function1</a> from ble_controller_ll_patch.o(.__sram.code.move_to_slave_function1) referenced from ble_controller_ll_patch.o(.__sram.code.ll_processExtAdvIRQ)
<li><a href="#[867]">ll_hw_trx_settle_bb</a> from ble_controller_ll_patch.o(.__sram.code.ll_hw_trx_settle_bb) referenced from ble_controller_ll_patch.o(.__sram.code.ll_processExtAdvIRQ)
<li><a href="#[869]">patch_extScan_findSchNode</a> from ble_controller_ll_patch.o(.__sram.code.patch_extScan_findSchNode) referenced from ble_controller_ll_patch.o(.__sram.code.LL_extScanTimerExpProcess)
<li><a href="#[86a]">patch_extScan_deleteNode</a> from ble_controller_ll_patch.o(.__sram.code.patch_extScan_deleteNode) referenced from ble_controller_ll_patch.o(.__sram.code.patch_extScan_deleteAllNode)
<li><a href="#[86b]">patch_extScan_deleteAllNode</a> from ble_controller_ll_patch.o(.__sram.code.patch_extScan_deleteAllNode) referenced from ble_controller_ll_patch.o(.text.LL_SetExtendedScanEnable)
<li><a href="#[86c]">ll_allocAuxAdvTimeSlot</a> from ble_controller_ll_patch.o(.__xip.code) referenced from ble_controller_ll_patch.o(.__xip.code)
<li><a href="#[870]">HCI_LE_SetExtAdvParamCmd</a> from ble_controller_ll_patch.o(.__xip.code) referenced from hci_tl.o(.text.hciLESetExtAdvParam)
<li><a href="#[871]">LL_SetExtAdvData</a> from ble_controller_ll_patch.o(.__xip.code) referenced from ble_controller_ll_patch.o(.__xip.code)
<li><a href="#[872]">HCI_LE_SetExtAdvDataCmd</a> from ble_controller_ll_patch.o(.__xip.code) referenced from hci_tl.o(.text.hciLESetExtAdvData)
<li><a href="#[873]">LL_SetExtAdvEnable</a> from ble_controller_ll_patch.o(.__xip.code) referenced from ble_controller_ll_patch.o(.__xip.code)
<li><a href="#[875]">LL_ReadMaximumAdvDataLength</a> from ble_controller_ll_patch.o(.__xip.code) referenced from ble_controller_ll_patch.o(.__xip.code)
<li><a href="#[876]">HCI_LE_ReadMaximumAdvDataLengthCmd</a> from ble_controller_ll_patch.o(.__xip.code) referenced from hci_tl.o(.text.hciLEReadMaximumAdvDataLength)
<li><a href="#[877]">LL_RemoveAdvSet</a> from ble_controller_ll_patch.o(.__xip.code) referenced from ble_controller_ll_patch.o(.__xip.code)
<li><a href="#[878]">HCI_LE_RemoveAdvSetCmd</a> from ble_controller_ll_patch.o(.__xip.code) referenced from hci_tl.o(.text.hciLERemoveAdvSet)
<li><a href="#[879]">LL_ClearAdvSets</a> from ble_controller_ll_patch.o(.__xip.code) referenced from ble_controller_ll_patch.o(.__xip.code)
<li><a href="#[87a]">HCI_LE_ClearAdvSetsCmd</a> from ble_controller_ll_patch.o(.__xip.code) referenced from hci_tl.o(.text.hciLEClearAdvSets)
<li><a href="#[87b]">LL_InitialExtendedAdv</a> from ble_controller_ll_patch.o(.__xip.code) referenced from hci_uart_h5.o(.text.h5_hal_open)
<li><a href="#[87c]">LL_SetPeriodicAdvParameter</a> from ble_controller_ll_patch.o(.__xip.code) referenced from ble_controller_ll_patch.o(.__xip.code)
<li><a href="#[87d]">HCI_LE_SetPeriodicAdvParameterCmd</a> from ble_controller_ll_patch.o(.__xip.code) referenced from hci_tl.o(.text.hciLESetPeriodicAdvParameter)
<li><a href="#[87e]">ll_allocAuxAdvTimeSlot_prd</a> from ble_controller_ll_patch.o(.__xip.code) referenced from ble_controller_ll_patch.o(.__xip.code)
<li><a href="#[880]">LL_SetPeriodicAdvEnable</a> from ble_controller_ll_patch.o(.__xip.code) referenced from ble_controller_ll_patch.o(.__xip.code)
<li><a href="#[881]">HCI_LE_SetPeriodicAdvEnableCmd</a> from ble_controller_ll_patch.o(.__xip.code) referenced from hci_tl.o(.text.hciLESetPeriodicAdvEnable)
<li><a href="#[882]">LL_SetExtScanRspData</a> from ble_controller_ll_patch.o(.__xip.code) referenced from ble_controller_ll_patch.o(.__xip.code)
<li><a href="#[883]">HCI_LE_SetExtScanRspDataCmd</a> from ble_controller_ll_patch.o(.__xip.code) referenced from hci_tl.o(.text.hciLESetExtScanRspData)
<li><a href="#[884]">rf_rxDcoc_cfg</a> from ble_controller_rf_phy_driver.o(.text.rf_rxDcoc_cfg) referenced from ble_controller_ll_patch.o(.__sram.code.rf_calibrate1)
<li><a href="#[88a]">rf_phy_set_txPower</a> from ble_controller_rf_phy_driver.o(.text.rf_phy_set_txPower) referenced from ble_controller_rf_phy_driver.o(.text.rf_phy_ini)
<li><a href="#[88c]">rf_phy_dtm_stop</a> from ble_controller_rf_phy_driver.o(.text.rf_phy_dtm_stop) referenced from src_ble_dut_test.o(.text.dut_hal_ble_transmit_stop)
<li><a href="#[890]">rf_phy_ana_cfg</a> from ble_controller_rf_phy_driver.o(.text.rf_phy_ana_cfg) referenced from ble_controller_ll_patch.o(.__sram.code.rf_calibrate1)
<li><a href="#[891]">rf_phy_bb_cfg</a> from ble_controller_rf_phy_driver.o(.text.rf_phy_bb_cfg) referenced from ble_controller_rf_phy_driver.o(.text.rf_phy_ini)
<li><a href="#[892]">rf_phy_change_cfg0</a> from ble_controller_rf_phy_driver.o(.text.rf_phy_change_cfg0) referenced from ble_controller_ll_patch.o(.__sram.code.llSetupExtAdvLegacyEvent)
<li><a href="#[893]">rf_tp_cal</a> from ble_controller_rf_phy_driver.o(.text.rf_tp_cal) referenced from ble_controller_rf_phy_driver.o(.text.rf_tpCal_gen_cap_arrary)
<li><a href="#[896]">rf_tpCal_gen_cap_arrary</a> from ble_controller_rf_phy_driver.o(.text.rf_tpCal_gen_cap_arrary) referenced from ble_controller_ll_patch.o(.__sram.code.rf_calibrate1)
<li><a href="#[8a1]">LL_ChannelSelectionAlgorithmCback</a> from ble_controller_hci_event_patch.o(.text.LL_ChannelSelectionAlgorithmCback) referenced from ble_controller_ll_patch.o(.__sram.code.LL_ProcessEvent1)
<li><a href="#[8a5]">LL_EnhConnectionCompleteCback</a> from ble_controller_hci_event_patch.o(.text.LL_EnhConnectionCompleteCback) referenced from ble_controller_ll_patch.o(.__sram.code.LL_ProcessEvent1)
<li><a href="#[8a9]">isEnhConnCmpEvtSupport</a> from ble_controller_hci_event_patch.o(.text.isEnhConnCmpEvtSupport) referenced from ble_controller_ll_patch.o(.__sram.code.LL_ProcessEvent1)
<li><a href="#[251]">bt_crypto_rand</a> from bt_crypto.o(.text.bt_crypto_rand) referenced from bt_host_host_crypto.o(.text.bt_rand)
<li><a href="#[8ab]">hci_h5_send_sync_req</a> from h5.o(.text.hci_h5_send_sync_req) referenced from h5.o(.text.hci_h5_send_sync_cmd)
<li><a href="#[8ad]">hci_h5_send_conf_resp</a> from h5.o(.text.hci_h5_send_conf_resp) referenced from h5.o(.text.h5_complete_rx_pkt.constprop.11)
<li><a href="#[8b0]">h5_complete_rx_pkt.constprop.11</a> from h5.o(.text.h5_complete_rx_pkt.constprop.11) referenced from h5.o(.text.hci_h5_receive_msg)
<li><a href="#[8b5]">OsStartTimer</a> from h5.o(.text.OsStartTimer) referenced from h5.o(.text.h5_start_conf_retrans_timer)
<li><a href="#[8b6]">h5_start_conf_retrans_timer</a> from h5.o(.text.h5_start_conf_retrans_timer) referenced from h5.o(.text.h5_complete_rx_pkt.constprop.11)
<li><a href="#[8b7]">h5_start_sync_retrans_timer</a> from h5.o(.text.h5_start_sync_retrans_timer) referenced from h5.o(.text.hci_h5_send_sync_cmd)
<li><a href="#[8ba]">h5_prepare_pkt.constprop.13</a> from h5.o(.text.h5_prepare_pkt.constprop.13) referenced from h5.o(.text.h5_wake_up)
<li><a href="#[8bb]">h5_wake_up</a> from h5.o(.text.h5_wake_up) referenced from h5.o(.text.hci_h5_send_conf_req)
<li><a href="#[8bc]">hci_h5_send_conf_req</a> from h5.o(.text.hci_h5_send_conf_req) referenced from h5.o(.text.h5_complete_rx_pkt.constprop.11)
<li><a href="#[8bd]">hci_h5_send_sync_resp</a> from h5.o(.text.hci_h5_send_sync_resp) referenced from h5.o(.text.h5_complete_rx_pkt.constprop.11)
<li><a href="#[8be]">h5_crc_update</a> from h5.o(.text.h5_crc_update) referenced from h5.o(.text.h5_prepare_pkt.constprop.13)
<li><a href="#[8c1]">h5_slip_one_byte</a> from h5.o(.text.h5_slip_one_byte) referenced from h5.o(.text.h5_prepare_pkt.constprop.13)
<li><a href="#[8c2]">h5_slip_msgdelim</a> from h5.o(.text.h5_slip_msgdelim) referenced from h5.o(.text.h5_prepare_pkt.constprop.13)
<li><a href="#[8c3]">h5_enqueue</a> from h5.o(.text.h5_enqueue) referenced from h5.o(.text.hci_h5_send_conf_req)
<li><a href="#[8c4]">h5_retransfer_signal_event</a> from h5.o(.text.h5_retransfer_signal_event) referenced from h5.o(.text.h5_retransfer_timeout_handler)
<li><a href="#[8c5]">OsAllocateTimer</a> from h5.o(.text.OsAllocateTimer) referenced from h5.o(.text.hci_h5_int_init)
<li><a href="#[8c8]">rtk_unrel_is_high_level</a> from h5.o(.text.rtk_unrel_is_high_level) referenced from hci_tl.o(.text.hciProcessCtrlToHost)
<li><a href="#[8c9]">hci_h5_receive_msg</a> from h5.o(.text.hci_h5_receive_msg) referenced from hci_uart_h5.o(.__sram.code)
<li><a href="#[8ca]">get_h5_controller_interface</a> from h5.o(.text.get_h5_controller_interface) referenced from Obj/init_init.o(.text.hci_board_init)
<li><a href="#[43b]">hci_api_le_rand</a> from hci_api.o(.text.hci_api_le_rand) referenced from bt_crypto.o(.text.bt_crypto_rand)
<li><a href="#[920]">HCI_LL_SetScanControl</a> from hci_tl.o(.text.HCI_LL_SetScanControl) referenced from hci_tl.o(.text.adv_scan_schd_scan_exit)
<li><a href="#[922]">HCI_LL_SetAdvControl</a> from hci_tl.o(.text.HCI_LL_SetAdvControl) referenced from hci_tl.o(.text.adv_scan_schd_adv_scan_exit)
<li><a href="#[924]">HCI_LE_SetExtendedScanEnableCmd1</a> from hci_tl.o(.text.HCI_LE_SetExtendedScanEnableCmd1) referenced from hci_tl.o(.text.adv_scan_schd_scan_enter)
<li><a href="#[928]">bt_mesh_adv_scan_schd</a> from hci_tl.o(.text.bt_mesh_adv_scan_schd) referenced from hci_tl.o(.text.bt_mesh_adv_scan_schd_action)
<li><a href="#[929]">bt_mesh_adv_scan_schd_action</a> from hci_tl.o(.text.bt_mesh_adv_scan_schd_action) referenced from hci_tl.o(.text.hciLESetExtAdvEnable)
<li><a href="#[92c]">bt_mesh_adv_scan_schd_init</a> from hci_tl.o(.text.bt_mesh_adv_scan_schd_init) referenced from Obj/init_init.o(.text.hci_board_init)
<li><a href="#[92d]">bt_mesh_adv_enable</a> from hci_tl.o(.text.bt_mesh_adv_enable) referenced from hci_tl.o(.text.hciLESetAdvEnab)
<li><a href="#[92e]">bt_mesh_adv_disable</a> from hci_tl.o(.text.bt_mesh_adv_disable) referenced from hci_tl.o(.text.hciLESetAdvEnab)
<li><a href="#[930]">bt_mesh_scan_enable</a> from hci_tl.o(.text.bt_mesh_scan_enable) referenced from hci_tl.o(.text.hciLESetScanEnable)
<li><a href="#[931]">bt_mesh_scan_disable</a> from hci_tl.o(.text.bt_mesh_scan_disable) referenced from hci_tl.o(.text.hciLESetScanEnable)
<li><a href="#[933]">hciProcessHostToCtrlVendorCmd_RAW</a> from hci_tl.o(.text.hciProcessHostToCtrlVendorCmd_RAW) referenced from hci_tl.o(.text.HCI_H5_RecvCallback)
<li><a href="#[934]">hciProcessHostToCtrlCmd_RAW</a> from hci_tl.o(.text.hciProcessHostToCtrlCmd_RAW) referenced from hci_tl.o(.text.HCI_H5_RecvCallback)
<li><a href="#[936]">hciProcessHostToCtrlCmd</a> from hci_tl.o(.text.hciProcessHostToCtrlCmd) referenced from hci_tl.o(.text.HCI_ProcessEvent1)
<li><a href="#[937]">HCI_ReadLocalVersionInfoCmd_1</a> from hci_tl.o(.text.HCI_ReadLocalVersionInfoCmd_1) referenced from hci_tl.o(.text.hciReadLocalVersionInfo)
<li><a href="#[938]">wait_llWaitingIrq</a> from hci_tl.o(.text.wait_llWaitingIrq) referenced from hci_tl.o(.text.hciLECreateConn)
<li><a href="#[93c]">hciProcessHostToCtrlData</a> from hci_tl.o(.text.hciProcessHostToCtrlData) referenced from hci_tl.o(.text.HCI_ProcessEvent1)
<li><a href="#[93d]">LL_ReadLocalResolvableAddress1</a> from hci_tl.o(.text.LL_ReadLocalResolvableAddress1) referenced from hci_tl.o(.text.HCI_LE_ReadLocalResolvableAddressCmd1)
<li><a href="#[93f]">hciLESetExtAdvEnable1</a> from hci_tl.o(.text.hciLESetExtAdvEnable1) referenced from hci_tl.o(.text.adv_scan_schd_adv_scan_exit)
<li><a href="#[941]">HCI_H5_Send</a> from hci_tl.o(.text.HCI_H5_Send) referenced from hci_tl.o(.text.HCI_CommandCompleteEvent1)
<li><a href="#[942]">HCI_CommandCompleteEvent1</a> from hci_tl.o(.text.HCI_CommandCompleteEvent1) referenced from Obj/src_ais_server.o(.text.ble_ais_notify)
<li><a href="#[944]">HCI_LE_SetEventMaskCmd1</a> from hci_tl.o(.text.HCI_LE_SetEventMaskCmd1) referenced from hci_tl.o(.text.hciLESetEventMask)
<li><a href="#[949]">HCI_LE_ReadLocalResolvableAddressCmd1</a> from hci_tl.o(.text.HCI_LE_ReadLocalResolvableAddressCmd1) referenced from hci_tl.o(.text.hciLEReadLocalRA)
<li><a href="#[94c]">hciProcessCtrlToHost</a> from hci_tl.o(.text.hciProcessCtrlToHost) referenced from hci_tl.o(.text.HCI_ProcessEvent1)
<li><a href="#[958]">init_config</a> from hci_uart_h5.o(.text.init_config) referenced from system.o(.text.SystemInit)
<li><a href="#[95b]">ll_patch_extended_com</a> from hci_uart_h5.o(.text.ll_patch_extended_com) referenced from hci_uart_h5.o(.text.ll_patch_init)
<li><a href="#[95d]">ll_patch_init</a> from hci_uart_h5.o(.text.ll_patch_init) referenced from hci_uart_h5.o(.text.hal_rfphy_init)
<li><a href="#[95e]">hal_rfphy_init</a> from hci_uart_h5.o(.text.hal_rfphy_init) referenced from system.o(.text.SystemInit)
<li><a href="#[95f]">bt_hci_uart_h5_register</a> from hci_uart_h5.o(.text.bt_hci_uart_h5_register) referenced from Obj/init_init.o(.text.hci_board_init)
<li><a href="#[962]">LL_IRQHandler_process</a> from hci_uart_h5.o(.__sram.code.LL_IRQHandler_process) referenced from hci_uart_h5.o(.__sram.code.__LL_IRQHandler)
<li><a href="#[964]">patch_efuse_init</a> from hci_uart_h5.o(.text.patch_efuse_init) referenced from hci_uart_h5.o(.text.hal_rfphy_init)
<li><a href="#[965]">LL_InitConnectContext0</a> from hci_uart_h5.o(.text.LL_InitConnectContext0) referenced from hci_uart_h5.o(.text.h5_hal_open)
<li><a href="#[967]">hci_uart_loop</a> from hci_uart_h5.o(.__sram.code) referenced from Obj/src_app_main.o(.text.startup.main)
<li><a href="#[968]">malloc</a> from libc_malloc.o(.text.malloc) referenced from h5.o(.text.OsAllocateTimer)
<li><a href="#[969]">free</a> from libc_malloc.o(.text.free) referenced from h5.o(.text.hci_h5_cleanup)
<li><a href="#[96c]">vasprintf</a> from libc_stdio_vasprintf.o(.text.vasprintf) referenced from src_dut_main.o(.text.dut_sendv)
<li><a href="#[96e]">strtoul</a> from libc_stdlib_strtol.o(.text.strtoul) referenced from libc_stdlib_strtol.o(.text.strtol)
<li><a href="#[96f]">strtol</a> from libc_stdlib_strtol.o(.text.strtol) referenced from atoi.o(.text)
<li><a href="#[973]">strdup</a> from libc_string_strdup.o(.text.strdup) referenced from src_devices_device.o(.text.dev_name_parse.constprop.0)
<li><a href="#[974]">strerror</a> from libc_string_strerror.o(.text.strerror) referenced from __v2_printfDFHLlMOPpSSsWp.o(.text)
<li><a href="#[994]">dyn_mem_proc_task_start</a> from k_dyn_mem_proc.o(.text.dyn_mem_proc_task_start) referenced from k_sys.o(.text.krhino_init)
<li><a href="#[83]">krhino_idle_hook</a> from board_init.o(.text.krhino_idle_hook) referenced from k_idle.o(.text.idle_task)
<li><a href="#[996]">buf_queue_create</a> from k_buf_queue.o(.text.buf_queue_create) referenced from k_buf_queue.o(.text.krhino_fix_buf_queue_create)
<li><a href="#[999]">krhino_fix_buf_queue_create</a> from k_buf_queue.o(.text.krhino_fix_buf_queue_create) referenced from k_timer.o(.text.ktimer_init)
<li><a href="#[99e]">krhino_buf_queue_send</a> from k_buf_queue.o(.text.krhino_buf_queue_send) referenced from k_timer.o(.text.krhino_timer_dyn_del)
<li><a href="#[99f]">krhino_buf_queue_recv</a> from k_buf_queue.o(.text.krhino_buf_queue_recv) referenced from k_timer.o(.text.timer_task)
<li><a href="#[994]">dyn_mem_proc_task_start</a> from k_dyn_mem_proc.o(.text.dyn_mem_proc_task_start) referenced from k_sys.o(.text.krhino_init)
<li><a href="#[9a3]">k_err_proc_debug</a> from k_err.o(.text.k_err_proc_debug) referenced from src_adapter_rhino_hook_impl.o(.text.krhino_init_hook)
<li><a href="#[9ae]">size_to_level</a> from k_mm.o(.text.size_to_level) referenced from k_mm.o(.text.k_mm_freelist_insert)
<li><a href="#[9af]">removesize</a> from k_mm.o(.text.removesize) referenced from k_mm.o(.text.k_mm_smallblk_free)
<li><a href="#[9b0]">k_mm_freelist_insert</a> from k_mm.o(.text.k_mm_freelist_insert) referenced from k_mm.o(.text.k_mm_alloc)
<li><a href="#[9b1]">k_mm_freelist_delete</a> from k_mm.o(.text.k_mm_freelist_delete) referenced from k_mm.o(.text.k_mm_alloc)
<li><a href="#[9b2]">k_mm_smallblk_free</a> from k_mm.o(.text.k_mm_smallblk_free) referenced from k_mm.o(.text.k_mm_free)
<li><a href="#[9b3]">addsize</a> from k_mm.o(.text.addsize) referenced from k_mm.o(.text.k_mm_alloc)
<li><a href="#[9b5]">k_mm_alloc</a> from k_mm.o(.text.k_mm_alloc) referenced from k_mm.o(.text.krhino_init_mm_head)
<li><a href="#[9b6]">k_mm_free</a> from k_mm.o(.text.k_mm_free) referenced from k_mm.o(.text.krhino_init_mm_head)
<li><a href="#[9b7]">krhino_init_mm_head</a> from k_mm.o(.text.krhino_init_mm_head) referenced from k_mm.o(.text.k_mm_init)
<li><a href="#[9b8]">krhino_add_mm_region</a> from k_mm.o(.text.krhino_add_mm_region) referenced from k_mm.o(.text.k_mm_init)
<li><a href="#[9b9]">k_mm_init</a> from k_mm.o(.text.k_mm_init) referenced from k_sys.o(.text.krhino_init)
<li><a href="#[9bb]">krhino_mm_alloc</a> from k_mm.o(.text.krhino_mm_alloc) referenced from k_task.o(.text.krhino_task_dyn_create)
<li><a href="#[9bc]">krhino_mm_free</a> from k_mm.o(.text.krhino_mm_free) referenced from k_task.o(.text.krhino_task_dyn_create)
<li><a href="#[9bf]">krhino_mblk_pool_init</a> from k_mm_blk.o(.text.krhino_mblk_pool_init) referenced from k_mm.o(.text.krhino_init_mm_head)
<li><a href="#[9c0]">krhino_mblk_alloc</a> from k_mm_blk.o(.text.krhino_mblk_alloc) referenced from k_mm.o(.text.k_mm_alloc)
<li><a href="#[9c1]">krhino_mblk_free</a> from k_mm_blk.o(.text.krhino_mblk_free) referenced from k_mm.o(.text.k_mm_smallblk_free)
<li><a href="#[9c2]">mutex_release.isra.1</a> from k_mutex.o(.text.mutex_release.isra.1) referenced from k_mutex.o(.text.krhino_mutex_del)
<li><a href="#[9c3]">mutex_create</a> from k_mutex.o(.text.mutex_create) referenced from k_mutex.o(.text.krhino_mutex_create)
<li><a href="#[9c4]">krhino_mutex_create</a> from k_mutex.o(.text.krhino_mutex_create) referenced from bt_host_port_aos_aos_port.o(.text.k_mutex_init)
<li><a href="#[9c5]">krhino_mutex_del</a> from k_mutex.o(.text.krhino_mutex_del) referenced from src_adapter_rhino_aos_rhino.o(.text.aos_mutex_free)
<li><a href="#[9c9]">mutex_pri_look</a> from k_mutex.o(.text.mutex_pri_look) referenced from k_task.o(.text.task_pri_change)
<li><a href="#[9ca]">mutex_task_pri_reset</a> from k_mutex.o(.text.mutex_task_pri_reset) referenced from k_task.o(.text.krhino_task_del)
<li><a href="#[9cb]">krhino_mutex_lock</a> from k_mutex.o(.text.krhino_mutex_lock) referenced from bt_host_port_aos_aos_port.o(.text.k_mutex_lock)
<li><a href="#[9cc]">krhino_mutex_unlock</a> from k_mutex.o(.text.krhino_mutex_unlock) referenced from bt_host_port_aos_aos_port.o(.text.k_mutex_unlock)
<li><a href="#[9cd]">klist_rm</a> from k_pend.o(.text.klist_rm) referenced from k_pend.o(.text.pend_task_wakeup)
<li><a href="#[9ce]">pend_list_add</a> from k_pend.o(.text.pend_list_add) referenced from k_pend.o(.text.pend_to_blk_obj)
<li><a href="#[9cf]">pend_task_wakeup</a> from k_pend.o(.text.pend_task_wakeup) referenced from k_mutex.o(.text.krhino_mutex_unlock)
<li><a href="#[9d0]">pend_to_blk_obj</a> from k_pend.o(.text.pend_to_blk_obj) referenced from k_mutex.o(.text.krhino_mutex_lock)
<li><a href="#[9d1]">pend_task_rm</a> from k_pend.o(.text.pend_task_rm) referenced from k_mutex.o(.text.krhino_mutex_del)
<li><a href="#[9d2]">pend_list_reorder</a> from k_pend.o(.text.pend_list_reorder) referenced from k_task.o(.text.task_pri_change)
<li><a href="#[9d3]">pend_state_end_proc</a> from k_pend.o(.text.pend_state_end_proc) referenced from k_mutex.o(.text.krhino_mutex_lock)
<li><a href="#[9df]">ringbuf_push</a> from k_ringbuf.o(.text.ringbuf_push) referenced from k_buf_queue.o(.text.krhino_buf_queue_send)
<li><a href="#[9e0]">ringbuf_pop</a> from k_ringbuf.o(.text.ringbuf_pop) referenced from k_buf_queue.o(.text.krhino_buf_queue_recv)
<li><a href="#[9e3]">ringbuf_reset</a> from k_ringbuf.o(.text.ringbuf_reset) referenced from k_ringbuf.o(.text.ringbuf_init)
<li><a href="#[9e4]">ringbuf_init</a> from k_ringbuf.o(.text.ringbuf_init) referenced from k_buf_queue.o(.text.buf_queue_create)
<li><a href="#[9e5]">ready_list_init</a> from k_sched.o(.text.ready_list_init) referenced from k_sched.o(.text._ready_list_add_tail)
<li><a href="#[9e6]">_ready_list_add_tail</a> from k_sched.o(.text._ready_list_add_tail) referenced from k_sched.o(.text.ready_list_add_tail)
<li><a href="#[9e7]">krhino_sched_disable</a> from k_sched.o(.text.krhino_sched_disable) referenced from src_adapter_rhino_aos_rhino.o(.text.aos_kernel_sched_suspend)
<li><a href="#[9e8]">core_sched</a> from k_sched.o(.text.core_sched) referenced from k_mutex.o(.text.krhino_mutex_del)
<li><a href="#[9e9]">krhino_sched_enable</a> from k_sched.o(.text.krhino_sched_enable) referenced from src_adapter_rhino_aos_rhino.o(.text.aos_kernel_sched_resume)
<li><a href="#[9ea]">runqueue_init</a> from k_sched.o(.text.runqueue_init) referenced from k_sys.o(.text.krhino_init)
<li><a href="#[9eb]">ready_list_add_head</a> from k_sched.o(.text.ready_list_add_head) referenced from k_task.o(.text.task_pri_change)
<li><a href="#[9ec]">ready_list_add_tail</a> from k_sched.o(.text.ready_list_add_tail) referenced from k_task.o(.text.task_create.isra.0.part.1.constprop.10)
<li><a href="#[9ed]">ready_list_add</a> from k_sched.o(.text.ready_list_add) referenced from k_pend.o(.text.pend_task_wakeup)
<li><a href="#[9ee]">ready_list_rm</a> from k_sched.o(.text.ready_list_rm) referenced from k_pend.o(.text.pend_to_blk_obj)
<li><a href="#[9f0]">preferred_cpu_ready_task_get</a> from k_sched.o(.text.preferred_cpu_ready_task_get) referenced from k_sys.o(.text.krhino_start)
<li><a href="#[9f1]">time_slice_update</a> from k_sched.o(.text.time_slice_update) referenced from k_time.o(.text.krhino_tick_proc)
<li><a href="#[9f2]">sem_give</a> from k_sem.o(.text.sem_give) referenced from k_sem.o(.text.krhino_sem_give)
<li><a href="#[9f3]">krhino_sem_create</a> from k_sem.o(.text.krhino_sem_create) referenced from k_sys.o(.text.krhino_init)
<li><a href="#[9f4]">krhino_sem_del</a> from k_sem.o(.text.krhino_sem_del) referenced from src_adapter_rhino_aos_rhino.o(.text.aos_sem_free)
<li><a href="#[9f7]">krhino_sem_give</a> from k_sem.o(.text.krhino_sem_give) referenced from k_task.o(.text.krhino_task_dyn_del)
<li><a href="#[9f9]">krhino_sem_take</a> from k_sem.o(.text.krhino_sem_take) referenced from src_adapter_rhino_aos_rhino.o(.text.aos_sem_wait)
<li><a href="#[9fc]">krhino_init</a> from k_sys.o(.text.krhino_init) referenced from src_adapter_rhino_aos_rhino.o(.text.aos_init)
<li><a href="#[9fd]">krhino_start</a> from k_sys.o(.text.krhino_start) referenced from src_adapter_rhino_aos_rhino.o(.text.aos_start)
<li><a href="#[9fe]">krhino_intrpt_enter</a> from k_sys.o(.text.krhino_intrpt_enter) referenced from csi_drivers_isr.o(.text.CORET_IRQHandler)
<li><a href="#[9ff]">krhino_intrpt_exit</a> from k_sys.o(.text.krhino_intrpt_exit) referenced from csi_drivers_isr.o(.text.CORET_IRQHandler)
<li><a href="#[a03]">task_mutex_free.isra.3</a> from k_task.o(.text.task_mutex_free.isra.3) referenced from k_task.o(.text.krhino_task_del)
<li><a href="#[a04]">task_create.isra.0.part.1.constprop.10</a> from k_task.o(.text.task_create.isra.0.part.1.constprop.10) referenced from k_task.o(.text.krhino_task_create)
<li><a href="#[a05]">krhino_task_create</a> from k_task.o(.text.krhino_task_create) referenced from k_sys.o(.text.krhino_init)
<li><a href="#[a06]">krhino_task_dyn_create</a> from k_task.o(.text.krhino_task_dyn_create) referenced from src_adapter_rhino_aos_rhino.o(.text.aos_task_new_ext)
<li><a href="#[a07]">krhino_task_sleep</a> from k_task.o(.text.krhino_task_sleep) referenced from src_adapter_rhino_aos_rhino.o(.text.aos_msleep)
<li><a href="#[a09]">krhino_cur_task_get</a> from k_task.o(.text.krhino_cur_task_get) referenced from k_task.o(.text.krhino_task_deathbed)
<li><a href="#[a0f]">task_pri_change</a> from k_task.o(.text.task_pri_change) referenced from k_mutex.o(.text.mutex_release.isra.1)
<li><a href="#[a12]">krhino_task_del</a> from k_task.o(.text.krhino_task_del) referenced from k_task.o(.text.krhino_task_deathbed)
<li><a href="#[a13]">krhino_task_dyn_del</a> from k_task.o(.text.krhino_task_dyn_del) referenced from k_task.o(.text.krhino_task_deathbed)
<li><a href="#[a22]">klist_rm_init</a> from k_tick.o(.text.klist_rm_init) referenced from k_tick.o(.text.tick_list_rm)
<li><a href="#[a23]">tick_list_init</a> from k_tick.o(.text.tick_list_init) referenced from k_sys.o(.text.krhino_init)
<li><a href="#[a24]">tick_list_insert</a> from k_tick.o(.text.tick_list_insert) referenced from k_pend.o(.text.pend_to_blk_obj)
<li><a href="#[a25]">tick_list_rm</a> from k_tick.o(.text.tick_list_rm) referenced from k_pend.o(.text.pend_task_wakeup)
<li><a href="#[a26]">tick_list_update</a> from k_tick.o(.text.tick_list_update) referenced from k_time.o(.text.krhino_tick_proc)
<li><a href="#[a27]">krhino_tick_proc</a> from k_time.o(.text.krhino_tick_proc) referenced from csi_drivers_isr.o(.text.CORET_IRQHandler)
<li><a href="#[a28]">krhino_sys_tick_get</a> from k_time.o(.text.krhino_sys_tick_get) referenced from k_timer.o(.text.timer_task)
<li><a href="#[a29]">krhino_sys_time_get</a> from k_time.o(.text.krhino_sys_time_get) referenced from src_adapter_rhino_aos_rhino.o(.text.aos_now_ms)
<li><a href="#[a2a]">krhino_ms_to_ticks</a> from k_time.o(.text.krhino_ms_to_ticks) referenced from bt_host_port_aos_aos_port.o(.text.k_mutex_lock)
<li><a href="#[a2c]">timer_list_pri_insert.constprop.3</a> from k_timer.o(.text.timer_list_pri_insert.constprop.3) referenced from k_timer.o(.text.cmd_proc)
<li><a href="#[a2d]">cmd_proc</a> from k_timer.o(.text.cmd_proc) referenced from k_timer.o(.text.timer_cmd_proc)
<li><a href="#[a2e]">timer_cmd_proc</a> from k_timer.o(.text.timer_cmd_proc) referenced from k_timer.o(.text.timer_task)
<li><a href="#[a2f]">timer_cb_proc</a> from k_timer.o(.text.timer_cb_proc) referenced from k_timer.o(.text.timer_task)
<li><a href="#[a32]">krhino_timer_dyn_del</a> from k_timer.o(.text.krhino_timer_dyn_del) referenced from src_adapter_rhino_aos_rhino.o(.text.aos_timer_free)
<li><a href="#[a33]">krhino_timer_start</a> from k_timer.o(.text.krhino_timer_start) referenced from bt_host_port_aos_aos_port.o(.text.k_timer_start)
<li><a href="#[a34]">krhino_timer_dyn_create</a> from k_timer.o(.text.krhino_timer_dyn_create) referenced from src_adapter_rhino_aos_rhino.o(.text.aos_timer_new_ext)
<li><a href="#[a35]">krhino_timer_create</a> from k_timer.o(.text.krhino_timer_create) referenced from bt_host_port_aos_aos_port.o(.text.k_timer_init)
<li><a href="#[a36]">krhino_timer_stop</a> from k_timer.o(.text.krhino_timer_stop) referenced from bt_host_port_aos_aos_port.o(.text.k_timer_start)
<li><a href="#[a37]">krhino_timer_change</a> from k_timer.o(.text.krhino_timer_change) referenced from bt_host_port_aos_aos_port.o(.text.k_timer_start)
<li><a href="#[a3a]">ktimer_init</a> from k_timer.o(.text.ktimer_init) referenced from k_sys.o(.text.krhino_init)
<li><a href="#[a3d]">cpu_task_stack_init</a> from src_csky_802_port_c.o(.text.cpu_task_stack_init) referenced from k_task.o(.text.task_create.isra.0.part.1.constprop.10)
<li><a href="#[a3e]">cpu_intrpt_save</a> from src_csky_802_port_s.o(.text) referenced from bt_host_port_aos_aos_port.o(.text.irq_lock)
<li><a href="#[a45]">cpu_intrpt_restore</a> from src_csky_802_port_s.o(.text) referenced from bt_host_port_aos_aos_port.o(.text.irq_unlock)
<li><a href="#[a63]">__divsi3</a> from _divsi3.o(.text) referenced from system.o(.text.SystemInit)
<li><a href="#[a65]">__udivsi3</a> from _udivsi3.o(.text) referenced from Obj/src_dfu_port.o(.text.erase_dfu_flash)
<li><a href="#[a66]">__modsi3</a> from _modsi3.o(.text) referenced from src_dut_utility.o(.text.str2_char)
<li><a href="#[a68]">__umodsi3</a> from _umodsi3.o(.text) referenced from hci_tl.o(.text.adv_scan_timer)
<li><a href="#[a6b]">___gnu_csky_case_uqi</a> from _csky_case_uqi.o(.text) referenced from h5.o(.text.hci_h5_receive_msg)
<li><a href="#[a6e]">__muldi3</a> from _muldi3.o(.text) referenced from k_time.o(.text.krhino_sys_time_get)
<li><a href="#[a70]">__divdi3</a> from _divdi3.o(.text) referenced from ulog_utility.o(.text.ulog_format_time)
<li><a href="#[a71]">__moddi3</a> from _moddi3.o(.text) referenced from ulog_utility.o(.text.ulog_format_time)
<li><a href="#[a72]">__udivdi3</a> from _udivdi3.o(.text) referenced from __v2_printfDFHLlMOPpSSsWp.o(.text)
<li><a href="#[a7d]">__muldf3</a> from _mul_df.o(.text) referenced from __dtostr.o(.text)
<li><a href="#[a7e]">__floatsidf</a> from _si_to_df.o(.text) referenced from __dtostr.o(.text)
<li><a href="#[a80]">__truncdfsf2</a> from _df_to_sf.o(.text) referenced from __v2_scanf-int-ll-str-fp.o(.text)
<li><a href="#[a81]">__pack_f</a> from _pack_sf.o(.text) referenced from _make_sf.o(.text)
<li><a href="#[a84]">__make_fp</a> from _make_sf.o(.text) referenced from _df_to_sf.o(.text)
<li><a href="#[a85]">__pack_d</a> from _pack_df.o(.text) referenced from _mul_df.o(.text)
<li><a href="#[a86]">__unpack_d</a> from _unpack_df.o(.text) referenced from _mul_df.o(.text)
<li><a href="#[24]">os_critical_enter</a> from critical.o(.text) referenced from vprintf_required.o(.text)
<li><a href="#[25]">os_critical_exit</a> from critical.o(.text) referenced from vprintf_required.o(.text)
<li><a href="#[a99]">printf</a> from printf.o(.text) referenced from Obj/src_ais_ota_client.o(.text.ble_ota_handle_version_request)
<li><a href="#[a9c]">vprintf</a> from vprintf.o(.text) referenced from ulog.o(.text.ulog)
<li><a href="#[a9f]">vsnprintf</a> from vsnprintf.o(.text) referenced from libc_stdio_vasprintf.o(.text.vasprintf)
<li><a href="#[aa1]">sprintf</a> from sprintf.o(.text) referenced from libc_string_strerror.o(.text.strerror)
<li><a href="#[aa4]">__cskyvprintfvprintf</a> from vprintf_required.o(.text) referenced from printf.o(.text)
<li><a href="#[aa6]">sscanf</a> from sscanf.o(.text) referenced from Obj/src_ble_version.o(.text.ble_version_appver_get)
<li><a href="#[aaa]">fflush</a> from fflush.o(.text) referenced from ulog.o(.text.ulog)
<li><a href="#[aac]">snprintf</a> from snprintf.o(.text) referenced from ulog_utility.o(.text.ulog_format_time)
<li><a href="#[aae]">__cskyvprintfvsnprintf</a> from vsnprintf_required.o(.text) referenced from snprintf.o(.text)
<li><a href="#[ab0]">rand</a> from rand.o(.text) referenced from src_devices_device.o(.text.driver_register)
<li><a href="#[ab3]">atoi</a> from atoi.o(.text) referenced from src_ble_dut_cmd.o(.text.dut_cmd_tx_single_tone)
<li><a href="#[ab5]">strcmp</a> from strcmp_fast.o(.text) referenced from src_dut_main.o(.text.cmd_parse_func.part.0)
<li><a href="#[ab7]">memset</a> from memset_fast.o(.text) referenced from h5.o(.text.hci_h5_int_init)
<li><a href="#[abb]">strlen</a> from strlen_fast.o(.text) referenced from __v2_printfDFHLlMOPpSSsWp.o(.text)
<li><a href="#[abd]">strcpy</a> from strcpy_fast.o(.text) referenced from __v2_printfDFHLlMOPpSSsWp.o(.text)
<li><a href="#[ac3]">strchr</a> from strchr.o(.text) referenced from __v2_printfDFHLlMOPpSSsWp.o(.text)
<li><a href="#[ac7]">memcmp</a> from memcmp_fast.o(.text) referenced from h5.o(.text.h5_complete_rx_pkt.constprop.11)
<li><a href="#[ac9]">strrchr</a> from strrchr.o(.text) referenced from src_dut_main.o(.text.dut_test_at.constprop.1)
<li><a href="#[acb]">strncmp</a> from strncmp.o(.text) referenced from mtb_mtbv.o(.text.get_section_addr)
<li><a href="#[ace]">__cskyvprintfvsprintf</a> from vsprintf_required.o(.text) referenced from sprintf.o(.text)
<li><a href="#[ad1]">__cskyvscanfvsscanf</a> from vsscanf_required.o(.text) referenced from sscanf.o(.text)
<li><a href="#[ad2]">PAD.1851</a> from __v2_printfDFHLlMOPpSSsWp.o(.text) referenced from __v2_printfDFHLlMOPpSSsWp.o(.text)
<li><a href="#[ad3]">__v2_printf</a> from __v2_printfDFHLlMOPpSSsWp.o(.text) referenced from vprintf.o(.text)
<li><a href="#[ad5]">__v2_scanf</a> from __v2_scanf-int-ll-str-fp.o(.text) referenced from vsscanf_required.o(.text)
<li><a href="#[ad7]">__umoddi3</a> from _umoddi3.o(.text) referenced from __v2_printfDFHLlMOPpSSsWp.o(.text)
<li><a href="#[ad8]">_fpadd_parts</a> from _addsub_df.o(.text) referenced from _addsub_df.o(.text)
<li><a href="#[ad9]">__adddf3</a> from _addsub_df.o(.text) referenced from __dtostr.o(.text)
<li><a href="#[ada]">__subdf3</a> from _addsub_df.o(.text) referenced from __dtostr.o(.text)
<li><a href="#[adb]">__divdf3</a> from _div_df.o(.text) referenced from __dtostr.o(.text)
<li><a href="#[add]">isdigit</a> from isdigit.o(.text) referenced from __v2_scanf-int-ll-str-fp.o(.text)
<li><a href="#[adf]">isspace</a> from isspace.o(.text) referenced from __v2_scanf-int-ll-str-fp.o(.text)
<li><a href="#[ae0]">copystring</a> from __dtostr.o(.text) referenced from __dtostr.o(.text)
<li><a href="#[ae1]">__GI___dtostr</a> from __dtostr.o(.text) referenced from __dtostr.o(.text)
<li><a href="#[ae2]">__dtostr</a> from __dtostr.o(.text) referenced from __v2_printfDFHLlMOPpSSsWp.o(.text)
<li><a href="#[ae3]">__isnan</a> from __isnan.o(.text) referenced from __dtostr.o(.text)
<li><a href="#[ae4]">__isinf</a> from __isinf.o(.text) referenced from __dtostr.o(.text)
<li><a href="#[ae5]">__eqdf2</a> from _eq_df.o(.text) referenced from __dtostr.o(.text)
<li><a href="#[ae6]">__gtdf2</a> from _gt_df.o(.text) referenced from __dtostr.o(.text)
<li><a href="#[ae7]">__ltdf2</a> from _lt_df.o(.text) referenced from __dtostr.o(.text)
<li><a href="#[ae8]">__fixdfsi</a> from _df_to_si.o(.text) referenced from __dtostr.o(.text)
<li><a href="#[ae9]">__fpcmp_parts_d</a> from _fpcmp_parts_df.o(.text) referenced from _eq_df.o(.text)
</ul>
<h3>Global Symbols</h3>
<p><strong><a name="[0]"></a>ble_ota_is_ready</strong>(16 bytes, Stack size 0 btyes, Obj/src_ais_ota_client.o(.text.ble_ota_is_ready))<br>
<p><strong><a name="[1]"></a>ble_ota_get_indication</strong>(4 bytes, Stack size 0 btyes, Obj/src_ais_ota_client.o(.text.ble_ota_get_indication))<br>
<p><strong><a name="[2]"></a>ble_ota_status_report</strong>(76 bytes, Stack size 20 btyes, Obj/src_ais_ota_client.o(.text.ble_ota_status_report))<br>
<br>[Stack]<ul><li>Max Depth = 92 
<li>Call Chain = ble_ota_status_report &rArr; ble_ais_notify &rArr; HCI_CommandCompleteEvent1  &rArr; HCI_H5_Send  </ul>
<br>[Calls]<ul>
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ais_notify
</ul>
<br>[Called By]<ul>
<li><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_parse_pdu
<li><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_update_timer_cb
</ul>
<p><strong><a name="[3]"></a>ble_ota_handle_version_request</strong>(112 bytes, Stack size 28 btyes, Obj/src_ais_ota_client.o(.text.ble_ota_handle_version_request))<br>
<br>[Stack]<ul><li>Max Depth = 172 
<li>Call Chain = ble_ota_handle_version_request &rArr; ble_version_appver_get &rArr; ulog  &rArr; log_get_mutex  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_version_appver_get
<li><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ais_state_get
<li><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ais_notify
</ul>
<br>[Called By]<ul>
<li><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ble_ais_service_write
</ul>
<p><strong><a name="[4]"></a>ble_ota_handle_update_request</strong>(336 bytes, Stack size 52 btyes, Obj/src_ais_ota_client.o(.text.ble_ota_handle_update_request))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = ble_ota_handle_update_request &rArr; ble_version_appver_get &rArr; ulog  &rArr; log_get_mutex  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog
<li><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ais_notify
<li><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_version_appver_get
<li><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_get_ota_partition_max_size
<li><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ais_state_set
<li><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ais_state_get
<li><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</ul>
<br>[Called By]<ul>
<li><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ble_ais_service_write
</ul>
<p><strong><a name="[5]"></a>ble_ota_parse_pdu</strong>(308 bytes, Stack size 36 btyes, Obj/src_ais_ota_client.o(.text.ble_ota_parse_pdu))<br>
<br>[Stack]<ul><li>Max Depth = 180 
<li>Call Chain = ble_ota_parse_pdu &rArr; dfu_image_update &rArr; ulog  &rArr; log_get_mutex  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog
<li><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_status_report
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_image_update
</ul>
<br>[Called By]<ul>
<li><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ble_ais_service_write
</ul>
<p><strong><a name="[6]"></a>ble_ota_check_firmware</strong>(192 bytes, Stack size 36 btyes, Obj/src_ais_ota_client.o(.text.ble_ota_check_firmware))<br>
<br>[Stack]<ul><li>Max Depth = 156 
<li>Call Chain = ble_ota_check_firmware &rArr; ulog &rArr; log_get_mutex  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ais_state_set
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_check_checksum
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog
<li><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ais_notify
</ul>
<br>[Called By]<ul>
<li><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ble_ais_service_write
</ul>
<p><strong><a name="[7]"></a>ble_ota_is_updating</strong>(20 bytes, Stack size 0 btyes, Obj/src_ais_ota_client.o(.text.ble_ota_is_updating))<br>
<p><strong><a name="[8]"></a>ble_ota_report_version</strong>(4 bytes, Stack size 0 btyes, Obj/src_ais_ota_client.o(.text.ble_ota_report_version))<br>
<p><strong><a name="[9]"></a>ble_ota_client_init</strong>(56 bytes, Stack size 0 btyes, Obj/src_ais_ota_client.o(.text.ble_ota_client_init))<br>
<p><strong><a name="[d]"></a>ble_ais_notify</strong>(144 bytes, Stack size 44 btyes, Obj/src_ais_server.o(.text.ble_ais_notify))<br>
<br>[Stack]<ul><li>Max Depth = 72 
<li>Call Chain = ble_ais_notify &rArr; HCI_CommandCompleteEvent1 &rArr; HCI_H5_Send  </ul>
<br>[Calls]<ul>
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteEvent1
</ul>
<br>[Called By]<ul>
<li><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_status_report
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_handle_version_request
<li><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_handle_update_request
<li><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_check_firmware
</ul>
<p><strong><a name="[e]"></a>ble_ais_disconnect</strong>(116 bytes, Stack size 0 btyes, Obj/src_ais_server.o(.text.ble_ais_disconnect))<br>
<p><strong><a name="[f]"></a>_ble_ais_service_write</strong>(440 bytes, Stack size 40 btyes, Obj/src_ais_server.o(.text._ble_ais_service_write))<br>
<br>[Stack]<ul><li>Max Depth = 236 
<li>Call Chain = _ble_ais_service_write &rArr; ble_ota_handle_update_request &rArr; ble_version_appver_get  &rArr; ulog  &rArr; log_get_mutex  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hex_real
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog
<li><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ais_state_update
<li><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_handle_update_request
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_handle_version_request
<li><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_parse_pdu
<li><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_check_firmware
</ul>
<br>[Called By]<ul>
<li><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciExtSwUpgrade
</ul>
<p><strong><a name="[10]"></a>ble_ais_state_set</strong>(12 bytes, Stack size 0 btyes, Obj/src_ais_server.o(.text.ble_ais_state_set))<br>
<br>[Called By]<ul>
<li><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_handle_update_request
<li><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_check_firmware
</ul>
<p><strong><a name="[11]"></a>ble_ais_state_get</strong>(12 bytes, Stack size 0 btyes, Obj/src_ais_server.o(.text.ble_ais_state_get))<br>
<br>[Called By]<ul>
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_handle_version_request
<li><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_handle_update_request
</ul>
<p><strong><a name="[12]"></a>ble_ais_server_init</strong>(56 bytes, Stack size 8 btyes, Obj/src_ais_server.o(.text.ble_ais_server_init))<br>
<br>[Stack]<ul><li>Max Depth = 152 
<li>Call Chain = ble_ais_server_init &rArr; k_timer_init &rArr; krhino_timer_create  &rArr; krhino_timer_start  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_init
</ul>
<br>[Called By]<ul>
<li><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</ul>
<p><strong><a name="[13]"></a>ble_version_appver_get</strong>(104 bytes, Stack size 24 btyes, Obj/src_ble_version.o(.text.ble_version_appver_get))<br>
<br>[Stack]<ul><li>Max Depth = 144 
<li>Call Chain = ble_version_appver_get &rArr; ulog &rArr; log_get_mutex  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_get_app_version
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog
<li><a href="#[aa6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</ul>
<br>[Called By]<ul>
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_handle_version_request
<li><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_handle_update_request
</ul>
<p><strong><a name="[14]"></a>ble_version_sysver_get</strong>(8 bytes, Stack size 0 btyes, Obj/src_ble_version.o(.text.ble_version_sysver_get))<br>
<p><strong><a name="[15]"></a>hex_dump</strong>(72 bytes, Stack size 0 btyes, Obj/src_dfu_port.o(.text.hex_dump))<br>
<p><strong><a name="[16]"></a>dfu_image_read</strong>(128 bytes, Stack size 0 btyes, Obj/src_dfu_port.o(.text.dfu_image_read))<br>
<p><strong><a name="[17]"></a>lock_flash</strong>(2 bytes, Stack size 0 btyes, Obj/src_dfu_port.o(.text.lock_flash))<br>
<p><strong><a name="[18]"></a>unlock_flash_all</strong>(2 bytes, Stack size 0 btyes, Obj/src_dfu_port.o(.text.unlock_flash_all))<br>
<p><strong><a name="[19]"></a>dfu_image_update</strong>(160 bytes, Stack size 24 btyes, Obj/src_dfu_port.o(.text.dfu_image_update))<br>
<br>[Stack]<ul><li>Max Depth = 144 
<li>Call Chain = dfu_image_update &rArr; ulog &rArr; log_get_mutex  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;util_crc16_ccitt
<li><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_open
<li><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_info_get
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog
<li><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_write
<li><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_close
</ul>
<br>[Called By]<ul>
<li><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_parse_pdu
</ul>
<p><strong><a name="[1a]"></a>dfu_check_checksum</strong>(16 bytes, Stack size 0 btyes, Obj/src_dfu_port.o(.text.dfu_check_checksum))<br>
<br>[Called By]<ul>
<li><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_check_firmware
</ul>
<p><strong><a name="[1b]"></a>dfu_reboot</strong>(8 bytes, Stack size 4 btyes, Obj/src_dfu_port.o(.text.dfu_reboot))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = dfu_reboot &rArr; drv_reboot </ul>
<br>[Calls]<ul>
<li><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_reboot
</ul>
<br>[Called By]<ul>
<li><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_update_timer_cb
</ul>
<p><strong><a name="[1c]"></a>erase_dfu_flash</strong>(252 bytes, Stack size 84 btyes, Obj/src_dfu_port.o(.text.erase_dfu_flash))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = erase_dfu_flash &rArr; ulog &rArr; log_get_mutex  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_open
<li><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_info_get
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog
<li><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_read
<li><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivsi3
<li><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_erase
<li><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_close
</ul>
<br>[Called By]<ul>
<li><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</ul>
<p><strong><a name="[1d]"></a>dfu_get_ota_partition_max_size</strong>(112 bytes, Stack size 16 btyes, Obj/src_dfu_port.o(.text.dfu_get_ota_partition_max_size))<br>
<br>[Stack]<ul><li>Max Depth = 136 
<li>Call Chain = dfu_get_ota_partition_max_size &rArr; ulog &rArr; log_get_mutex  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_open
<li><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_info_get
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog
</ul>
<br>[Called By]<ul>
<li><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_handle_update_request
</ul>
<p><strong><a name="[1e]"></a>sal_ota_is_allow_reboot</strong>(4 bytes, Stack size 0 btyes, Obj/src_dfu_port.o(.text.sal_ota_is_allow_reboot))<br>
<p><strong><a name="[1f]"></a>util_crc16_compute</strong>(64 bytes, Stack size 0 btyes, Obj/crc_crc16.o(.text.util_crc16_compute))<br>
<p><strong><a name="[20]"></a>util_crc16_ccitt</strong>(66 bytes, Stack size 16 btyes, Obj/crc_crc16.o(.text.util_crc16_ccitt))<br>
<br>[Called By]<ul>
<li><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_image_update
</ul>
<p><strong><a name="[21]"></a>util_crc32_compute</strong>(68 bytes, Stack size 0 btyes, Obj/crc_crc32.o(.text.util_crc32_compute))<br>
<p><strong><a name="[22]"></a>main</strong>(76 bytes, Stack size 12 btyes, Obj/src_app_main.o(.text.startup.main))<br>
<br>[Stack]<ul><li>Max Depth = 912 
<li>Call Chain = main &rArr; board_yoc_init &rArr; dut_task_entry  &rArr; dut_test_at.constprop.1  &rArr; cmd_parse_func.part.0  &rArr; dut_at_send  &rArr; dut_sendv  &rArr; vasprintf  &rArr; strdup  &rArr; malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_yoc_init
<li><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_get_app_version
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog
<li><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_dfu_flash
<li><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ais_server_init
<li><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_uart_loop
</ul>
<br>[Called By]<ul>
<li><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_task_entry
</ul>
<p><strong><a name="[23]"></a>fputstr</strong>(28 bytes, Stack size 4 btyes, Obj/init_init.o(.text.fputstr))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = fputstr &rArr; csi_usart_send &rArr; csi_usart_putchar  </ul>
<br>[Calls]<ul>
<li><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_send
</ul>
<p><strong><a name="[24]"></a>os_critical_enter</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stdio_outs
</ul>
<p><strong><a name="[25]"></a>os_critical_exit</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stdio_outs
</ul>
<p><strong><a name="[26]"></a>hci_board_init</strong>(144 bytes, Stack size 44 btyes, Obj/init_init.o(.text.hci_board_init))<br>
<br>[Stack]<ul><li>Max Depth = 200 
<li>Call Chain = hci_board_init &rArr; bt_hci_uart_h5_register &rArr; driver_register  &rArr; device_find  &rArr; aos_mutex_new  &rArr; aos_malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pinmux_config
<li><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_csky_register
<li><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_config_default
<li><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_uart_h5_register
<li><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_initialize
<li><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_config
<li><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_h5_controller_interface
<li><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_scan_schd_init
<li><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init
</ul>
<br>[Called By]<ul>
<li><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_yoc_init
</ul>
<p><strong><a name="[27]"></a>board_yoc_init</strong>(236 bytes, Stack size 24 btyes, Obj/init_init.o(.text.board_yoc_init))<br>
<br>[Stack]<ul><li>Max Depth = 900 
<li>Call Chain = board_yoc_init &rArr; dut_task_entry &rArr; dut_test_at.constprop.1  &rArr; cmd_parse_func.part.0  &rArr; dut_at_send  &rArr; dut_sendv  &rArr; vasprintf  &rArr; strdup  &rArr; malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_gpio_read
<li><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_msleep
<li><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_gpio_pin_init
<li><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_gpio_fmux_set
<li><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pinmux_config
<li><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_service_init
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog
<li><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_ble_default_cmds_reg
<li><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_task_entry
<li><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_board_init
<li><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_init
<li><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_init
<li><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_set_log_level
</ul>
<br>[Called By]<ul>
<li><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</ul>
<p><strong><a name="[28]"></a>aos_task_wdt_feed</strong>(2 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_task_wdt_feed))<br>
<p><strong><a name="[29]"></a>aos_task_exit</strong>(10 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_task_exit))<br>
<br>[Stack]<ul><li>Max Depth = 68 
<li>Call Chain = aos_task_exit &rArr; krhino_task_dyn_del &rArr; krhino_sem_give  &rArr; sem_give  &rArr; pend_task_wakeup  &rArr; ready_list_add  &rArr; _ready_list_add_tail  &rArr; ready_list_init  </ul>
<br>[Calls]<ul>
<li><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
</ul>
<br>[Called By]<ul>
<li><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;application_task_entry
</ul>
<p><strong><a name="[2a]"></a>aos_task_self</strong>(8 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_task_self))<br>
<p><strong><a name="[2b]"></a>aos_task_name</strong>(10 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_task_name))<br>
<p><strong><a name="[2c]"></a>aos_task_get_name</strong>(6 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_task_get_name))<br>
<p><strong><a name="[2d]"></a>aos_task_key_create</strong>(52 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_task_key_create))<br>
<p><strong><a name="[2e]"></a>aos_task_key_delete</strong>(24 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_task_key_delete))<br>
<p><strong><a name="[2f]"></a>aos_mutex_lock</strong>(88 bytes, Stack size 12 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_mutex_lock))<br>
<br>[Stack]<ul><li>Max Depth = 76 
<li>Call Chain = aos_mutex_lock &rArr; krhino_mutex_lock &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_except_process
<li><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<li><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhino2stderrno
<li><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
</ul>
<br>[Called By]<ul>
<li><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_enqueue
<li><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_retransfer_signal_event
<li><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ready_cb_thread
<li><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wait_controller_baudrate_ready_timeout_handler
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wake_up
<li><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_complete_rx_pkt.constprop.11
<li><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_get_mutex
<li><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_parse_func.part.0
<li><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_service_cmd_reg
<li><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbQueueTail
<li><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbQueueHead
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbDequeueTail
<li><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbDequeueHead
<li><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbEmptyQueue
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_lock
<li><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_find
<li><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_register
</ul>
<p><strong><a name="[30]"></a>aos_mutex_unlock</strong>(56 bytes, Stack size 8 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_mutex_unlock))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = aos_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release.isra.1  &rArr; task_pri_change  &rArr; ready_list_rm  &rArr; k_err_proc_debug  </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_except_process
<li><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<li><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhino2stderrno
</ul>
<br>[Called By]<ul>
<li><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_enqueue
<li><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_retransfer_signal_event
<li><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ready_cb_thread
<li><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wait_controller_baudrate_ready_timeout_handler
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wake_up
<li><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_complete_rx_pkt.constprop.11
<li><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_release_mutex
<li><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_parse_func.part.0
<li><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_service_cmd_reg
<li><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbQueueTail
<li><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbQueueHead
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbDequeueTail
<li><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbDequeueHead
<li><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbEmptyQueue
<li><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_unlock
<li><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_find
<li><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_register
</ul>
<p><strong><a name="[31]"></a>aos_mutex_is_valid</strong>(22 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_mutex_is_valid))<br>
<br>[Called By]<ul>
<li><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_find
<li><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_register
</ul>
<p><strong><a name="[34]"></a>aos_get_hz</strong>(6 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_get_hz))<br>
<p><strong><a name="[35]"></a>aos_version_get</strong>(8 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_version_get))<br>
<p><strong><a name="[36]"></a>aos_task_new</strong>(84 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_task_new))<br>
<p><strong><a name="[37]"></a>aos_task_new_ext</strong>(92 bytes, Stack size 40 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_task_new_ext))<br>
<br>[Stack]<ul><li>Max Depth = 180 
<li>Call Chain = aos_task_new_ext &rArr; krhino_task_dyn_create &rArr; task_create.isra.0.part.1.constprop.10  &rArr; ready_list_add_tail  &rArr; _ready_list_add_tail  &rArr; ready_list_init  </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_except_process
<li><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_create
<li><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhino2stderrno
</ul>
<br>[Called By]<ul>
<li><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_int_init
<li><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
</ul>
<p><strong><a name="[38]"></a>debug_task_find</strong>(4 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.debug_task_find))<br>
<p><strong><a name="[39]"></a>aos_task_wdt_attach</strong>(2 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_task_wdt_attach))<br>
<p><strong><a name="[3a]"></a>aos_task_wdt_detach</strong>(2 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_task_wdt_detach))<br>
<p><strong><a name="[3b]"></a>aos_sem_wait</strong>(88 bytes, Stack size 12 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_sem_wait))<br>
<br>[Stack]<ul><li>Max Depth = 76 
<li>Call Chain = aos_sem_wait &rArr; krhino_sem_take &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_except_process
<li><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<li><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhino2stderrno
<li><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
</ul>
<br>[Called By]<ul>
<li><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ready_cb_thread
<li><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_retransfer_thread
<li><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv_II
</ul>
<p><strong><a name="[3c]"></a>aos_sem_signal</strong>(48 bytes, Stack size 8 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_sem_signal))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = aos_sem_signal &rArr; krhino_sem_give &rArr; sem_give  &rArr; pend_task_wakeup  &rArr; ready_list_add  &rArr; _ready_list_add_tail  &rArr; ready_list_init  </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_except_process
<li><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give
</ul>
<br>[Called By]<ul>
<li><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_retransfer_signal_event
<li><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wait_controller_baudrate_ready_timeout_handler
<li><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_complete_rx_pkt.constprop.11
<li><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_cb
</ul>
<p><strong><a name="[3d]"></a>aos_sem_signal_all</strong>(48 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_sem_signal_all))<br>
<p><strong><a name="[3e]"></a>aos_sem_is_valid</strong>(22 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_sem_is_valid))<br>
<p><strong><a name="[3f]"></a>aos_event_new</strong>(56 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_event_new))<br>
<p><strong><a name="[40]"></a>aos_event_free</strong>(52 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_event_free))<br>
<p><strong><a name="[41]"></a>aos_event_get</strong>(104 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_event_get))<br>
<p><strong><a name="[42]"></a>aos_event_set</strong>(56 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_event_set))<br>
<p><strong><a name="[43]"></a>aos_event_is_valid</strong>(22 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_event_is_valid))<br>
<p><strong><a name="[44]"></a>aos_queue_send</strong>(64 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_queue_send))<br>
<p><strong><a name="[45]"></a>aos_queue_recv</strong>(108 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_queue_recv))<br>
<p><strong><a name="[46]"></a>aos_queue_is_valid</strong>(22 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_queue_is_valid))<br>
<p><strong><a name="[47]"></a>aos_queue_buf_ptr</strong>(22 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_queue_buf_ptr))<br>
<p><strong><a name="[48]"></a>aos_queue_get_count</strong>(64 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_queue_get_count))<br>
<p><strong><a name="[49]"></a>aos_timer_new</strong>(116 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_timer_new))<br>
<p><strong><a name="[4a]"></a>aos_timer_new_ext</strong>(120 bytes, Stack size 52 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_timer_new_ext))<br>
<br>[Stack]<ul><li>Max Depth = 176 
<li>Call Chain = aos_timer_new_ext &rArr; krhino_timer_dyn_create &rArr; krhino_timer_start  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_except_process
<li><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<li><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_dyn_create
<li><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhino2stderrno
</ul>
<br>[Called By]<ul>
<li><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsAllocateTimer
</ul>
<p><strong><a name="[4b]"></a>aos_timer_free</strong>(52 bytes, Stack size 12 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_timer_free))<br>
<br>[Stack]<ul><li>Max Depth = 88 
<li>Call Chain = aos_timer_free &rArr; krhino_timer_dyn_del &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_except_process
<li><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_dyn_del
</ul>
<br>[Called By]<ul>
<li><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_cleanup
</ul>
<p><strong><a name="[4c]"></a>aos_timer_start</strong>(56 bytes, Stack size 8 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_timer_start))<br>
<br>[Stack]<ul><li>Max Depth = 84 
<li>Call Chain = aos_timer_start &rArr; krhino_timer_start &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_except_process
<li><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_start
<li><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhino2stderrno
</ul>
<br>[Called By]<ul>
<li><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsStartTimer
</ul>
<p><strong><a name="[4d]"></a>aos_timer_stop</strong>(56 bytes, Stack size 8 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_timer_stop))<br>
<br>[Stack]<ul><li>Max Depth = 84 
<li>Call Chain = aos_timer_stop &rArr; krhino_timer_stop &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_except_process
<li><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_stop
<li><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhino2stderrno
</ul>
<br>[Called By]<ul>
<li><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsStartTimer
<li><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_complete_rx_pkt.constprop.11
<li><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_sync_retrans_timeout_handler
<li><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_conf_retrans_timeout_handler
<li><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_cmd
</ul>
<p><strong><a name="[4e]"></a>aos_timer_change</strong>(92 bytes, Stack size 28 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_timer_change))<br>
<br>[Stack]<ul><li>Max Depth = 112 
<li>Call Chain = aos_timer_change &rArr; krhino_timer_change &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_except_process
<li><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<li><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_change
<li><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhino2stderrno
</ul>
<br>[Called By]<ul>
<li><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsStartTimer
</ul>
<p><strong><a name="[4f]"></a>aos_timer_change_once</strong>(76 bytes, Stack size 12 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_timer_change_once))<br>
<br>[Stack]<ul><li>Max Depth = 96 
<li>Call Chain = aos_timer_change_once &rArr; krhino_timer_change &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_except_process
<li><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<li><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_change
<li><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhino2stderrno
</ul>
<br>[Called By]<ul>
<li><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsStartTimer
</ul>
<p><strong><a name="[50]"></a>aos_timer_is_valid</strong>(22 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_timer_is_valid))<br>
<br>[Called By]<ul>
<li><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsStartTimer
</ul>
<p><strong><a name="[51]"></a>aos_now</strong>(20 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_now))<br>
<p><strong><a name="[52]"></a>aos_now_ms</strong>(8 bytes, Stack size 4 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_now_ms))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = aos_now_ms &rArr; krhino_sys_time_get &rArr; __udivdi3  </ul>
<br>[Calls]<ul>
<li><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_time_get
</ul>
<br>[Called By]<ul>
<li><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_format_time
<li><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_start
<li><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv_II
</ul>
<p><strong><a name="[53]"></a>aos_msleep</strong>(14 bytes, Stack size 4 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_msleep))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = aos_msleep &rArr; krhino_ms_to_ticks &rArr; __udivdi3  </ul>
<br>[Calls]<ul>
<li><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<li><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
</ul>
<br>[Called By]<ul>
<li><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_yoc_init
</ul>
<p><strong><a name="[54]"></a>aos_init</strong>(24 bytes, Stack size 4 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_init))<br>
<br>[Stack]<ul><li>Max Depth = 184 
<li>Call Chain = aos_init &rArr; krhino_init &rArr; ktimer_init  &rArr; krhino_task_create  &rArr; task_create.isra.0.part.1.constprop.10  &rArr; ready_list_add_tail  &rArr; _ready_list_add_tail  &rArr; ready_list_init  </ul>
<br>[Calls]<ul>
<li><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</ul>
<br>[Called By]<ul>
<li><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
</ul>
<p><strong><a name="[55]"></a>aos_start</strong>(8 bytes, Stack size 4 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_start))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = aos_start &rArr; krhino_start </ul>
<br>[Calls]<ul>
<li><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_start
</ul>
<br>[Called By]<ul>
<li><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pre_main
</ul>
<p><strong><a name="[56]"></a>aos_kernel_intrpt_enter</strong>(18 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_kernel_intrpt_enter))<br>
<p><strong><a name="[57]"></a>aos_kernel_intrpt_exit</strong>(10 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_kernel_intrpt_exit))<br>
<p><strong><a name="[58]"></a>aos_get_mminfo</strong>(88 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_get_mminfo))<br>
<p><strong><a name="[59]"></a>aos_mm_dump</strong>(4 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_mm_dump))<br>
<p><strong><a name="[5a]"></a>aos_kernel_sched_suspend</strong>(20 bytes, Stack size 4 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_kernel_sched_suspend))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = aos_kernel_sched_suspend &rArr; krhino_sched_disable </ul>
<br>[Calls]<ul>
<li><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_disable
</ul>
<br>[Called By]<ul>
<li><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_malloc
<li><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_free
</ul>
<p><strong><a name="[5b]"></a>aos_kernel_sched_resume</strong>(20 bytes, Stack size 4 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_kernel_sched_resume))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = aos_kernel_sched_resume &rArr; krhino_sched_enable &rArr; core_sched  </ul>
<br>[Calls]<ul>
<li><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_malloc
<li><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_free
</ul>
<p><strong><a name="[5c]"></a>aos_task_yield</strong>(8 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_task_yield))<br>
<p><strong><a name="[5d]"></a>aos_reboot_ext</strong>(8 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_reboot_ext))<br>
<p><strong><a name="[5e]"></a>aos_reboot</strong>(10 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_reboot))<br>
<p><strong><a name="[5f]"></a>aos_kernel_tick2ms</strong>(4 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_kernel_tick2ms))<br>
<p><strong><a name="[60]"></a>aos_kernel_ms2tick</strong>(4 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_kernel_ms2tick))<br>
<p><strong><a name="[61]"></a>aos_kernel_suspend</strong>(52 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_kernel_suspend))<br>
<p><strong><a name="[62]"></a>aos_task_show_info</strong>(44 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_task_show_info))<br>
<p><strong><a name="[63]"></a>aos_freep</strong>(24 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_freep))<br>
<p><strong><a name="[64]"></a>aos_kernel_resume</strong>(14 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_kernel_resume))<br>
<p><strong><a name="[65]"></a>aos_irq_context</strong>(16 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_irq_context))<br>
<p><strong><a name="[66]"></a>yoc_malloc</strong>(24 bytes, Stack size 8 btyes, src_adapter_rhino_aos_rhino.o(.text.yoc_malloc))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = yoc_malloc &rArr; krhino_mm_alloc &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_sched_suspend
<li><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
<li><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_sched_resume
</ul>
<br>[Called By]<ul>
<li><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_zalloc
<li><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<li><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</ul>
<p><strong><a name="[67]"></a>yoc_realloc</strong>(28 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.yoc_realloc))<br>
<p><strong><a name="[68]"></a>yoc_free</strong>(20 bytes, Stack size 8 btyes, src_adapter_rhino_aos_rhino.o(.text.yoc_free))<br>
<br>[Stack]<ul><li>Max Depth = 56 
<li>Call Chain = yoc_free &rArr; krhino_mm_free &rArr; k_mm_free  &rArr; k_mm_smallblk_free  &rArr; krhino_mblk_free  </ul>
<br>[Calls]<ul>
<li><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_sched_suspend
<li><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
<li><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_sched_resume
</ul>
<br>[Called By]<ul>
<li><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<li><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<p><strong><a name="[69]"></a>aos_malloc_show</strong>(2 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_malloc_show))<br>
<p><strong><a name="[6a]"></a>aos_zalloc</strong>(28 bytes, Stack size 12 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_zalloc))<br>
<br>[Stack]<ul><li>Max Depth = 76 
<li>Call Chain = aos_zalloc &rArr; yoc_malloc &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_malloc
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_new
</ul>
<p><strong><a name="[6b]"></a>aos_malloc</strong>(10 bytes, Stack size 4 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_malloc))<br>
<br>[Stack]<ul><li>Max Depth = 68 
<li>Call Chain = aos_malloc &rArr; yoc_malloc &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_malloc
</ul>
<br>[Called By]<ul>
<li><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_service_cmd_reg
<li><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<li><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<li><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_mac_store
<li><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_freqoff_store
<li><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</ul>
<p><strong><a name="[6c]"></a>aos_calloc</strong>(10 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_calloc))<br>
<p><strong><a name="[6d]"></a>aos_realloc</strong>(10 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_realloc))<br>
<p><strong><a name="[6e]"></a>aos_zalloc_check</strong>(56 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_zalloc_check))<br>
<p><strong><a name="[6f]"></a>aos_malloc_check</strong>(44 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_malloc_check))<br>
<p><strong><a name="[70]"></a>aos_calloc_check</strong>(10 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_calloc_check))<br>
<p><strong><a name="[71]"></a>aos_realloc_check</strong>(44 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_realloc_check))<br>
<p><strong><a name="[72]"></a>aos_alloc_trace</strong>(2 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_alloc_trace))<br>
<p><strong><a name="[73]"></a>aos_free</strong>(14 bytes, Stack size 4 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_free))<br>
<br>[Stack]<ul><li>Max Depth = 60 
<li>Call Chain = aos_free &rArr; yoc_free &rArr; krhino_mm_free  &rArr; k_mm_free  &rArr; k_mm_smallblk_free  &rArr; krhino_mblk_free  </ul>
<br>[Calls]<ul>
<li><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_free
</ul>
<br>[Called By]<ul>
<li><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<li><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_free
<li><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<li><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_new
<li><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_free
<li><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_open
<li><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_mac_store
<li><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_freqoff_store
</ul>
<p><strong><a name="[74]"></a>aos_mutex_new</strong>(92 bytes, Stack size 16 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_mutex_new))<br>
<br>[Stack]<ul><li>Max Depth = 84 
<li>Call Chain = aos_mutex_new &rArr; aos_malloc &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_except_process
<li><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<li><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_create
<li><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<li><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhino2stderrno
</ul>
<br>[Called By]<ul>
<li><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_int_init
<li><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init_mutex
<li><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_service_init
<li><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbQueueInit
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_new
<li><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_find
<li><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_register
</ul>
<p><strong><a name="[75]"></a>aos_mutex_free</strong>(60 bytes, Stack size 12 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_mutex_free))<br>
<br>[Stack]<ul><li>Max Depth = 72 
<li>Call Chain = aos_mutex_free &rArr; aos_free &rArr; yoc_free  &rArr; krhino_mm_free  &rArr; k_mm_free  &rArr; k_mm_smallblk_free  &rArr; krhino_mblk_free  </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_except_process
<li><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<li><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</ul>
<br>[Called By]<ul>
<li><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_int_init
<li><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_cleanup
<li><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbQueueFree
<li><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_free
</ul>
<p><strong><a name="[76]"></a>aos_sem_new</strong>(96 bytes, Stack size 16 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_sem_new))<br>
<br>[Stack]<ul><li>Max Depth = 84 
<li>Call Chain = aos_sem_new &rArr; aos_malloc &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_except_process
<li><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<li><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_create
<li><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<li><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rhino2stderrno
</ul>
<br>[Called By]<ul>
<li><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_int_init
<li><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</ul>
<p><strong><a name="[77]"></a>aos_sem_free</strong>(60 bytes, Stack size 12 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_sem_free))<br>
<br>[Stack]<ul><li>Max Depth = 72 
<li>Call Chain = aos_sem_free &rArr; aos_free &rArr; yoc_free  &rArr; krhino_mm_free  &rArr; k_mm_free  &rArr; k_mm_smallblk_free  &rArr; krhino_mblk_free  </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_except_process
<li><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<li><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</ul>
<br>[Called By]<ul>
<li><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_int_init
<li><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_cleanup
</ul>
<p><strong><a name="[78]"></a>aos_queue_new</strong>(116 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_queue_new))<br>
<p><strong><a name="[79]"></a>aos_queue_free</strong>(60 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.aos_queue_free))<br>
<p><strong><a name="[7a]"></a>krhino_init_hook</strong>(44 bytes, Stack size 12 btyes, src_adapter_rhino_hook_impl.o(.text.krhino_init_hook))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = krhino_init_hook &rArr; k_err_proc_debug </ul>
<br>[Calls]<ul>
<li><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc_debug
</ul>
<br>[Called By]<ul>
<li><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</ul>
<p><strong><a name="[7b]"></a>krhino_start_hook</strong>(2 bytes, Stack size 0 btyes, src_adapter_rhino_hook_impl.o(.text.krhino_start_hook))<br>
<br>[Called By]<ul>
<li><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_start
</ul>
<p><strong><a name="[7c]"></a>krhino_task_create_hook</strong>(2 bytes, Stack size 0 btyes, src_adapter_rhino_hook_impl.o(.text.krhino_task_create_hook))<br>
<br>[Called By]<ul>
<li><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create.isra.0.part.1.constprop.10
</ul>
<p><strong><a name="[7d]"></a>krhino_task_del_hook</strong>(2 bytes, Stack size 0 btyes, src_adapter_rhino_hook_impl.o(.text.krhino_task_del_hook))<br>
<br>[Called By]<ul>
<li><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<li><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
</ul>
<p><strong><a name="[7e]"></a>krhino_task_abort_hook</strong>(2 bytes, Stack size 0 btyes, src_adapter_rhino_hook_impl.o(.text.krhino_task_abort_hook))<br>
<p><strong><a name="[7f]"></a>krhino_task_switch_hook</strong>(2 bytes, Stack size 0 btyes, src_adapter_rhino_hook_impl.o(.text.krhino_task_switch_hook))<br>
<br>[Called By]<ul>
<li><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</ul>
<p><strong><a name="[80]"></a>krhino_tick_hook</strong>(2 bytes, Stack size 0 btyes, src_adapter_rhino_hook_impl.o(.text.krhino_tick_hook))<br>
<br>[Called By]<ul>
<li><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_tick_proc
</ul>
<p><strong><a name="[81]"></a>krhino_idle_pre_hook</strong>(8 bytes, Stack size 4 btyes, src_adapter_rhino_hook_impl.o(.text.krhino_idle_pre_hook))<br>
<br>[Calls]<ul>
<li><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lpm_idle_pre_hook
</ul>
<br>[Called By]<ul>
<li><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_task
</ul>
<p><strong><a name="[82]"></a>_sleep_tick_get</strong>(52 bytes, Stack size 0 btyes, src_adapter_rhino_hook_impl.o(.text._sleep_tick_get))<br>
<p><strong><a name="[83]"></a>krhino_idle_hook</strong>(2 bytes, Stack size 4 btyes, board_init.o(.text.krhino_idle_hook))<br>
<br>[Called By]<ul>
<li><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_task
</ul>
<p><strong><a name="[84]"></a>krhino_intrpt_hook</strong>(2 bytes, Stack size 0 btyes, src_adapter_rhino_hook_impl.o(.text.krhino_intrpt_hook))<br>
<p><strong><a name="[85]"></a>krhino_mm_alloc_hook</strong>(2 bytes, Stack size 0 btyes, src_adapter_rhino_hook_impl.o(.text.krhino_mm_alloc_hook))<br>
<br>[Called By]<ul>
<li><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
</ul>
<p><strong><a name="[86]"></a>krhino_intrpt_enter_hook</strong>(2 bytes, Stack size 0 btyes, src_adapter_rhino_hook_impl.o(.text.krhino_intrpt_enter_hook))<br>
<p><strong><a name="[87]"></a>krhino_intrpt_exit_hook</strong>(2 bytes, Stack size 0 btyes, src_adapter_rhino_hook_impl.o(.text.krhino_intrpt_exit_hook))<br>
<p><strong><a name="[88]"></a>lpm_idle_hook</strong>(32 bytes, Stack size 48 btyes, src_lpm.o(.text.lpm_idle_hook))<br>
<p><strong><a name="[89]"></a>lpm_idle_pre_hook</strong>(2 bytes, Stack size 0 btyes, src_adapter_rhino_hook_weak.o(.text.lpm_idle_pre_hook))<br>
<br>[Called By]<ul>
<li><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_idle_pre_hook
</ul>
<p><strong><a name="[8a]"></a>soc_err_proc</strong>(48 bytes, Stack size 4 btyes, src_adapter_rhino_yoc_impl.o(.text.soc_err_proc))<br>
<br>[Calls]<ul>
<li><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</ul>
<p><strong><a name="[8b]"></a>soc_intrpt_stack_remain_get</strong>(4 bytes, Stack size 0 btyes, src_adapter_rhino_yoc_impl.o(.text.soc_intrpt_stack_remain_get))<br>
<p><strong><a name="[8c]"></a>soc_get_cur_sp</strong>(4 bytes, Stack size 0 btyes, src_adapter_rhino_yoc_impl.o(.text.soc_get_cur_sp))<br>
<p><strong><a name="[8d]"></a>_Znw</strong>(8 bytes, Stack size 0 btyes, src_cplusplus_crt.o(.text))<br>
<p><strong><a name="[8e]"></a>_Zna</strong>(8 bytes, Stack size 0 btyes, src_cplusplus_crt.o(.text))<br>
<p><strong><a name="[8f]"></a>_Zdl</strong>(8 bytes, Stack size 0 btyes, src_cplusplus_crt.o(.text))<br>
<p><strong><a name="[90]"></a>_Zda</strong>(8 bytes, Stack size 0 btyes, src_cplusplus_crt.o(.text))<br>
<p><strong><a name="[91]"></a>__cxa_pure_virtual</strong>(16 bytes, Stack size 0 btyes, src_cplusplus_crt.o(.text))<br>
<p><strong><a name="[92]"></a>cxx_system_init</strong>(28 bytes, Stack size 0 btyes, src_cplusplus_crt_init.o(.text.cxx_system_init))<br>
<p><strong><a name="[93]"></a>crc16</strong>(40 bytes, Stack size 0 btyes, src_crc16.o(.text.crc16))<br>
<p><strong><a name="[94]"></a>adc_config_default</strong>(12 bytes, Stack size 0 btyes, src_devices_adc.o(.text.adc_config_default))<br>
<p><strong><a name="[95]"></a>adc_config</strong>(56 bytes, Stack size 0 btyes, src_devices_adc.o(.text.adc_config))<br>
<p><strong><a name="[96]"></a>adc_pin2channel</strong>(56 bytes, Stack size 0 btyes, src_devices_adc.o(.text.adc_pin2channel))<br>
<p><strong><a name="[97]"></a>adc_read</strong>(68 bytes, Stack size 0 btyes, src_devices_adc.o(.text.adc_read))<br>
<p><strong><a name="[98]"></a>apdu_get_devname</strong>(48 bytes, Stack size 0 btyes, src_devices_apdu_uart.o(.text.apdu_get_devname))<br>
<p><strong><a name="[99]"></a>apdu_get_buffer_size</strong>(12 bytes, Stack size 0 btyes, src_devices_apdu_uart.o(.text.apdu_get_buffer_size))<br>
<p><strong><a name="[9a]"></a>apdu_init</strong>(96 bytes, Stack size 0 btyes, src_devices_apdu_uart.o(.text.apdu_init))<br>
<p><strong><a name="[9b]"></a>apdu_deinit</strong>(24 bytes, Stack size 0 btyes, src_devices_apdu_uart.o(.text.apdu_deinit))<br>
<p><strong><a name="[9c]"></a>apdu_uart_putc</strong>(40 bytes, Stack size 0 btyes, src_devices_apdu_uart.o(.text.apdu_uart_putc))<br>
<p><strong><a name="[9d]"></a>apdu_uart_getc</strong>(48 bytes, Stack size 0 btyes, src_devices_apdu_uart.o(.text.apdu_uart_getc))<br>
<p><strong><a name="[9e]"></a>battery_fetch</strong>(68 bytes, Stack size 0 btyes, src_devices_battery.o(.text.battery_fetch))<br>
<p><strong><a name="[9f]"></a>battery_getvalue</strong>(80 bytes, Stack size 0 btyes, src_devices_battery.o(.text.battery_getvalue))<br>
<p><strong><a name="[a0]"></a>battery_event_cb</strong>(4 bytes, Stack size 0 btyes, src_devices_battery.o(.text.battery_event_cb))<br>
<p><strong><a name="[a1]"></a>console_get_devname</strong>(48 bytes, Stack size 0 btyes, src_devices_console_uart.o(.text.console_get_devname))<br>
<p><strong><a name="[a2]"></a>console_get_buffer_size</strong>(12 bytes, Stack size 0 btyes, src_devices_console_uart.o(.text.console_get_buffer_size))<br>
<p><strong><a name="[a3]"></a>console_init</strong>(108 bytes, Stack size 0 btyes, src_devices_console_uart.o(.text.console_init))<br>
<p><strong><a name="[a4]"></a>console_deinit</strong>(40 bytes, Stack size 0 btyes, src_devices_console_uart.o(.text.console_deinit))<br>
<p><strong><a name="[a5]"></a>uart_putc</strong>(60 bytes, Stack size 16 btyes, src_devices_console_uart.o(.text.uart_putc))<br>
<br>[Stack]<ul><li>Max Depth = 112 
<li>Call Chain = uart_putc &rArr; uart_send &rArr; device_lock  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
</ul>
<br>[Called By]<ul>
<li><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</ul>
<p><strong><a name="[a6]"></a>uart_getc</strong>(48 bytes, Stack size 0 btyes, src_devices_console_uart.o(.text.uart_getc))<br>
<p><strong><a name="[24]"></a>os_critical_enter</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stdio_outs
</ul>
<p><strong><a name="[25]"></a>os_critical_exit</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stdio_outs
</ul>
<p><strong><a name="[a8]"></a>device_new</strong>(44 bytes, Stack size 16 btyes, src_devices_device.o(.text.device_new))<br>
<br>[Stack]<ul><li>Max Depth = 100 
<li>Call Chain = device_new &rArr; aos_mutex_new &rArr; aos_malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_zalloc
<li><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<li><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</ul>
<br>[Called By]<ul>
<li><a href="#[956]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_hal_init
<li><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_spiflash_init
</ul>
<p><strong><a name="[a9]"></a>device_free</strong>(18 bytes, Stack size 8 btyes, src_devices_device.o(.text.device_free))<br>
<br>[Stack]<ul><li>Max Depth = 80 
<li>Call Chain = device_free &rArr; aos_mutex_free &rArr; aos_free  &rArr; yoc_free  &rArr; krhino_mm_free  &rArr; k_mm_free  &rArr; k_mm_smallblk_free  &rArr; krhino_mblk_free  </ul>
<br>[Calls]<ul>
<li><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_free
<li><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</ul>
<p><strong><a name="[aa]"></a>device_lock</strong>(14 bytes, Stack size 4 btyes, src_devices_device.o(.text.device_lock))<br>
<br>[Stack]<ul><li>Max Depth = 80 
<li>Call Chain = device_lock &rArr; aos_mutex_lock &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
</ul>
<br>[Called By]<ul>
<li><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
<li><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_open_id
<li><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_close
<li><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<li><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program
<li><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<li><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_info
<li><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send
<li><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_set_event
</ul>
<p><strong><a name="[ab]"></a>device_unlock</strong>(10 bytes, Stack size 4 btyes, src_devices_device.o(.text.device_unlock))<br>
<br>[Stack]<ul><li>Max Depth = 68 
<li>Call Chain = device_unlock &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock  &rArr; mutex_release.isra.1  &rArr; task_pri_change  &rArr; ready_list_rm  &rArr; k_err_proc_debug  </ul>
<br>[Calls]<ul>
<li><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
<li><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_open_id
<li><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_close
<li><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<li><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program
<li><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<li><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_info
<li><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send
<li><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_set_event
</ul>
<p><strong><a name="[ac]"></a>device_find</strong>(84 bytes, Stack size 16 btyes, src_devices_device.o(.text.device_find))<br>
<br>[Stack]<ul><li>Max Depth = 100 
<li>Call Chain = device_find &rArr; aos_mutex_new &rArr; aos_malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_is_valid
<li><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<li><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<li><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<li><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</ul>
<br>[Called By]<ul>
<li><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_register
<li><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_open_id
</ul>
<p><strong><a name="[ad]"></a>driver_register</strong>(248 bytes, Stack size 40 btyes, src_devices_device.o(.text.driver_register))<br>
<br>[Stack]<ul><li>Max Depth = 140 
<li>Call Chain = driver_register &rArr; device_find &rArr; aos_mutex_new  &rArr; aos_malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_except_process
<li><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_find
<li><a href="#[ab0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rand
<li><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_is_valid
<li><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<li><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<li><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<li><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_add_tail
</ul>
<br>[Called By]<ul>
<li><a href="#[95f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_hci_uart_h5_register
<li><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiflash_csky_register
</ul>
<p><strong><a name="[ae]"></a>driver_unregister</strong>(116 bytes, Stack size 0 btyes, src_devices_device.o(.text.driver_unregister))<br>
<p><strong><a name="[af]"></a>device_open_id</strong>(60 bytes, Stack size 8 btyes, src_devices_device.o(.text.device_open_id))<br>
<br>[Stack]<ul><li>Max Depth = 108 
<li>Call Chain = device_open_id &rArr; device_find &rArr; aos_mutex_new  &rArr; aos_malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_find
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_lock
<li><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_flash_open
<li><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_open
</ul>
<p><strong><a name="[b0]"></a>device_open</strong>(44 bytes, Stack size 16 btyes, src_devices_device.o(.text.device_open))<br>
<br>[Stack]<ul><li>Max Depth = 124 
<li>Call Chain = device_open &rArr; device_open_id &rArr; device_find  &rArr; aos_mutex_new  &rArr; aos_malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_name_parse.constprop.0
<li><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_open_id
<li><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
</ul>
<br>[Called By]<ul>
<li><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_int_init
</ul>
<p><strong><a name="[b1]"></a>device_close</strong>(60 bytes, Stack size 12 btyes, src_devices_device.o(.text.device_close))<br>
<br>[Stack]<ul><li>Max Depth = 92 
<li>Call Chain = device_close &rArr; device_lock &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_lock
<li><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_flash_close
</ul>
<p><strong><a name="[b2]"></a>device_valid</strong>(36 bytes, Stack size 4 btyes, src_devices_device.o(.text.device_valid))<br>
<br>[Calls]<ul>
<li><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</ul>
<br>[Called By]<ul>
<li><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_send
<li><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
<li><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program
<li><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
<li><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_info
</ul>
<p><strong><a name="[b3]"></a>device_tags</strong>(40 bytes, Stack size 0 btyes, src_devices_device.o(.text.device_tags))<br>
<p><strong><a name="[b4]"></a>device_is_busy</strong>(68 bytes, Stack size 0 btyes, src_devices_device.o(.text.device_is_busy))<br>
<p><strong><a name="[b5]"></a>device_lpm</strong>(76 bytes, Stack size 0 btyes, src_devices_device.o(.text.device_lpm))<br>
<p><strong><a name="[b6]"></a>device_manage_power</strong>(108 bytes, Stack size 0 btyes, src_devices_device.o(.text.device_manage_power))<br>
<p><strong><a name="[b7]"></a>flash_read</strong>(68 bytes, Stack size 24 btyes, src_devices_flash.o(.text.flash_read))<br>
<br>[Stack]<ul><li>Max Depth = 104 
<li>Call Chain = flash_read &rArr; device_lock &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_valid
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_lock
<li><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_flash_read
</ul>
<p><strong><a name="[b8]"></a>flash_program</strong>(68 bytes, Stack size 24 btyes, src_devices_flash.o(.text.flash_program))<br>
<br>[Stack]<ul><li>Max Depth = 104 
<li>Call Chain = flash_program &rArr; device_lock &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_valid
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_lock
<li><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_flash_write
</ul>
<p><strong><a name="[b9]"></a>flash_erase</strong>(72 bytes, Stack size 20 btyes, src_devices_flash.o(.text.flash_erase))<br>
<br>[Stack]<ul><li>Max Depth = 100 
<li>Call Chain = flash_erase &rArr; device_lock &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_valid
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_lock
<li><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_flash_erase
</ul>
<p><strong><a name="[ba]"></a>flash_get_info</strong>(100 bytes, Stack size 20 btyes, src_devices_flash.o(.text.flash_get_info))<br>
<br>[Stack]<ul><li>Max Depth = 100 
<li>Call Chain = flash_get_info &rArr; device_lock &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_except_process
<li><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_valid
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_lock
<li><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_flash_info_get
<li><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_flash_read
<li><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_flash_write
<li><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_flash_erase
</ul>
<p><strong><a name="[bb]"></a>gnss_getinfo</strong>(68 bytes, Stack size 0 btyes, src_devices_gnss.o(.text.gnss_getinfo))<br>
<p><strong><a name="[bc]"></a>hci_send</strong>(36 bytes, Stack size 20 btyes, src_devices_hci.o(.text.hci_send))<br>
<br>[Stack]<ul><li>Max Depth = 100 
<li>Call Chain = hci_send &rArr; device_lock &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_lock
<li><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wake_up
</ul>
<p><strong><a name="[bd]"></a>hci_set_event</strong>(36 bytes, Stack size 20 btyes, src_devices_hci.o(.text.hci_set_event))<br>
<br>[Stack]<ul><li>Max Depth = 100 
<li>Call Chain = hci_set_event &rArr; device_lock &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_lock
<li><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_int_init
</ul>
<p><strong><a name="[be]"></a>hci_recv</strong>(36 bytes, Stack size 0 btyes, src_devices_hci.o(.text.hci_recv))<br>
<p><strong><a name="[bf]"></a>hci_start</strong>(10 bytes, Stack size 0 btyes, src_devices_hci.o(.text.hci_start))<br>
<p><strong><a name="[c0]"></a>iic_config_default</strong>(10 bytes, Stack size 0 btyes, src_devices_iic.o(.text.iic_config_default))<br>
<p><strong><a name="[c1]"></a>iic_config</strong>(56 bytes, Stack size 0 btyes, src_devices_iic.o(.text.iic_config))<br>
<p><strong><a name="[c2]"></a>iic_master_send</strong>(84 bytes, Stack size 0 btyes, src_devices_iic.o(.text.iic_master_send))<br>
<p><strong><a name="[c3]"></a>iic_master_recv</strong>(72 bytes, Stack size 0 btyes, src_devices_iic.o(.text.iic_master_recv))<br>
<p><strong><a name="[c4]"></a>iic_slave_send</strong>(68 bytes, Stack size 0 btyes, src_devices_iic.o(.text.iic_slave_send))<br>
<p><strong><a name="[c5]"></a>iic_slave_recv</strong>(68 bytes, Stack size 0 btyes, src_devices_iic.o(.text.iic_slave_recv))<br>
<p><strong><a name="[c6]"></a>iic_mem_write</strong>(88 bytes, Stack size 0 btyes, src_devices_iic.o(.text.iic_mem_write))<br>
<p><strong><a name="[c7]"></a>iic_mem_read</strong>(88 bytes, Stack size 0 btyes, src_devices_iic.o(.text.iic_mem_read))<br>
<p><strong><a name="[c8]"></a>led_control</strong>(80 bytes, Stack size 0 btyes, src_devices_led.o(.text.led_control))<br>
<p><strong><a name="[c9]"></a>sensor_fetch</strong>(64 bytes, Stack size 0 btyes, src_devices_sensor.o(.text.sensor_fetch))<br>
<p><strong><a name="[ca]"></a>sensor_getvalue</strong>(72 bytes, Stack size 0 btyes, src_devices_sensor.o(.text.sensor_getvalue))<br>
<p><strong><a name="[cb]"></a>uart_config_default</strong>(24 bytes, Stack size 0 btyes, src_devices_uart.o(.text.uart_config_default))<br>
<br>[Called By]<ul>
<li><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_board_init
</ul>
<p><strong><a name="[cc]"></a>uart_config</strong>(56 bytes, Stack size 0 btyes, src_devices_uart.o(.text.uart_config))<br>
<p><strong><a name="[cd]"></a>uart_set_type</strong>(56 bytes, Stack size 0 btyes, src_devices_uart.o(.text.uart_set_type))<br>
<p><strong><a name="[ce]"></a>uart_set_buffer_size</strong>(56 bytes, Stack size 0 btyes, src_devices_uart.o(.text.uart_set_buffer_size))<br>
<p><strong><a name="[cf]"></a>uart_send</strong>(72 bytes, Stack size 16 btyes, src_devices_uart.o(.text.uart_send))<br>
<br>[Stack]<ul><li>Max Depth = 96 
<li>Call Chain = uart_send &rArr; device_lock &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_valid
<li><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_lock
<li><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
</ul>
<p><strong><a name="[d0]"></a>uart_recv</strong>(52 bytes, Stack size 0 btyes, src_devices_uart.o(.text.uart_recv))<br>
<p><strong><a name="[d1]"></a>uart_set_event</strong>(80 bytes, Stack size 0 btyes, src_devices_uart.o(.text.uart_set_event))<br>
<p><strong><a name="[d2]"></a>usrsock_write</strong>(72 bytes, Stack size 0 btyes, src_devices_usrsock.o(.text.usrsock_write))<br>
<p><strong><a name="[d3]"></a>usrsock_read</strong>(60 bytes, Stack size 0 btyes, src_devices_usrsock.o(.text.usrsock_read))<br>
<p><strong><a name="[d4]"></a>usrsock_set_event</strong>(80 bytes, Stack size 0 btyes, src_devices_usrsock.o(.text.usrsock_set_event))<br>
<p><strong><a name="[d5]"></a>eventloop_local_event_init</strong>(44 bytes, Stack size 0 btyes, src_eventloop_evtloop_device.o(.text.eventloop_local_event_init))<br>
<p><strong><a name="[d6]"></a>eventloop_local_event_deinit</strong>(72 bytes, Stack size 0 btyes, src_eventloop_evtloop_device.o(.text.eventloop_local_event_deinit))<br>
<p><strong><a name="[d7]"></a>event_write</strong>(128 bytes, Stack size 0 btyes, src_eventloop_evtloop_device.o(.text.event_write))<br>
<p><strong><a name="[d8]"></a>event_read</strong>(116 bytes, Stack size 0 btyes, src_eventloop_evtloop_device.o(.text.event_read))<br>
<p><strong><a name="[d9]"></a>event_poll</strong>(40 bytes, Stack size 0 btyes, src_eventloop_evtloop_device.o(.text.event_poll))<br>
<p><strong><a name="[da]"></a>event_read_cb</strong>(112 bytes, Stack size 0 btyes, src_eventloop_evtloop_event.o(.text.event_read_cb))<br>
<p><strong><a name="[db]"></a>aos_post_event</strong>(44 bytes, Stack size 0 btyes, src_eventloop_evtloop_event.o(.text.aos_post_event))<br>
<p><strong><a name="[dc]"></a>yoc_eloop_unregister_listener</strong>(48 bytes, Stack size 0 btyes, src_eventloop_evtloop_event.o(.text.yoc_eloop_unregister_listener))<br>
<p><strong><a name="[dd]"></a>aos_register_event_filter</strong>(60 bytes, Stack size 0 btyes, src_eventloop_evtloop_event.o(.text.aos_register_event_filter))<br>
<p><strong><a name="[de]"></a>aos_unregister_event_filter</strong>(72 bytes, Stack size 0 btyes, src_eventloop_evtloop_event.o(.text.aos_unregister_event_filter))<br>
<p><strong><a name="[df]"></a>aos_schedule_call</strong>(54 bytes, Stack size 0 btyes, src_eventloop_evtloop_event.o(.text.aos_schedule_call))<br>
<p><strong><a name="[e0]"></a>aos_loop_init</strong>(48 bytes, Stack size 0 btyes, src_eventloop_evtloop_main.o(.text.aos_loop_init))<br>
<p><strong><a name="[e1]"></a>aos_current_loop</strong>(8 bytes, Stack size 0 btyes, src_eventloop_evtloop_main.o(.text.aos_current_loop))<br>
<p><strong><a name="[e2]"></a>aos_loop_run</strong>(188 bytes, Stack size 0 btyes, src_eventloop_evtloop_main.o(.text.aos_loop_run))<br>
<p><strong><a name="[e3]"></a>aos_loop_exit</strong>(28 bytes, Stack size 0 btyes, src_eventloop_evtloop_main.o(.text.aos_loop_exit))<br>
<p><strong><a name="[e4]"></a>aos_loop_destroy</strong>(36 bytes, Stack size 0 btyes, src_eventloop_evtloop_main.o(.text.aos_loop_destroy))<br>
<p><strong><a name="[e5]"></a>aos_post_delayed_action</strong>(124 bytes, Stack size 0 btyes, src_eventloop_evtloop_main.o(.text.aos_post_delayed_action))<br>
<p><strong><a name="[e6]"></a>aos_cancel_delayed_action</strong>(60 bytes, Stack size 0 btyes, src_eventloop_evtloop_main.o(.text.aos_cancel_delayed_action))<br>
<p><strong><a name="[e8]"></a>aos_loop_schedule_work</strong>(116 bytes, Stack size 0 btyes, src_eventloop_yloop.o(.text.aos_loop_schedule_work))<br>
<p><strong><a name="[e9]"></a>aos_cancel_work</strong>(50 bytes, Stack size 0 btyes, src_eventloop_yloop.o(.text.aos_cancel_work))<br>
<p><strong><a name="[eb]"></a>aos_set_except_callback</strong>(12 bytes, Stack size 0 btyes, src_except.o(.text.aos_set_except_callback))<br>
<p><strong><a name="[ec]"></a>aos_set_except_default</strong>(16 bytes, Stack size 0 btyes, src_except.o(.text.aos_set_except_default))<br>
<p><strong><a name="[ed]"></a>aos_except_process</strong>(28 bytes, Stack size 16 btyes, src_except.o(.text.aos_except_process))<br>
<br>[Called By]<ul>
<li><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_at_send
<li><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_service_cmds_reg
<li><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuffer_create
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuffer_available_read_space
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuffer_write
<li><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuffer_read
<li><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trap_c_cb
<li><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new_ext
<li><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<li><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<li><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<li><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
<li><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_new_ext
<li><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_free
<li><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_start
<li><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_stop
<li><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_change
<li><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_change_once
<li><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<li><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_free
<li><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<li><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
<li><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_register
<li><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_info
</ul>
<p><strong><a name="[f6]"></a>kv2x_init</strong>(76 bytes, Stack size 0 btyes, src_kv.o(.text.kv2x_init))<br>
<p><strong><a name="[f7]"></a>aos_kv_getstring</strong>(32 bytes, Stack size 0 btyes, src_kv.o(.text.aos_kv_getstring))<br>
<p><strong><a name="[f8]"></a>aos_kv_getfloat</strong>(20 bytes, Stack size 0 btyes, src_kv.o(.text.aos_kv_getfloat))<br>
<p><strong><a name="[f9]"></a>aos_kv_getint</strong>(20 bytes, Stack size 0 btyes, src_kv.o(.text.aos_kv_getint))<br>
<p><strong><a name="[fa]"></a>__kv_del</strong>(56 bytes, Stack size 0 btyes, src_kv.o(.text.__kv_del))<br>
<p><strong><a name="[fb]"></a>aos_kv_del</strong>(8 bytes, Stack size 0 btyes, src_kv.o(.text.aos_kv_del))<br>
<p><strong><a name="[fc]"></a>__kv_reset</strong>(52 bytes, Stack size 0 btyes, src_kv.o(.text.__kv_reset))<br>
<p><strong><a name="[fd]"></a>aos_kv_reset</strong>(8 bytes, Stack size 0 btyes, src_kv.o(.text.aos_kv_reset))<br>
<p><strong><a name="[fe]"></a>__kv_dump</strong>(44 bytes, Stack size 0 btyes, src_kv.o(.text.__kv_dump))<br>
<p><strong><a name="[ff]"></a>__show_data</strong>(44 bytes, Stack size 0 btyes, src_kv.o(.text.__show_data))<br>
<p><strong><a name="[100]"></a>__kv_foreach</strong>(60 bytes, Stack size 0 btyes, src_kv.o(.text.__kv_foreach))<br>
<p><strong><a name="[101]"></a>__kv_list</strong>(52 bytes, Stack size 0 btyes, src_kv.o(.text.__kv_list))<br>
<p><strong><a name="[102]"></a>nvram_get_val</strong>(28 bytes, Stack size 0 btyes, src_kv.o(.text.nvram_get_val))<br>
<p><strong><a name="[103]"></a>nvram_set_val</strong>(56 bytes, Stack size 0 btyes, src_kv.o(.text.nvram_set_val))<br>
<p><strong><a name="[104]"></a>kv2x_flash_init</strong>(72 bytes, Stack size 0 btyes, src_kv.o(.text.kv2x_flash_init))<br>
<p><strong><a name="[105]"></a>aos_kv_init</strong>(28 bytes, Stack size 0 btyes, src_kv.o(.text.aos_kv_init))<br>
<p><strong><a name="[106]"></a>aos_kv_flash_init</strong>(36 bytes, Stack size 0 btyes, src_kv.o(.text.aos_kv_flash_init))<br>
<p><strong><a name="[107]"></a>__kv_setdata</strong>(64 bytes, Stack size 0 btyes, src_kv.o(.text.__kv_setdata))<br>
<p><strong><a name="[108]"></a>aos_kv_set</strong>(8 bytes, Stack size 0 btyes, src_kv.o(.text.aos_kv_set))<br>
<p><strong><a name="[109]"></a>aos_kv_setstring</strong>(24 bytes, Stack size 0 btyes, src_kv.o(.text.aos_kv_setstring))<br>
<p><strong><a name="[10a]"></a>aos_kv_setfloat</strong>(18 bytes, Stack size 0 btyes, src_kv.o(.text.aos_kv_setfloat))<br>
<p><strong><a name="[10b]"></a>aos_kv_setint</strong>(18 bytes, Stack size 0 btyes, src_kv.o(.text.aos_kv_setint))<br>
<p><strong><a name="[10c]"></a>__kv_getdata</strong>(76 bytes, Stack size 0 btyes, src_kv.o(.text.__kv_getdata))<br>
<p><strong><a name="[10d]"></a>aos_kv_get</strong>(30 bytes, Stack size 0 btyes, src_kv.o(.text.aos_kv_get))<br>
<p><strong><a name="[10e]"></a>slist_add_tail</strong>(16 bytes, Stack size 0 btyes, src_list.o(.text.slist_add_tail))<br>
<br>[Called By]<ul>
<li><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_service_cmd_reg
<li><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_register
</ul>
<p><strong><a name="[10f]"></a>slist_del</strong>(20 bytes, Stack size 48 btyes, src_list.o(.text.slist_del))<br>
<p><strong><a name="[110]"></a>slist_entry_number</strong>(16 bytes, Stack size 0 btyes, src_list.o(.text.slist_entry_number))<br>
<p><strong><a name="[111]"></a>dlist_entry_number</strong>(18 bytes, Stack size 0 btyes, src_list.o(.text.dlist_entry_number))<br>
<p><strong><a name="[112]"></a>lpm_entry</strong>(32 bytes, Stack size 0 btyes, src_lpm.o(.text.lpm_entry))<br>
<p><strong><a name="[88]"></a>lpm_idle_hook</strong>(32 bytes, Stack size 48 btyes, src_lpm.o(.text.lpm_idle_hook))<br>
<p><strong><a name="[114]"></a>pm_init</strong>(164 bytes, Stack size 0 btyes, src_lpm.o(.text.pm_init))<br>
<p><strong><a name="[115]"></a>pm_config_mask</strong>(36 bytes, Stack size 0 btyes, src_lpm.o(.text.pm_config_mask))<br>
<p><strong><a name="[116]"></a>pm_config_policy</strong>(52 bytes, Stack size 0 btyes, src_lpm.o(.text.pm_config_policy))<br>
<p><strong><a name="[117]"></a>pm_get_policy</strong>(44 bytes, Stack size 0 btyes, src_lpm.o(.text.pm_get_policy))<br>
<p><strong><a name="[118]"></a>pm_agree_halt</strong>(68 bytes, Stack size 0 btyes, src_lpm.o(.text.pm_agree_halt))<br>
<p><strong><a name="[11a]"></a>base_init</strong>(2 bytes, Stack size 0 btyes, src_main.o(.text.base_init))<br>
<p><strong><a name="[11b]"></a>pre_main</strong>(52 bytes, Stack size 12 btyes, src_main.o(.text.pre_main))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = pre_main &rArr; aos_init &rArr; krhino_init  &rArr; ktimer_init  &rArr; krhino_task_create  &rArr; task_create.isra.0.part.1.constprop.10  &rArr; ready_list_add_tail  &rArr; _ready_list_add_tail  &rArr; ready_list_init  </ul>
<br>[Calls]<ul>
<li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_init
<li><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new_ext
<li><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_start
</ul>
<p><strong><a name="[11c]"></a>rbb_init</strong>(38 bytes, Stack size 0 btyes, src_ringblk_buf.o(.text.rbb_init))<br>
<p><strong><a name="[11d]"></a>rbb_create</strong>(82 bytes, Stack size 0 btyes, src_ringblk_buf.o(.text.rbb_create))<br>
<p><strong><a name="[11e]"></a>rbb_destroy</strong>(22 bytes, Stack size 0 btyes, src_ringblk_buf.o(.text.rbb_destroy))<br>
<p><strong><a name="[11f]"></a>rbb_blk_alloc</strong>(212 bytes, Stack size 0 btyes, src_ringblk_buf.o(.text.rbb_blk_alloc))<br>
<p><strong><a name="[120]"></a>rbb_blk_put</strong>(6 bytes, Stack size 0 btyes, src_ringblk_buf.o(.text.rbb_blk_put))<br>
<p><strong><a name="[121]"></a>rbb_blk_get</strong>(28 bytes, Stack size 0 btyes, src_ringblk_buf.o(.text.rbb_blk_get))<br>
<p><strong><a name="[122]"></a>rbb_blk_size</strong>(6 bytes, Stack size 0 btyes, src_ringblk_buf.o(.text.rbb_blk_size))<br>
<p><strong><a name="[123]"></a>rbb_blk_buf</strong>(4 bytes, Stack size 0 btyes, src_ringblk_buf.o(.text.rbb_blk_buf))<br>
<p><strong><a name="[124]"></a>rbb_blk_free</strong>(28 bytes, Stack size 0 btyes, src_ringblk_buf.o(.text.rbb_blk_free))<br>
<p><strong><a name="[125]"></a>rbb_blk_queue_get</strong>(114 bytes, Stack size 0 btyes, src_ringblk_buf.o(.text.rbb_blk_queue_get))<br>
<p><strong><a name="[126]"></a>rbb_blk_queue_len</strong>(36 bytes, Stack size 0 btyes, src_ringblk_buf.o(.text.rbb_blk_queue_len))<br>
<p><strong><a name="[127]"></a>rbb_blk_queue_buf</strong>(6 bytes, Stack size 0 btyes, src_ringblk_buf.o(.text.rbb_blk_queue_buf))<br>
<p><strong><a name="[128]"></a>rbb_blk_queue_free</strong>(36 bytes, Stack size 0 btyes, src_ringblk_buf.o(.text.rbb_blk_queue_free))<br>
<p><strong><a name="[129]"></a>rbb_next_blk_queue_len</strong>(58 bytes, Stack size 0 btyes, src_ringblk_buf.o(.text.rbb_next_blk_queue_len))<br>
<p><strong><a name="[12a]"></a>rbb_get_buf_size</strong>(4 bytes, Stack size 0 btyes, src_ringblk_buf.o(.text.rbb_get_buf_size))<br>
<p><strong><a name="[12b]"></a>ringbuffer_create</strong>(68 bytes, Stack size 20 btyes, src_ringbuffer.o(.text.ringbuffer_create))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = ringbuffer_create &rArr; aos_except_process </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_except_process
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</ul>
<p><strong><a name="[12c]"></a>ringbuffer_destroy</strong>(48 bytes, Stack size 0 btyes, src_ringbuffer.o(.text.ringbuffer_destroy))<br>
<p><strong><a name="[12d]"></a>ringbuffer_available_read_space</strong>(64 bytes, Stack size 12 btyes, src_ringbuffer.o(.text.ringbuffer_available_read_space))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = ringbuffer_available_read_space &rArr; aos_except_process </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_except_process
</ul>
<br>[Called By]<ul>
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuffer_write
<li><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuffer_read
</ul>
<p><strong><a name="[12e]"></a>ringbuffer_write</strong>(112 bytes, Stack size 24 btyes, src_ringbuffer.o(.text.ringbuffer_write))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = ringbuffer_write &rArr; ringbuffer_available_read_space &rArr; aos_except_process  </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_except_process
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuffer_available_read_space
</ul>
<br>[Called By]<ul>
<li><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_cb
</ul>
<p><strong><a name="[12f]"></a>ringbuffer_read</strong>(116 bytes, Stack size 20 btyes, src_ringbuffer.o(.text.ringbuffer_read))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = ringbuffer_read &rArr; ringbuffer_available_read_space &rArr; aos_except_process  </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_except_process
<li><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuffer_available_read_space
</ul>
<br>[Called By]<ul>
<li><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv_II
</ul>
<p><strong><a name="[130]"></a>select2</strong>(66 bytes, Stack size 0 btyes, src_select.o(.text.select2))<br>
<p><strong><a name="[131]"></a>select</strong>(22 bytes, Stack size 0 btyes, src_select.o(.text.select))<br>
<p><strong><a name="[132]"></a>nvram_get_iot_info</strong>(144 bytes, Stack size 0 btyes, src_settings_ali.o(.text.nvram_get_iot_info))<br>
<p><strong><a name="[136]"></a>aos_wdt_index</strong>(56 bytes, Stack size 0 btyes, src_softwdt.o(.text.aos_wdt_index))<br>
<p><strong><a name="[137]"></a>aos_wdt_attach</strong>(116 bytes, Stack size 0 btyes, src_softwdt.o(.text.aos_wdt_attach))<br>
<p><strong><a name="[138]"></a>aos_wdt_detach</strong>(72 bytes, Stack size 0 btyes, src_softwdt.o(.text.aos_wdt_detach))<br>
<p><strong><a name="[139]"></a>aos_wdt_exists</strong>(48 bytes, Stack size 0 btyes, src_softwdt.o(.text.aos_wdt_exists))<br>
<p><strong><a name="[13a]"></a>aos_wdt_feed</strong>(48 bytes, Stack size 0 btyes, src_softwdt.o(.text.aos_wdt_feed))<br>
<p><strong><a name="[13b]"></a>aos_wdt_show</strong>(84 bytes, Stack size 0 btyes, src_softwdt.o(.text.aos_wdt_show))<br>
<p><strong><a name="[13c]"></a>aos_wdt_showall</strong>(76 bytes, Stack size 0 btyes, src_softwdt.o(.text.aos_wdt_showall))<br>
<p><strong><a name="[13d]"></a>aos_wdt_hw_enable</strong>(76 bytes, Stack size 0 btyes, src_softwdt.o(.text.aos_wdt_hw_enable))<br>
<p><strong><a name="[13e]"></a>aos_wdt_hw_disable</strong>(20 bytes, Stack size 0 btyes, src_softwdt.o(.text.aos_wdt_hw_disable))<br>
<p><strong><a name="[13f]"></a>aos_get_product_model</strong>(32 bytes, Stack size 0 btyes, src_sysinfo.o(.text.aos_get_product_model))<br>
<p><strong><a name="[140]"></a>aos_get_os_version</strong>(8 bytes, Stack size 0 btyes, src_sysinfo.o(.text.aos_get_os_version))<br>
<p><strong><a name="[141]"></a>aos_get_app_version</strong>(64 bytes, Stack size 16 btyes, src_sysinfo.o(.text.aos_get_app_version))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = aos_get_app_version &rArr; get_app_version </ul>
<br>[Calls]<ul>
<li><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_app_version
</ul>
<br>[Called By]<ul>
<li><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_version_appver_get
<li><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</ul>
<p><strong><a name="[142]"></a>aos_get_kernel_version</strong>(8 bytes, Stack size 0 btyes, src_sysinfo.o(.text.aos_get_kernel_version))<br>
<p><strong><a name="[143]"></a>aos_get_device_name</strong>(52 bytes, Stack size 0 btyes, src_sysinfo.o(.text.aos_get_device_name))<br>
<p><strong><a name="[144]"></a>aos_get_device_id</strong>(52 bytes, Stack size 0 btyes, src_sysinfo.o(.text.aos_get_device_id))<br>
<p><strong><a name="[145]"></a>aos_get_imsi</strong>(32 bytes, Stack size 0 btyes, src_sysinfo.o(.text.aos_get_imsi))<br>
<p><strong><a name="[146]"></a>aos_get_imei</strong>(32 bytes, Stack size 0 btyes, src_sysinfo.o(.text.aos_get_imei))<br>
<p><strong><a name="[147]"></a>fputc</strong>(40 bytes, Stack size 8 btyes, src_ustdio.o(.text.fputc))<br>
<br>[Stack]<ul><li>Max Depth = 120 
<li>Call Chain = fputc &rArr; uart_putc &rArr; uart_send  &rArr; device_lock  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_putc
</ul>
<br>[Called By]<ul>
<li><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stdio_outs
</ul>
<p><strong><a name="[148]"></a>fgetc</strong>(24 bytes, Stack size 0 btyes, src_ustdio.o(.text.fgetc))<br>
<p><strong><a name="[149]"></a>dev_ringbuff_reset</strong>(22 bytes, Stack size 0 btyes, csi1_src_dev_ringbuf.o(.text.dev_ringbuff_reset))<br>
<p><strong><a name="[14a]"></a>dev_ringbuf_len</strong>(4 bytes, Stack size 0 btyes, csi1_src_dev_ringbuf.o(.text.dev_ringbuf_len))<br>
<p><strong><a name="[14b]"></a>dev_ringbuf_avail</strong>(8 bytes, Stack size 0 btyes, csi1_src_dev_ringbuf.o(.text.dev_ringbuf_avail))<br>
<p><strong><a name="[14c]"></a>dev_ringbuf_is_empty</strong>(10 bytes, Stack size 0 btyes, csi1_src_dev_ringbuf.o(.text.dev_ringbuf_is_empty))<br>
<p><strong><a name="[14d]"></a>dev_ringbuf_is_full</strong>(12 bytes, Stack size 0 btyes, csi1_src_dev_ringbuf.o(.text.dev_ringbuf_is_full))<br>
<p><strong><a name="[14e]"></a>dev_ringbuf_in</strong>(102 bytes, Stack size 0 btyes, csi1_src_dev_ringbuf.o(.text.dev_ringbuf_in))<br>
<p><strong><a name="[14f]"></a>dev_ringbuf_out</strong>(94 bytes, Stack size 0 btyes, csi1_src_dev_ringbuf.o(.text.dev_ringbuf_out))<br>
<p><strong><a name="[150]"></a>km_init</strong>(32 bytes, Stack size 0 btyes, src_key_mgr.o(.text.km_init))<br>
<p><strong><a name="[151]"></a>km_uninit</strong>(2 bytes, Stack size 0 btyes, src_key_mgr.o(.text.km_uninit))<br>
<p><strong><a name="[152]"></a>km_get_key</strong>(24 bytes, Stack size 0 btyes, src_key_mgr.o(.text.km_get_key))<br>
<p><strong><a name="[153]"></a>km_get_pub_key_by_name</strong>(8 bytes, Stack size 0 btyes, src_key_mgr.o(.text.km_get_pub_key_by_name))<br>
<p><strong><a name="[154]"></a>km_derive_key</strong>(4 bytes, Stack size 0 btyes, src_key_mgr.o(.text.km_derive_key))<br>
<p><strong><a name="[155]"></a>km_import_key</strong>(4 bytes, Stack size 0 btyes, src_key_mgr.o(.text.km_import_key))<br>
<p><strong><a name="[156]"></a>km_export_key</strong>(4 bytes, Stack size 0 btyes, src_key_mgr.o(.text.km_export_key))<br>
<p><strong><a name="[157]"></a>km_destory_key</strong>(4 bytes, Stack size 0 btyes, src_key_mgr.o(.text.km_destory_key))<br>
<p><strong><a name="[158]"></a>km_get_info</strong>(4 bytes, Stack size 0 btyes, src_key_mgr.o(.text.km_get_info))<br>
<p><strong><a name="[159]"></a>parser_init</strong>(8 bytes, Stack size 0 btyes, src_key_mgr_parser.o(.text.parser_init))<br>
<p><strong><a name="[15a]"></a>parser_get_key</strong>(8 bytes, Stack size 0 btyes, src_key_mgr_parser.o(.text.parser_get_key))<br>
<p><strong><a name="[15b]"></a>get_data_from_addr</strong>(16 bytes, Stack size 0 btyes, src_key_mgr_port.o(.text.get_data_from_addr))<br>
<p><strong><a name="[15c]"></a>get_word_from_addr</strong>(4 bytes, Stack size 0 btyes, src_key_mgr_port.o(.text.get_word_from_addr))<br>
<p><strong><a name="[15e]"></a>km_get_pub_key_with_name</strong>(120 bytes, Stack size 0 btyes, src_key_mgr_pub_key.o(.text.km_get_pub_key_with_name))<br>
<p><strong><a name="[15f]"></a>km_show_pub_key_info</strong>(2 bytes, Stack size 0 btyes, src_key_mgr_pub_key.o(.text.km_show_pub_key_info))<br>
<p><strong><a name="[160]"></a>km_pub_key_init</strong>(92 bytes, Stack size 0 btyes, src_key_mgr_pub_key.o(.text.km_pub_key_init))<br>
<p><strong><a name="[165]"></a>kvnode_show</strong>(60 bytes, Stack size 0 btyes, block.o(.text.kvnode_show))<br>
<p><strong><a name="[167]"></a>block_read</strong>(24 bytes, Stack size 0 btyes, block.o(.text.block_read))<br>
<p><strong><a name="[168]"></a>kvnode_rm</strong>(90 bytes, Stack size 0 btyes, block.o(.text.kvnode_rm))<br>
<p><strong><a name="[16a]"></a>kvblock_find</strong>(40 bytes, Stack size 0 btyes, block.o(.text.kvblock_find))<br>
<p><strong><a name="[16b]"></a>kvblock_reset</strong>(20 bytes, Stack size 0 btyes, block.o(.text.kvblock_reset))<br>
<p><strong><a name="[16c]"></a>kvblock_dump</strong>(20 bytes, Stack size 0 btyes, block.o(.text.kvblock_dump))<br>
<p><strong><a name="[16d]"></a>kvblock_calc</strong>(80 bytes, Stack size 0 btyes, block.o(.text.kvblock_calc))<br>
<p><strong><a name="[16e]"></a>kvblock_init</strong>(70 bytes, Stack size 0 btyes, block.o(.text.kvblock_init))<br>
<p><strong><a name="[16f]"></a>kvblock_alloc_node</strong>(24 bytes, Stack size 0 btyes, block.o(.text.kvblock_alloc_node))<br>
<p><strong><a name="[170]"></a>kvblock_set</strong>(268 bytes, Stack size 0 btyes, block.o(.text.kvblock_set))<br>
<p><strong><a name="[171]"></a>kvblock_search</strong>(292 bytes, Stack size 0 btyes, block.o(.text.kvblock_search))<br>
<p><strong><a name="[172]"></a>kvblock_check_version</strong>(88 bytes, Stack size 0 btyes, block.o(.text.kvblock_check_version))<br>
<p><strong><a name="[173]"></a>kvnode_cmp_name</strong>(34 bytes, Stack size 0 btyes, block.o(.text.kvnode_cmp_name))<br>
<p><strong><a name="[174]"></a>_iter_find</strong>(60 bytes, Stack size 0 btyes, block.o(.text._iter_find))<br>
<p><strong><a name="[175]"></a>kvblock_show_data</strong>(76 bytes, Stack size 0 btyes, block.o(.text.kvblock_show_data))<br>
<p><strong><a name="[176]"></a>kvblock_cache_malloc</strong>(12 bytes, Stack size 0 btyes, block.o(.text.kvblock_cache_malloc))<br>
<p><strong><a name="[177]"></a>kvblock_cache_free</strong>(34 bytes, Stack size 0 btyes, block.o(.text.kvblock_cache_free))<br>
<p><strong><a name="[178]"></a>kvblock_iter</strong>(88 bytes, Stack size 0 btyes, block.o(.text.kvblock_iter))<br>
<p><strong><a name="[17a]"></a>kv_init</strong>(302 bytes, Stack size 0 btyes, kvset.o(.text.kv_init))<br>
<p><strong><a name="[17b]"></a>kv_iter</strong>(46 bytes, Stack size 0 btyes, kvset.o(.text.kv_iter))<br>
<p><strong><a name="[17c]"></a>kv_find</strong>(62 bytes, Stack size 0 btyes, kvset.o(.text.kv_find))<br>
<p><strong><a name="[17d]"></a>kv_gc</strong>(144 bytes, Stack size 0 btyes, kvset.o(.text.kv_gc))<br>
<p><strong><a name="[17e]"></a>kv_set</strong>(190 bytes, Stack size 0 btyes, kvset.o(.text.kv_set))<br>
<p><strong><a name="[17f]"></a>kv_get</strong>(186 bytes, Stack size 0 btyes, kvset.o(.text.kv_get))<br>
<p><strong><a name="[180]"></a>kv_rm</strong>(28 bytes, Stack size 0 btyes, kvset.o(.text.kv_rm))<br>
<p><strong><a name="[181]"></a>kv_reset</strong>(30 bytes, Stack size 0 btyes, kvset.o(.text.kv_reset))<br>
<p><strong><a name="[182]"></a>kv_dump</strong>(72 bytes, Stack size 0 btyes, kvset.o(.text.kv_dump))<br>
<p><strong><a name="[183]"></a>kv_show_data</strong>(44 bytes, Stack size 0 btyes, kvset.o(.text.kv_show_data))<br>
<p><strong><a name="[184]"></a>get_section_buf</strong>(82 bytes, Stack size 0 btyes, mtb_mtb.o(.text.get_section_buf))<br>
<p><strong><a name="[185]"></a>mtb_get_img_scn_addr</strong>(28 bytes, Stack size 0 btyes, mtb_mtb.o(.text.mtb_get_img_scn_addr))<br>
<p><strong><a name="[186]"></a>get_sys_partition</strong>(172 bytes, Stack size 64 btyes, mtb_mtb.o(.text.get_sys_partition))<br>
<br>[Stack]<ul><li>Max Depth = 132 
<li>Call Chain = get_sys_partition &rArr; get_section_addr &rArr; get_scn_offset.isra.0  &rArr; mtb_version  </ul>
<br>[Calls]<ul>
<li><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_section_addr
<li><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtbv4_partition_count
<li><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtbv4_get_partition_info_with_index
<li><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</ul>
<br>[Called By]<ul>
<li><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_init
</ul>
<p><strong><a name="[187]"></a>get_app_version</strong>(76 bytes, Stack size 16 btyes, mtb_mtb.o(.text.get_app_version))<br>
<br>[Called By]<ul>
<li><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_get_app_version
</ul>
<p><strong><a name="[188]"></a>mtb_get</strong>(8 bytes, Stack size 0 btyes, mtb_mtb.o(.text.mtb_get))<br>
<br>[Called By]<ul>
<li><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_version
<li><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scn_offset.isra.0
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtbv_get_part_info
<li><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtbv_init
<li><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtbv4_partition_count
<li><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtbv4_get_partition_info
<li><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtbv4_init
<li><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtbv4_get_partition_info_with_index
</ul>
<p><strong><a name="[189]"></a>get_data_from_faddr</strong>(16 bytes, Stack size 0 btyes, mtb_mtb.o(.text.get_data_from_faddr))<br>
<p><strong><a name="[18a]"></a>mtb_init</strong>(148 bytes, Stack size 28 btyes, mtb_mtb.o(.text.mtb_init))<br>
<br>[Stack]<ul><li>Max Depth = 152 
<li>Call Chain = mtb_init &rArr; mtbv_init &rArr; mtbv_get_part_info  &rArr; get_section_addr  &rArr; get_scn_offset.isra.0  &rArr; mtb_version  </ul>
<br>[Calls]<ul>
<li><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_flash_open
<li><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_flash_info_get
<li><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_flash_close
<li><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtbv_init
<li><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtbv4_init
</ul>
<br>[Called By]<ul>
<li><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_init
</ul>
<p><strong><a name="[18b]"></a>mtb_get_addr</strong>(20 bytes, Stack size 0 btyes, mtb_mtb.o(.text.mtb_get_addr))<br>
<p><strong><a name="[18c]"></a>mtb_verify</strong>(24 bytes, Stack size 0 btyes, mtb_mtb.o(.text.mtb_verify))<br>
<p><strong><a name="[18d]"></a>mtb_image_verify</strong>(52 bytes, Stack size 0 btyes, mtb_mtb.o(.text.mtb_image_verify))<br>
<p><strong><a name="[18e]"></a>mtb_get_bmtb_size</strong>(18 bytes, Stack size 0 btyes, mtb_mtb.o(.text.mtb_get_bmtb_size))<br>
<p><strong><a name="[18f]"></a>mtb_get_size</strong>(36 bytes, Stack size 0 btyes, mtb_mtb.o(.text.mtb_get_size))<br>
<p><strong><a name="[190]"></a>mtb_get_partition_info</strong>(88 bytes, Stack size 0 btyes, mtb_mtb.o(.text.mtb_get_partition_info))<br>
<p><strong><a name="[191]"></a>mtb_get_img_info</strong>(88 bytes, Stack size 0 btyes, mtb_mtb.o(.text.mtb_get_img_info))<br>
<p><strong><a name="[195]"></a>get_section_addr</strong>(174 bytes, Stack size 52 btyes, mtb_mtbv.o(.text.get_section_addr))<br>
<br>[Stack]<ul><li>Max Depth = 68 
<li>Call Chain = get_section_addr &rArr; get_scn_offset.isra.0 &rArr; mtb_version  </ul>
<br>[Calls]<ul>
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scn_offset.isra.0
<li><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</ul>
<br>[Called By]<ul>
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtbv_get_part_info
<li><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_partition
</ul>
<p><strong><a name="[196]"></a>mtbv_get_part_info</strong>(176 bytes, Stack size 40 btyes, mtb_mtbv.o(.text.mtbv_get_part_info))<br>
<br>[Stack]<ul><li>Max Depth = 108 
<li>Call Chain = mtbv_get_part_info &rArr; get_section_addr &rArr; get_scn_offset.isra.0  &rArr; mtb_version  </ul>
<br>[Calls]<ul>
<li><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_get
<li><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_section_addr
<li><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivsi3
<li><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<li><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_version
</ul>
<br>[Called By]<ul>
<li><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtbv_init
</ul>
<p><strong><a name="[197]"></a>mtbv_get_img_info</strong>(112 bytes, Stack size 0 btyes, mtb_mtbv.o(.text.mtbv_get_img_info))<br>
<p><strong><a name="[198]"></a>get_img_check_result</strong>(166 bytes, Stack size 0 btyes, mtb_mtbv.o(.text.get_img_check_result))<br>
<p><strong><a name="[199]"></a>mtbv_check_imginfo</strong>(240 bytes, Stack size 0 btyes, mtb_mtbv.o(.text.mtbv_check_imginfo))<br>
<p><strong><a name="[19a]"></a>mtbv_init</strong>(64 bytes, Stack size 16 btyes, mtb_mtbv.o(.text.mtbv_init))<br>
<br>[Stack]<ul><li>Max Depth = 124 
<li>Call Chain = mtbv_init &rArr; mtbv_get_part_info &rArr; get_section_addr  &rArr; get_scn_offset.isra.0  &rArr; mtb_version  </ul>
<br>[Calls]<ul>
<li><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_get
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtbv_get_part_info
</ul>
<br>[Called By]<ul>
<li><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_init
</ul>
<p><strong><a name="[19b]"></a>mtbv_image_verify</strong>(18 bytes, Stack size 0 btyes, mtb_mtbv.o(.text.mtbv_image_verify))<br>
<p><strong><a name="[19c]"></a>mtb_get_key_info</strong>(136 bytes, Stack size 0 btyes, mtb_mtbv.o(.text.mtb_get_key_info))<br>
<p><strong><a name="[19d]"></a>mtb_get_pubkey_info</strong>(108 bytes, Stack size 0 btyes, mtb_mtbv.o(.text.mtb_get_pubkey_info))<br>
<p><strong><a name="[19e]"></a>mtb_get_img_info_buf</strong>(132 bytes, Stack size 0 btyes, mtb_mtbv.o(.text.mtb_get_img_info_buf))<br>
<p><strong><a name="[19f]"></a>mtbv4_partition_count</strong>(12 bytes, Stack size 4 btyes, mtb_mtbv4.o(.text.mtbv4_partition_count))<br>
<br>[Calls]<ul>
<li><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_get
</ul>
<br>[Called By]<ul>
<li><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_partition
</ul>
<p><strong><a name="[1a0]"></a>mtbv4_get_partition_info</strong>(140 bytes, Stack size 32 btyes, mtb_mtbv4.o(.text.mtbv4_get_partition_info))<br>
<br>[Calls]<ul>
<li><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_get
<li><a href="#[acb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</ul>
<br>[Called By]<ul>
<li><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtbv4_init
</ul>
<p><strong><a name="[1a1]"></a>mtbv4_init</strong>(96 bytes, Stack size 60 btyes, mtb_mtbv4.o(.text.mtbv4_init))<br>
<br>[Stack]<ul><li>Max Depth = 92 
<li>Call Chain = mtbv4_init &rArr; mtbv4_get_partition_info </ul>
<br>[Calls]<ul>
<li><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_get
<li><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_flash_open
<li><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_flash_info_get
<li><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_flash_close
<li><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtbv4_get_partition_info
</ul>
<br>[Called By]<ul>
<li><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_init
</ul>
<p><strong><a name="[1a2]"></a>mtbv4_get_partition_info_with_index</strong>(100 bytes, Stack size 20 btyes, mtb_mtbv4.o(.text.mtbv4_get_partition_info_with_index))<br>
<br>[Calls]<ul>
<li><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_get
</ul>
<br>[Called By]<ul>
<li><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_partition
</ul>
<p><strong><a name="[1a3]"></a>mtbv4_verify</strong>(60 bytes, Stack size 0 btyes, mtb_mtbv4.o(.text.mtbv4_verify))<br>
<p><strong><a name="[1a4]"></a>mtbv4_image_verify</strong>(296 bytes, Stack size 0 btyes, mtb_mtbv4.o(.text.mtbv4_image_verify))<br>
<p><strong><a name="[1a5]"></a>partition_all_verify</strong>(108 bytes, Stack size 0 btyes, src_partition.o(.text.partition_all_verify))<br>
<p><strong><a name="[1a6]"></a>partition_set_region_safe</strong>(62 bytes, Stack size 0 btyes, src_partition.o(.text.partition_set_region_safe))<br>
<p><strong><a name="[1a7]"></a>partition_init</strong>(312 bytes, Stack size 344 btyes, src_partition.o(.text.partition_init))<br>
<br>[Stack]<ul><li>Max Depth = 496 
<li>Call Chain = partition_init &rArr; mtb_init &rArr; mtbv_init  &rArr; mtbv_get_part_info  &rArr; get_section_addr  &rArr; get_scn_offset.isra.0  &rArr; mtb_version  </ul>
<br>[Calls]<ul>
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_init
<li><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_partition
<li><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivsi3
<li><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_flash_open
<li><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_flash_info_get
<li><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_flash_close
<li><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</ul>
<br>[Called By]<ul>
<li><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_yoc_init
</ul>
<p><strong><a name="[1a8]"></a>partition_info_get</strong>(44 bytes, Stack size 0 btyes, src_partition.o(.text.partition_info_get))<br>
<br>[Called By]<ul>
<li><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_image_update
<li><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_dfu_flash
<li><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_get_ota_partition_max_size
<li><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_close
<li><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_read
<li><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_write
<li><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_erase
</ul>
<p><strong><a name="[1a9]"></a>partition_open</strong>(92 bytes, Stack size 20 btyes, src_partition.o(.text.partition_open))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = partition_open &rArr; partition_flash_open </ul>
<br>[Calls]<ul>
<li><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_flash_open
</ul>
<br>[Called By]<ul>
<li><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_image_update
<li><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_dfu_flash
<li><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_get_ota_partition_max_size
</ul>
<p><strong><a name="[1aa]"></a>partition_close</strong>(24 bytes, Stack size 8 btyes, src_partition.o(.text.partition_close))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = partition_close &rArr; partition_flash_close </ul>
<br>[Calls]<ul>
<li><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_info_get
<li><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_flash_close
</ul>
<br>[Called By]<ul>
<li><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_image_update
<li><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_dfu_flash
</ul>
<p><strong><a name="[1ab]"></a>partition_read</strong>(50 bytes, Stack size 16 btyes, src_partition.o(.text.partition_read))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = partition_read &rArr; partition_flash_read </ul>
<br>[Calls]<ul>
<li><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_info_get
<li><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_flash_read
</ul>
<br>[Called By]<ul>
<li><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_dfu_flash
</ul>
<p><strong><a name="[1ac]"></a>partition_write</strong>(64 bytes, Stack size 20 btyes, src_partition.o(.text.partition_write))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = partition_write &rArr; partition_flash_write </ul>
<br>[Calls]<ul>
<li><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_info_get
<li><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_flash_write
</ul>
<br>[Called By]<ul>
<li><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_image_update
</ul>
<p><strong><a name="[1ad]"></a>partition_erase</strong>(88 bytes, Stack size 24 btyes, src_partition.o(.text.partition_erase))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = partition_erase &rArr; partition_flash_erase </ul>
<br>[Calls]<ul>
<li><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_info_get
<li><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__divsi3
<li><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivsi3
<li><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_flash_erase
</ul>
<br>[Called By]<ul>
<li><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_dfu_flash
</ul>
<p><strong><a name="[1ae]"></a>partition_get_digest</strong>(212 bytes, Stack size 0 btyes, src_partition.o(.text.partition_get_digest))<br>
<p><strong><a name="[1af]"></a>partition_verify</strong>(22 bytes, Stack size 0 btyes, src_partition.o(.text.partition_verify))<br>
<p><strong><a name="[1b0]"></a>part_flash_open</strong>(16 bytes, Stack size 4 btyes, src_partition_flash.o(.text.part_flash_open))<br>
<br>[Stack]<ul><li>Max Depth = 112 
<li>Call Chain = part_flash_open &rArr; device_open_id &rArr; device_find  &rArr; aos_mutex_new  &rArr; aos_malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_open_id
</ul>
<p><strong><a name="[1b1]"></a>part_flash_close</strong>(18 bytes, Stack size 4 btyes, src_partition_flash.o(.text.part_flash_close))<br>
<br>[Stack]<ul><li>Max Depth = 96 
<li>Call Chain = part_flash_close &rArr; device_close &rArr; device_lock  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_close
</ul>
<p><strong><a name="[1b2]"></a>part_flash_info_get</strong>(52 bytes, Stack size 20 btyes, src_partition_flash.o(.text.part_flash_info_get))<br>
<br>[Stack]<ul><li>Max Depth = 120 
<li>Call Chain = part_flash_info_get &rArr; flash_get_info &rArr; device_lock  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_info
</ul>
<p><strong><a name="[1b3]"></a>part_flash_read</strong>(68 bytes, Stack size 32 btyes, src_partition_flash.o(.text.part_flash_read))<br>
<br>[Stack]<ul><li>Max Depth = 136 
<li>Call Chain = part_flash_read &rArr; flash_read &rArr; device_lock  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_info
<li><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read
</ul>
<p><strong><a name="[1b4]"></a>part_flash_write</strong>(68 bytes, Stack size 32 btyes, src_partition_flash.o(.text.part_flash_write))<br>
<br>[Stack]<ul><li>Max Depth = 136 
<li>Call Chain = part_flash_write &rArr; flash_program &rArr; device_lock  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_info
<li><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_program
</ul>
<p><strong><a name="[1b5]"></a>part_flash_erase</strong>(70 bytes, Stack size 32 btyes, src_partition_flash.o(.text.part_flash_erase))<br>
<br>[Stack]<ul><li>Max Depth = 132 
<li>Call Chain = part_flash_erase &rArr; flash_get_info &rArr; device_lock  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_get_info
<li><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivsi3
<li><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_erase
</ul>
<p><strong><a name="[1b6]"></a>partition_flash_register</strong>(24 bytes, Stack size 0 btyes, src_partition_flash.o(.text.partition_flash_register))<br>
<p><strong><a name="[1b7]"></a>partition_flash_open</strong>(24 bytes, Stack size 4 btyes, src_partition_flash.o(.text.partition_flash_open))<br>
<br>[Called By]<ul>
<li><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_init
<li><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtbv4_init
<li><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_init
<li><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_open
</ul>
<p><strong><a name="[1b8]"></a>partition_flash_close</strong>(24 bytes, Stack size 4 btyes, src_partition_flash.o(.text.partition_flash_close))<br>
<br>[Called By]<ul>
<li><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_init
<li><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtbv4_init
<li><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_init
<li><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_close
</ul>
<p><strong><a name="[1b9]"></a>partition_flash_info_get</strong>(24 bytes, Stack size 4 btyes, src_partition_flash.o(.text.partition_flash_info_get))<br>
<br>[Called By]<ul>
<li><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_init
<li><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtbv4_init
<li><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_init
</ul>
<p><strong><a name="[1ba]"></a>partition_flash_read</strong>(24 bytes, Stack size 8 btyes, src_partition_flash.o(.text.partition_flash_read))<br>
<br>[Called By]<ul>
<li><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_read
</ul>
<p><strong><a name="[1bb]"></a>partition_flash_write</strong>(24 bytes, Stack size 8 btyes, src_partition_flash.o(.text.partition_flash_write))<br>
<br>[Called By]<ul>
<li><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_write
</ul>
<p><strong><a name="[1bc]"></a>partition_flash_erase</strong>(24 bytes, Stack size 4 btyes, src_partition_flash.o(.text.partition_flash_erase))<br>
<br>[Called By]<ul>
<li><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_erase
</ul>
<p><strong><a name="[1bf]"></a>get_length_with_digest_type</strong>(24 bytes, Stack size 0 btyes, src_verify.o(.text.get_length_with_digest_type))<br>
<p><strong><a name="[1c0]"></a>get_length_with_signature_type</strong>(28 bytes, Stack size 0 btyes, src_verify.o(.text.get_length_with_signature_type))<br>
<p><strong><a name="[1c1]"></a>hash_calc_start</strong>(118 bytes, Stack size 0 btyes, src_verify.o(.text.hash_calc_start))<br>
<p><strong><a name="[1c2]"></a>signature_verify_start</strong>(148 bytes, Stack size 0 btyes, src_verify.o(.text.signature_verify_start))<br>
<p><strong><a name="[1c3]"></a>crc32_calc_start</strong>(32 bytes, Stack size 0 btyes, src_verify.o(.text.crc32_calc_start))<br>
<p><strong><a name="[1c4]"></a>crc32</strong>(48 bytes, Stack size 0 btyes, utils_crc32.o(.text.crc32))<br>
<p><strong><a name="[1c5]"></a>dump_data</strong>(68 bytes, Stack size 0 btyes, utils_misc.o(.text.dump_data))<br>
<p><strong><a name="[1c6]"></a>sc_srv_authenticate</strong>(4 bytes, Stack size 0 btyes, service_iot_auth.o(.text.sc_srv_authenticate))<br>
<p><strong><a name="[1c7]"></a>sc_get_bootkey</strong>(4 bytes, Stack size 0 btyes, service_iot_keymgr.o(.text.sc_get_bootkey))<br>
<p><strong><a name="[1c8]"></a>sc_verify_bootkey</strong>(4 bytes, Stack size 0 btyes, service_iot_keymgr.o(.text.sc_verify_bootkey))<br>
<p><strong><a name="[1c9]"></a>sc_srv_memprot</strong>(4 bytes, Stack size 0 btyes, service_iot_memprot.o(.text.sc_srv_memprot))<br>
<p><strong><a name="[1ca]"></a>check_pass_pop_out</strong>(20 bytes, Stack size 0 btyes, ulog.o(.text.check_pass_pop_out))<br>
<p><strong><a name="[1cb]"></a>ulog_stop_filter_level</strong>(12 bytes, Stack size 0 btyes, ulog.o(.text.ulog_stop_filter_level))<br>
<p><strong><a name="[1cc]"></a>aos_log_hexdump</strong>(120 bytes, Stack size 0 btyes, ulog.o(.text.aos_log_hexdump))<br>
<p><strong><a name="[1cd]"></a>get_sync_stop_level</strong>(68 bytes, Stack size 0 btyes, ulog.o(.text.get_sync_stop_level))<br>
<p><strong><a name="[1ce]"></a>ulog</strong>(144 bytes, Stack size 40 btyes, ulog.o(.text.ulog))<br>
<br>[Stack]<ul><li>Max Depth = 120 
<li>Call Chain = ulog &rArr; log_get_mutex &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_get_mutex
<li><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_format_time
<li><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[a9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
<li><a href="#[aaa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<li><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_release_mutex
</ul>
<br>[Called By]<ul>
<li><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_handle_update_request
<li><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_parse_pdu
<li><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_check_firmware
<li><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_update_timer_cb
<li><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ble_ais_service_write
<li><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_version_appver_get
<li><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_image_update
<li><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_dfu_flash
<li><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_get_ota_partition_max_size
<li><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<li><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_yoc_init
<li><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_scan_schd_scan_enter
<li><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_scan_timer
<li><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_scan_schd_action
<li><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_uart_loop
</ul>
<p><strong><a name="[1cf]"></a>on_filter_level_changes</strong>(52 bytes, Stack size 0 btyes, ulog.o(.text.on_filter_level_changes))<br>
<br>[Called By]<ul>
<li><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_set_log_level
<li><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_init
</ul>
<p><strong><a name="[1d0]"></a>aos_set_log_level</strong>(40 bytes, Stack size 4 btyes, ulog.o(.text.aos_set_log_level))<br>
<br>[Calls]<ul>
<li><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_filter_level_changes
</ul>
<br>[Called By]<ul>
<li><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_yoc_init
</ul>
<p><strong><a name="[1d1]"></a>on_sync_filter_level_change</strong>(44 bytes, Stack size 0 btyes, ulog.o(.text.on_sync_filter_level_change))<br>
<p><strong><a name="[1d2]"></a>on_filter_change</strong>(16 bytes, Stack size 0 btyes, ulog.o(.text.on_filter_change))<br>
<p><strong><a name="[1d3]"></a>ulog_init</strong>(32 bytes, Stack size 8 btyes, ulog_init.o(.text.ulog_init))<br>
<br>[Stack]<ul><li>Max Depth = 96 
<li>Call Chain = ulog_init &rArr; log_init_mutex &rArr; aos_mutex_new  &rArr; aos_malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;log_init_mutex
<li><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;on_filter_level_changes
</ul>
<br>[Called By]<ul>
<li><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_yoc_init
</ul>
<p><strong><a name="[1d4]"></a>log_init_mutex</strong>(16 bytes, Stack size 4 btyes, ulog_utility.o(.text.log_init_mutex))<br>
<br>[Stack]<ul><li>Max Depth = 88 
<li>Call Chain = log_init_mutex &rArr; aos_mutex_new &rArr; aos_malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
</ul>
<br>[Called By]<ul>
<li><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_init
</ul>
<p><strong><a name="[1d5]"></a>log_get_mutex</strong>(24 bytes, Stack size 4 btyes, ulog_utility.o(.text.log_get_mutex))<br>
<br>[Stack]<ul><li>Max Depth = 80 
<li>Call Chain = log_get_mutex &rArr; aos_mutex_lock &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
</ul>
<br>[Called By]<ul>
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog
</ul>
<p><strong><a name="[1d6]"></a>log_release_mutex</strong>(16 bytes, Stack size 4 btyes, ulog_utility.o(.text.log_release_mutex))<br>
<br>[Stack]<ul><li>Max Depth = 68 
<li>Call Chain = log_release_mutex &rArr; aos_mutex_unlock &rArr; krhino_mutex_unlock  &rArr; mutex_release.isra.1  &rArr; task_pri_change  &rArr; ready_list_rm  &rArr; k_err_proc_debug  </ul>
<br>[Calls]<ul>
<li><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog
</ul>
<p><strong><a name="[1d7]"></a>ulog_format_time</strong>(76 bytes, Stack size 28 btyes, ulog_utility.o(.text.ulog_format_time))<br>
<br>[Stack]<ul><li>Max Depth = 80 
<li>Call Chain = ulog_format_time &rArr; aos_now_ms &rArr; krhino_sys_time_get  &rArr; __udivdi3  </ul>
<br>[Calls]<ul>
<li><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<li><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__divdi3
<li><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__moddi3
<li><a href="#[aac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog
</ul>
<p><strong><a name="[1d8]"></a>trim_file_path</strong>(52 bytes, Stack size 0 btyes, ulog_utility.o(.text.trim_file_path))<br>
<p><strong><a name="[1d9]"></a>ulog_man</strong>(6 bytes, Stack size 0 btyes, ulog_utility.o(.text.ulog_man))<br>
<p><strong><a name="[1e0]"></a>eventlist_init</strong>(34 bytes, Stack size 0 btyes, src_event.o(.text.eventlist_init))<br>
<p><strong><a name="[1e1]"></a>eventlist_uninit</strong>(134 bytes, Stack size 0 btyes, src_event.o(.text.eventlist_uninit))<br>
<p><strong><a name="[1e2]"></a>eventlist_subscribe_fd</strong>(20 bytes, Stack size 0 btyes, src_event.o(.text.eventlist_subscribe_fd))<br>
<p><strong><a name="[1e3]"></a>eventlist_subscribe</strong>(18 bytes, Stack size 0 btyes, src_event.o(.text.eventlist_subscribe))<br>
<p><strong><a name="[1e4]"></a>eventlist_unsubscribe_fd</strong>(20 bytes, Stack size 0 btyes, src_event.o(.text.eventlist_unsubscribe_fd))<br>
<p><strong><a name="[1e5]"></a>eventlist_unsubscribe</strong>(18 bytes, Stack size 0 btyes, src_event.o(.text.eventlist_unsubscribe))<br>
<p><strong><a name="[1e6]"></a>eventlist_publish</strong>(20 bytes, Stack size 0 btyes, src_event.o(.text.eventlist_publish))<br>
<p><strong><a name="[1e7]"></a>eventlist_publish_fd</strong>(22 bytes, Stack size 0 btyes, src_event.o(.text.eventlist_publish_fd))<br>
<p><strong><a name="[1e8]"></a>eventlist_remove</strong>(20 bytes, Stack size 0 btyes, src_event.o(.text.eventlist_remove))<br>
<p><strong><a name="[1e9]"></a>eventlist_remove_fd</strong>(22 bytes, Stack size 0 btyes, src_event.o(.text.eventlist_remove_fd))<br>
<p><strong><a name="[1ea]"></a>eventlist_setfd</strong>(124 bytes, Stack size 0 btyes, src_event.o(.text.eventlist_setfd))<br>
<p><strong><a name="[1ed]"></a>event_service_init</strong>(144 bytes, Stack size 0 btyes, src_event_svr.o(.text.event_service_init))<br>
<p><strong><a name="[1ee]"></a>event_publish_fd</strong>(24 bytes, Stack size 0 btyes, src_event_svr.o(.text.event_publish_fd))<br>
<p><strong><a name="[1ef]"></a>event_subscribe_fd</strong>(24 bytes, Stack size 0 btyes, src_event_svr.o(.text.event_subscribe_fd))<br>
<p><strong><a name="[1f0]"></a>event_unsubscribe_fd</strong>(24 bytes, Stack size 0 btyes, src_event_svr.o(.text.event_unsubscribe_fd))<br>
<p><strong><a name="[1f1]"></a>event_publish</strong>(26 bytes, Stack size 0 btyes, src_event_svr.o(.text.event_publish))<br>
<p><strong><a name="[1f3]"></a>event_publish_delay</strong>(24 bytes, Stack size 0 btyes, src_event_svr.o(.text.event_publish_delay))<br>
<p><strong><a name="[1f4]"></a>event_subscribe</strong>(24 bytes, Stack size 0 btyes, src_event_svr.o(.text.event_subscribe))<br>
<p><strong><a name="[1f5]"></a>event_unsubscribe</strong>(24 bytes, Stack size 0 btyes, src_event_svr.o(.text.event_unsubscribe))<br>
<p><strong><a name="[1f7]"></a>rpc_init</strong>(72 bytes, Stack size 0 btyes, src_rpc.o(.text.rpc_init))<br>
<p><strong><a name="[1f8]"></a>rpc_wait</strong>(38 bytes, Stack size 0 btyes, src_rpc.o(.text.rpc_wait))<br>
<p><strong><a name="[1f9]"></a>rpc_free</strong>(14 bytes, Stack size 0 btyes, src_rpc.o(.text.rpc_free))<br>
<p><strong><a name="[1fa]"></a>rpc_deinit</strong>(102 bytes, Stack size 0 btyes, src_rpc.o(.text.rpc_deinit))<br>
<p><strong><a name="[1fb]"></a>rpc_reply</strong>(38 bytes, Stack size 0 btyes, src_rpc.o(.text.rpc_reply))<br>
<p><strong><a name="[1fc]"></a>rpc_put_reset</strong>(36 bytes, Stack size 0 btyes, src_rpc.o(.text.rpc_put_reset))<br>
<p><strong><a name="[1fd]"></a>rpc_get_reset</strong>(12 bytes, Stack size 0 btyes, src_rpc.o(.text.rpc_get_reset))<br>
<p><strong><a name="[1fe]"></a>rpc_put_buffer</strong>(134 bytes, Stack size 0 btyes, src_rpc.o(.text.rpc_put_buffer))<br>
<p><strong><a name="[1ff]"></a>rpc_put_int</strong>(18 bytes, Stack size 0 btyes, src_rpc.o(.text.rpc_put_int))<br>
<p><strong><a name="[200]"></a>rpc_put_uint8</strong>(22 bytes, Stack size 0 btyes, src_rpc.o(.text.rpc_put_uint8))<br>
<p><strong><a name="[201]"></a>rpc_put_double</strong>(20 bytes, Stack size 0 btyes, src_rpc.o(.text.rpc_put_double))<br>
<p><strong><a name="[202]"></a>rpc_put_point</strong>(18 bytes, Stack size 0 btyes, src_rpc.o(.text.rpc_put_point))<br>
<p><strong><a name="[203]"></a>rpc_put_string</strong>(24 bytes, Stack size 0 btyes, src_rpc.o(.text.rpc_put_string))<br>
<p><strong><a name="[204]"></a>rpc_get_buffer</strong>(60 bytes, Stack size 0 btyes, src_rpc.o(.text.rpc_get_buffer))<br>
<p><strong><a name="[205]"></a>rpc_get_int</strong>(32 bytes, Stack size 0 btyes, src_rpc.o(.text.rpc_get_int))<br>
<p><strong><a name="[206]"></a>rpc_get_uint8</strong>(36 bytes, Stack size 0 btyes, src_rpc.o(.text.rpc_get_uint8))<br>
<p><strong><a name="[207]"></a>rpc_get_double</strong>(34 bytes, Stack size 0 btyes, src_rpc.o(.text.rpc_get_double))<br>
<p><strong><a name="[208]"></a>rpc_get_point</strong>(32 bytes, Stack size 0 btyes, src_rpc.o(.text.rpc_get_point))<br>
<p><strong><a name="[209]"></a>rpc_get_string</strong>(10 bytes, Stack size 0 btyes, src_rpc.o(.text.rpc_get_string))<br>
<p><strong><a name="[20a]"></a>uservice_lock</strong>(20 bytes, Stack size 0 btyes, src_uservice.o(.text.uservice_lock))<br>
<p><strong><a name="[20b]"></a>uservice_unlock</strong>(16 bytes, Stack size 0 btyes, src_uservice.o(.text.uservice_unlock))<br>
<p><strong><a name="[20c]"></a>uservice_call</strong>(120 bytes, Stack size 0 btyes, src_uservice.o(.text.uservice_call))<br>
<p><strong><a name="[20e]"></a>uservice_call_sync</strong>(100 bytes, Stack size 0 btyes, src_uservice.o(.text.uservice_call_sync))<br>
<p><strong><a name="[20f]"></a>uservice_call_async</strong>(64 bytes, Stack size 0 btyes, src_uservice.o(.text.uservice_call_async))<br>
<p><strong><a name="[210]"></a>uservice_new</strong>(26 bytes, Stack size 0 btyes, src_uservice.o(.text.uservice_new))<br>
<p><strong><a name="[211]"></a>uservice_destroy</strong>(8 bytes, Stack size 0 btyes, src_uservice.o(.text.uservice_destroy))<br>
<p><strong><a name="[212]"></a>uservice_process</strong>(46 bytes, Stack size 0 btyes, src_uservice.o(.text.uservice_process))<br>
<p><strong><a name="[213]"></a>uservice_subscribe</strong>(20 bytes, Stack size 0 btyes, src_uservice.o(.text.uservice_subscribe))<br>
<p><strong><a name="[216]"></a>utask_new</strong>(196 bytes, Stack size 0 btyes, src_utask.o(.text.utask_new))<br>
<p><strong><a name="[217]"></a>utask_add</strong>(46 bytes, Stack size 0 btyes, src_utask.o(.text.utask_add))<br>
<p><strong><a name="[218]"></a>utask_remove</strong>(42 bytes, Stack size 0 btyes, src_utask.o(.text.utask_remove))<br>
<p><strong><a name="[219]"></a>utask_join</strong>(108 bytes, Stack size 0 btyes, src_utask.o(.text.utask_join))<br>
<p><strong><a name="[21a]"></a>utask_destroy</strong>(8 bytes, Stack size 0 btyes, src_utask.o(.text.utask_destroy))<br>
<p><strong><a name="[21b]"></a>utask_lock</strong>(14 bytes, Stack size 0 btyes, src_utask.o(.text.utask_lock))<br>
<p><strong><a name="[21c]"></a>utask_unlock</strong>(10 bytes, Stack size 0 btyes, src_utask.o(.text.utask_unlock))<br>
<p><strong><a name="[21d]"></a>utask_set_softwdt_timeout</strong>(32 bytes, Stack size 0 btyes, src_utask.o(.text.utask_set_softwdt_timeout))<br>
<p><strong><a name="[21e]"></a>task_get</strong>(68 bytes, Stack size 0 btyes, src_utask.o(.text.task_get))<br>
<p><strong><a name="[21f]"></a>tasks_debug</strong>(32 bytes, Stack size 0 btyes, src_utask.o(.text.tasks_debug))<br>
<p><strong><a name="[222]"></a>bas_init</strong>(80 bytes, Stack size 0 btyes, ble_profiles_bas.o(.text.bas_init))<br>
<p><strong><a name="[223]"></a>bas_level_update</strong>(72 bytes, Stack size 0 btyes, ble_profiles_bas.o(.text.bas_level_update))<br>
<p><strong><a name="[226]"></a>dis_init</strong>(116 bytes, Stack size 0 btyes, ble_profiles_dis.o(.text.dis_init))<br>
<p><strong><a name="[227]"></a>init_hids_call_func</strong>(32 bytes, Stack size 0 btyes, ble_profiles_hids.o(.text.init_hids_call_func))<br>
<p><strong><a name="[228]"></a>execute_hids_call_func</strong>(36 bytes, Stack size 0 btyes, ble_profiles_hids.o(.text.execute_hids_call_func))<br>
<p><strong><a name="[22a]"></a>hids_init</strong>(80 bytes, Stack size 0 btyes, ble_profiles_hids.o(.text.hids_init))<br>
<p><strong><a name="[22b]"></a>hids_notify_send</strong>(48 bytes, Stack size 0 btyes, ble_profiles_hids.o(.text.hids_notify_send))<br>
<p><strong><a name="[22c]"></a>hids_key_send</strong>(36 bytes, Stack size 0 btyes, ble_profiles_hids.o(.text.hids_key_send))<br>
<p><strong><a name="[22d]"></a>set_data_map</strong>(32 bytes, Stack size 0 btyes, ble_profiles_hids.o(.text.set_data_map))<br>
<p><strong><a name="[230]"></a>hrs_init</strong>(80 bytes, Stack size 0 btyes, ble_profiles_hrs.o(.text.hrs_init))<br>
<p><strong><a name="[231]"></a>hrs_measure_level_update</strong>(62 bytes, Stack size 0 btyes, ble_profiles_hrs.o(.text.hrs_measure_level_update))<br>
<p><strong><a name="[232]"></a>ibeacon_start</strong>(220 bytes, Stack size 0 btyes, ble_profiles_ibeacons.o(.text.ibeacon_start))<br>
<p><strong><a name="[233]"></a>ibeacon_stop</strong>(8 bytes, Stack size 0 btyes, ble_profiles_ibeacons.o(.text.ibeacon_stop))<br>
<p><strong><a name="[239]"></a>event_char_write</strong>(684 bytes, Stack size 0 btyes, ble_profiles_ota_server.o(.text.event_char_write))<br>
<p><strong><a name="[23a]"></a>event_char_read</strong>(480 bytes, Stack size 0 btyes, ble_profiles_ota_server.o(.text.event_char_read))<br>
<p><strong><a name="[23b]"></a>event_char_ccc_change</strong>(44 bytes, Stack size 0 btyes, ble_profiles_ota_server.o(.text.event_char_ccc_change))<br>
<p><strong><a name="[23d]"></a>ble_ota_process</strong>(532 bytes, Stack size 0 btyes, ble_profiles_ota_server.o(.text.ble_ota_process))<br>
<p><strong><a name="[23e]"></a>ble_ota_init</strong>(148 bytes, Stack size 0 btyes, ble_profiles_ota_server.o(.text.ble_ota_init))<br>
<p><strong><a name="[23f]"></a>find_uart_uuid_by_ad</strong>(108 bytes, Stack size 0 btyes, ble_profiles_uart_client.o(.text.find_uart_uuid_by_ad))<br>
<p><strong><a name="[240]"></a>found_dev_get</strong>(68 bytes, Stack size 0 btyes, ble_profiles_uart_client.o(.text.found_dev_get))<br>
<p><strong><a name="[241]"></a>uart_client_scan_start</strong>(40 bytes, Stack size 0 btyes, ble_profiles_uart_client.o(.text.uart_client_scan_start))<br>
<p><strong><a name="[243]"></a>uart_client_send</strong>(206 bytes, Stack size 0 btyes, ble_profiles_uart_client.o(.text.uart_client_send))<br>
<p><strong><a name="[244]"></a>uart_client_conn</strong>(60 bytes, Stack size 0 btyes, ble_profiles_uart_client.o(.text.uart_client_conn))<br>
<p><strong><a name="[245]"></a>uart_client_disconn</strong>(44 bytes, Stack size 0 btyes, ble_profiles_uart_client.o(.text.uart_client_disconn))<br>
<p><strong><a name="[246]"></a>uart_client_init</strong>(72 bytes, Stack size 0 btyes, ble_profiles_uart_client.o(.text.uart_client_init))<br>
<p><strong><a name="[247]"></a>uart_client_conn_param_update</strong>(64 bytes, Stack size 0 btyes, ble_profiles_uart_client.o(.text.uart_client_conn_param_update))<br>
<p><strong><a name="[249]"></a>uart_server_disconn</strong>(32 bytes, Stack size 0 btyes, ble_profiles_uart_server.o(.text.uart_server_disconn))<br>
<p><strong><a name="[24a]"></a>uart_server_send</strong>(204 bytes, Stack size 0 btyes, ble_profiles_uart_server.o(.text.uart_server_send))<br>
<p><strong><a name="[24b]"></a>uart_server_init</strong>(68 bytes, Stack size 0 btyes, ble_profiles_uart_server.o(.text.uart_server_init))<br>
<p><strong><a name="[24c]"></a>uart_server_adv_control</strong>(36 bytes, Stack size 0 btyes, ble_profiles_uart_server.o(.text.uart_server_adv_control))<br>
<p><strong><a name="[24d]"></a>uart_server_conn_param_update</strong>(64 bytes, Stack size 0 btyes, ble_profiles_uart_server.o(.text.uart_server_conn_param_update))<br>
<p><strong><a name="[250]"></a>prng_init</strong>(4 bytes, Stack size 0 btyes, bt_crypto.o(.text.prng_init))<br>
<p><strong><a name="[251]"></a>bt_crypto_rand</strong>(80 bytes, Stack size 24 btyes, bt_crypto.o(.text.bt_crypto_rand))<br>
<br>[Stack]<ul><li>Max Depth = 120 
<li>Call Chain = bt_crypto_rand &rArr; hci_api_le_rand &rArr; TRNG_Rand  &rArr; TRNG_INIT  &rArr; TRNG_Output  </ul>
<br>[Calls]<ul>
<li><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_api_le_rand
</ul>
<br>[Called By]<ul>
<li><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rand
</ul>
<p><strong><a name="[252]"></a>bt_crypto_encrypt_le</strong>(88 bytes, Stack size 0 btyes, bt_crypto.o(.text.bt_crypto_encrypt_le))<br>
<p><strong><a name="[253]"></a>bt_crypto_encrypt_be</strong>(44 bytes, Stack size 0 btyes, bt_crypto.o(.text.bt_crypto_encrypt_be))<br>
<p><strong><a name="[254]"></a>bt_crypto_decrypt_be</strong>(46 bytes, Stack size 0 btyes, bt_crypto_bt_crypto.o(.text.bt_crypto_decrypt_be))<br>
<p><strong><a name="[255]"></a>bt_crypto_cmac_setup</strong>(124 bytes, Stack size 0 btyes, bt_crypto.o(.text.bt_crypto_cmac_setup))<br>
<p><strong><a name="[256]"></a>bt_crypto_cmac_update</strong>(216 bytes, Stack size 0 btyes, bt_crypto.o(.text.bt_crypto_cmac_update))<br>
<p><strong><a name="[257]"></a>bt_crypto_cmac_finish</strong>(114 bytes, Stack size 0 btyes, bt_crypto.o(.text.bt_crypto_cmac_finish))<br>
<p><strong><a name="[258]"></a>bt_crypto_aes_cmac</strong>(70 bytes, Stack size 0 btyes, bt_crypto.o(.text.bt_crypto_aes_cmac))<br>
<p><strong><a name="[25c]"></a>tc_aes128_set_decrypt_key</strong>(8 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_aes_decrypt.o(.text.tc_aes128_set_decrypt_key))<br>
<p><strong><a name="[25d]"></a>tc_aes_decrypt</strong>(220 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_aes_decrypt.o(.text.tc_aes_decrypt))<br>
<p><strong><a name="[261]"></a>tc_aes128_set_encrypt_key</strong>(176 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_aes_encrypt.o(.text.tc_aes128_set_encrypt_key))<br>
<p><strong><a name="[262]"></a>tc_aes_encrypt</strong>(224 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_aes_encrypt.o(.text.tc_aes_encrypt))<br>
<p><strong><a name="[263]"></a>tc_cbc_mode_encrypt</strong>(152 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_cbc_mode.o(.text.tc_cbc_mode_encrypt))<br>
<p><strong><a name="[264]"></a>tc_cbc_mode_decrypt</strong>(122 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_cbc_mode.o(.text.tc_cbc_mode_decrypt))<br>
<p><strong><a name="[267]"></a>tc_ccm_config</strong>(48 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ccm_mode.o(.text.tc_ccm_config))<br>
<p><strong><a name="[268]"></a>tc_ccm_generation_encryption</strong>(282 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ccm_mode.o(.text.tc_ccm_generation_encryption))<br>
<p><strong><a name="[269]"></a>tc_ccm_decryption_verification</strong>(348 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ccm_mode.o(.text.tc_ccm_decryption_verification))<br>
<p><strong><a name="[26a]"></a>gf_double</strong>(46 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_cmac_mode.o(.text.gf_double))<br>
<p><strong><a name="[26b]"></a>tc_cmac_erase</strong>(22 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_cmac_mode.o(.text.tc_cmac_erase))<br>
<p><strong><a name="[26c]"></a>tc_cmac_init</strong>(50 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_cmac_mode.o(.text.tc_cmac_init))<br>
<p><strong><a name="[26d]"></a>tc_cmac_setup</strong>(90 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_cmac_mode.o(.text.tc_cmac_setup))<br>
<p><strong><a name="[26e]"></a>tc_cmac_update</strong>(222 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_cmac_mode.o(.text.tc_cmac_update))<br>
<p><strong><a name="[26f]"></a>tc_cmac_final</strong>(106 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_cmac_mode.o(.text.tc_cmac_final))<br>
<p><strong><a name="[270]"></a>tc_ctr_mode</strong>(176 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ctr_mode.o(.text.tc_ctr_mode))<br>
<p><strong><a name="[273]"></a>tc_ctr_prng_init</strong>(156 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ctr_prng.o(.text.tc_ctr_prng_init))<br>
<p><strong><a name="[274]"></a>tc_ctr_prng_reseed</strong>(122 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ctr_prng.o(.text.tc_ctr_prng_reseed))<br>
<p><strong><a name="[275]"></a>tc_ctr_prng_generate</strong>(196 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ctr_prng.o(.text.tc_ctr_prng_generate))<br>
<p><strong><a name="[276]"></a>tc_ctr_prng_uninstantiate</strong>(42 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ctr_prng.o(.text.tc_ctr_prng_uninstantiate))<br>
<p><strong><a name="[277]"></a>uECC_vli_modAdd</strong>(48 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_vli_modAdd))<br>
<p><strong><a name="[278]"></a>uECC_vli_modSub</strong>(34 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_vli_modSub))<br>
<p><strong><a name="[279]"></a>uECC_vli_mmod</strong>(312 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_vli_mmod))<br>
<p><strong><a name="[27a]"></a>uECC_vli_modMult</strong>(36 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_vli_modMult))<br>
<p><strong><a name="[27b]"></a>uECC_vli_modMult_fast</strong>(32 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_vli_modMult_fast))<br>
<p><strong><a name="[27d]"></a>double_jacobian_default</strong>(342 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.double_jacobian_default))<br>
<p><strong><a name="[27e]"></a>x_side_default</strong>(92 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.x_side_default))<br>
<p><strong><a name="[280]"></a>uECC_vli_isZero</strong>(28 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_vli_isZero))<br>
<p><strong><a name="[281]"></a>uECC_vli_testBit</strong>(20 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_vli_testBit))<br>
<p><strong><a name="[282]"></a>uECC_vli_numBits</strong>(66 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_vli_numBits))<br>
<p><strong><a name="[283]"></a>uECC_vli_set</strong>(24 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_vli_set))<br>
<p><strong><a name="[284]"></a>uECC_vli_cmp_unsafe</strong>(42 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_vli_cmp_unsafe))<br>
<p><strong><a name="[285]"></a>uECC_vli_equal</strong>(40 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_vli_equal))<br>
<p><strong><a name="[286]"></a>cond_set</strong>(12 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.cond_set))<br>
<p><strong><a name="[287]"></a>uECC_vli_sub</strong>(66 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_vli_sub))<br>
<p><strong><a name="[288]"></a>vli_mmod_fast_secp256r1</strong>(448 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.vli_mmod_fast_secp256r1))<br>
<p><strong><a name="[289]"></a>uECC_vli_cmp</strong>(48 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_vli_cmp))<br>
<p><strong><a name="[28e]"></a>uECC_set_rng</strong>(12 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_set_rng))<br>
<p><strong><a name="[28f]"></a>uECC_get_rng</strong>(12 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_get_rng))<br>
<p><strong><a name="[290]"></a>uECC_curve_private_key_size</strong>(16 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_curve_private_key_size))<br>
<p><strong><a name="[291]"></a>uECC_curve_public_key_size</strong>(8 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_curve_public_key_size))<br>
<p><strong><a name="[292]"></a>uECC_vli_clear</strong>(20 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_vli_clear))<br>
<p><strong><a name="[293]"></a>uECC_vli_modInv</strong>(278 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_vli_modInv))<br>
<p><strong><a name="[294]"></a>uECC_secp256r1</strong>(8 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_secp256r1))<br>
<p><strong><a name="[295]"></a>EccPoint_isZero</strong>(14 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.EccPoint_isZero))<br>
<p><strong><a name="[296]"></a>apply_z</strong>(62 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.apply_z))<br>
<p><strong><a name="[297]"></a>XYcZ_add</strong>(200 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.XYcZ_add))<br>
<p><strong><a name="[298]"></a>EccPoint_mult</strong>(428 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.EccPoint_mult))<br>
<p><strong><a name="[299]"></a>regularize_k</strong>(96 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.regularize_k))<br>
<p><strong><a name="[29a]"></a>EccPoint_compute_public_key</strong>(78 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.EccPoint_compute_public_key))<br>
<p><strong><a name="[29b]"></a>uECC_vli_nativeToBytes</strong>(52 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_vli_nativeToBytes))<br>
<p><strong><a name="[29c]"></a>uECC_vli_bytesToNative</strong>(80 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_vli_bytesToNative))<br>
<p><strong><a name="[29d]"></a>uECC_generate_random_int</strong>(124 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_generate_random_int))<br>
<p><strong><a name="[29e]"></a>uECC_valid_point</strong>(120 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_valid_point))<br>
<p><strong><a name="[29f]"></a>uECC_valid_public_key</strong>(72 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_valid_public_key))<br>
<p><strong><a name="[2a0]"></a>uECC_compute_public_key</strong>(134 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_compute_public_key))<br>
<p><strong><a name="[2a1]"></a>uECC_make_key_with_d</strong>(108 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc_dh.o(.text.uECC_make_key_with_d))<br>
<p><strong><a name="[2a2]"></a>uECC_make_key</strong>(160 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc_dh.o(.text.uECC_make_key))<br>
<p><strong><a name="[2a3]"></a>uECC_shared_secret</strong>(206 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc_dh.o(.text.uECC_shared_secret))<br>
<p><strong><a name="[2a5]"></a>uECC_sign_with_k</strong>(350 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc_dsa.o(.text.uECC_sign_with_k))<br>
<p><strong><a name="[2a6]"></a>uECC_sign</strong>(114 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc_dsa.o(.text.uECC_sign))<br>
<p><strong><a name="[2a7]"></a>uECC_verify</strong>(702 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc_dsa.o(.text.uECC_verify))<br>
<p><strong><a name="[2a9]"></a>tc_hmac_set_key</strong>(148 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_hmac.o(.text.tc_hmac_set_key))<br>
<p><strong><a name="[2aa]"></a>tc_hmac_init</strong>(32 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_hmac.o(.text.tc_hmac_init))<br>
<p><strong><a name="[2ab]"></a>tc_hmac_update</strong>(18 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_hmac.o(.text.tc_hmac_update))<br>
<p><strong><a name="[2ac]"></a>tc_hmac_final</strong>(80 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_hmac.o(.text.tc_hmac_final))<br>
<p><strong><a name="[2ae]"></a>tc_hmac_prng_init</strong>(76 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_hmac_prng.o(.text.tc_hmac_prng_init))<br>
<p><strong><a name="[2af]"></a>tc_hmac_prng_reseed</strong>(58 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_hmac_prng.o(.text.tc_hmac_prng_reseed))<br>
<p><strong><a name="[2b0]"></a>tc_hmac_prng_generate</strong>(134 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_hmac_prng.o(.text.tc_hmac_prng_generate))<br>
<p><strong><a name="[2b2]"></a>tc_sha256_init</strong>(88 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_sha256.o(.text.tc_sha256_init))<br>
<p><strong><a name="[2b3]"></a>tc_sha256_update</strong>(98 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_sha256.o(.text.tc_sha256_update))<br>
<p><strong><a name="[2b4]"></a>tc_sha256_final</strong>(198 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_sha256.o(.text.tc_sha256_final))<br>
<p><strong><a name="[2b5]"></a>_copy</strong>(26 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_utils.o(.text._copy))<br>
<p><strong><a name="[2b6]"></a>_set</strong>(8 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_utils.o(.text._set))<br>
<p><strong><a name="[2b7]"></a>_double_byte</strong>(14 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_utils.o(.text._double_byte))<br>
<p><strong><a name="[2b8]"></a>_compare</strong>(28 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_utils.o(.text._compare))<br>
<p><strong><a name="[2c5]"></a>mtu_exchange_cb</strong>(2 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.mtu_exchange_cb))<br>
<p><strong><a name="[2c6]"></a>gatt_read_cb</strong>(124 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.gatt_read_cb))<br>
<p><strong><a name="[2d2]"></a>UUID_EQUAL</strong>(60 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.UUID_EQUAL))<br>
<p><strong><a name="[2d3]"></a>get_uuid_val</strong>(30 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.get_uuid_val))<br>
<p><strong><a name="[2d4]"></a>ble_stack_iocapability_set</strong>(176 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_iocapability_set))<br>
<p><strong><a name="[2d5]"></a>ble_stack_event_register</strong>(40 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_event_register))<br>
<p><strong><a name="[2d6]"></a>ble_stack_adv_start</strong>(308 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_adv_start))<br>
<p><strong><a name="[2d7]"></a>ble_stack_adv_stop</strong>(28 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_adv_stop))<br>
<p><strong><a name="[2d8]"></a>ble_stack_scan_start</strong>(112 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_scan_start))<br>
<p><strong><a name="[2d9]"></a>ble_stack_scan_stop</strong>(28 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_scan_stop))<br>
<p><strong><a name="[2da]"></a>uuid_compare</strong>(8 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.uuid_compare))<br>
<p><strong><a name="[2db]"></a>ble_stack_gatt_registe_service</strong>(468 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_gatt_registe_service))<br>
<p><strong><a name="[2dc]"></a>ble_stack_gatt_notificate</strong>(100 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_gatt_notificate))<br>
<p><strong><a name="[2dd]"></a>ble_stack_gatt_indicate</strong>(100 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_gatt_indicate))<br>
<p><strong><a name="[2de]"></a>ble_adv_timeout_cb</strong>(16 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_adv_timeout_cb))<br>
<p><strong><a name="[2e0]"></a>ble_stack_gatt_mtu_get</strong>(46 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_gatt_mtu_get))<br>
<p><strong><a name="[2e1]"></a>ble_stack_gatt_mtu_exchange</strong>(60 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_gatt_mtu_exchange))<br>
<p><strong><a name="[2e2]"></a>ble_stack_gatt_discovery</strong>(212 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_gatt_discovery))<br>
<p><strong><a name="[2e3]"></a>ble_stack_gatt_notify_cb</strong>(60 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_gatt_notify_cb))<br>
<p><strong><a name="[2e4]"></a>ble_stack_gatt_write</strong>(192 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_gatt_write))<br>
<p><strong><a name="[2e5]"></a>ble_stack_gatt_read</strong>(116 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_gatt_read))<br>
<p><strong><a name="[2e6]"></a>ble_stack_gatt_read_multiple</strong>(120 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_gatt_read_multiple))<br>
<p><strong><a name="[2e7]"></a>ble_stack_get_local_addr</strong>(40 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_get_local_addr))<br>
<p><strong><a name="[2e8]"></a>ble_stack_connect</strong>(124 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_connect))<br>
<p><strong><a name="[2e9]"></a>ble_stack_disconnect</strong>(42 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_disconnect))<br>
<p><strong><a name="[2ea]"></a>ble_stack_connect_info_get</strong>(152 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_connect_info_get))<br>
<p><strong><a name="[2eb]"></a>ble_stack_check_conn_params</strong>(58 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_check_conn_params))<br>
<p><strong><a name="[2ec]"></a>ble_stack_security</strong>(44 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_security))<br>
<p><strong><a name="[2ed]"></a>ble_stack_pref_phy_set</strong>(6 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_pref_phy_set))<br>
<p><strong><a name="[2ee]"></a>ble_stack_connect_param_update</strong>(48 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_connect_param_update))<br>
<p><strong><a name="[2ef]"></a>ble_stack_smp_passkey_entry</strong>(44 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_smp_passkey_entry))<br>
<p><strong><a name="[2f0]"></a>ble_stack_smp_cancel</strong>(40 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_smp_cancel))<br>
<p><strong><a name="[2f1]"></a>ble_stack_smp_passkey_confirm</strong>(40 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_smp_passkey_confirm))<br>
<p><strong><a name="[2f2]"></a>ble_stack_smp_pairing_confirm</strong>(40 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_smp_pairing_confirm))<br>
<p><strong><a name="[2f3]"></a>ble_stack_enc_key_size_get</strong>(30 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_enc_key_size_get))<br>
<p><strong><a name="[2f4]"></a>ble_stack_setting_load</strong>(8 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_setting_load))<br>
<p><strong><a name="[2f5]"></a>ble_stack_init</strong>(160 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_init))<br>
<p><strong><a name="[2f6]"></a>ble_stack_dev_unpair</strong>(32 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_dev_unpair))<br>
<p><strong><a name="[2f7]"></a>ble_stack_white_list_clear</strong>(8 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_white_list_clear))<br>
<p><strong><a name="[2f8]"></a>ble_stack_white_list_add</strong>(8 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_white_list_add))<br>
<p><strong><a name="[2f9]"></a>ble_stack_white_list_remove</strong>(8 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_white_list_remove))<br>
<p><strong><a name="[2fa]"></a>ble_stack_white_list_size</strong>(36 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_white_list_size))<br>
<p><strong><a name="[2fb]"></a>ble_stack_set_name</strong>(8 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_set_name))<br>
<p><strong><a name="[2fc]"></a>uuid_str</strong>(180 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.uuid_str))<br>
<p><strong><a name="[2fd]"></a>u8_to_dec</strong>(106 bytes, Stack size 0 btyes, bt_host_common_dec.o(.text.u8_to_dec))<br>
<p><strong><a name="[2fe]"></a>char2hex</strong>(52 bytes, Stack size 0 btyes, bt_host_common_hex.o(.text.char2hex))<br>
<br>[Called By]<ul>
<li><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str2_char
</ul>
<p><strong><a name="[2ff]"></a>hex2char</strong>(32 bytes, Stack size 0 btyes, bt_host_common_hex.o(.text.hex2char))<br>
<p><strong><a name="[300]"></a>bin2hex</strong>(78 bytes, Stack size 0 btyes, bt_host_common_hex.o(.text.bin2hex))<br>
<p><strong><a name="[301]"></a>hex2bin</strong>(114 bytes, Stack size 0 btyes, bt_host_common_hex.o(.text.hex2bin))<br>
<p><strong><a name="[302]"></a>bt_hex_real</strong>(72 bytes, Stack size 16 btyes, bt_host_common_log.o(.text.bt_hex_real))<br>
<br>[Called By]<ul>
<li><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ble_ais_service_write
</ul>
<p><strong><a name="[303]"></a>bt_addr_str_real</strong>(52 bytes, Stack size 0 btyes, bt_host_common_log.o(.text.bt_addr_str_real))<br>
<p><strong><a name="[304]"></a>bt_addr_le_str_real</strong>(124 bytes, Stack size 0 btyes, bt_host_common_log.o(.text.bt_addr_le_str_real))<br>
<p><strong><a name="[305]"></a>bt_uuid_str_real</strong>(20 bytes, Stack size 0 btyes, bt_host_common_log.o(.text.bt_uuid_str_real))<br>
<p><strong><a name="[306]"></a>hextostring</strong>(60 bytes, Stack size 0 btyes, bt_host_common_log.o(.text.hextostring))<br>
<p><strong><a name="[307]"></a>stringtohex</strong>(124 bytes, Stack size 0 btyes, bt_host_common_log.o(.text.stringtohex))<br>
<p><strong><a name="[308]"></a>bt_rpa_create</strong>(6 bytes, Stack size 0 btyes, bt_host_common_rpa.o(.text.bt_rpa_create))<br>
<p><strong><a name="[309]"></a>ListInitializeHeader</strong>(6 bytes, Stack size 0 btyes, bt_host_hci_driver_bt_list.o(.text.ListInitializeHeader))<br>
<br>[Called By]<ul>
<li><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbAllocate
<li><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbQueueInit
</ul>
<p><strong><a name="[30a]"></a>ListIsEmpty</strong>(10 bytes, Stack size 704 btyes, bt_host_hci_driver_bt_list.o(.text.ListIsEmpty))<br>
<p><strong><a name="[30b]"></a>ListAdd</strong>(10 bytes, Stack size 0 btyes, bt_host_hci_driver_bt_list.o(.text.ListAdd))<br>
<p><strong><a name="[30c]"></a>ListAddToHead</strong>(12 bytes, Stack size 0 btyes, bt_host_hci_driver_bt_list.o(.text.ListAddToHead))<br>
<br>[Called By]<ul>
<li><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbQueueHead
</ul>
<p><strong><a name="[30d]"></a>ListAddToTail</strong>(12 bytes, Stack size 0 btyes, bt_host_hci_driver_bt_list.o(.text.ListAddToTail))<br>
<br>[Called By]<ul>
<li><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbQueueTail
</ul>
<p><strong><a name="[30e]"></a>ListGetTop</strong>(14 bytes, Stack size 0 btyes, bt_host_hci_driver_bt_list.o(.text.ListGetTop))<br>
<p><strong><a name="[30f]"></a>ListGetTail</strong>(14 bytes, Stack size 0 btyes, bt_host_hci_driver_bt_list.o(.text.ListGetTail))<br>
<p><strong><a name="[310]"></a>ListDeleteNode</strong>(18 bytes, Stack size 0 btyes, bt_host_hci_driver_bt_list.o(.text.ListDeleteNode))<br>
<br>[Called By]<ul>
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbRemoveNode
</ul>
<p><strong><a name="[311]"></a>RtbQueueHead</strong>(42 bytes, Stack size 0 btyes, bt_host_hci_driver_bt_skbuff.o(.text.RtbQueueHead))<br>
<br>[Stack]<ul><li>Max Depth = 76 
<li>Call Chain = RtbQueueHead &rArr; aos_mutex_lock &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<li><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddToHead
<li><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_queue_head
</ul>
<p><strong><a name="[312]"></a>RtbInsertBefore</strong>(46 bytes, Stack size 0 btyes, bt_host_hci_driver_bt_skbuff.o(.text.RtbInsertBefore))<br>
<p><strong><a name="[313]"></a>RtbNodeIsLast</strong>(44 bytes, Stack size 0 btyes, bt_host_hci_driver_bt_skbuff.o(.text.RtbNodeIsLast))<br>
<p><strong><a name="[314]"></a>RtbQueueNextNode</strong>(48 bytes, Stack size 0 btyes, bt_host_hci_driver_bt_skbuff.o(.text.RtbQueueNextNode))<br>
<p><strong><a name="[315]"></a>RtbRemoveNode</strong>(16 bytes, Stack size 4 btyes, bt_host_hci_driver_bt_skbuff.o(.text.RtbRemoveNode))<br>
<br>[Calls]<ul>
<li><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListDeleteNode
</ul>
<br>[Called By]<ul>
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbDequeueTail
<li><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbDequeueHead
<li><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbEmptyQueue
<li><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_unlink
</ul>
<p><strong><a name="[316]"></a>RtbTopQueue</strong>(46 bytes, Stack size 0 btyes, bt_host_hci_driver_bt_skbuff.o(.text.RtbTopQueue))<br>
<p><strong><a name="[317]"></a>RtbDequeueTail</strong>(54 bytes, Stack size 16 btyes, bt_host_hci_driver_bt_skbuff.o(.text.RtbDequeueTail))<br>
<br>[Stack]<ul><li>Max Depth = 92 
<li>Call Chain = RtbDequeueTail &rArr; aos_mutex_lock &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<li><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbRemoveNode
</ul>
<br>[Called By]<ul>
<li><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_dequeue_tail
</ul>
<p><strong><a name="[318]"></a>RtbDequeueHead</strong>(54 bytes, Stack size 16 btyes, bt_host_hci_driver_bt_skbuff.o(.text.RtbDequeueHead))<br>
<br>[Stack]<ul><li>Max Depth = 92 
<li>Call Chain = RtbDequeueHead &rArr; aos_mutex_lock &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<li><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbRemoveNode
</ul>
<br>[Called By]<ul>
<li><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_dequeue_head
</ul>
<p><strong><a name="[319]"></a>RtbGetQueueLen</strong>(4 bytes, Stack size 0 btyes, bt_host_hci_driver_bt_skbuff.o(.text.RtbGetQueueLen))<br>
<br>[Called By]<ul>
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wake_up
<li><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_complete_rx_pkt.constprop.11
<li><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtk_unrel_is_high_level
</ul>
<p><strong><a name="[31a]"></a>RtbEmptyQueue</strong>(50 bytes, Stack size 16 btyes, bt_host_hci_driver_bt_skbuff.o(.text.RtbEmptyQueue))<br>
<br>[Stack]<ul><li>Max Depth = 92 
<li>Call Chain = RtbEmptyQueue &rArr; aos_mutex_lock &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<li><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbRemoveNode
<li><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbFree
</ul>
<br>[Called By]<ul>
<li><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbQueueFree
</ul>
<p><strong><a name="[31b]"></a>RtbQueueIsEmpty</strong>(10 bytes, Stack size 0 btyes, bt_host_hci_driver_bt_skbuff.o(.text.RtbQueueIsEmpty))<br>
<p><strong><a name="[31c]"></a>RtbAllocate</strong>(96 bytes, Stack size 16 btyes, bt_host_hci_driver_bt_skbuff.o(.text.RtbAllocate))<br>
<br>[Stack]<ul><li>Max Depth = 84 
<li>Call Chain = RtbAllocate &rArr; malloc &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<li><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListInitializeHeader
<li><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<br>[Called By]<ul>
<li><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_alloc
</ul>
<p><strong><a name="[31d]"></a>RtbFree</strong>(22 bytes, Stack size 8 btyes, bt_host_hci_driver_bt_skbuff.o(.text.RtbFree))<br>
<br>[Stack]<ul><li>Max Depth = 68 
<li>Call Chain = RtbFree &rArr; free &rArr; yoc_free  &rArr; krhino_mm_free  &rArr; k_mm_free  &rArr; k_mm_smallblk_free  &rArr; krhino_mblk_free  </ul>
<br>[Calls]<ul>
<li><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<br>[Called By]<ul>
<li><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbEmptyQueue
<li><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_free
</ul>
<p><strong><a name="[31e]"></a>RtbAddHead</strong>(34 bytes, Stack size 0 btyes, bt_host_hci_driver_bt_skbuff.o(.text.RtbAddHead))<br>
<p><strong><a name="[31f]"></a>RtbRemoveHead</strong>(30 bytes, Stack size 0 btyes, bt_host_hci_driver_bt_skbuff.o(.text.RtbRemoveHead))<br>
<br>[Called By]<ul>
<li><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_pull
</ul>
<p><strong><a name="[320]"></a>RtbAddTail</strong>(28 bytes, Stack size 0 btyes, bt_host_hci_driver_bt_skbuff.o(.text.RtbAddTail))<br>
<br>[Called By]<ul>
<li><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_put
<li><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_alloc_and_init
</ul>
<p><strong><a name="[321]"></a>RtbRemoveTail</strong>(28 bytes, Stack size 0 btyes, bt_host_hci_driver_bt_skbuff.o(.text.RtbRemoveTail))<br>
<br>[Called By]<ul>
<li><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_trim
</ul>
<p><strong><a name="[322]"></a>RtbQueueInit</strong>(34 bytes, Stack size 8 btyes, bt_host_hci_driver_bt_skbuff.o(.text.RtbQueueInit))<br>
<br>[Stack]<ul><li>Max Depth = 92 
<li>Call Chain = RtbQueueInit &rArr; aos_mutex_new &rArr; aos_malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<li><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<li><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListInitializeHeader
</ul>
<br>[Called By]<ul>
<li><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_int_init
</ul>
<p><strong><a name="[323]"></a>RtbQueueTail</strong>(42 bytes, Stack size 16 btyes, bt_host_hci_driver_bt_skbuff.o(.text.RtbQueueTail))<br>
<br>[Stack]<ul><li>Max Depth = 92 
<li>Call Chain = RtbQueueTail &rArr; aos_mutex_lock &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<li><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ListAddToTail
<li><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_queue_tail
</ul>
<p><strong><a name="[324]"></a>RtbQueueFree</strong>(28 bytes, Stack size 8 btyes, bt_host_hci_driver_bt_skbuff.o(.text.RtbQueueFree))<br>
<br>[Stack]<ul><li>Max Depth = 100 
<li>Call Chain = RtbQueueFree &rArr; RtbEmptyQueue &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbEmptyQueue
<li><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_free
<li><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<br>[Called By]<ul>
<li><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_cleanup
</ul>
<p><strong><a name="[325]"></a>RtbCheckQueueLen</strong>(10 bytes, Stack size 0 btyes, bt_host_hci_driver_bt_skbuff.o(.text.RtbCheckQueueLen))<br>
<p><strong><a name="[326]"></a>RtbCloneBuffer</strong>(54 bytes, Stack size 0 btyes, bt_host_hci_driver_bt_skbuff.o(.text.RtbCloneBuffer))<br>
<p><strong><a name="[327]"></a>hci_skb_get_data</strong>(4 bytes, Stack size 0 btyes, bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_get_data))<br>
<br>[Called By]<ul>
<li><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ready_cb_thread
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wake_up
<li><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_complete_rx_pkt.constprop.11
<li><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_receive_msg
</ul>
<p><strong><a name="[328]"></a>hci_skb_get_data_length</strong>(4 bytes, Stack size 0 btyes, bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_get_data_length))<br>
<br>[Called By]<ul>
<li><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_enqueue
<li><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ready_cb_thread
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wake_up
<li><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_complete_rx_pkt.constprop.11
<li><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_receive_msg
</ul>
<p><strong><a name="[329]"></a>hci_skb_alloc</strong>(10 bytes, Stack size 4 btyes, bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_alloc))<br>
<br>[Stack]<ul><li>Max Depth = 88 
<li>Call Chain = hci_skb_alloc &rArr; RtbAllocate &rArr; malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbAllocate
</ul>
<br>[Called By]<ul>
<li><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_prepare_pkt.constprop.13
<li><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_receive_msg
<li><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_alloc_and_init
</ul>
<p><strong><a name="[32a]"></a>hci_skb_free</strong>(16 bytes, Stack size 8 btyes, bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_free))<br>
<br>[Stack]<ul><li>Max Depth = 76 
<li>Call Chain = hci_skb_free &rArr; RtbFree &rArr; free  &rArr; yoc_free  &rArr; krhino_mm_free  &rArr; k_mm_free  &rArr; k_mm_smallblk_free  &rArr; krhino_mblk_free  </ul>
<br>[Calls]<ul>
<li><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbFree
</ul>
<br>[Called By]<ul>
<li><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_enqueue
<li><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ready_cb_thread
<li><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wait_controller_baudrate_ready_timeout_handler
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wake_up
<li><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_complete_rx_pkt.constprop.11
<li><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_receive_msg
</ul>
<p><strong><a name="[32b]"></a>hci_skb_unlink</strong>(14 bytes, Stack size 4 btyes, bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_unlink))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = hci_skb_unlink &rArr; RtbRemoveNode </ul>
<br>[Calls]<ul>
<li><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbRemoveNode
</ul>
<br>[Called By]<ul>
<li><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_complete_rx_pkt.constprop.11
</ul>
<p><strong><a name="[32c]"></a>hci_skb_put</strong>(8 bytes, Stack size 4 btyes, bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_put))<br>
<br>[Calls]<ul>
<li><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbAddTail
</ul>
<br>[Called By]<ul>
<li><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_slip_one_byte
<li><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_slip_msgdelim
<li><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_receive_msg
</ul>
<p><strong><a name="[32d]"></a>hci_skb_trim</strong>(12 bytes, Stack size 4 btyes, bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_trim))<br>
<br>[Calls]<ul>
<li><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbRemoveTail
</ul>
<br>[Called By]<ul>
<li><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_receive_msg
</ul>
<p><strong><a name="[32e]"></a>hci_skb_get_pkt_type</strong>(6 bytes, Stack size 0 btyes, bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_get_pkt_type))<br>
<br>[Called By]<ul>
<li><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_enqueue
<li><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ready_cb_thread
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wake_up
</ul>
<p><strong><a name="[32f]"></a>hci_skb_set_pkt_type</strong>(6 bytes, Stack size 0 btyes, bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_set_pkt_type))<br>
<br>[Called By]<ul>
<li><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_complete_rx_pkt.constprop.11
</ul>
<p><strong><a name="[330]"></a>hci_skb_pull</strong>(8 bytes, Stack size 4 btyes, bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_pull))<br>
<br>[Calls]<ul>
<li><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbRemoveHead
</ul>
<br>[Called By]<ul>
<li><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_complete_rx_pkt.constprop.11
</ul>
<p><strong><a name="[331]"></a>hci_skb_alloc_and_init</strong>(42 bytes, Stack size 20 btyes, bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_alloc_and_init))<br>
<br>[Stack]<ul><li>Max Depth = 108 
<li>Call Chain = hci_skb_alloc_and_init &rArr; hci_skb_alloc &rArr; RtbAllocate  &rArr; malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_alloc
<li><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbAddTail
</ul>
<br>[Called By]<ul>
<li><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_conf_req
<li><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_sync_resp
<li><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_sync_req
<li><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_conf_resp
<li><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_acl_data
<li><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_complete_rx_pkt.constprop.11
<li><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_cmd
</ul>
<p><strong><a name="[332]"></a>hci_skb_queue_head</strong>(8 bytes, Stack size 4 btyes, bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_queue_head))<br>
<br>[Stack]<ul><li>Max Depth = 80 
<li>Call Chain = hci_skb_queue_head &rArr; RtbQueueHead &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbQueueHead
</ul>
<br>[Called By]<ul>
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wake_up
<li><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_retransfer_thread
</ul>
<p><strong><a name="[333]"></a>hci_skb_queue_tail</strong>(8 bytes, Stack size 4 btyes, bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_queue_tail))<br>
<br>[Stack]<ul><li>Max Depth = 96 
<li>Call Chain = hci_skb_queue_tail &rArr; RtbQueueTail &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbQueueTail
</ul>
<br>[Called By]<ul>
<li><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_enqueue
<li><a href="#[8b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wait_controller_baudrate_ready_timeout_handler
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wake_up
<li><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_complete_rx_pkt.constprop.11
</ul>
<p><strong><a name="[334]"></a>hci_skb_dequeue_head</strong>(8 bytes, Stack size 4 btyes, bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_dequeue_head))<br>
<br>[Stack]<ul><li>Max Depth = 96 
<li>Call Chain = hci_skb_dequeue_head &rArr; RtbDequeueHead &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbDequeueHead
</ul>
<br>[Called By]<ul>
<li><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ready_cb_thread
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wake_up
</ul>
<p><strong><a name="[335]"></a>hci_skb_dequeue_tail</strong>(8 bytes, Stack size 4 btyes, bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_dequeue_tail))<br>
<br>[Stack]<ul><li>Max Depth = 96 
<li>Call Chain = hci_skb_dequeue_tail &rArr; RtbDequeueTail &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbDequeueTail
</ul>
<br>[Called By]<ul>
<li><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_retransfer_thread
</ul>
<p><strong><a name="[336]"></a>hci_skb_queue_get_length</strong>(4 bytes, Stack size 0 btyes, bt_host_hci_driver_bt_skbuff.o(.text.hci_skb_queue_get_length))<br>
<br>[Called By]<ul>
<li><a href="#[8b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_ready_cb_thread
<li><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_complete_rx_pkt.constprop.11
</ul>
<p><strong><a name="[33a]"></a>hci_event_recv</strong>(120 bytes, Stack size 0 btyes, bt_host_hci_driver_h4_driver.o(.text.hci_event_recv))<br>
<p><strong><a name="[33b]"></a>hci_acl_recv</strong>(74 bytes, Stack size 0 btyes, bt_host_hci_driver_h4_driver.o(.text.hci_acl_recv))<br>
<p><strong><a name="[33d]"></a>hci_driver_init</strong>(28 bytes, Stack size 0 btyes, bt_host_hci_driver_h4_driver.o(.text.hci_driver_init))<br>
<p><strong><a name="[33e]"></a>hci_h4_driver_init</strong>(16 bytes, Stack size 0 btyes, bt_host_hci_driver_h4_driver.o(.text.hci_h4_driver_init))<br>
<p><strong><a name="[35d]"></a>get_h5_interface</strong>(8 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.get_h5_interface))<br>
<p><strong><a name="[360]"></a>hci_h5_event_recv</strong>(110 bytes, Stack size 0 btyes, bt_host_hci_driver_h5_driver.o(.text.hci_h5_event_recv))<br>
<p><strong><a name="[361]"></a>hci_h5_acl_recv</strong>(66 bytes, Stack size 0 btyes, bt_host_hci_driver_h5_driver.o(.text.hci_h5_acl_recv))<br>
<p><strong><a name="[363]"></a>hci_h5_driver_init</strong>(16 bytes, Stack size 0 btyes, bt_host_hci_driver_h5_driver.o(.text.hci_h5_driver_init))<br>
<p><strong><a name="[366]"></a>att_sent</strong>(16 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.att_sent))<br>
<p><strong><a name="[383]"></a>bt_att_init</strong>(20 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.bt_att_init))<br>
<p><strong><a name="[384]"></a>bt_att_get_mtu</strong>(80 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.bt_att_get_mtu))<br>
<p><strong><a name="[385]"></a>bt_att_req_alloc</strong>(72 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.bt_att_req_alloc))<br>
<p><strong><a name="[386]"></a>bt_att_req_free</strong>(6 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.bt_att_req_free))<br>
<p><strong><a name="[387]"></a>bt_att_send</strong>(142 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.bt_att_send))<br>
<p><strong><a name="[388]"></a>bt_att_req_send</strong>(118 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.bt_att_req_send))<br>
<p><strong><a name="[389]"></a>bt_att_req_cancel</strong>(108 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.bt_att_req_cancel))<br>
<p><strong><a name="[391]"></a>bt_att_chan_create_pdu</strong>(68 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.bt_att_chan_create_pdu))<br>
<p><strong><a name="[2c5]"></a>mtu_exchange_cb</strong>(2 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.mtu_exchange_cb))<br>
<p><strong><a name="[395]"></a>bt_att_create_pdu</strong>(88 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.bt_att_create_pdu))<br>
<p><strong><a name="[3a4]"></a>bt_conn_get_pkts</strong>(8 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_get_pkts))<br>
<p><strong><a name="[3a5]"></a>notify_le_param_updated</strong>(108 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.notify_le_param_updated))<br>
<p><strong><a name="[3a6]"></a>le_param_req</strong>(68 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.le_param_req))<br>
<p><strong><a name="[3a7]"></a>bt_conn_get_security</strong>(4 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_get_security))<br>
<p><strong><a name="[3a8]"></a>bt_conn_cb_register</strong>(16 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_cb_register))<br>
<p><strong><a name="[3a9]"></a>bt_conn_recv</strong>(164 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_recv))<br>
<p><strong><a name="[3aa]"></a>bt_conn_send_cb</strong>(120 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_send_cb))<br>
<p><strong><a name="[3ab]"></a>bt_conn_prepare_events</strong>(108 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_prepare_events))<br>
<p><strong><a name="[3ac]"></a>bt_conn_add_le</strong>(116 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_add_le))<br>
<p><strong><a name="[3ad]"></a>bt_conn_set_state</strong>(260 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_set_state))<br>
<p><strong><a name="[3ae]"></a>bt_conn_lookup_handle</strong>(56 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_lookup_handle))<br>
<p><strong><a name="[3af]"></a>bt_conn_is_peer_addr_le</strong>(68 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_is_peer_addr_le))<br>
<p><strong><a name="[3b0]"></a>bt_conn_lookup_addr_le</strong>(60 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_lookup_addr_le))<br>
<p><strong><a name="[3b1]"></a>bt_conn_exists_le</strong>(24 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_exists_le))<br>
<p><strong><a name="[3b2]"></a>bt_conn_lookup_state_le</strong>(84 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_lookup_state_le))<br>
<p><strong><a name="[3b3]"></a>bt_conn_foreach</strong>(44 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_foreach))<br>
<p><strong><a name="[3b4]"></a>bt_conn_ref</strong>(14 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_ref))<br>
<p><strong><a name="[3b5]"></a>bt_conn_unref</strong>(10 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_unref))<br>
<p><strong><a name="[3b6]"></a>bt_conn_get_dst</strong>(4 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_get_dst))<br>
<p><strong><a name="[3b7]"></a>bt_conn_get_info</strong>(92 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_get_info))<br>
<p><strong><a name="[3b8]"></a>bt_conn_get_remote_info</strong>(62 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_get_remote_info))<br>
<p><strong><a name="[3b9]"></a>bt_conn_disconnect</strong>(86 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_disconnect))<br>
<p><strong><a name="[3ba]"></a>bt_conn_le_conn_update</strong>(32 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_le_conn_update))<br>
<p><strong><a name="[3bb]"></a>bt_conn_le_param_update</strong>(224 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_le_param_update))<br>
<p><strong><a name="[3bc]"></a>bt_conn_create_pdu_timeout</strong>(40 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_create_pdu_timeout))<br>
<p><strong><a name="[3bd]"></a>bt_conn_create_frag_timeout</strong>(20 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_create_frag_timeout))<br>
<p><strong><a name="[3bf]"></a>bt_conn_process_tx</strong>(164 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_process_tx))<br>
<p><strong><a name="[3c0]"></a>bt_conn_index</strong>(24 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_index))<br>
<p><strong><a name="[3c1]"></a>bt_conn_lookup_index</strong>(40 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_lookup_index))<br>
<p><strong><a name="[3c2]"></a>bt_conn_init</strong>(80 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_init))<br>
<p><strong><a name="[3c3]"></a>bt_rand</strong>(8 bytes, Stack size 4 btyes, bt_host_host_crypto.o(.text.bt_rand))<br>
<br>[Stack]<ul><li>Max Depth = 124 
<li>Call Chain = bt_rand &rArr; bt_crypto_rand &rArr; hci_api_le_rand  &rArr; TRNG_Rand  &rArr; TRNG_INIT  &rArr; TRNG_Output  </ul>
<br>[Calls]<ul>
<li><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_crypto_rand
</ul>
<br>[Called By]<ul>
<li><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_scan_timer
</ul>
<p><strong><a name="[3c4]"></a>bt_encrypt_le</strong>(8 bytes, Stack size 0 btyes, bt_host_host_crypto.o(.text.bt_encrypt_le))<br>
<p><strong><a name="[3c5]"></a>bt_encrypt_be</strong>(8 bytes, Stack size 0 btyes, bt_host_host_crypto.o(.text.bt_encrypt_be))<br>
<p><strong><a name="[3c6]"></a>bt_decrypt_be</strong>(8 bytes, Stack size 0 btyes, bt_host_host_crypto.o(.text.bt_decrypt_be))<br>
<p><strong><a name="[3de]"></a>bt_gatt_attr_read_ccc</strong>(72 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_attr_read_ccc))<br>
<p><strong><a name="[3df]"></a>bt_gatt_attr_read_service</strong>(80 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_attr_read_service))<br>
<p><strong><a name="[3e3]"></a>bt_gatt_attr_write_ccc</strong>(176 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_attr_write_ccc))<br>
<p><strong><a name="[3ea]"></a>bt_gatt_service_unregister</strong>(92 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_service_unregister))<br>
<p><strong><a name="[3eb]"></a>bt_gatt_attr_read</strong>(46 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_attr_read))<br>
<p><strong><a name="[3ec]"></a>bt_gatt_attr_value_handle</strong>(52 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_attr_value_handle))<br>
<p><strong><a name="[3ed]"></a>bt_gatt_attr_read_chrc</strong>(110 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_attr_read_chrc))<br>
<p><strong><a name="[3ee]"></a>bt_gatt_foreach_attr_type</strong>(336 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_foreach_attr_type))<br>
<p><strong><a name="[3f0]"></a>bt_gatt_attr_read_included</strong>(108 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_attr_read_included))<br>
<p><strong><a name="[3f2]"></a>bt_gatt_attr_next</strong>(44 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_attr_next))<br>
<p><strong><a name="[3f3]"></a>bt_gatt_attr_read_cep</strong>(56 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_attr_read_cep))<br>
<p><strong><a name="[3f4]"></a>bt_gatt_attr_read_cud</strong>(54 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_attr_read_cud))<br>
<p><strong><a name="[3f5]"></a>bt_gatt_attr_read_cpf</strong>(42 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_attr_read_cpf))<br>
<p><strong><a name="[3f6]"></a>bt_gatt_notify_cb</strong>(272 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_notify_cb))<br>
<p><strong><a name="[3f7]"></a>bt_gatt_indicate</strong>(272 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_indicate))<br>
<p><strong><a name="[3f9]"></a>bt_gatt_get_mtu</strong>(8 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_get_mtu))<br>
<p><strong><a name="[3fa]"></a>bt_gatt_check_perm</strong>(94 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_check_perm))<br>
<p><strong><a name="[3fc]"></a>bt_gatt_is_subscribed</strong>(152 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_is_subscribed))<br>
<p><strong><a name="[3fd]"></a>bt_gatt_encrypt_change</strong>(36 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_encrypt_change))<br>
<p><strong><a name="[3fe]"></a>bt_gatt_connected</strong>(8 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_connected))<br>
<p><strong><a name="[3ff]"></a>bt_gatt_change_aware</strong>(4 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_change_aware))<br>
<p><strong><a name="[400]"></a>bt_gatt_store_ccc</strong>(100 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_store_ccc))<br>
<p><strong><a name="[401]"></a>bt_gatt_disconnected</strong>(48 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_disconnected))<br>
<p><strong><a name="[402]"></a>bt_gatt_settings_init</strong>(28 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_settings_init))<br>
<p><strong><a name="[403]"></a>bt_gatt_init</strong>(68 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_init))<br>
<p><strong><a name="[404]"></a>bt_gatt_service_register</strong>(348 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_service_register))<br>
<p><strong><a name="[405]"></a>bt_gatt_clear</strong>(100 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_clear))<br>
<p><strong><a name="[406]"></a>bt_hci_cmd_send</strong>(68 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.bt_hci_cmd_send))<br>
<p><strong><a name="[407]"></a>bt_hci_cmd_send_sync</strong>(168 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.bt_hci_cmd_send_sync))<br>
<p><strong><a name="[408]"></a>hci_api_le_scan_enable</strong>(30 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_scan_enable))<br>
<p><strong><a name="[409]"></a>hci_api_le_scan_param_set</strong>(18 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_scan_param_set))<br>
<p><strong><a name="[40a]"></a>hci_api_le_get_max_data_len</strong>(26 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_get_max_data_len))<br>
<p><strong><a name="[40b]"></a>hci_api_le_get_default_data_len</strong>(6 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_get_default_data_len))<br>
<p><strong><a name="[40c]"></a>hci_api_le_set_default_data_len</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_set_default_data_len))<br>
<p><strong><a name="[40d]"></a>hci_api_le_set_data_len</strong>(10 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_set_data_len))<br>
<p><strong><a name="[40e]"></a>hci_api_le_set_bdaddr</strong>(48 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_set_bdaddr))<br>
<p><strong><a name="[40f]"></a>hci_api_reset</strong>(16 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_reset))<br>
<p><strong><a name="[410]"></a>hci_api_read_local_feature</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_read_local_feature))<br>
<p><strong><a name="[411]"></a>hci_api_read_local_version_info</strong>(34 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_read_local_version_info))<br>
<p><strong><a name="[412]"></a>hci_api_read_bdaddr</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_read_bdaddr))<br>
<p><strong><a name="[413]"></a>hci_api_read_local_support_command</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_read_local_support_command))<br>
<p><strong><a name="[414]"></a>hci_api_set_host_buffer_size</strong>(12 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_set_host_buffer_size))<br>
<p><strong><a name="[415]"></a>hci_api_set_host_flow_enable</strong>(20 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_set_host_flow_enable))<br>
<p><strong><a name="[416]"></a>hci_api_le_read_local_feature</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_read_local_feature))<br>
<p><strong><a name="[417]"></a>hci_api_le_read_buffer_size_complete</strong>(12 bytes, Stack size 0 btyes, hci_uart_h5.o(.text.hci_api_le_read_buffer_size_complete))<br>
<p><strong><a name="[418]"></a>hci_api_le_read_support_states</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_read_support_states))<br>
<p><strong><a name="[41c]"></a>bt_buf_get_cmd_complete</strong>(60 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.bt_buf_get_cmd_complete))<br>
<p><strong><a name="[41d]"></a>hci_cmd_complete</strong>(40 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.hci_cmd_complete))<br>
<p><strong><a name="[41e]"></a>hci_cmd_status</strong>(40 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.hci_cmd_status))<br>
<p><strong><a name="[41f]"></a>send_cmd</strong>(112 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.send_cmd))<br>
<p><strong><a name="[420]"></a>bt_hci_get_cmd_opcode</strong>(24 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.bt_hci_get_cmd_opcode))<br>
<p><strong><a name="[421]"></a>bt_hci_cmd_create</strong>(116 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.bt_hci_cmd_create))<br>
<p><strong><a name="[422]"></a>hci_api_le_read_rl_size</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_read_rl_size))<br>
<p><strong><a name="[423]"></a>hci_api_le_set_event_mask</strong>(12 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_set_event_mask))<br>
<p><strong><a name="[424]"></a>hci_api_set_event_mask</strong>(28 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_set_event_mask))<br>
<p><strong><a name="[425]"></a>hci_api_num_complete_packets</strong>(34 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_num_complete_packets))<br>
<p><strong><a name="[426]"></a>hci_num_completed_packets</strong>(62 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.hci_num_completed_packets))<br>
<p><strong><a name="[427]"></a>hci_api_white_list_size</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_white_list_size))<br>
<p><strong><a name="[428]"></a>hci_api_white_list_add</strong>(14 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_white_list_add))<br>
<p><strong><a name="[429]"></a>hci_api_white_list_remove</strong>(14 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_white_list_remove))<br>
<p><strong><a name="[42a]"></a>hci_api_white_list_clear</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_white_list_clear))<br>
<p><strong><a name="[42b]"></a>hci_api_vs_init</strong>(4 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_vs_init))<br>
<p><strong><a name="[42c]"></a>hci_api_le_adv_enable</strong>(84 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_adv_enable))<br>
<p><strong><a name="[42d]"></a>hci_api_le_adv_param</strong>(160 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_adv_param))<br>
<p><strong><a name="[42e]"></a>hci_api_le_set_random_addr</strong>(32 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_set_random_addr))<br>
<p><strong><a name="[42f]"></a>hci_api_le_set_ad_data</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_set_ad_data))<br>
<p><strong><a name="[430]"></a>hci_api_le_set_sd_data</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_set_sd_data))<br>
<p><strong><a name="[431]"></a>hci_api_le_create_conn</strong>(102 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_create_conn))<br>
<p><strong><a name="[432]"></a>hci_api_le_create_conn_cancel</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_create_conn_cancel))<br>
<p><strong><a name="[433]"></a>hci_api_le_disconnect</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_disconnect))<br>
<p><strong><a name="[434]"></a>hci_api_le_read_remote_features</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_read_remote_features))<br>
<p><strong><a name="[435]"></a>hci_api_le_read_remote_version</strong>(54 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.hci_api_le_read_remote_version))<br>
<p><strong><a name="[436]"></a>hci_api_host_num_complete_packets</strong>(10 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_host_num_complete_packets))<br>
<p><strong><a name="[437]"></a>hci_api_le_conn_updata</strong>(64 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_conn_updata))<br>
<p><strong><a name="[438]"></a>hci_api_le_start_encrypt</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_start_encrypt))<br>
<p><strong><a name="[439]"></a>hci_api_le_enctypt_ltk_req_reply</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_enctypt_ltk_req_reply))<br>
<p><strong><a name="[43a]"></a>hci_api_le_enctypt_ltk_req_neg_reply</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_enctypt_ltk_req_neg_reply))<br>
<p><strong><a name="[43b]"></a>hci_api_le_rand</strong>(30 bytes, Stack size 12 btyes, hci_api.o(.text.hci_api_le_rand))<br>
<br>[Stack]<ul><li>Max Depth = 96 
<li>Call Chain = hci_api_le_rand &rArr; TRNG_Rand &rArr; TRNG_INIT  &rArr; TRNG_Output  </ul>
<br>[Calls]<ul>
<li><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_lock
<li><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_Rand
<li><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_crypto_rand
</ul>
<p><strong><a name="[43c]"></a>hci_api_le_enc</strong>(36 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_enc))<br>
<p><strong><a name="[43d]"></a>hci_api_le_set_phy</strong>(18 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_set_phy))<br>
<p><strong><a name="[43e]"></a>hci_api_le_conn_param_req_reply</strong>(6 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_conn_param_req_reply))<br>
<p><strong><a name="[43f]"></a>hci_api_le_conn_param_neg_reply</strong>(6 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_conn_param_neg_reply))<br>
<p><strong><a name="[440]"></a>hci_api_le_add_dev_to_rl</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_add_dev_to_rl))<br>
<p><strong><a name="[441]"></a>hci_api_le_remove_dev_from_rl</strong>(14 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_remove_dev_from_rl))<br>
<p><strong><a name="[442]"></a>hci_api_le_clear_rl</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_clear_rl))<br>
<p><strong><a name="[443]"></a>hci_api_le_set_addr_res_enable</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_set_addr_res_enable))<br>
<p><strong><a name="[444]"></a>hci_api_le_set_privacy_mode</strong>(6 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_set_privacy_mode))<br>
<p><strong><a name="[445]"></a>hci_api_le_gen_p256_pubkey</strong>(16 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.hci_api_le_gen_p256_pubkey))<br>
<p><strong><a name="[446]"></a>hci_api_le_gen_dhkey</strong>(56 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.hci_api_le_gen_dhkey))<br>
<p><strong><a name="[447]"></a>hci_api_read_buffer_size</strong>(6 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_read_buffer_size))<br>
<p><strong><a name="[448]"></a>hci_api_le_write_host_supp</strong>(6 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_write_host_supp))<br>
<p><strong><a name="[449]"></a>bt_recv_prio</strong>(74 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.bt_recv_prio))<br>
<p><strong><a name="[44a]"></a>hci_api_init</strong>(4 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_init))<br>
<p><strong><a name="[44b]"></a>hci_api_le_ext_adv_enable</strong>(140 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.hci_api_le_ext_adv_enable))<br>
<p><strong><a name="[44c]"></a>hci_api_le_set_adv_random_addr</strong>(62 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.hci_api_le_set_adv_random_addr))<br>
<p><strong><a name="[44d]"></a>hci_api_le_ext_scan_enable</strong>(116 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.hci_api_le_ext_scan_enable))<br>
<p><strong><a name="[44e]"></a>hci_api_le_ext_scan_param_set</strong>(74 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.hci_api_le_ext_scan_param_set))<br>
<p><strong><a name="[44f]"></a>hci_api_le_read_phy</strong>(86 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.hci_api_le_read_phy))<br>
<p><strong><a name="[450]"></a>hci_api_le_create_conn_ext</strong>(316 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.hci_api_le_create_conn_ext))<br>
<p><strong><a name="[451]"></a>hci_api_le_rpa_timeout_set</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_rpa_timeout_set))<br>
<p><strong><a name="[452]"></a>hci_api_le_set_ext_ad_data</strong>(98 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.hci_api_le_set_ext_ad_data))<br>
<p><strong><a name="[453]"></a>hci_api_le_set_ext_sd_data</strong>(98 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.hci_api_le_set_ext_sd_data))<br>
<p><strong><a name="[454]"></a>hci_api_le_remove_adv_set</strong>(50 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.hci_api_le_remove_adv_set))<br>
<p><strong><a name="[455]"></a>hci_api_le_set_host_chan_classif</strong>(56 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.hci_api_le_set_host_chan_classif))<br>
<p><strong><a name="[456]"></a>bt_le_whitelist_size</strong>(8 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_whitelist_size))<br>
<p><strong><a name="[457]"></a>bt_le_set_chan_map</strong>(6 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_set_chan_map))<br>
<p><strong><a name="[458]"></a>bt_buf_get_rx</strong>(48 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_buf_get_rx))<br>
<p><strong><a name="[459]"></a>bt_buf_get_evt</strong>(64 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_buf_get_evt))<br>
<p><strong><a name="[45a]"></a>bt_le_oob_get_local</strong>(56 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_oob_get_local))<br>
<p><strong><a name="[45b]"></a>bt_le_ext_adv_oob_get_local</strong>(52 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_ext_adv_oob_get_local))<br>
<p><strong><a name="[45c]"></a>bt_le_hci_version_get</strong>(12 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_hci_version_get))<br>
<p><strong><a name="[45d]"></a>bt_le_ext_adv_start</strong>(172 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_ext_adv_start))<br>
<p><strong><a name="[45e]"></a>bt_le_ext_adv_delete</strong>(52 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_ext_adv_delete))<br>
<p><strong><a name="[45f]"></a>bt_le_whitelist_add</strong>(36 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_whitelist_add))<br>
<p><strong><a name="[460]"></a>bt_le_whitelist_rem</strong>(36 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_whitelist_rem))<br>
<p><strong><a name="[461]"></a>bt_le_whitelist_clear</strong>(32 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_whitelist_clear))<br>
<p><strong><a name="[47e]"></a>bt_le_scan_random_addr_check</strong>(4 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_scan_random_addr_check))<br>
<p><strong><a name="[47f]"></a>hci_le_read_max_data_len</strong>(8 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.hci_le_read_max_data_len))<br>
<p><strong><a name="[480]"></a>bt_hci_num_complete_packets</strong>(154 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_hci_num_complete_packets))<br>
<p><strong><a name="[481]"></a>bt_hci_disconnect</strong>(8 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_hci_disconnect))<br>
<p><strong><a name="[482]"></a>bt_le_set_data_len</strong>(12 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_set_data_len))<br>
<p><strong><a name="[483]"></a>bt_le_set_phy</strong>(24 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_set_phy))<br>
<p><strong><a name="[489]"></a>cmd_state_set_init</strong>(8 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.cmd_state_set_init))<br>
<p><strong><a name="[48a]"></a>handle_event</strong>(40 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.handle_event))<br>
<p><strong><a name="[48c]"></a>bt_lookup_id_addr</strong>(4 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_lookup_id_addr))<br>
<p><strong><a name="[48d]"></a>bt_le_ext_adv_get_index</strong>(16 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_ext_adv_get_index))<br>
<p><strong><a name="[48e]"></a>bt_adv_lookup_legacy</strong>(12 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_adv_lookup_legacy))<br>
<p><strong><a name="[48f]"></a>bt_addr_from_str</strong>(106 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_addr_from_str))<br>
<p><strong><a name="[490]"></a>bt_addr_le_from_str</strong>(172 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_addr_le_from_str))<br>
<p><strong><a name="[492]"></a>bt_le_conn_params_valid</strong>(58 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_conn_params_valid))<br>
<p><strong><a name="[493]"></a>bt_unpair</strong>(62 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_unpair))<br>
<p><strong><a name="[494]"></a>bt_hci_get_conn_handle</strong>(20 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_hci_get_conn_handle))<br>
<p><strong><a name="[495]"></a>has_tx_sem</strong>(36 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.has_tx_sem))<br>
<p><strong><a name="[496]"></a>process_events</strong>(40 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.process_events))<br>
<p><strong><a name="[497]"></a>bt_addr_le_create_nrpa</strong>(30 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_addr_le_create_nrpa))<br>
<p><strong><a name="[498]"></a>bt_addr_le_create_static</strong>(32 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_addr_le_create_static))<br>
<p><strong><a name="[49a]"></a>bt_send</strong>(20 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_send))<br>
<p><strong><a name="[49b]"></a>bt_recv</strong>(176 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_recv))<br>
<p><strong><a name="[49c]"></a>bt_id_reset</strong>(188 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_id_reset))<br>
<p><strong><a name="[49d]"></a>bt_id_delete</strong>(172 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_id_delete))<br>
<p><strong><a name="[49e]"></a>bt_setup_public_id_addr</strong>(52 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_setup_public_id_addr))<br>
<p><strong><a name="[49f]"></a>bt_setup_random_id_addr</strong>(12 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_setup_random_id_addr))<br>
<p><strong><a name="[4a0]"></a>bt_addr_le_is_bonded</strong>(4 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_addr_le_is_bonded))<br>
<p><strong><a name="[4a1]"></a>bt_le_adv_update_data</strong>(112 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_adv_update_data))<br>
<p><strong><a name="[4a2]"></a>bt_le_adv_start_legacy</strong>(576 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_adv_start_legacy))<br>
<p><strong><a name="[4a3]"></a>bt_le_adv_stop</strong>(96 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_adv_stop))<br>
<p><strong><a name="[4a4]"></a>bt_le_adv_stop_instant</strong>(8 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_adv_stop_instant))<br>
<p><strong><a name="[4a5]"></a>bt_le_adv_resume</strong>(104 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_adv_resume))<br>
<p><strong><a name="[4aa]"></a>bt_le_ext_adv_get_info</strong>(12 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_ext_adv_get_info))<br>
<p><strong><a name="[4ab]"></a>bt_le_ext_adv_create</strong>(104 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_ext_adv_create))<br>
<p><strong><a name="[4ac]"></a>bt_le_ext_adv_update_param</strong>(68 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_ext_adv_update_param))<br>
<p><strong><a name="[4ad]"></a>bt_le_ext_adv_stop</strong>(92 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_ext_adv_stop))<br>
<p><strong><a name="[4ae]"></a>bt_le_ext_adv_set_data</strong>(78 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_ext_adv_set_data))<br>
<p><strong><a name="[4af]"></a>bt_le_adv_start_ext</strong>(296 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_adv_start_ext))<br>
<p><strong><a name="[4b0]"></a>bt_le_adv_start</strong>(80 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_adv_start))<br>
<p><strong><a name="[4b1]"></a>bt_le_adv_start_instant</strong>(130 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_le_adv_start_instant))<br>
<p><strong><a name="[4b2]"></a>bt_hci_driver_register</strong>(48 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_hci_driver_register))<br>
<p><strong><a name="[4b3]"></a>bt_finalize_init</strong>(16 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_finalize_init))<br>
<p><strong><a name="[4b6]"></a>bt_enable</strong>(220 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_enable))<br>
<p><strong><a name="[4b7]"></a>bt_set_name</strong>(136 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_set_name))<br>
<p><strong><a name="[4b8]"></a>bt_get_name</strong>(8 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_get_name))<br>
<p><strong><a name="[4b9]"></a>bt_set_bdaddr</strong>(10 bytes, Stack size 0 btyes, hci_api.o(.text.bt_set_bdaddr))<br>
<p><strong><a name="[4ba]"></a>bt_id_get</strong>(32 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_id_get))<br>
<p><strong><a name="[4bb]"></a>bt_id_create</strong>(116 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_id_create))<br>
<p><strong><a name="[4bc]"></a>bt_set_id_addr</strong>(48 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_set_id_addr))<br>
<p><strong><a name="[4c0]"></a>bt_hci_ecc_send</strong>(252 bytes, Stack size 0 btyes, bt_host_host_hci_ecc.o(.text.bt_hci_ecc_send))<br>
<p><strong><a name="[4c1]"></a>default_CSPRNG</strong>(12 bytes, Stack size 0 btyes, bt_host_host_hci_ecc.o(.text.default_CSPRNG))<br>
<p><strong><a name="[4c2]"></a>bt_hci_ecc_init</strong>(64 bytes, Stack size 0 btyes, bt_host_host_hci_ecc.o(.text.bt_hci_ecc_init))<br>
<p><strong><a name="[4c6]"></a>bt_l2cap_le_fixed_chan_register</strong>(32 bytes, Stack size 0 btyes, bt_host_host_l2cap.o(.text.bt_l2cap_le_fixed_chan_register))<br>
<p><strong><a name="[4c7]"></a>bt_l2cap_chan_remove</strong>(72 bytes, Stack size 0 btyes, bt_host_host_l2cap.o(.text.bt_l2cap_chan_remove))<br>
<p><strong><a name="[4c8]"></a>bt_l2cap_chan_state_str</strong>(28 bytes, Stack size 0 btyes, bt_host_host_l2cap.o(.text.bt_l2cap_chan_state_str))<br>
<p><strong><a name="[4c9]"></a>bt_l2cap_chan_del</strong>(46 bytes, Stack size 0 btyes, bt_host_host_l2cap.o(.text.bt_l2cap_chan_del))<br>
<p><strong><a name="[4cb]"></a>bt_l2cap_chan_add</strong>(30 bytes, Stack size 0 btyes, bt_host_host_l2cap.o(.text.bt_l2cap_chan_add))<br>
<p><strong><a name="[4cc]"></a>bt_l2cap_init</strong>(24 bytes, Stack size 0 btyes, bt_host_host_l2cap.o(.text.bt_l2cap_init))<br>
<p><strong><a name="[4cd]"></a>bt_l2cap_connected</strong>(156 bytes, Stack size 0 btyes, bt_host_host_l2cap.o(.text.bt_l2cap_connected))<br>
<p><strong><a name="[4ce]"></a>bt_l2cap_disconnected</strong>(56 bytes, Stack size 0 btyes, bt_host_host_l2cap.o(.text.bt_l2cap_disconnected))<br>
<p><strong><a name="[4cf]"></a>bt_l2cap_encrypt_change</strong>(36 bytes, Stack size 0 btyes, bt_host_host_l2cap.o(.text.bt_l2cap_encrypt_change))<br>
<p><strong><a name="[4d0]"></a>bt_l2cap_create_pdu_timeout</strong>(10 bytes, Stack size 0 btyes, bt_host_host_l2cap.o(.text.bt_l2cap_create_pdu_timeout))<br>
<p><strong><a name="[4d1]"></a>bt_l2cap_send_cb</strong>(58 bytes, Stack size 0 btyes, bt_host_host_l2cap.o(.text.bt_l2cap_send_cb))<br>
<p><strong><a name="[4d3]"></a>bt_l2cap_le_lookup_tx_cid</strong>(36 bytes, Stack size 0 btyes, bt_host_host_l2cap.o(.text.bt_l2cap_le_lookup_tx_cid))<br>
<p><strong><a name="[4d4]"></a>bt_l2cap_le_lookup_rx_cid</strong>(36 bytes, Stack size 0 btyes, bt_host_host_l2cap.o(.text.bt_l2cap_le_lookup_rx_cid))<br>
<p><strong><a name="[4d5]"></a>bt_l2cap_recv</strong>(56 bytes, Stack size 0 btyes, bt_host_host_l2cap.o(.text.bt_l2cap_recv))<br>
<p><strong><a name="[4d6]"></a>bt_l2cap_update_conn_param</strong>(144 bytes, Stack size 0 btyes, bt_host_host_l2cap.o(.text.bt_l2cap_update_conn_param))<br>
<p><strong><a name="[4d9]"></a>bt_settings_encode_key</strong>(180 bytes, Stack size 0 btyes, bt_host_host_settings.o(.text.bt_settings_encode_key))<br>
<p><strong><a name="[4da]"></a>bt_settings_decode_key</strong>(74 bytes, Stack size 0 btyes, bt_host_host_settings.o(.text.bt_settings_decode_key))<br>
<p><strong><a name="[4db]"></a>bt_settings_save_id</strong>(16 bytes, Stack size 0 btyes, bt_host_host_settings.o(.text.bt_settings_save_id))<br>
<p><strong><a name="[4dd]"></a>bt_settings_init</strong>(44 bytes, Stack size 0 btyes, bt_host_host_settings.o(.text.bt_settings_init))<br>
<p><strong><a name="[4e0]"></a>bt_smp_sign_verify</strong>(6 bytes, Stack size 0 btyes, bt_host_host_smp_null.o(.text.bt_smp_sign_verify))<br>
<p><strong><a name="[4e1]"></a>bt_smp_sign</strong>(6 bytes, Stack size 0 btyes, bt_host_host_smp_null.o(.text.bt_smp_sign))<br>
<p><strong><a name="[4e2]"></a>bt_smp_init</strong>(16 bytes, Stack size 0 btyes, bt_host_host_smp_null.o(.text.bt_smp_init))<br>
<p><strong><a name="[4e4]"></a>bt_uuid_cmp</strong>(84 bytes, Stack size 0 btyes, bt_host_host_uuid.o(.text.bt_uuid_cmp))<br>
<p><strong><a name="[4e5]"></a>bt_uuid_create</strong>(78 bytes, Stack size 0 btyes, bt_host_host_uuid.o(.text.bt_uuid_create))<br>
<p><strong><a name="[4e6]"></a>bt_uuid_to_str</strong>(180 bytes, Stack size 0 btyes, bt_host_host_uuid.o(.text.bt_uuid_to_str))<br>
<p><strong><a name="[4e7]"></a>bt_uuid_str</strong>(20 bytes, Stack size 0 btyes, bt_host_host_uuid.o(.text.bt_uuid_str))<br>
<p><strong><a name="[4e8]"></a>k_queue_count</strong>(4 bytes, Stack size 0 btyes, bt_host_port_aos_aos_port.o(.text.k_queue_count))<br>
<p><strong><a name="[4e9]"></a>k_sem_init</strong>(36 bytes, Stack size 0 btyes, bt_host_port_aos_aos_port.o(.text.k_sem_init))<br>
<p><strong><a name="[4ea]"></a>k_sem_take</strong>(42 bytes, Stack size 0 btyes, bt_host_port_aos_aos_port.o(.text.k_sem_take))<br>
<p><strong><a name="[4eb]"></a>k_sem_give</strong>(20 bytes, Stack size 0 btyes, bt_host_port_aos_aos_port.o(.text.k_sem_give))<br>
<p><strong><a name="[4ec]"></a>k_sem_delete</strong>(20 bytes, Stack size 0 btyes, bt_host_port_aos_aos_port.o(.text.k_sem_delete))<br>
<p><strong><a name="[4ed]"></a>k_sem_count_get</strong>(16 bytes, Stack size 0 btyes, bt_host_port_aos_aos_port.o(.text.k_sem_count_get))<br>
<p><strong><a name="[4ee]"></a>k_mutex_init</strong>(28 bytes, Stack size 8 btyes, bt_host_port_aos_aos_port.o(.text.k_mutex_init))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = k_mutex_init &rArr; krhino_mutex_create &rArr; mutex_create  </ul>
<br>[Calls]<ul>
<li><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_create
</ul>
<br>[Called By]<ul>
<li><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_scan_schd_init
</ul>
<p><strong><a name="[4ef]"></a>k_mutex_lock</strong>(42 bytes, Stack size 8 btyes, bt_host_port_aos_aos_port.o(.text.k_mutex_lock))<br>
<br>[Stack]<ul><li>Max Depth = 72 
<li>Call Chain = k_mutex_lock &rArr; krhino_mutex_lock &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<li><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
</ul>
<br>[Called By]<ul>
<li><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_scan_timer
<li><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_scan_schd_action
<li><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetExtAdvEnable
<li><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetExtendedScanEnableCmd
<li><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_enable
<li><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_disable
<li><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_enable
<li><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_disable
</ul>
<p><strong><a name="[4f0]"></a>k_mutex_unlock</strong>(12 bytes, Stack size 4 btyes, bt_host_port_aos_aos_port.o(.text.k_mutex_unlock))<br>
<br>[Stack]<ul><li>Max Depth = 60 
<li>Call Chain = k_mutex_unlock &rArr; krhino_mutex_unlock &rArr; mutex_release.isra.1  &rArr; task_pri_change  &rArr; ready_list_rm  &rArr; k_err_proc_debug  </ul>
<br>[Calls]<ul>
<li><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_scan_timer
<li><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_scan_schd_action
<li><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetExtAdvEnable
<li><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetExtendedScanEnableCmd
<li><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_enable
<li><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_disable
<li><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_enable
<li><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_disable
</ul>
<p><strong><a name="[4f1]"></a>k_uptime_get</strong>(8 bytes, Stack size 0 btyes, bt_host_port_aos_aos_port.o(.text.k_uptime_get))<br>
<p><strong><a name="[4f2]"></a>k_sleep</strong>(8 bytes, Stack size 0 btyes, bt_host_port_aos_aos_port.o(.text.k_sleep))<br>
<p><strong><a name="[4f3]"></a>k_current_get</strong>(8 bytes, Stack size 0 btyes, bt_host_port_aos_aos_port.o(.text.k_current_get))<br>
<p><strong><a name="[4f4]"></a>k_timer_is_started</strong>(12 bytes, Stack size 0 btyes, bt_host_port_aos_aos_port.o(.text.k_timer_is_started))<br>
<p><strong><a name="[4f5]"></a>log_strdup</strong>(2 bytes, Stack size 0 btyes, bt_host_port_aos_aos_port.o(.text.log_strdup))<br>
<p><strong><a name="[4f6]"></a>k_malloc</strong>(8 bytes, Stack size 0 btyes, bt_host_port_aos_aos_port.o(.text.k_malloc))<br>
<p><strong><a name="[4f7]"></a>k_queue_init</strong>(76 bytes, Stack size 0 btyes, bt_host_port_aos_aos_port.o(.text.k_queue_init))<br>
<p><strong><a name="[4f8]"></a>k_queue_cancel_wait</strong>(20 bytes, Stack size 0 btyes, bt_host_port_aos_aos_port.o(.text.k_queue_cancel_wait))<br>
<p><strong><a name="[4f9]"></a>k_queue_insert</strong>(52 bytes, Stack size 0 btyes, bt_host_port_aos_aos_port.o(.text.k_queue_insert))<br>
<p><strong><a name="[4fa]"></a>k_now_ms</strong>(8 bytes, Stack size 0 btyes, bt_host_port_aos_aos_port.o(.text.k_now_ms))<br>
<p><strong><a name="[4fb]"></a>k_queue_prepend</strong>(12 bytes, Stack size 0 btyes, bt_host_port_aos_aos_port.o(.text.k_queue_prepend))<br>
<p><strong><a name="[4fc]"></a>k_queue_append</strong>(8 bytes, Stack size 0 btyes, bt_host_port_aos_aos_port.o(.text.k_queue_append))<br>
<p><strong><a name="[4fd]"></a>k_queue_append_list</strong>(34 bytes, Stack size 0 btyes, bt_host_port_aos_aos_port.o(.text.k_queue_append_list))<br>
<p><strong><a name="[4fe]"></a>k_queue_get</strong>(78 bytes, Stack size 0 btyes, bt_host_port_aos_aos_port.o(.text.k_queue_get))<br>
<p><strong><a name="[4ff]"></a>k_queue_is_empty</strong>(8 bytes, Stack size 0 btyes, bt_host_port_aos_aos_port.o(.text.k_queue_is_empty))<br>
<p><strong><a name="[500]"></a>k_uptime_get_32</strong>(8 bytes, Stack size 0 btyes, bt_host_port_aos_aos_port.o(.text.k_uptime_get_32))<br>
<p><strong><a name="[501]"></a>k_thread_spawn</strong>(60 bytes, Stack size 0 btyes, bt_host_port_aos_aos_port.o(.text.k_thread_spawn))<br>
<p><strong><a name="[502]"></a>k_yield</strong>(4 bytes, Stack size 0 btyes, bt_host_port_aos_aos_port.o(.text.k_yield))<br>
<p><strong><a name="[503]"></a>irq_lock</strong>(8 bytes, Stack size 4 btyes, bt_host_port_aos_aos_port.o(.text.irq_lock))<br>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
</ul>
<br>[Called By]<ul>
<li><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;except_process_function
<li><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_uart_loop
<li><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_api_le_rand
</ul>
<p><strong><a name="[504]"></a>irq_unlock</strong>(8 bytes, Stack size 4 btyes, bt_host_port_aos_aos_port.o(.text.irq_unlock))<br>
<br>[Calls]<ul>
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</ul>
<br>[Called By]<ul>
<li><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_uart_loop
<li><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_api_le_rand
</ul>
<p><strong><a name="[505]"></a>_SysFatalErrorHandler</strong>(2 bytes, Stack size 0 btyes, bt_host_port_aos_aos_port.o(.text._SysFatalErrorHandler))<br>
<p><strong><a name="[506]"></a>k_timer_init</strong>(64 bytes, Stack size 40 btyes, bt_host_port_aos_aos_port.o(.text.k_timer_init))<br>
<br>[Stack]<ul><li>Max Depth = 144 
<li>Call Chain = k_timer_init &rArr; krhino_timer_create &rArr; krhino_timer_start  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<li><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_create
</ul>
<br>[Called By]<ul>
<li><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ais_server_init
<li><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_scan_schd_init
</ul>
<p><strong><a name="[507]"></a>k_timer_start</strong>(54 bytes, Stack size 16 btyes, bt_host_port_aos_aos_port.o(.text.k_timer_start))<br>
<br>[Stack]<ul><li>Max Depth = 100 
<li>Call Chain = k_timer_start &rArr; krhino_timer_change &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<li><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_stop
<li><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<li><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_change
<li><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_start
</ul>
<br>[Called By]<ul>
<li><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ais_state_update
<li><a href="#[912]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_scan_schd_adv_scan_enter
<li><a href="#[913]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_scan_schd_adv_enter
<li><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_scan_timer
</ul>
<p><strong><a name="[508]"></a>k_timer_stop</strong>(20 bytes, Stack size 8 btyes, bt_host_port_aos_aos_port.o(.text.k_timer_stop))<br>
<br>[Stack]<ul><li>Max Depth = 84 
<li>Call Chain = k_timer_stop &rArr; krhino_timer_stop &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_stop
</ul>
<br>[Called By]<ul>
<li><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ais_state_update
<li><a href="#[911]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_scan_schd_adv_exit
<li><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_scan_schd_adv_scan_exit
</ul>
<p><strong><a name="[509]"></a>scheduler_loop</strong>(208 bytes, Stack size 0 btyes, bt_host_port_aos_event_scheduler.o(.text.scheduler_loop))<br>
<p><strong><a name="[50b]"></a>k_poll_event_init</strong>(36 bytes, Stack size 0 btyes, bt_host_port_aos_poll.o(.text.k_poll_event_init))<br>
<p><strong><a name="[50c]"></a>event_callback</strong>(120 bytes, Stack size 0 btyes, bt_host_port_aos_poll.o(.text.event_callback))<br>
<p><strong><a name="[50d]"></a>_handle_obj_poll_events</strong>(48 bytes, Stack size 0 btyes, bt_host_port_aos_poll.o(.text._handle_obj_poll_events))<br>
<p><strong><a name="[50e]"></a>k_poll</strong>(212 bytes, Stack size 0 btyes, bt_host_port_aos_poll.o(.text.k_poll))<br>
<p><strong><a name="[50f]"></a>k_poll_signal_raise</strong>(16 bytes, Stack size 0 btyes, bt_host_port_aos_poll.o(.text.k_poll_signal_raise))<br>
<p><strong><a name="[510]"></a>k_work_q_start</strong>(16 bytes, Stack size 0 btyes, bt_host_port_aos_work.o(.text.k_work_q_start))<br>
<p><strong><a name="[511]"></a>k_work_init</strong>(28 bytes, Stack size 0 btyes, bt_host_port_aos_work.o(.text.k_work_init))<br>
<p><strong><a name="[512]"></a>k_delayed_work_init</strong>(8 bytes, Stack size 0 btyes, bt_host_port_aos_work.o(.text.k_delayed_work_init))<br>
<p><strong><a name="[513]"></a>k_delayed_work_cancel</strong>(92 bytes, Stack size 0 btyes, bt_host_port_aos_work.o(.text.k_delayed_work_cancel))<br>
<p><strong><a name="[514]"></a>k_delayed_work_submit</strong>(180 bytes, Stack size 0 btyes, bt_host_port_aos_work.o(.text.k_delayed_work_submit))<br>
<p><strong><a name="[515]"></a>k_work_submit</strong>(10 bytes, Stack size 0 btyes, bt_host_port_aos_work.o(.text.k_work_submit))<br>
<p><strong><a name="[516]"></a>k_delayed_work_remaining_get</strong>(32 bytes, Stack size 0 btyes, bt_host_port_aos_work.o(.text.k_delayed_work_remaining_get))<br>
<p><strong><a name="[517]"></a>atomic_cas</strong>(34 bytes, Stack size 0 btyes, bt_host_port_core_atomic_c.o(.text.atomic_cas))<br>
<p><strong><a name="[518]"></a>atomic_add</strong>(24 bytes, Stack size 0 btyes, bt_host_port_core_atomic_c.o(.text.atomic_add))<br>
<p><strong><a name="[519]"></a>atomic_sub</strong>(24 bytes, Stack size 0 btyes, bt_host_port_core_atomic_c.o(.text.atomic_sub))<br>
<p><strong><a name="[51a]"></a>atomic_inc</strong>(22 bytes, Stack size 0 btyes, bt_host_port_core_atomic_c.o(.text.atomic_inc))<br>
<p><strong><a name="[51b]"></a>atomic_dec</strong>(22 bytes, Stack size 0 btyes, bt_host_port_core_atomic_c.o(.text.atomic_dec))<br>
<p><strong><a name="[51c]"></a>atomic_get</strong>(4 bytes, Stack size 0 btyes, bt_host_port_core_atomic_c.o(.text.atomic_get))<br>
<p><strong><a name="[51d]"></a>atomic_set</strong>(22 bytes, Stack size 0 btyes, bt_host_port_core_atomic_c.o(.text.atomic_set))<br>
<p><strong><a name="[51e]"></a>atomic_clear</strong>(22 bytes, Stack size 0 btyes, bt_host_port_core_atomic_c.o(.text.atomic_clear))<br>
<p><strong><a name="[51f]"></a>atomic_or</strong>(24 bytes, Stack size 0 btyes, bt_host_port_core_atomic_c.o(.text.atomic_or))<br>
<p><strong><a name="[520]"></a>atomic_xor</strong>(24 bytes, Stack size 0 btyes, bt_host_port_core_atomic_c.o(.text.atomic_xor))<br>
<p><strong><a name="[521]"></a>atomic_and</strong>(24 bytes, Stack size 0 btyes, bt_host_port_core_atomic_c.o(.text.atomic_and))<br>
<p><strong><a name="[522]"></a>atomic_nand</strong>(26 bytes, Stack size 0 btyes, bt_host_port_core_atomic_c.o(.text.atomic_nand))<br>
<p><strong><a name="[52c]"></a>net_buf_get</strong>(52 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_get))<br>
<p><strong><a name="[52d]"></a>net_buf_simple_init_with_data</strong>(12 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_init_with_data))<br>
<p><strong><a name="[52e]"></a>net_buf_simple_reserve</strong>(8 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_reserve))<br>
<p><strong><a name="[52f]"></a>net_buf_slist_put</strong>(50 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_slist_put))<br>
<p><strong><a name="[530]"></a>net_buf_slist_get</strong>(94 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_slist_get))<br>
<p><strong><a name="[531]"></a>net_buf_put</strong>(36 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_put))<br>
<p><strong><a name="[532]"></a>net_buf_unref</strong>(104 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_unref))<br>
<p><strong><a name="[533]"></a>net_buf_ref</strong>(8 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_ref))<br>
<p><strong><a name="[534]"></a>net_buf_frag_last</strong>(12 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_frag_last))<br>
<p><strong><a name="[535]"></a>net_buf_simple_add_le24</strong>(24 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_add_le24))<br>
<p><strong><a name="[536]"></a>net_buf_simple_add_be24</strong>(24 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_add_be24))<br>
<p><strong><a name="[537]"></a>net_buf_simple_add_le32</strong>(28 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_add_le32))<br>
<p><strong><a name="[538]"></a>net_buf_simple_add_be32</strong>(28 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_add_be32))<br>
<p><strong><a name="[539]"></a>net_buf_simple_add_le48</strong>(38 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_add_le48))<br>
<p><strong><a name="[53a]"></a>net_buf_simple_add_be48</strong>(38 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_add_be48))<br>
<p><strong><a name="[53b]"></a>net_buf_simple_add_le64</strong>(24 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_add_le64))<br>
<p><strong><a name="[53c]"></a>net_buf_simple_add_be64</strong>(24 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_add_be64))<br>
<p><strong><a name="[53d]"></a>net_buf_pool_init</strong>(44 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_pool_init))<br>
<p><strong><a name="[53e]"></a>net_buf_pool_get</strong>(16 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_pool_get))<br>
<p><strong><a name="[53f]"></a>net_buf_pool_is_free</strong>(32 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_pool_is_free))<br>
<p><strong><a name="[540]"></a>net_buf_poll_is_all_free</strong>(44 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_poll_is_all_free))<br>
<p><strong><a name="[541]"></a>net_buf_id</strong>(44 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_id))<br>
<p><strong><a name="[543]"></a>net_buf_reset</strong>(10 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_reset))<br>
<p><strong><a name="[544]"></a>net_buf_alloc_len</strong>(256 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_alloc_len))<br>
<p><strong><a name="[545]"></a>net_buf_alloc_fixed</strong>(16 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_alloc_fixed))<br>
<p><strong><a name="[546]"></a>net_buf_alloc_with_data</strong>(34 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_alloc_with_data))<br>
<p><strong><a name="[547]"></a>net_buf_frag_insert</strong>(26 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_frag_insert))<br>
<p><strong><a name="[548]"></a>net_buf_frag_add</strong>(34 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_frag_add))<br>
<p><strong><a name="[549]"></a>net_buf_frag_del</strong>(26 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_frag_del))<br>
<p><strong><a name="[54a]"></a>net_buf_linearize</strong>(90 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_linearize))<br>
<p><strong><a name="[54b]"></a>net_buf_simple_clone</strong>(16 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_clone))<br>
<p><strong><a name="[54c]"></a>net_buf_simple_add</strong>(16 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_add))<br>
<p><strong><a name="[54d]"></a>net_buf_simple_add_mem</strong>(20 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_add_mem))<br>
<p><strong><a name="[54e]"></a>net_buf_clone</strong>(212 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_clone))<br>
<p><strong><a name="[54f]"></a>net_buf_simple_add_u8</strong>(18 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_add_u8))<br>
<p><strong><a name="[550]"></a>net_buf_simple_add_le16</strong>(18 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_add_le16))<br>
<p><strong><a name="[551]"></a>net_buf_simple_add_be16</strong>(18 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_add_be16))<br>
<p><strong><a name="[552]"></a>net_buf_simple_push</strong>(16 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_push))<br>
<p><strong><a name="[553]"></a>net_buf_simple_push_le16</strong>(24 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_push_le16))<br>
<p><strong><a name="[554]"></a>net_buf_simple_push_be16</strong>(24 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_push_be16))<br>
<p><strong><a name="[555]"></a>net_buf_simple_push_u8</strong>(16 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_push_u8))<br>
<p><strong><a name="[556]"></a>net_buf_simple_push_le24</strong>(32 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_push_le24))<br>
<p><strong><a name="[557]"></a>net_buf_simple_push_be24</strong>(32 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_push_be24))<br>
<p><strong><a name="[558]"></a>net_buf_simple_push_le32</strong>(38 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_push_le32))<br>
<p><strong><a name="[559]"></a>net_buf_simple_push_be32</strong>(38 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_push_be32))<br>
<p><strong><a name="[55a]"></a>net_buf_simple_push_le48</strong>(50 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_push_le48))<br>
<p><strong><a name="[55b]"></a>net_buf_simple_push_be48</strong>(50 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_push_be48))<br>
<p><strong><a name="[55c]"></a>net_buf_simple_push_le64</strong>(26 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_push_le64))<br>
<p><strong><a name="[55d]"></a>net_buf_simple_push_be64</strong>(26 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_push_be64))<br>
<p><strong><a name="[55e]"></a>net_buf_simple_pull</strong>(16 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_pull))<br>
<p><strong><a name="[55f]"></a>net_buf_simple_pull_mem</strong>(16 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_pull_mem))<br>
<p><strong><a name="[560]"></a>net_buf_simple_pull_u8</strong>(16 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_pull_u8))<br>
<p><strong><a name="[561]"></a>net_buf_simple_pull_le16</strong>(22 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_pull_le16))<br>
<p><strong><a name="[562]"></a>net_buf_simple_pull_be16</strong>(28 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_pull_be16))<br>
<p><strong><a name="[563]"></a>net_buf_simple_pull_le24</strong>(28 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_pull_le24))<br>
<p><strong><a name="[564]"></a>net_buf_simple_pull_be24</strong>(46 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_pull_be24))<br>
<p><strong><a name="[565]"></a>net_buf_simple_pull_le32</strong>(34 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_pull_le32))<br>
<p><strong><a name="[566]"></a>net_buf_simple_pull_be32</strong>(58 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_pull_be32))<br>
<p><strong><a name="[567]"></a>net_buf_simple_pull_le48</strong>(44 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_pull_le48))<br>
<p><strong><a name="[568]"></a>net_buf_simple_pull_be48</strong>(108 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_pull_be48))<br>
<p><strong><a name="[569]"></a>net_buf_simple_pull_le64</strong>(56 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_pull_le64))<br>
<p><strong><a name="[56a]"></a>net_buf_simple_pull_be64</strong>(172 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_pull_be64))<br>
<p><strong><a name="[56b]"></a>net_buf_simple_headroom</strong>(8 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_headroom))<br>
<p><strong><a name="[56c]"></a>net_buf_simple_tailroom</strong>(16 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_simple_tailroom))<br>
<p><strong><a name="[56d]"></a>net_buf_append_bytes</strong>(106 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_append_bytes))<br>
<p><strong><a name="[56e]"></a>settings_init</strong>(32 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings.o(.text.settings_init))<br>
<p><strong><a name="[56f]"></a>settings_register</strong>(96 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings.o(.text.settings_register))<br>
<p><strong><a name="[570]"></a>settings_name_steq</strong>(76 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings.o(.text.settings_name_steq))<br>
<p><strong><a name="[571]"></a>settings_name_next</strong>(56 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings.o(.text.settings_name_next))<br>
<p><strong><a name="[572]"></a>settings_parse_and_lookup</strong>(100 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings.o(.text.settings_parse_and_lookup))<br>
<p><strong><a name="[573]"></a>settings_call_set_handler</strong>(96 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings.o(.text.settings_call_set_handler))<br>
<p><strong><a name="[574]"></a>settings_commit_subtree</strong>(80 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings.o(.text.settings_commit_subtree))<br>
<p><strong><a name="[575]"></a>settings_commit</strong>(10 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings.o(.text.settings_commit))<br>
<p><strong><a name="[576]"></a>settings_subsys_init</strong>(36 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_init.o(.text.settings_subsys_init))<br>
<p><strong><a name="[57b]"></a>settings_kv_src</strong>(32 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_kv.o(.text.settings_kv_src))<br>
<p><strong><a name="[57c]"></a>settings_kv_dst</strong>(32 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_kv.o(.text.settings_kv_dst))<br>
<p><strong><a name="[57d]"></a>settings_backend_init</strong>(24 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_kv.o(.text.settings_backend_init))<br>
<p><strong><a name="[57f]"></a>settings_line_write</strong>(208 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_line.o(.text.settings_line_write))<br>
<p><strong><a name="[580]"></a>settings_line_len_calc</strong>(14 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_line.o(.text.settings_line_len_calc))<br>
<p><strong><a name="[581]"></a>settings_line_raw_read</strong>(20 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_line.o(.text.settings_line_raw_read))<br>
<p><strong><a name="[583]"></a>settings_line_val_read</strong>(30 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_line.o(.text.settings_line_val_read))<br>
<p><strong><a name="[584]"></a>settings_line_val_get_len</strong>(20 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_line.o(.text.settings_line_val_get_len))<br>
<p><strong><a name="[585]"></a>settings_line_name_read</strong>(34 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_line.o(.text.settings_line_name_read))<br>
<p><strong><a name="[586]"></a>settings_line_entry_copy</strong>(88 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_line.o(.text.settings_line_entry_copy))<br>
<p><strong><a name="[587]"></a>settings_line_io_init</strong>(20 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_line.o(.text.settings_line_io_init))<br>
<p><strong><a name="[588]"></a>settings_line_dup_check_cb</strong>(128 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_line.o(.text.settings_line_dup_check_cb))<br>
<p><strong><a name="[589]"></a>settings_line_load_cb</strong>(40 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_line.o(.text.settings_line_load_cb))<br>
<p><strong><a name="[58a]"></a>settings_save_one</strong>(72 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_store.o(.text.settings_save_one))<br>
<p><strong><a name="[58b]"></a>settings_src_register</strong>(28 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_store.o(.text.settings_src_register))<br>
<p><strong><a name="[58c]"></a>settings_dst_register</strong>(12 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_store.o(.text.settings_dst_register))<br>
<p><strong><a name="[58d]"></a>settings_load_subtree</strong>(80 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_store.o(.text.settings_load_subtree))<br>
<p><strong><a name="[58e]"></a>settings_load</strong>(32 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_store.o(.text.settings_load))<br>
<p><strong><a name="[58f]"></a>settings_load_subtree_direct</strong>(64 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_store.o(.text.settings_load_subtree_direct))<br>
<p><strong><a name="[590]"></a>settings_delete</strong>(12 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_store.o(.text.settings_delete))<br>
<p><strong><a name="[591]"></a>settings_save</strong>(104 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_store.o(.text.settings_save))<br>
<p><strong><a name="[592]"></a>settings_store_init</strong>(16 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_store.o(.text.settings_store_init))<br>
<p><strong><a name="[593]"></a>char_array_cmp</strong>(36 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text.char_array_cmp))<br>
<p><strong><a name="[594]"></a>hal_copy_bin_from_flash_to_sram</strong>(8 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text.hal_copy_bin_from_flash_to_sram))<br>
<p><strong><a name="[595]"></a>hal_my_sizeof</strong>(18 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text.hal_my_sizeof))<br>
<p><strong><a name="[596]"></a>hal_my_strlen</strong>(18 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text.hal_my_strlen))<br>
<p><strong><a name="[597]"></a>hal_is_an_valid_number</strong>(28 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text.hal_is_an_valid_number))<br>
<p><strong><a name="[598]"></a>hal_convert_hex_to_char</strong>(132 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text.hal_convert_hex_to_char))<br>
<p><strong><a name="[599]"></a>hal_convert_hex_to_char_wo_x</strong>(124 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text.hal_convert_hex_to_char_wo_x))<br>
<p><strong><a name="[59a]"></a>hal_convert_char_to_hex</strong>(212 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text.hal_convert_char_to_hex))<br>
<p><strong><a name="[59b]"></a>hal_convert_char_to_dec</strong>(42 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text.hal_convert_char_to_dec))<br>
<p><strong><a name="[59c]"></a>hal_clk_gate_enable</strong>(74 bytes, Stack size 0 btyes, components_driver_src_clock.o(.__sram.code.hal_clk_gate_enable))<br>
<br>[Called By]<ul>
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_init
<li><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_dma_alloc_channel
<li><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_initialize
<li><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_wdt_initialize
</ul>
<p><strong><a name="[59d]"></a>hal_clk_gate_disable</strong>(80 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text.hal_clk_gate_disable))<br>
<br>[Called By]<ul>
<li><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_wdt_uninitialize
</ul>
<p><strong><a name="[59e]"></a>hal_clk_gate_get</strong>(46 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text.hal_clk_gate_get))<br>
<p><strong><a name="[59f]"></a>hal_clk_get_modules_state</strong>(18 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text.hal_clk_get_modules_state))<br>
<p><strong><a name="[5a0]"></a>hal_clk_reset</strong>(144 bytes, Stack size 0 btyes, components_driver_src_clock.o(.__sram.code.hal_clk_reset))<br>
<br>[Called By]<ul>
<li><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_initialize
<li><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_wdt_set_timeout
</ul>
<p><strong><a name="[5a1]"></a>hal_clk_rf_config</strong>(60 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text.hal_clk_rf_config))<br>
<p><strong><a name="[5a2]"></a>hal_clk_rxadc_config</strong>(60 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text.hal_clk_rxadc_config))<br>
<p><strong><a name="[5a3]"></a>hal_clk_cb</strong>(2 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text.hal_clk_cb))<br>
<p><strong><a name="[5a4]"></a>hal_clk_set_hclk</strong>(2 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text.hal_clk_set_hclk))<br>
<p><strong><a name="[5a5]"></a>hal_clk_set_pclk</strong>(112 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text.hal_clk_set_pclk))<br>
<p><strong><a name="[5a6]"></a>hal_clk_init</strong>(16 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text.hal_clk_init))<br>
<p><strong><a name="[5a7]"></a>hal_rtc_clock_config</strong>(136 bytes, Stack size 4 btyes, components_driver_src_clock.o(.text.hal_rtc_clock_config))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = hal_rtc_clock_config &rArr; phy_gpio_pull_set </ul>
<br>[Calls]<ul>
<li><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_gpio_pull_set
</ul>
<br>[Called By]<ul>
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</ul>
<p><strong><a name="[5a8]"></a>hal_systick</strong>(12 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text.hal_systick))<br>
<p><strong><a name="[5a9]"></a>hal_ms_intv</strong>(40 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text.hal_ms_intv))<br>
<p><strong><a name="[5aa]"></a>_symrom_WaitMs</strong>(40 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text._symrom_WaitMs))<br>
<p><strong><a name="[5ab]"></a>hal_system_soft_reset</strong>(10 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text.hal_system_soft_reset))<br>
<p><strong><a name="[5ac]"></a>hal_setMem</strong>(14 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text.hal_setMem))<br>
<p><strong><a name="[5ad]"></a>hal_cpyMem</strong>(18 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text.hal_cpyMem))<br>
<p><strong><a name="[5ae]"></a>hal_cpyMem32</strong>(26 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text.hal_cpyMem32))<br>
<p><strong><a name="[5af]"></a>hal_my_strcmp</strong>(30 bytes, Stack size 0 btyes, components_driver_src_clock.o(.text.hal_my_strcmp))<br>
<p><strong><a name="[5b0]"></a>hal_dma_init_channel</strong>(56 bytes, Stack size 0 btyes, components_driver_src_dma.o(.__sram.code))<br>
<p><strong><a name="[5b1]"></a>hal_dma_wait_channel_complete</strong>(40 bytes, Stack size 0 btyes, components_driver_src_dma.o(.text.hal_dma_wait_channel_complete))<br>
<p><strong><a name="[5b2]"></a>hal_dma_status_control</strong>(44 bytes, Stack size 0 btyes, components_driver_src_dma.o(.text.hal_dma_status_control))<br>
<p><strong><a name="[5b3]"></a>hal_dma_init</strong>(88 bytes, Stack size 0 btyes, components_driver_src_dma.o(.text.hal_dma_init))<br>
<p><strong><a name="[5b4]"></a>hal_dma_deinit</strong>(48 bytes, Stack size 0 btyes, components_driver_src_dma.o(.text.hal_dma_deinit))<br>
<p><strong><a name="[5b5]"></a>hal_dma_config_channel</strong>(520 bytes, Stack size 0 btyes, components_driver_src_dma.o(.__sram.code))<br>
<p><strong><a name="[5b6]"></a>hal_dma_start_channel</strong>(44 bytes, Stack size 0 btyes, components_driver_src_dma.o(.__sram.code))<br>
<p><strong><a name="[5b7]"></a>hal_dma_stop_channel</strong>(120 bytes, Stack size 0 btyes, components_driver_src_dma.o(.__sram.code))<br>
<p><strong><a name="[5b8]"></a>hal_DMA_IRQHandler</strong>(76 bytes, Stack size 0 btyes, components_driver_src_dma.o(.__sram.code))<br>
<p><strong><a name="[5b9]"></a>phy_gpio_write</strong>(40 bytes, Stack size 0 btyes, components_driver_src_gpio.o(.text.phy_gpio_write))<br>
<p><strong><a name="[5ba]"></a>phy_gpio_ds_control</strong>(32 bytes, Stack size 0 btyes, components_driver_src_gpio.o(.text.phy_gpio_ds_control))<br>
<p><strong><a name="[5bb]"></a>phy_gpioretention_unregister</strong>(44 bytes, Stack size 0 btyes, components_driver_src_gpio.o(.text.phy_gpioretention_unregister))<br>
<p><strong><a name="[5bc]"></a>phy_gpio_pull_set</strong>(92 bytes, Stack size 8 btyes, components_driver_src_gpio.o(.text.phy_gpio_pull_set))<br>
<br>[Called By]<ul>
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<li><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_gpio_cfg_analog_io
<li><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_clock_config
</ul>
<p><strong><a name="[5bd]"></a>phy_gpio_cfg_analog_io</strong>(56 bytes, Stack size 12 btyes, components_driver_src_gpio.o(.text.phy_gpio_cfg_analog_io))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = phy_gpio_cfg_analog_io &rArr; phy_gpio_pull_set </ul>
<br>[Calls]<ul>
<li><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_gpio_pull_set
</ul>
<br>[Called By]<ul>
<li><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pinmux_config
</ul>
<p><strong><a name="[5be]"></a>phy_gpio_wakeup_set</strong>(148 bytes, Stack size 0 btyes, components_driver_src_gpio.o(.text.phy_gpio_wakeup_set))<br>
<p><strong><a name="[5c0]"></a>phy_gpio_pin2pin3_control</strong>(36 bytes, Stack size 4 btyes, components_driver_src_gpio.o(.text.phy_gpio_pin2pin3_control))<br>
<br>[Calls]<ul>
<li><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_gpio_pin2pin3_control.part.2
</ul>
<br>[Called By]<ul>
<li><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pinmux_config
</ul>
<p><strong><a name="[5c1]"></a>phy_gpio_retention_enable</strong>(124 bytes, Stack size 0 btyes, components_driver_src_gpio.o(.text.phy_gpio_retention_enable))<br>
<p><strong><a name="[5c2]"></a>phy_gpioin_disable</strong>(72 bytes, Stack size 0 btyes, components_driver_src_gpio.o(.text.phy_gpioin_disable))<br>
<p><strong><a name="[5c3]"></a>phy_gpioin_unregister</strong>(40 bytes, Stack size 0 btyes, components_driver_src_gpio.o(.text.phy_gpioin_unregister))<br>
<p><strong><a name="[5c4]"></a>phy_gpioin_enable</strong>(100 bytes, Stack size 0 btyes, components_driver_src_gpio.o(.text.phy_gpioin_enable))<br>
<p><strong><a name="[5c6]"></a>phy_gpioretention_register</strong>(40 bytes, Stack size 0 btyes, components_driver_src_gpio.o(.text.phy_gpioretention_register))<br>
<br>[Called By]<ul>
<li><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_gpio_pin_config_direction
</ul>
<p><strong><a name="[5c7]"></a>phy_gpioretention_prepare_sleep_action</strong>(44 bytes, Stack size 0 btyes, components_driver_src_gpio.o(.__sram.code.phy_gpioretention_prepare_sleep_action))<br>
<p><strong><a name="[5c8]"></a>phy_gpioretention_prepare_wakeup_action</strong>(60 bytes, Stack size 0 btyes, components_driver_src_gpio.o(.__sram.code.phy_gpioretention_prepare_wakeup_action))<br>
<p><strong><a name="[5c9]"></a>phy_gpioin_register</strong>(64 bytes, Stack size 0 btyes, components_driver_src_gpio.o(.text.phy_gpioin_register))<br>
<p><strong><a name="[5ca]"></a>phy_gpio_init</strong>(112 bytes, Stack size 0 btyes, components_driver_src_gpio.o(.text.phy_gpio_init))<br>
<p><strong><a name="[5cb]"></a>phy_gpio_debug_mux</strong>(32 bytes, Stack size 0 btyes, components_driver_src_gpio.o(.text.phy_gpio_debug_mux))<br>
<p><strong><a name="[5ce]"></a>phy_GPIO_IRQHandler</strong>(104 bytes, Stack size 0 btyes, components_driver_src_gpio.o(.text.phy_GPIO_IRQHandler))<br>
<p><strong><a name="[5d0]"></a>phy_gpio_fast_write</strong>(32 bytes, Stack size 0 btyes, components_driver_src_gpio.o(.text.phy_gpio_fast_write))<br>
<p><strong><a name="[5d1]"></a>phy_gpio_read</strong>(36 bytes, Stack size 0 btyes, components_driver_src_gpio.o(.text.phy_gpio_read))<br>
<br>[Called By]<ul>
<li><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_yoc_init
</ul>
<p><strong><a name="[5d2]"></a>phy_gpio_fmux</strong>(32 bytes, Stack size 0 btyes, components_driver_src_gpio.o(.text.phy_gpio_fmux))<br>
<br>[Called By]<ul>
<li><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_gpio_pin_init
<li><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pinmux_config
</ul>
<p><strong><a name="[5d3]"></a>phy_gpio_fmux_set</strong>(60 bytes, Stack size 8 btyes, components_driver_src_gpio.o(.text.phy_gpio_fmux_set))<br>
<br>[Called By]<ul>
<li><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_yoc_init
<li><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_hal_open
<li><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pinmux_config
</ul>
<p><strong><a name="[5d4]"></a>phy_gpio_pin_init</strong>(60 bytes, Stack size 12 btyes, components_driver_src_gpio.o(.text.phy_gpio_pin_init))<br>
<br>[Calls]<ul>
<li><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_gpio_fmux
<li><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_gpio_pin2pin3_control.part.2
</ul>
<br>[Called By]<ul>
<li><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_yoc_init
<li><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_hal_open
</ul>
<p><strong><a name="[5d9]"></a>hal_KSCAN_IRQHandler</strong>(152 bytes, Stack size 0 btyes, components_driver_src_kscan.o(.text.hal_KSCAN_IRQHandler))<br>
<p><strong><a name="[5dc]"></a>hal_kscan_init</strong>(116 bytes, Stack size 0 btyes, components_driver_src_kscan.o(.text.hal_kscan_init))<br>
<p><strong><a name="[5dd]"></a>hal_kscan_timeout_handler</strong>(124 bytes, Stack size 0 btyes, components_driver_src_kscan.o(.text.hal_kscan_timeout_handler))<br>
<p><strong><a name="[5df]"></a>drv_adc_initialize</strong>(40 bytes, Stack size 0 btyes, components_driver_src_phy_adc.o(.text.drv_adc_initialize))<br>
<p><strong><a name="[5e0]"></a>drv_adc_uninitialize</strong>(40 bytes, Stack size 0 btyes, components_driver_src_phy_adc.o(.text.drv_adc_uninitialize))<br>
<p><strong><a name="[5e1]"></a>drv_adc_get_capabilities</strong>(28 bytes, Stack size 0 btyes, components_driver_src_phy_adc.o(.text.drv_adc_get_capabilities))<br>
<p><strong><a name="[5e2]"></a>drv_adc_config</strong>(216 bytes, Stack size 0 btyes, components_driver_src_phy_adc.o(.text.drv_adc_config))<br>
<p><strong><a name="[5e3]"></a>drv_adc_battery_config</strong>(316 bytes, Stack size 0 btyes, components_driver_src_phy_adc.o(.text.drv_adc_battery_config))<br>
<p><strong><a name="[5e4]"></a>drv_adc_start</strong>(36 bytes, Stack size 0 btyes, components_driver_src_phy_adc.o(.text.drv_adc_start))<br>
<p><strong><a name="[5e5]"></a>drv_adc_stop</strong>(24 bytes, Stack size 0 btyes, components_driver_src_phy_adc.o(.text.drv_adc_stop))<br>
<p><strong><a name="[5e6]"></a>drv_adc_read</strong>(44 bytes, Stack size 0 btyes, components_driver_src_phy_adc.o(.text.drv_adc_read))<br>
<p><strong><a name="[5e7]"></a>drv_adc_get_status</strong>(4 bytes, Stack size 0 btyes, components_driver_src_phy_adc.o(.text.drv_adc_get_status))<br>
<p><strong><a name="[5e8]"></a>phy_ADC_IRQHandler</strong>(2 bytes, Stack size 0 btyes, components_driver_src_phy_adc.o(.text.phy_ADC_IRQHandler))<br>
<p><strong><a name="[5ea]"></a>phy_adc_init</strong>(8 bytes, Stack size 0 btyes, components_driver_src_phy_adc.o(.text.phy_adc_init))<br>
<p><strong><a name="[5eb]"></a>phy_adc_clock_config</strong>(24 bytes, Stack size 0 btyes, components_driver_src_phy_adc.o(.text.phy_adc_clock_config))<br>
<p><strong><a name="[5ec]"></a>phy_adc_start</strong>(68 bytes, Stack size 0 btyes, components_driver_src_phy_adc.o(.text.phy_adc_start))<br>
<p><strong><a name="[5ed]"></a>phy_adc_start_int_dis</strong>(68 bytes, Stack size 0 btyes, components_driver_src_phy_adc.o(.text.phy_adc_start_int_dis))<br>
<p><strong><a name="[5ee]"></a>phy_adc_config_channel</strong>(772 bytes, Stack size 0 btyes, components_driver_src_phy_adc.o(.text.phy_adc_config_channel))<br>
<p><strong><a name="[5ef]"></a>phy_adc_stop</strong>(148 bytes, Stack size 0 btyes, components_driver_src_phy_adc.o(.text.phy_adc_stop))<br>
<p><strong><a name="[5f0]"></a>phy_adc_value_cal</strong>(356 bytes, Stack size 0 btyes, components_driver_src_phy_adc.o(.text.phy_adc_value_cal))<br>
<p><strong><a name="[5f1]"></a>drv_adc_comparator_config</strong>(8 bytes, Stack size 0 btyes, components_driver_src_phy_adc.o(.text.drv_adc_comparator_config))<br>
<p><strong><a name="[5f2]"></a>drv_adc_power_control</strong>(8 bytes, Stack size 0 btyes, components_driver_src_phy_adc.o(.text.drv_adc_power_control))<br>
<p><strong><a name="[5f3]"></a>ioreuse_initial</strong>(2 bytes, Stack size 0 btyes, components_driver_src_pinmux.o(.text.ioreuse_initial))<br>
<p><strong><a name="[5f4]"></a>drv_pinmux_config</strong>(104 bytes, Stack size 8 btyes, components_driver_src_pinmux.o(.text.drv_pinmux_config))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = drv_pinmux_config &rArr; phy_gpio_cfg_analog_io &rArr; phy_gpio_pull_set  </ul>
<br>[Calls]<ul>
<li><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_gpio_fmux
<li><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_gpio_cfg_analog_io
<li><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_gpio_pin2pin3_control
<li><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_gpio_fmux_set
</ul>
<br>[Called By]<ul>
<li><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_board_init
<li><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_yoc_init
<li><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_test_gpio_write
<li><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_test_gpio_read
</ul>
<p><strong><a name="[5f5]"></a>drv_pin_config_mode</strong>(40 bytes, Stack size 0 btyes, components_driver_src_pinmux.o(.text.drv_pin_config_mode))<br>
<p><strong><a name="[5f6]"></a>drv_pinmux_get_config</strong>(4 bytes, Stack size 0 btyes, components_driver_src_pinmux.o(.text.drv_pinmux_get_config))<br>
<p><strong><a name="[5f7]"></a>drv_pinmux_dwuart_save</strong>(2 bytes, Stack size 0 btyes, components_driver_src_pinmux.o(.text.drv_pinmux_dwuart_save))<br>
<p><strong><a name="[5f8]"></a>drv_pinmux_dwuart_restore</strong>(2 bytes, Stack size 0 btyes, components_driver_src_pinmux.o(.text.drv_pinmux_dwuart_restore))<br>
<p><strong><a name="[5f9]"></a>drv_pinmux_reset</strong>(2 bytes, Stack size 0 btyes, components_driver_src_pinmux.o(.text.drv_pinmux_reset))<br>
<p><strong><a name="[5fa]"></a>phy_pwm_init</strong>(80 bytes, Stack size 0 btyes, components_driver_src_pwm.o(.text.phy_pwm_init))<br>
<p><strong><a name="[5fb]"></a>phy_pwm_open_channel</strong>(24 bytes, Stack size 0 btyes, components_driver_src_pwm.o(.text.phy_pwm_open_channel))<br>
<p><strong><a name="[5fc]"></a>phy_pwm_close_channel</strong>(24 bytes, Stack size 0 btyes, components_driver_src_pwm.o(.text.phy_pwm_close_channel))<br>
<p><strong><a name="[5fd]"></a>phy_pwm_destroy</strong>(88 bytes, Stack size 0 btyes, components_driver_src_pwm.o(.text.phy_pwm_destroy))<br>
<p><strong><a name="[5fe]"></a>phy_pwm_set_count_val</strong>(56 bytes, Stack size 0 btyes, components_driver_src_pwm.o(.text.phy_pwm_set_count_val))<br>
<p><strong><a name="[5ff]"></a>phy_pwm_start</strong>(40 bytes, Stack size 0 btyes, components_driver_src_pwm.o(.text.phy_pwm_start))<br>
<p><strong><a name="[600]"></a>phy_pwm_stop</strong>(36 bytes, Stack size 0 btyes, components_driver_src_pwm.o(.text.phy_pwm_stop))<br>
<p><strong><a name="[601]"></a>phy_pwm_module_init</strong>(60 bytes, Stack size 0 btyes, components_driver_src_pwm.o(.text.phy_pwm_module_init))<br>
<p><strong><a name="[602]"></a>phy_pwm_module_deinit</strong>(72 bytes, Stack size 0 btyes, components_driver_src_pwm.o(.text.phy_pwm_module_deinit))<br>
<p><strong><a name="[603]"></a>drv_pwm_get_clockdiv</strong>(28 bytes, Stack size 0 btyes, components_driver_src_pwm.o(.text.drv_pwm_get_clockdiv))<br>
<p><strong><a name="[604]"></a>phy_pwm_ch_start</strong>(32 bytes, Stack size 0 btyes, components_driver_src_pwm.o(.text.phy_pwm_ch_start))<br>
<p><strong><a name="[605]"></a>phy_pwm_ch_stop</strong>(40 bytes, Stack size 0 btyes, components_driver_src_pwm.o(.text.phy_pwm_ch_stop))<br>
<p><strong><a name="[606]"></a>phy_pwm_ch_enable</strong>(12 bytes, Stack size 0 btyes, components_driver_src_pwm.o(.text.phy_pwm_ch_enable))<br>
<p><strong><a name="[607]"></a>csi_pwm_initialize</strong>(32 bytes, Stack size 0 btyes, components_driver_src_pwm.o(.text.csi_pwm_initialize))<br>
<p><strong><a name="[608]"></a>csi_pwm_uninitialize</strong>(8 bytes, Stack size 0 btyes, components_driver_src_pwm.o(.text.csi_pwm_uninitialize))<br>
<p><strong><a name="[609]"></a>csi_pwm_config</strong>(152 bytes, Stack size 0 btyes, components_driver_src_pwm.o(.text.csi_pwm_config))<br>
<p><strong><a name="[60a]"></a>csi_pwm_start</strong>(36 bytes, Stack size 0 btyes, components_driver_src_pwm.o(.text.csi_pwm_start))<br>
<p><strong><a name="[60b]"></a>csi_pwm_stop</strong>(14 bytes, Stack size 0 btyes, components_driver_src_pwm.o(.text.csi_pwm_stop))<br>
<p><strong><a name="[60c]"></a>csi_pwm_power_control</strong>(8 bytes, Stack size 0 btyes, components_driver_src_pwm.o(.text.csi_pwm_power_control))<br>
<p><strong><a name="[60d]"></a>drv_pwm_config_clockdiv</strong>(38 bytes, Stack size 0 btyes, components_driver_src_pwm.o(.text.drv_pwm_config_clockdiv))<br>
<p><strong><a name="[60e]"></a>hal_pwrmgr_init</strong>(24 bytes, Stack size 0 btyes, components_driver_src_pwrmgr.o(.text.hal_pwrmgr_init))<br>
<p><strong><a name="[60f]"></a>hal_pwrmgr_is_lock</strong>(56 bytes, Stack size 0 btyes, components_driver_src_pwrmgr.o(.text.hal_pwrmgr_is_lock))<br>
<p><strong><a name="[610]"></a>hal_pwrmgr_lock</strong>(60 bytes, Stack size 0 btyes, components_driver_src_pwrmgr.o(.text.hal_pwrmgr_lock))<br>
<p><strong><a name="[611]"></a>hal_pwrmgr_unlock</strong>(76 bytes, Stack size 0 btyes, components_driver_src_pwrmgr.o(.text.hal_pwrmgr_unlock))<br>
<p><strong><a name="[612]"></a>hal_pwrmgr_register</strong>(52 bytes, Stack size 0 btyes, components_driver_src_pwrmgr.o(.text.hal_pwrmgr_register))<br>
<p><strong><a name="[613]"></a>hal_pwrmgr_unregister</strong>(68 bytes, Stack size 0 btyes, components_driver_src_pwrmgr.o(.text.hal_pwrmgr_unregister))<br>
<p><strong><a name="[614]"></a>hal_pwrmgr_wakeup_process</strong>(40 bytes, Stack size 0 btyes, components_driver_src_pwrmgr.o(.text.hal_pwrmgr_wakeup_process))<br>
<p><strong><a name="[615]"></a>hal_pwrmgr_RAM_retention</strong>(32 bytes, Stack size 0 btyes, components_driver_src_pwrmgr.o(.text.hal_pwrmgr_RAM_retention))<br>
<br>[Called By]<ul>
<li><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pm_ram_retention
</ul>
<p><strong><a name="[616]"></a>hal_pwrmgr_RAM_retention_clr</strong>(24 bytes, Stack size 0 btyes, components_driver_src_pwrmgr.o(.text.hal_pwrmgr_RAM_retention_clr))<br>
<p><strong><a name="[617]"></a>hal_pwrmgr_RAM_retention_set</strong>(36 bytes, Stack size 0 btyes, components_driver_src_pwrmgr.o(.text.hal_pwrmgr_RAM_retention_set))<br>
<br>[Called By]<ul>
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</ul>
<p><strong><a name="[618]"></a>hal_pwrmgr_sleep_process</strong>(44 bytes, Stack size 0 btyes, components_driver_src_pwrmgr.o(.text.hal_pwrmgr_sleep_process))<br>
<p><strong><a name="[619]"></a>hal_pwrmgr_LowCurrentLdo_enable</strong>(20 bytes, Stack size 0 btyes, components_driver_src_pwrmgr.o(.text.hal_pwrmgr_LowCurrentLdo_enable))<br>
<p><strong><a name="[61a]"></a>hal_pwrmgr_LowCurrentLdo_disable</strong>(20 bytes, Stack size 0 btyes, components_driver_src_pwrmgr.o(.text.hal_pwrmgr_LowCurrentLdo_disable))<br>
<p><strong><a name="[61b]"></a>hal_pwrmgr_poweroff</strong>(52 bytes, Stack size 0 btyes, components_driver_src_pwrmgr.o(.text.hal_pwrmgr_poweroff))<br>
<p><strong><a name="[61c]"></a>system_on_handler</strong>(156 bytes, Stack size 0 btyes, components_driver_src_pwrmgr.o(.text.system_on_handler))<br>
<p><strong><a name="[620]"></a>hal_SPI0_IRQHandler</strong>(44 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.hal_SPI0_IRQHandler))<br>
<p><strong><a name="[621]"></a>hal_SPI1_IRQHandler</strong>(44 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.hal_SPI1_IRQHandler))<br>
<p><strong><a name="[625]"></a>spi_int_enable</strong>(132 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.spi_int_enable))<br>
<p><strong><a name="[626]"></a>hal_spis_rx_len</strong>(24 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.hal_spis_rx_len))<br>
<p><strong><a name="[627]"></a>hal_spis_read_rxn</strong>(40 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.hal_spis_read_rxn))<br>
<p><strong><a name="[628]"></a>hal_spis_bus_init</strong>(164 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.hal_spis_bus_init))<br>
<p><strong><a name="[629]"></a>hal_spi_bus_deinit</strong>(108 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.hal_spi_bus_deinit))<br>
<p><strong><a name="[62c]"></a>hal_spi_init1</strong>(92 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.hal_spi_init1))<br>
<p><strong><a name="[62d]"></a>hal_spi_slave_init</strong>(152 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.hal_spi_slave_init))<br>
<p><strong><a name="[62e]"></a>hal_spi_transmit</strong>(560 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.hal_spi_transmit))<br>
<p><strong><a name="[62f]"></a>hal_spi_set_tx_buffer</strong>(68 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.hal_spi_set_tx_buffer))<br>
<p><strong><a name="[630]"></a>hal_spi_set_int_mode</strong>(80 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.hal_spi_set_int_mode))<br>
<p><strong><a name="[631]"></a>hal_spi_set_force_cs</strong>(52 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.hal_spi_set_force_cs))<br>
<p><strong><a name="[632]"></a>hal_spi_get_transmit_bus_state</strong>(16 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.hal_spi_get_transmit_bus_state))<br>
<p><strong><a name="[633]"></a>hal_spi_TxComplete</strong>(96 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.hal_spi_TxComplete))<br>
<p><strong><a name="[634]"></a>hal_spi_send_byte</strong>(108 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.hal_spi_send_byte))<br>
<p><strong><a name="[635]"></a>hal_spi_bus_init</strong>(312 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.hal_spi_bus_init))<br>
<p><strong><a name="[636]"></a>hal_spis_clear_rx</strong>(84 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.hal_spis_clear_rx))<br>
<p><strong><a name="[637]"></a>hal_voice_enable</strong>(24 bytes, Stack size 0 btyes, components_driver_src_voice.o(.text.hal_voice_enable))<br>
<p><strong><a name="[638]"></a>hal_voice_disable</strong>(22 bytes, Stack size 0 btyes, components_driver_src_voice.o(.text.hal_voice_disable))<br>
<p><strong><a name="[639]"></a>hal_voice_dmic_mode</strong>(16 bytes, Stack size 0 btyes, components_driver_src_voice.o(.text.hal_voice_dmic_mode))<br>
<p><strong><a name="[63a]"></a>hal_voice_amic_mode</strong>(68 bytes, Stack size 0 btyes, components_driver_src_voice.o(.text.hal_voice_amic_mode))<br>
<p><strong><a name="[63b]"></a>hal_voice_dmic_open</strong>(20 bytes, Stack size 0 btyes, components_driver_src_voice.o(.text.hal_voice_dmic_open))<br>
<p><strong><a name="[63c]"></a>hal_voice_amic_gain</strong>(76 bytes, Stack size 0 btyes, components_driver_src_voice.o(.text.hal_voice_amic_gain))<br>
<p><strong><a name="[63d]"></a>hal_voice_gain</strong>(24 bytes, Stack size 0 btyes, components_driver_src_voice.o(.text.hal_voice_gain))<br>
<p><strong><a name="[63e]"></a>hal_voice_encode</strong>(20 bytes, Stack size 0 btyes, components_driver_src_voice.o(.text.hal_voice_encode))<br>
<p><strong><a name="[63f]"></a>hal_voice_rate</strong>(20 bytes, Stack size 0 btyes, components_driver_src_voice.o(.text.hal_voice_rate))<br>
<p><strong><a name="[640]"></a>hal_voice_amute_on</strong>(14 bytes, Stack size 0 btyes, components_driver_src_voice.o(.text.hal_voice_amute_on))<br>
<p><strong><a name="[641]"></a>hal_voice_amute_off</strong>(16 bytes, Stack size 0 btyes, components_driver_src_voice.o(.text.hal_voice_amute_off))<br>
<p><strong><a name="[642]"></a>hal_ADC_IRQHandler</strong>(192 bytes, Stack size 0 btyes, components_driver_src_voice.o(.text.hal_ADC_IRQHandler))<br>
<p><strong><a name="[643]"></a>hal_voice_init</strong>(40 bytes, Stack size 0 btyes, components_driver_src_voice.o(.text.hal_voice_init))<br>
<p><strong><a name="[644]"></a>hal_voice_config</strong>(380 bytes, Stack size 0 btyes, components_driver_src_voice.o(.text.hal_voice_config))<br>
<p><strong><a name="[645]"></a>hal_voice_start</strong>(136 bytes, Stack size 0 btyes, components_driver_src_voice.o(.text.hal_voice_start))<br>
<p><strong><a name="[646]"></a>hal_voice_stop</strong>(64 bytes, Stack size 0 btyes, components_driver_src_voice.o(.text.hal_voice_stop))<br>
<p><strong><a name="[647]"></a>hal_voice_clear</strong>(72 bytes, Stack size 0 btyes, components_driver_src_voice.o(.text.hal_voice_clear))<br>
<p><strong><a name="[648]"></a>drv_irq_enable</strong>(32 bytes, Stack size 0 btyes, csi_drivers_ck_irq.o(.__sram.code.drv_irq_enable))<br>
<br>[Called By]<ul>
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<li><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
<li><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_dma_alloc_channel
<li><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_gpio_port_initialize
<li><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_initialize
</ul>
<p><strong><a name="[649]"></a>drv_irq_disable</strong>(32 bytes, Stack size 0 btyes, csi_drivers_ck_irq.o(.__sram.code.drv_irq_disable))<br>
<br>[Called By]<ul>
<li><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_wdt_close
<li><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_dma_release_channel
<li><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_uninitialize
<li><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_wdt_uninitialize
</ul>
<p><strong><a name="[64a]"></a>drv_irq_register</strong>(16 bytes, Stack size 0 btyes, csi_drivers_ck_irq.o(.text.drv_irq_register))<br>
<br>[Called By]<ul>
<li><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
<li><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_dma_alloc_channel
<li><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_gpio_port_initialize
<li><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_initialize
</ul>
<p><strong><a name="[64b]"></a>drv_irq_unregister</strong>(20 bytes, Stack size 0 btyes, csi_drivers_ck_irq.o(.text.drv_irq_unregister))<br>
<br>[Called By]<ul>
<li><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_wdt_close
<li><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_dma_release_channel
<li><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_uninitialize
<li><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_wdt_uninitialize
</ul>
<p><strong><a name="[64c]"></a>target_get</strong>(64 bytes, Stack size 8 btyes, csi_drivers_device.o(.text.target_get))<br>
<br>[Called By]<ul>
<li><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_usart_init
<li><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_get_wdt
<li><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_get_dmac
</ul>
<p><strong><a name="[64d]"></a>target_usart_init</strong>(28 bytes, Stack size 8 btyes, csi_drivers_device.o(.text.target_usart_init))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = target_usart_init &rArr; target_get </ul>
<br>[Calls]<ul>
<li><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_get
</ul>
<br>[Called By]<ul>
<li><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_initialize
</ul>
<p><strong><a name="[64e]"></a>target_gpio_port_init</strong>(60 bytes, Stack size 4 btyes, csi_drivers_device.o(.text.target_gpio_port_init))<br>
<br>[Called By]<ul>
<li><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_gpio_port_initialize
</ul>
<p><strong><a name="[64f]"></a>target_gpio_pin_init</strong>(44 bytes, Stack size 8 btyes, csi_drivers_device.o(.text.target_gpio_pin_init))<br>
<br>[Called By]<ul>
<li><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_gpio_pin_initialize
</ul>
<p><strong><a name="[650]"></a>target_get_timer</strong>(28 bytes, Stack size 0 btyes, csi_drivers_device.o(.text.target_get_timer))<br>
<p><strong><a name="[651]"></a>target_spi_init</strong>(52 bytes, Stack size 0 btyes, csi_drivers_device.o(.text.target_spi_init))<br>
<p><strong><a name="[652]"></a>target_get_rtc_count</strong>(4 bytes, Stack size 0 btyes, csi_drivers_device.o(.text.target_get_rtc_count))<br>
<p><strong><a name="[653]"></a>target_get_rtc</strong>(24 bytes, Stack size 0 btyes, csi_drivers_device.o(.text.target_get_rtc))<br>
<p><strong><a name="[654]"></a>target_get_wdt</strong>(28 bytes, Stack size 8 btyes, csi_drivers_device.o(.text.target_get_wdt))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = target_get_wdt &rArr; target_get </ul>
<br>[Calls]<ul>
<li><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_get
</ul>
<br>[Called By]<ul>
<li><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_wdt_close
<li><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_wdt_initialize
</ul>
<p><strong><a name="[655]"></a>target_iic_init</strong>(28 bytes, Stack size 0 btyes, csi_drivers_device.o(.text.target_iic_init))<br>
<p><strong><a name="[656]"></a>target_get_dmac</strong>(28 bytes, Stack size 8 btyes, csi_drivers_device.o(.text.target_get_dmac))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = target_get_dmac &rArr; target_get </ul>
<br>[Calls]<ul>
<li><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_get
</ul>
<br>[Called By]<ul>
<li><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_dma_alloc_channel
</ul>
<p><strong><a name="[658]"></a>dw_dmac_irqhandler</strong>(156 bytes, Stack size 24 btyes, csi_drivers_dw_dmac.o(.__sram.code.dw_dmac_irqhandler))<br>
<br>[Called By]<ul>
<li><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_DMAC_IRQHandler
</ul>
<p><strong><a name="[659]"></a>csi_dma_start</strong>(160 bytes, Stack size 32 btyes, csi_drivers_dw_dmac.o(.__sram.code.csi_dma_start))<br>
<br>[Calls]<ul>
<li><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__umodsi3
</ul>
<br>[Called By]<ul>
<li><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw_usart_dma_event_cb
<li><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_restart_receive_dma
<li><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_receive_dma
</ul>
<p><strong><a name="[65a]"></a>csi_dma_stop</strong>(76 bytes, Stack size 12 btyes, csi_drivers_dw_dmac.o(.__sram.code.csi_dma_stop))<br>
<br>[Called By]<ul>
<li><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw_usart_dma_event_cb
<li><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_restart_receive_dma
<li><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_receive_dma
</ul>
<p><strong><a name="[65b]"></a>csi_dma_get_capabilities</strong>(28 bytes, Stack size 0 btyes, csi_drivers_dw_dmac.o(.text.csi_dma_get_capabilities))<br>
<p><strong><a name="[65c]"></a>csi_dma_alloc_channel</strong>(212 bytes, Stack size 36 btyes, csi_drivers_dw_dmac.o(.text.csi_dma_alloc_channel))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = csi_dma_alloc_channel &rArr; target_get_dmac &rArr; target_get  </ul>
<br>[Calls]<ul>
<li><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_gate_enable
<li><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_get_dmac
<li><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_irq_register
<li><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_irq_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_receive_dma
</ul>
<p><strong><a name="[65d]"></a>csi_dma_power_control</strong>(8 bytes, Stack size 0 btyes, csi_drivers_dw_dmac.o(.text.csi_dma_power_control))<br>
<p><strong><a name="[65e]"></a>csi_dma_release_channel</strong>(104 bytes, Stack size 12 btyes, csi_drivers_dw_dmac.o(.text.csi_dma_release_channel))<br>
<br>[Calls]<ul>
<li><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_irq_disable
<li><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_irq_unregister
</ul>
<br>[Called By]<ul>
<li><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw_usart_dma_event_cb
<li><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_receive_dma
</ul>
<p><strong><a name="[65f]"></a>csi_dma_config_channel</strong>(416 bytes, Stack size 36 btyes, csi_drivers_dw_dmac.o(.text.csi_dma_config_channel))<br>
<br>[Stack]<ul><li>Max Depth = 40 
<li>Call Chain = csi_dma_config_channel &rArr; dw_dma_set_addrinc </ul>
<br>[Calls]<ul>
<li><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw_dma_set_addrinc
</ul>
<br>[Called By]<ul>
<li><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_receive_dma
</ul>
<p><strong><a name="[660]"></a>csi_dma_get_status</strong>(28 bytes, Stack size 0 btyes, csi_drivers_dw_dmac.o(.text.csi_dma_get_status))<br>
<p><strong><a name="[662]"></a>dw_gpio_irqhandler</strong>(80 bytes, Stack size 20 btyes, csi_drivers_dw_gpio.o(.__sram.code.dw_gpio_irqhandler))<br>
<br>[Called By]<ul>
<li><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_GPIO_IRQHandler
</ul>
<p><strong><a name="[663]"></a>csi_gpio_prepare_sleep_action</strong>(28 bytes, Stack size 0 btyes, csi_drivers_dw_gpio.o(.__sram.code.csi_gpio_prepare_sleep_action))<br>
<p><strong><a name="[664]"></a>csi_gpio_wakeup_sleep_action</strong>(28 bytes, Stack size 0 btyes, csi_drivers_dw_gpio.o(.__sram.code.csi_gpio_wakeup_sleep_action))<br>
<p><strong><a name="[665]"></a>csi_pinmux_prepare_sleep_action</strong>(24 bytes, Stack size 0 btyes, csi_drivers_dw_gpio.o(.__sram.code.csi_pinmux_prepare_sleep_action))<br>
<p><strong><a name="[666]"></a>csi_pinmux_wakeup_sleep_action</strong>(24 bytes, Stack size 0 btyes, csi_drivers_dw_gpio.o(.__sram.code.csi_pinmux_wakeup_sleep_action))<br>
<p><strong><a name="[667]"></a>csi_gpio_port_initialize</strong>(68 bytes, Stack size 28 btyes, csi_drivers_dw_gpio.o(.text.csi_gpio_port_initialize))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = csi_gpio_port_initialize &rArr; target_gpio_port_init </ul>
<br>[Calls]<ul>
<li><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_gpio_port_init
<li><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_irq_register
<li><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_irq_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_gpio_pin_initialize
</ul>
<p><strong><a name="[668]"></a>csi_gpio_port_uninitialize</strong>(32 bytes, Stack size 0 btyes, csi_drivers_dw_gpio.o(.text.csi_gpio_port_uninitialize))<br>
<p><strong><a name="[669]"></a>csi_gpio_pin_initialize</strong>(80 bytes, Stack size 16 btyes, csi_drivers_dw_gpio.o(.text.csi_gpio_pin_initialize))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = csi_gpio_pin_initialize &rArr; csi_gpio_port_initialize &rArr; target_gpio_port_init  </ul>
<br>[Calls]<ul>
<li><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_gpio_port_initialize
<li><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_gpio_pin_init
</ul>
<br>[Called By]<ul>
<li><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_test_gpio_write
<li><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_test_gpio_read
</ul>
<p><strong><a name="[66a]"></a>csi_gpio_pin_uninitialize</strong>(52 bytes, Stack size 0 btyes, csi_drivers_dw_gpio.o(.text.csi_gpio_pin_uninitialize))<br>
<p><strong><a name="[66b]"></a>csi_gpio_power_control</strong>(8 bytes, Stack size 0 btyes, csi_drivers_dw_gpio.o(.text.csi_gpio_power_control))<br>
<p><strong><a name="[66c]"></a>csi_gpio_pin_config_mode</strong>(28 bytes, Stack size 0 btyes, csi_drivers_dw_gpio.o(.text.csi_gpio_pin_config_mode))<br>
<p><strong><a name="[66d]"></a>csi_gpio_pin_config_direction</strong>(60 bytes, Stack size 12 btyes, csi_drivers_dw_gpio.o(.text.csi_gpio_pin_config_direction))<br>
<br>[Calls]<ul>
<li><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw_gpio_set_direction
<li><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_gpioretention_register
</ul>
<br>[Called By]<ul>
<li><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_test_gpio_write
<li><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_test_gpio_read
</ul>
<p><strong><a name="[66e]"></a>csi_gpio_pin_config</strong>(68 bytes, Stack size 0 btyes, csi_drivers_dw_gpio.o(.text.csi_gpio_pin_config))<br>
<p><strong><a name="[66f]"></a>csi_gpio_pin_write</strong>(56 bytes, Stack size 4 btyes, csi_drivers_dw_gpio.o(.text.csi_gpio_pin_write))<br>
<br>[Called By]<ul>
<li><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_test_gpio_write
</ul>
<p><strong><a name="[670]"></a>csi_gpio_pin_read</strong>(64 bytes, Stack size 4 btyes, csi_drivers_dw_gpio.o(.text.csi_gpio_pin_read))<br>
<br>[Called By]<ul>
<li><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_test_gpio_read
</ul>
<p><strong><a name="[671]"></a>csi_gpio_pin_set_irq</strong>(164 bytes, Stack size 0 btyes, csi_drivers_dw_gpio.o(.text.csi_gpio_pin_set_irq))<br>
<p><strong><a name="[672]"></a>dw_iic_irqhandler</strong>(700 bytes, Stack size 0 btyes, csi_drivers_dw_iic.o(.__sram.code.dw_iic_irqhandler))<br>
<p><strong><a name="[673]"></a>csi_iic_initialize</strong>(116 bytes, Stack size 0 btyes, csi_drivers_dw_iic.o(.text.csi_iic_initialize))<br>
<p><strong><a name="[674]"></a>csi_iic_uninitialize</strong>(84 bytes, Stack size 0 btyes, csi_drivers_dw_iic.o(.text.csi_iic_uninitialize))<br>
<p><strong><a name="[675]"></a>csi_iic_get_capabilities</strong>(28 bytes, Stack size 0 btyes, csi_drivers_dw_iic.o(.text.csi_iic_get_capabilities))<br>
<p><strong><a name="[676]"></a>csi_iic_config_mode</strong>(64 bytes, Stack size 0 btyes, csi_drivers_dw_iic.o(.text.csi_iic_config_mode))<br>
<p><strong><a name="[677]"></a>csi_iic_config_speed</strong>(96 bytes, Stack size 0 btyes, csi_drivers_dw_iic.o(.text.csi_iic_config_speed))<br>
<p><strong><a name="[678]"></a>csi_iic_config_addr_mode</strong>(76 bytes, Stack size 0 btyes, csi_drivers_dw_iic.o(.text.csi_iic_config_addr_mode))<br>
<p><strong><a name="[679]"></a>csi_iic_config_slave_addr</strong>(40 bytes, Stack size 0 btyes, csi_drivers_dw_iic.o(.text.csi_iic_config_slave_addr))<br>
<p><strong><a name="[67a]"></a>csi_iic_config</strong>(62 bytes, Stack size 0 btyes, csi_drivers_dw_iic.o(.text.csi_iic_config))<br>
<p><strong><a name="[67b]"></a>csi_iic_master_send</strong>(80 bytes, Stack size 0 btyes, csi_drivers_dw_iic.o(.text.csi_iic_master_send))<br>
<p><strong><a name="[67c]"></a>csi_iic_master_receive</strong>(124 bytes, Stack size 0 btyes, csi_drivers_dw_iic.o(.text.csi_iic_master_receive))<br>
<p><strong><a name="[67d]"></a>csi_iic_slave_send</strong>(56 bytes, Stack size 0 btyes, csi_drivers_dw_iic.o(.text.csi_iic_slave_send))<br>
<p><strong><a name="[67e]"></a>csi_iic_slave_receive</strong>(72 bytes, Stack size 0 btyes, csi_drivers_dw_iic.o(.text.csi_iic_slave_receive))<br>
<p><strong><a name="[67f]"></a>csi_iic_abort_transfer</strong>(48 bytes, Stack size 0 btyes, csi_drivers_dw_iic.o(.text.csi_iic_abort_transfer))<br>
<p><strong><a name="[680]"></a>csi_iic_get_status</strong>(78 bytes, Stack size 0 btyes, csi_drivers_dw_iic.o(.text.csi_iic_get_status))<br>
<p><strong><a name="[681]"></a>csi_iic_get_data_count</strong>(28 bytes, Stack size 0 btyes, csi_drivers_dw_iic.o(.text.csi_iic_get_data_count))<br>
<p><strong><a name="[682]"></a>csi_iic_power_control</strong>(8 bytes, Stack size 0 btyes, csi_drivers_dw_iic.o(.text.csi_iic_power_control))<br>
<p><strong><a name="[683]"></a>csi_iic_send_start</strong>(8 bytes, Stack size 0 btyes, csi_drivers_dw_iic.o(.text.csi_iic_send_start))<br>
<p><strong><a name="[684]"></a>csi_iic_send_stop</strong>(8 bytes, Stack size 0 btyes, csi_drivers_dw_iic.o(.text.csi_iic_send_stop))<br>
<p><strong><a name="[685]"></a>csi_iic_reset</strong>(8 bytes, Stack size 0 btyes, csi_drivers_dw_iic.o(.text.csi_iic_reset))<br>
<p><strong><a name="[687]"></a>dw_spi_irqhandler</strong>(472 bytes, Stack size 0 btyes, csi_drivers_dw_spi.o(.__sram.code.dw_spi_irqhandler))<br>
<p><strong><a name="[688]"></a>csi_spi_config_datawidth</strong>(88 bytes, Stack size 0 btyes, csi_drivers_dw_spi.o(.text.csi_spi_config_datawidth))<br>
<p><strong><a name="[689]"></a>csi_spi_config_baudrate</strong>(84 bytes, Stack size 0 btyes, csi_drivers_dw_spi.o(.text.csi_spi_config_baudrate))<br>
<p><strong><a name="[68a]"></a>csi_spi_config_format</strong>(140 bytes, Stack size 0 btyes, csi_drivers_dw_spi.o(.text.csi_spi_config_format))<br>
<p><strong><a name="[68b]"></a>csi_spi_config_mode</strong>(132 bytes, Stack size 0 btyes, csi_drivers_dw_spi.o(.text.csi_spi_config_mode))<br>
<p><strong><a name="[68c]"></a>csi_spi_config_block_mode</strong>(36 bytes, Stack size 0 btyes, csi_drivers_dw_spi.o(.text.csi_spi_config_block_mode))<br>
<p><strong><a name="[68d]"></a>csi_spi_config_bit_order</strong>(60 bytes, Stack size 0 btyes, csi_drivers_dw_spi.o(.text.csi_spi_config_bit_order))<br>
<p><strong><a name="[68e]"></a>csi_spi_config_ss_mode</strong>(100 bytes, Stack size 0 btyes, csi_drivers_dw_spi.o(.text.csi_spi_config_ss_mode))<br>
<p><strong><a name="[68f]"></a>csi_spi_initialize</strong>(124 bytes, Stack size 0 btyes, csi_drivers_dw_spi.o(.text.csi_spi_initialize))<br>
<p><strong><a name="[690]"></a>csi_spi_uninitialize</strong>(76 bytes, Stack size 0 btyes, csi_drivers_dw_spi.o(.text.csi_spi_uninitialize))<br>
<p><strong><a name="[691]"></a>csi_spi_power_control</strong>(8 bytes, Stack size 0 btyes, csi_drivers_dw_spi.o(.text.csi_spi_power_control))<br>
<p><strong><a name="[692]"></a>csi_spi_get_capabilities</strong>(28 bytes, Stack size 0 btyes, csi_drivers_dw_spi.o(.text.csi_spi_get_capabilities))<br>
<p><strong><a name="[693]"></a>csi_spi_config</strong>(180 bytes, Stack size 0 btyes, csi_drivers_dw_spi.o(.text.csi_spi_config))<br>
<p><strong><a name="[694]"></a>csi_spi_send</strong>(260 bytes, Stack size 0 btyes, csi_drivers_dw_spi.o(.text.csi_spi_send))<br>
<p><strong><a name="[695]"></a>csi_spi_receive</strong>(280 bytes, Stack size 0 btyes, csi_drivers_dw_spi.o(.text.csi_spi_receive))<br>
<p><strong><a name="[696]"></a>csi_spi_transfer</strong>(332 bytes, Stack size 0 btyes, csi_drivers_dw_spi.o(.text.csi_spi_transfer))<br>
<p><strong><a name="[697]"></a>csi_spi_abort_transfer</strong>(40 bytes, Stack size 0 btyes, csi_drivers_dw_spi.o(.text.csi_spi_abort_transfer))<br>
<p><strong><a name="[698]"></a>csi_spi_get_status</strong>(8 bytes, Stack size 0 btyes, csi_drivers_dw_spi.o(.text.csi_spi_get_status))<br>
<p><strong><a name="[699]"></a>csi_spi_get_data_count</strong>(54 bytes, Stack size 0 btyes, csi_drivers_dw_spi.o(.text.csi_spi_get_data_count))<br>
<p><strong><a name="[69a]"></a>csi_spi_ss_control</strong>(16 bytes, Stack size 0 btyes, csi_drivers_dw_spi.o(.text.csi_spi_ss_control))<br>
<p><strong><a name="[69b]"></a>csi_timer_resume</strong>(52 bytes, Stack size 0 btyes, csi_drivers_dw_timer.o(.text.csi_timer_resume))<br>
<p><strong><a name="[69c]"></a>csi_timer_get_current_value</strong>(28 bytes, Stack size 0 btyes, csi_drivers_dw_timer.o(.text.csi_timer_get_current_value))<br>
<p><strong><a name="[69d]"></a>csi_timer_get_status</strong>(28 bytes, Stack size 0 btyes, csi_drivers_dw_timer.o(.text.csi_timer_get_status))<br>
<p><strong><a name="[69e]"></a>csi_timer_get_load_value</strong>(28 bytes, Stack size 0 btyes, csi_drivers_dw_timer.o(.text.csi_timer_get_load_value))<br>
<p><strong><a name="[69f]"></a>dw_timer_irqhandler</strong>(36 bytes, Stack size 0 btyes, csi_drivers_dw_timer.o(.__sram.code.dw_timer_irqhandler))<br>
<p><strong><a name="[6a0]"></a>csi_timer_initialize</strong>(180 bytes, Stack size 0 btyes, csi_drivers_dw_timer.o(.text.csi_timer_initialize))<br>
<p><strong><a name="[6a1]"></a>csi_timer_uninitialize</strong>(92 bytes, Stack size 0 btyes, csi_drivers_dw_timer.o(.text.csi_timer_uninitialize))<br>
<p><strong><a name="[6a2]"></a>csi_timer_power_control</strong>(8 bytes, Stack size 0 btyes, csi_drivers_dw_timer.o(.text.csi_timer_power_control))<br>
<p><strong><a name="[6a3]"></a>csi_timer_config</strong>(56 bytes, Stack size 0 btyes, csi_drivers_dw_timer.o(.text.csi_timer_config))<br>
<p><strong><a name="[6a4]"></a>csi_timer_set_timeout</strong>(20 bytes, Stack size 0 btyes, csi_drivers_dw_timer.o(.text.csi_timer_set_timeout))<br>
<p><strong><a name="[6a5]"></a>csi_timer_start</strong>(164 bytes, Stack size 0 btyes, csi_drivers_dw_timer.o(.text.csi_timer_start))<br>
<p><strong><a name="[6a6]"></a>csi_timer_stop</strong>(56 bytes, Stack size 0 btyes, csi_drivers_dw_timer.o(.text.csi_timer_stop))<br>
<p><strong><a name="[6a7]"></a>csi_timer_suspend</strong>(16 bytes, Stack size 0 btyes, csi_drivers_dw_timer.o(.text.csi_timer_suspend))<br>
<p><strong><a name="[6aa]"></a>csi_usart_prepare_sleep_action</strong>(148 bytes, Stack size 0 btyes, csi_drivers_dw_usart.o(.__sram.code.csi_usart_prepare_sleep_action))<br>
<p><strong><a name="[6ab]"></a>csi_usart_wakeup_sleep_action</strong>(88 bytes, Stack size 0 btyes, csi_drivers_dw_usart.o(.__sram.code.csi_usart_wakeup_sleep_action))<br>
<p><strong><a name="[6ac]"></a>csi_usart_restart_receive_dma</strong>(54 bytes, Stack size 12 btyes, csi_drivers_dw_usart.o(.__sram.code.csi_usart_restart_receive_dma))<br>
<br>[Stack]<ul><li>Max Depth = 44 
<li>Call Chain = csi_usart_restart_receive_dma &rArr; csi_dma_start </ul>
<br>[Calls]<ul>
<li><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_dma_stop
<li><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_dma_start
</ul>
<br>[Called By]<ul>
<li><a href="#[960]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_recv_event
<li><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_uart_loop
</ul>
<p><strong><a name="[6ad]"></a>csi_usart_config_baudrate</strong>(116 bytes, Stack size 16 btyes, csi_drivers_dw_usart.o(.text.csi_usart_config_baudrate))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = csi_usart_config_baudrate &rArr; usart_wait_timeout.isra.0 </ul>
<br>[Calls]<ul>
<li><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_wait_timeout.isra.0
<li><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_get_apb_freq
<li><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivsi3
<li><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__umodsi3
</ul>
<br>[Called By]<ul>
<li><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_config
</ul>
<p><strong><a name="[6ae]"></a>csi_usart_config_mode</strong>(28 bytes, Stack size 0 btyes, csi_drivers_dw_usart.o(.text.csi_usart_config_mode))<br>
<p><strong><a name="[6af]"></a>csi_usart_config_parity</strong>(88 bytes, Stack size 12 btyes, csi_drivers_dw_usart.o(.text.csi_usart_config_parity))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = csi_usart_config_parity &rArr; usart_wait_timeout.isra.0 </ul>
<br>[Calls]<ul>
<li><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_wait_timeout.isra.0
</ul>
<br>[Called By]<ul>
<li><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_config
</ul>
<p><strong><a name="[6b0]"></a>csi_usart_config_stopbits</strong>(64 bytes, Stack size 12 btyes, csi_drivers_dw_usart.o(.text.csi_usart_config_stopbits))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = csi_usart_config_stopbits &rArr; usart_wait_timeout.isra.0 </ul>
<br>[Calls]<ul>
<li><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_wait_timeout.isra.0
</ul>
<br>[Called By]<ul>
<li><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_config
</ul>
<p><strong><a name="[6b1]"></a>csi_usart_config_databits</strong>(100 bytes, Stack size 12 btyes, csi_drivers_dw_usart.o(.text.csi_usart_config_databits))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = csi_usart_config_databits &rArr; usart_wait_timeout.isra.0 </ul>
<br>[Calls]<ul>
<li><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_wait_timeout.isra.0
<li><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___gnu_csky_case_uqi
</ul>
<br>[Called By]<ul>
<li><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_config
</ul>
<p><strong><a name="[6b2]"></a>csi_usart_getchar</strong>(36 bytes, Stack size 0 btyes, csi_drivers_dw_usart.o(.text.csi_usart_getchar))<br>
<p><strong><a name="[6b3]"></a>csi_usart_putchar</strong>(52 bytes, Stack size 4 btyes, csi_drivers_dw_usart.o(.text.csi_usart_putchar))<br>
<br>[Called By]<ul>
<li><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_send
<li><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_poll
</ul>
<p><strong><a name="[6b4]"></a>csi_usart_get_capabilities</strong>(30 bytes, Stack size 0 btyes, csi_drivers_dw_usart.o(.text.csi_usart_get_capabilities))<br>
<p><strong><a name="[6b5]"></a>csi_usart_initialize</strong>(140 bytes, Stack size 32 btyes, csi_drivers_dw_usart.o(.text.csi_usart_initialize))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = csi_usart_initialize &rArr; target_usart_init &rArr; target_get  </ul>
<br>[Calls]<ul>
<li><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_usart_init
<li><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_gate_enable
<li><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_reset
<li><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_irq_register
<li><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_irq_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_board_init
<li><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_hal_open
<li><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</ul>
<p><strong><a name="[6b6]"></a>csi_usart_uninitialize</strong>(36 bytes, Stack size 8 btyes, csi_drivers_dw_usart.o(.text.csi_usart_uninitialize))<br>
<br>[Calls]<ul>
<li><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_irq_disable
<li><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_irq_unregister
</ul>
<br>[Called By]<ul>
<li><a href="#[955]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_hal_close
</ul>
<p><strong><a name="[6b7]"></a>csi_usart_config</strong>(92 bytes, Stack size 24 btyes, csi_drivers_dw_usart.o(.text.csi_usart_config))<br>
<br>[Stack]<ul><li>Max Depth = 44 
<li>Call Chain = csi_usart_config &rArr; csi_usart_config_baudrate &rArr; usart_wait_timeout.isra.0  </ul>
<br>[Calls]<ul>
<li><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_config_baudrate
<li><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_config_parity
<li><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_config_stopbits
<li><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_config_databits
</ul>
<br>[Called By]<ul>
<li><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_board_init
<li><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_hal_open
<li><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</ul>
<p><strong><a name="[6b8]"></a>csi_usart_send_dma</strong>(208 bytes, Stack size 0 btyes, csi_drivers_dw_usart.o(.text.csi_usart_send_dma))<br>
<p><strong><a name="[6b9]"></a>csi_usart_send</strong>(60 bytes, Stack size 16 btyes, csi_drivers_dw_usart.o(.text.csi_usart_send))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = csi_usart_send &rArr; csi_usart_putchar </ul>
<br>[Calls]<ul>
<li><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_putchar
</ul>
<br>[Called By]<ul>
<li><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputstr
<li><a href="#[954]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_send_data
</ul>
<p><strong><a name="[6ba]"></a>csi_usart_abort_send</strong>(16 bytes, Stack size 0 btyes, csi_drivers_dw_usart.o(.text.csi_usart_abort_send))<br>
<p><strong><a name="[6bb]"></a>csi_usart_receive_dma</strong>(200 bytes, Stack size 64 btyes, csi_drivers_dw_usart.o(.text.csi_usart_receive_dma))<br>
<br>[Stack]<ul><li>Max Depth = 116 
<li>Call Chain = csi_usart_receive_dma &rArr; csi_dma_alloc_channel &rArr; target_get_dmac  &rArr; target_get  </ul>
<br>[Calls]<ul>
<li><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_dma_stop
<li><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_dma_config_channel
<li><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_dma_release_channel
<li><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_dma_alloc_channel
<li><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_dma_start
</ul>
<br>[Called By]<ul>
<li><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_hal_open
</ul>
<p><strong><a name="[6bc]"></a>csi_usart_receive</strong>(36 bytes, Stack size 0 btyes, csi_drivers_dw_usart.o(.text.csi_usart_receive))<br>
<p><strong><a name="[6bd]"></a>csi_usart_flush</strong>(108 bytes, Stack size 0 btyes, csi_drivers_dw_usart.o(.text.csi_usart_flush))<br>
<p><strong><a name="[6be]"></a>csi_usart_set_interrupt</strong>(72 bytes, Stack size 0 btyes, csi_drivers_dw_usart.o(.text.csi_usart_set_interrupt))<br>
<p><strong><a name="[6bf]"></a>csi_usart_get_tx_count</strong>(28 bytes, Stack size 0 btyes, csi_drivers_dw_usart.o(.text.csi_usart_get_tx_count))<br>
<p><strong><a name="[6c0]"></a>csi_usart_get_rx_count</strong>(28 bytes, Stack size 0 btyes, csi_drivers_dw_usart.o(.text.csi_usart_get_rx_count))<br>
<p><strong><a name="[6c1]"></a>csi_usart_power_control</strong>(8 bytes, Stack size 0 btyes, csi_drivers_dw_usart.o(.text.csi_usart_power_control))<br>
<p><strong><a name="[6c2]"></a>csi_usart_config_flowctrl</strong>(112 bytes, Stack size 0 btyes, csi_drivers_dw_usart.o(.text.csi_usart_config_flowctrl))<br>
<p><strong><a name="[6c3]"></a>csi_usart_config_clock</strong>(16 bytes, Stack size 0 btyes, csi_drivers_dw_usart.o(.text.csi_usart_config_clock))<br>
<p><strong><a name="[6c4]"></a>csi_usart_receive_query</strong>(48 bytes, Stack size 12 btyes, csi_drivers_dw_usart.o(.text.csi_usart_receive_query))<br>
<br>[Called By]<ul>
<li><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw_usart_intr_recv_data
<li><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_event_cb
<li><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv_II
</ul>
<p><strong><a name="[6c6]"></a>dw_usart_irqhandler</strong>(364 bytes, Stack size 16 btyes, csi_drivers_dw_usart.o(.__sram.code.dw_usart_irqhandler))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = dw_usart_irqhandler &rArr; dw_usart_intr_recv_data &rArr; csi_usart_receive_query  </ul>
<br>[Calls]<ul>
<li><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___gnu_csky_case_uqi
<li><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw_usart_intr_recv_data
</ul>
<br>[Called By]<ul>
<li><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<li><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
</ul>
<p><strong><a name="[6c7]"></a>csi_usart_abort_receive</strong>(20 bytes, Stack size 0 btyes, csi_drivers_dw_usart.o(.text.csi_usart_abort_receive))<br>
<p><strong><a name="[6c8]"></a>csi_usart_transfer</strong>(16 bytes, Stack size 0 btyes, csi_drivers_dw_usart.o(.text.csi_usart_transfer))<br>
<p><strong><a name="[6c9]"></a>csi_usart_abort_transfer</strong>(16 bytes, Stack size 0 btyes, csi_drivers_dw_usart.o(.text.csi_usart_abort_transfer))<br>
<p><strong><a name="[6ca]"></a>csi_usart_get_status</strong>(160 bytes, Stack size 0 btyes, csi_drivers_dw_usart.o(.text.csi_usart_get_status))<br>
<p><strong><a name="[6cb]"></a>csi_usart_control_tx</strong>(16 bytes, Stack size 0 btyes, csi_drivers_dw_usart.o(.text.csi_usart_control_tx))<br>
<p><strong><a name="[6cc]"></a>csi_usart_control_rx</strong>(16 bytes, Stack size 0 btyes, csi_drivers_dw_usart.o(.text.csi_usart_control_rx))<br>
<p><strong><a name="[6cd]"></a>csi_usart_control_break</strong>(16 bytes, Stack size 0 btyes, csi_drivers_dw_usart.o(.text.csi_usart_control_break))<br>
<p><strong><a name="[6ce]"></a>dw_wdt_irqhandler</strong>(28 bytes, Stack size 4 btyes, csi_drivers_dw_wdt.o(.__sram.code.dw_wdt_irqhandler))<br>
<br>[Called By]<ul>
<li><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_WDT_IRQHandler
</ul>
<p><strong><a name="[6cf]"></a>csi_wdt_restart</strong>(24 bytes, Stack size 0 btyes, csi_drivers_dw_wdt.o(.__sram.code.csi_wdt_restart))<br>
<br>[Called By]<ul>
<li><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_wdt_set_timeout
<li><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_wdt_start
</ul>
<p><strong><a name="[6d0]"></a>csi_wdt_set_timeout</strong>(112 bytes, Stack size 20 btyes, csi_drivers_dw_wdt.o(.__sram.code.csi_wdt_set_timeout))<br>
<br>[Calls]<ul>
<li><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_reset
<li><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_wdt_restart
</ul>
<br>[Called By]<ul>
<li><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wdg_init
</ul>
<p><strong><a name="[6d1]"></a>csi_wdt_initialize</strong>(116 bytes, Stack size 20 btyes, csi_drivers_dw_wdt.o(.text.csi_wdt_initialize))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = csi_wdt_initialize &rArr; target_get_wdt &rArr; target_get  </ul>
<br>[Calls]<ul>
<li><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_gate_enable
<li><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_get_wdt
</ul>
<br>[Called By]<ul>
<li><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wdg_init
</ul>
<p><strong><a name="[6d2]"></a>csi_wdt_uninitialize</strong>(44 bytes, Stack size 8 btyes, csi_drivers_dw_wdt.o(.text.csi_wdt_uninitialize))<br>
<br>[Calls]<ul>
<li><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_irq_disable
<li><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_irq_unregister
<li><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_gate_disable
</ul>
<br>[Called By]<ul>
<li><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wdg_finalize
</ul>
<p><strong><a name="[6d3]"></a>csi_wdt_power_control</strong>(8 bytes, Stack size 0 btyes, csi_drivers_dw_wdt.o(.text.csi_wdt_power_control))<br>
<p><strong><a name="[6d4]"></a>csi_wdt_start</strong>(32 bytes, Stack size 4 btyes, csi_drivers_dw_wdt.o(.text.csi_wdt_start))<br>
<br>[Calls]<ul>
<li><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_wdt_restart
</ul>
<br>[Called By]<ul>
<li><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wdg_init
</ul>
<p><strong><a name="[6d5]"></a>csi_wdt_stop</strong>(16 bytes, Stack size 0 btyes, csi_drivers_dw_wdt.o(.text.csi_wdt_stop))<br>
<p><strong><a name="[6d6]"></a>csi_wdt_read_current_value</strong>(28 bytes, Stack size 0 btyes, csi_drivers_dw_wdt.o(.text.csi_wdt_read_current_value))<br>
<p><strong><a name="[6d7]"></a>CSI_WDT_IRQHandler</strong>(10 bytes, Stack size 4 btyes, csi_drivers_dw_wdt.o(.text.CSI_WDT_IRQHandler))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = CSI_WDT_IRQHandler &rArr; dw_wdt_irqhandler </ul>
<br>[Calls]<ul>
<li><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw_wdt_irqhandler
</ul>
<p><strong><a name="[6d8]"></a>CORET_IRQHandler</strong>(112 bytes, Stack size 8 btyes, csi_drivers_isr.o(.text.CORET_IRQHandler))<br>
<br>[Stack]<ul><li>Max Depth = 60 
<li>Call Chain = CORET_IRQHandler &rArr; krhino_tick_proc &rArr; tick_list_update  &rArr; ready_list_add  &rArr; _ready_list_add_tail  &rArr; ready_list_init  </ul>
<br>[Calls]<ul>
<li><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<li><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_tick_proc
<li><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
</ul>
<p><strong><a name="[6d9]"></a>UART0_IRQHandler</strong>(18 bytes, Stack size 4 btyes, csi_drivers_isr.o(.text.UART0_IRQHandler))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = UART0_IRQHandler &rArr; dw_usart_irqhandler &rArr; dw_usart_intr_recv_data  &rArr; csi_usart_receive_query  </ul>
<br>[Calls]<ul>
<li><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<li><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw_usart_irqhandler
<li><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
</ul>
<p><strong><a name="[6da]"></a>UART1_IRQHandler</strong>(18 bytes, Stack size 4 btyes, csi_drivers_isr.o(.text.UART1_IRQHandler))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = UART1_IRQHandler &rArr; dw_usart_irqhandler &rArr; dw_usart_intr_recv_data  &rArr; csi_usart_receive_query  </ul>
<br>[Calls]<ul>
<li><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<li><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw_usart_irqhandler
<li><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
</ul>
<p><strong><a name="[6db]"></a>CSI_GPIO_IRQHandler</strong>(18 bytes, Stack size 4 btyes, csi_drivers_isr.o(.text.CSI_GPIO_IRQHandler))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = CSI_GPIO_IRQHandler &rArr; dw_gpio_irqhandler </ul>
<br>[Calls]<ul>
<li><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<li><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw_gpio_irqhandler
<li><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
</ul>
<p><strong><a name="[6dc]"></a>CSI_AP_TIMER_IRQHandler</strong>(136 bytes, Stack size 0 btyes, csi_drivers_isr.o(.text.CSI_AP_TIMER_IRQHandler))<br>
<p><strong><a name="[6dd]"></a>CSI_SPI0_IRQHandler</strong>(18 bytes, Stack size 0 btyes, csi_drivers_isr.o(.text.CSI_SPI0_IRQHandler))<br>
<p><strong><a name="[6de]"></a>CSI_SPI1_IRQHandler</strong>(18 bytes, Stack size 0 btyes, csi_drivers_isr.o(.text.CSI_SPI1_IRQHandler))<br>
<p><strong><a name="[6df]"></a>CSI_IIC0_IRQHandler</strong>(18 bytes, Stack size 0 btyes, csi_drivers_isr.o(.text.CSI_IIC0_IRQHandler))<br>
<p><strong><a name="[6e0]"></a>CSI_IIC1_IRQHandler</strong>(18 bytes, Stack size 0 btyes, csi_drivers_isr.o(.text.CSI_IIC1_IRQHandler))<br>
<p><strong><a name="[6e1]"></a>CSI_DMAC_IRQHandler</strong>(18 bytes, Stack size 4 btyes, csi_drivers_isr.o(.text.CSI_DMAC_IRQHandler))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = CSI_DMAC_IRQHandler &rArr; dw_dmac_irqhandler </ul>
<br>[Calls]<ul>
<li><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<li><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw_dmac_irqhandler
<li><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
</ul>
<p><strong><a name="[6e2]"></a>CSI_AP_TIMER5_IRQHandler</strong>(18 bytes, Stack size 0 btyes, csi_drivers_isr.o(.text.CSI_AP_TIMER5_IRQHandler))<br>
<p><strong><a name="[6e3]"></a>CSI_AP_TIMER6_IRQHandler</strong>(18 bytes, Stack size 0 btyes, csi_drivers_isr.o(.text.CSI_AP_TIMER6_IRQHandler))<br>
<p><strong><a name="[6e4]"></a>mdelay</strong>(22 bytes, Stack size 0 btyes, csi_drivers_lib.o(.text.mdelay))<br>
<p><strong><a name="[6e5]"></a>udelay</strong>(20 bytes, Stack size 0 btyes, csi_drivers_lib.o(.text.udelay))<br>
<p><strong><a name="[6e6]"></a>irq_vectors_init</strong>(40 bytes, Stack size 0 btyes, csi_drivers_novic_irq_tbl.o(.text.irq_vectors_init))<br>
<br>[Called By]<ul>
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</ul>
<p><strong><a name="[6e7]"></a>csi_aes_initialize</strong>(64 bytes, Stack size 0 btyes, csi_drivers_phy_aes.o(.text.csi_aes_initialize))<br>
<p><strong><a name="[6e8]"></a>csi_aes_uninitialize</strong>(20 bytes, Stack size 0 btyes, csi_drivers_phy_aes.o(.text.csi_aes_uninitialize))<br>
<p><strong><a name="[6e9]"></a>csi_aes_get_capabilities</strong>(28 bytes, Stack size 0 btyes, csi_drivers_phy_aes.o(.text.csi_aes_get_capabilities))<br>
<p><strong><a name="[6ea]"></a>csi_aes_config</strong>(52 bytes, Stack size 0 btyes, csi_drivers_phy_aes.o(.text.csi_aes_config))<br>
<p><strong><a name="[6eb]"></a>csi_aes_set_key</strong>(44 bytes, Stack size 0 btyes, csi_drivers_phy_aes.o(.text.csi_aes_set_key))<br>
<p><strong><a name="[6ec]"></a>csi_aes_crypto</strong>(36 bytes, Stack size 0 btyes, csi_drivers_phy_aes.o(.text.csi_aes_crypto))<br>
<p><strong><a name="[6ed]"></a>csi_aes_ecb_crypto</strong>(128 bytes, Stack size 0 btyes, csi_drivers_phy_aes.o(.text.csi_aes_ecb_crypto))<br>
<p><strong><a name="[6ee]"></a>csi_aes_cbc_crypto</strong>(48 bytes, Stack size 0 btyes, csi_drivers_phy_aes.o(.text.csi_aes_cbc_crypto))<br>
<p><strong><a name="[6ef]"></a>csi_aes_cfb1_crypto</strong>(8 bytes, Stack size 0 btyes, csi_drivers_phy_aes.o(.text.csi_aes_cfb1_crypto))<br>
<p><strong><a name="[6f0]"></a>csi_aes_cfb8_crypto</strong>(8 bytes, Stack size 0 btyes, csi_drivers_phy_aes.o(.text.csi_aes_cfb8_crypto))<br>
<p><strong><a name="[6f1]"></a>csi_aes_cfb128_crypto</strong>(8 bytes, Stack size 0 btyes, csi_drivers_phy_aes.o(.text.csi_aes_cfb128_crypto))<br>
<p><strong><a name="[6f2]"></a>csi_aes_ofb_crypto</strong>(8 bytes, Stack size 0 btyes, csi_drivers_phy_aes.o(.text.csi_aes_ofb_crypto))<br>
<p><strong><a name="[6f3]"></a>csi_aes_ctr_crypto</strong>(8 bytes, Stack size 0 btyes, csi_drivers_phy_aes.o(.text.csi_aes_ctr_crypto))<br>
<p><strong><a name="[6f4]"></a>csi_aes_get_status</strong>(28 bytes, Stack size 0 btyes, csi_drivers_phy_aes.o(.text.csi_aes_get_status))<br>
<p><strong><a name="[6f5]"></a>csi_aes_power_control</strong>(8 bytes, Stack size 0 btyes, csi_drivers_phy_aes.o(.text.csi_aes_power_control))<br>
<p><strong><a name="[6f6]"></a>csi_rtc_get_time</strong>(56 bytes, Stack size 0 btyes, csi_drivers_phy_rtc.o(.text.csi_rtc_get_time))<br>
<p><strong><a name="[6f7]"></a>csi_rtc_start</strong>(28 bytes, Stack size 0 btyes, csi_drivers_phy_rtc.o(.text.csi_rtc_start))<br>
<p><strong><a name="[6f8]"></a>csi_rtc_stop</strong>(24 bytes, Stack size 0 btyes, csi_drivers_phy_rtc.o(.text.csi_rtc_stop))<br>
<p><strong><a name="[6f9]"></a>csi_rtc_get_status</strong>(14 bytes, Stack size 0 btyes, csi_drivers_phy_rtc.o(.text.csi_rtc_get_status))<br>
<p><strong><a name="[6fa]"></a>csi_rtc_set_alarm</strong>(144 bytes, Stack size 0 btyes, csi_drivers_phy_rtc.o(.text.csi_rtc_set_alarm))<br>
<p><strong><a name="[6fb]"></a>csi_rtc_enable_alarm</strong>(68 bytes, Stack size 0 btyes, csi_drivers_phy_rtc.o(.text.csi_rtc_enable_alarm))<br>
<p><strong><a name="[6fd]"></a>mktime</strong>(144 bytes, Stack size 0 btyes, csi_drivers_phy_rtc.o(.text.mktime))<br>
<p><strong><a name="[6fe]"></a>gmtime_r</strong>(352 bytes, Stack size 0 btyes, csi_drivers_phy_rtc.o(.text.gmtime_r))<br>
<p><strong><a name="[6ff]"></a>phy_rtc_irqhandler</strong>(56 bytes, Stack size 0 btyes, csi_drivers_phy_rtc.o(.text.phy_rtc_irqhandler))<br>
<p><strong><a name="[700]"></a>csi_rtc_initialize</strong>(104 bytes, Stack size 0 btyes, csi_drivers_phy_rtc.o(.text.csi_rtc_initialize))<br>
<p><strong><a name="[701]"></a>csi_rtc_uninitialize</strong>(36 bytes, Stack size 0 btyes, csi_drivers_phy_rtc.o(.text.csi_rtc_uninitialize))<br>
<p><strong><a name="[702]"></a>csi_rtc_power_control</strong>(8 bytes, Stack size 0 btyes, csi_drivers_phy_rtc.o(.text.csi_rtc_power_control))<br>
<p><strong><a name="[703]"></a>csi_rtc_get_capabilities</strong>(28 bytes, Stack size 0 btyes, csi_drivers_phy_rtc.o(.text.csi_rtc_get_capabilities))<br>
<p><strong><a name="[704]"></a>csi_rtc_set_time</strong>(108 bytes, Stack size 0 btyes, csi_drivers_phy_rtc.o(.text.csi_rtc_set_time))<br>
<p><strong><a name="[70b]"></a>hal_flash_erase_sector</strong>(112 bytes, Stack size 20 btyes, csi_drivers_spif.o(.__sram.code.hal_flash_erase_sector))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = hal_flash_erase_sector &rArr; _spif_wait_nobusy_x.constprop.1 &rArr; _spif_read_status_reg_x  </ul>
<br>[Calls]<ul>
<li><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_lock
<li><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spif_wait_nobusy_x.constprop.1
<li><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_tag_flush
<li><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_flash_sector_erase
</ul>
<p><strong><a name="[70c]"></a>hal_flash_erase_block64</strong>(112 bytes, Stack size 0 btyes, csi_drivers_spif.o(.__sram.code.hal_flash_erase_block64))<br>
<p><strong><a name="[70d]"></a>hal_flash_erase_all</strong>(108 bytes, Stack size 0 btyes, csi_drivers_spif.o(.__sram.code.hal_flash_erase_all))<br>
<p><strong><a name="[70e]"></a>phy_WriteFlash</strong>(22 bytes, Stack size 0 btyes, csi_drivers_spif.o(.__sram.code.phy_WriteFlash))<br>
<p><strong><a name="[70f]"></a>phy_ProgramPage64</strong>(12 bytes, Stack size 4 btyes, csi_drivers_spif.o(.__sram.code.phy_ProgramPage64))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = phy_ProgramPage64 &rArr; hal_flash_write &rArr; _spif_wait_nobusy_x.constprop.1  &rArr; _spif_read_status_reg_x  </ul>
<br>[Calls]<ul>
<li><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
</ul>
<p><strong><a name="[710]"></a>phy_ReadFlash</strong>(124 bytes, Stack size 24 btyes, csi_drivers_spif.o(.__sram.code.phy_ReadFlash))<br>
<br>[Calls]<ul>
<li><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_lock
<li><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_unlock
</ul>
<p><strong><a name="[711]"></a>phy_flash_chip_erase</strong>(8 bytes, Stack size 0 btyes, csi_drivers_spif.o(.text.phy_flash_chip_erase))<br>
<p><strong><a name="[712]"></a>phy_set_flash_deep_sleep</strong>(8 bytes, Stack size 0 btyes, csi_drivers_spif.o(.text.phy_set_flash_deep_sleep))<br>
<p><strong><a name="[713]"></a>phy_release_flash_deep_sleep</strong>(8 bytes, Stack size 0 btyes, csi_drivers_spif.o(.text.phy_release_flash_deep_sleep))<br>
<p><strong><a name="[714]"></a>phy_flash_sector_erase</strong>(8 bytes, Stack size 4 btyes, csi_drivers_spif.o(.text.phy_flash_sector_erase))<br>
<br>[Stack]<ul><li>Max Depth = 56 
<li>Call Chain = phy_flash_sector_erase &rArr; hal_flash_erase_sector &rArr; _spif_wait_nobusy_x.constprop.1  &rArr; _spif_read_status_reg_x  </ul>
<br>[Calls]<ul>
<li><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_sector
</ul>
<p><strong><a name="[715]"></a>phy_flash_block64_erase</strong>(8 bytes, Stack size 0 btyes, csi_drivers_spif.o(.text.phy_flash_block64_erase))<br>
<p><strong><a name="[716]"></a>spiflash_read_status_register</strong>(14 bytes, Stack size 0 btyes, csi_drivers_spif.o(.text.spiflash_read_status_register))<br>
<p><strong><a name="[717]"></a>csi_spiflash_power_down</strong>(8 bytes, Stack size 0 btyes, csi_drivers_spif.o(.text.csi_spiflash_power_down))<br>
<br>[Called By]<ul>
<li><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_spiflash_lpm
</ul>
<p><strong><a name="[718]"></a>csi_spiflash_release_power_down</strong>(8 bytes, Stack size 0 btyes, csi_drivers_spif.o(.text.csi_spiflash_release_power_down))<br>
<br>[Called By]<ul>
<li><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_spiflash_lpm
</ul>
<p><strong><a name="[719]"></a>csi_spiflash_get_capabilities</strong>(28 bytes, Stack size 0 btyes, csi_drivers_spif.o(.text.csi_spiflash_get_capabilities))<br>
<p><strong><a name="[71a]"></a>csi_spiflash_initialize</strong>(2 bytes, Stack size 0 btyes, src_flash_weak.o(.text.weak_func))<br>
<br>[Called By]<ul>
<li><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_spiflash_open
<li><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_read
<li><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_write.constprop.0
</ul>
<p><strong><a name="[71b]"></a>csi_spiflash_uninitialize</strong>(2 bytes, Stack size 0 btyes, src_flash_weak.o(.text.weak_func))<br>
<br>[Called By]<ul>
<li><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_spiflash_close
</ul>
<p><strong><a name="[71c]"></a>csi_spiflash_read</strong>(2 bytes, Stack size 0 btyes, src_flash_weak.o(.text.weak_func))<br>
<br>[Called By]<ul>
<li><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_spiflash_read
<li><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_read
</ul>
<p><strong><a name="[71d]"></a>csi_spiflash_program</strong>(2 bytes, Stack size 0 btyes, src_flash_weak.o(.text.weak_func))<br>
<br>[Called By]<ul>
<li><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_spiflash_program
<li><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_write.constprop.0
</ul>
<p><strong><a name="[71e]"></a>csi_spiflash_erase_sector</strong>(2 bytes, Stack size 0 btyes, src_flash_weak.o(.text.weak_func))<br>
<br>[Called By]<ul>
<li><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_spiflash_erase
<li><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_write.constprop.0
</ul>
<p><strong><a name="[71f]"></a>csi_spiflash_erase_chip</strong>(2 bytes, Stack size 0 btyes, src_flash_weak.o(.text.weak_func))<br>
<p><strong><a name="[720]"></a>csi_spiflash_get_info</strong>(2 bytes, Stack size 0 btyes, src_flash_weak.o(.text.weak_func))<br>
<br>[Called By]<ul>
<li><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_spiflash_open
</ul>
<p><strong><a name="[721]"></a>csi_spiflash_get_status</strong>(76 bytes, Stack size 0 btyes, csi_drivers_spif.o(.text.csi_spiflash_get_status))<br>
<p><strong><a name="[722]"></a>csi_spiflash_power_control</strong>(28 bytes, Stack size 0 btyes, csi_drivers_spif.o(.text.csi_spiflash_power_control))<br>
<p><strong><a name="[723]"></a>drv_set_sys_freq</strong>(2 bytes, Stack size 0 btyes, csi_drivers_sys_freq.o(.text.drv_set_sys_freq))<br>
<p><strong><a name="[724]"></a>drv_rtcclk_config</strong>(18 bytes, Stack size 0 btyes, csi_drivers_sys_freq.o(.text.drv_rtcclk_config))<br>
<p><strong><a name="[725]"></a>drv_get_sys_freq</strong>(36 bytes, Stack size 0 btyes, csi_drivers_sys_freq.o(.text.drv_get_sys_freq))<br>
<br>[Called By]<ul>
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<li><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_get_apb_freq
</ul>
<p><strong><a name="[726]"></a>drv_get_apb_freq</strong>(8 bytes, Stack size 4 btyes, csi_drivers_sys_freq.o(.text.drv_get_apb_freq))<br>
<br>[Calls]<ul>
<li><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_get_sys_freq
</ul>
<br>[Called By]<ul>
<li><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_config_baudrate
</ul>
<p><strong><a name="[727]"></a>drv_get_timer_freq</strong>(8 bytes, Stack size 0 btyes, csi_drivers_sys_freq.o(.text.drv_get_timer_freq))<br>
<p><strong><a name="[728]"></a>drv_get_rtc_freq</strong>(6 bytes, Stack size 0 btyes, csi_drivers_sys_freq.o(.text.drv_get_rtc_freq))<br>
<p><strong><a name="[729]"></a>drv_get_cur_cpu_freq</strong>(8 bytes, Stack size 0 btyes, csi_drivers_sys_freq.o(.text.drv_get_cur_cpu_freq))<br>
<p><strong><a name="[72c]"></a>csi_pmu_initialize</strong>(36 bytes, Stack size 0 btyes, phy_pmu.o(.text.csi_pmu_initialize))<br>
<p><strong><a name="[72d]"></a>csi_pmu_uninitialize</strong>(20 bytes, Stack size 0 btyes, phy_pmu.o(.text.csi_pmu_uninitialize))<br>
<p><strong><a name="[72e]"></a>csi_pmu_power_control</strong>(68 bytes, Stack size 0 btyes, phy_pmu.o(.text.csi_pmu_power_control))<br>
<p><strong><a name="[72f]"></a>csi_pmu_enter_sleep</strong>(160 bytes, Stack size 0 btyes, phy_pmu.o(.text.csi_pmu_enter_sleep))<br>
<p><strong><a name="[730]"></a>csi_pmu_config_wakeup_source</strong>(56 bytes, Stack size 0 btyes, phy_pmu.o(.text.csi_pmu_config_wakeup_source))<br>
<p><strong><a name="[731]"></a>osal_pwrmgr_powerconserve_dummy</strong>(2 bytes, Stack size 0 btyes, pm.o(.text.osal_pwrmgr_powerconserve_dummy))<br>
<p><strong><a name="[733]"></a>pm_prepare_sleep_action</strong>(18 bytes, Stack size 0 btyes, pm.o(.__sram.code.pm_prepare_sleep_action))<br>
<p><strong><a name="[734]"></a>pm_after_sleep_action</strong>(36 bytes, Stack size 0 btyes, pm.o(.__sram.code.pm_after_sleep_action))<br>
<p><strong><a name="[735]"></a>registers_save</strong>(24 bytes, Stack size 0 btyes, pm.o(.__sram.code.registers_save))<br>
<p><strong><a name="[736]"></a>registers_restore</strong>(24 bytes, Stack size 0 btyes, pm.o(.__sram.code.registers_restore))<br>
<p><strong><a name="[737]"></a>boot_wdt_close</strong>(46 bytes, Stack size 16 btyes, pm.o(.text.boot_wdt_close))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = boot_wdt_close &rArr; target_get_wdt &rArr; target_get  </ul>
<br>[Calls]<ul>
<li><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;target_get_wdt
<li><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_irq_disable
<li><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_irq_unregister
</ul>
<br>[Called By]<ul>
<li><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdt_init
</ul>
<p><strong><a name="[738]"></a>wdt_init</strong>(8 bytes, Stack size 4 btyes, pm.o(.text.wdt_init))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = wdt_init &rArr; boot_wdt_close &rArr; target_get_wdt  &rArr; target_get  </ul>
<br>[Calls]<ul>
<li><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;boot_wdt_close
</ul>
<br>[Called By]<ul>
<li><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_board_init
</ul>
<p><strong><a name="[739]"></a>feed_wdt</strong>(2 bytes, Stack size 0 btyes, pm.o(.text.feed_wdt))<br>
<p><strong><a name="[73a]"></a>wdt_wakeup_action</strong>(2 bytes, Stack size 0 btyes, pm.o(.text.wdt_wakeup_action))<br>
<p><strong><a name="[73b]"></a>isSleepAllowInPM</strong>(16 bytes, Stack size 0 btyes, pm.o(.text.isSleepAllowInPM))<br>
<p><strong><a name="[73c]"></a>enableSleepInPM</strong>(16 bytes, Stack size 0 btyes, pm.o(.text.enableSleepInPM))<br>
<br>[Called By]<ul>
<li><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pm_sleep_enable
</ul>
<p><strong><a name="[73d]"></a>disableSleepInPM</strong>(16 bytes, Stack size 0 btyes, pm.o(.text.disableSleepInPM))<br>
<br>[Called By]<ul>
<li><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pm_sleep_disable
</ul>
<p><strong><a name="[73e]"></a>_symrom_setSleepMode</strong>(12 bytes, Stack size 0 btyes, pm.o(.text._symrom_setSleepMode))<br>
<br>[Called By]<ul>
<li><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_hal_open
</ul>
<p><strong><a name="[73f]"></a>_symrom_getSleepMode</strong>(12 bytes, Stack size 0 btyes, pm.o(.text._symrom_getSleepMode))<br>
<p><strong><a name="[740]"></a>_symrom_set_sleep_flag</strong>(36 bytes, Stack size 0 btyes, pm.o(.text._symrom_set_sleep_flag))<br>
<br>[Called By]<ul>
<li><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_sleep
</ul>
<p><strong><a name="[741]"></a>enterSleepProcess1</strong>(232 bytes, Stack size 0 btyes, pm.o(.text.enterSleepProcess1))<br>
<p><strong><a name="[742]"></a>sys_soc_init</strong>(36 bytes, Stack size 0 btyes, pm.o(.text.sys_soc_init))<br>
<p><strong><a name="[743]"></a>sys_soc_suspend</strong>(356 bytes, Stack size 0 btyes, pm.o(.text.sys_soc_suspend))<br>
<p><strong><a name="[744]"></a>just_enter_sleep</strong>(72 bytes, Stack size 16 btyes, pm.o(.text.just_enter_sleep))<br>
<br>[Calls]<ul>
<li><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_symrom_set_sleep_flag.part.0
</ul>
<br>[Called By]<ul>
<li><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_16MXtal_by_rcTracking
<li><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_96MXtal_by_rcTracking
</ul>
<p><strong><a name="[745]"></a>check_16MXtal_by_rcTracking</strong>(348 bytes, Stack size 32 btyes, pm.o(.text.check_16MXtal_by_rcTracking))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = check_16MXtal_by_rcTracking &rArr; just_enter_sleep </ul>
<br>[Calls]<ul>
<li><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;just_enter_sleep
</ul>
<br>[Called By]<ul>
<li><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1
</ul>
<p><strong><a name="[746]"></a>check_96MXtal_by_rcTracking</strong>(296 bytes, Stack size 20 btyes, pm.o(.text.check_96MXtal_by_rcTracking))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = check_96MXtal_by_rcTracking &rArr; just_enter_sleep </ul>
<br>[Calls]<ul>
<li><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;just_enter_sleep
</ul>
<br>[Called By]<ul>
<li><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1
</ul>
<p><strong><a name="[747]"></a>wakeup_init1</strong>(316 bytes, Stack size 20 btyes, pm.o(.text.wakeup_init1))<br>
<br>[Stack]<ul><li>Max Depth = 68 
<li>Call Chain = wakeup_init1 &rArr; check_16MXtal_by_rcTracking &rArr; just_enter_sleep  </ul>
<br>[Calls]<ul>
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wakeup_irq_config
<li><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_16MXtal_by_rcTracking
<li><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_96MXtal_by_rcTracking
</ul>
<p><strong><a name="[748]"></a>sys_soc_resume</strong>(472 bytes, Stack size 0 btyes, pm.o(.text.sys_soc_resume))<br>
<p><strong><a name="[749]"></a>drv_pm_sleep_enable</strong>(10 bytes, Stack size 4 btyes, pm.o(.text.drv_pm_sleep_enable))<br>
<br>[Calls]<ul>
<li><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;enableSleepInPM
</ul>
<br>[Called By]<ul>
<li><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_sleep
<li><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_rx_current_test
</ul>
<p><strong><a name="[74a]"></a>drv_pm_sleep_disable</strong>(10 bytes, Stack size 4 btyes, pm.o(.text.drv_pm_sleep_disable))<br>
<br>[Calls]<ul>
<li><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disableSleepInPM
</ul>
<br>[Called By]<ul>
<li><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_rx_current_test
</ul>
<p><strong><a name="[74b]"></a>drv_pm_enter_standby</strong>(20 bytes, Stack size 0 btyes, pm.o(.text.drv_pm_enter_standby))<br>
<p><strong><a name="[74c]"></a>drv_pm_ram_retention</strong>(8 bytes, Stack size 4 btyes, pm.o(.text.drv_pm_ram_retention))<br>
<br>[Calls]<ul>
<li><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_RAM_retention
</ul>
<br>[Called By]<ul>
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</ul>
<p><strong><a name="[74d]"></a>drv_pm_io_wakeup_handler_unregister</strong>(12 bytes, Stack size 0 btyes, pm.o(.text.drv_pm_io_wakeup_handler_unregister))<br>
<p><strong><a name="[74e]"></a>drv_pm_io_wakeup_handler_register</strong>(12 bytes, Stack size 0 btyes, pm.o(.text.drv_pm_io_wakeup_handler_register))<br>
<p><strong><a name="[74f]"></a>Default_IRQHandler_phy6220</strong>(0 bytes, Stack size 0 btyes, port_s.o(.text))<br>
<p><strong><a name="[750]"></a>cpu_task_switch</strong>(0 bytes, Stack size 0 btyes, port_s.o(.text.cpu_task_switch))<br>
<br>[Called By]<ul>
<li><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</ul>
<p><strong><a name="[751]"></a>cpu_intrpt_switch</strong>(0 bytes, Stack size 0 btyes, port_s.o(.text.cpu_intrpt_switch))<br>
<br>[Called By]<ul>
<li><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
</ul>
<p><strong><a name="[752]"></a>cpu_first_task_start</strong>(0 bytes, Stack size 0 btyes, port_s.o(.text.cpu_first_task_start))<br>
<br>[Called By]<ul>
<li><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_start
</ul>
<p><strong><a name="[753]"></a>tspend_handler</strong>(2 bytes, Stack size 0 btyes, vectors.o(.text))<br>
<p><strong><a name="[754]"></a>drv_reboot</strong>(56 bytes, Stack size 4 btyes, reboot.o(.__sram.code.drv_reboot))<br>
<br>[Called By]<ul>
<li><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_reboot
</ul>
<p><strong><a name="[755]"></a>Startup</strong>(48 bytes, Stack size 0 btyes, startup.o(.__data_copy_first__))<br>
<br>[Called By]<ul>
<li><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</ul>
<p><strong><a name="[756]"></a>Reset_Handler</strong>(46 bytes, Stack size 0 btyes, startup.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_before_startup
<li><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Startup
</ul>
<p><strong><a name="[757]"></a>hal_cache_init</strong>(100 bytes, Stack size 12 btyes, system.o(.__sram.code.hal_cache_init))<br>
<br>[Calls]<ul>
<li><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_clk_gate_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</ul>
<p><strong><a name="[758]"></a>hal_mpu_config</strong>(140 bytes, Stack size 4 btyes, system.o(.text.hal_mpu_config))<br>
<br>[Called By]<ul>
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</ul>
<p><strong><a name="[759]"></a>hal_wakeup_irq_config</strong>(52 bytes, Stack size 0 btyes, system.o(.text.hal_wakeup_irq_config))<br>
<br>[Called By]<ul>
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<li><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wakeup_init1
</ul>
<p><strong><a name="[75a]"></a>my_trap_c</strong>(2 bytes, Stack size 0 btyes, system.o(.text.my_trap_c))<br>
<p><strong><a name="[75b]"></a>check_before_startup</strong>(2 bytes, Stack size 0 btyes, system.o(.__data_copy_first__))<br>
<br>[Called By]<ul>
<li><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</ul>
<p><strong><a name="[75c]"></a>SystemInit</strong>(416 bytes, Stack size 208 btyes, system.o(.text.SystemInit))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = SystemInit &rArr; hal_rfphy_init &rArr; ll_patch_init  </ul>
<br>[Calls]<ul>
<li><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_vectors_init
<li><a href="#[958]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
<li><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
<li><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_get_sys_freq
<li><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__divsi3
<li><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_irq_enable
<li><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_cache_init
<li><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_mpu_config
<li><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wakeup_irq_config
<li><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_gpio_pull_set
<li><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pm_ram_retention
<li><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_pwrmgr_RAM_retention_set
<li><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rtc_clock_config
</ul>
<p><strong><a name="[75d]"></a>trap_c</strong>(124 bytes, Stack size 24 btyes, trap_c.o(.text.trap_c))<br>
<br>[Calls]<ul>
<li><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</ul>
<p><strong><a name="[75e]"></a>trap</strong>(0 bytes, Stack size 0 btyes, vectors.o(.text))<br>
<p><strong><a name="[75f]"></a>Default_Handler</strong>(2 bytes, Stack size 0 btyes, vectors.o(.text))<br>
<p><strong><a name="[760]"></a>trap0_handler</strong>(2 bytes, Stack size 0 btyes, vectors.o(.text))<br>
<p><strong><a name="[753]"></a>tspend_handler</strong>(2 bytes, Stack size 0 btyes, vectors.o(.text))<br>
<p><strong><a name="[761]"></a>dut_cmd_tx_single_tone</strong>(62 bytes, Stack size 20 btyes, src_ble_dut_cmd.o(.text.dut_cmd_tx_single_tone))<br>
<br>[Stack]<ul><li>Max Depth = 44 
<li>Call Chain = dut_cmd_tx_single_tone &rArr; atoi &rArr; strtol  &rArr; strtoul  </ul>
<br>[Calls]<ul>
<li><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<li><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_ble_tx_single_tone
</ul>
<p><strong><a name="[762]"></a>dut_cmd_tx_mod_burst</strong>(82 bytes, Stack size 28 btyes, src_ble_dut_cmd.o(.text.dut_cmd_tx_mod_burst))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = dut_cmd_tx_mod_burst &rArr; atoi &rArr; strtol  &rArr; strtoul  </ul>
<br>[Calls]<ul>
<li><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<li><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_ble_tx_mod_burst
</ul>
<p><strong><a name="[763]"></a>dut_cmd_rx_demod_burst</strong>(132 bytes, Stack size 36 btyes, src_ble_dut_cmd.o(.text.dut_cmd_rx_demod_burst))<br>
<br>[Stack]<ul><li>Max Depth = 188 
<li>Call Chain = dut_cmd_rx_demod_burst &rArr; dut_at_send &rArr; dut_sendv  &rArr; vasprintf  &rArr; strdup  &rArr; malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<li><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_ble_rx_demod_burst
<li><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_at_send
</ul>
<p><strong><a name="[764]"></a>dut_cmd_opt_mac</strong>(116 bytes, Stack size 24 btyes, src_ble_dut_cmd.o(.text.dut_cmd_opt_mac))<br>
<br>[Stack]<ul><li>Max Depth = 176 
<li>Call Chain = dut_cmd_opt_mac &rArr; dut_at_send &rArr; dut_sendv  &rArr; vasprintf  &rArr; strdup  &rArr; malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str2_char
<li><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_mac_store
<li><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_mac_get
<li><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_at_send
</ul>
<p><strong><a name="[765]"></a>dut_cmd_xtal_cap</strong>(76 bytes, Stack size 8 btyes, src_ble_dut_cmd.o(.text.dut_cmd_xtal_cap))<br>
<br>[Stack]<ul><li>Max Depth = 160 
<li>Call Chain = dut_cmd_xtal_cap &rArr; dut_at_send &rArr; dut_sendv  &rArr; vasprintf  &rArr; strdup  &rArr; malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<li><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_xtalcap_store
<li><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_xtalcap_get
<li><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_at_send
</ul>
<p><strong><a name="[766]"></a>dut_cmd_freqoff</strong>(104 bytes, Stack size 12 btyes, src_ble_dut_cmd.o(.text.dut_cmd_freqoff))<br>
<br>[Stack]<ul><li>Max Depth = 164 
<li>Call Chain = dut_cmd_freqoff &rArr; dut_at_send &rArr; dut_sendv  &rArr; vasprintf  &rArr; strdup  &rArr; malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<li><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_freqoff_store
<li><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_num_check
<li><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_freqoff_get
<li><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_at_send
</ul>
<p><strong><a name="[767]"></a>dut_cmd_transmit_stop</strong>(8 bytes, Stack size 4 btyes, src_ble_dut_cmd.o(.text.dut_cmd_transmit_stop))<br>
<br>[Stack]<ul><li>Max Depth = 8 
<li>Call Chain = dut_cmd_transmit_stop &rArr; dut_hal_ble_transmit_stop </ul>
<br>[Calls]<ul>
<li><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_ble_transmit_stop
</ul>
<p><strong><a name="[768]"></a>dut_cmd_rx_current_test</strong>(52 bytes, Stack size 8 btyes, src_ble_dut_cmd.o(.text.dut_cmd_rx_current_test))<br>
<br>[Stack]<ul><li>Max Depth = 160 
<li>Call Chain = dut_cmd_rx_current_test &rArr; dut_at_send &rArr; dut_sendv  &rArr; vasprintf  &rArr; strdup  &rArr; malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<li><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_at_send
<li><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_rx_current_test
</ul>
<p><strong><a name="[769]"></a>dut_cmd_gpio_test</strong>(148 bytes, Stack size 28 btyes, src_ble_dut_cmd.o(.text.dut_cmd_gpio_test))<br>
<br>[Stack]<ul><li>Max Depth = 88 
<li>Call Chain = dut_cmd_gpio_test &rArr; dut_hal_test_gpio_write &rArr; csi_gpio_pin_initialize  &rArr; csi_gpio_port_initialize  &rArr; target_gpio_port_init  </ul>
<br>[Calls]<ul>
<li><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<li><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_test_gpio_write
<li><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_test_gpio_read
</ul>
<p><strong><a name="[76a]"></a>dut_cmd_sleep</strong>(48 bytes, Stack size 8 btyes, src_ble_dut_cmd.o(.text.dut_cmd_sleep))<br>
<br>[Stack]<ul><li>Max Depth = 160 
<li>Call Chain = dut_cmd_sleep &rArr; dut_at_send &rArr; dut_sendv  &rArr; vasprintf  &rArr; strdup  &rArr; malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<li><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_at_send
<li><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_sleep
</ul>
<p><strong><a name="[76b]"></a>dut_ble_default_cmds_reg</strong>(16 bytes, Stack size 4 btyes, src_ble_dut_cmd.o(.text.dut_ble_default_cmds_reg))<br>
<br>[Stack]<ul><li>Max Depth = 112 
<li>Call Chain = dut_ble_default_cmds_reg &rArr; dut_service_cmds_reg &rArr; dut_service_cmd_reg  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_service_cmds_reg
</ul>
<br>[Called By]<ul>
<li><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_yoc_init
</ul>
<p><strong><a name="[76c]"></a>dut_hal_factorydata_read</strong>(72 bytes, Stack size 704 btyes, src_ble_dut_test.o(.text.dut_hal_factorydata_read))<br>
<p><strong><a name="[76d]"></a>dut_hal_factorydata_store</strong>(98 bytes, Stack size 0 btyes, src_ble_dut_test.o(.text.dut_hal_factorydata_store))<br>
<p><strong><a name="[76e]"></a>dut_hal_ble_tx_single_tone</strong>(72 bytes, Stack size 8 btyes, src_ble_dut_test.o(.text.dut_hal_ble_tx_single_tone))<br>
<br>[Calls]<ul>
<li><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_freqoff_get
</ul>
<br>[Called By]<ul>
<li><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_tx_single_tone
</ul>
<p><strong><a name="[76f]"></a>dut_hal_ble_tx_mod_burst</strong>(88 bytes, Stack size 8 btyes, src_ble_dut_test.o(.text.dut_hal_ble_tx_mod_burst))<br>
<br>[Calls]<ul>
<li><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_freqoff_get
</ul>
<br>[Called By]<ul>
<li><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_tx_mod_burst
</ul>
<p><strong><a name="[770]"></a>dut_hal_ble_rx_demod_burst</strong>(60 bytes, Stack size 8 btyes, src_ble_dut_test.o(.text.dut_hal_ble_rx_demod_burst))<br>
<br>[Calls]<ul>
<li><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_freqoff_get
</ul>
<br>[Called By]<ul>
<li><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_rx_demod_burst
</ul>
<p><strong><a name="[771]"></a>dut_hal_mac_get</strong>(68 bytes, Stack size 16 btyes, src_ble_dut_test.o(.text.dut_hal_mac_get))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = dut_hal_mac_get &rArr; nvram_read </ul>
<br>[Calls]<ul>
<li><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_read
</ul>
<br>[Called By]<ul>
<li><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_opt_mac
</ul>
<p><strong><a name="[772]"></a>dut_hal_mac_store</strong>(90 bytes, Stack size 12 btyes, src_ble_dut_test.o(.text.dut_hal_mac_store))<br>
<br>[Stack]<ul><li>Max Depth = 80 
<li>Call Chain = dut_hal_mac_store &rArr; aos_malloc &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<li><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_read
<li><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<li><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_write.constprop.0
</ul>
<br>[Called By]<ul>
<li><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_opt_mac
</ul>
<p><strong><a name="[773]"></a>dut_hal_sleep</strong>(68 bytes, Stack size 8 btyes, src_ble_dut_test.o(.text.dut_hal_sleep))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = dut_hal_sleep &rArr; drv_pm_sleep_enable </ul>
<br>[Calls]<ul>
<li><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pm_sleep_enable
<li><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_symrom_set_sleep_flag
</ul>
<br>[Called By]<ul>
<li><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_sleep
</ul>
<p><strong><a name="[774]"></a>dut_hal_xtalcap_get</strong>(4 bytes, Stack size 0 btyes, src_ble_dut_hal_ble_weak.o(.text.dut_hal_xtalcap_get))<br>
<br>[Called By]<ul>
<li><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_xtal_cap
</ul>
<p><strong><a name="[775]"></a>dut_hal_xtalcap_store</strong>(4 bytes, Stack size 0 btyes, src_ble_dut_hal_ble_weak.o(.text.dut_hal_xtalcap_store))<br>
<br>[Called By]<ul>
<li><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_xtal_cap
</ul>
<p><strong><a name="[776]"></a>dut_hal_freqoff_get</strong>(52 bytes, Stack size 0 btyes, src_ble_dut_test.o(.text.dut_hal_freqoff_get))<br>
<br>[Called By]<ul>
<li><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_freqoff
<li><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
<li><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_ble_tx_single_tone
<li><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_ble_tx_mod_burst
<li><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_ble_rx_demod_burst
<li><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_rx_current_test
</ul>
<p><strong><a name="[777]"></a>dut_hal_freqoff_store</strong>(108 bytes, Stack size 12 btyes, src_ble_dut_test.o(.text.dut_hal_freqoff_store))<br>
<br>[Stack]<ul><li>Max Depth = 80 
<li>Call Chain = dut_hal_freqoff_store &rArr; aos_malloc &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__modsi3
<li><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<li><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_read
<li><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<li><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_write.constprop.0
</ul>
<br>[Called By]<ul>
<li><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_freqoff
</ul>
<p><strong><a name="[778]"></a>dut_hal_ble_transmit_stop</strong>(10 bytes, Stack size 4 btyes, src_ble_dut_test.o(.text.dut_hal_ble_transmit_stop))<br>
<br>[Calls]<ul>
<li><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_dtm_stop
</ul>
<br>[Called By]<ul>
<li><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_transmit_stop
</ul>
<p><strong><a name="[76c]"></a>dut_hal_factorydata_read</strong>(72 bytes, Stack size 704 btyes, src_ble_dut_test.o(.text.dut_hal_factorydata_read))<br>
<p><strong><a name="[76d]"></a>dut_hal_factorydata_store</strong>(98 bytes, Stack size 0 btyes, src_ble_dut_test.o(.text.dut_hal_factorydata_store))<br>
<p><strong><a name="[773]"></a>dut_hal_sleep</strong>(68 bytes, Stack size 8 btyes, src_ble_dut_test.o(.text.dut_hal_sleep))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = dut_hal_sleep &rArr; drv_pm_sleep_enable </ul>
<br>[Calls]<ul>
<li><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pm_sleep_enable
<li><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_symrom_set_sleep_flag
</ul>
<br>[Called By]<ul>
<li><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_sleep
</ul>
<p><strong><a name="[771]"></a>dut_hal_mac_get</strong>(68 bytes, Stack size 16 btyes, src_ble_dut_test.o(.text.dut_hal_mac_get))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = dut_hal_mac_get &rArr; nvram_read </ul>
<br>[Calls]<ul>
<li><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_read
</ul>
<br>[Called By]<ul>
<li><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_opt_mac
</ul>
<p><strong><a name="[772]"></a>dut_hal_mac_store</strong>(90 bytes, Stack size 12 btyes, src_ble_dut_test.o(.text.dut_hal_mac_store))<br>
<br>[Stack]<ul><li>Max Depth = 80 
<li>Call Chain = dut_hal_mac_store &rArr; aos_malloc &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<li><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_read
<li><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<li><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_write.constprop.0
</ul>
<br>[Called By]<ul>
<li><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_opt_mac
</ul>
<p><strong><a name="[776]"></a>dut_hal_freqoff_get</strong>(52 bytes, Stack size 0 btyes, src_ble_dut_test.o(.text.dut_hal_freqoff_get))<br>
<br>[Called By]<ul>
<li><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_freqoff
<li><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
<li><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_ble_tx_single_tone
<li><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_ble_tx_mod_burst
<li><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_ble_rx_demod_burst
<li><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_rx_current_test
</ul>
<p><strong><a name="[777]"></a>dut_hal_freqoff_store</strong>(108 bytes, Stack size 12 btyes, src_ble_dut_test.o(.text.dut_hal_freqoff_store))<br>
<br>[Stack]<ul><li>Max Depth = 80 
<li>Call Chain = dut_hal_freqoff_store &rArr; aos_malloc &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__modsi3
<li><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<li><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_read
<li><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_free
<li><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_write.constprop.0
</ul>
<br>[Called By]<ul>
<li><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_freqoff
</ul>
<p><strong><a name="[76e]"></a>dut_hal_ble_tx_single_tone</strong>(72 bytes, Stack size 8 btyes, src_ble_dut_test.o(.text.dut_hal_ble_tx_single_tone))<br>
<br>[Calls]<ul>
<li><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_freqoff_get
</ul>
<br>[Called By]<ul>
<li><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_tx_single_tone
</ul>
<p><strong><a name="[76f]"></a>dut_hal_ble_tx_mod_burst</strong>(88 bytes, Stack size 8 btyes, src_ble_dut_test.o(.text.dut_hal_ble_tx_mod_burst))<br>
<br>[Calls]<ul>
<li><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_freqoff_get
</ul>
<br>[Called By]<ul>
<li><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_tx_mod_burst
</ul>
<p><strong><a name="[770]"></a>dut_hal_ble_rx_demod_burst</strong>(60 bytes, Stack size 8 btyes, src_ble_dut_test.o(.text.dut_hal_ble_rx_demod_burst))<br>
<br>[Calls]<ul>
<li><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_freqoff_get
</ul>
<br>[Called By]<ul>
<li><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_rx_demod_burst
</ul>
<p><strong><a name="[778]"></a>dut_hal_ble_transmit_stop</strong>(10 bytes, Stack size 4 btyes, src_ble_dut_test.o(.text.dut_hal_ble_transmit_stop))<br>
<br>[Calls]<ul>
<li><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_dtm_stop
</ul>
<br>[Called By]<ul>
<li><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_transmit_stop
</ul>
<p><strong><a name="[77b]"></a>dut_hal_rx_current_test</strong>(60 bytes, Stack size 8 btyes, src_ble_dut_test.o(.text.dut_hal_rx_current_test))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = dut_hal_rx_current_test &rArr; drv_pm_sleep_enable </ul>
<br>[Calls]<ul>
<li><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_freqoff_get
<li><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pm_sleep_enable
<li><a href="#[88c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_dtm_stop
<li><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pm_sleep_disable
</ul>
<br>[Called By]<ul>
<li><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_rx_current_test
</ul>
<p><strong><a name="[77c]"></a>dut_hal_test_gpio_write</strong>(60 bytes, Stack size 12 btyes, src_ble_dut_test.o(.text.dut_hal_test_gpio_write))<br>
<br>[Stack]<ul><li>Max Depth = 60 
<li>Call Chain = dut_hal_test_gpio_write &rArr; csi_gpio_pin_initialize &rArr; csi_gpio_port_initialize  &rArr; target_gpio_port_init  </ul>
<br>[Calls]<ul>
<li><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pinmux_config
<li><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_gpio_pin_initialize
<li><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_gpio_pin_config_direction
<li><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_gpio_pin_write
</ul>
<br>[Called By]<ul>
<li><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_gpio_test
</ul>
<p><strong><a name="[77d]"></a>dut_hal_test_gpio_read</strong>(54 bytes, Stack size 12 btyes, src_ble_dut_test.o(.text.dut_hal_test_gpio_read))<br>
<br>[Stack]<ul><li>Max Depth = 60 
<li>Call Chain = dut_hal_test_gpio_read &rArr; csi_gpio_pin_initialize &rArr; csi_gpio_port_initialize  &rArr; target_gpio_port_init  </ul>
<br>[Calls]<ul>
<li><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_pinmux_config
<li><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_gpio_pin_initialize
<li><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_gpio_pin_config_direction
<li><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_gpio_pin_read
</ul>
<br>[Called By]<ul>
<li><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_gpio_test
</ul>
<p><strong><a name="[77e]"></a>dut_sendv</strong>(88 bytes, Stack size 12 btyes, src_dut_main.o(.text.dut_sendv))<br>
<br>[Stack]<ul><li>Max Depth = 128 
<li>Call Chain = dut_sendv &rArr; vasprintf &rArr; strdup  &rArr; malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vasprintf
<li><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_send_poll
<li><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</ul>
<br>[Called By]<ul>
<li><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_at_send
</ul>
<p><strong><a name="[77f]"></a>dut_at_send</strong>(64 bytes, Stack size 24 btyes, src_dut_main.o(.text.dut_at_send))<br>
<br>[Stack]<ul><li>Max Depth = 152 
<li>Call Chain = dut_at_send &rArr; dut_sendv &rArr; vasprintf  &rArr; strdup  &rArr; malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_except_process
<li><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_sendv
</ul>
<br>[Called By]<ul>
<li><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_rx_demod_burst
<li><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_opt_mac
<li><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_xtal_cap
<li><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_freqoff
<li><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_rx_current_test
<li><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_sleep
<li><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_parse_func.part.0
<li><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_test_at.constprop.1
</ul>
<p><strong><a name="[782]"></a>dut_task_entry</strong>(120 bytes, Stack size 20 btyes, src_dut_main.o(.text.dut_task_entry))<br>
<br>[Stack]<ul><li>Max Depth = 876 
<li>Call Chain = dut_task_entry &rArr; dut_test_at.constprop.1 &rArr; cmd_parse_func.part.0  &rArr; dut_at_send  &rArr; dut_sendv  &rArr; vasprintf  &rArr; strdup  &rArr; malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_recv_II
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_test_at.constprop.1
</ul>
<br>[Called By]<ul>
<li><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_yoc_init
</ul>
<p><strong><a name="[783]"></a>dut_service_init</strong>(112 bytes, Stack size 24 btyes, src_dut_main.o(.text.dut_service_init))<br>
<br>[Stack]<ul><li>Max Depth = 152 
<li>Call Chain = dut_service_init &rArr; hal_uart_init &rArr; aos_sem_new  &rArr; aos_malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wdg_init
<li><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_wdg_finalize
<li><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<li><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
<li><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</ul>
<br>[Called By]<ul>
<li><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_yoc_init
</ul>
<p><strong><a name="[784]"></a>dut_service_cmd_reg</strong>(124 bytes, Stack size 12 btyes, src_dut_main.o(.text.dut_service_cmd_reg))<br>
<br>[Stack]<ul><li>Max Depth = 88 
<li>Call Chain = dut_service_cmd_reg &rArr; aos_mutex_lock &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<li><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<li><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<li><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<li><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slist_add_tail
</ul>
<br>[Called By]<ul>
<li><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_service_cmds_reg
</ul>
<p><strong><a name="[785]"></a>dut_service_cmd_unreg</strong>(104 bytes, Stack size 0 btyes, src_dut_main.o(.text.dut_service_cmd_unreg))<br>
<p><strong><a name="[786]"></a>dut_service_cmds_reg</strong>(72 bytes, Stack size 20 btyes, src_dut_main.o(.text.dut_service_cmds_reg))<br>
<br>[Stack]<ul><li>Max Depth = 108 
<li>Call Chain = dut_service_cmds_reg &rArr; dut_service_cmd_reg &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_except_process
<li><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_service_cmd_reg
</ul>
<br>[Called By]<ul>
<li><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_ble_default_cmds_reg
</ul>
<p><strong><a name="[787]"></a>dut_service_cmds_unreg</strong>(72 bytes, Stack size 0 btyes, src_dut_main.o(.text.dut_service_cmds_unreg))<br>
<p><strong><a name="[788]"></a>str2_char</strong>(106 bytes, Stack size 28 btyes, src_dut_utility.o(.text.str2_char))<br>
<br>[Calls]<ul>
<li><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__modsi3
<li><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char2hex
</ul>
<br>[Called By]<ul>
<li><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_opt_mac
</ul>
<p><strong><a name="[789]"></a>int_num_check</strong>(54 bytes, Stack size 0 btyes, src_dut_utility.o(.text.int_num_check))<br>
<br>[Called By]<ul>
<li><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_freqoff
</ul>
<p><strong><a name="[78a]"></a>str_chr</strong>(36 bytes, Stack size 8 btyes, src_dut_utility.o(.text.str_chr))<br>
<br>[Called By]<ul>
<li><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_test_at.constprop.1
<li><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_cut
</ul>
<p><strong><a name="[78b]"></a>argc_len</strong>(34 bytes, Stack size 0 btyes, src_dut_utility.o(.text.argc_len))<br>
<br>[Called By]<ul>
<li><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_test_at.constprop.1
</ul>
<p><strong><a name="[78c]"></a>char_cut</strong>(56 bytes, Stack size 16 btyes, src_dut_utility.o(.text.char_cut))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = char_cut &rArr; str_chr </ul>
<br>[Calls]<ul>
<li><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<li><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_chr
</ul>
<br>[Called By]<ul>
<li><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_test_at.constprop.1
</ul>
<p><strong><a name="[78d]"></a>hal_adc_pin2channel</strong>(8 bytes, Stack size 0 btyes, src_adc.o(.text.hal_adc_pin2channel))<br>
<p><strong><a name="[78e]"></a>hal_adc_init</strong>(112 bytes, Stack size 0 btyes, src_adc.o(.text.hal_adc_init))<br>
<p><strong><a name="[78f]"></a>hal_adc_value_get</strong>(148 bytes, Stack size 0 btyes, src_adc.o(.text.hal_adc_value_get))<br>
<p><strong><a name="[790]"></a>hal_adc_finalize</strong>(112 bytes, Stack size 0 btyes, src_adc.o(.text.hal_adc_finalize))<br>
<p><strong><a name="[791]"></a>csi_hal_i2s_config</strong>(8 bytes, Stack size 0 btyes, src_csi_i2s.o(.text.csi_hal_i2s_config))<br>
<p><strong><a name="[792]"></a>hal_flash_info_get</strong>(40 bytes, Stack size 0 btyes, src_flash.o(.text.hal_flash_info_get))<br>
<p><strong><a name="[793]"></a>hal_flash_erase</strong>(156 bytes, Stack size 0 btyes, src_flash.o(.text.hal_flash_erase))<br>
<p><strong><a name="[794]"></a>hal_flash_write</strong>(120 bytes, Stack size 0 btyes, src_flash.o(.text.hal_flash_write))<br>
<p><strong><a name="[795]"></a>hal_flash_erase_write</strong>(40 bytes, Stack size 0 btyes, src_flash.o(.text.hal_flash_erase_write))<br>
<p><strong><a name="[796]"></a>hal_flash_read</strong>(120 bytes, Stack size 0 btyes, src_flash.o(.text.hal_flash_read))<br>
<p><strong><a name="[797]"></a>hal_flash_enable_secure</strong>(4 bytes, Stack size 0 btyes, src_flash.o(.text.hal_flash_enable_secure))<br>
<p><strong><a name="[798]"></a>hal_flash_dis_secure</strong>(4 bytes, Stack size 0 btyes, src_flash.o(.text.hal_flash_dis_secure))<br>
<p><strong><a name="[799]"></a>hal_flash_init</strong>(36 bytes, Stack size 0 btyes, src_flash.o(.text.hal_flash_init))<br>
<p><strong><a name="[79a]"></a>csi_eflash_erase_chip</strong>(2 bytes, Stack size 0 btyes, src_flash_weak.o(.text.weak_func))<br>
<p><strong><a name="[79b]"></a>csi_eflash_erase_sector</strong>(2 bytes, Stack size 0 btyes, src_flash_weak.o(.text.weak_func))<br>
<p><strong><a name="[79c]"></a>csi_eflash_get_info</strong>(2 bytes, Stack size 0 btyes, src_flash_weak.o(.text.weak_func))<br>
<p><strong><a name="[79d]"></a>csi_eflash_initialize</strong>(2 bytes, Stack size 0 btyes, src_flash_weak.o(.text.weak_func))<br>
<p><strong><a name="[79e]"></a>csi_eflash_program</strong>(2 bytes, Stack size 0 btyes, src_flash_weak.o(.text.weak_func))<br>
<p><strong><a name="[79f]"></a>csi_eflash_read</strong>(2 bytes, Stack size 0 btyes, src_flash_weak.o(.text.weak_func))<br>
<p><strong><a name="[7a0]"></a>csi_eflash_uninitialize</strong>(2 bytes, Stack size 0 btyes, src_flash_weak.o(.text.weak_func))<br>
<p><strong><a name="[71f]"></a>csi_spiflash_erase_chip</strong>(2 bytes, Stack size 0 btyes, src_flash_weak.o(.text.weak_func))<br>
<p><strong><a name="[71e]"></a>csi_spiflash_erase_sector</strong>(2 bytes, Stack size 0 btyes, src_flash_weak.o(.text.weak_func))<br>
<br>[Called By]<ul>
<li><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_spiflash_erase
<li><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_write.constprop.0
</ul>
<p><strong><a name="[720]"></a>csi_spiflash_get_info</strong>(2 bytes, Stack size 0 btyes, src_flash_weak.o(.text.weak_func))<br>
<br>[Called By]<ul>
<li><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_spiflash_open
</ul>
<p><strong><a name="[71a]"></a>csi_spiflash_initialize</strong>(2 bytes, Stack size 0 btyes, src_flash_weak.o(.text.weak_func))<br>
<br>[Called By]<ul>
<li><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_spiflash_open
<li><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_read
<li><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_write.constprop.0
</ul>
<p><strong><a name="[71d]"></a>csi_spiflash_program</strong>(2 bytes, Stack size 0 btyes, src_flash_weak.o(.text.weak_func))<br>
<br>[Called By]<ul>
<li><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_spiflash_program
<li><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_write.constprop.0
</ul>
<p><strong><a name="[71c]"></a>csi_spiflash_read</strong>(2 bytes, Stack size 0 btyes, src_flash_weak.o(.text.weak_func))<br>
<br>[Called By]<ul>
<li><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_spiflash_read
<li><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvram_read
</ul>
<p><strong><a name="[71b]"></a>csi_spiflash_uninitialize</strong>(2 bytes, Stack size 0 btyes, src_flash_weak.o(.text.weak_func))<br>
<br>[Called By]<ul>
<li><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_spiflash_close
</ul>
<p><strong><a name="[7a2]"></a>hal_gpio_finalize</strong>(20 bytes, Stack size 0 btyes, src_gpio.o(.text.hal_gpio_finalize))<br>
<p><strong><a name="[7a4]"></a>hal_gpio_init</strong>(120 bytes, Stack size 0 btyes, src_gpio.o(.text.hal_gpio_init))<br>
<p><strong><a name="[7a5]"></a>hal_gpio_output_high</strong>(52 bytes, Stack size 0 btyes, src_gpio.o(.text.hal_gpio_output_high))<br>
<p><strong><a name="[7a6]"></a>hal_gpio_output_low</strong>(52 bytes, Stack size 0 btyes, src_gpio.o(.text.hal_gpio_output_low))<br>
<p><strong><a name="[7a7]"></a>hal_gpio_output_toggle</strong>(72 bytes, Stack size 0 btyes, src_gpio.o(.text.hal_gpio_output_toggle))<br>
<p><strong><a name="[7a8]"></a>hal_gpio_input_get</strong>(20 bytes, Stack size 0 btyes, src_gpio.o(.text.hal_gpio_input_get))<br>
<p><strong><a name="[7a9]"></a>hal_gpio_enable_irq</strong>(84 bytes, Stack size 0 btyes, src_gpio.o(.text.hal_gpio_enable_irq))<br>
<p><strong><a name="[7aa]"></a>hal_gpio_disable_irq</strong>(80 bytes, Stack size 0 btyes, src_gpio.o(.text.hal_gpio_disable_irq))<br>
<p><strong><a name="[7ab]"></a>hal_gpio_clear_irq</strong>(10 bytes, Stack size 0 btyes, src_gpio.o(.text.hal_gpio_clear_irq))<br>
<p><strong><a name="[7ad]"></a>hal_i2c_init</strong>(152 bytes, Stack size 0 btyes, src_i2c.o(.text.hal_i2c_init))<br>
<p><strong><a name="[7ae]"></a>hal_i2c_master_send</strong>(112 bytes, Stack size 0 btyes, src_i2c.o(.text.hal_i2c_master_send))<br>
<p><strong><a name="[7af]"></a>hal_i2c_master_recv</strong>(112 bytes, Stack size 0 btyes, src_i2c.o(.text.hal_i2c_master_recv))<br>
<p><strong><a name="[7b0]"></a>hal_i2c_slave_send</strong>(100 bytes, Stack size 0 btyes, src_i2c.o(.text.hal_i2c_slave_send))<br>
<p><strong><a name="[7b1]"></a>hal_i2c_slave_recv</strong>(100 bytes, Stack size 0 btyes, src_i2c.o(.text.hal_i2c_slave_recv))<br>
<p><strong><a name="[7b2]"></a>hal_i2c_mem_write</strong>(244 bytes, Stack size 0 btyes, src_i2c.o(.text.hal_i2c_mem_write))<br>
<p><strong><a name="[7b3]"></a>hal_i2c_mem_read</strong>(200 bytes, Stack size 0 btyes, src_i2c.o(.text.hal_i2c_mem_read))<br>
<p><strong><a name="[7b4]"></a>hal_i2c_finalize</strong>(44 bytes, Stack size 0 btyes, src_i2c.o(.text.hal_i2c_finalize))<br>
<p><strong><a name="[7b6]"></a>hal_i2s_init</strong>(268 bytes, Stack size 0 btyes, src_i2s.o(.text.hal_i2s_init))<br>
<p><strong><a name="[7b7]"></a>hal_i2s_send</strong>(32 bytes, Stack size 0 btyes, src_i2s.o(.text.hal_i2s_send))<br>
<p><strong><a name="[7b8]"></a>hal_i2s_recv</strong>(32 bytes, Stack size 0 btyes, src_i2s.o(.text.hal_i2s_recv))<br>
<p><strong><a name="[7b9]"></a>hal_i2s_pause</strong>(42 bytes, Stack size 0 btyes, src_i2s.o(.text.hal_i2s_pause))<br>
<p><strong><a name="[7ba]"></a>hal_i2s_resume</strong>(42 bytes, Stack size 0 btyes, src_i2s.o(.text.hal_i2s_resume))<br>
<p><strong><a name="[7bb]"></a>hal_i2s_stop</strong>(42 bytes, Stack size 0 btyes, src_i2s.o(.text.hal_i2s_stop))<br>
<p><strong><a name="[7bc]"></a>hal_i2s_finalize</strong>(60 bytes, Stack size 0 btyes, src_i2s.o(.text.hal_i2s_finalize))<br>
<p><strong><a name="[7bd]"></a>hal_interpt_init</strong>(4 bytes, Stack size 0 btyes, src_interpt.o(.text.hal_interpt_init))<br>
<p><strong><a name="[7be]"></a>hal_interpt_mask</strong>(10 bytes, Stack size 0 btyes, src_interpt.o(.text.hal_interpt_mask))<br>
<p><strong><a name="[7bf]"></a>hal_interpt_umask</strong>(10 bytes, Stack size 0 btyes, src_interpt.o(.text.hal_interpt_umask))<br>
<p><strong><a name="[7c0]"></a>hal_interpt_install</strong>(10 bytes, Stack size 0 btyes, src_interpt.o(.text.hal_interpt_install))<br>
<p><strong><a name="[7c1]"></a>hal_pwm_init</strong>(72 bytes, Stack size 0 btyes, src_pwm.o(.text.hal_pwm_init))<br>
<p><strong><a name="[7c2]"></a>hal_pwm_start</strong>(24 bytes, Stack size 0 btyes, src_pwm.o(.text.hal_pwm_start))<br>
<p><strong><a name="[7c3]"></a>hal_pwm_stop</strong>(24 bytes, Stack size 0 btyes, src_pwm.o(.text.hal_pwm_stop))<br>
<p><strong><a name="[7c4]"></a>hal_pwm_para_chg</strong>(60 bytes, Stack size 0 btyes, src_pwm.o(.text.hal_pwm_para_chg))<br>
<p><strong><a name="[7c5]"></a>hal_pwm_finalize</strong>(22 bytes, Stack size 0 btyes, src_pwm.o(.text.hal_pwm_finalize))<br>
<p><strong><a name="[7c6]"></a>hal_random_num_read</strong>(24 bytes, Stack size 0 btyes, src_rng.o(.text.hal_random_num_read))<br>
<p><strong><a name="[7c7]"></a>hal_rtc_init</strong>(32 bytes, Stack size 0 btyes, src_rtc.o(.text.hal_rtc_init))<br>
<p><strong><a name="[7c8]"></a>hal_rtc_get_time</strong>(626 bytes, Stack size 0 btyes, src_rtc.o(.text.hal_rtc_get_time))<br>
<p><strong><a name="[7c9]"></a>hal_rtc_set_time</strong>(228 bytes, Stack size 0 btyes, src_rtc.o(.text.hal_rtc_set_time))<br>
<p><strong><a name="[7ca]"></a>hal_rtc_finalize</strong>(34 bytes, Stack size 0 btyes, src_rtc.o(.text.hal_rtc_finalize))<br>
<p><strong><a name="[7cc]"></a>hal_spi_init</strong>(68 bytes, Stack size 0 btyes, src_spi.o(.text.hal_spi_init))<br>
<p><strong><a name="[7cd]"></a>hal_spi_send</strong>(84 bytes, Stack size 0 btyes, src_spi.o(.text.hal_spi_send))<br>
<p><strong><a name="[7ce]"></a>hal_spi_recv</strong>(84 bytes, Stack size 0 btyes, src_spi.o(.text.hal_spi_recv))<br>
<p><strong><a name="[7cf]"></a>hal_spi_send_recv</strong>(92 bytes, Stack size 0 btyes, src_spi.o(.text.hal_spi_send_recv))<br>
<p><strong><a name="[7d0]"></a>hal_spi_send_and_recv</strong>(116 bytes, Stack size 0 btyes, src_spi.o(.text.hal_spi_send_and_recv))<br>
<p><strong><a name="[7d1]"></a>hal_spi_send_and_send</strong>(116 bytes, Stack size 0 btyes, src_spi.o(.text.hal_spi_send_and_send))<br>
<p><strong><a name="[7d2]"></a>hal_spi_finalize</strong>(12 bytes, Stack size 0 btyes, src_spi.o(.text.hal_spi_finalize))<br>
<p><strong><a name="[7d4]"></a>hal_timer_init</strong>(84 bytes, Stack size 0 btyes, src_timer.o(.text.hal_timer_init))<br>
<p><strong><a name="[7d5]"></a>hal_timer_start</strong>(36 bytes, Stack size 0 btyes, src_timer.o(.text.hal_timer_start))<br>
<p><strong><a name="[7d6]"></a>hal_timer_stop</strong>(28 bytes, Stack size 0 btyes, src_timer.o(.text.hal_timer_stop))<br>
<p><strong><a name="[7d7]"></a>hal_timer_para_chg</strong>(108 bytes, Stack size 0 btyes, src_timer.o(.text.hal_timer_para_chg))<br>
<p><strong><a name="[7d8]"></a>hal_timer_finalize</strong>(36 bytes, Stack size 0 btyes, src_timer.o(.text.hal_timer_finalize))<br>
<p><strong><a name="[7da]"></a>hal_uart_init</strong>(220 bytes, Stack size 44 btyes, src_uart.o(.text.hal_uart_init))<br>
<br>[Stack]<ul><li>Max Depth = 128 
<li>Call Chain = hal_uart_init &rArr; aos_sem_new &rArr; aos_malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___gnu_csky_case_uqi
<li><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_initialize
<li><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_malloc
<li><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuffer_create
<li><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<li><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_config
</ul>
<br>[Called By]<ul>
<li><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_service_init
</ul>
<p><strong><a name="[7db]"></a>hal_uart_send_poll</strong>(40 bytes, Stack size 20 btyes, src_uart.o(.text.hal_uart_send_poll))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = hal_uart_send_poll &rArr; csi_usart_putchar </ul>
<br>[Calls]<ul>
<li><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_putchar
</ul>
<br>[Called By]<ul>
<li><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_sendv
</ul>
<p><strong><a name="[7dc]"></a>hal_uart_send</strong>(52 bytes, Stack size 0 btyes, src_uart.o(.text.hal_uart_send))<br>
<p><strong><a name="[7dd]"></a>hal_uart_recv</strong>(156 bytes, Stack size 0 btyes, src_uart.o(.text.hal_uart_recv))<br>
<p><strong><a name="[7de]"></a>hal_uart_recv_poll</strong>(40 bytes, Stack size 0 btyes, src_uart.o(.text.hal_uart_recv_poll))<br>
<p><strong><a name="[7df]"></a>hal_uart_recv_II</strong>(152 bytes, Stack size 40 btyes, src_uart.o(.text.hal_uart_recv_II))<br>
<br>[Stack]<ul><li>Max Depth = 116 
<li>Call Chain = hal_uart_recv_II &rArr; aos_sem_wait &rArr; krhino_sem_take  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
<li><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuffer_read
<li><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<li><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_receive_query
</ul>
<br>[Called By]<ul>
<li><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_task_entry
</ul>
<p><strong><a name="[7e0]"></a>hal_uart_finalize</strong>(76 bytes, Stack size 0 btyes, src_uart.o(.text.hal_uart_finalize))<br>
<p><strong><a name="[7e1]"></a>hal_wdg_init</strong>(48 bytes, Stack size 8 btyes, src_wdg.o(.text.hal_wdg_init))<br>
<br>[Stack]<ul><li>Max Depth = 44 
<li>Call Chain = hal_wdg_init &rArr; csi_wdt_initialize &rArr; target_get_wdt  &rArr; target_get  </ul>
<br>[Calls]<ul>
<li><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_wdt_initialize
<li><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_wdt_set_timeout
<li><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_wdt_start
</ul>
<br>[Called By]<ul>
<li><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_service_init
</ul>
<p><strong><a name="[7e2]"></a>hal_wdg_reload</strong>(10 bytes, Stack size 0 btyes, src_wdg.o(.text.hal_wdg_reload))<br>
<p><strong><a name="[7e3]"></a>hal_wdg_finalize</strong>(22 bytes, Stack size 4 btyes, src_wdg.o(.text.hal_wdg_finalize))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = hal_wdg_finalize &rArr; csi_wdt_uninitialize </ul>
<br>[Calls]<ul>
<li><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_wdt_uninitialize
</ul>
<br>[Called By]<ul>
<li><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_service_init
</ul>
<p><strong><a name="[7ea]"></a>adc_csky_register</strong>(20 bytes, Stack size 0 btyes, csi1_adc_adc_drv.o(.text.adc_csky_register))<br>
<p><strong><a name="[7f3]"></a>flash_csky_register</strong>(20 bytes, Stack size 0 btyes, csi1_eflash_flash_drv.o(.text.flash_csky_register))<br>
<p><strong><a name="[800]"></a>iic_csky_register</strong>(20 bytes, Stack size 0 btyes, csi1_iic_iic_drv.o(.text.iic_csky_register))<br>
<p><strong><a name="[809]"></a>spiflash_csky_register</strong>(20 bytes, Stack size 4 btyes, csi1_spiflash_spiflash_drv.o(.text.spiflash_csky_register))<br>
<br>[Stack]<ul><li>Max Depth = 144 
<li>Call Chain = spiflash_csky_register &rArr; driver_register &rArr; device_find  &rArr; aos_mutex_new  &rArr; aos_malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_register
</ul>
<br>[Called By]<ul>
<li><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_board_init
</ul>
<p><strong><a name="[80c]"></a>uart_csky_register</strong>(20 bytes, Stack size 0 btyes, csi1_uart_uart_drv.o(.text.uart_csky_register))<br>
<p><strong><a name="[80d]"></a>dev_get_handler</strong>(4 bytes, Stack size 0 btyes, csi1_uart_uart_drv.o(.text.dev_get_handler))<br>
<p><strong><a name="[818]"></a>ll_hw_read_rfifo1</strong>(120 bytes, Stack size 36 btyes, ble_controller_ll_patch.o(.__sram.code.ll_hw_read_rfifo1))<br>
<br>[Called By]<ul>
<li><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtInitIRQ
<li><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_secondaryAdvTRX0
<li><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_secondaryScanSRX0
<li><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtScanIRQ
<li><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtAdvIRQ
</ul>
<p><strong><a name="[819]"></a>ll_hw_go1</strong>(472 bytes, Stack size 20 btyes, ble_controller_ll_patch.o(.__sram.code.ll_hw_go1))<br>
<p><strong><a name="[81a]"></a>llMasterEvt_TaskEndOk1</strong>(320 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.llMasterEvt_TaskEndOk1))<br>
<p><strong><a name="[81b]"></a>ll_processBasicIRQ_SRX</strong>(2328 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.ll_processBasicIRQ_SRX))<br>
<p><strong><a name="[81c]"></a>ll_processBasicIRQ_SRX2</strong>(994 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.ll_processBasicIRQ_SRX2))<br>
<p><strong><a name="[81d]"></a>ll_processBasicIRQ_fixdirectADV</strong>(564 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.ll_processBasicIRQ_fixdirectADV))<br>
<p><strong><a name="[81e]"></a>LL_IRQHandler3</strong>(156 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.LL_IRQHandler3))<br>
<p><strong><a name="[81f]"></a>ll_scheduler2</strong>(1016 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.ll_scheduler2))<br>
<p><strong><a name="[820]"></a>ll_scheduler1</strong>(44 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.ll_scheduler1))<br>
<p><strong><a name="[821]"></a>ll_adptive_adj_next_time1</strong>(220 bytes, Stack size 12 btyes, ble_controller_ll_patch.o(.__sram.code.ll_adptive_adj_next_time1))<br>
<br>[Calls]<ul>
<li><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivsi3
</ul>
<p><strong><a name="[822]"></a>llSlaveEvt_TaskEndOk1</strong>(460 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.llSlaveEvt_TaskEndOk1))<br>
<p><strong><a name="[823]"></a>osal_pwrmgr_powerconserve1</strong>(2 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.osal_pwrmgr_powerconserve1))<br>
<p><strong><a name="[824]"></a>LL_TxData1</strong>(112 bytes, Stack size 12 btyes, ble_controller_ll_patch.o(.__sram.code.LL_TxData1))<br>
<p><strong><a name="[825]"></a>llConnTerminate1</strong>(96 bytes, Stack size 8 btyes, ble_controller_ll_patch.o(.__sram.code.llConnTerminate1))<br>
<p><strong><a name="[826]"></a>llSecAdvAllow1</strong>(84 bytes, Stack size 16 btyes, ble_controller_ll_patch.o(.__sram.code.llSecAdvAllow1))<br>
<br>[Calls]<ul>
<li><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_LL_remainder_time1
</ul>
<p><strong><a name="[827]"></a>llCalcMaxScanTime1</strong>(68 bytes, Stack size 16 btyes, ble_controller_ll_patch.o(.__sram.code.llCalcMaxScanTime1))<br>
<br>[Calls]<ul>
<li><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_LL_remainder_time1
</ul>
<p><strong><a name="[828]"></a>__TIM1_IRQHandler</strong>(76 bytes, Stack size 12 btyes, ble_controller_ll_patch.o(.__sram.code.__TIM1_IRQHandler))<br>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</ul>
<p><strong><a name="[829]"></a>patch_extScan_updateNode</strong>(60 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.patch_extScan_updateNode))<br>
<br>[Stack]<ul><li>Max Depth = 4 
<li>Call Chain = patch_extScan_updateNode &rArr; patch_extScan_deleteNode </ul>
<br>[Calls]<ul>
<li><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_extScan_deleteNode
</ul>
<br>[Called By]<ul>
<li><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtScanIRQ
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_extScanTimerExpProcess
</ul>
<p><strong><a name="[82a]"></a>patch_extScan_addNode</strong>(68 bytes, Stack size 20 btyes, ble_controller_ll_patch.o(.__sram.code.patch_extScan_addNode))<br>
<br>[Called By]<ul>
<li><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtScanIRQ
</ul>
<p><strong><a name="[82b]"></a>ll_processBasicIRQ_secondaryAdvTRX0</strong>(1168 bytes, Stack size 64 btyes, ble_controller_ll_patch.o(.__sram.code.ll_processBasicIRQ_secondaryAdvTRX0))<br>
<br>[Stack]<ul><li>Max Depth = 100 
<li>Call Chain = ll_processBasicIRQ_secondaryAdvTRX0 &rArr; ll_hw_read_rfifo1 </ul>
<br>[Calls]<ul>
<li><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_read_rfifo1
</ul>
<br>[Called By]<ul>
<li><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler_process
</ul>
<p><strong><a name="[82c]"></a>ll_processBasicIRQ_secondaryInitSRX0</strong>(1192 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.ll_processBasicIRQ_secondaryInitSRX0))<br>
<p><strong><a name="[82d]"></a>ll_processBasicIRQ_secondaryScanSRX0</strong>(448 bytes, Stack size 64 btyes, ble_controller_ll_patch.o(.__sram.code.ll_processBasicIRQ_secondaryScanSRX0))<br>
<br>[Stack]<ul><li>Max Depth = 100 
<li>Call Chain = ll_processBasicIRQ_secondaryScanSRX0 &rArr; ll_hw_read_rfifo1 </ul>
<br>[Calls]<ul>
<li><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_read_rfifo1
</ul>
<br>[Called By]<ul>
<li><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler_process
</ul>
<p><strong><a name="[82e]"></a>llSetupExtScan1</strong>(212 bytes, Stack size 20 btyes, ble_controller_ll_patch.o(.__sram.code.llSetupExtScan1))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = llSetupExtScan1 &rArr; rf_phy_change_cfg0 </ul>
<br>[Calls]<ul>
<li><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_change_cfg0
</ul>
<br>[Called By]<ul>
<li><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtScanIRQ
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_extScanTimerExpProcess
<li><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetExtendedScanEnable
<li><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler_process
</ul>
<p><strong><a name="[82f]"></a>ll_processExtScanIRQ</strong>(3332 bytes, Stack size 108 btyes, ble_controller_ll_patch.o(.__sram.code.ll_processExtScanIRQ))<br>
<br>[Stack]<ul><li>Max Depth = 192 
<li>Call Chain = ll_processExtScanIRQ &rArr; LL_ExtAdvReportCback </ul>
<br>[Calls]<ul>
<li><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_read_rfifo1
<li><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ExtAdvReportCback
<li><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_extScan_updateNode
<li><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_extScan_addNode
<li><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupExtScan1
</ul>
<br>[Called By]<ul>
<li><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler_process
</ul>
<p><strong><a name="[830]"></a>LL_extScanTimerExpProcess</strong>(132 bytes, Stack size 20 btyes, ble_controller_ll_patch.o(.__sram.code.LL_extScanTimerExpProcess))<br>
<br>[Stack]<ul><li>Max Depth = 44 
<li>Call Chain = LL_extScanTimerExpProcess &rArr; llSetupExtScan1 &rArr; rf_phy_change_cfg0  </ul>
<br>[Calls]<ul>
<li><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_extScan_updateNode
<li><a href="#[869]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_extScan_findSchNode
<li><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_extScan_deleteNode
<li><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupExtScan1
</ul>
<br>[Called By]<ul>
<li><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler1
</ul>
<p><strong><a name="[831]"></a>llProcessTxData1</strong>(128 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.text.llProcessTxData1))<br>
<p><strong><a name="[832]"></a>debug_print1</strong>(2 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.text.debug_print1))<br>
<p><strong><a name="[833]"></a>rc32k_calibration</strong>(96 bytes, Stack size 12 btyes, ble_controller_ll_patch.o(.__sram.rc32k_calibration))<br>
<br>[Called By]<ul>
<li><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
</ul>
<p><strong><a name="[834]"></a>rf_calibrate1</strong>(32 bytes, Stack size 4 btyes, ble_controller_ll_patch.o(.__sram.code.rf_calibrate1))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = rf_calibrate1 &rArr; rf_tpCal_gen_cap_arrary &rArr; rf_tp_cal  </ul>
<br>[Calls]<ul>
<li><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ana_cfg
<li><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tpCal_gen_cap_arrary
<li><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rxDcoc_cfg
<li><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rc32k_calibration
</ul>
<p><strong><a name="[835]"></a>LL_SetAdvParam1</strong>(92 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.text.LL_SetAdvParam1))<br>
<p><strong><a name="[836]"></a>LL_SetRandomAddress</strong>(224 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.text.LL_SetRandomAddress))<br>
<p><strong><a name="[837]"></a>LL_SetAdvControl1</strong>(368 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.text.LL_SetAdvControl1))<br>
<p><strong><a name="[838]"></a>LL_AdvSetTerminatedCback</strong>(168 bytes, Stack size 24 btyes, ble_controller_ll_patch.o(.__xip.code.LL_AdvSetTerminatedCback))<br>
<br>[Called By]<ul>
<li><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtAdvIRQ
<li><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_extAdvTimerExpProcess
</ul>
<p><strong><a name="[839]"></a>ll_processExtAdvIRQ</strong>(1888 bytes, Stack size 44 btyes, ble_controller_ll_patch.o(.__sram.code.ll_processExtAdvIRQ))<br>
<br>[Stack]<ul><li>Max Depth = 80 
<li>Call Chain = ll_processExtAdvIRQ &rArr; ll_hw_read_rfifo1 </ul>
<br>[Calls]<ul>
<li><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_isLegacyAdv
<li><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_read_rfifo1
<li><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvSetTerminatedCback
<li><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_trx_settle_bb
<li><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAuxConnectRspPDU1
<li><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_slave_function1
</ul>
<br>[Called By]<ul>
<li><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler_process
</ul>
<p><strong><a name="[83a]"></a>LL_IRQHandler1</strong>(224 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.LL_IRQHandler1))<br>
<p><strong><a name="[83b]"></a>LL_IRQHandler2</strong>(220 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.LL_IRQHandler2))<br>
<p><strong><a name="[83c]"></a>LL_extAdvTimerExpProcess</strong>(252 bytes, Stack size 20 btyes, ble_controller_ll_patch.o(.__sram.code.LL_extAdvTimerExpProcess))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = LL_extAdvTimerExpProcess &rArr; llSetupExtAdvLegacyEvent &rArr; rf_phy_change_cfg0  </ul>
<br>[Calls]<ul>
<li><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_LL_remainder_time1
<li><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_isLegacyAdv
<li><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupExtAdvLegacyEvent
<li><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_AdvSetTerminatedCback
</ul>
<br>[Called By]<ul>
<li><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler1
</ul>
<p><strong><a name="[83d]"></a>TIM4_IRQHandler1</strong>(128 bytes, Stack size 12 btyes, ble_controller_ll_patch.o(.__sram.code.TIM4_IRQHandler1))<br>
<br>[Stack]<ul><li>Max Depth = 60 
<li>Call Chain = TIM4_IRQHandler1 &rArr; LL_extAdvTimerExpProcess &rArr; llSetupExtAdvLegacyEvent  &rArr; rf_phy_change_cfg0  </ul>
<br>[Calls]<ul>
<li><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_extAdvTimerExpProcess
<li><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_prdAdvTimerExpProcess
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_extScanTimerExpProcess
<li><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_prdScanTimerExpProcess
</ul>
<p><strong><a name="[83e]"></a>ll_parseExtHeader1</strong>(328 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.text.ll_parseExtHeader1))<br>
<p><strong><a name="[83f]"></a>llSetupAuxSyncIndPDU1</strong>(492 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.text.llSetupAuxSyncIndPDU1))<br>
<p><strong><a name="[840]"></a>llSetupAuxScanRspPDU1</strong>(340 bytes, Stack size 28 btyes, ble_controller_ll_patch.o(.__sram.llSetupAuxScanRspPDU1))<br>
<br>[Calls]<ul>
<li><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivsi3
</ul>
<p><strong><a name="[841]"></a>LL_SetExtAdvParam</strong>(988 bytes, Stack size 108 btyes, ble_controller_ll_patch.o(.__xip.code.LL_SetExtAdvParam))<br>
<br>[Called By]<ul>
<li><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetExtAdvParamCmd
</ul>
<p><strong><a name="[842]"></a>LL_SetExtendedScanEnable</strong>(112 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.text.LL_SetExtendedScanEnable))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = LL_SetExtendedScanEnable &rArr; llSetupExtScan1 &rArr; rf_phy_change_cfg0  </ul>
<br>[Calls]<ul>
<li><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupExtScan1
<li><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_extScan_deleteAllNode
</ul>
<br>[Called By]<ul>
<li><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_scan_schd_scan_exit
<li><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_scan_schd_adv_scan_exit
<li><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetExtendedScanEnableCmd1
<li><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_scan_timer
</ul>
<p><strong><a name="[843]"></a>HCI_LE_SetExtendedScanEnableCmd</strong>(32 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.text.HCI_LE_SetExtendedScanEnableCmd))<br>
<p><strong><a name="[844]"></a>LL_InitPeriodicAdv</strong>(208 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.text.LL_InitPeriodicAdv))<br>
<p><strong><a name="[845]"></a>TRNG_Output</strong>(80 bytes, Stack size 24 btyes, ble_controller_ll_patch.o(.__sram.code.TRNG_Output))<br>
<br>[Called By]<ul>
<li><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_INIT
</ul>
<p><strong><a name="[846]"></a>TRNG_INIT</strong>(44 bytes, Stack size 8 btyes, ble_controller_ll_patch.o(.__sram.code.TRNG_INIT))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = TRNG_INIT &rArr; TRNG_Output </ul>
<br>[Calls]<ul>
<li><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_Output
</ul>
<br>[Called By]<ul>
<li><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_Rand
</ul>
<p><strong><a name="[847]"></a>TRNG_Rand</strong>(156 bytes, Stack size 52 btyes, ble_controller_ll_patch.o(.__sram.code.TRNG_Rand))<br>
<br>[Stack]<ul><li>Max Depth = 84 
<li>Call Chain = TRNG_Rand &rArr; TRNG_INIT &rArr; TRNG_Output  </ul>
<br>[Calls]<ul>
<li><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_INIT
</ul>
<br>[Called By]<ul>
<li><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ENC_GenerateTrueRandNum1
<li><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_api_le_rand
</ul>
<p><strong><a name="[848]"></a>LL_ENC_GenerateTrueRandNum1</strong>(8 bytes, Stack size 4 btyes, ble_controller_ll_patch.o(.__sram.code.LL_ENC_GenerateTrueRandNum1))<br>
<br>[Stack]<ul><li>Max Depth = 88 
<li>Call Chain = LL_ENC_GenerateTrueRandNum1 &rArr; TRNG_Rand &rArr; TRNG_INIT  &rArr; TRNG_Output  </ul>
<br>[Calls]<ul>
<li><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_Rand
</ul>
<p><strong><a name="[849]"></a>config_RTC1</strong>(124 bytes, Stack size 16 btyes, ble_controller_ll_patch.o(.__sram.code.config_RTC1))<br>
<br>[Calls]<ul>
<li><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_LL_remainder_time1
</ul>
<p><strong><a name="[84a]"></a>LL_EncLtkReply</strong>(96 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.LL_EncLtkReply))<br>
<p><strong><a name="[84b]"></a>LL_EncLtkNegReply</strong>(80 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.LL_EncLtkNegReply))<br>
<p><strong><a name="[84c]"></a>llSetupStartEncRsp</strong>(58 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.llSetupStartEncRsp))<br>
<p><strong><a name="[84d]"></a>llProcessMasterControlProcedures1</strong>(1294 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.llProcessMasterControlProcedures1))<br>
<p><strong><a name="[84e]"></a>llProcessSlaveControlProcedures1</strong>(892 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.llProcessSlaveControlProcedures1))<br>
<p><strong><a name="[84f]"></a>LL_ENC_Encrypt1</strong>(424 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.LL_ENC_Encrypt1))<br>
<p><strong><a name="[850]"></a>LL_ENC_Decrypt1</strong>(456 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.LL_ENC_Decrypt1))<br>
<p><strong><a name="[851]"></a>ll_isLegacyAdv</strong>(10 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.ll_isLegacyAdv))<br>
<br>[Called By]<ul>
<li><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetExtAdvEnable.part.8
<li><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_add_adv_task1
<li><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetExtAdvData
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetExtScanRspData
<li><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_adv_scheduler1
<li><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_slave_function1
<li><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtAdvIRQ
<li><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_extAdvTimerExpProcess
</ul>
<p><strong><a name="[853]"></a>LL_ExtAdvReportCback</strong>(328 bytes, Stack size 84 btyes, ble_controller_ll_patch.o(.__sram.code.LL_ExtAdvReportCback))<br>
<br>[Called By]<ul>
<li><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtScanIRQ
</ul>
<p><strong><a name="[854]"></a>ll_adv_scheduler1</strong>(380 bytes, Stack size 32 btyes, ble_controller_ll_patch.o(.__sram.code.ll_adv_scheduler1))<br>
<br>[Calls]<ul>
<li><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_isLegacyAdv
</ul>
<p><strong><a name="[855]"></a>ll_adv_scheduler_periodic1</strong>(392 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.ll_adv_scheduler_periodic1))<br>
<p><strong><a name="[856]"></a>ll_processPrdAdvIRQ</strong>(52 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.ll_processPrdAdvIRQ))<br>
<p><strong><a name="[857]"></a>ll_processExtInitIRQ</strong>(2380 bytes, Stack size 72 btyes, ble_controller_ll_patch.o(.__sram.code.ll_processExtInitIRQ))<br>
<br>[Stack]<ul><li>Max Depth = 108 
<li>Call Chain = ll_processExtInitIRQ &rArr; ll_hw_read_rfifo1 </ul>
<br>[Calls]<ul>
<li><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_hw_read_rfifo1
</ul>
<br>[Called By]<ul>
<li><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler_process
</ul>
<p><strong><a name="[858]"></a>ll_processPrdScanIRQ</strong>(920 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.ll_processPrdScanIRQ))<br>
<p><strong><a name="[859]"></a>LL_prdAdvTimerExpProcess</strong>(288 bytes, Stack size 24 btyes, ble_controller_ll_patch.o(.__sram.code.LL_prdAdvTimerExpProcess))<br>
<br>[Calls]<ul>
<li><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_LL_remainder_time1
</ul>
<br>[Called By]<ul>
<li><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler1
</ul>
<p><strong><a name="[85a]"></a>LL_prdScanTimerExpProcess</strong>(24 bytes, Stack size 4 btyes, ble_controller_ll_patch.o(.__sram.code.LL_prdScanTimerExpProcess))<br>
<br>[Called By]<ul>
<li><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler1
</ul>
<p><strong><a name="[85b]"></a>LL_extInitTimerExpProcess</strong>(8 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.LL_extInitTimerExpProcess))<br>
<p><strong><a name="[85c]"></a>llProcessMasterControlPacket1</strong>(32 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.llProcessMasterControlPacket1))<br>
<p><strong><a name="[85d]"></a>LL_ProcessEvent1</strong>(1204 bytes, Stack size 64 btyes, ble_controller_ll_patch.o(.__sram.code.LL_ProcessEvent1))<br>
<br>[Stack]<ul><li>Max Depth = 120 
<li>Call Chain = LL_ProcessEvent1 &rArr; LL_EnhConnectionCompleteCback </ul>
<br>[Calls]<ul>
<li><a href="#[8a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isEnhConnCmpEvtSupport
<li><a href="#[8a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EnhConnectionCompleteCback
<li><a href="#[8a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ChannelSelectionAlgorithmCback
</ul>
<p><strong><a name="[85e]"></a>llSetupSyncInfo</strong>(248 bytes, Stack size 20 btyes, ble_controller_ll_patch.o(.__sram.code.llSetupSyncInfo))<br>
<br>[Calls]<ul>
<li><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivsi3
</ul>
<br>[Called By]<ul>
<li><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAuxAdvIndPDU1
</ul>
<p><strong><a name="[85f]"></a>llSetupAdvExtIndPDU1</strong>(660 bytes, Stack size 40 btyes, ble_controller_ll_patch.o(.__sram.code.llSetupAdvExtIndPDU1))<br>
<br>[Calls]<ul>
<li><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivsi3
<li><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__divsi3
</ul>
<p><strong><a name="[860]"></a>llSetupAuxAdvIndPDU1</strong>(680 bytes, Stack size 44 btyes, ble_controller_ll_patch.o(.__sram.code.llSetupAuxAdvIndPDU1))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = llSetupAuxAdvIndPDU1 &rArr; llSetupSyncInfo </ul>
<br>[Calls]<ul>
<li><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivsi3
<li><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSyncInfo
<li><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__divsi3
</ul>
<p><strong><a name="[861]"></a>llSetupAuxChainIndPDU1</strong>(624 bytes, Stack size 36 btyes, ble_controller_ll_patch.o(.__sram.code.llSetupAuxChainIndPDU1))<br>
<br>[Calls]<ul>
<li><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivsi3
</ul>
<p><strong><a name="[862]"></a>llSetupAuxConnectRspPDU1</strong>(164 bytes, Stack size 8 btyes, ble_controller_ll_patch.o(.__sram.code.llSetupAuxConnectRspPDU1))<br>
<br>[Called By]<ul>
<li><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtAdvIRQ
</ul>
<p><strong><a name="[863]"></a>llSetupExtAdvLegacyEvent</strong>(588 bytes, Stack size 24 btyes, ble_controller_ll_patch.o(.__sram.code.llSetupExtAdvLegacyEvent))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = llSetupExtAdvLegacyEvent &rArr; rf_phy_change_cfg0 </ul>
<br>[Calls]<ul>
<li><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___gnu_csky_case_uqi
<li><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_change_cfg0
</ul>
<br>[Called By]<ul>
<li><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupExtAdvEvent1
<li><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_extAdvTimerExpProcess
</ul>
<p><strong><a name="[864]"></a>llSetupExtAdvEvent1</strong>(484 bytes, Stack size 36 btyes, ble_controller_ll_patch.o(.__sram.code.llSetupExtAdvEvent1))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = llSetupExtAdvEvent1 &rArr; llSetupExtAdvLegacyEvent &rArr; rf_phy_change_cfg0  </ul>
<br>[Calls]<ul>
<li><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupExtAdvLegacyEvent
<li><a href="#[892]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_change_cfg0
</ul>
<p><strong><a name="[865]"></a>move_to_slave_function1</strong>(732 bytes, Stack size 36 btyes, ble_controller_ll_patch.o(.__sram.code.move_to_slave_function1))<br>
<br>[Calls]<ul>
<li><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_isLegacyAdv
</ul>
<br>[Called By]<ul>
<li><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtAdvIRQ
</ul>
<p><strong><a name="[866]"></a>move_to_slave_function2</strong>(28 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.move_to_slave_function2))<br>
<p><strong><a name="[867]"></a>ll_hw_trx_settle_bb</strong>(72 bytes, Stack size 4 btyes, ble_controller_ll_patch.o(.__sram.code.ll_hw_trx_settle_bb))<br>
<br>[Called By]<ul>
<li><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtAdvIRQ
</ul>
<p><strong><a name="[868]"></a>LL_slave_conn_event1</strong>(428 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.LL_slave_conn_event1))<br>
<p><strong><a name="[869]"></a>patch_extScan_findSchNode</strong>(32 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.patch_extScan_findSchNode))<br>
<br>[Called By]<ul>
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_extScanTimerExpProcess
</ul>
<p><strong><a name="[86a]"></a>patch_extScan_deleteNode</strong>(36 bytes, Stack size 4 btyes, ble_controller_ll_patch.o(.__sram.code.patch_extScan_deleteNode))<br>
<br>[Called By]<ul>
<li><a href="#[86b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_extScan_deleteAllNode
<li><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_extScan_updateNode
<li><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_extScanTimerExpProcess
</ul>
<p><strong><a name="[86b]"></a>patch_extScan_deleteAllNode</strong>(28 bytes, Stack size 8 btyes, ble_controller_ll_patch.o(.__sram.code.patch_extScan_deleteAllNode))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = patch_extScan_deleteAllNode &rArr; patch_extScan_deleteNode </ul>
<br>[Calls]<ul>
<li><a href="#[86a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_extScan_deleteNode
</ul>
<br>[Called By]<ul>
<li><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetExtendedScanEnable
</ul>
<p><strong><a name="[86c]"></a>ll_allocAuxAdvTimeSlot</strong>(138 bytes, Stack size 28 btyes, ble_controller_ll_patch.o(.__xip.code))<br>
<br>[Calls]<ul>
<li><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_LL_remainder_time1
</ul>
<br>[Called By]<ul>
<li><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_add_adv_task1
</ul>
<p><strong><a name="[86d]"></a>ll_add_adv_task1</strong>(428 bytes, Stack size 32 btyes, ble_controller_ll_patch.o(.__xip.code))<br>
<br>[Stack]<ul><li>Max Depth = 60 
<li>Call Chain = ll_add_adv_task1 &rArr; ll_allocAuxAdvTimeSlot </ul>
<br>[Calls]<ul>
<li><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_isLegacyAdv
<li><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_allocAuxAdvTimeSlot
<li><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_LL_remainder_time1
</ul>
<p><strong><a name="[86e]"></a>ll_delete_adv_task1</strong>(264 bytes, Stack size 36 btyes, ble_controller_ll_patch.o(.__xip.code))<br>
<p><strong><a name="[86f]"></a>ll_delete_adv_task_periodic1</strong>(316 bytes, Stack size 44 btyes, ble_controller_ll_patch.o(.__xip.code))<br>
<p><strong><a name="[870]"></a>HCI_LE_SetExtAdvParamCmd</strong>(114 bytes, Stack size 80 btyes, ble_controller_ll_patch.o(.__xip.code))<br>
<br>[Stack]<ul><li>Max Depth = 188 
<li>Call Chain = HCI_LE_SetExtAdvParamCmd &rArr; LL_SetExtAdvParam </ul>
<br>[Calls]<ul>
<li><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetExtAdvParam
</ul>
<br>[Called By]<ul>
<li><a href="#[900]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetExtAdvParam
</ul>
<p><strong><a name="[871]"></a>LL_SetExtAdvData</strong>(250 bytes, Stack size 36 btyes, ble_controller_ll_patch.o(.__xip.code))<br>
<br>[Calls]<ul>
<li><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_isLegacyAdv
</ul>
<br>[Called By]<ul>
<li><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetExtAdvDataCmd
</ul>
<p><strong><a name="[872]"></a>HCI_LE_SetExtAdvDataCmd</strong>(36 bytes, Stack size 16 btyes, ble_controller_ll_patch.o(.__xip.code))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = HCI_LE_SetExtAdvDataCmd &rArr; LL_SetExtAdvData </ul>
<br>[Calls]<ul>
<li><a href="#[871]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetExtAdvData
</ul>
<br>[Called By]<ul>
<li><a href="#[901]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetExtAdvData
</ul>
<p><strong><a name="[873]"></a>LL_SetExtAdvEnable</strong>(52 bytes, Stack size 20 btyes, ble_controller_ll_patch.o(.__xip.code))<br>
<br>[Stack]<ul><li>Max Depth = 608 
<li>Call Chain = LL_SetExtAdvEnable &rArr; LL_SetExtAdvEnable.part.8 </ul>
<br>[Calls]<ul>
<li><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetExtAdvEnable.part.8
</ul>
<br>[Called By]<ul>
<li><a href="#[874]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetExtAdvEnableCmd
<li><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetExtAdvEnable1
</ul>
<p><strong><a name="[874]"></a>HCI_LE_SetExtAdvEnableCmd</strong>(36 bytes, Stack size 16 btyes, ble_controller_ll_patch.o(.__xip.code))<br>
<br>[Stack]<ul><li>Max Depth = 624 
<li>Call Chain = HCI_LE_SetExtAdvEnableCmd &rArr; LL_SetExtAdvEnable &rArr; LL_SetExtAdvEnable.part.8  </ul>
<br>[Calls]<ul>
<li><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetExtAdvEnable
</ul>
<p><strong><a name="[875]"></a>LL_ReadMaximumAdvDataLength</strong>(36 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__xip.code))<br>
<br>[Called By]<ul>
<li><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ReadMaximumAdvDataLengthCmd
</ul>
<p><strong><a name="[876]"></a>HCI_LE_ReadMaximumAdvDataLengthCmd</strong>(48 bytes, Stack size 12 btyes, ble_controller_ll_patch.o(.__xip.code))<br>
<br>[Calls]<ul>
<li><a href="#[875]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReadMaximumAdvDataLength
</ul>
<br>[Called By]<ul>
<li><a href="#[903]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLEReadMaximumAdvDataLength
</ul>
<p><strong><a name="[877]"></a>LL_RemoveAdvSet</strong>(292 bytes, Stack size 24 btyes, ble_controller_ll_patch.o(.__xip.code))<br>
<br>[Called By]<ul>
<li><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_RemoveAdvSetCmd
</ul>
<p><strong><a name="[878]"></a>HCI_LE_RemoveAdvSetCmd</strong>(32 bytes, Stack size 8 btyes, ble_controller_ll_patch.o(.__xip.code))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = HCI_LE_RemoveAdvSetCmd &rArr; LL_RemoveAdvSet </ul>
<br>[Calls]<ul>
<li><a href="#[877]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RemoveAdvSet
</ul>
<br>[Called By]<ul>
<li><a href="#[905]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLERemoveAdvSet
</ul>
<p><strong><a name="[879]"></a>LL_ClearAdvSets</strong>(256 bytes, Stack size 24 btyes, ble_controller_ll_patch.o(.__xip.code))<br>
<br>[Called By]<ul>
<li><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ClearAdvSetsCmd
</ul>
<p><strong><a name="[87a]"></a>HCI_LE_ClearAdvSetsCmd</strong>(32 bytes, Stack size 8 btyes, ble_controller_ll_patch.o(.__xip.code))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = HCI_LE_ClearAdvSetsCmd &rArr; LL_ClearAdvSets </ul>
<br>[Calls]<ul>
<li><a href="#[879]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ClearAdvSets
</ul>
<br>[Called By]<ul>
<li><a href="#[906]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLEClearAdvSets
</ul>
<p><strong><a name="[87b]"></a>LL_InitialExtendedAdv</strong>(60 bytes, Stack size 16 btyes, ble_controller_ll_patch.o(.__xip.code))<br>
<br>[Called By]<ul>
<li><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_hal_open
</ul>
<p><strong><a name="[87c]"></a>LL_SetPeriodicAdvParameter</strong>(268 bytes, Stack size 36 btyes, ble_controller_ll_patch.o(.__xip.code))<br>
<br>[Called By]<ul>
<li><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetPeriodicAdvParameterCmd
</ul>
<p><strong><a name="[87d]"></a>HCI_LE_SetPeriodicAdvParameterCmd</strong>(32 bytes, Stack size 8 btyes, ble_controller_ll_patch.o(.__xip.code))<br>
<br>[Stack]<ul><li>Max Depth = 44 
<li>Call Chain = HCI_LE_SetPeriodicAdvParameterCmd &rArr; LL_SetPeriodicAdvParameter </ul>
<br>[Calls]<ul>
<li><a href="#[87c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetPeriodicAdvParameter
</ul>
<br>[Called By]<ul>
<li><a href="#[907]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetPeriodicAdvParameter
</ul>
<p><strong><a name="[87e]"></a>ll_allocAuxAdvTimeSlot_prd</strong>(136 bytes, Stack size 24 btyes, ble_controller_ll_patch.o(.__xip.code))<br>
<br>[Calls]<ul>
<li><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_LL_remainder_time1
</ul>
<br>[Called By]<ul>
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_add_adv_task_periodic1
<li><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetPeriodicAdvEnable
</ul>
<p><strong><a name="[87f]"></a>ll_add_adv_task_periodic1</strong>(584 bytes, Stack size 52 btyes, ble_controller_ll_patch.o(.__xip.code))<br>
<br>[Stack]<ul><li>Max Depth = 76 
<li>Call Chain = ll_add_adv_task_periodic1 &rArr; ll_allocAuxAdvTimeSlot_prd </ul>
<br>[Calls]<ul>
<li><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_allocAuxAdvTimeSlot_prd
<li><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_LL_remainder_time1
</ul>
<p><strong><a name="[880]"></a>LL_SetPeriodicAdvEnable</strong>(452 bytes, Stack size 32 btyes, ble_controller_ll_patch.o(.__xip.code))<br>
<br>[Stack]<ul><li>Max Depth = 56 
<li>Call Chain = LL_SetPeriodicAdvEnable &rArr; ll_allocAuxAdvTimeSlot_prd </ul>
<br>[Calls]<ul>
<li><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_allocAuxAdvTimeSlot_prd
</ul>
<br>[Called By]<ul>
<li><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetPeriodicAdvEnableCmd
</ul>
<p><strong><a name="[881]"></a>HCI_LE_SetPeriodicAdvEnableCmd</strong>(32 bytes, Stack size 8 btyes, ble_controller_ll_patch.o(.__xip.code))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = HCI_LE_SetPeriodicAdvEnableCmd &rArr; LL_SetPeriodicAdvEnable &rArr; ll_allocAuxAdvTimeSlot_prd  </ul>
<br>[Calls]<ul>
<li><a href="#[880]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetPeriodicAdvEnable
</ul>
<br>[Called By]<ul>
<li><a href="#[909]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetPeriodicAdvEnable
</ul>
<p><strong><a name="[882]"></a>LL_SetExtScanRspData</strong>(204 bytes, Stack size 28 btyes, ble_controller_ll_patch.o(.__xip.code))<br>
<br>[Calls]<ul>
<li><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_isLegacyAdv
</ul>
<br>[Called By]<ul>
<li><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetExtScanRspDataCmd
</ul>
<p><strong><a name="[883]"></a>HCI_LE_SetExtScanRspDataCmd</strong>(36 bytes, Stack size 16 btyes, ble_controller_ll_patch.o(.__xip.code))<br>
<br>[Stack]<ul><li>Max Depth = 44 
<li>Call Chain = HCI_LE_SetExtScanRspDataCmd &rArr; LL_SetExtScanRspData </ul>
<br>[Calls]<ul>
<li><a href="#[882]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetExtScanRspData
</ul>
<br>[Called By]<ul>
<li><a href="#[902]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetExtScanRspData
</ul>
<p><strong><a name="[884]"></a>rf_rxDcoc_cfg</strong>(292 bytes, Stack size 0 btyes, ble_controller_rf_phy_driver.o(.text.rf_rxDcoc_cfg))<br>
<br>[Calls]<ul>
<li><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___gnu_csky_case_uqi
</ul>
<br>[Called By]<ul>
<li><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
</ul>
<p><strong><a name="[885]"></a>rf_phy_dtm_cmd_parse</strong>(888 bytes, Stack size 0 btyes, ble_controller_rf_phy_driver.o(.text.rf_phy_dtm_cmd_parse))<br>
<p><strong><a name="[886]"></a>rf_phy_dtm_evt_send</strong>(300 bytes, Stack size 0 btyes, ble_controller_rf_phy_driver.o(.text.rf_phy_dtm_evt_send))<br>
<p><strong><a name="[887]"></a>rf_phy_dtm_zigbee_pkt_gen</strong>(128 bytes, Stack size 0 btyes, ble_controller_rf_phy_driver.o(.text.rf_phy_dtm_zigbee_pkt_gen))<br>
<p><strong><a name="[888]"></a>rf_phy_get_pktFoot</strong>(48 bytes, Stack size 0 btyes, ble_controller_rf_phy_driver.o(.text.rf_phy_get_pktFoot))<br>
<p><strong><a name="[889]"></a>rf_phy_get_pktFoot_fromPkt</strong>(40 bytes, Stack size 0 btyes, ble_controller_rf_phy_driver.o(.text.rf_phy_get_pktFoot_fromPkt))<br>
<p><strong><a name="[88a]"></a>rf_phy_set_txPower</strong>(140 bytes, Stack size 4 btyes, ble_controller_rf_phy_driver.o(.text.rf_phy_set_txPower))<br>
<br>[Called By]<ul>
<li><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini
</ul>
<p><strong><a name="[88b]"></a>rf_phy_ini</strong>(64 bytes, Stack size 8 btyes, ble_controller_rf_phy_driver.o(.text.rf_phy_ini))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = rf_phy_ini &rArr; rf_phy_bb_cfg </ul>
<br>[Calls]<ul>
<li><a href="#[890]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ana_cfg
<li><a href="#[88a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_set_txPower
<li><a href="#[891]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_bb_cfg
</ul>
<p><strong><a name="[88c]"></a>rf_phy_dtm_stop</strong>(44 bytes, Stack size 0 btyes, ble_controller_rf_phy_driver.o(.text.rf_phy_dtm_stop))<br>
<br>[Called By]<ul>
<li><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_ble_transmit_stop
<li><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_rx_current_test
</ul>
<p><strong><a name="[88d]"></a>rf_phy_dtm_ext_acc_code_set</strong>(12 bytes, Stack size 0 btyes, ble_controller_rf_phy_driver.o(.text.rf_phy_dtm_ext_acc_code_set))<br>
<p><strong><a name="[88f]"></a>DTM_UART_IRQHandler</strong>(84 bytes, Stack size 0 btyes, ble_controller_rf_phy_driver.o(.text.DTM_UART_IRQHandler))<br>
<p><strong><a name="[890]"></a>rf_phy_ana_cfg</strong>(280 bytes, Stack size 4 btyes, ble_controller_rf_phy_driver.o(.text.rf_phy_ana_cfg))<br>
<br>[Called By]<ul>
<li><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
<li><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini
</ul>
<p><strong><a name="[891]"></a>rf_phy_bb_cfg</strong>(444 bytes, Stack size 12 btyes, ble_controller_rf_phy_driver.o(.text.rf_phy_bb_cfg))<br>
<br>[Called By]<ul>
<li><a href="#[88b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_phy_ini
</ul>
<p><strong><a name="[892]"></a>rf_phy_change_cfg0</strong>(192 bytes, Stack size 4 btyes, ble_controller_rf_phy_driver.o(.text.rf_phy_change_cfg0))<br>
<br>[Called By]<ul>
<li><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupExtAdvLegacyEvent
<li><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupExtAdvEvent1
<li><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupExtScan1
</ul>
<p><strong><a name="[893]"></a>rf_tp_cal</strong>(300 bytes, Stack size 16 btyes, ble_controller_rf_phy_driver.o(.text.rf_tp_cal))<br>
<br>[Calls]<ul>
<li><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___gnu_csky_case_uqi
</ul>
<br>[Called By]<ul>
<li><a href="#[896]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tpCal_gen_cap_arrary
</ul>
<p><strong><a name="[894]"></a>rf_tpCal_cfg</strong>(60 bytes, Stack size 0 btyes, ble_controller_rf_phy_driver.o(.text.rf_tpCal_cfg))<br>
<p><strong><a name="[895]"></a>rf_tpCal_cfg_avg</strong>(232 bytes, Stack size 0 btyes, ble_controller_rf_phy_driver.o(.text.rf_tpCal_cfg_avg))<br>
<p><strong><a name="[896]"></a>rf_tpCal_gen_cap_arrary</strong>(84 bytes, Stack size 4 btyes, ble_controller_rf_phy_driver.o(.text.rf_tpCal_gen_cap_arrary))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = rf_tpCal_gen_cap_arrary &rArr; rf_tp_cal </ul>
<br>[Calls]<ul>
<li><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tp_cal
</ul>
<br>[Called By]<ul>
<li><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_calibrate1
</ul>
<p><strong><a name="[897]"></a>gen_pn_prbs9</strong>(216 bytes, Stack size 0 btyes, ble_controller_rf_phy_driver.o(.text.gen_pn_prbs9))<br>
<p><strong><a name="[898]"></a>rf_phy_dtm_ble_pkt_gen</strong>(152 bytes, Stack size 0 btyes, ble_controller_rf_phy_driver.o(.text.rf_phy_dtm_ble_pkt_gen))<br>
<p><strong><a name="[899]"></a>rf_phy_dtm_trigged</strong>(868 bytes, Stack size 0 btyes, ble_controller_rf_phy_driver.o(.text.rf_phy_dtm_trigged))<br>
<p><strong><a name="[89a]"></a>rf_phy_direct_test</strong>(856 bytes, Stack size 0 btyes, ble_controller_rf_phy_driver.o(.text.rf_phy_direct_test))<br>
<p><strong><a name="[89b]"></a>rf_phy_dtm_ext_tx_singleTone</strong>(104 bytes, Stack size 0 btyes, ble_controller_rf_phy_driver.o(.text.rf_phy_dtm_ext_tx_singleTone))<br>
<p><strong><a name="[89c]"></a>rf_phy_dtm_ext_tx_modulation</strong>(120 bytes, Stack size 0 btyes, ble_controller_rf_phy_driver.o(.text.rf_phy_dtm_ext_tx_modulation))<br>
<p><strong><a name="[89d]"></a>rf_phy_dtm_ext_tx_mod_burst</strong>(252 bytes, Stack size 0 btyes, ble_controller_rf_phy_driver.o(.text.rf_phy_dtm_ext_tx_mod_burst))<br>
<p><strong><a name="[89e]"></a>rf_phy_dtm_ext_rx_demod_burst</strong>(476 bytes, Stack size 0 btyes, ble_controller_rf_phy_driver.o(.text.rf_phy_dtm_ext_rx_demod_burst))<br>
<p><strong><a name="[89f]"></a>LL_ExtAdvReportCback1</strong>(2 bytes, Stack size 0 btyes, hci_uart_h5.o(.text.LL_ExtAdvReportCback1))<br>
<p><strong><a name="[8a0]"></a>LL_AdvSetTerminatedCback1</strong>(2 bytes, Stack size 0 btyes, hci_uart_h5.o(.text.LL_AdvSetTerminatedCback1))<br>
<p><strong><a name="[8a1]"></a>LL_ChannelSelectionAlgorithmCback</strong>(132 bytes, Stack size 16 btyes, ble_controller_hci_event_patch.o(.text.LL_ChannelSelectionAlgorithmCback))<br>
<br>[Called By]<ul>
<li><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessEvent1
</ul>
<p><strong><a name="[8a2]"></a>LL_PrdAdvSyncEstablishedCback1</strong>(2 bytes, Stack size 0 btyes, hci_uart_h5.o(.text.LL_PrdAdvSyncEstablishedCback1))<br>
<p><strong><a name="[8a3]"></a>LL_PrdAdvReportCback1</strong>(2 bytes, Stack size 0 btyes, hci_uart_h5.o(.text.LL_PrdAdvReportCback1))<br>
<p><strong><a name="[8a4]"></a>_symrom_LL_PrdAdvSyncLostCback</strong>(128 bytes, Stack size 0 btyes, ble_controller_hci_event_patch.o(.text._symrom_LL_PrdAdvSyncLostCback))<br>
<p><strong><a name="[8a5]"></a>LL_EnhConnectionCompleteCback</strong>(392 bytes, Stack size 56 btyes, ble_controller_hci_event_patch.o(.text.LL_EnhConnectionCompleteCback))<br>
<br>[Called By]<ul>
<li><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessEvent1
</ul>
<p><strong><a name="[8a6]"></a>LL_DirectAdvReportCback</strong>(2 bytes, Stack size 0 btyes, ble_controller_hci_event_patch.o(.text.LL_DirectAdvReportCback))<br>
<p><strong><a name="[8a7]"></a>LL_ScanRequestRecvCback</strong>(176 bytes, Stack size 0 btyes, ble_controller_hci_event_patch.o(.text.LL_ScanRequestRecvCback))<br>
<p><strong><a name="[8a8]"></a>LL_ScanTimeoutCback</strong>(136 bytes, Stack size 0 btyes, ble_controller_hci_event_patch.o(.text.LL_ScanTimeoutCback))<br>
<p><strong><a name="[8a9]"></a>isEnhConnCmpEvtSupport</strong>(16 bytes, Stack size 0 btyes, ble_controller_hci_event_patch.o(.text.isEnhConnCmpEvtSupport))<br>
<br>[Called By]<ul>
<li><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ProcessEvent1
</ul>
<p><strong><a name="[250]"></a>prng_init</strong>(4 bytes, Stack size 0 btyes, bt_crypto.o(.text.prng_init))<br>
<p><strong><a name="[251]"></a>bt_crypto_rand</strong>(80 bytes, Stack size 24 btyes, bt_crypto.o(.text.bt_crypto_rand))<br>
<br>[Stack]<ul><li>Max Depth = 120 
<li>Call Chain = bt_crypto_rand &rArr; hci_api_le_rand &rArr; TRNG_Rand  &rArr; TRNG_INIT  &rArr; TRNG_Output  </ul>
<br>[Calls]<ul>
<li><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_api_le_rand
</ul>
<br>[Called By]<ul>
<li><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rand
</ul>
<p><strong><a name="[252]"></a>bt_crypto_encrypt_le</strong>(88 bytes, Stack size 0 btyes, bt_crypto.o(.text.bt_crypto_encrypt_le))<br>
<p><strong><a name="[253]"></a>bt_crypto_encrypt_be</strong>(44 bytes, Stack size 0 btyes, bt_crypto.o(.text.bt_crypto_encrypt_be))<br>
<p><strong><a name="[255]"></a>bt_crypto_cmac_setup</strong>(124 bytes, Stack size 0 btyes, bt_crypto.o(.text.bt_crypto_cmac_setup))<br>
<p><strong><a name="[256]"></a>bt_crypto_cmac_update</strong>(216 bytes, Stack size 0 btyes, bt_crypto.o(.text.bt_crypto_cmac_update))<br>
<p><strong><a name="[257]"></a>bt_crypto_cmac_finish</strong>(114 bytes, Stack size 0 btyes, bt_crypto.o(.text.bt_crypto_cmac_finish))<br>
<p><strong><a name="[258]"></a>bt_crypto_aes_cmac</strong>(70 bytes, Stack size 0 btyes, bt_crypto.o(.text.bt_crypto_aes_cmac))<br>
<p><strong><a name="[8c8]"></a>rtk_unrel_is_high_level</strong>(20 bytes, Stack size 4 btyes, h5.o(.text.rtk_unrel_is_high_level))<br>
<br>[Calls]<ul>
<li><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbGetQueueLen
</ul>
<br>[Called By]<ul>
<li><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciProcessCtrlToHost
</ul>
<p><strong><a name="[8c9]"></a>hci_h5_receive_msg</strong>(664 bytes, Stack size 40 btyes, h5.o(.text.hci_h5_receive_msg))<br>
<br>[Stack]<ul><li>Max Depth = 272 
<li>Call Chain = hci_h5_receive_msg &rArr; h5_complete_rx_pkt.constprop.11 &rArr; hci_h5_send_sync_resp  &rArr; h5_wake_up  &rArr; OsStartTimer  &rArr; aos_timer_change  &rArr; krhino_timer_change  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_free
<li><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_get_data
<li><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_put
<li><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_crc_update
<li><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___gnu_csky_case_uqi
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wake_up
<li><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_get_data_length
<li><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_trim
<li><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_complete_rx_pkt.constprop.11
<li><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_alloc
</ul>
<br>[Called By]<ul>
<li><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_uart_loop
</ul>
<p><strong><a name="[8ca]"></a>get_h5_controller_interface</strong>(8 bytes, Stack size 0 btyes, h5.o(.text.get_h5_controller_interface))<br>
<br>[Called By]<ul>
<li><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_board_init
<li><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_H5_Send
</ul>
<p><strong><a name="[40e]"></a>hci_api_le_set_bdaddr</strong>(48 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_set_bdaddr))<br>
<p><strong><a name="[4b9]"></a>bt_set_bdaddr</strong>(10 bytes, Stack size 0 btyes, hci_api.o(.text.bt_set_bdaddr))<br>
<p><strong><a name="[40f]"></a>hci_api_reset</strong>(16 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_reset))<br>
<p><strong><a name="[410]"></a>hci_api_read_local_feature</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_read_local_feature))<br>
<p><strong><a name="[411]"></a>hci_api_read_local_version_info</strong>(34 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_read_local_version_info))<br>
<p><strong><a name="[412]"></a>hci_api_read_bdaddr</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_read_bdaddr))<br>
<p><strong><a name="[8cb]"></a>HCI_LL_ReadLocalSupportedCommandsCmd</strong>(20 bytes, Stack size 0 btyes, hci_api.o(.text.HCI_LL_ReadLocalSupportedCommandsCmd))<br>
<p><strong><a name="[413]"></a>hci_api_read_local_support_command</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_read_local_support_command))<br>
<p><strong><a name="[414]"></a>hci_api_set_host_buffer_size</strong>(12 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_set_host_buffer_size))<br>
<p><strong><a name="[415]"></a>hci_api_set_host_flow_enable</strong>(20 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_set_host_flow_enable))<br>
<p><strong><a name="[8cd]"></a>HCI_LE_LL_ReadMaxDataLengthCmd</strong>(42 bytes, Stack size 0 btyes, hci_api.o(.text.HCI_LE_LL_ReadMaxDataLengthCmd))<br>
<p><strong><a name="[8ce]"></a>HCI_LL_ReadLocalSupportedFeaturesCmd</strong>(20 bytes, Stack size 0 btyes, hci_api.o(.text.HCI_LL_ReadLocalSupportedFeaturesCmd))<br>
<p><strong><a name="[408]"></a>hci_api_le_scan_enable</strong>(30 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_scan_enable))<br>
<p><strong><a name="[409]"></a>hci_api_le_scan_param_set</strong>(18 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_scan_param_set))<br>
<p><strong><a name="[40a]"></a>hci_api_le_get_max_data_len</strong>(26 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_get_max_data_len))<br>
<p><strong><a name="[40b]"></a>hci_api_le_get_default_data_len</strong>(6 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_get_default_data_len))<br>
<p><strong><a name="[40c]"></a>hci_api_le_set_default_data_len</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_set_default_data_len))<br>
<p><strong><a name="[40d]"></a>hci_api_le_set_data_len</strong>(10 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_set_data_len))<br>
<p><strong><a name="[416]"></a>hci_api_le_read_local_feature</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_read_local_feature))<br>
<p><strong><a name="[418]"></a>hci_api_le_read_support_states</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_read_support_states))<br>
<p><strong><a name="[422]"></a>hci_api_le_read_rl_size</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_read_rl_size))<br>
<p><strong><a name="[423]"></a>hci_api_le_set_event_mask</strong>(12 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_set_event_mask))<br>
<p><strong><a name="[424]"></a>hci_api_set_event_mask</strong>(28 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_set_event_mask))<br>
<p><strong><a name="[42b]"></a>hci_api_vs_init</strong>(4 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_vs_init))<br>
<p><strong><a name="[42c]"></a>hci_api_le_adv_enable</strong>(84 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_adv_enable))<br>
<p><strong><a name="[42d]"></a>hci_api_le_adv_param</strong>(160 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_adv_param))<br>
<p><strong><a name="[42e]"></a>hci_api_le_set_random_addr</strong>(32 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_set_random_addr))<br>
<p><strong><a name="[443]"></a>hci_api_le_set_addr_res_enable</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_set_addr_res_enable))<br>
<p><strong><a name="[444]"></a>hci_api_le_set_privacy_mode</strong>(6 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_set_privacy_mode))<br>
<p><strong><a name="[425]"></a>hci_api_num_complete_packets</strong>(34 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_num_complete_packets))<br>
<p><strong><a name="[447]"></a>hci_api_read_buffer_size</strong>(6 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_read_buffer_size))<br>
<p><strong><a name="[448]"></a>hci_api_le_write_host_supp</strong>(6 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_write_host_supp))<br>
<p><strong><a name="[427]"></a>hci_api_white_list_size</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_white_list_size))<br>
<p><strong><a name="[428]"></a>hci_api_white_list_add</strong>(14 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_white_list_add))<br>
<p><strong><a name="[429]"></a>hci_api_white_list_remove</strong>(14 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_white_list_remove))<br>
<p><strong><a name="[42a]"></a>hci_api_white_list_clear</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_white_list_clear))<br>
<p><strong><a name="[44a]"></a>hci_api_init</strong>(4 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_init))<br>
<p><strong><a name="[451]"></a>hci_api_le_rpa_timeout_set</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_rpa_timeout_set))<br>
<p><strong><a name="[42f]"></a>hci_api_le_set_ad_data</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_set_ad_data))<br>
<p><strong><a name="[430]"></a>hci_api_le_set_sd_data</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_set_sd_data))<br>
<p><strong><a name="[431]"></a>hci_api_le_create_conn</strong>(102 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_create_conn))<br>
<p><strong><a name="[432]"></a>hci_api_le_create_conn_cancel</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_create_conn_cancel))<br>
<p><strong><a name="[433]"></a>hci_api_le_disconnect</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_disconnect))<br>
<p><strong><a name="[434]"></a>hci_api_le_read_remote_features</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_read_remote_features))<br>
<p><strong><a name="[436]"></a>hci_api_host_num_complete_packets</strong>(10 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_host_num_complete_packets))<br>
<p><strong><a name="[437]"></a>hci_api_le_conn_updata</strong>(64 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_conn_updata))<br>
<p><strong><a name="[438]"></a>hci_api_le_start_encrypt</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_start_encrypt))<br>
<p><strong><a name="[439]"></a>hci_api_le_enctypt_ltk_req_reply</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_enctypt_ltk_req_reply))<br>
<p><strong><a name="[43a]"></a>hci_api_le_enctypt_ltk_req_neg_reply</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_enctypt_ltk_req_neg_reply))<br>
<p><strong><a name="[43b]"></a>hci_api_le_rand</strong>(30 bytes, Stack size 12 btyes, hci_api.o(.text.hci_api_le_rand))<br>
<br>[Stack]<ul><li>Max Depth = 96 
<li>Call Chain = hci_api_le_rand &rArr; TRNG_Rand &rArr; TRNG_INIT  &rArr; TRNG_Output  </ul>
<br>[Calls]<ul>
<li><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_lock
<li><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TRNG_Rand
<li><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_crypto_rand
</ul>
<p><strong><a name="[43c]"></a>hci_api_le_enc</strong>(36 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_enc))<br>
<p><strong><a name="[43d]"></a>hci_api_le_set_phy</strong>(18 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_set_phy))<br>
<p><strong><a name="[43e]"></a>hci_api_le_conn_param_req_reply</strong>(6 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_conn_param_req_reply))<br>
<p><strong><a name="[43f]"></a>hci_api_le_conn_param_neg_reply</strong>(6 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_conn_param_neg_reply))<br>
<p><strong><a name="[440]"></a>hci_api_le_add_dev_to_rl</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_add_dev_to_rl))<br>
<p><strong><a name="[441]"></a>hci_api_le_remove_dev_from_rl</strong>(14 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_remove_dev_from_rl))<br>
<p><strong><a name="[442]"></a>hci_api_le_clear_rl</strong>(8 bytes, Stack size 0 btyes, hci_api.o(.text.hci_api_le_clear_rl))<br>
<p><strong><a name="[8cf]"></a>hciLESetPrivacyMode</strong>(4 bytes, Stack size 0 btyes, hci_tl.o(.text.hciLESetPrivacyMode))<br>
<p><strong><a name="[8d1]"></a>hciDisconnect</strong>(20 bytes, Stack size 4 btyes, hci_tl.o(.text.hciDisconnect))<br>
<p><strong><a name="[8d2]"></a>hciReadRemoteVersionInfo</strong>(18 bytes, Stack size 4 btyes, hci_tl.o(.text.hciReadRemoteVersionInfo))<br>
<p><strong><a name="[8d3]"></a>hciSetEventMask</strong>(8 bytes, Stack size 4 btyes, hci_tl.o(.text.hciSetEventMask))<br>
<p><strong><a name="[8d4]"></a>hciReset</strong>(18 bytes, Stack size 8 btyes, hci_tl.o(.text.hciReset))<br>
<p><strong><a name="[8d5]"></a>hciReadTransmitPowerLevel</strong>(20 bytes, Stack size 4 btyes, hci_tl.o(.text.hciReadTransmitPowerLevel))<br>
<p><strong><a name="[8d6]"></a>hciSetControllerToHostFlowCtrl</strong>(10 bytes, Stack size 4 btyes, hci_tl.o(.text.hciSetControllerToHostFlowCtrl))<br>
<p><strong><a name="[8d7]"></a>hciHostBufferSize</strong>(40 bytes, Stack size 8 btyes, hci_tl.o(.text.hciHostBufferSize))<br>
<p><strong><a name="[8d8]"></a>hciLEReadPhyMode</strong>(18 bytes, Stack size 0 btyes, hci_tl.o(.text.hciLEReadPhyMode))<br>
<p><strong><a name="[8d9]"></a>hciLESetDefaultPhyMode</strong>(16 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLESetDefaultPhyMode))<br>
<p><strong><a name="[8da]"></a>hciLESetPhyMode</strong>(42 bytes, Stack size 16 btyes, hci_tl.o(.text.hciLESetPhyMode))<br>
<p><strong><a name="[8db]"></a>hciLEAddDeviceToRL</strong>(18 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLEAddDeviceToRL))<br>
<p><strong><a name="[8dc]"></a>hciLERemoveDeviceFromRL</strong>(12 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLERemoveDeviceFromRL))<br>
<p><strong><a name="[8dd]"></a>hciLEClearRL</strong>(8 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLEClearRL))<br>
<p><strong><a name="[8de]"></a>hciLEReadRLSize</strong>(8 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLEReadRLSize))<br>
<p><strong><a name="[8df]"></a>hciLESetAddrResolutionEnable</strong>(10 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLESetAddrResolutionEnable))<br>
<p><strong><a name="[8e0]"></a>hciLEReadWhiteListSize</strong>(8 bytes, Stack size 0 btyes, hci_tl.o(.text.hciLEReadWhiteListSize))<br>
<p><strong><a name="[8e1]"></a>hciLEClearWhiteList</strong>(8 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLEClearWhiteList))<br>
<p><strong><a name="[8e2]"></a>hciLEAddWhiteList</strong>(12 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLEAddWhiteList))<br>
<p><strong><a name="[8e3]"></a>hciLERemoveWhiteList</strong>(12 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLERemoveWhiteList))<br>
<p><strong><a name="[8e4]"></a>hciLEConnUpdate</strong>(148 bytes, Stack size 32 btyes, hci_tl.o(.text.hciLEConnUpdate))<br>
<p><strong><a name="[8e5]"></a>hciLESetHostChanClass</strong>(8 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLESetHostChanClass))<br>
<p><strong><a name="[8e6]"></a>hciLEReadChanMap</strong>(18 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLEReadChanMap))<br>
<p><strong><a name="[8e7]"></a>hciLEReadRemoteUsedFeatures</strong>(18 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLEReadRemoteUsedFeatures))<br>
<p><strong><a name="[8e8]"></a>hciLEEncrypt</strong>(32 bytes, Stack size 12 btyes, hci_tl.o(.text.hciLEEncrypt))<br>
<p><strong><a name="[8e9]"></a>hciHostNumCompletedPkt</strong>(44 bytes, Stack size 8 btyes, hci_tl.o(.text.hciHostNumCompletedPkt))<br>
<p><strong><a name="[8ea]"></a>hciReadLocalSupportedCommands</strong>(8 bytes, Stack size 4 btyes, hci_tl.o(.text.hciReadLocalSupportedCommands))<br>
<p><strong><a name="[8eb]"></a>hciReadLocalSupportedFeatures</strong>(8 bytes, Stack size 4 btyes, hci_tl.o(.text.hciReadLocalSupportedFeatures))<br>
<p><strong><a name="[8ec]"></a>hciReadRssi</strong>(18 bytes, Stack size 4 btyes, hci_tl.o(.text.hciReadRssi))<br>
<p><strong><a name="[8ed]"></a>hciLEReadLocalSupportedFeatures</strong>(8 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLEReadLocalSupportedFeatures))<br>
<p><strong><a name="[8ee]"></a>hciLESetRandomAddr</strong>(8 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLESetRandomAddr))<br>
<p><strong><a name="[8ef]"></a>hciLESetScanRspData</strong>(12 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLESetScanRspData))<br>
<p><strong><a name="[8f0]"></a>hciLEReadAdvChanTxPower</strong>(8 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLEReadAdvChanTxPower))<br>
<p><strong><a name="[8f1]"></a>hciLESetScanParam</strong>(42 bytes, Stack size 12 btyes, hci_tl.o(.text.hciLESetScanParam))<br>
<p><strong><a name="[8f2]"></a>hciLECreateConnCancel</strong>(20 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLECreateConnCancel))<br>
<br>[Calls]<ul>
<li><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</ul>
<p><strong><a name="[8f3]"></a>hciLERand</strong>(8 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLERand))<br>
<p><strong><a name="[8f4]"></a>hciLEStartEncrypt</strong>(28 bytes, Stack size 8 btyes, hci_tl.o(.text.hciLEStartEncrypt))<br>
<p><strong><a name="[8f5]"></a>hciLELtkReqReply</strong>(20 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLELtkReqReply))<br>
<p><strong><a name="[8f6]"></a>hciLELtkReqNegReply</strong>(18 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLELtkReqNegReply))<br>
<p><strong><a name="[8f7]"></a>hciLEReadSupportedStates</strong>(8 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLEReadSupportedStates))<br>
<p><strong><a name="[8f8]"></a>hciLEReceiverTest</strong>(10 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLEReceiverTest))<br>
<p><strong><a name="[8f9]"></a>hciLETransmitterTest</strong>(14 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLETransmitterTest))<br>
<p><strong><a name="[8fa]"></a>hciLETestEnd</strong>(8 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLETestEnd))<br>
<p><strong><a name="[8fb]"></a>hciLESetDataLength</strong>(38 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLESetDataLength))<br>
<p><strong><a name="[8fc]"></a>hciLEReadSuggestedDefaultDataLength</strong>(8 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLEReadSuggestedDefaultDataLength))<br>
<p><strong><a name="[8fd]"></a>hciLEWriteSuggestedDefaultDataLength</strong>(28 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLEWriteSuggestedDefaultDataLength))<br>
<p><strong><a name="[8fe]"></a>hciLESetRpaTo</strong>(18 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLESetRpaTo))<br>
<p><strong><a name="[8ff]"></a>hciLESetAdvSetRandomAddress</strong>(12 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLESetAdvSetRandomAddress))<br>
<p><strong><a name="[900]"></a>hciLESetExtAdvParam</strong>(102 bytes, Stack size 56 btyes, hci_tl.o(.text.hciLESetExtAdvParam))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = hciLESetExtAdvParam &rArr; HCI_LE_SetExtAdvParamCmd &rArr; LL_SetExtAdvParam  </ul>
<br>[Calls]<ul>
<li><a href="#[870]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetExtAdvParamCmd
</ul>
<p><strong><a name="[901]"></a>hciLESetExtAdvData</strong>(26 bytes, Stack size 16 btyes, hci_tl.o(.text.hciLESetExtAdvData))<br>
<br>[Stack]<ul><li>Max Depth = 68 
<li>Call Chain = hciLESetExtAdvData &rArr; HCI_LE_SetExtAdvDataCmd &rArr; LL_SetExtAdvData  </ul>
<br>[Calls]<ul>
<li><a href="#[872]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetExtAdvDataCmd
</ul>
<p><strong><a name="[902]"></a>hciLESetExtScanRspData</strong>(26 bytes, Stack size 16 btyes, hci_tl.o(.text.hciLESetExtScanRspData))<br>
<br>[Stack]<ul><li>Max Depth = 60 
<li>Call Chain = hciLESetExtScanRspData &rArr; HCI_LE_SetExtScanRspDataCmd &rArr; LL_SetExtScanRspData  </ul>
<br>[Calls]<ul>
<li><a href="#[883]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetExtScanRspDataCmd
</ul>
<p><strong><a name="[903]"></a>hciLEReadMaximumAdvDataLength</strong>(8 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLEReadMaximumAdvDataLength))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = hciLEReadMaximumAdvDataLength &rArr; HCI_LE_ReadMaximumAdvDataLengthCmd </ul>
<br>[Calls]<ul>
<li><a href="#[876]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ReadMaximumAdvDataLengthCmd
</ul>
<p><strong><a name="[904]"></a>hciLEReadNumberOfSupportAdvSet</strong>(8 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLEReadNumberOfSupportAdvSet))<br>
<p><strong><a name="[905]"></a>hciLERemoveAdvSet</strong>(10 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLERemoveAdvSet))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = hciLERemoveAdvSet &rArr; HCI_LE_RemoveAdvSetCmd &rArr; LL_RemoveAdvSet  </ul>
<br>[Calls]<ul>
<li><a href="#[878]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_RemoveAdvSetCmd
</ul>
<p><strong><a name="[906]"></a>hciLEClearAdvSets</strong>(8 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLEClearAdvSets))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = hciLEClearAdvSets &rArr; HCI_LE_ClearAdvSetsCmd &rArr; LL_ClearAdvSets  </ul>
<br>[Calls]<ul>
<li><a href="#[87a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ClearAdvSetsCmd
</ul>
<p><strong><a name="[907]"></a>hciLESetPeriodicAdvParameter</strong>(40 bytes, Stack size 8 btyes, hci_tl.o(.text.hciLESetPeriodicAdvParameter))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = hciLESetPeriodicAdvParameter &rArr; HCI_LE_SetPeriodicAdvParameterCmd &rArr; LL_SetPeriodicAdvParameter  </ul>
<br>[Calls]<ul>
<li><a href="#[87d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetPeriodicAdvParameterCmd
</ul>
<p><strong><a name="[908]"></a>hciLESetPeriodicAdvData</strong>(16 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLESetPeriodicAdvData))<br>
<p><strong><a name="[909]"></a>hciLESetPeriodicAdvEnable</strong>(12 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLESetPeriodicAdvEnable))<br>
<br>[Stack]<ul><li>Max Depth = 68 
<li>Call Chain = hciLESetPeriodicAdvEnable &rArr; HCI_LE_SetPeriodicAdvEnableCmd &rArr; LL_SetPeriodicAdvEnable  &rArr; ll_allocAuxAdvTimeSlot_prd  </ul>
<br>[Calls]<ul>
<li><a href="#[881]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetPeriodicAdvEnableCmd
</ul>
<p><strong><a name="[90a]"></a>hciLESetExtendedScanParameters</strong>(106 bytes, Stack size 28 btyes, hci_tl.o(.text.hciLESetExtendedScanParameters))<br>
<p><strong><a name="[90b]"></a>hciLEExtendedCreateConnection</strong>(202 bytes, Stack size 120 btyes, hci_tl.o(.text.hciLEExtendedCreateConnection))<br>
<p><strong><a name="[90c]"></a>hciLEPeriodicAdvertisingCreateSync</strong>(50 bytes, Stack size 28 btyes, hci_tl.o(.text.hciLEPeriodicAdvertisingCreateSync))<br>
<p><strong><a name="[90d]"></a>hciLEPeriodicAdvertisingCreateSyncCancel</strong>(8 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLEPeriodicAdvertisingCreateSyncCancel))<br>
<p><strong><a name="[90e]"></a>hciLEPeriodicAdvertisingTerminateSync</strong>(18 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLEPeriodicAdvertisingTerminateSync))<br>
<p><strong><a name="[90f]"></a>hciLEReadMaxDataLength</strong>(8 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLEReadMaxDataLength))<br>
<p><strong><a name="[910]"></a>hciReadBDADDR</strong>(8 bytes, Stack size 4 btyes, hci_tl.o(.text.hciReadBDADDR))<br>
<p><strong><a name="[915]"></a>hciLESet_ConnectionCTE_ReceiveParam</strong>(4 bytes, Stack size 0 btyes, hci_tl.o(.text.hciLESet_ConnectionCTE_ReceiveParam))<br>
<p><strong><a name="[916]"></a>hciLE_ConnectionCTERequestEnable</strong>(4 bytes, Stack size 0 btyes, hci_tl.o(.text.hciLE_ConnectionCTERequestEnable))<br>
<p><strong><a name="[917]"></a>hciLEReadPeerRA</strong>(4 bytes, Stack size 0 btyes, hci_tl.o(.text.hciLEReadPeerRA))<br>
<p><strong><a name="[918]"></a>hciLEAddDevToPeriodicAdvList</strong>(4 bytes, Stack size 0 btyes, hci_tl.o(.text.hciLEAddDevToPeriodicAdvList))<br>
<p><strong><a name="[919]"></a>hciLERemovePeriodicAdvList</strong>(4 bytes, Stack size 0 btyes, hci_tl.o(.text.hciLERemovePeriodicAdvList))<br>
<p><strong><a name="[91a]"></a>hciLEClearPeriodicAdvList</strong>(4 bytes, Stack size 0 btyes, hci_tl.o(.text.hciLEClearPeriodicAdvList))<br>
<p><strong><a name="[91b]"></a>hciLEReadPeriodicAdvListSize</strong>(4 bytes, Stack size 0 btyes, hci_tl.o(.text.hciLEReadPeriodicAdvListSize))<br>
<p><strong><a name="[91c]"></a>hciLEReadTransmitPower</strong>(4 bytes, Stack size 0 btyes, hci_tl.o(.text.hciLEReadTransmitPower))<br>
<p><strong><a name="[91d]"></a>hciLEReadRfPathCompensation</strong>(4 bytes, Stack size 0 btyes, hci_tl.o(.text.hciLEReadRfPathCompensation))<br>
<p><strong><a name="[91e]"></a>hciLEWriteRfPathCompensation</strong>(4 bytes, Stack size 0 btyes, hci_tl.o(.text.hciLEWriteRfPathCompensation))<br>
<p><strong><a name="[91f]"></a>HCI_UART_GetMaxTxBufSize</strong>(6 bytes, Stack size 0 btyes, hci_tl.o(.text.HCI_UART_GetMaxTxBufSize))<br>
<p><strong><a name="[920]"></a>HCI_LL_SetScanControl</strong>(52 bytes, Stack size 0 btyes, hci_tl.o(.text.HCI_LL_SetScanControl))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = HCI_LL_SetScanControl &rArr; wait_llWaitingIrq </ul>
<br>[Calls]<ul>
<li><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_llWaitingIrq
</ul>
<br>[Called By]<ul>
<li><a href="#[921]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_scan_schd_scan_exit
<li><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_scan_schd_adv_scan_exit
<li><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_scan_schd_scan_enter
<li><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_scan_timer
</ul>
<p><strong><a name="[922]"></a>HCI_LL_SetAdvControl</strong>(104 bytes, Stack size 16 btyes, hci_tl.o(.text.HCI_LL_SetAdvControl))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = HCI_LL_SetAdvControl &rArr; wait_llWaitingIrq </ul>
<br>[Calls]<ul>
<li><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_llWaitingIrq
</ul>
<br>[Called By]<ul>
<li><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_scan_schd_adv_scan_exit
<li><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_scan_timer
</ul>
<p><strong><a name="[924]"></a>HCI_LE_SetExtendedScanEnableCmd1</strong>(44 bytes, Stack size 20 btyes, hci_tl.o(.text.HCI_LE_SetExtendedScanEnableCmd1))<br>
<br>[Stack]<ul><li>Max Depth = 44 
<li>Call Chain = HCI_LE_SetExtendedScanEnableCmd1 &rArr; LL_SetExtendedScanEnable &rArr; llSetupExtScan1  &rArr; rf_phy_change_cfg0  </ul>
<br>[Calls]<ul>
<li><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_llWaitingIrq
<li><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetExtendedScanEnable
</ul>
<br>[Called By]<ul>
<li><a href="#[926]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_scan_schd_scan_enter
<li><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_scan_timer
</ul>
<p><strong><a name="[925]"></a>hciLESetExtendedScanEnableCmd1</strong>(32 bytes, Stack size 0 btyes, hci_tl.o(.text.hciLESetExtendedScanEnableCmd1))<br>
<p><strong><a name="[927]"></a>adv_scan_timer</strong>(520 bytes, Stack size 44 btyes, hci_tl.o(.text.adv_scan_timer))<br>
<br>[Stack]<ul><li>Max Depth = 700 
<li>Call Chain = adv_scan_timer &rArr; hciLESetExtAdvEnable1 &rArr; LL_SetExtAdvEnable  &rArr; LL_SetExtAdvEnable.part.8  </ul>
<br>[Calls]<ul>
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_lock
<li><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetExtendedScanEnable
<li><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetExtAdvEnable1
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog
<li><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_unlock
<li><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_start
<li><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LL_SetScanControl
<li><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LL_SetAdvControl
<li><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_rand
<li><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__umodsi3
<li><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetExtendedScanEnableCmd1
</ul>
<p><strong><a name="[928]"></a>bt_mesh_adv_scan_schd</strong>(68 bytes, Stack size 16 btyes, hci_tl.o(.text.bt_mesh_adv_scan_schd))<br>
<br>[Called By]<ul>
<li><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_scan_schd_action
</ul>
<p><strong><a name="[929]"></a>bt_mesh_adv_scan_schd_action</strong>(128 bytes, Stack size 44 btyes, hci_tl.o(.text.bt_mesh_adv_scan_schd_action))<br>
<br>[Stack]<ul><li>Max Depth = 164 
<li>Call Chain = bt_mesh_adv_scan_schd_action &rArr; ulog &rArr; log_get_mutex  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_lock
<li><a href="#[928]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_scan_schd
<li><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_unlock
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog
</ul>
<br>[Called By]<ul>
<li><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetExtAdvEnable
<li><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetExtendedScanEnableCmd
<li><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_enable
<li><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_disable
<li><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_enable
<li><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_disable
</ul>
<p><strong><a name="[92a]"></a>hciLESetExtAdvEnable</strong>(140 bytes, Stack size 24 btyes, hci_tl.o(.text.hciLESetExtAdvEnable))<br>
<br>[Stack]<ul><li>Max Depth = 188 
<li>Call Chain = hciLESetExtAdvEnable &rArr; bt_mesh_adv_scan_schd_action &rArr; ulog  &rArr; log_get_mutex  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_lock
<li><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_unlock
<li><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_scan_schd_action
<li><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteEvent1
</ul>
<p><strong><a name="[92b]"></a>hciLESetExtendedScanEnableCmd</strong>(136 bytes, Stack size 16 btyes, hci_tl.o(.text.hciLESetExtendedScanEnableCmd))<br>
<br>[Stack]<ul><li>Max Depth = 180 
<li>Call Chain = hciLESetExtendedScanEnableCmd &rArr; bt_mesh_adv_scan_schd_action &rArr; ulog  &rArr; log_get_mutex  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_lock
<li><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_unlock
<li><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_scan_schd_action
<li><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteEvent1
</ul>
<p><strong><a name="[92c]"></a>bt_mesh_adv_scan_schd_init</strong>(44 bytes, Stack size 8 btyes, hci_tl.o(.text.bt_mesh_adv_scan_schd_init))<br>
<br>[Stack]<ul><li>Max Depth = 152 
<li>Call Chain = bt_mesh_adv_scan_schd_init &rArr; k_timer_init &rArr; krhino_timer_create  &rArr; krhino_timer_start  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_init
<li><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_init
</ul>
<br>[Called By]<ul>
<li><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_board_init
</ul>
<p><strong><a name="[92d]"></a>bt_mesh_adv_enable</strong>(56 bytes, Stack size 8 btyes, hci_tl.o(.text.bt_mesh_adv_enable))<br>
<br>[Stack]<ul><li>Max Depth = 172 
<li>Call Chain = bt_mesh_adv_enable &rArr; bt_mesh_adv_scan_schd_action &rArr; ulog  &rArr; log_get_mutex  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_lock
<li><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_unlock
<li><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_scan_schd_action
</ul>
<br>[Called By]<ul>
<li><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetAdvEnab
</ul>
<p><strong><a name="[92e]"></a>bt_mesh_adv_disable</strong>(56 bytes, Stack size 8 btyes, hci_tl.o(.text.bt_mesh_adv_disable))<br>
<br>[Stack]<ul><li>Max Depth = 172 
<li>Call Chain = bt_mesh_adv_disable &rArr; bt_mesh_adv_scan_schd_action &rArr; ulog  &rArr; log_get_mutex  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_lock
<li><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_unlock
<li><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_scan_schd_action
</ul>
<br>[Called By]<ul>
<li><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetAdvEnab
</ul>
<p><strong><a name="[92f]"></a>hciLESetAdvEnab</strong>(100 bytes, Stack size 12 btyes, hci_tl.o(.text.hciLESetAdvEnab))<br>
<br>[Stack]<ul><li>Max Depth = 184 
<li>Call Chain = hciLESetAdvEnab &rArr; bt_mesh_adv_enable &rArr; bt_mesh_adv_scan_schd_action  &rArr; ulog  &rArr; log_get_mutex  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteEvent1
<li><a href="#[92d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_enable
<li><a href="#[92e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_disable
</ul>
<p><strong><a name="[930]"></a>bt_mesh_scan_enable</strong>(56 bytes, Stack size 12 btyes, hci_tl.o(.text.bt_mesh_scan_enable))<br>
<br>[Stack]<ul><li>Max Depth = 176 
<li>Call Chain = bt_mesh_scan_enable &rArr; bt_mesh_adv_scan_schd_action &rArr; ulog  &rArr; log_get_mutex  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_lock
<li><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_unlock
<li><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_scan_schd_action
</ul>
<br>[Called By]<ul>
<li><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetScanEnable
</ul>
<p><strong><a name="[931]"></a>bt_mesh_scan_disable</strong>(48 bytes, Stack size 8 btyes, hci_tl.o(.text.bt_mesh_scan_disable))<br>
<br>[Stack]<ul><li>Max Depth = 172 
<li>Call Chain = bt_mesh_scan_disable &rArr; bt_mesh_adv_scan_schd_action &rArr; ulog  &rArr; log_get_mutex  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_lock
<li><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_unlock
<li><a href="#[929]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_scan_schd_action
</ul>
<br>[Called By]<ul>
<li><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetScanEnable
</ul>
<p><strong><a name="[932]"></a>hciLESetScanEnable</strong>(104 bytes, Stack size 12 btyes, hci_tl.o(.text.hciLESetScanEnable))<br>
<br>[Stack]<ul><li>Max Depth = 188 
<li>Call Chain = hciLESetScanEnable &rArr; bt_mesh_scan_enable &rArr; bt_mesh_adv_scan_schd_action  &rArr; ulog  &rArr; log_get_mutex  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteEvent1
<li><a href="#[930]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_enable
<li><a href="#[931]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_scan_disable
</ul>
<p><strong><a name="[933]"></a>hciProcessHostToCtrlVendorCmd_RAW</strong>(92 bytes, Stack size 0 btyes, hci_tl.o(.text.hciProcessHostToCtrlVendorCmd_RAW))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = hciProcessHostToCtrlVendorCmd_RAW &rArr; HCI_CommandCompleteEvent1 &rArr; HCI_H5_Send  </ul>
<br>[Calls]<ul>
<li><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteEvent1
</ul>
<br>[Called By]<ul>
<li><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_H5_RecvCallback
</ul>
<p><strong><a name="[934]"></a>hciProcessHostToCtrlCmd_RAW</strong>(92 bytes, Stack size 20 btyes, hci_tl.o(.text.hciProcessHostToCtrlCmd_RAW))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = hciProcessHostToCtrlCmd_RAW &rArr; HCI_CommandCompleteEvent1 &rArr; HCI_H5_Send  </ul>
<br>[Calls]<ul>
<li><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteEvent1
</ul>
<br>[Called By]<ul>
<li><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_H5_RecvCallback
</ul>
<p><strong><a name="[935]"></a>HCI_H5_RecvCallback</strong>(172 bytes, Stack size 12 btyes, hci_tl.o(.text.HCI_H5_RecvCallback))<br>
<br>[Stack]<ul><li>Max Depth = 60 
<li>Call Chain = HCI_H5_RecvCallback &rArr; hciProcessHostToCtrlCmd_RAW &rArr; HCI_CommandCompleteEvent1  &rArr; HCI_H5_Send  </ul>
<br>[Calls]<ul>
<li><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciProcessHostToCtrlCmd_RAW
<li><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciProcessHostToCtrlVendorCmd_RAW
</ul>
<p><strong><a name="[936]"></a>hciProcessHostToCtrlCmd</strong>(100 bytes, Stack size 24 btyes, hci_tl.o(.text.hciProcessHostToCtrlCmd))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = hciProcessHostToCtrlCmd &rArr; HCI_CommandCompleteEvent1 &rArr; HCI_H5_Send  </ul>
<br>[Calls]<ul>
<li><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteEvent1
</ul>
<br>[Called By]<ul>
<li><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ProcessEvent1
</ul>
<p><strong><a name="[937]"></a>HCI_ReadLocalVersionInfoCmd_1</strong>(94 bytes, Stack size 24 btyes, hci_tl.o(.text.HCI_ReadLocalVersionInfoCmd_1))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = HCI_ReadLocalVersionInfoCmd_1 &rArr; HCI_CommandCompleteEvent1 &rArr; HCI_H5_Send  </ul>
<br>[Calls]<ul>
<li><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteEvent1
</ul>
<br>[Called By]<ul>
<li><a href="#[943]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciReadLocalVersionInfo
</ul>
<p><strong><a name="[938]"></a>wait_llWaitingIrq</strong>(60 bytes, Stack size 20 btyes, hci_tl.o(.text.wait_llWaitingIrq))<br>
<br>[Called By]<ul>
<li><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLECreateConn
<li><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetExtAdvEnable1
<li><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LL_SetScanControl
<li><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LL_SetAdvControl
<li><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetExtendedScanEnableCmd1
</ul>
<p><strong><a name="[939]"></a>hciLECreateConn</strong>(156 bytes, Stack size 48 btyes, hci_tl.o(.text.hciLECreateConn))<br>
<br>[Stack]<ul><li>Max Depth = 68 
<li>Call Chain = hciLECreateConn &rArr; wait_llWaitingIrq </ul>
<br>[Calls]<ul>
<li><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_llWaitingIrq
</ul>
<p><strong><a name="[93a]"></a>HCI_Init1</strong>(80 bytes, Stack size 0 btyes, hci_tl.o(.text.HCI_Init1))<br>
<p><strong><a name="[93b]"></a>hciProcessHostToCtrlData_Raw</strong>(40 bytes, Stack size 0 btyes, hci_tl.o(.text.hciProcessHostToCtrlData_Raw))<br>
<p><strong><a name="[93c]"></a>hciProcessHostToCtrlData</strong>(52 bytes, Stack size 8 btyes, hci_tl.o(.text.hciProcessHostToCtrlData))<br>
<br>[Calls]<ul>
<li><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</ul>
<br>[Called By]<ul>
<li><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ProcessEvent1
</ul>
<p><strong><a name="[93d]"></a>LL_ReadLocalResolvableAddress1</strong>(36 bytes, Stack size 0 btyes, hci_tl.o(.text.LL_ReadLocalResolvableAddress1))<br>
<br>[Called By]<ul>
<li><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ReadLocalResolvableAddressCmd1
</ul>
<p><strong><a name="[93e]"></a>HCI_LE_SetExtAdvEnableCmd1</strong>(18 bytes, Stack size 0 btyes, hci_tl.o(.text.HCI_LE_SetExtAdvEnableCmd1))<br>
<p><strong><a name="[93f]"></a>hciLESetExtAdvEnable1</strong>(108 bytes, Stack size 48 btyes, hci_tl.o(.text.hciLESetExtAdvEnable1))<br>
<br>[Stack]<ul><li>Max Depth = 656 
<li>Call Chain = hciLESetExtAdvEnable1 &rArr; LL_SetExtAdvEnable &rArr; LL_SetExtAdvEnable.part.8  </ul>
<br>[Calls]<ul>
<li><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetExtAdvEnable
<li><a href="#[938]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_llWaitingIrq
</ul>
<br>[Called By]<ul>
<li><a href="#[923]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_scan_schd_adv_scan_exit
<li><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_scan_timer
</ul>
<p><strong><a name="[940]"></a>hciLESetPrdAdvRecvEnableCmd</strong>(20 bytes, Stack size 0 btyes, hci_tl.o(.text.hciLESetPrdAdvRecvEnableCmd))<br>
<p><strong><a name="[941]"></a>HCI_H5_Send</strong>(26 bytes, Stack size 16 btyes, hci_tl.o(.text.HCI_H5_Send))<br>
<br>[Calls]<ul>
<li><a href="#[8ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_h5_controller_interface
</ul>
<br>[Called By]<ul>
<li><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteEvent1
<li><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciProcessCtrlToHost
</ul>
<p><strong><a name="[942]"></a>HCI_CommandCompleteEvent1</strong>(96 bytes, Stack size 12 btyes, hci_tl.o(.text.HCI_CommandCompleteEvent1))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = HCI_CommandCompleteEvent1 &rArr; HCI_H5_Send </ul>
<br>[Calls]<ul>
<li><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_H5_Send
</ul>
<br>[Called By]<ul>
<li><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ais_notify
<li><a href="#[933]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciProcessHostToCtrlVendorCmd_RAW
<li><a href="#[934]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciProcessHostToCtrlCmd_RAW
<li><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciProcessHostToCtrlCmd
<li><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ReadLocalVersionInfoCmd_1
<li><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetEventMaskCmd1
<li><a href="#[946]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLEReadBufSize
<li><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetAdvParam
<li><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetAdvData
<li><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ReadLocalResolvableAddressCmd1
<li><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciExtSwUpgrade
<li><a href="#[92a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetExtAdvEnable
<li><a href="#[92b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetExtendedScanEnableCmd
<li><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetAdvEnab
<li><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetScanEnable
</ul>
<p><strong><a name="[943]"></a>hciReadLocalVersionInfo</strong>(8 bytes, Stack size 4 btyes, hci_tl.o(.text.hciReadLocalVersionInfo))<br>
<br>[Stack]<ul><li>Max Depth = 56 
<li>Call Chain = hciReadLocalVersionInfo &rArr; HCI_ReadLocalVersionInfoCmd_1 &rArr; HCI_CommandCompleteEvent1  &rArr; HCI_H5_Send  </ul>
<br>[Calls]<ul>
<li><a href="#[937]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ReadLocalVersionInfoCmd_1
</ul>
<p><strong><a name="[944]"></a>HCI_LE_SetEventMaskCmd1</strong>(72 bytes, Stack size 8 btyes, hci_tl.o(.text.HCI_LE_SetEventMaskCmd1))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = HCI_LE_SetEventMaskCmd1 &rArr; HCI_CommandCompleteEvent1 &rArr; HCI_H5_Send  </ul>
<br>[Calls]<ul>
<li><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteEvent1
</ul>
<br>[Called By]<ul>
<li><a href="#[945]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetEventMask
</ul>
<p><strong><a name="[945]"></a>hciLESetEventMask</strong>(8 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLESetEventMask))<br>
<br>[Stack]<ul><li>Max Depth = 40 
<li>Call Chain = hciLESetEventMask &rArr; HCI_LE_SetEventMaskCmd1 &rArr; HCI_CommandCompleteEvent1  &rArr; HCI_H5_Send  </ul>
<br>[Calls]<ul>
<li><a href="#[944]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetEventMaskCmd1
</ul>
<p><strong><a name="[946]"></a>hciLEReadBufSize</strong>(38 bytes, Stack size 8 btyes, hci_tl.o(.text.hciLEReadBufSize))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = hciLEReadBufSize &rArr; HCI_CommandCompleteEvent1 &rArr; HCI_H5_Send  </ul>
<br>[Calls]<ul>
<li><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteEvent1
</ul>
<p><strong><a name="[947]"></a>hciLESetAdvParam</strong>(120 bytes, Stack size 32 btyes, hci_tl.o(.text.hciLESetAdvParam))<br>
<br>[Stack]<ul><li>Max Depth = 60 
<li>Call Chain = hciLESetAdvParam &rArr; HCI_CommandCompleteEvent1 &rArr; HCI_H5_Send  </ul>
<br>[Calls]<ul>
<li><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteEvent1
</ul>
<p><strong><a name="[948]"></a>hciLESetAdvData</strong>(68 bytes, Stack size 8 btyes, hci_tl.o(.text.hciLESetAdvData))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = hciLESetAdvData &rArr; HCI_CommandCompleteEvent1 &rArr; HCI_H5_Send  </ul>
<br>[Calls]<ul>
<li><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteEvent1
</ul>
<p><strong><a name="[949]"></a>HCI_LE_ReadLocalResolvableAddressCmd1</strong>(34 bytes, Stack size 12 btyes, hci_tl.o(.text.HCI_LE_ReadLocalResolvableAddressCmd1))<br>
<br>[Stack]<ul><li>Max Depth = 40 
<li>Call Chain = HCI_LE_ReadLocalResolvableAddressCmd1 &rArr; HCI_CommandCompleteEvent1 &rArr; HCI_H5_Send  </ul>
<br>[Calls]<ul>
<li><a href="#[93d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ReadLocalResolvableAddress1
<li><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteEvent1
</ul>
<br>[Called By]<ul>
<li><a href="#[94a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLEReadLocalRA
</ul>
<p><strong><a name="[94a]"></a>hciLEReadLocalRA</strong>(12 bytes, Stack size 4 btyes, hci_tl.o(.text.hciLEReadLocalRA))<br>
<br>[Stack]<ul><li>Max Depth = 44 
<li>Call Chain = hciLEReadLocalRA &rArr; HCI_LE_ReadLocalResolvableAddressCmd1 &rArr; HCI_CommandCompleteEvent1  &rArr; HCI_H5_Send  </ul>
<br>[Calls]<ul>
<li><a href="#[949]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_ReadLocalResolvableAddressCmd1
</ul>
<p><strong><a name="[94b]"></a>hciExtSwUpgrade</strong>(160 bytes, Stack size 8 btyes, hci_tl.o(.text.hciExtSwUpgrade))<br>
<br>[Stack]<ul><li>Max Depth = 244 
<li>Call Chain = hciExtSwUpgrade &rArr; _ble_ais_service_write &rArr; ble_ota_handle_update_request  &rArr; ble_version_appver_get  &rArr; ulog  &rArr; log_get_mutex  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[942]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_CommandCompleteEvent1
<li><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ble_ais_service_write
</ul>
<p><strong><a name="[94c]"></a>hciProcessCtrlToHost</strong>(132 bytes, Stack size 12 btyes, hci_tl.o(.text.hciProcessCtrlToHost))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = hciProcessCtrlToHost &rArr; HCI_H5_Send </ul>
<br>[Calls]<ul>
<li><a href="#[941]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_H5_Send
<li><a href="#[8c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtk_unrel_is_high_level
</ul>
<br>[Called By]<ul>
<li><a href="#[94d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_ProcessEvent1
</ul>
<p><strong><a name="[94d]"></a>HCI_ProcessEvent1</strong>(72 bytes, Stack size 8 btyes, hci_tl.o(.text.HCI_ProcessEvent1))<br>
<br>[Stack]<ul><li>Max Depth = 60 
<li>Call Chain = HCI_ProcessEvent1 &rArr; hciProcessHostToCtrlCmd &rArr; HCI_CommandCompleteEvent1  &rArr; HCI_H5_Send  </ul>
<br>[Calls]<ul>
<li><a href="#[94c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciProcessCtrlToHost
<li><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciProcessHostToCtrlData
<li><a href="#[936]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciProcessHostToCtrlCmd
</ul>
<p><strong><a name="[94e]"></a>rx_signal_handler</strong>(24 bytes, Stack size 4 btyes, hci_uart_h5.o(.__sram.code.rx_signal_handler))<br>
<p><strong><a name="[952]"></a>move_to_slave_function3</strong>(132 bytes, Stack size 16 btyes, hci_uart_h5.o(.__sram.code.move_to_slave_function3))<br>
<p><strong><a name="[953]"></a>osalInitTasks</strong>(48 bytes, Stack size 8 btyes, hci_uart_h5.o(.text.osalInitTasks))<br>
<p><strong><a name="[957]"></a>osal_set_event1</strong>(88 bytes, Stack size 16 btyes, hci_uart_h5.o(.text.osal_set_event1))<br>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</ul>
<p><strong><a name="[958]"></a>init_config</strong>(652 bytes, Stack size 0 btyes, hci_uart_h5.o(.text.init_config))<br>
<br>[Called By]<ul>
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</ul>
<p><strong><a name="[959]"></a>phy6220_ll_info_show</strong>(588 bytes, Stack size 0 btyes, hci_uart_h5.o(.text.phy6220_ll_info_show))<br>
<p><strong><a name="[95a]"></a>patch_conn_get_role</strong>(4 bytes, Stack size 0 btyes, hci_uart_h5.o(.text.patch_conn_get_role))<br>
<p><strong><a name="[95b]"></a>ll_patch_extended_com</strong>(108 bytes, Stack size 0 btyes, hci_uart_h5.o(.text.ll_patch_extended_com))<br>
<br>[Called By]<ul>
<li><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_patch_init
</ul>
<p><strong><a name="[95c]"></a>ll_patch_rfu</strong>(2 bytes, Stack size 0 btyes, hci_uart_h5.o(.text.ll_patch_rfu))<br>
<p><strong><a name="[95d]"></a>ll_patch_init</strong>(204 bytes, Stack size 12 btyes, hci_uart_h5.o(.text.ll_patch_init))<br>
<br>[Calls]<ul>
<li><a href="#[95b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_patch_extended_com
</ul>
<br>[Called By]<ul>
<li><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
</ul>
<p><strong><a name="[95e]"></a>hal_rfphy_init</strong>(276 bytes, Stack size 12 btyes, hci_uart_h5.o(.text.hal_rfphy_init))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = hal_rfphy_init &rArr; ll_patch_init </ul>
<br>[Calls]<ul>
<li><a href="#[95d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_patch_init
<li><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_freqoff_get
<li><a href="#[964]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;patch_efuse_init
<li><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_irq_register
<li><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drv_irq_enable
</ul>
<br>[Called By]<ul>
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</ul>
<p><strong><a name="[95f]"></a>bt_hci_uart_h5_register</strong>(52 bytes, Stack size 16 btyes, hci_uart_h5.o(.text.bt_hci_uart_h5_register))<br>
<br>[Stack]<ul><li>Max Depth = 156 
<li>Call Chain = bt_hci_uart_h5_register &rArr; driver_register &rArr; device_find  &rArr; aos_mutex_new  &rArr; aos_malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_register
</ul>
<br>[Called By]<ul>
<li><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_board_init
</ul>
<p><strong><a name="[960]"></a>uart_recv_event</strong>(32 bytes, Stack size 4 btyes, hci_uart_h5.o(.__sram.code))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = uart_recv_event &rArr; csi_usart_restart_receive_dma &rArr; csi_dma_start  </ul>
<br>[Calls]<ul>
<li><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_restart_receive_dma
</ul>
<p><strong><a name="[961]"></a>osal_msg_send1</strong>(72 bytes, Stack size 0 btyes, hci_uart_h5.o(.__sram.code.osal_msg_send1))<br>
<p><strong><a name="[962]"></a>LL_IRQHandler_process</strong>(252 bytes, Stack size 12 btyes, hci_uart_h5.o(.__sram.code.LL_IRQHandler_process))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = LL_IRQHandler_process &rArr; ll_processExtScanIRQ &rArr; LL_ExtAdvReportCback  </ul>
<br>[Calls]<ul>
<li><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtAdvIRQ
<li><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupExtScan1
<li><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtScanIRQ
<li><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processExtInitIRQ
<li><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_secondaryAdvTRX0
<li><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_processBasicIRQ_secondaryScanSRX0
</ul>
<br>[Called By]<ul>
<li><a href="#[963]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__LL_IRQHandler
</ul>
<p><strong><a name="[963]"></a>__LL_IRQHandler</strong>(36 bytes, Stack size 8 btyes, hci_uart_h5.o(.__sram.code.__LL_IRQHandler))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = __LL_IRQHandler &rArr; LL_IRQHandler_process &rArr; ll_processExtScanIRQ  &rArr; LL_ExtAdvReportCback  </ul>
<br>[Calls]<ul>
<li><a href="#[962]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IRQHandler_process
</ul>
<p><strong><a name="[417]"></a>hci_api_le_read_buffer_size_complete</strong>(12 bytes, Stack size 0 btyes, hci_uart_h5.o(.text.hci_api_le_read_buffer_size_complete))<br>
<p><strong><a name="[8a0]"></a>LL_AdvSetTerminatedCback1</strong>(2 bytes, Stack size 0 btyes, hci_uart_h5.o(.text.LL_AdvSetTerminatedCback1))<br>
<p><strong><a name="[89f]"></a>LL_ExtAdvReportCback1</strong>(2 bytes, Stack size 0 btyes, hci_uart_h5.o(.text.LL_ExtAdvReportCback1))<br>
<p><strong><a name="[8a2]"></a>LL_PrdAdvSyncEstablishedCback1</strong>(2 bytes, Stack size 0 btyes, hci_uart_h5.o(.text.LL_PrdAdvSyncEstablishedCback1))<br>
<p><strong><a name="[8a3]"></a>LL_PrdAdvReportCback1</strong>(2 bytes, Stack size 0 btyes, hci_uart_h5.o(.text.LL_PrdAdvReportCback1))<br>
<p><strong><a name="[964]"></a>patch_efuse_init</strong>(20 bytes, Stack size 0 btyes, hci_uart_h5.o(.text.patch_efuse_init))<br>
<br>[Called By]<ul>
<li><a href="#[95e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_rfphy_init
</ul>
<p><strong><a name="[965]"></a>LL_InitConnectContext0</strong>(304 bytes, Stack size 52 btyes, hci_uart_h5.o(.text.LL_InitConnectContext0))<br>
<br>[Calls]<ul>
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[966]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_hal_open
</ul>
<p><strong><a name="[967]"></a>hci_uart_loop</strong>(288 bytes, Stack size 32 btyes, hci_uart_h5.o(.__sram.code))<br>
<br>[Stack]<ul><li>Max Depth = 304 
<li>Call Chain = hci_uart_loop &rArr; hci_h5_receive_msg &rArr; h5_complete_rx_pkt.constprop.11  &rArr; hci_h5_send_sync_resp  &rArr; h5_wake_up  &rArr; OsStartTimer  &rArr; aos_timer_change  &rArr; krhino_timer_change  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog
<li><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_restart_receive_dma
<li><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_lock
<li><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_unlock
<li><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_receive_msg
<li><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</ul>
<br>[Called By]<ul>
<li><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</ul>
<p><strong><a name="[968]"></a>malloc</strong>(10 bytes, Stack size 4 btyes, libc_malloc.o(.text.malloc))<br>
<br>[Stack]<ul><li>Max Depth = 68 
<li>Call Chain = malloc &rArr; yoc_malloc &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_malloc
</ul>
<br>[Called By]<ul>
<li><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsAllocateTimer
<li><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbAllocate
<li><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbQueueInit
<li><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vasprintf
<li><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
</ul>
<p><strong><a name="[969]"></a>free</strong>(14 bytes, Stack size 4 btyes, libc_malloc.o(.text.free))<br>
<br>[Stack]<ul><li>Max Depth = 60 
<li>Call Chain = free &rArr; yoc_free &rArr; krhino_mm_free  &rArr; k_mm_free  &rArr; k_mm_smallblk_free  &rArr; krhino_mblk_free  </ul>
<br>[Calls]<ul>
<li><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_free
</ul>
<br>[Called By]<ul>
<li><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_cleanup
<li><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_sendv
<li><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbAllocate
<li><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbFree
<li><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbQueueFree
<li><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vasprintf
</ul>
<p><strong><a name="[96a]"></a>realloc</strong>(10 bytes, Stack size 0 btyes, libc_malloc.o(.text.realloc))<br>
<p><strong><a name="[96b]"></a>calloc</strong>(32 bytes, Stack size 0 btyes, libc_malloc.o(.text.calloc))<br>
<p><strong><a name="[96c]"></a>vasprintf</strong>(136 bytes, Stack size 32 btyes, libc_stdio_vasprintf.o(.text.vasprintf))<br>
<br>[Stack]<ul><li>Max Depth = 116 
<li>Call Chain = vasprintf &rArr; strdup &rArr; malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<li><a href="#[a9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<li><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<li><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
</ul>
<br>[Called By]<ul>
<li><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_sendv
</ul>
<p><strong><a name="[96d]"></a>asprintf</strong>(28 bytes, Stack size 0 btyes, libc_stdio_vasprintf.o(.text.asprintf))<br>
<p><strong><a name="[96e]"></a>strtoul</strong>(154 bytes, Stack size 16 btyes, libc_stdlib_strtol.o(.text.strtoul))<br>
<br>[Called By]<ul>
<li><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</ul>
<p><strong><a name="[96f]"></a>strtol</strong>(28 bytes, Stack size 4 btyes, libc_stdlib_strtol.o(.text.strtol))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = strtol &rArr; strtoul </ul>
<br>[Calls]<ul>
<li><a href="#[96e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</ul>
<br>[Called By]<ul>
<li><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</ul>
<p><strong><a name="[970]"></a>bzero</strong>(12 bytes, Stack size 0 btyes, libc_string_bzero.o(.text.bzero))<br>
<p><strong><a name="[971]"></a>strcasecmp</strong>(50 bytes, Stack size 0 btyes, libc_string_strcasecmp.o(.text.strcasecmp))<br>
<p><strong><a name="[972]"></a>strcount</strong>(38 bytes, Stack size 0 btyes, libc_string_strcount.o(.text.strcount))<br>
<p><strong><a name="[973]"></a>strdup</strong>(42 bytes, Stack size 16 btyes, libc_string_strdup.o(.text.strdup))<br>
<br>[Stack]<ul><li>Max Depth = 84 
<li>Call Chain = strdup &rArr; malloc &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</ul>
<br>[Called By]<ul>
<li><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_name_parse.constprop.0
<li><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vasprintf
</ul>
<p><strong><a name="[974]"></a>strerror</strong>(88 bytes, Stack size 4 btyes, libc_string_strerror.o(.text.strerror))<br>
<br>[Calls]<ul>
<li><a href="#[aa1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__v2_printf
<li><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;except_process_function
</ul>
<p><strong><a name="[976]"></a>bytes2hexstr</strong>(72 bytes, Stack size 0 btyes, libc_string_strext.o(.text.bytes2hexstr))<br>
<p><strong><a name="[977]"></a>hexstr2bytes</strong>(60 bytes, Stack size 0 btyes, libc_string_strext.o(.text.hexstr2bytes))<br>
<p><strong><a name="[978]"></a>strsplit</strong>(58 bytes, Stack size 0 btyes, libc_string_strext.o(.text.strsplit))<br>
<p><strong><a name="[979]"></a>strasplit</strong>(48 bytes, Stack size 0 btyes, libc_string_strext.o(.text.strasplit))<br>
<p><strong><a name="[97a]"></a>str2mac</strong>(146 bytes, Stack size 0 btyes, libc_string_strext.o(.text.str2mac))<br>
<p><strong><a name="[97b]"></a>isalnumstring</strong>(32 bytes, Stack size 0 btyes, libc_string_strext.o(.text.isalnumstring))<br>
<p><strong><a name="[97c]"></a>strstri</strong>(48 bytes, Stack size 0 btyes, libc_string_strext.o(.text.strstri))<br>
<p><strong><a name="[97d]"></a>strlcat</strong>(68 bytes, Stack size 0 btyes, libc_string_strlcat.o(.text.strlcat))<br>
<p><strong><a name="[97e]"></a>strlcpy</strong>(50 bytes, Stack size 0 btyes, libc_string_strlcpy.o(.text.strlcpy))<br>
<p><strong><a name="[97f]"></a>strlwr</strong>(26 bytes, Stack size 0 btyes, libc_string_strlwr.o(.text.strlwr))<br>
<p><strong><a name="[980]"></a>strncasecmp</strong>(56 bytes, Stack size 0 btyes, libc_string_strncasecmp.o(.text.strncasecmp))<br>
<p><strong><a name="[981]"></a>strndup</strong>(36 bytes, Stack size 0 btyes, libc_string_strndup.o(.text.strndup))<br>
<p><strong><a name="[982]"></a>strtok_r</strong>(76 bytes, Stack size 0 btyes, libc_string_strtok_r.o(.text.strtok_r))<br>
<p><strong><a name="[983]"></a>strupr</strong>(26 bytes, Stack size 0 btyes, libc_string_strupr.o(.text.strupr))<br>
<p><strong><a name="[984]"></a>close</strong>(4 bytes, Stack size 0 btyes, libc_sys_socket_close.o(.text.close))<br>
<p><strong><a name="[985]"></a>open</strong>(14 bytes, Stack size 0 btyes, libc_sys_socket_close.o(.text.open))<br>
<p><strong><a name="[986]"></a>read</strong>(4 bytes, Stack size 0 btyes, libc_sys_socket_close.o(.text.read))<br>
<p><strong><a name="[987]"></a>write</strong>(4 bytes, Stack size 0 btyes, libc_sys_socket_close.o(.text.write))<br>
<p><strong><a name="[988]"></a>fcntl</strong>(14 bytes, Stack size 0 btyes, libc_sys_socket_close.o(.text.fcntl))<br>
<p><strong><a name="[989]"></a>coretimspec</strong>(160 bytes, Stack size 0 btyes, libc_time__time.o(.text.coretimspec))<br>
<p><strong><a name="[98a]"></a>clock</strong>(28 bytes, Stack size 0 btyes, libc_time_clock.o(.text.clock))<br>
<p><strong><a name="[98b]"></a>clock_gettime</strong>(132 bytes, Stack size 0 btyes, libc_time_clock_gettime.o(.text.clock_gettime))<br>
<p><strong><a name="[98c]"></a>clock_gettime_adjust</strong>(88 bytes, Stack size 0 btyes, libc_time_clock_gettime.o(.text.clock_gettime_adjust))<br>
<p><strong><a name="[98d]"></a>clock_settime</strong>(68 bytes, Stack size 0 btyes, libc_time_clock_settime.o(.text.clock_settime))<br>
<p><strong><a name="[98e]"></a>gettimeofday</strong>(52 bytes, Stack size 0 btyes, libc_time_gettimeofday.o(.text.gettimeofday))<br>
<p><strong><a name="[98f]"></a>settimeofday</strong>(52 bytes, Stack size 0 btyes, libc_time_settimeofday.o(.text.settimeofday))<br>
<p><strong><a name="[990]"></a>time</strong>(38 bytes, Stack size 0 btyes, libc_time_time.o(.text.time))<br>
<p><strong><a name="[991]"></a>sleep</strong>(20 bytes, Stack size 0 btyes, libc_unistd_lib_sleep.o(.text.sleep))<br>
<p><strong><a name="[992]"></a>usleep</strong>(44 bytes, Stack size 0 btyes, libc_unistd_lib_usleep.o(.text.usleep))<br>
<p><strong><a name="[993]"></a>board_base_init</strong>(2 bytes, Stack size 0 btyes, base_init.o(.text.board_base_init))<br>
<p><strong><a name="[994]"></a>dyn_mem_proc_task_start</strong>(60 bytes, Stack size 0 btyes, k_dyn_mem_proc.o(.text.dyn_mem_proc_task_start))<br>
<br>[Called By]<ul>
<li><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</ul>
<p><strong><a name="[83]"></a>krhino_idle_hook</strong>(2 bytes, Stack size 4 btyes, board_init.o(.text.krhino_idle_hook))<br>
<br>[Called By]<ul>
<li><a href="#[9ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;idle_task
</ul>
<p><strong><a name="[995]"></a>board_init</strong>(46 bytes, Stack size 0 btyes, board_init.o(.text.board_init))<br>
<p><strong><a name="[998]"></a>krhino_buf_queue_create</strong>(24 bytes, Stack size 0 btyes, k_buf_queue.o(.text.krhino_buf_queue_create))<br>
<p><strong><a name="[999]"></a>krhino_fix_buf_queue_create</strong>(28 bytes, Stack size 24 btyes, k_buf_queue.o(.text.krhino_fix_buf_queue_create))<br>
<br>[Stack]<ul><li>Max Depth = 68 
<li>Call Chain = krhino_fix_buf_queue_create &rArr; buf_queue_create &rArr; ringbuf_init  </ul>
<br>[Calls]<ul>
<li><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_create
</ul>
<br>[Called By]<ul>
<li><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktimer_init
</ul>
<p><strong><a name="[99a]"></a>krhino_buf_queue_del</strong>(112 bytes, Stack size 0 btyes, k_buf_queue.o(.text.krhino_buf_queue_del))<br>
<p><strong><a name="[99b]"></a>krhino_buf_queue_dyn_create</strong>(34 bytes, Stack size 0 btyes, k_buf_queue.o(.text.krhino_buf_queue_dyn_create))<br>
<p><strong><a name="[99c]"></a>krhino_fix_buf_queue_dyn_create</strong>(40 bytes, Stack size 0 btyes, k_buf_queue.o(.text.krhino_fix_buf_queue_dyn_create))<br>
<p><strong><a name="[99d]"></a>krhino_buf_queue_dyn_del</strong>(124 bytes, Stack size 0 btyes, k_buf_queue.o(.text.krhino_buf_queue_dyn_del))<br>
<p><strong><a name="[99e]"></a>krhino_buf_queue_send</strong>(180 bytes, Stack size 20 btyes, k_buf_queue.o(.text.krhino_buf_queue_send))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = krhino_buf_queue_send &rArr; ringbuf_push </ul>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<li><a href="#[9df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_push
<li><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<li><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</ul>
<br>[Called By]<ul>
<li><a href="#[a32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_dyn_del
<li><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_start
<li><a href="#[a36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_stop
<li><a href="#[a37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_change
</ul>
<p><strong><a name="[99f]"></a>krhino_buf_queue_recv</strong>(276 bytes, Stack size 32 btyes, k_buf_queue.o(.text.krhino_buf_queue_recv))<br>
<br>[Stack]<ul><li>Max Depth = 72 
<li>Call Chain = krhino_buf_queue_recv &rArr; pend_to_blk_obj &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<li><a href="#[9e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_pop
<li><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<li><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<li><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
</ul>
<br>[Called By]<ul>
<li><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</ul>
<p><strong><a name="[9a0]"></a>krhino_buf_queue_flush</strong>(84 bytes, Stack size 0 btyes, k_buf_queue.o(.text.krhino_buf_queue_flush))<br>
<p><strong><a name="[9a1]"></a>krhino_buf_queue_info_get</strong>(72 bytes, Stack size 0 btyes, k_buf_queue.o(.text.krhino_buf_queue_info_get))<br>
<p><strong><a name="[9a2]"></a>dyn_mem_proc_task</strong>(116 bytes, Stack size 0 btyes, k_dyn_mem_proc.o(.text.dyn_mem_proc_task))<br>
<p><strong><a name="[994]"></a>dyn_mem_proc_task_start</strong>(60 bytes, Stack size 0 btyes, k_dyn_mem_proc.o(.text.dyn_mem_proc_task_start))<br>
<br>[Called By]<ul>
<li><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</ul>
<p><strong><a name="[9a3]"></a>k_err_proc_debug</strong>(20 bytes, Stack size 4 btyes, k_err.o(.text.k_err_proc_debug))<br>
<br>[Called By]<ul>
<li><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_hook
<li><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_free
<li><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<li><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<li><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<li><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<li><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<li><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<li><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<li><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<li><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
<li><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</ul>
<p><strong><a name="[9a4]"></a>krhino_event_create</strong>(54 bytes, Stack size 0 btyes, k_event.o(.text.krhino_event_create))<br>
<p><strong><a name="[9a5]"></a>krhino_event_del</strong>(104 bytes, Stack size 0 btyes, k_event.o(.text.krhino_event_del))<br>
<p><strong><a name="[9a6]"></a>krhino_event_dyn_create</strong>(78 bytes, Stack size 0 btyes, k_event.o(.text.krhino_event_dyn_create))<br>
<p><strong><a name="[9a7]"></a>krhino_event_dyn_del</strong>(112 bytes, Stack size 0 btyes, k_event.o(.text.krhino_event_dyn_del))<br>
<p><strong><a name="[9a8]"></a>krhino_event_get</strong>(276 bytes, Stack size 0 btyes, k_event.o(.text.krhino_event_get))<br>
<p><strong><a name="[9a9]"></a>krhino_event_set</strong>(164 bytes, Stack size 0 btyes, k_event.o(.text.krhino_event_set))<br>
<p><strong><a name="[9ab]"></a>ffs32_msb</strong>(44 bytes, Stack size 0 btyes, k_ffs.o(.text.ffs32_msb))<br>
<p><strong><a name="[9ac]"></a>ffs32_lsb</strong>(50 bytes, Stack size 0 btyes, k_ffs.o(.text.ffs32_lsb))<br>
<p><strong><a name="[9ad]"></a>idle_task</strong>(36 bytes, Stack size 8 btyes, k_idle.o(.text.idle_task))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = idle_task &rArr; krhino_idle_pre_hook </ul>
<br>[Calls]<ul>
<li><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_idle_pre_hook
<li><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_idle_hook
</ul>
<p><strong><a name="[9b4]"></a>krhino_deinit_mm_head</strong>(14 bytes, Stack size 0 btyes, k_mm.o(.text.krhino_deinit_mm_head))<br>
<p><strong><a name="[9b5]"></a>k_mm_alloc</strong>(352 bytes, Stack size 32 btyes, k_mm.o(.text.k_mm_alloc))<br>
<br>[Stack]<ul><li>Max Depth = 44 
<li>Call Chain = k_mm_alloc &rArr; krhino_mblk_alloc </ul>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_alloc
<li><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addsize
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<li><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_to_level
<li><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_delete
<li><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_insert
</ul>
<br>[Called By]<ul>
<li><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<li><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
</ul>
<p><strong><a name="[9b6]"></a>k_mm_free</strong>(200 bytes, Stack size 24 btyes, k_mm.o(.text.k_mm_free))<br>
<br>[Stack]<ul><li>Max Depth = 44 
<li>Call Chain = k_mm_free &rArr; k_mm_smallblk_free &rArr; krhino_mblk_free  </ul>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_free
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<li><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removesize
<li><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_delete
<li><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_insert
</ul>
<br>[Called By]<ul>
<li><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<li><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
<li><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
</ul>
<p><strong><a name="[9b7]"></a>krhino_init_mm_head</strong>(240 bytes, Stack size 24 btyes, k_mm.o(.text.krhino_init_mm_head))<br>
<br>[Stack]<ul><li>Max Depth = 68 
<li>Call Chain = krhino_init_mm_head &rArr; k_mm_free &rArr; k_mm_smallblk_free  &rArr; krhino_mblk_free  </ul>
<br>[Calls]<ul>
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<li><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<li><a href="#[9bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_pool_init
<li><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removesize
</ul>
<br>[Called By]<ul>
<li><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_init
</ul>
<p><strong><a name="[9b8]"></a>krhino_add_mm_region</strong>(146 bytes, Stack size 16 btyes, k_mm.o(.text.krhino_add_mm_region))<br>
<br>[Stack]<ul><li>Max Depth = 60 
<li>Call Chain = krhino_add_mm_region &rArr; k_mm_free &rArr; k_mm_smallblk_free  &rArr; krhino_mblk_free  </ul>
<br>[Calls]<ul>
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<li><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
</ul>
<br>[Called By]<ul>
<li><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_init
</ul>
<p><strong><a name="[9b9]"></a>k_mm_init</strong>(56 bytes, Stack size 20 btyes, k_mm.o(.text.k_mm_init))<br>
<br>[Stack]<ul><li>Max Depth = 88 
<li>Call Chain = k_mm_init &rArr; krhino_init_mm_head &rArr; k_mm_free  &rArr; k_mm_smallblk_free  &rArr; krhino_mblk_free  </ul>
<br>[Calls]<ul>
<li><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<li><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
</ul>
<br>[Called By]<ul>
<li><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</ul>
<p><strong><a name="[9ba]"></a>k_mm_realloc</strong>(490 bytes, Stack size 0 btyes, k_mm.o(.text.k_mm_realloc))<br>
<p><strong><a name="[9bb]"></a>krhino_mm_alloc</strong>(48 bytes, Stack size 12 btyes, k_mm.o(.text.krhino_mm_alloc))<br>
<br>[Stack]<ul><li>Max Depth = 56 
<li>Call Chain = krhino_mm_alloc &rArr; k_mm_alloc &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<li><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc_hook
</ul>
<br>[Called By]<ul>
<li><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_create
<li><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_dyn_create
<li><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_malloc
</ul>
<p><strong><a name="[9bc]"></a>krhino_mm_free</strong>(20 bytes, Stack size 4 btyes, k_mm.o(.text.krhino_mm_free))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = krhino_mm_free &rArr; k_mm_free &rArr; k_mm_smallblk_free  &rArr; krhino_mblk_free  </ul>
<br>[Calls]<ul>
<li><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
</ul>
<br>[Called By]<ul>
<li><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_create
<li><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
<li><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_dyn_create
<li><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_free
</ul>
<p><strong><a name="[9bd]"></a>krhino_mm_realloc</strong>(24 bytes, Stack size 0 btyes, k_mm.o(.text.krhino_mm_realloc))<br>
<p><strong><a name="[9be]"></a>krhino_mm_max_free_size_get</strong>(52 bytes, Stack size 0 btyes, k_mm.o(.text.krhino_mm_max_free_size_get))<br>
<p><strong><a name="[9bf]"></a>krhino_mblk_pool_init</strong>(114 bytes, Stack size 20 btyes, k_mm_blk.o(.text.krhino_mblk_pool_init))<br>
<br>[Called By]<ul>
<li><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
</ul>
<p><strong><a name="[9c0]"></a>krhino_mblk_alloc</strong>(60 bytes, Stack size 12 btyes, k_mm_blk.o(.text.krhino_mblk_alloc))<br>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</ul>
<br>[Called By]<ul>
<li><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
</ul>
<p><strong><a name="[9c1]"></a>krhino_mblk_free</strong>(42 bytes, Stack size 12 btyes, k_mm_blk.o(.text.krhino_mblk_free))<br>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</ul>
<br>[Called By]<ul>
<li><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_free
</ul>
<p><strong><a name="[9c3]"></a>mutex_create</strong>(56 bytes, Stack size 16 btyes, k_mutex.o(.text.mutex_create))<br>
<br>[Calls]<ul>
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[9c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_create
</ul>
<p><strong><a name="[9c4]"></a>krhino_mutex_create</strong>(10 bytes, Stack size 4 btyes, k_mutex.o(.text.krhino_mutex_create))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = krhino_mutex_create &rArr; mutex_create </ul>
<br>[Calls]<ul>
<li><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
</ul>
<br>[Called By]<ul>
<li><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_init
<li><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
</ul>
<p><strong><a name="[9c5]"></a>krhino_mutex_del</strong>(112 bytes, Stack size 12 btyes, k_mutex.o(.text.krhino_mutex_del))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = krhino_mutex_del &rArr; mutex_release.isra.1 &rArr; task_pri_change  &rArr; ready_list_rm  &rArr; k_err_proc_debug  </ul>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<li><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release.isra.1
<li><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<li><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
</ul>
<br>[Called By]<ul>
<li><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_free
</ul>
<p><strong><a name="[9c6]"></a>krhino_mutex_dyn_create</strong>(58 bytes, Stack size 0 btyes, k_mutex.o(.text.krhino_mutex_dyn_create))<br>
<p><strong><a name="[9c7]"></a>krhino_mutex_dyn_del</strong>(120 bytes, Stack size 0 btyes, k_mutex.o(.text.krhino_mutex_dyn_del))<br>
<p><strong><a name="[9c8]"></a>mutex_pri_limit</strong>(4 bytes, Stack size 0 btyes, k_mutex.o(.text.mutex_pri_limit))<br>
<p><strong><a name="[9c9]"></a>mutex_pri_look</strong>(6 bytes, Stack size 0 btyes, k_mutex.o(.text.mutex_pri_look))<br>
<br>[Called By]<ul>
<li><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
</ul>
<p><strong><a name="[9ca]"></a>mutex_task_pri_reset</strong>(2 bytes, Stack size 0 btyes, k_mutex.o(.text.mutex_task_pri_reset))<br>
<br>[Called By]<ul>
<li><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<li><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<li><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</ul>
<p><strong><a name="[9cb]"></a>krhino_mutex_lock</strong>(280 bytes, Stack size 24 btyes, k_mutex.o(.text.krhino_mutex_lock))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = krhino_mutex_lock &rArr; pend_to_blk_obj &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<li><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc_debug
<li><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<li><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<li><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
</ul>
<br>[Called By]<ul>
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_lock
<li><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
</ul>
<p><strong><a name="[9cc]"></a>krhino_mutex_unlock</strong>(156 bytes, Stack size 16 btyes, k_mutex.o(.text.krhino_mutex_unlock))<br>
<br>[Stack]<ul><li>Max Depth = 56 
<li>Call Chain = krhino_mutex_unlock &rArr; mutex_release.isra.1 &rArr; task_pri_change  &rArr; ready_list_rm  &rArr; k_err_proc_debug  </ul>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<li><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release.isra.1
<li><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<li><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</ul>
<br>[Called By]<ul>
<li><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_unlock
<li><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
</ul>
<p><strong><a name="[9cf]"></a>pend_task_wakeup</strong>(76 bytes, Stack size 8 btyes, k_pend.o(.text.pend_task_wakeup))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = pend_task_wakeup &rArr; ready_list_add &rArr; _ready_list_add_tail  &rArr; ready_list_init  </ul>
<br>[Calls]<ul>
<li><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc_debug
<li><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<li><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<li><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
</ul>
<br>[Called By]<ul>
<li><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<li><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_free.isra.3
<li><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<li><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
</ul>
<p><strong><a name="[9d0]"></a>pend_to_blk_obj</strong>(80 bytes, Stack size 12 btyes, k_pend.o(.text.pend_to_blk_obj))<br>
<br>[Stack]<ul><li>Max Depth = 40 
<li>Call Chain = pend_to_blk_obj &rArr; tick_list_insert </ul>
<br>[Calls]<ul>
<li><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_insert
<li><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<li><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
</ul>
<br>[Called By]<ul>
<li><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<li><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<li><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
</ul>
<p><strong><a name="[9d1]"></a>pend_task_rm</strong>(80 bytes, Stack size 8 btyes, k_pend.o(.text.pend_task_rm))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = pend_task_rm &rArr; ready_list_add &rArr; _ready_list_add_tail  &rArr; ready_list_init  </ul>
<br>[Calls]<ul>
<li><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc_debug
<li><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<li><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<li><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
</ul>
<br>[Called By]<ul>
<li><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<li><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
</ul>
<p><strong><a name="[9d2]"></a>pend_list_reorder</strong>(28 bytes, Stack size 8 btyes, k_pend.o(.text.pend_list_reorder))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = pend_list_reorder &rArr; pend_list_add </ul>
<br>[Calls]<ul>
<li><a href="#[9cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm
<li><a href="#[9ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_add
</ul>
<br>[Called By]<ul>
<li><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
</ul>
<p><strong><a name="[9d3]"></a>pend_state_end_proc</strong>(88 bytes, Stack size 12 btyes, k_pend.o(.text.pend_state_end_proc))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = pend_state_end_proc &rArr; k_err_proc_debug </ul>
<br>[Calls]<ul>
<li><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___gnu_csky_case_uqi
<li><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc_debug
</ul>
<br>[Called By]<ul>
<li><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<li><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<li><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<li><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
</ul>
<p><strong><a name="[9d5]"></a>krhino_queue_create</strong>(100 bytes, Stack size 0 btyes, k_queue.o(.text.krhino_queue_create))<br>
<p><strong><a name="[9d6]"></a>krhino_queue_del</strong>(112 bytes, Stack size 0 btyes, k_queue.o(.text.krhino_queue_del))<br>
<p><strong><a name="[9d7]"></a>krhino_queue_dyn_create</strong>(156 bytes, Stack size 0 btyes, k_queue.o(.text.krhino_queue_dyn_create))<br>
<p><strong><a name="[9d8]"></a>krhino_queue_dyn_del</strong>(124 bytes, Stack size 0 btyes, k_queue.o(.text.krhino_queue_dyn_del))<br>
<p><strong><a name="[9d9]"></a>krhino_queue_back_send</strong>(10 bytes, Stack size 0 btyes, k_queue.o(.text.krhino_queue_back_send))<br>
<p><strong><a name="[9da]"></a>krhino_queue_all_send</strong>(10 bytes, Stack size 0 btyes, k_queue.o(.text.krhino_queue_all_send))<br>
<p><strong><a name="[9db]"></a>krhino_queue_recv</strong>(288 bytes, Stack size 0 btyes, k_queue.o(.text.krhino_queue_recv))<br>
<p><strong><a name="[9dc]"></a>krhino_queue_is_full</strong>(50 bytes, Stack size 0 btyes, k_queue.o(.text.krhino_queue_is_full))<br>
<p><strong><a name="[9dd]"></a>krhino_queue_flush</strong>(76 bytes, Stack size 0 btyes, k_queue.o(.text.krhino_queue_flush))<br>
<p><strong><a name="[9de]"></a>krhino_queue_info_get</strong>(64 bytes, Stack size 0 btyes, k_queue.o(.text.krhino_queue_info_get))<br>
<p><strong><a name="[9df]"></a>ringbuf_push</strong>(258 bytes, Stack size 28 btyes, k_ringbuf.o(.text.ringbuf_push))<br>
<br>[Called By]<ul>
<li><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
</ul>
<p><strong><a name="[9e0]"></a>ringbuf_pop</strong>(234 bytes, Stack size 28 btyes, k_ringbuf.o(.text.ringbuf_pop))<br>
<br>[Called By]<ul>
<li><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
</ul>
<p><strong><a name="[9e1]"></a>ringbuf_is_full</strong>(32 bytes, Stack size 0 btyes, k_ringbuf.o(.text.ringbuf_is_full))<br>
<p><strong><a name="[9e2]"></a>ringbuf_is_empty</strong>(16 bytes, Stack size 0 btyes, k_ringbuf.o(.text.ringbuf_is_empty))<br>
<p><strong><a name="[9e3]"></a>ringbuf_reset</strong>(16 bytes, Stack size 0 btyes, k_ringbuf.o(.text.ringbuf_reset))<br>
<br>[Called By]<ul>
<li><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_init
</ul>
<p><strong><a name="[9e4]"></a>ringbuf_init</strong>(22 bytes, Stack size 8 btyes, k_ringbuf.o(.text.ringbuf_init))<br>
<br>[Calls]<ul>
<li><a href="#[9e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_reset
</ul>
<br>[Called By]<ul>
<li><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_create
</ul>
<p><strong><a name="[9e7]"></a>krhino_sched_disable</strong>(64 bytes, Stack size 4 btyes, k_sched.o(.text.krhino_sched_disable))<br>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</ul>
<br>[Called By]<ul>
<li><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_sched_suspend
</ul>
<p><strong><a name="[9e8]"></a>core_sched</strong>(76 bytes, Stack size 4 btyes, k_sched.o(.text.core_sched))<br>
<br>[Calls]<ul>
<li><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_switch_hook
<li><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_switch
</ul>
<br>[Called By]<ul>
<li><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<li><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<li><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<li><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_enable
<li><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create.isra.0.part.1.constprop.10
<li><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<li><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<li><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<li><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<li><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<li><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<li><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
<li><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
</ul>
<p><strong><a name="[9e9]"></a>krhino_sched_enable</strong>(84 bytes, Stack size 8 btyes, k_sched.o(.text.krhino_sched_enable))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = krhino_sched_enable &rArr; core_sched </ul>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<li><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</ul>
<br>[Called By]<ul>
<li><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_kernel_sched_resume
</ul>
<p><strong><a name="[9ea]"></a>runqueue_init</strong>(22 bytes, Stack size 0 btyes, k_sched.o(.text.runqueue_init))<br>
<br>[Called By]<ul>
<li><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</ul>
<p><strong><a name="[9eb]"></a>ready_list_add_head</strong>(60 bytes, Stack size 8 btyes, k_sched.o(.text.ready_list_add_head))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = ready_list_add_head &rArr; ready_list_init </ul>
<br>[Calls]<ul>
<li><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_init
</ul>
<br>[Called By]<ul>
<li><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
</ul>
<p><strong><a name="[9ec]"></a>ready_list_add_tail</strong>(8 bytes, Stack size 4 btyes, k_sched.o(.text.ready_list_add_tail))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = ready_list_add_tail &rArr; _ready_list_add_tail &rArr; ready_list_init  </ul>
<br>[Calls]<ul>
<li><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ready_list_add_tail
</ul>
<br>[Called By]<ul>
<li><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create.isra.0.part.1.constprop.10
<li><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
</ul>
<p><strong><a name="[9ed]"></a>ready_list_add</strong>(8 bytes, Stack size 4 btyes, k_sched.o(.text.ready_list_add))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = ready_list_add &rArr; _ready_list_add_tail &rArr; ready_list_init  </ul>
<br>[Calls]<ul>
<li><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ready_list_add_tail
</ul>
<br>[Called By]<ul>
<li><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<li><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<li><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</ul>
<p><strong><a name="[9ee]"></a>ready_list_rm</strong>(188 bytes, Stack size 12 btyes, k_sched.o(.text.ready_list_rm))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = ready_list_rm &rArr; k_err_proc_debug </ul>
<br>[Calls]<ul>
<li><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc_debug
</ul>
<br>[Called By]<ul>
<li><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<li><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<li><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
<li><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<li><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
</ul>
<p><strong><a name="[9ef]"></a>ready_list_head_to_tail</strong>(16 bytes, Stack size 0 btyes, k_sched.o(.text.ready_list_head_to_tail))<br>
<p><strong><a name="[9f0]"></a>preferred_cpu_ready_task_get</strong>(14 bytes, Stack size 0 btyes, k_sched.o(.text.preferred_cpu_ready_task_get))<br>
<br>[Called By]<ul>
<li><a href="#[9fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_start
<li><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
</ul>
<p><strong><a name="[9f1]"></a>time_slice_update</strong>(84 bytes, Stack size 12 btyes, k_sched.o(.text.time_slice_update))<br>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</ul>
<br>[Called By]<ul>
<li><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_tick_proc
</ul>
<p><strong><a name="[9f3]"></a>krhino_sem_create</strong>(58 bytes, Stack size 16 btyes, k_sem.o(.text.krhino_sem_create))<br>
<br>[Calls]<ul>
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<br>[Called By]<ul>
<li><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
<li><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
</ul>
<p><strong><a name="[9f4]"></a>krhino_sem_del</strong>(104 bytes, Stack size 12 btyes, k_sem.o(.text.krhino_sem_del))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = krhino_sem_del &rArr; pend_task_rm &rArr; ready_list_add  &rArr; _ready_list_add_tail  &rArr; ready_list_init  </ul>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<li><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<li><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
</ul>
<br>[Called By]<ul>
<li><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
</ul>
<p><strong><a name="[9f5]"></a>krhino_sem_dyn_create</strong>(82 bytes, Stack size 0 btyes, k_sem.o(.text.krhino_sem_dyn_create))<br>
<p><strong><a name="[9f6]"></a>krhino_sem_dyn_del</strong>(108 bytes, Stack size 0 btyes, k_sem.o(.text.krhino_sem_dyn_del))<br>
<p><strong><a name="[9f7]"></a>krhino_sem_give</strong>(18 bytes, Stack size 4 btyes, k_sem.o(.text.krhino_sem_give))<br>
<br>[Stack]<ul><li>Max Depth = 44 
<li>Call Chain = krhino_sem_give &rArr; sem_give &rArr; pend_task_wakeup  &rArr; ready_list_add  &rArr; _ready_list_add_tail  &rArr; ready_list_init  </ul>
<br>[Calls]<ul>
<li><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
</ul>
<br>[Called By]<ul>
<li><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<li><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
</ul>
<p><strong><a name="[9f8]"></a>krhino_sem_give_all</strong>(18 bytes, Stack size 0 btyes, k_sem.o(.text.krhino_sem_give_all))<br>
<p><strong><a name="[9f9]"></a>krhino_sem_take</strong>(208 bytes, Stack size 24 btyes, k_sem.o(.text.krhino_sem_take))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = krhino_sem_take &rArr; pend_to_blk_obj &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<li><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<li><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<li><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
</ul>
<br>[Called By]<ul>
<li><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
</ul>
<p><strong><a name="[9fa]"></a>krhino_sem_count_set</strong>(96 bytes, Stack size 0 btyes, k_sem.o(.text.krhino_sem_count_set))<br>
<p><strong><a name="[9fb]"></a>krhino_sem_count_get</strong>(34 bytes, Stack size 0 btyes, k_sem.o(.text.krhino_sem_count_get))<br>
<p><strong><a name="[9fc]"></a>krhino_init</strong>(128 bytes, Stack size 28 btyes, k_sys.o(.text.krhino_init))<br>
<br>[Stack]<ul><li>Max Depth = 180 
<li>Call Chain = krhino_init &rArr; ktimer_init &rArr; krhino_task_create  &rArr; task_create.isra.0.part.1.constprop.10  &rArr; ready_list_add_tail  &rArr; _ready_list_add_tail  &rArr; ready_list_init  </ul>
<br>[Calls]<ul>
<li><a href="#[9ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runqueue_init
<li><a href="#[a23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_init
<li><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_hook
<li><a href="#[9b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_init
<li><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_create
<li><a href="#[994]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dyn_mem_proc_task_start
<li><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
<li><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktimer_init
</ul>
<br>[Called By]<ul>
<li><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_init
</ul>
<p><strong><a name="[9fd]"></a>krhino_start</strong>(64 bytes, Stack size 8 btyes, k_sys.o(.text.krhino_start))<br>
<br>[Calls]<ul>
<li><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preferred_cpu_ready_task_get
<li><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_start_hook
<li><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_first_task_start
</ul>
<br>[Called By]<ul>
<li><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_start
</ul>
<p><strong><a name="[9fe]"></a>krhino_intrpt_enter</strong>(28 bytes, Stack size 4 btyes, k_sys.o(.text.krhino_intrpt_enter))<br>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</ul>
<br>[Called By]<ul>
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORET_IRQHandler
<li><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<li><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<li><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_GPIO_IRQHandler
<li><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_DMAC_IRQHandler
</ul>
<p><strong><a name="[9ff]"></a>krhino_intrpt_exit</strong>(104 bytes, Stack size 8 btyes, k_sys.o(.text.krhino_intrpt_exit))<br>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<li><a href="#[9f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;preferred_cpu_ready_task_get
<li><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_switch
</ul>
<br>[Called By]<ul>
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORET_IRQHandler
<li><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<li><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART1_IRQHandler
<li><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_GPIO_IRQHandler
<li><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CSI_DMAC_IRQHandler
</ul>
<p><strong><a name="[a00]"></a>krhino_next_sleep_ticks_get</strong>(64 bytes, Stack size 0 btyes, k_sys.o(.text.krhino_next_sleep_ticks_get))<br>
<p><strong><a name="[a01]"></a>krhino_global_space_get</strong>(6 bytes, Stack size 0 btyes, k_sys.o(.text.krhino_global_space_get))<br>
<p><strong><a name="[a02]"></a>krhino_version_get</strong>(6 bytes, Stack size 0 btyes, k_sys.o(.text.krhino_version_get))<br>
<p><strong><a name="[a05]"></a>krhino_task_create</strong>(92 bytes, Stack size 60 btyes, k_task.o(.text.krhino_task_create))<br>
<br>[Stack]<ul><li>Max Depth = 124 
<li>Call Chain = krhino_task_create &rArr; task_create.isra.0.part.1.constprop.10 &rArr; ready_list_add_tail  &rArr; _ready_list_add_tail  &rArr; ready_list_init  </ul>
<br>[Calls]<ul>
<li><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create.isra.0.part.1.constprop.10
</ul>
<br>[Called By]<ul>
<li><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
<li><a href="#[a3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ktimer_init
</ul>
<p><strong><a name="[a06]"></a>krhino_task_dyn_create</strong>(180 bytes, Stack size 76 btyes, k_task.o(.text.krhino_task_dyn_create))<br>
<br>[Stack]<ul><li>Max Depth = 140 
<li>Call Chain = krhino_task_dyn_create &rArr; task_create.isra.0.part.1.constprop.10 &rArr; ready_list_add_tail  &rArr; _ready_list_add_tail  &rArr; ready_list_init  </ul>
<br>[Calls]<ul>
<li><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
<li><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
<li><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create.isra.0.part.1.constprop.10
</ul>
<br>[Called By]<ul>
<li><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new_ext
</ul>
<p><strong><a name="[a07]"></a>krhino_task_sleep</strong>(136 bytes, Stack size 20 btyes, k_task.o(.text.krhino_task_sleep))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = krhino_task_sleep &rArr; tick_list_insert </ul>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<li><a href="#[a24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_insert
<li><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<li><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<li><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
</ul>
<br>[Called By]<ul>
<li><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_msleep
</ul>
<p><strong><a name="[a08]"></a>krhino_task_yield</strong>(40 bytes, Stack size 0 btyes, k_task.o(.text.krhino_task_yield))<br>
<p><strong><a name="[a09]"></a>krhino_cur_task_get</strong>(24 bytes, Stack size 8 btyes, k_task.o(.text.krhino_cur_task_get))<br>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</ul>
<br>[Called By]<ul>
<li><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_deathbed
</ul>
<p><strong><a name="[a0a]"></a>task_suspend</strong>(152 bytes, Stack size 0 btyes, k_task.o(.text.task_suspend))<br>
<p><strong><a name="[a0b]"></a>krhino_task_suspend</strong>(30 bytes, Stack size 0 btyes, k_task.o(.text.krhino_task_suspend))<br>
<p><strong><a name="[a0c]"></a>task_resume</strong>(128 bytes, Stack size 0 btyes, k_task.o(.text.task_resume))<br>
<p><strong><a name="[a0d]"></a>krhino_task_resume</strong>(16 bytes, Stack size 0 btyes, k_task.o(.text.krhino_task_resume))<br>
<p><strong><a name="[a0e]"></a>krhino_task_stack_min_free</strong>(50 bytes, Stack size 0 btyes, k_task.o(.text.krhino_task_stack_min_free))<br>
<p><strong><a name="[a0f]"></a>task_pri_change</strong>(224 bytes, Stack size 20 btyes, k_task.o(.text.task_pri_change))<br>
<br>[Stack]<ul><li>Max Depth = 36 
<li>Call Chain = task_pri_change &rArr; ready_list_rm &rArr; k_err_proc_debug  </ul>
<br>[Calls]<ul>
<li><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<li><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
<li><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<li><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_reorder
<li><a href="#[9c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_pri_look
<li><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc_debug
</ul>
<br>[Called By]<ul>
<li><a href="#[9c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_release.isra.1
</ul>
<p><strong><a name="[a10]"></a>krhino_task_pri_change</strong>(128 bytes, Stack size 0 btyes, k_task.o(.text.krhino_task_pri_change))<br>
<p><strong><a name="[a11]"></a>krhino_task_wait_abort</strong>(172 bytes, Stack size 0 btyes, k_task.o(.text.krhino_task_wait_abort))<br>
<p><strong><a name="[a12]"></a>krhino_task_del</strong>(228 bytes, Stack size 12 btyes, k_task.o(.text.krhino_task_del))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = krhino_task_del &rArr; task_mutex_free.isra.3 &rArr; pend_task_wakeup  &rArr; ready_list_add  &rArr; _ready_list_add_tail  &rArr; ready_list_init  </ul>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<li><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_free.isra.3
<li><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___gnu_csky_case_uqi
<li><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<li><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del_hook
<li><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<li><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<li><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_task_pri_reset
</ul>
<br>[Called By]<ul>
<li><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_deathbed
</ul>
<p><strong><a name="[a13]"></a>krhino_task_dyn_del</strong>(332 bytes, Stack size 24 btyes, k_task.o(.text.krhino_task_dyn_del))<br>
<br>[Stack]<ul><li>Max Depth = 68 
<li>Call Chain = krhino_task_dyn_del &rArr; krhino_sem_give &rArr; sem_give  &rArr; pend_task_wakeup  &rArr; ready_list_add  &rArr; _ready_list_add_tail  &rArr; ready_list_init  </ul>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<li><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give
<li><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc_debug
<li><a href="#[a03]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_mutex_free.isra.3
<li><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___gnu_csky_case_uqi
<li><a href="#[9ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_rm
<li><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del_hook
<li><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
<li><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<li><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_task_pri_reset
</ul>
<br>[Called By]<ul>
<li><a href="#[a1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_deathbed
<li><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_exit
</ul>
<p><strong><a name="[a14]"></a>krhino_task_cancel</strong>(42 bytes, Stack size 0 btyes, k_task.o(.text.krhino_task_cancel))<br>
<p><strong><a name="[a15]"></a>krhino_task_cancel_chk</strong>(28 bytes, Stack size 0 btyes, k_task.o(.text.krhino_task_cancel_chk))<br>
<p><strong><a name="[a16]"></a>krhino_task_time_slice_set</strong>(60 bytes, Stack size 0 btyes, k_task.o(.text.krhino_task_time_slice_set))<br>
<p><strong><a name="[a17]"></a>krhino_sched_param_set</strong>(68 bytes, Stack size 0 btyes, k_task.o(.text.krhino_sched_param_set))<br>
<p><strong><a name="[a18]"></a>krhino_sched_policy_set</strong>(20 bytes, Stack size 0 btyes, k_task.o(.text.krhino_sched_policy_set))<br>
<p><strong><a name="[a19]"></a>krhino_sched_policy_get</strong>(60 bytes, Stack size 0 btyes, k_task.o(.text.krhino_sched_policy_get))<br>
<p><strong><a name="[a1a]"></a>krhino_task_deathbed</strong>(28 bytes, Stack size 4 btyes, k_task.o(.text.krhino_task_deathbed))<br>
<br>[Stack]<ul><li>Max Depth = 72 
<li>Call Chain = krhino_task_deathbed &rArr; krhino_task_dyn_del &rArr; krhino_sem_give  &rArr; sem_give  &rArr; pend_task_wakeup  &rArr; ready_list_add  &rArr; _ready_list_add_tail  &rArr; ready_list_init  </ul>
<br>[Calls]<ul>
<li><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<li><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<li><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
</ul>
<p><strong><a name="[a1b]"></a>krhino_task_find</strong>(14 bytes, Stack size 0 btyes, k_task.o(.text.krhino_task_find))<br>
<p><strong><a name="[a1c]"></a>krhino_task_sem_create</strong>(36 bytes, Stack size 0 btyes, k_task_sem.o(.text.krhino_task_sem_create))<br>
<p><strong><a name="[a1d]"></a>krhino_task_sem_del</strong>(18 bytes, Stack size 0 btyes, k_task_sem.o(.text.krhino_task_sem_del))<br>
<p><strong><a name="[a1e]"></a>krhino_task_sem_give</strong>(18 bytes, Stack size 0 btyes, k_task_sem.o(.text.krhino_task_sem_give))<br>
<p><strong><a name="[a1f]"></a>krhino_task_sem_take</strong>(22 bytes, Stack size 0 btyes, k_task_sem.o(.text.krhino_task_sem_take))<br>
<p><strong><a name="[a20]"></a>krhino_task_sem_count_set</strong>(18 bytes, Stack size 0 btyes, k_task_sem.o(.text.krhino_task_sem_count_set))<br>
<p><strong><a name="[a21]"></a>krhino_task_sem_count_get</strong>(18 bytes, Stack size 0 btyes, k_task_sem.o(.text.krhino_task_sem_count_get))<br>
<p><strong><a name="[a23]"></a>tick_list_init</strong>(12 bytes, Stack size 0 btyes, k_tick.o(.text.tick_list_init))<br>
<br>[Called By]<ul>
<li><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</ul>
<p><strong><a name="[a24]"></a>tick_list_insert</strong>(116 bytes, Stack size 28 btyes, k_tick.o(.text.tick_list_insert))<br>
<br>[Called By]<ul>
<li><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<li><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
</ul>
<p><strong><a name="[a25]"></a>tick_list_rm</strong>(10 bytes, Stack size 4 btyes, k_tick.o(.text.tick_list_rm))<br>
<br>[Calls]<ul>
<li><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm_init
</ul>
<br>[Called By]<ul>
<li><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<li><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<li><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<li><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
</ul>
<p><strong><a name="[a26]"></a>tick_list_update</strong>(272 bytes, Stack size 32 btyes, k_tick.o(.text.tick_list_update))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = tick_list_update &rArr; ready_list_add &rArr; _ready_list_add_tail  &rArr; ready_list_init  </ul>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<li><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___gnu_csky_case_uqi
<li><a href="#[a22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;klist_rm_init
<li><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
<li><a href="#[9ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_task_pri_reset
<li><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc_debug
</ul>
<br>[Called By]<ul>
<li><a href="#[a27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_tick_proc
</ul>
<p><strong><a name="[a27]"></a>krhino_tick_proc</strong>(20 bytes, Stack size 4 btyes, k_time.o(.text.krhino_tick_proc))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = krhino_tick_proc &rArr; tick_list_update &rArr; ready_list_add  &rArr; _ready_list_add_tail  &rArr; ready_list_init  </ul>
<br>[Calls]<ul>
<li><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_tick_hook
<li><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<li><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_slice_update
</ul>
<br>[Called By]<ul>
<li><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CORET_IRQHandler
</ul>
<p><strong><a name="[a28]"></a>krhino_sys_tick_get</strong>(28 bytes, Stack size 12 btyes, k_time.o(.text.krhino_sys_tick_get))<br>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
</ul>
<br>[Called By]<ul>
<li><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
<li><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_time_get
</ul>
<p><strong><a name="[a29]"></a>krhino_sys_time_get</strong>(28 bytes, Stack size 4 btyes, k_time.o(.text.krhino_sys_time_get))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = krhino_sys_time_get &rArr; __udivdi3 </ul>
<br>[Calls]<ul>
<li><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_tick_get
<li><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldi3
<li><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivdi3
</ul>
<br>[Called By]<ul>
<li><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_now_ms
</ul>
<p><strong><a name="[a2a]"></a>krhino_ms_to_ticks</strong>(24 bytes, Stack size 4 btyes, k_time.o(.text.krhino_ms_to_ticks))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = krhino_ms_to_ticks &rArr; __udivdi3 </ul>
<br>[Calls]<ul>
<li><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldi3
<li><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivdi3
</ul>
<br>[Called By]<ul>
<li><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mutex_lock
<li><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_init
<li><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_start
<li><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<li><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<li><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_new_ext
<li><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_change
<li><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_change_once
<li><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_msleep
</ul>
<p><strong><a name="[a2b]"></a>krhino_ticks_to_ms</strong>(24 bytes, Stack size 0 btyes, k_time.o(.text.krhino_ticks_to_ms))<br>
<p><strong><a name="[a31]"></a>krhino_timer_del</strong>(40 bytes, Stack size 0 btyes, k_timer.o(.text.krhino_timer_del))<br>
<p><strong><a name="[a32]"></a>krhino_timer_dyn_del</strong>(40 bytes, Stack size 28 btyes, k_timer.o(.text.krhino_timer_dyn_del))<br>
<br>[Stack]<ul><li>Max Depth = 76 
<li>Call Chain = krhino_timer_dyn_del &rArr; krhino_buf_queue_send &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
</ul>
<br>[Called By]<ul>
<li><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_free
</ul>
<p><strong><a name="[a33]"></a>krhino_timer_start</strong>(40 bytes, Stack size 28 btyes, k_timer.o(.text.krhino_timer_start))<br>
<br>[Stack]<ul><li>Max Depth = 76 
<li>Call Chain = krhino_timer_start &rArr; krhino_buf_queue_send &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
</ul>
<br>[Called By]<ul>
<li><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_start
<li><a href="#[a34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_dyn_create
<li><a href="#[a35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_create
<li><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_start
</ul>
<p><strong><a name="[a34]"></a>krhino_timer_dyn_create</strong>(202 bytes, Stack size 48 btyes, k_timer.o(.text.krhino_timer_dyn_create))<br>
<br>[Stack]<ul><li>Max Depth = 124 
<li>Call Chain = krhino_timer_dyn_create &rArr; krhino_timer_start &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
<li><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_start
<li><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
</ul>
<br>[Called By]<ul>
<li><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_new_ext
</ul>
<p><strong><a name="[a35]"></a>krhino_timer_create</strong>(138 bytes, Stack size 28 btyes, k_timer.o(.text.krhino_timer_create))<br>
<br>[Stack]<ul><li>Max Depth = 104 
<li>Call Chain = krhino_timer_create &rArr; krhino_timer_start &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[a33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_timer_start
</ul>
<br>[Called By]<ul>
<li><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_init
</ul>
<p><strong><a name="[a36]"></a>krhino_timer_stop</strong>(40 bytes, Stack size 28 btyes, k_timer.o(.text.krhino_timer_stop))<br>
<br>[Stack]<ul><li>Max Depth = 76 
<li>Call Chain = krhino_timer_stop &rArr; krhino_buf_queue_send &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
</ul>
<br>[Called By]<ul>
<li><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_start
<li><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_stop
<li><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_stop
</ul>
<p><strong><a name="[a37]"></a>krhino_timer_change</strong>(80 bytes, Stack size 36 btyes, k_timer.o(.text.krhino_timer_change))<br>
<br>[Stack]<ul><li>Max Depth = 84 
<li>Call Chain = krhino_timer_change &rArr; krhino_buf_queue_send &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
</ul>
<br>[Called By]<ul>
<li><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_start
<li><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_change
<li><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_change_once
</ul>
<p><strong><a name="[a38]"></a>krhino_timer_arg_change</strong>(40 bytes, Stack size 0 btyes, k_timer.o(.text.krhino_timer_arg_change))<br>
<p><strong><a name="[a39]"></a>krhino_timer_arg_change_auto</strong>(40 bytes, Stack size 0 btyes, k_timer.o(.text.krhino_timer_arg_change_auto))<br>
<p><strong><a name="[a3a]"></a>ktimer_init</strong>(100 bytes, Stack size 28 btyes, k_timer.o(.text.ktimer_init))<br>
<br>[Stack]<ul><li>Max Depth = 152 
<li>Call Chain = ktimer_init &rArr; krhino_task_create &rArr; task_create.isra.0.part.1.constprop.10  &rArr; ready_list_add_tail  &rArr; _ready_list_add_tail  &rArr; ready_list_init  </ul>
<br>[Calls]<ul>
<li><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_fix_buf_queue_create
<li><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
</ul>
<br>[Called By]<ul>
<li><a href="#[9fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init
</ul>
<p><strong><a name="[a3b]"></a>csky_get_tee_caller_task</strong>(40 bytes, Stack size 0 btyes, src_csky_802_csky_sched.o(.text.csky_get_tee_caller_task))<br>
<p><strong><a name="[a3c]"></a>csky_deal_tee_caller_task</strong>(84 bytes, Stack size 0 btyes, src_csky_802_csky_sched.o(.text.csky_deal_tee_caller_task))<br>
<p><strong><a name="[a3d]"></a>cpu_task_stack_init</strong>(216 bytes, Stack size 4 btyes, src_csky_802_port_c.o(.text.cpu_task_stack_init))<br>
<br>[Called By]<ul>
<li><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create.isra.0.part.1.constprop.10
</ul>
<p><strong><a name="[a3e]"></a>cpu_intrpt_save</strong>(0 bytes, Stack size 0 btyes, src_csky_802_port_s.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_lock
<li><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TIM1_IRQHandler
<li><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event1
<li><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<li><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<li><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
<li><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<li><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<li><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<li><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_disable
<li><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_enable
<li><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_slice_update
<li><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<li><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<li><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create.isra.0.part.1.constprop.10
<li><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<li><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<li><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<li><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<li><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<li><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_tick_get
<li><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<li><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<li><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<li><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
<li><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
<li><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_alloc
<li><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_free
</ul>
<p><strong><a name="[a3f]"></a>non_tspend_cpu_task_switch</strong>(0 bytes, Stack size 0 btyes, src_csky_802_port_s.o(.text.non_tspend_cpu_task_switch))<br>
<p><strong><a name="[a40]"></a>non_tspend_cpu_intrpt_switch</strong>(0 bytes, Stack size 0 btyes, src_csky_802_port_s.o(.text.non_tspend_cpu_intrpt_switch))<br>
<p><strong><a name="[a41]"></a>non_tspend_cpu_first_task_start</strong>(0 bytes, Stack size 0 btyes, src_csky_802_port_s.o(.text.non_tspend_cpu_first_task_start))<br>
<p><strong><a name="[a43]"></a>Default_IRQHandler</strong>(0 bytes, Stack size 0 btyes, src_csky_802_port_s.o(.text.Default_IRQHandler))<br>
<p><strong><a name="[a44]"></a>NOVIC_IRQ_Default_Handler</strong>(0 bytes, Stack size 0 btyes, src_csky_802_port_s.o(.text.Default_IRQHandler))<br>
<p><strong><a name="[a45]"></a>cpu_intrpt_restore</strong>(0 bytes, Stack size 0 btyes, src_csky_802_port_s.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_unlock
<li><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__TIM1_IRQHandler
<li><a href="#[957]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osal_set_event1
<li><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<li><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<li><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
<li><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<li><a href="#[9cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_lock
<li><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
<li><a href="#[9e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_disable
<li><a href="#[9e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sched_enable
<li><a href="#[9f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_slice_update
<li><a href="#[9fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_enter
<li><a href="#[9ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_intrpt_exit
<li><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create.isra.0.part.1.constprop.10
<li><a href="#[a07]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_sleep
<li><a href="#[a09]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_cur_task_get
<li><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<li><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<li><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<li><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_tick_get
<li><a href="#[9f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sem_give
<li><a href="#[9f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_del
<li><a href="#[9f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_take
<li><a href="#[99e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_send
<li><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
<li><a href="#[9c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_alloc
<li><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_free
</ul>
<p><strong><a name="[a46]"></a>cpu_pwr_child_add</strong>(84 bytes, Stack size 0 btyes, src_cpu_pwr_hal_lib.o(.text.cpu_pwr_child_add))<br>
<p><strong><a name="[a47]"></a>cpu_pwr_c_method_set_by_level</strong>(20 bytes, Stack size 0 btyes, src_cpu_pwr_hal_lib.o(.text.cpu_pwr_c_method_set_by_level))<br>
<p><strong><a name="[a48]"></a>cpu_pwr_c_state_get</strong>(28 bytes, Stack size 0 btyes, src_cpu_pwr_hal_lib.o(.text.cpu_pwr_c_state_get))<br>
<p><strong><a name="[a49]"></a>cpu_pwr_c_state_set</strong>(268 bytes, Stack size 0 btyes, src_cpu_pwr_hal_lib.o(.text.cpu_pwr_c_state_set))<br>
<p><strong><a name="[a4a]"></a>cpu_pwr_c_state_capability_set</strong>(76 bytes, Stack size 0 btyes, src_cpu_pwr_hal_lib.o(.text.cpu_pwr_c_state_capability_set))<br>
<p><strong><a name="[a4b]"></a>cpu_pwr_c_state_capability_get</strong>(80 bytes, Stack size 0 btyes, src_cpu_pwr_hal_lib.o(.text.cpu_pwr_c_state_capability_get))<br>
<p><strong><a name="[a4c]"></a>cpu_pwr_c_state_capability_set_by_level</strong>(20 bytes, Stack size 0 btyes, src_cpu_pwr_hal_lib.o(.text.cpu_pwr_c_state_capability_set_by_level))<br>
<p><strong><a name="[a4d]"></a>cpu_pwr_c_state_latency_save</strong>(268 bytes, Stack size 0 btyes, src_cpu_pwr_hal_lib.o(.text.cpu_pwr_c_state_latency_save))<br>
<p><strong><a name="[a4e]"></a>cpu_pwr_c_state_latency_get</strong>(80 bytes, Stack size 0 btyes, src_cpu_pwr_hal_lib.o(.text.cpu_pwr_c_state_latency_get))<br>
<p><strong><a name="[a4f]"></a>cpu_pwr_hal_lib_init</strong>(92 bytes, Stack size 0 btyes, src_cpu_pwr_hal_lib.o(.text.cpu_pwr_hal_lib_init))<br>
<p><strong><a name="[a54]"></a>cpu_pwr_node_find_by_name</strong>(24 bytes, Stack size 0 btyes, src_cpu_pwr_hal_lib.o(.text.cpu_pwr_node_find_by_name))<br>
<p><strong><a name="[a55]"></a>cpu_pwr_node_init_</strong>(52 bytes, Stack size 0 btyes, src_cpu_pwr_hal_lib.o(.text.cpu_pwr_node_init_))<br>
<p><strong><a name="[a56]"></a>cpu_pwr_node_init_static</strong>(22 bytes, Stack size 0 btyes, src_cpu_pwr_hal_lib.o(.text.cpu_pwr_node_init_static))<br>
<p><strong><a name="[a57]"></a>cpu_pwr_node_init_dyn</strong>(50 bytes, Stack size 0 btyes, src_cpu_pwr_hal_lib.o(.text.cpu_pwr_node_init_dyn))<br>
<p><strong><a name="[a58]"></a>cpu_pwr_leaf_node_record</strong>(44 bytes, Stack size 0 btyes, src_cpu_pwr_hal_lib.o(.text.cpu_pwr_leaf_node_record))<br>
<p><strong><a name="[a59]"></a>cpu_pwrmgmt_init</strong>(28 bytes, Stack size 0 btyes, src_cpu_pwr_lib.o(.text.cpu_pwrmgmt_init))<br>
<p><strong><a name="[a5a]"></a>cpu_pwr_enabled</strong>(12 bytes, Stack size 0 btyes, src_cpu_pwr_lib.o(.text.cpu_pwr_enabled))<br>
<p><strong><a name="[a5b]"></a>cpu_pwr_down</strong>(64 bytes, Stack size 0 btyes, src_cpu_pwr_lib.o(.text.cpu_pwr_down))<br>
<p><strong><a name="[a5c]"></a>cpu_pwr_up</strong>(64 bytes, Stack size 0 btyes, src_cpu_pwr_lib.o(.text.cpu_pwr_up))<br>
<p><strong><a name="[a5d]"></a>cpu_pwr_idle_mode_set</strong>(44 bytes, Stack size 0 btyes, src_cpu_pwr_lib.o(.text.cpu_pwr_idle_mode_set))<br>
<p><strong><a name="[a5e]"></a>cpu_pwr_idle_mode_get</strong>(16 bytes, Stack size 0 btyes, src_cpu_pwr_lib.o(.text.cpu_pwr_idle_mode_get))<br>
<p><strong><a name="[a60]"></a>cpu_pwr_topology_show</strong>(56 bytes, Stack size 0 btyes, src_cpu_pwr_show.o(.text.cpu_pwr_topology_show))<br>
<p><strong><a name="[a61]"></a>cpu_pwr_state_show</strong>(44 bytes, Stack size 0 btyes, src_cpu_pwr_show.o(.text.cpu_pwr_state_show))<br>
<p><strong><a name="[a62]"></a>__div32</strong>(108 bytes, Stack size 0 btyes, _divsi3.o(.text))<br>
<p><strong><a name="[a63]"></a>__divsi3</strong>(108 bytes, Stack size 0 btyes, _divsi3.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<li><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAdvExtIndPDU1
<li><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAuxAdvIndPDU1
<li><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI___dtostr
<li><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_erase
</ul>
<p><strong><a name="[a64]"></a>__udiv32</strong>(74 bytes, Stack size 0 btyes, _udivsi3.o(.text))<br>
<p><strong><a name="[a65]"></a>__udivsi3</strong>(74 bytes, Stack size 0 btyes, _udivsi3.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_dfu_flash
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtbv_get_part_info
<li><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;part_flash_erase
<li><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_adptive_adj_next_time1
<li><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupSyncInfo
<li><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAdvExtIndPDU1
<li><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAuxAdvIndPDU1
<li><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAuxChainIndPDU1
<li><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupAuxScanRspPDU1
<li><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_config_baudrate
<li><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;yoc_spiflash_get_info
<li><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__divdi3
<li><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__moddi3
<li><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivdi3
<li><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__umoddi3
<li><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_init
<li><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_erase
</ul>
<p><strong><a name="[a66]"></a>__modsi3</strong>(78 bytes, Stack size 0 btyes, _modsi3.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str2_char
<li><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI___dtostr
<li><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_freqoff_store
</ul>
<p><strong><a name="[a67]"></a>__rem32</strong>(78 bytes, Stack size 0 btyes, _modsi3.o(.text))<br>
<p><strong><a name="[a68]"></a>__umodsi3</strong>(48 bytes, Stack size 0 btyes, _umodsi3.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[927]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_scan_timer
<li><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_dma_start
<li><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_config_baudrate
<li><a href="#[a70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__divdi3
<li><a href="#[a71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__moddi3
<li><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivdi3
<li><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__umoddi3
</ul>
<p><strong><a name="[a69]"></a>__urem32</strong>(48 bytes, Stack size 0 btyes, _umodsi3.o(.text))<br>
<p><strong><a name="[a6a]"></a>___gnu_csky_case_sqi</strong>(22 bytes, Stack size 0 btyes, _csky_case_sqi.o(.text))<br>
<p><strong><a name="[a6b]"></a>___gnu_csky_case_uqi</strong>(20 bytes, Stack size 0 btyes, _csky_case_uqi.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_receive_msg
<li><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ais_state_update
<li><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_update_timer_cb
<li><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_test_at.constprop.1
<li><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSetupExtAdvLegacyEvent
<li><a href="#[9d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_state_end_proc
<li><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<li><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
<li><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<li><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
<li><a href="#[893]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_tp_cal
<li><a href="#[884]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rxDcoc_cfg
<li><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_config_databits
<li><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw_usart_irqhandler
<li><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_uart_init
</ul>
<p><strong><a name="[a6c]"></a>___gnu_csky_case_shi</strong>(28 bytes, Stack size 0 btyes, _csky_case_shi.o(.text))<br>
<p><strong><a name="[a6d]"></a>___gnu_csky_case_uhi</strong>(26 bytes, Stack size 0 btyes, _csky_case_uhi.o(.text))<br>
<p><strong><a name="[a6e]"></a>__muldi3</strong>(68 bytes, Stack size 20 btyes, _muldi3.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_time_get
<li><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
<li><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldf3
<li><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__v2_scanf
</ul>
<p><strong><a name="[a6f]"></a>__fixunssfsi</strong>(46 bytes, Stack size 0 btyes, _fixunssfsi.o(.text))<br>
<p><strong><a name="[a70]"></a>__divdi3</strong>(1000 bytes, Stack size 48 btyes, _divdi3.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__umodsi3
<li><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivsi3
</ul>
<br>[Called By]<ul>
<li><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_format_time
</ul>
<p><strong><a name="[a71]"></a>__moddi3</strong>(1020 bytes, Stack size 52 btyes, _moddi3.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__umodsi3
<li><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivsi3
</ul>
<br>[Called By]<ul>
<li><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_format_time
</ul>
<p><strong><a name="[a72]"></a>__udivdi3</strong>(952 bytes, Stack size 44 btyes, _udivdi3.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__umodsi3
<li><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivsi3
</ul>
<br>[Called By]<ul>
<li><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__v2_printf
<li><a href="#[a29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_time_get
<li><a href="#[a2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_ms_to_ticks
</ul>
<p><strong><a name="[a74]"></a>__addsf3</strong>(42 bytes, Stack size 0 btyes, _addsub_sf.o(.text))<br>
<p><strong><a name="[a75]"></a>__subsf3</strong>(50 bytes, Stack size 0 btyes, _addsub_sf.o(.text))<br>
<p><strong><a name="[a76]"></a>__mulsf3</strong>(268 bytes, Stack size 0 btyes, _mul_sf.o(.text))<br>
<p><strong><a name="[a77]"></a>__divsf3</strong>(188 bytes, Stack size 0 btyes, _div_sf.o(.text))<br>
<p><strong><a name="[a78]"></a>__gesf2</strong>(56 bytes, Stack size 0 btyes, _ge_sf.o(.text))<br>
<p><strong><a name="[a79]"></a>__floatsisf</strong>(82 bytes, Stack size 0 btyes, _si_to_sf.o(.text))<br>
<p><strong><a name="[a7a]"></a>__fixsfsi</strong>(80 bytes, Stack size 0 btyes, _sf_to_si.o(.text))<br>
<p><strong><a name="[a7b]"></a>__extendsfdf2</strong>(36 bytes, Stack size 0 btyes, _sf_to_df.o(.text))<br>
<p><strong><a name="[a7c]"></a>__floatunsisf</strong>(96 bytes, Stack size 0 btyes, _usi_to_sf.o(.text))<br>
<p><strong><a name="[a7d]"></a>__muldf3</strong>(556 bytes, Stack size 128 btyes, _mul_df.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 156 
<li>Call Chain = __muldf3 &rArr; __pack_d </ul>
<br>[Calls]<ul>
<li><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_d
<li><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldi3
<li><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_d
</ul>
<br>[Called By]<ul>
<li><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI___dtostr
<li><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__v2_scanf
</ul>
<p><strong><a name="[a7e]"></a>__floatsidf</strong>(104 bytes, Stack size 32 btyes, _si_to_df.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 60 
<li>Call Chain = __floatsidf &rArr; __pack_d </ul>
<br>[Calls]<ul>
<li><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_d
</ul>
<br>[Called By]<ul>
<li><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI___dtostr
<li><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__v2_scanf
</ul>
<p><strong><a name="[a7f]"></a>__make_dp</strong>(40 bytes, Stack size 0 btyes, _make_df.o(.text))<br>
<p><strong><a name="[a80]"></a>__truncdfsf2</strong>(50 bytes, Stack size 32 btyes, _df_to_sf.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 56 
<li>Call Chain = __truncdfsf2 &rArr; __make_fp &rArr; __pack_f  </ul>
<br>[Calls]<ul>
<li><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_d
<li><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__make_fp
</ul>
<br>[Called By]<ul>
<li><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__v2_scanf
</ul>
<p><strong><a name="[a81]"></a>__pack_f</strong>(224 bytes, Stack size 4 btyes, _pack_sf.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[a84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__make_fp
</ul>
<p><strong><a name="[a82]"></a>__unpack_f</strong>(124 bytes, Stack size 0 btyes, _unpack_sf.o(.text))<br>
<p><strong><a name="[a83]"></a>__fpcmp_parts_f</strong>(146 bytes, Stack size 0 btyes, _fpcmp_parts_sf.o(.text))<br>
<p><strong><a name="[a84]"></a>__make_fp</strong>(22 bytes, Stack size 20 btyes, _make_sf.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = __make_fp &rArr; __pack_f </ul>
<br>[Calls]<ul>
<li><a href="#[a81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_f
</ul>
<br>[Called By]<ul>
<li><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__truncdfsf2
</ul>
<p><strong><a name="[a85]"></a>__pack_d</strong>(408 bytes, Stack size 28 btyes, _pack_df.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldf3
<li><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatsidf
<li><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__adddf3
<li><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subdf3
<li><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__divdf3
</ul>
<p><strong><a name="[a86]"></a>__unpack_d</strong>(184 bytes, Stack size 12 btyes, _unpack_df.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldf3
<li><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__truncdfsf2
<li><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__adddf3
<li><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subdf3
<li><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__divdf3
<li><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__eqdf2
<li><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gtdf2
<li><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ltdf2
<li><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fixdfsi
</ul>
<p><strong><a name="[a87]"></a>__isalnum_fast</strong>(12 bytes, Stack size 0 btyes, isalnum_fast.o(.text))<br>
<p><strong><a name="[a88]"></a>isalnum</strong>(12 bytes, Stack size 0 btyes, isalnum_fast.o(.text))<br>
<p><strong><a name="[a89]"></a>__GI_isprint</strong>(10 bytes, Stack size 0 btyes, isprint.o(.text))<br>
<p><strong><a name="[a8a]"></a>isprint</strong>(10 bytes, Stack size 0 btyes, isprint.o(.text))<br>
<p><strong><a name="[a8b]"></a>__isxdigit_fast</strong>(12 bytes, Stack size 0 btyes, isxdigit_fast.o(.text))<br>
<p><strong><a name="[a8c]"></a>isxdigit</strong>(12 bytes, Stack size 0 btyes, isxdigit_fast.o(.text))<br>
<p><strong><a name="[a8d]"></a>__GI_tolower</strong>(14 bytes, Stack size 0 btyes, tolower.o(.text))<br>
<p><strong><a name="[a8e]"></a>tolower</strong>(14 bytes, Stack size 0 btyes, tolower.o(.text))<br>
<p><strong><a name="[a8f]"></a>__GI_toupper</strong>(14 bytes, Stack size 0 btyes, toupper.o(.text))<br>
<p><strong><a name="[a90]"></a>toupper</strong>(14 bytes, Stack size 0 btyes, toupper.o(.text))<br>
<p><strong><a name="[a91]"></a>minilibc_init</strong>(60 bytes, Stack size 0 btyes, minilibc_init.o(.text))<br>
<p><strong><a name="[a92]"></a>__GI_os_critical_open</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<p><strong><a name="[a93]"></a>os_critical_open</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<p><strong><a name="[a94]"></a>__GI_os_critical_enter</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<p><strong><a name="[24]"></a>os_critical_enter</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stdio_outs
</ul>
<p><strong><a name="[a95]"></a>__GI_os_critical_exit</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<p><strong><a name="[25]"></a>os_critical_exit</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[a9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__stdio_outs
</ul>
<p><strong><a name="[a96]"></a>__GI_os_critical_close</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<p><strong><a name="[a97]"></a>os_critical_close</strong>(4 bytes, Stack size 0 btyes, critical.o(.text))<br>
<p><strong><a name="[a98]"></a>__GI_printf</strong>(28 bytes, Stack size 20 btyes, printf.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = __GI_printf &rArr; __cskyvprintfvprintf &rArr; __v2_printf  &rArr; __umoddi3  </ul>
<br>[Calls]<ul>
<li><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cskyvprintfvprintf
</ul>
<p><strong><a name="[a99]"></a>printf</strong>(28 bytes, Stack size 0 btyes, printf.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_handle_version_request
<li><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_handle_update_request
<li><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ble_ais_service_write
<li><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;board_yoc_init
<li><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soc_err_proc
<li><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;except_process_function
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog
<li><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trap_c
<li><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_service_init
<li><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_cut
<li><a href="#[8f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLECreateConnCancel
<li><a href="#[939]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLECreateConn
<li><a href="#[93c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciProcessHostToCtrlData
<li><a href="#[935]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_H5_RecvCallback
<li><a href="#[947]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetAdvParam
<li><a href="#[948]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetAdvData
<li><a href="#[94b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciExtSwUpgrade
<li><a href="#[92f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetAdvEnab
<li><a href="#[932]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetScanEnable
<li><a href="#[967]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_uart_loop
<li><a href="#[9bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_alloc
</ul>
<p><strong><a name="[a9a]"></a>__stdio_outs</strong>(52 bytes, Stack size 0 btyes, vprintf_required.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 120 
<li>Call Chain = __stdio_outs &rArr; fputc &rArr; uart_putc  &rArr; uart_send  &rArr; device_lock  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_critical_enter
<li><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_critical_exit
<li><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</ul>
<p><strong><a name="[a9b]"></a>__GI_vprintf</strong>(32 bytes, Stack size 12 btyes, vprintf.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 184 
<li>Call Chain = __GI_vprintf &rArr; __v2_printf &rArr; __umoddi3  </ul>
<br>[Calls]<ul>
<li><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__v2_printf
</ul>
<p><strong><a name="[a9c]"></a>vprintf</strong>(32 bytes, Stack size 0 btyes, vprintf.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog
</ul>
<p><strong><a name="[a9e]"></a>__GI_vsnprintf</strong>(90 bytes, Stack size 32 btyes, vsnprintf.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = __GI_vsnprintf &rArr; __v2_printf &rArr; __umoddi3  </ul>
<br>[Calls]<ul>
<li><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__v2_printf
</ul>
<p><strong><a name="[a9f]"></a>vsnprintf</strong>(90 bytes, Stack size 0 btyes, vsnprintf.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vasprintf
</ul>
<p><strong><a name="[aa0]"></a>__GI_sprintf</strong>(26 bytes, Stack size 16 btyes, sprintf.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 228 
<li>Call Chain = __GI_sprintf &rArr; __cskyvprintfvsprintf &rArr; __cskyvprintfvsnprintf  &rArr; __v2_printf  &rArr; __umoddi3  </ul>
<br>[Calls]<ul>
<li><a href="#[ace]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cskyvprintfvsprintf
</ul>
<p><strong><a name="[aa1]"></a>sprintf</strong>(26 bytes, Stack size 0 btyes, sprintf.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
</ul>
<p><strong><a name="[aa2]"></a>__GI_puts</strong>(24 bytes, Stack size 0 btyes, puts.o(.text))<br>
<p><strong><a name="[aa3]"></a>puts</strong>(24 bytes, Stack size 0 btyes, puts.o(.text))<br>
<p><strong><a name="[a9a]"></a>__stdio_outs</strong>(52 bytes, Stack size 0 btyes, vprintf_required.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 120 
<li>Call Chain = __stdio_outs &rArr; fputc &rArr; uart_putc  &rArr; uart_send  &rArr; device_lock  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_critical_enter
<li><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_critical_exit
<li><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</ul>
<p><strong><a name="[aa4]"></a>__cskyvprintfvprintf</strong>(32 bytes, Stack size 12 btyes, vprintf_required.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 184 
<li>Call Chain = __cskyvprintfvprintf &rArr; __v2_printf &rArr; __umoddi3  </ul>
<br>[Calls]<ul>
<li><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__v2_printf
</ul>
<br>[Called By]<ul>
<li><a href="#[a98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_printf
</ul>
<p><strong><a name="[aa5]"></a>__GI_sscanf</strong>(26 bytes, Stack size 16 btyes, sscanf.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 540 
<li>Call Chain = __GI_sscanf &rArr; __cskyvscanfvsscanf &rArr; __v2_scanf  &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cskyvscanfvsscanf
</ul>
<p><strong><a name="[aa6]"></a>sscanf</strong>(26 bytes, Stack size 0 btyes, sscanf.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_version_appver_get
</ul>
<p><strong><a name="[aa7]"></a>__GI_fputs</strong>(72 bytes, Stack size 0 btyes, fputs.o(.text))<br>
<p><strong><a name="[aa8]"></a>fputs</strong>(72 bytes, Stack size 0 btyes, fputs.o(.text))<br>
<p><strong><a name="[aa9]"></a>__GI_fflush</strong>(4 bytes, Stack size 0 btyes, fflush.o(.text))<br>
<p><strong><a name="[aaa]"></a>fflush</strong>(4 bytes, Stack size 0 btyes, fflush.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog
</ul>
<p><strong><a name="[aab]"></a>__GI_snprintf</strong>(24 bytes, Stack size 12 btyes, snprintf.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = __GI_snprintf &rArr; __cskyvprintfvsnprintf &rArr; __v2_printf  &rArr; __umoddi3  </ul>
<br>[Calls]<ul>
<li><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cskyvprintfvsnprintf
</ul>
<p><strong><a name="[aac]"></a>snprintf</strong>(24 bytes, Stack size 0 btyes, snprintf.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog_format_time
</ul>
<p><strong><a name="[aae]"></a>__cskyvprintfvsnprintf</strong>(90 bytes, Stack size 32 btyes, vsnprintf_required.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 204 
<li>Call Chain = __cskyvprintfvsnprintf &rArr; __v2_printf &rArr; __umoddi3  </ul>
<br>[Calls]<ul>
<li><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__v2_printf
</ul>
<br>[Called By]<ul>
<li><a href="#[aab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_snprintf
<li><a href="#[ace]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cskyvprintfvsprintf
</ul>
<p><strong><a name="[aaf]"></a>__GI_rand</strong>(0 bytes, Stack size 0 btyes, rand.o(.text))<br>
<p><strong><a name="[ab0]"></a>rand</strong>(20 bytes, Stack size 0 btyes, rand.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;driver_register
</ul>
<p><strong><a name="[ab1]"></a>__GI_srand</strong>(6 bytes, Stack size 0 btyes, rand.o(.text))<br>
<p><strong><a name="[ab2]"></a>srand</strong>(6 bytes, Stack size 0 btyes, rand.o(.text))<br>
<p><strong><a name="[ab3]"></a>atoi</strong>(12 bytes, Stack size 4 btyes, atoi.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = atoi &rArr; strtol &rArr; strtoul  </ul>
<br>[Calls]<ul>
<li><a href="#[96f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</ul>
<br>[Called By]<ul>
<li><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_tx_single_tone
<li><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_tx_mod_burst
<li><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_rx_demod_burst
<li><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_xtal_cap
<li><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_freqoff
<li><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_rx_current_test
<li><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_gpio_test
<li><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_sleep
<li><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_name_parse.constprop.0
</ul>
<p><strong><a name="[ab4]"></a>__strcmp_fast</strong>(214 bytes, Stack size 0 btyes, strcmp_fast.o(.text))<br>
<p><strong><a name="[ab5]"></a>strcmp</strong>(214 bytes, Stack size 0 btyes, strcmp_fast.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_parse_func.part.0
<li><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_service_cmd_reg
<li><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_find
<li><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_valid
</ul>
<p><strong><a name="[ab6]"></a>__memset_fast</strong>(166 bytes, Stack size 0 btyes, memset_fast.o(.text))<br>
<p><strong><a name="[ab7]"></a>memset</strong>(166 bytes, Stack size 0 btyes, memset_fast.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_int_init
<li><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_status_report
<li><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_handle_version_request
<li><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_handle_update_request
<li><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_parse_pdu
<li><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_check_firmware
<li><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ais_notify
<li><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ble_ais_service_write
<li><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ais_server_init
<li><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_dfu_flash
<li><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_section_addr
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtbv_get_part_info
<li><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_test_at.constprop.1
<li><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_task_entry
<li><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_service_init
<li><a href="#[914]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adv_scan_schd_idle_enter
<li><a href="#[92c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bt_mesh_adv_scan_schd_init
<li><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitConnectContext0
<li><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
<li><a href="#[9b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_add_mm_region
<li><a href="#[9c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_create
<li><a href="#[a04]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create.isra.0.part.1.constprop.10
<li><a href="#[9f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_create
<li><a href="#[996]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buf_queue_create
<li><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuffer_create
<li><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_zalloc
<li><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_init
</ul>
<p><strong><a name="[ab8]"></a>__GI_strcspn</strong>(34 bytes, Stack size 0 btyes, strcspn.o(.text))<br>
<p><strong><a name="[ab9]"></a>strcspn</strong>(34 bytes, Stack size 0 btyes, strcspn.o(.text))<br>
<p><strong><a name="[aba]"></a>__strlen_fast</strong>(62 bytes, Stack size 0 btyes, strlen_fast.o(.text))<br>
<p><strong><a name="[abb]"></a>strlen</strong>(62 bytes, Stack size 0 btyes, strlen_fast.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__v2_printf
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtbv_get_part_info
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog
<li><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_cmd_freqoff
<li><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_sendv
<li><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str2_char
<li><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_name_parse.constprop.0
<li><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_sys_partition
<li><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_init
<li><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_open
<li><a href="#[96c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vasprintf
<li><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
</ul>
<p><strong><a name="[abc]"></a>__strcpy_fast</strong>(202 bytes, Stack size 0 btyes, strcpy_fast.o(.text))<br>
<p><strong><a name="[abd]"></a>strcpy</strong>(202 bytes, Stack size 0 btyes, strcpy_fast.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__v2_printf
</ul>
<p><strong><a name="[abe]"></a>__GI_strspn</strong>(34 bytes, Stack size 0 btyes, strspn.o(.text))<br>
<p><strong><a name="[abf]"></a>strspn</strong>(34 bytes, Stack size 0 btyes, strspn.o(.text))<br>
<p><strong><a name="[ac0]"></a>__GI_strstr</strong>(42 bytes, Stack size 0 btyes, strstr.o(.text))<br>
<p><strong><a name="[ac1]"></a>strstr</strong>(42 bytes, Stack size 0 btyes, strstr.o(.text))<br>
<p><strong><a name="[ac2]"></a>__GI_strchr</strong>(18 bytes, Stack size 0 btyes, strchr.o(.text))<br>
<p><strong><a name="[ac3]"></a>strchr</strong>(18 bytes, Stack size 0 btyes, strchr.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__v2_printf
<li><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_test_at.constprop.1
<li><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_cut
</ul>
<p><strong><a name="[ac4]"></a>__GI_strncpy</strong>(44 bytes, Stack size 0 btyes, strncpy.o(.text))<br>
<p><strong><a name="[ac5]"></a>strncpy</strong>(44 bytes, Stack size 0 btyes, strncpy.o(.text))<br>
<p><strong><a name="[ac6]"></a>__memcmp_fast</strong>(330 bytes, Stack size 4 btyes, memcmp_fast.o(.text))<br>
<p><strong><a name="[ac7]"></a>memcmp</strong>(330 bytes, Stack size 0 btyes, memcmp_fast.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_complete_rx_pkt.constprop.11
<li><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;erase_dfu_flash
<li><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;partition_open
</ul>
<p><strong><a name="[ac8]"></a>__GI_strrchr</strong>(24 bytes, Stack size 0 btyes, strrchr.o(.text))<br>
<p><strong><a name="[ac9]"></a>strrchr</strong>(24 bytes, Stack size 0 btyes, strrchr.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_test_at.constprop.1
</ul>
<p><strong><a name="[aca]"></a>__GI_strncmp</strong>(36 bytes, Stack size 4 btyes, strncmp.o(.text))<br>
<p><strong><a name="[acb]"></a>strncmp</strong>(36 bytes, Stack size 0 btyes, strncmp.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_section_addr
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtbv_get_part_info
<li><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtbv4_get_partition_info
</ul>
<p><strong><a name="[acc]"></a>__GI_memchr</strong>(20 bytes, Stack size 0 btyes, memchr.o(.text))<br>
<p><strong><a name="[acd]"></a>memchr</strong>(20 bytes, Stack size 0 btyes, memchr.o(.text))<br>
<p><strong><a name="[ace]"></a>__cskyvprintfvsprintf</strong>(18 bytes, Stack size 8 btyes, vsprintf_required.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 212 
<li>Call Chain = __cskyvprintfvsprintf &rArr; __cskyvprintfvsnprintf &rArr; __v2_printf  &rArr; __umoddi3  </ul>
<br>[Calls]<ul>
<li><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cskyvprintfvsnprintf
</ul>
<br>[Called By]<ul>
<li><a href="#[aa0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_sprintf
</ul>
<p><strong><a name="[ad1]"></a>__cskyvscanfvsscanf</strong>(36 bytes, Stack size 20 btyes, vsscanf_required.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 524 
<li>Call Chain = __cskyvscanfvsscanf &rArr; __v2_scanf &rArr; __muldf3  &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__v2_scanf
</ul>
<br>[Called By]<ul>
<li><a href="#[aa5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_sscanf
</ul>
<p><strong><a name="[ad3]"></a>__v2_printf</strong>(1792 bytes, Stack size 124 btyes, __v2_printfDFHLlMOPpSSsWp.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 172 
<li>Call Chain = __v2_printf &rArr; __umoddi3 </ul>
<br>[Calls]<ul>
<li><a href="#[ae2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__dtostr
<li><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<li><a href="#[abd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<li><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<li><a href="#[ad7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__umoddi3
<li><a href="#[a72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivdi3
<li><a href="#[ad2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PAD.1851
</ul>
<br>[Called By]<ul>
<li><a href="#[a9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_vprintf
<li><a href="#[a9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI_vsnprintf
<li><a href="#[aa4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cskyvprintfvprintf
<li><a href="#[aae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cskyvprintfvsnprintf
</ul>
<p><strong><a name="[ad4]"></a>__v2_printf$DFHLlMOPpSSsWp</strong>(1792 bytes, Stack size 0 btyes, __v2_printfDFHLlMOPpSSsWp.o(.text))<br>
<p><strong><a name="[ad5]"></a>__v2_scanf</strong>(2056 bytes, Stack size 348 btyes, __v2_scanf-int-ll-str-fp.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 504 
<li>Call Chain = __v2_scanf &rArr; __muldf3 &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[adf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<li><a href="#[add]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isdigit
<li><a href="#[a6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldi3
<li><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldf3
<li><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatsidf
<li><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__adddf3
<li><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__divdf3
<li><a href="#[a80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__truncdfsf2
</ul>
<br>[Called By]<ul>
<li><a href="#[ad1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cskyvscanfvsscanf
</ul>
<p><strong><a name="[ad6]"></a>__v2_scanf$FpIntLlStr</strong>(2056 bytes, Stack size 0 btyes, __v2_scanf-int-ll-str-fp.o(.text))<br>
<p><strong><a name="[ad7]"></a>__umoddi3</strong>(932 bytes, Stack size 48 btyes, _umoddi3.o(.text))<br>
<br>[Calls]<ul>
<li><a href="#[a68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__umodsi3
<li><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivsi3
</ul>
<br>[Called By]<ul>
<li><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__v2_printf
</ul>
<p><strong><a name="[ad9]"></a>__adddf3</strong>(46 bytes, Stack size 80 btyes, _addsub_df.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 132 
<li>Call Chain = __adddf3 &rArr; _fpadd_parts </ul>
<br>[Calls]<ul>
<li><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_d
<li><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fpadd_parts
<li><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_d
</ul>
<br>[Called By]<ul>
<li><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI___dtostr
<li><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__v2_scanf
</ul>
<p><strong><a name="[ada]"></a>__subdf3</strong>(54 bytes, Stack size 80 btyes, _addsub_df.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 132 
<li>Call Chain = __subdf3 &rArr; _fpadd_parts </ul>
<br>[Calls]<ul>
<li><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_d
<li><a href="#[ad8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fpadd_parts
<li><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_d
</ul>
<br>[Called By]<ul>
<li><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI___dtostr
</ul>
<p><strong><a name="[adb]"></a>__divdf3</strong>(344 bytes, Stack size 92 btyes, _div_df.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 120 
<li>Call Chain = __divdf3 &rArr; __pack_d </ul>
<br>[Calls]<ul>
<li><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_d
<li><a href="#[a85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pack_d
</ul>
<br>[Called By]<ul>
<li><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI___dtostr
<li><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__v2_scanf
</ul>
<p><strong><a name="[adc]"></a>__GI_isdigit</strong>(8 bytes, Stack size 0 btyes, isdigit.o(.text))<br>
<p><strong><a name="[add]"></a>isdigit</strong>(8 bytes, Stack size 0 btyes, isdigit.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__v2_scanf
</ul>
<p><strong><a name="[ade]"></a>__GI_isspace</strong>(20 bytes, Stack size 0 btyes, isspace.o(.text))<br>
<p><strong><a name="[adf]"></a>isspace</strong>(20 bytes, Stack size 0 btyes, isspace.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[ad5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__v2_scanf
</ul>
<p><strong><a name="[ae1]"></a>__GI___dtostr</strong>(826 bytes, Stack size 68 btyes, __dtostr.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 68 
<li>Call Chain = __GI___dtostr &rArr; __muldf3 &rArr; __pack_d  </ul>
<br>[Calls]<ul>
<li><a href="#[ae4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__isinf
<li><a href="#[ae0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copystring
<li><a href="#[ae3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__isnan
<li><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__eqdf2
<li><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ltdf2
<li><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__adddf3
<li><a href="#[a7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__floatsidf
<li><a href="#[a7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__muldf3
<li><a href="#[ae8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fixdfsi
<li><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gtdf2
<li><a href="#[adb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__divdf3
<li><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subdf3
<li><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI___dtostr
<li><a href="#[a63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__divsi3
<li><a href="#[a66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__modsi3
</ul>
<br>[Called By]<ul>
<li><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI___dtostr
</ul>
<p><strong><a name="[ae2]"></a>__dtostr</strong>(826 bytes, Stack size 0 btyes, __dtostr.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__v2_printf
</ul>
<p><strong><a name="[ae3]"></a>__isnan</strong>(44 bytes, Stack size 0 btyes, __isnan.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI___dtostr
</ul>
<p><strong><a name="[ae4]"></a>__isinf</strong>(42 bytes, Stack size 0 btyes, __isinf.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI___dtostr
</ul>
<p><strong><a name="[ae5]"></a>__eqdf2</strong>(58 bytes, Stack size 60 btyes, _eq_df.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 72 
<li>Call Chain = __eqdf2 &rArr; __unpack_d </ul>
<br>[Calls]<ul>
<li><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_d
<li><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpcmp_parts_d
</ul>
<br>[Called By]<ul>
<li><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI___dtostr
</ul>
<p><strong><a name="[ae6]"></a>__gtdf2</strong>(60 bytes, Stack size 60 btyes, _gt_df.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 72 
<li>Call Chain = __gtdf2 &rArr; __unpack_d </ul>
<br>[Calls]<ul>
<li><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_d
<li><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpcmp_parts_d
</ul>
<br>[Called By]<ul>
<li><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI___dtostr
</ul>
<p><strong><a name="[ae7]"></a>__ltdf2</strong>(58 bytes, Stack size 60 btyes, _lt_df.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 72 
<li>Call Chain = __ltdf2 &rArr; __unpack_d </ul>
<br>[Calls]<ul>
<li><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_d
<li><a href="#[ae9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpcmp_parts_d
</ul>
<br>[Called By]<ul>
<li><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI___dtostr
</ul>
<p><strong><a name="[ae8]"></a>__fixdfsi</strong>(110 bytes, Stack size 36 btyes, _df_to_si.o(.text))<br>
<br>[Stack]<ul><li>Max Depth = 48 
<li>Call Chain = __fixdfsi &rArr; __unpack_d </ul>
<br>[Calls]<ul>
<li><a href="#[a86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__unpack_d
</ul>
<br>[Called By]<ul>
<li><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI___dtostr
</ul>
<p><strong><a name="[ae9]"></a>__fpcmp_parts_d</strong>(152 bytes, Stack size 4 btyes, _fpcmp_parts_df.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[ae5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__eqdf2
<li><a href="#[ae6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__gtdf2
<li><a href="#[ae7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ltdf2
</ul>
<h3>Local Symbols</h3>
<p><strong><a name="[a]"></a>_ais_dis_timer_cb</strong>(2 bytes, Stack size 0 btyes, Obj/src_ais_server.o(.text._ais_dis_timer_cb))<br>
<p><strong><a name="[b]"></a>ble_ais_state_update</strong>(76 bytes, Stack size 4 btyes, Obj/src_ais_server.o(.text.ble_ais_state_update))<br>
<br>[Stack]<ul><li>Max Depth = 104 
<li>Call Chain = ble_ais_state_update &rArr; k_timer_start &rArr; krhino_timer_change  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___gnu_csky_case_uqi
<li><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_stop
<li><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_start
</ul>
<br>[Called By]<ul>
<li><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_update_timer_cb
<li><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ble_ais_service_write
</ul>
<p><strong><a name="[c]"></a>state_update_timer_cb</strong>(112 bytes, Stack size 16 btyes, Obj/src_ais_server.o(.text.state_update_timer_cb))<br>
<br>[Stack]<ul><li>Max Depth = 136 
<li>Call Chain = state_update_timer_cb &rArr; ulog &rArr; log_get_mutex  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___gnu_csky_case_uqi
<li><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ais_state_update
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog
<li><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_ota_status_report
<li><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dfu_reboot
</ul>
<p><strong><a name="[32]"></a>rhino2stderrno</strong>(236 bytes, Stack size 0 btyes, src_adapter_rhino_aos_rhino.o(.text.rhino2stderrno))<br>
<br>[Called By]<ul>
<li><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new_ext
<li><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<li><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<li><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<li><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_new_ext
<li><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_start
<li><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_stop
<li><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_change
<li><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_change_once
<li><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<li><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
</ul>
<p><strong><a name="[33]"></a>trap_c_cb</strong>(22 bytes, Stack size 8 btyes, src_adapter_rhino_aos_rhino.o(.text.trap_c_cb))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = trap_c_cb &rArr; aos_except_process </ul>
<br>[Calls]<ul>
<li><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_except_process
</ul>
<p><strong><a name="[a7]"></a>dev_name_parse.constprop.0</strong>(56 bytes, Stack size 16 btyes, src_devices_device.o(.text.dev_name_parse.constprop.0))<br>
<br>[Stack]<ul><li>Max Depth = 100 
<li>Call Chain = dev_name_parse.constprop.0 &rArr; strdup &rArr; malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[973]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strdup
<li><a href="#[abb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<li><a href="#[ab3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</ul>
<br>[Called By]<ul>
<li><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_open
</ul>
<p><strong><a name="[e7]"></a>run_my_work</strong>(42 bytes, Stack size 0 btyes, src_eventloop_yloop.o(.text.run_my_work))<br>
<p><strong><a name="[ea]"></a>except_process_function</strong>(32 bytes, Stack size 8 btyes, src_except.o(.text.except_process_function))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = except_process_function &rArr; strerror </ul>
<br>[Calls]<ul>
<li><a href="#[974]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strerror
<li><a href="#[a99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<li><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_lock
</ul>
<p><strong><a name="[ee]"></a>_iter_foreach</strong>(34 bytes, Stack size 0 btyes, src_kv.o(.text._iter_foreach))<br>
<p><strong><a name="[ef]"></a>kv_partition_read</strong>(10 bytes, Stack size 0 btyes, src_kv.o(.text.kv_partition_read))<br>
<p><strong><a name="[f0]"></a>kv_partition_write</strong>(10 bytes, Stack size 0 btyes, src_kv.o(.text.kv_partition_write))<br>
<p><strong><a name="[f1]"></a>kv_partition_erase</strong>(12 bytes, Stack size 0 btyes, src_kv.o(.text.kv_partition_erase))<br>
<p><strong><a name="[f2]"></a>kv_flash_read</strong>(44 bytes, Stack size 0 btyes, src_kv.o(.text.kv_flash_read))<br>
<p><strong><a name="[f3]"></a>kv_flash_write</strong>(44 bytes, Stack size 0 btyes, src_kv.o(.text.kv_flash_write))<br>
<p><strong><a name="[f4]"></a>kv_flash_erase</strong>(38 bytes, Stack size 0 btyes, src_kv.o(.text.kv_flash_erase))<br>
<p><strong><a name="[f5]"></a>_iter_list</strong>(28 bytes, Stack size 0 btyes, src_kv.o(.text._iter_list))<br>
<p><strong><a name="[113]"></a>lpm_handle</strong>(72 bytes, Stack size 0 btyes, src_lpm.o(.text.lpm_handle))<br>
<p><strong><a name="[119]"></a>application_task_entry</strong>(14 bytes, Stack size 4 btyes, src_main.o(.text.application_task_entry))<br>
<br>[Stack]<ul><li>Max Depth = 916 
<li>Call Chain = application_task_entry &rArr; main &rArr; board_yoc_init  &rArr; dut_task_entry  &rArr; dut_test_at.constprop.1  &rArr; cmd_parse_func.part.0  &rArr; dut_at_send  &rArr; dut_sendv  &rArr; vasprintf  &rArr; strdup  &rArr; malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<li><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_exit
</ul>
<p><strong><a name="[133]"></a>softwdt_find</strong>(48 bytes, Stack size 0 btyes, src_softwdt.o(.text.softwdt_find))<br>
<p><strong><a name="[134]"></a>softwdt_task_entry</strong>(188 bytes, Stack size 0 btyes, src_softwdt.o(.text.softwdt_task_entry))<br>
<p><strong><a name="[135]"></a>aos_wdt_init</strong>(92 bytes, Stack size 0 btyes, src_softwdt.o(.text.aos_wdt_init))<br>
<p><strong><a name="[15d]"></a>pkey_part_init</strong>(172 bytes, Stack size 0 btyes, src_key_mgr_pub_key.o(.text.pkey_part_init))<br>
<p><strong><a name="[161]"></a>block_erase</strong>(22 bytes, Stack size 0 btyes, block.o(.text.block_erase))<br>
<p><strong><a name="[162]"></a>block_write</strong>(24 bytes, Stack size 0 btyes, block.o(.text.block_write))<br>
<p><strong><a name="[163]"></a>keycmp.part.0</strong>(44 bytes, Stack size 0 btyes, block.o(.text.keycmp.part.0))<br>
<p><strong><a name="[164]"></a>_iter_calc</strong>(76 bytes, Stack size 0 btyes, block.o(.text._iter_calc))<br>
<p><strong><a name="[166]"></a>_iter_dump</strong>(10 bytes, Stack size 0 btyes, block.o(.text._iter_dump))<br>
<p><strong><a name="[169]"></a>_iter_rm_all_rw_node</strong>(10 bytes, Stack size 0 btyes, block.o(.text._iter_rm_all_rw_node))<br>
<p><strong><a name="[179]"></a>_kvblock_deep_gc</strong>(62 bytes, Stack size 0 btyes, kvset.o(.text._kvblock_deep_gc))<br>
<p><strong><a name="[192]"></a>mtb_version</strong>(10 bytes, Stack size 4 btyes, mtb_mtbv.o(.text.mtb_version))<br>
<br>[Calls]<ul>
<li><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_get
</ul>
<br>[Called By]<ul>
<li><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scn_offset.isra.0
<li><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtbv_get_part_info
</ul>
<p><strong><a name="[193]"></a>get_scn_offset.isra.0</strong>(52 bytes, Stack size 12 btyes, mtb_mtbv.o(.text.get_scn_offset.isra.0))<br>
<br>[Stack]<ul><li>Max Depth = 16 
<li>Call Chain = get_scn_offset.isra.0 &rArr; mtb_version </ul>
<br>[Calls]<ul>
<li><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_get
<li><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtb_version
</ul>
<br>[Called By]<ul>
<li><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_section_addr
</ul>
<p><strong><a name="[194]"></a>_get_section.constprop.3</strong>(114 bytes, Stack size 0 btyes, mtb_mtbv.o(.text._get_section.constprop.3))<br>
<p><strong><a name="[1bd]"></a>copy_data</strong>(10 bytes, Stack size 0 btyes, src_verify.o(.text.copy_data))<br>
<p><strong><a name="[1be]"></a>hash_update</strong>(176 bytes, Stack size 0 btyes, src_verify.o(.text.hash_update))<br>
<p><strong><a name="[1da]"></a>find_event.isra.0</strong>(34 bytes, Stack size 0 btyes, src_event.o(.text.find_event.isra.0))<br>
<p><strong><a name="[1db]"></a>__event_publish</strong>(72 bytes, Stack size 0 btyes, src_event.o(.text.__event_publish))<br>
<p><strong><a name="[1dc]"></a>__yoc_event_remove</strong>(108 bytes, Stack size 0 btyes, src_event.o(.text.__yoc_event_remove))<br>
<p><strong><a name="[1dd]"></a>find_event_sub.isra.1</strong>(40 bytes, Stack size 0 btyes, src_event.o(.text.find_event_sub.isra.1))<br>
<p><strong><a name="[1de]"></a>__yoc_event_unsubscribe</strong>(110 bytes, Stack size 0 btyes, src_event.o(.text.__yoc_event_unsubscribe))<br>
<p><strong><a name="[1df]"></a>__yoc_event_subscribe</strong>(124 bytes, Stack size 0 btyes, src_event.o(.text.__yoc_event_subscribe))<br>
<p><strong><a name="[1eb]"></a>process_rpc</strong>(220 bytes, Stack size 0 btyes, src_event_svr.o(.text.process_rpc))<br>
<p><strong><a name="[1ec]"></a>event_call</strong>(60 bytes, Stack size 0 btyes, src_event_svr.o(.text.event_call))<br>
<p><strong><a name="[1f2]"></a>select_task_entry</strong>(268 bytes, Stack size 0 btyes, src_event_svr.o(.text.select_task_entry))<br>
<p><strong><a name="[1f6]"></a>rpc_buffer_free</strong>(46 bytes, Stack size 0 btyes, src_rpc.o(.text.rpc_buffer_free))<br>
<p><strong><a name="[20d]"></a>uservice_event_process</strong>(48 bytes, Stack size 0 btyes, src_uservice.o(.text.uservice_event_process))<br>
<p><strong><a name="[214]"></a>utask_entry</strong>(128 bytes, Stack size 0 btyes, src_utask.o(.text.utask_entry))<br>
<p><strong><a name="[215]"></a>task_will</strong>(80 bytes, Stack size 0 btyes, src_utask.o(.text.task_will))<br>
<p><strong><a name="[220]"></a>get_bas</strong>(48 bytes, Stack size 0 btyes, ble_profiles_bas.o(.text.get_bas))<br>
<p><strong><a name="[221]"></a>bas_event_callback</strong>(200 bytes, Stack size 0 btyes, ble_profiles_bas.o(.text.bas_event_callback))<br>
<p><strong><a name="[224]"></a>read_dis_info</strong>(40 bytes, Stack size 0 btyes, ble_profiles_dis.o(.text.read_dis_info))<br>
<p><strong><a name="[225]"></a>dis_event_callback</strong>(472 bytes, Stack size 0 btyes, ble_profiles_dis.o(.text.dis_event_callback))<br>
<p><strong><a name="[229]"></a>hids_event_callback</strong>(696 bytes, Stack size 0 btyes, ble_profiles_hids.o(.text.hids_event_callback))<br>
<p><strong><a name="[22e]"></a>get_hrs</strong>(48 bytes, Stack size 0 btyes, ble_profiles_hrs.o(.text.get_hrs))<br>
<p><strong><a name="[22f]"></a>hrs_event_callback</strong>(200 bytes, Stack size 0 btyes, ble_profiles_hrs.o(.text.hrs_event_callback))<br>
<p><strong><a name="[234]"></a>ota_status_change</strong>(20 bytes, Stack size 0 btyes, ble_profiles_ota_server.o(.text.ota_status_change))<br>
<p><strong><a name="[235]"></a>ota_reset</strong>(52 bytes, Stack size 0 btyes, ble_profiles_ota_server.o(.text.ota_reset))<br>
<p><strong><a name="[236]"></a>ota_recv_data</strong>(208 bytes, Stack size 0 btyes, ble_profiles_ota_server.o(.text.ota_recv_data))<br>
<p><strong><a name="[237]"></a>ota_partition_erase</strong>(84 bytes, Stack size 0 btyes, ble_profiles_ota_server.o(.text.ota_partition_erase))<br>
<p><strong><a name="[238]"></a>ota_timeout</strong>(60 bytes, Stack size 0 btyes, ble_profiles_ota_server.o(.text.ota_timeout))<br>
<p><strong><a name="[23c]"></a>event_callback</strong>(200 bytes, Stack size 0 btyes, ble_profiles_ota_server.o(.text.event_callback))<br>
<p><strong><a name="[242]"></a>uart_event_callback</strong>(1064 bytes, Stack size 0 btyes, ble_profiles_uart_client.o(.text.uart_event_callback))<br>
<p><strong><a name="[248]"></a>uart_event_callback</strong>(368 bytes, Stack size 0 btyes, ble_profiles_uart_server.o(.text.uart_event_callback))<br>
<p><strong><a name="[24e]"></a>gf_double</strong>(46 bytes, Stack size 0 btyes, bt_crypto_bt_crypto.o(.text.gf_double))<br>
<p><strong><a name="[24f]"></a>prng_reseed.constprop.0</strong>(76 bytes, Stack size 0 btyes, bt_crypto_bt_crypto.o(.text.prng_reseed.constprop.0))<br>
<p><strong><a name="[259]"></a>add_round_key</strong>(146 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_aes_decrypt.o(.text.add_round_key))<br>
<p><strong><a name="[25a]"></a>inv_shift_rows</strong>(114 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_aes_decrypt.o(.text.inv_shift_rows))<br>
<p><strong><a name="[25b]"></a>mult_row_column</strong>(590 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_aes_decrypt.o(.text.mult_row_column))<br>
<p><strong><a name="[25e]"></a>add_round_key</strong>(146 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_aes_encrypt.o(.text.add_round_key))<br>
<p><strong><a name="[25f]"></a>shift_rows</strong>(114 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_aes_encrypt.o(.text.shift_rows))<br>
<p><strong><a name="[260]"></a>mult_row_column</strong>(128 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_aes_encrypt.o(.text.mult_row_column))<br>
<p><strong><a name="[265]"></a>ccm_cbc_mac</strong>(86 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ccm_mode.o(.text.ccm_cbc_mac))<br>
<p><strong><a name="[266]"></a>ccm_ctr_mode.part.0.constprop.2</strong>(128 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ccm_mode.o(.text.ccm_ctr_mode.part.0.constprop.2))<br>
<p><strong><a name="[271]"></a>arrInc.constprop.0</strong>(30 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ctr_prng.o(.text.arrInc.constprop.0))<br>
<p><strong><a name="[272]"></a>tc_ctr_prng_update</strong>(116 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ctr_prng.o(.text.tc_ctr_prng_update))<br>
<p><strong><a name="[27c]"></a>uECC_vli_modSquare_fast</strong>(12 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_vli_modSquare_fast))<br>
<p><strong><a name="[27f]"></a>XYcZ_addC</strong>(278 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.XYcZ_addC))<br>
<p><strong><a name="[28a]"></a>uECC_vli_add</strong>(66 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_vli_add))<br>
<p><strong><a name="[28b]"></a>uECC_vli_rshift1</strong>(30 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_vli_rshift1))<br>
<p><strong><a name="[28c]"></a>vli_modInv_update</strong>(62 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.vli_modInv_update))<br>
<p><strong><a name="[28d]"></a>uECC_vli_mult</strong>(352 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc.o(.text.uECC_vli_mult))<br>
<p><strong><a name="[2a4]"></a>bits2int</strong>(148 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_ecc_dsa.o(.text.bits2int))<br>
<p><strong><a name="[2a8]"></a>rekey</strong>(58 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_hmac.o(.text.rekey))<br>
<p><strong><a name="[2ad]"></a>update</strong>(200 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_hmac_prng.o(.text.update))<br>
<p><strong><a name="[2b1]"></a>compress</strong>(528 bytes, Stack size 0 btyes, bt_crypto_tinycrypt_source_sha256.o(.text.compress))<br>
<p><strong><a name="[2b9]"></a>uuid_covert</strong>(48 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.uuid_covert))<br>
<p><strong><a name="[2ba]"></a>ble_gatt_attr_notify</strong>(50 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_gatt_attr_notify))<br>
<p><strong><a name="[2bb]"></a>ble_gatt_attr_indicate</strong>(40 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_gatt_attr_indicate))<br>
<p><strong><a name="[2bc]"></a>ble_stack_event_callback.isra.0</strong>(60 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_stack_event_callback.isra.0))<br>
<p><strong><a name="[2bd]"></a>cfg_changed_cb</strong>(36 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.cfg_changed_cb))<br>
<p><strong><a name="[2be]"></a>le_param_update_cb</strong>(48 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.le_param_update_cb))<br>
<p><strong><a name="[2bf]"></a>le_param_req_cb</strong>(60 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.le_param_req_cb))<br>
<p><strong><a name="[2c0]"></a>connected</strong>(52 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.connected))<br>
<p><strong><a name="[2c1]"></a>gatt_cfg_match</strong>(56 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.gatt_cfg_match))<br>
<p><strong><a name="[2c2]"></a>gatt_cfg_write</strong>(56 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.gatt_cfg_write))<br>
<p><strong><a name="[2c3]"></a>gatt_write_handle</strong>(64 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.gatt_write_handle))<br>
<p><strong><a name="[2c4]"></a>ble_gatt_indicate_cb</strong>(40 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.ble_gatt_indicate_cb))<br>
<p><strong><a name="[2c7]"></a>auth_passkey_entry</strong>(48 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.auth_passkey_entry))<br>
<p><strong><a name="[2c8]"></a>auth_pairing_complete</strong>(60 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.auth_pairing_complete))<br>
<p><strong><a name="[2c9]"></a>auth_pairing_failed</strong>(56 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.auth_pairing_failed))<br>
<p><strong><a name="[2ca]"></a>auth_pairing_confirm</strong>(48 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.auth_pairing_confirm))<br>
<p><strong><a name="[2cb]"></a>auth_cancel</strong>(48 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.auth_cancel))<br>
<p><strong><a name="[2cc]"></a>scan_cb</strong>(80 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.scan_cb))<br>
<p><strong><a name="[2cd]"></a>discover_func</strong>(248 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.discover_func))<br>
<p><strong><a name="[2ce]"></a>auth_passkey_confirm</strong>(104 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.auth_passkey_confirm))<br>
<p><strong><a name="[2cf]"></a>auth_passkey_display</strong>(104 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.auth_passkey_display))<br>
<p><strong><a name="[2d0]"></a>gatt_read_handle</strong>(104 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.gatt_read_handle))<br>
<p><strong><a name="[2d1]"></a>gatt_write_cb</strong>(48 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.gatt_write_cb))<br>
<p><strong><a name="[2df]"></a>disconnected</strong>(64 bytes, Stack size 0 btyes, bt_host_aos_ble.o(.text.disconnected))<br>
<p><strong><a name="[337]"></a>h4_send</strong>(88 bytes, Stack size 0 btyes, bt_host_hci_driver_h4_driver.o(.text.h4_send))<br>
<p><strong><a name="[338]"></a>h4_open</strong>(116 bytes, Stack size 0 btyes, bt_host_hci_driver_h4_driver.o(.text.h4_open))<br>
<p><strong><a name="[339]"></a>_hci_recv_event</strong>(16 bytes, Stack size 0 btyes, bt_host_hci_driver_h4_driver.o(.text._hci_recv_event))<br>
<p><strong><a name="[33c]"></a>hci_rx_task</strong>(84 bytes, Stack size 0 btyes, bt_host_hci_driver_h4_driver.o(.text.hci_rx_task))<br>
<p><strong><a name="[33f]"></a>hci_h5_int_init</strong>(368 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.hci_h5_int_init))<br>
<p><strong><a name="[340]"></a>data_ready_cb_thread</strong>(148 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.data_ready_cb_thread))<br>
<p><strong><a name="[341]"></a>OsStartTimer</strong>(50 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.OsStartTimer))<br>
<p><strong><a name="[342]"></a>h5_start_sync_retrans_timer</strong>(20 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.h5_start_sync_retrans_timer))<br>
<p><strong><a name="[343]"></a>h5_start_conf_retrans_timer</strong>(24 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.h5_start_conf_retrans_timer))<br>
<p><strong><a name="[344]"></a>h5_wait_controller_baudrate_ready_timeout_handler</strong>(80 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.h5_wait_controller_baudrate_ready_timeout_handler))<br>
<p><strong><a name="[345]"></a>h5_prepare_pkt.constprop.12</strong>(316 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.h5_prepare_pkt.constprop.12))<br>
<p><strong><a name="[346]"></a>h5_wake_up</strong>(324 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.h5_wake_up))<br>
<p><strong><a name="[347]"></a>hci_h5_send_acl_data</strong>(32 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.hci_h5_send_acl_data))<br>
<p><strong><a name="[348]"></a>hci_h5_send_sync_req</strong>(42 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.hci_h5_send_sync_req))<br>
<p><strong><a name="[349]"></a>hci_h5_send_sync_cmd</strong>(56 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.hci_h5_send_sync_cmd))<br>
<p><strong><a name="[34a]"></a>hci_h5_send_cmd</strong>(76 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.hci_h5_send_cmd))<br>
<p><strong><a name="[34b]"></a>hci_h5_send_conf_req</strong>(44 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.hci_h5_send_conf_req))<br>
<p><strong><a name="[34c]"></a>hci_h5_send_sync_resp</strong>(42 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.hci_h5_send_sync_resp))<br>
<p><strong><a name="[34d]"></a>hci_h5_send_conf_resp</strong>(42 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.hci_h5_send_conf_resp))<br>
<p><strong><a name="[34e]"></a>data_retransfer_thread</strong>(116 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.data_retransfer_thread))<br>
<p><strong><a name="[34f]"></a>h5_complete_rx_pkt.constprop.10</strong>(768 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.h5_complete_rx_pkt.constprop.10))<br>
<p><strong><a name="[350]"></a>hci_h5_cleanup</strong>(164 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.hci_h5_cleanup))<br>
<p><strong><a name="[351]"></a>hci_event</strong>(660 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.hci_event))<br>
<p><strong><a name="[352]"></a>h5_crc_update</strong>(48 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.h5_crc_update))<br>
<p><strong><a name="[353]"></a>h5_hw_init_ready_timeout_handler</strong>(2 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.h5_hw_init_ready_timeout_handler))<br>
<p><strong><a name="[354]"></a>h5_enqueue</strong>(120 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.h5_enqueue))<br>
<p><strong><a name="[355]"></a>h5_slip_one_byte</strong>(172 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.h5_slip_one_byte))<br>
<p><strong><a name="[356]"></a>h5_slip_msgdelim</strong>(32 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.h5_slip_msgdelim))<br>
<p><strong><a name="[357]"></a>h5_retransfer_signal_event</strong>(56 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.h5_retransfer_signal_event))<br>
<p><strong><a name="[358]"></a>h5_retransfer_timeout_handler</strong>(24 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.h5_retransfer_timeout_handler))<br>
<p><strong><a name="[359]"></a>hci_driver_send_cmd_cb</strong>(114 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.hci_driver_send_cmd_cb))<br>
<p><strong><a name="[35a]"></a>OsAllocateTimer</strong>(48 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.OsAllocateTimer))<br>
<p><strong><a name="[35b]"></a>h5_sync_retrans_timeout_handler</strong>(44 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.h5_sync_retrans_timeout_handler))<br>
<p><strong><a name="[35c]"></a>h5_conf_retrans_timeout_handler</strong>(48 bytes, Stack size 0 btyes, bt_host_hci_driver_h5.o(.text.h5_conf_retrans_timeout_handler))<br>
<p><strong><a name="[35e]"></a>h5_send</strong>(84 bytes, Stack size 0 btyes, bt_host_hci_driver_h5_driver.o(.text.h5_send))<br>
<p><strong><a name="[35f]"></a>h5_open</strong>(28 bytes, Stack size 0 btyes, bt_host_hci_driver_h5_driver.o(.text.h5_open))<br>
<p><strong><a name="[362]"></a>packet_recv_cb</strong>(32 bytes, Stack size 0 btyes, bt_host_hci_driver_h5_driver.o(.text.packet_recv_cb))<br>
<p><strong><a name="[364]"></a>sys_slist_find_and_remove</strong>(60 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.sys_slist_find_and_remove))<br>
<p><strong><a name="[365]"></a>net_buf_frags_len</strong>(18 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.net_buf_frags_len))<br>
<p><strong><a name="[367]"></a>chan_rsp_sent</strong>(2 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.chan_rsp_sent))<br>
<p><strong><a name="[368]"></a>attr_read_type_cb</strong>(36 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.attr_read_type_cb))<br>
<p><strong><a name="[369]"></a>att_exec_write_req</strong>(4 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.att_exec_write_req))<br>
<p><strong><a name="[36a]"></a>att_op_get_type</strong>(170 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.att_op_get_type))<br>
<p><strong><a name="[36b]"></a>bt_att_released</strong>(20 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.bt_att_released))<br>
<p><strong><a name="[36c]"></a>att_req_destroy</strong>(30 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.att_req_destroy))<br>
<p><strong><a name="[36d]"></a>chan_req_sent</strong>(22 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.chan_req_sent))<br>
<p><strong><a name="[36e]"></a>bt_gatt_foreach_attr</strong>(22 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.bt_gatt_foreach_attr))<br>
<p><strong><a name="[36f]"></a>att_chan_read</strong>(302 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.att_chan_read))<br>
<p><strong><a name="[370]"></a>read_group_cb</strong>(204 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.read_group_cb))<br>
<p><strong><a name="[371]"></a>read_type_cb</strong>(168 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.read_type_cb))<br>
<p><strong><a name="[372]"></a>find_type_cb</strong>(324 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.find_type_cb))<br>
<p><strong><a name="[373]"></a>find_info_cb</strong>(168 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.find_info_cb))<br>
<p><strong><a name="[374]"></a>att_reset</strong>(86 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.att_reset))<br>
<p><strong><a name="[375]"></a>attr_read_group_cb</strong>(36 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.attr_read_group_cb))<br>
<p><strong><a name="[376]"></a>chan_send</strong>(108 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.chan_send))<br>
<p><strong><a name="[377]"></a>bt_att_sent</strong>(104 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.bt_att_sent))<br>
<p><strong><a name="[378]"></a>bt_att_accept</strong>(128 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.bt_att_accept))<br>
<p><strong><a name="[379]"></a>att_prepare_write_req</strong>(4 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.att_prepare_write_req))<br>
<p><strong><a name="[37a]"></a>chan_cfm_sent</strong>(2 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.chan_cfm_sent))<br>
<p><strong><a name="[37b]"></a>att_get</strong>(44 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.att_get))<br>
<p><strong><a name="[37c]"></a>bt_att_connected</strong>(92 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.bt_att_connected))<br>
<p><strong><a name="[37d]"></a>bt_att_chan_req_send</strong>(112 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.bt_att_chan_req_send))<br>
<p><strong><a name="[37e]"></a>bt_att_status</strong>(78 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.bt_att_status))<br>
<p><strong><a name="[37f]"></a>att_handle_rsp</strong>(228 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.att_handle_rsp))<br>
<p><strong><a name="[380]"></a>att_find_type_req</strong>(228 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.att_find_type_req))<br>
<p><strong><a name="[381]"></a>att_find_info_req</strong>(140 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.att_find_info_req))<br>
<p><strong><a name="[382]"></a>att_mtu_req</strong>(128 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.att_mtu_req))<br>
<p><strong><a name="[38a]"></a>att_confirm</strong>(14 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.att_confirm))<br>
<p><strong><a name="[38b]"></a>att_chan_detach</strong>(64 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.att_chan_detach))<br>
<p><strong><a name="[38c]"></a>bt_att_disconnected</strong>(32 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.bt_att_disconnected))<br>
<p><strong><a name="[38d]"></a>att_timeout</strong>(42 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.att_timeout))<br>
<p><strong><a name="[38e]"></a>write_cb</strong>(102 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.write_cb))<br>
<p><strong><a name="[38f]"></a>read_cb</strong>(102 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.read_cb))<br>
<p><strong><a name="[390]"></a>att_write_cmd</strong>(136 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.att_write_cmd))<br>
<p><strong><a name="[392]"></a>send_err_rsp.part.6</strong>(68 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.send_err_rsp.part.6))<br>
<p><strong><a name="[393]"></a>bt_att_recv</strong>(136 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.bt_att_recv))<br>
<p><strong><a name="[394]"></a>att_write_req</strong>(180 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.att_write_req))<br>
<p><strong><a name="[396]"></a>att_read_group_req</strong>(268 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.att_read_group_req))<br>
<p><strong><a name="[397]"></a>att_read_mult_req</strong>(136 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.att_read_mult_req))<br>
<p><strong><a name="[398]"></a>att_read_rsp</strong>(164 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.att_read_rsp))<br>
<p><strong><a name="[399]"></a>att_read_blob_req</strong>(36 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.att_read_blob_req))<br>
<p><strong><a name="[39a]"></a>att_read_req</strong>(30 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.att_read_req))<br>
<p><strong><a name="[39b]"></a>att_read_type_req</strong>(208 bytes, Stack size 0 btyes, bt_host_host_att.o(.text.att_read_type_req))<br>
<p><strong><a name="[39c]"></a>tx_free</strong>(24 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.tx_free))<br>
<p><strong><a name="[39d]"></a>send_frag</strong>(256 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.send_frag))<br>
<p><strong><a name="[39e]"></a>notify_connected</strong>(48 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.notify_connected))<br>
<p><strong><a name="[39f]"></a>bt_conn_reset_rx_state</strong>(24 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.bt_conn_reset_rx_state))<br>
<p><strong><a name="[3a0]"></a>conn_cleanup</strong>(58 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.conn_cleanup))<br>
<p><strong><a name="[3a1]"></a>tx_notify</strong>(54 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.tx_notify))<br>
<p><strong><a name="[3a2]"></a>tx_complete_work</strong>(10 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.tx_complete_work))<br>
<p><strong><a name="[3a3]"></a>conn_update_timeout</strong>(80 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.conn_update_timeout))<br>
<p><strong><a name="[3be]"></a>create_frag.isra.6</strong>(104 bytes, Stack size 0 btyes, bt_host_host_conn.o(.text.create_frag.isra.6))<br>
<p><strong><a name="[3c7]"></a>find_static_attr</strong>(4 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.find_static_attr))<br>
<p><strong><a name="[3c8]"></a>gatt_ccc_changed</strong>(24 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.gatt_ccc_changed))<br>
<p><strong><a name="[3c9]"></a>gatt_indicate_rsp</strong>(14 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.gatt_indicate_rsp))<br>
<p><strong><a name="[3ca]"></a>match_uuid</strong>(6 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.match_uuid))<br>
<p><strong><a name="[3cb]"></a>sc_restore_rsp</strong>(2 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.sc_restore_rsp))<br>
<p><strong><a name="[3cc]"></a>write_name</strong>(64 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.write_name))<br>
<p><strong><a name="[3cd]"></a>sc_store</strong>(64 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.sc_store))<br>
<p><strong><a name="[3ce]"></a>find_ccc_cfg</strong>(58 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.find_ccc_cfg))<br>
<p><strong><a name="[3cf]"></a>gatt_notify</strong>(88 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.gatt_notify))<br>
<p><strong><a name="[3d0]"></a>get_service_handles</strong>(78 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.get_service_handles))<br>
<p><strong><a name="[3d1]"></a>find_next</strong>(6 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.find_next))<br>
<p><strong><a name="[3d2]"></a>found_attr</strong>(6 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.found_attr))<br>
<p><strong><a name="[3d3]"></a>sc_indicate_rsp</strong>(44 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.sc_indicate_rsp))<br>
<p><strong><a name="[3d4]"></a>clear_ccc_cfg</strong>(38 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.clear_ccc_cfg))<br>
<p><strong><a name="[3d5]"></a>sc_indicate</strong>(96 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.sc_indicate))<br>
<p><strong><a name="[3d6]"></a>read_appearance</strong>(54 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.read_appearance))<br>
<p><strong><a name="[3d7]"></a>read_ppcp</strong>(68 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.read_ppcp))<br>
<p><strong><a name="[3d8]"></a>read_name</strong>(62 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.read_name))<br>
<p><strong><a name="[3d9]"></a>find_sc_cfg</strong>(36 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.find_sc_cfg))<br>
<p><strong><a name="[3da]"></a>ccc_find_cfg</strong>(30 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.ccc_find_cfg))<br>
<p><strong><a name="[3db]"></a>ccc_save</strong>(60 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.ccc_save))<br>
<p><strong><a name="[3dc]"></a>ccc_load</strong>(160 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.ccc_load))<br>
<p><strong><a name="[3dd]"></a>remove_peer_from_attr</strong>(40 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.remove_peer_from_attr))<br>
<p><strong><a name="[3e0]"></a>bt_gatt_clear_sc</strong>(80 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_clear_sc))<br>
<p><strong><a name="[3e1]"></a>sc_clear</strong>(50 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.sc_clear))<br>
<p><strong><a name="[3e2]"></a>sc_commit</strong>(48 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.sc_commit))<br>
<p><strong><a name="[3e4]"></a>sc_set</strong>(162 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.sc_set))<br>
<p><strong><a name="[3e5]"></a>disconnected_cb</strong>(152 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.disconnected_cb))<br>
<p><strong><a name="[3e6]"></a>sc_save</strong>(118 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.sc_save))<br>
<p><strong><a name="[3e7]"></a>sc_ccc_cfg_write</strong>(30 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.sc_ccc_cfg_write))<br>
<p><strong><a name="[3e8]"></a>gatt_indicate</strong>(148 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.gatt_indicate))<br>
<p><strong><a name="[3e9]"></a>notify_cb</strong>(216 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.notify_cb))<br>
<p><strong><a name="[3ef]"></a>bt_gatt_foreach_attr</strong>(22 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.bt_gatt_foreach_attr))<br>
<p><strong><a name="[3f1]"></a>ccc_set</strong>(132 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.ccc_set))<br>
<p><strong><a name="[3f8]"></a>sc_process</strong>(88 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.sc_process))<br>
<p><strong><a name="[3fb]"></a>update_ccc</strong>(184 bytes, Stack size 0 btyes, bt_host_host_gatt.o(.text.update_ccc))<br>
<p><strong><a name="[419]"></a>hci_data_buf_overflow</strong>(2 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.hci_data_buf_overflow))<br>
<p><strong><a name="[41a]"></a>hci_cmd_done.isra.1</strong>(180 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.hci_cmd_done.isra.1))<br>
<p><strong><a name="[41b]"></a>sys_put_le64</strong>(34 bytes, Stack size 0 btyes, bt_host_host_hci_api.o(.text.sys_put_le64))<br>
<p><strong><a name="[462]"></a>adv_id_check_func</strong>(14 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.adv_id_check_func))<br>
<p><strong><a name="[463]"></a>hci_vendor_event</strong>(2 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.hci_vendor_event))<br>
<p><strong><a name="[464]"></a>adv_ad_callback</strong>(28 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.adv_ad_callback))<br>
<p><strong><a name="[465]"></a>report_completed_packet</strong>(96 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.report_completed_packet))<br>
<p><strong><a name="[466]"></a>le_data_len_change</strong>(44 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.le_data_len_change))<br>
<p><strong><a name="[467]"></a>atomic_test_bit</strong>(26 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.atomic_test_bit))<br>
<p><strong><a name="[468]"></a>bt_adv_foreach</strong>(60 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_adv_foreach))<br>
<p><strong><a name="[469]"></a>bt_addr_le_copy</strong>(10 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_addr_le_copy))<br>
<p><strong><a name="[46a]"></a>bt_addr_le_cmp</strong>(10 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_addr_le_cmp))<br>
<p><strong><a name="[46b]"></a>le_adv_stop_free_conn</strong>(96 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.le_adv_stop_free_conn))<br>
<p><strong><a name="[46c]"></a>id_find</strong>(52 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.id_find))<br>
<p><strong><a name="[46d]"></a>atomic_set_bit_to</strong>(52 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.atomic_set_bit_to))<br>
<p><strong><a name="[46e]"></a>le_conn_param_req</strong>(144 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.le_conn_param_req))<br>
<p><strong><a name="[46f]"></a>le_conn_update_complete</strong>(150 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.le_conn_update_complete))<br>
<p><strong><a name="[470]"></a>hci_tx_thread</strong>(16 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.hci_tx_thread))<br>
<p><strong><a name="[471]"></a>le_adv_start_add_conn</strong>(184 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.le_adv_start_add_conn))<br>
<p><strong><a name="[472]"></a>set_le_adv_enable_ext</strong>(76 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.set_le_adv_enable_ext))<br>
<p><strong><a name="[473]"></a>adv_id_check_connectable_func</strong>(48 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.adv_id_check_connectable_func))<br>
<p><strong><a name="[474]"></a>valid_adv_ext_param</strong>(152 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.valid_adv_ext_param))<br>
<p><strong><a name="[475]"></a>valid_adv_param</strong>(36 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.valid_adv_param))<br>
<p><strong><a name="[476]"></a>parse_ad.constprop.14</strong>(92 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.parse_ad.constprop.14))<br>
<p><strong><a name="[477]"></a>hci_set_ad_ext.isra.7</strong>(192 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.hci_set_ad_ext.isra.7))<br>
<p><strong><a name="[478]"></a>adv_delete_legacy</strong>(32 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.adv_delete_legacy))<br>
<p><strong><a name="[479]"></a>adv_new</strong>(80 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.adv_new))<br>
<p><strong><a name="[47a]"></a>set_adv_random_address</strong>(80 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.set_adv_random_address))<br>
<p><strong><a name="[47b]"></a>le_adv_set_private_addr</strong>(42 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.le_adv_set_private_addr))<br>
<p><strong><a name="[47c]"></a>le_adv_set_random_addr.isra.10</strong>(116 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.le_adv_set_random_addr.isra.10))<br>
<p><strong><a name="[47d]"></a>le_adv_set_terminated</strong>(260 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.le_adv_set_terminated))<br>
<p><strong><a name="[484]"></a>conn_auto_initiate</strong>(184 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.conn_auto_initiate))<br>
<p><strong><a name="[485]"></a>le_phy_update_complete</strong>(66 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.le_phy_update_complete))<br>
<p><strong><a name="[486]"></a>le_adv_update</strong>(252 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.le_adv_update))<br>
<p><strong><a name="[487]"></a>le_scan_req_received</strong>(104 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.le_scan_req_received))<br>
<p><strong><a name="[488]"></a>le_ext_adv_param_set</strong>(516 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.le_ext_adv_param_set))<br>
<p><strong><a name="[48b]"></a>hci_le_meta_event</strong>(32 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.hci_le_meta_event))<br>
<p><strong><a name="[491]"></a>le_remote_feat_complete</strong>(62 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.le_remote_feat_complete))<br>
<p><strong><a name="[499]"></a>id_create.isra.12</strong>(120 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.id_create.isra.12))<br>
<p><strong><a name="[4a6]"></a>hci_disconn_complete</strong>(66 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.hci_disconn_complete))<br>
<p><strong><a name="[4a7]"></a>enh_conn_complete</strong>(284 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.enh_conn_complete))<br>
<p><strong><a name="[4a8]"></a>le_enh_conn_complete</strong>(10 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.le_enh_conn_complete))<br>
<p><strong><a name="[4a9]"></a>le_legacy_conn_complete</strong>(156 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.le_legacy_conn_complete))<br>
<p><strong><a name="[4b4]"></a>bt_init</strong>(588 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.bt_init))<br>
<p><strong><a name="[4b5]"></a>init_work</strong>(24 bytes, Stack size 0 btyes, bt_host_host_hci_core.o(.text.init_work))<br>
<p><strong><a name="[4bd]"></a>send_cmd_status</strong>(70 bytes, Stack size 0 btyes, bt_host_host_hci_ecc.o(.text.send_cmd_status))<br>
<p><strong><a name="[4be]"></a>sys_memcpy_swap.constprop.1</strong>(20 bytes, Stack size 0 btyes, bt_host_host_hci_ecc.o(.text.sys_memcpy_swap.constprop.1))<br>
<p><strong><a name="[4bf]"></a>ecc_thread</strong>(352 bytes, Stack size 0 btyes, bt_host_host_hci_ecc.o(.text.ecc_thread))<br>
<p><strong><a name="[4c3]"></a>l2cap_disconnected</strong>(2 bytes, Stack size 0 btyes, bt_host_host_l2cap.o(.text.l2cap_disconnected))<br>
<p><strong><a name="[4c4]"></a>l2cap_accept</strong>(32 bytes, Stack size 0 btyes, bt_host_host_l2cap.o(.text.l2cap_accept))<br>
<p><strong><a name="[4c5]"></a>l2cap_connected</strong>(2 bytes, Stack size 0 btyes, bt_host_host_l2cap.o(.text.l2cap_connected))<br>
<p><strong><a name="[4ca]"></a>l2cap_rtx_timeout</strong>(22 bytes, Stack size 0 btyes, bt_host_host_l2cap.o(.text.l2cap_rtx_timeout))<br>
<p><strong><a name="[4d2]"></a>l2cap_recv</strong>(130 bytes, Stack size 0 btyes, bt_host_host_l2cap.o(.text.l2cap_recv))<br>
<p><strong><a name="[4d7]"></a>save_id</strong>(28 bytes, Stack size 0 btyes, bt_host_host_settings.o(.text.save_id))<br>
<p><strong><a name="[4d8]"></a>set</strong>(164 bytes, Stack size 0 btyes, bt_host_host_settings.o(.text.set))<br>
<p><strong><a name="[4dc]"></a>commit</strong>(108 bytes, Stack size 0 btyes, bt_host_host_settings.o(.text.commit))<br>
<p><strong><a name="[4de]"></a>bt_smp_accept</strong>(32 bytes, Stack size 0 btyes, bt_host_host_smp_null.o(.text.bt_smp_accept))<br>
<p><strong><a name="[4df]"></a>bt_smp_recv</strong>(66 bytes, Stack size 0 btyes, bt_host_host_smp_null.o(.text.bt_smp_recv))<br>
<p><strong><a name="[4e3]"></a>uuid_to_uuid128</strong>(88 bytes, Stack size 0 btyes, bt_host_host_uuid.o(.text.uuid_to_uuid128))<br>
<p><strong><a name="[50a]"></a>polling_events</strong>(210 bytes, Stack size 0 btyes, bt_host_port_aos_poll.o(.text.polling_events))<br>
<p><strong><a name="[523]"></a>generic_data_ref</strong>(12 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.generic_data_ref))<br>
<p><strong><a name="[524]"></a>mem_pool_data_alloc</strong>(4 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.mem_pool_data_alloc))<br>
<p><strong><a name="[525]"></a>fixed_data_unref</strong>(2 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.fixed_data_unref))<br>
<p><strong><a name="[526]"></a>heap_data_unref</strong>(22 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.heap_data_unref))<br>
<p><strong><a name="[527]"></a>heap_data_alloc</strong>(22 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.heap_data_alloc))<br>
<p><strong><a name="[528]"></a>net_buf_destroy</strong>(24 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.net_buf_destroy))<br>
<p><strong><a name="[529]"></a>mem_pool_data_unref</strong>(2 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.mem_pool_data_unref))<br>
<p><strong><a name="[52a]"></a>sys_put_be64</strong>(36 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.sys_put_be64))<br>
<p><strong><a name="[52b]"></a>sys_put_le64</strong>(34 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.sys_put_le64))<br>
<p><strong><a name="[542]"></a>fixed_data_alloc</strong>(48 bytes, Stack size 0 btyes, bt_host_port_core_buf.o(.text.fixed_data_alloc))<br>
<p><strong><a name="[577]"></a>settings_kv_save</strong>(50 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_kv.o(.text.settings_kv_save))<br>
<p><strong><a name="[578]"></a>settings_kv_load</strong>(16 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_kv.o(.text.settings_kv_load))<br>
<p><strong><a name="[579]"></a>_settings_kv_load</strong>(68 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_kv.o(.text._settings_kv_load))<br>
<p><strong><a name="[57a]"></a>_settings_kv_read_cb</strong>(46 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_kv.o(.text._settings_kv_read_cb))<br>
<p><strong><a name="[57e]"></a>settings_line_raw_read_until</strong>(212 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_line.o(.text.settings_line_raw_read_until))<br>
<p><strong><a name="[582]"></a>settings_line_read_cb</strong>(34 bytes, Stack size 0 btyes, bt_host_port_core_settings_src_settings_line.o(.text.settings_line_read_cb))<br>
<p><strong><a name="[5bf]"></a>phy_gpio_sleep_handler</strong>(60 bytes, Stack size 0 btyes, components_driver_src_gpio.o(.text.phy_gpio_sleep_handler))<br>
<p><strong><a name="[5c5]"></a>phy_gpio_wakeup_handler</strong>(96 bytes, Stack size 0 btyes, components_driver_src_gpio.o(.text.phy_gpio_wakeup_handler))<br>
<p><strong><a name="[5cc]"></a>phy_gpioin_event_pin</strong>(44 bytes, Stack size 0 btyes, components_driver_src_gpio.o(.text.phy_gpioin_event_pin))<br>
<p><strong><a name="[5cd]"></a>phy_gpio_interrupt_enable</strong>(64 bytes, Stack size 0 btyes, components_driver_src_gpio.o(.text.phy_gpio_interrupt_enable))<br>
<p><strong><a name="[5cf]"></a>phy_gpio_pin2pin3_control.part.2</strong>(20 bytes, Stack size 0 btyes, components_driver_src_gpio.o(.text.phy_gpio_pin2pin3_control.part.2))<br>
<br>[Called By]<ul>
<li><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_gpio_pin_init
<li><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_gpio_pin2pin3_control
</ul>
<p><strong><a name="[5d5]"></a>hal_kscan_clear_config</strong>(68 bytes, Stack size 0 btyes, components_driver_src_kscan.o(.text.hal_kscan_clear_config))<br>
<p><strong><a name="[5d6]"></a>rmv_ghost_key</strong>(68 bytes, Stack size 0 btyes, components_driver_src_kscan.o(.text.rmv_ghost_key))<br>
<p><strong><a name="[5d7]"></a>kscan_sleep_handler</strong>(172 bytes, Stack size 0 btyes, components_driver_src_kscan.o(.text.kscan_sleep_handler))<br>
<p><strong><a name="[5d8]"></a>kscan_compare_key.constprop.0</strong>(112 bytes, Stack size 0 btyes, components_driver_src_kscan.o(.text.kscan_compare_key.constprop.0))<br>
<p><strong><a name="[5da]"></a>kscan_hw_config</strong>(264 bytes, Stack size 0 btyes, components_driver_src_kscan.o(.text.kscan_hw_config))<br>
<p><strong><a name="[5db]"></a>kscan_wakeup_handler</strong>(196 bytes, Stack size 0 btyes, components_driver_src_kscan.o(.text.kscan_wakeup_handler))<br>
<p><strong><a name="[5de]"></a>read_multiple_channel_n.isra.0</strong>(160 bytes, Stack size 0 btyes, components_driver_src_phy_adc.o(.text.read_multiple_channel_n.isra.0))<br>
<p><strong><a name="[5e9]"></a>phy_clear_adcc_cfg</strong>(20 bytes, Stack size 0 btyes, components_driver_src_phy_adc.o(.text.phy_clear_adcc_cfg))<br>
<p><strong><a name="[61d]"></a>spi_int_disable</strong>(56 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.spi_int_disable))<br>
<p><strong><a name="[61e]"></a>spis_int_handle</strong>(284 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.spis_int_handle))<br>
<p><strong><a name="[61f]"></a>spi_int_handle</strong>(210 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.spi_int_handle))<br>
<p><strong><a name="[622]"></a>hal_spi_pin_init</strong>(82 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.hal_spi_pin_init))<br>
<p><strong><a name="[623]"></a>spi1_wakeup_handler</strong>(24 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.spi1_wakeup_handler))<br>
<p><strong><a name="[624]"></a>spi0_wakeup_handler</strong>(28 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.spi0_wakeup_handler))<br>
<p><strong><a name="[62a]"></a>spi1_sleep_handler</strong>(20 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.spi1_sleep_handler))<br>
<p><strong><a name="[62b]"></a>spi0_sleep_handler</strong>(20 bytes, Stack size 0 btyes, components_driver_src_spi.o(.text.spi0_sleep_handler))<br>
<p><strong><a name="[657]"></a>dw_dma_set_addrinc</strong>(56 bytes, Stack size 4 btyes, csi_drivers_dw_dmac.o(.text.dw_dma_set_addrinc))<br>
<br>[Called By]<ul>
<li><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_dma_config_channel
</ul>
<p><strong><a name="[661]"></a>dw_gpio_set_direction</strong>(40 bytes, Stack size 0 btyes, csi_drivers_dw_gpio.o(.text.dw_gpio_set_direction))<br>
<br>[Called By]<ul>
<li><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_gpio_pin_config_direction
</ul>
<p><strong><a name="[686]"></a>dw_spi_set_mode</strong>(82 bytes, Stack size 0 btyes, csi_drivers_dw_spi.o(.__sram.code.dw_spi_set_mode))<br>
<p><strong><a name="[6a8]"></a>dw_usart_dma_event_cb</strong>(432 bytes, Stack size 28 btyes, csi_drivers_dw_usart.o(.__sram.code.dw_usart_dma_event_cb))<br>
<br>[Stack]<ul><li>Max Depth = 60 
<li>Call Chain = dw_usart_dma_event_cb &rArr; csi_dma_start </ul>
<br>[Calls]<ul>
<li><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_dma_stop
<li><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_dma_release_channel
<li><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_dma_start
</ul>
<p><strong><a name="[6a9]"></a>usart_wait_timeout.isra.0</strong>(80 bytes, Stack size 4 btyes, csi_drivers_dw_usart.o(.text.usart_wait_timeout.isra.0))<br>
<br>[Called By]<ul>
<li><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_config_baudrate
<li><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_config_parity
<li><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_config_stopbits
<li><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_config_databits
</ul>
<p><strong><a name="[6c5]"></a>dw_usart_intr_recv_data</strong>(118 bytes, Stack size 20 btyes, csi_drivers_dw_usart.o(.__sram.code.dw_usart_intr_recv_data))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = dw_usart_intr_recv_data &rArr; csi_usart_receive_query </ul>
<br>[Calls]<ul>
<li><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_receive_query
</ul>
<br>[Called By]<ul>
<li><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dw_usart_irqhandler
</ul>
<p><strong><a name="[6fc]"></a>ck_check_tm_ok</strong>(152 bytes, Stack size 0 btyes, csi_drivers_phy_rtc.o(.text.ck_check_tm_ok))<br>
<p><strong><a name="[705]"></a>spif_lock</strong>(40 bytes, Stack size 0 btyes, csi_drivers_spif.o(.__sram.code.spif_lock))<br>
<br>[Called By]<ul>
<li><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
<li><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_sector
<li><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_ReadFlash
</ul>
<p><strong><a name="[706]"></a>spif_unlock</strong>(24 bytes, Stack size 0 btyes, csi_drivers_spif.o(.__sram.code.spif_unlock))<br>
<br>[Called By]<ul>
<li><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
<li><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_sector
<li><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_ReadFlash
</ul>
<p><strong><a name="[707]"></a>hal_cache_tag_flush</strong>(92 bytes, Stack size 8 btyes, csi_drivers_spif.o(.__sram.code.hal_cache_tag_flush))<br>
<br>[Called By]<ul>
<li><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_sector
</ul>
<p><strong><a name="[708]"></a>_spif_read_status_reg_x</strong>(80 bytes, Stack size 20 btyes, csi_drivers_spif.o(.__sram.code._spif_read_status_reg_x))<br>
<br>[Called By]<ul>
<li><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spif_wait_nobusy_x.constprop.1
</ul>
<p><strong><a name="[709]"></a>_spif_wait_nobusy_x.constprop.1</strong>(48 bytes, Stack size 12 btyes, csi_drivers_spif.o(.__sram.code._spif_wait_nobusy_x))<br>
<br>[Stack]<ul><li>Max Depth = 32 
<li>Call Chain = _spif_wait_nobusy_x.constprop.1 &rArr; _spif_read_status_reg_x </ul>
<br>[Calls]<ul>
<li><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spif_read_status_reg_x
</ul>
<br>[Called By]<ul>
<li><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_write
<li><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_flash_erase_sector
</ul>
<p><strong><a name="[70a]"></a>hal_flash_write</strong>(204 bytes, Stack size 28 btyes, csi_drivers_spif.o(.__sram.code.hal_flash_write))<br>
<br>[Stack]<ul><li>Max Depth = 60 
<li>Call Chain = hal_flash_write &rArr; _spif_wait_nobusy_x.constprop.1 &rArr; _spif_read_status_reg_x  </ul>
<br>[Calls]<ul>
<li><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_lock
<li><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_spif_wait_nobusy_x.constprop.1
<li><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spif_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_ProgramPage64
</ul>
<p><strong><a name="[72a]"></a>do_prepare_sleep_action.isra.0</strong>(76 bytes, Stack size 0 btyes, phy_pmu.o(.text.do_prepare_sleep_action.isra.0))<br>
<p><strong><a name="[72b]"></a>do_wakeup_sleep_action.isra.1</strong>(80 bytes, Stack size 0 btyes, phy_pmu.o(.text.do_wakeup_sleep_action.isra.1))<br>
<p><strong><a name="[732]"></a>_symrom_set_sleep_flag.part.0</strong>(32 bytes, Stack size 0 btyes, pm.o(.text._symrom_set_sleep_flag.part.0))<br>
<br>[Called By]<ul>
<li><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;just_enter_sleep
</ul>
<p><strong><a name="[779]"></a>nvram_read</strong>(80 bytes, Stack size 20 btyes, src_ble_dut_test.o(.text.nvram_read))<br>
<br>[Calls]<ul>
<li><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_spiflash_read
<li><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_spiflash_initialize
</ul>
<br>[Called By]<ul>
<li><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_mac_get
<li><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_mac_store
<li><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_freqoff_store
</ul>
<p><strong><a name="[77a]"></a>nvram_write.constprop.0</strong>(88 bytes, Stack size 12 btyes, src_ble_dut_test.o(.text.nvram_write.constprop.0))<br>
<br>[Calls]<ul>
<li><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_spiflash_erase_sector
<li><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_spiflash_program
<li><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_spiflash_initialize
</ul>
<br>[Called By]<ul>
<li><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_mac_store
<li><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_hal_freqoff_store
</ul>
<p><strong><a name="[780]"></a>cmd_parse_func.part.0</strong>(136 bytes, Stack size 20 btyes, src_dut_main.o(.text.cmd_parse_func.part.0))<br>
<br>[Stack]<ul><li>Max Depth = 172 
<li>Call Chain = cmd_parse_func.part.0 &rArr; dut_at_send &rArr; dut_sendv  &rArr; vasprintf  &rArr; strdup  &rArr; malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<li><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_at_send
<li><a href="#[ab5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<li><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_test_at.constprop.1
</ul>
<p><strong><a name="[781]"></a>dut_test_at.constprop.1</strong>(476 bytes, Stack size 684 btyes, src_dut_main.o(.text.dut_test_at.constprop.1))<br>
<br>[Stack]<ul><li>Max Depth = 856 
<li>Call Chain = dut_test_at.constprop.1 &rArr; cmd_parse_func.part.0 &rArr; dut_at_send  &rArr; dut_sendv  &rArr; vasprintf  &rArr; strdup  &rArr; malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___gnu_csky_case_uqi
<li><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_at_send
<li><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_cut
<li><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_parse_func.part.0
<li><a href="#[ac3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<li><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;argc_len
<li><a href="#[ac9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<li><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;str_chr
</ul>
<br>[Called By]<ul>
<li><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dut_task_entry
</ul>
<p><strong><a name="[7a1]"></a>weak_func</strong>(2 bytes, Stack size 0 btyes, src_flash_weak.o(.text.weak_func))<br>
<p><strong><a name="[7a3]"></a>gpio_cb</strong>(32 bytes, Stack size 0 btyes, src_gpio.o(.text.gpio_cb))<br>
<p><strong><a name="[7ac]"></a>i2c_cb</strong>(36 bytes, Stack size 0 btyes, src_i2c.o(.text.i2c_cb))<br>
<p><strong><a name="[7b5]"></a>i2s_cb</strong>(36 bytes, Stack size 0 btyes, src_i2s.o(.text.i2s_cb))<br>
<p><strong><a name="[7cb]"></a>spi_event_cb_fun</strong>(24 bytes, Stack size 0 btyes, src_spi.o(.text.spi_event_cb_fun))<br>
<p><strong><a name="[7d3]"></a>hal_timer_cb_func</strong>(36 bytes, Stack size 0 btyes, src_timer.o(.text.hal_timer_cb_func))<br>
<p><strong><a name="[7d9]"></a>uart_event_cb</strong>(96 bytes, Stack size 40 btyes, src_uart.o(.text.uart_event_cb))<br>
<br>[Stack]<ul><li>Max Depth = 92 
<li>Call Chain = uart_event_cb &rArr; ringbuffer_write &rArr; ringbuffer_available_read_space  &rArr; aos_except_process  </ul>
<br>[Calls]<ul>
<li><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_receive_query
<li><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuffer_write
<li><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
</ul>
<p><strong><a name="[7e4]"></a>adc_csky_read</strong>(84 bytes, Stack size 0 btyes, csi1_adc_adc_drv.o(.text.adc_csky_read))<br>
<p><strong><a name="[7e5]"></a>adc_csky_pin2channel</strong>(10 bytes, Stack size 0 btyes, csi1_adc_adc_drv.o(.text.adc_csky_pin2channel))<br>
<p><strong><a name="[7e6]"></a>adc_csky_config</strong>(70 bytes, Stack size 0 btyes, csi1_adc_adc_drv.o(.text.adc_csky_config))<br>
<p><strong><a name="[7e7]"></a>adc_csky_close</strong>(12 bytes, Stack size 0 btyes, csi1_adc_adc_drv.o(.text.adc_csky_close))<br>
<p><strong><a name="[7e8]"></a>adc_csky_init</strong>(10 bytes, Stack size 0 btyes, csi1_adc_adc_drv.o(.text.adc_csky_init))<br>
<p><strong><a name="[7e9]"></a>adc_csky_open</strong>(60 bytes, Stack size 0 btyes, csi1_adc_adc_drv.o(.text.adc_csky_open))<br>
<p><strong><a name="[7eb]"></a>yoc_eflash_lpm</strong>(4 bytes, Stack size 0 btyes, csi1_eflash_flash_drv.o(.text.yoc_eflash_lpm))<br>
<p><strong><a name="[7ec]"></a>yoc_eflash_get_info</strong>(38 bytes, Stack size 0 btyes, csi1_eflash_flash_drv.o(.text.yoc_eflash_get_info))<br>
<p><strong><a name="[7ed]"></a>yoc_eflash_erase</strong>(58 bytes, Stack size 0 btyes, csi1_eflash_flash_drv.o(.text.yoc_eflash_erase))<br>
<p><strong><a name="[7ee]"></a>yoc_eflash_program</strong>(28 bytes, Stack size 0 btyes, csi1_eflash_flash_drv.o(.text.yoc_eflash_program))<br>
<p><strong><a name="[7ef]"></a>yoc_eflash_read</strong>(28 bytes, Stack size 0 btyes, csi1_eflash_flash_drv.o(.text.yoc_eflash_read))<br>
<p><strong><a name="[7f0]"></a>yoc_eflash_close</strong>(12 bytes, Stack size 0 btyes, csi1_eflash_flash_drv.o(.text.yoc_eflash_close))<br>
<p><strong><a name="[7f1]"></a>yoc_eflash_open</strong>(34 bytes, Stack size 0 btyes, csi1_eflash_flash_drv.o(.text.yoc_eflash_open))<br>
<p><strong><a name="[7f2]"></a>yoc_eflash_init</strong>(10 bytes, Stack size 0 btyes, csi1_eflash_flash_drv.o(.text.yoc_eflash_init))<br>
<p><strong><a name="[7f4]"></a>iic_csky_mem_read</strong>(184 bytes, Stack size 0 btyes, csi1_iic_iic_drv.o(.text.iic_csky_mem_read))<br>
<p><strong><a name="[7f5]"></a>iic_csky_mem_write</strong>(184 bytes, Stack size 0 btyes, csi1_iic_iic_drv.o(.text.iic_csky_mem_write))<br>
<p><strong><a name="[7f6]"></a>iic_csky_config</strong>(52 bytes, Stack size 0 btyes, csi1_iic_iic_drv.o(.text.iic_csky_config))<br>
<p><strong><a name="[7f7]"></a>iic_csky_close</strong>(22 bytes, Stack size 0 btyes, csi1_iic_iic_drv.o(.text.iic_csky_close))<br>
<p><strong><a name="[7f8]"></a>iic_event_cb_fun</strong>(80 bytes, Stack size 0 btyes, csi1_iic_iic_drv.o(.text.iic_event_cb_fun))<br>
<p><strong><a name="[7f9]"></a>iic_csky_init</strong>(10 bytes, Stack size 0 btyes, csi1_iic_iic_drv.o(.text.iic_csky_init))<br>
<p><strong><a name="[7fa]"></a>iic_busy_stat</strong>(72 bytes, Stack size 0 btyes, csi1_iic_iic_drv.o(.text.iic_busy_stat))<br>
<p><strong><a name="[7fb]"></a>iic_csky_slave_recv</strong>(116 bytes, Stack size 0 btyes, csi1_iic_iic_drv.o(.text.iic_csky_slave_recv))<br>
<p><strong><a name="[7fc]"></a>iic_csky_master_recv</strong>(128 bytes, Stack size 0 btyes, csi1_iic_iic_drv.o(.text.iic_csky_master_recv))<br>
<p><strong><a name="[7fd]"></a>iic_csky_master_send</strong>(128 bytes, Stack size 0 btyes, csi1_iic_iic_drv.o(.text.iic_csky_master_send))<br>
<p><strong><a name="[7fe]"></a>iic_csky_slave_send</strong>(116 bytes, Stack size 0 btyes, csi1_iic_iic_drv.o(.text.iic_csky_slave_send))<br>
<p><strong><a name="[7ff]"></a>iic_csky_open</strong>(76 bytes, Stack size 0 btyes, csi1_iic_iic_drv.o(.text.iic_csky_open))<br>
<p><strong><a name="[801]"></a>yoc_spiflash_get_info</strong>(38 bytes, Stack size 8 btyes, csi1_spiflash_spiflash_drv.o(.text.yoc_spiflash_get_info))<br>
<br>[Calls]<ul>
<li><a href="#[a65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__udivsi3
</ul>
<p><strong><a name="[802]"></a>yoc_spiflash_erase</strong>(58 bytes, Stack size 20 btyes, csi1_spiflash_spiflash_drv.o(.text.yoc_spiflash_erase))<br>
<br>[Calls]<ul>
<li><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_spiflash_erase_sector
</ul>
<p><strong><a name="[803]"></a>yoc_spiflash_program</strong>(28 bytes, Stack size 8 btyes, csi1_spiflash_spiflash_drv.o(.text.yoc_spiflash_program))<br>
<br>[Calls]<ul>
<li><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_spiflash_program
</ul>
<p><strong><a name="[804]"></a>yoc_spiflash_read</strong>(28 bytes, Stack size 8 btyes, csi1_spiflash_spiflash_drv.o(.text.yoc_spiflash_read))<br>
<br>[Calls]<ul>
<li><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_spiflash_read
</ul>
<p><strong><a name="[805]"></a>yoc_spiflash_close</strong>(12 bytes, Stack size 4 btyes, csi1_spiflash_spiflash_drv.o(.text.yoc_spiflash_close))<br>
<br>[Calls]<ul>
<li><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_spiflash_uninitialize
</ul>
<p><strong><a name="[806]"></a>yoc_spiflash_open</strong>(34 bytes, Stack size 8 btyes, csi1_spiflash_spiflash_drv.o(.text.yoc_spiflash_open))<br>
<br>[Calls]<ul>
<li><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_spiflash_initialize
<li><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_spiflash_get_info
</ul>
<p><strong><a name="[807]"></a>yoc_spiflash_lpm</strong>(20 bytes, Stack size 4 btyes, csi1_spiflash_spiflash_drv.o(.text.yoc_spiflash_lpm))<br>
<br>[Calls]<ul>
<li><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_spiflash_power_down
<li><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_spiflash_release_power_down
</ul>
<p><strong><a name="[808]"></a>yoc_spiflash_init</strong>(10 bytes, Stack size 4 btyes, csi1_spiflash_spiflash_drv.o(.text.yoc_spiflash_init))<br>
<br>[Stack]<ul><li>Max Depth = 104 
<li>Call Chain = yoc_spiflash_init &rArr; device_new &rArr; aos_mutex_new  &rArr; aos_malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_new
</ul>
<p><strong><a name="[80a]"></a>uart_csky_init</strong>(18 bytes, Stack size 0 btyes, csi1_uart_uart_drv.o(.text.uart_csky_init))<br>
<p><strong><a name="[80b]"></a>uart_csky_send</strong>(72 bytes, Stack size 0 btyes, csi1_uart_uart_drv.o(.text.uart_csky_send))<br>
<p><strong><a name="[80e]"></a>get_uart_dev_idx</strong>(40 bytes, Stack size 0 btyes, csi1_uart_uart_drv.o(.text.get_uart_dev_idx))<br>
<p><strong><a name="[80f]"></a>uart_csky_set_type</strong>(6 bytes, Stack size 0 btyes, csi1_uart_uart_drv.o(.text.uart_csky_set_type))<br>
<p><strong><a name="[810]"></a>uart_csky_event</strong>(6 bytes, Stack size 0 btyes, csi1_uart_uart_drv.o(.text.uart_csky_event))<br>
<p><strong><a name="[811]"></a>uart_csky_recv</strong>(144 bytes, Stack size 0 btyes, csi1_uart_uart_drv.o(.text.uart_csky_recv))<br>
<p><strong><a name="[812]"></a>uart_csky_set_buffer_size</strong>(58 bytes, Stack size 0 btyes, csi1_uart_uart_drv.o(.text.uart_csky_set_buffer_size))<br>
<p><strong><a name="[813]"></a>uart_csky_config</strong>(62 bytes, Stack size 0 btyes, csi1_uart_uart_drv.o(.text.uart_csky_config))<br>
<p><strong><a name="[814]"></a>uart_csky_close</strong>(64 bytes, Stack size 0 btyes, csi1_uart_uart_drv.o(.text.uart_csky_close))<br>
<p><strong><a name="[815]"></a>uart_csky_open</strong>(168 bytes, Stack size 0 btyes, csi1_uart_uart_drv.o(.text.uart_csky_open))<br>
<p><strong><a name="[816]"></a>usart_csky_event_cb_fun</strong>(224 bytes, Stack size 0 btyes, csi1_uart_uart_drv.o(.text.usart_csky_event_cb_fun))<br>
<p><strong><a name="[817]"></a>read_LL_remainder_time1</strong>(44 bytes, Stack size 0 btyes, ble_controller_ll_patch.o(.__sram.code.read_LL_remainder_time1))<br>
<br>[Called By]<ul>
<li><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llSecAdvAllow1
<li><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llCalcMaxScanTime1
<li><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;config_RTC1
<li><a href="#[86c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_allocAuxAdvTimeSlot
<li><a href="#[86d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_add_adv_task1
<li><a href="#[87e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_allocAuxAdvTimeSlot_prd
<li><a href="#[87f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_add_adv_task_periodic1
<li><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_prdAdvTimerExpProcess
<li><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_extAdvTimerExpProcess
</ul>
<p><strong><a name="[852]"></a>LL_SetExtAdvEnable.part.8</strong>(902 bytes, Stack size 588 btyes, ble_controller_ll_patch.o(.__xip.code))<br>
<br>[Calls]<ul>
<li><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ll_isLegacyAdv
</ul>
<br>[Called By]<ul>
<li><a href="#[873]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetExtAdvEnable
</ul>
<p><strong><a name="[88e]"></a>rf_phy_dtm_init</strong>(52 bytes, Stack size 0 btyes, ble_controller_rf_phy_driver.o(.text.rf_phy_dtm_init))<br>
<p><strong><a name="[8aa]"></a>gf_double</strong>(46 bytes, Stack size 0 btyes, bt_crypto.o(.text.gf_double))<br>
<p><strong><a name="[8ab]"></a>hci_h5_send_sync_req</strong>(42 bytes, Stack size 0 btyes, h5.o(.text.hci_h5_send_sync_req))<br>
<br>[Stack]<ul><li>Max Depth = 160 
<li>Call Chain = hci_h5_send_sync_req &rArr; h5_wake_up &rArr; OsStartTimer  &rArr; aos_timer_change  &rArr; krhino_timer_change  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_alloc_and_init
<li><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_enqueue
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wake_up
</ul>
<br>[Called By]<ul>
<li><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_sync_cmd
<li><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_complete_rx_pkt.constprop.11
<li><a href="#[8b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_sync_retrans_timeout_handler
</ul>
<p><strong><a name="[8ac]"></a>hci_h5_send_sync_cmd</strong>(56 bytes, Stack size 4 btyes, h5.o(.text.hci_h5_send_sync_cmd))<br>
<br>[Stack]<ul><li>Max Depth = 164 
<li>Call Chain = hci_h5_send_sync_cmd &rArr; hci_h5_send_sync_req &rArr; h5_wake_up  &rArr; OsStartTimer  &rArr; aos_timer_change  &rArr; krhino_timer_change  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsStartTimer
<li><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_sync_req
<li><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_start_sync_retrans_timer
</ul>
<p><strong><a name="[8ad]"></a>hci_h5_send_conf_resp</strong>(44 bytes, Stack size 8 btyes, h5.o(.text.hci_h5_send_conf_resp))<br>
<br>[Stack]<ul><li>Max Depth = 168 
<li>Call Chain = hci_h5_send_conf_resp &rArr; h5_wake_up &rArr; OsStartTimer  &rArr; aos_timer_change  &rArr; krhino_timer_change  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_alloc_and_init
<li><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_enqueue
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wake_up
</ul>
<br>[Called By]<ul>
<li><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_complete_rx_pkt.constprop.11
</ul>
<p><strong><a name="[8ae]"></a>hci_h5_send_acl_data</strong>(32 bytes, Stack size 8 btyes, h5.o(.text.hci_h5_send_acl_data))<br>
<br>[Stack]<ul><li>Max Depth = 168 
<li>Call Chain = hci_h5_send_acl_data &rArr; h5_wake_up &rArr; OsStartTimer  &rArr; aos_timer_change  &rArr; krhino_timer_change  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_alloc_and_init
<li><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_enqueue
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wake_up
</ul>
<p><strong><a name="[8af]"></a>data_retransfer_thread</strong>(120 bytes, Stack size 12 btyes, h5.o(.text.data_retransfer_thread))<br>
<br>[Stack]<ul><li>Max Depth = 172 
<li>Call Chain = data_retransfer_thread &rArr; h5_wake_up &rArr; OsStartTimer  &rArr; aos_timer_change  &rArr; krhino_timer_change  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<li><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_dequeue_tail
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wake_up
<li><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_queue_head
</ul>
<p><strong><a name="[8b0]"></a>h5_complete_rx_pkt.constprop.11</strong>(856 bytes, Stack size 64 btyes, h5.o(.text.h5_complete_rx_pkt.constprop.11))<br>
<br>[Stack]<ul><li>Max Depth = 232 
<li>Call Chain = h5_complete_rx_pkt.constprop.11 &rArr; hci_h5_send_sync_resp &rArr; h5_wake_up  &rArr; OsStartTimer  &rArr; aos_timer_change  &rArr; krhino_timer_change  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_get_data
<li><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<li><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wake_up
<li><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbGetQueueLen
<li><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_queue_get_length
<li><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_stop
<li><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_pull
<li><a href="#[ac7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<li><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_sync_resp
<li><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_set_pkt_type
<li><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_get_data_length
<li><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsStartTimer
<li><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_unlink
<li><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_free
<li><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_conf_req
<li><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_start_conf_retrans_timer
<li><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_conf_resp
<li><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_alloc_and_init
<li><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_queue_tail
<li><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
<li><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_sync_req
<li><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_start_sync_retrans_timer
</ul>
<br>[Called By]<ul>
<li><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_receive_msg
</ul>
<p><strong><a name="[8b1]"></a>hci_h5_cleanup</strong>(176 bytes, Stack size 12 btyes, h5.o(.text.hci_h5_cleanup))<br>
<br>[Stack]<ul><li>Max Depth = 112 
<li>Call Chain = hci_h5_cleanup &rArr; RtbQueueFree &rArr; RtbEmptyQueue  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_free
<li><a href="#[969]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<li><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_retransfer_signal_event
<li><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_free
<li><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
<li><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbQueueFree
</ul>
<p><strong><a name="[8b2]"></a>h5_sync_retrans_timeout_handler</strong>(44 bytes, Stack size 8 btyes, h5.o(.text.h5_sync_retrans_timeout_handler))<br>
<br>[Stack]<ul><li>Max Depth = 168 
<li>Call Chain = h5_sync_retrans_timeout_handler &rArr; hci_h5_send_sync_req &rArr; h5_wake_up  &rArr; OsStartTimer  &rArr; aos_timer_change  &rArr; krhino_timer_change  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_sync_req
<li><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_stop
</ul>
<p><strong><a name="[8b3]"></a>h5_conf_retrans_timeout_handler</strong>(48 bytes, Stack size 8 btyes, h5.o(.text.h5_conf_retrans_timeout_handler))<br>
<br>[Stack]<ul><li>Max Depth = 176 
<li>Call Chain = h5_conf_retrans_timeout_handler &rArr; hci_h5_send_conf_req &rArr; h5_wake_up  &rArr; OsStartTimer  &rArr; aos_timer_change  &rArr; krhino_timer_change  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_start_conf_retrans_timer
<li><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_conf_req
<li><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_stop
</ul>
<p><strong><a name="[8b4]"></a>data_ready_cb_thread</strong>(148 bytes, Stack size 0 btyes, h5.o(.text.data_ready_cb_thread))<br>
<br>[Stack]<ul><li>Max Depth = 96 
<li>Call Chain = data_ready_cb_thread &rArr; hci_skb_dequeue_head &rArr; RtbDequeueHead  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_wait
<li><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_queue_get_length
<li><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<li><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_dequeue_head
<li><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<li><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_get_data_length
<li><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_get_pkt_type
<li><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_get_data
<li><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_free
</ul>
<p><strong><a name="[8b5]"></a>OsStartTimer</strong>(50 bytes, Stack size 16 btyes, h5.o(.text.OsStartTimer))<br>
<br>[Stack]<ul><li>Max Depth = 128 
<li>Call Chain = OsStartTimer &rArr; aos_timer_change &rArr; krhino_timer_change  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_is_valid
<li><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_stop
<li><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_change
<li><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_start
<li><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_change_once
</ul>
<br>[Called By]<ul>
<li><a href="#[8b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_start_conf_retrans_timer
<li><a href="#[8b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_start_sync_retrans_timer
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wake_up
<li><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_sync_cmd
<li><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_complete_rx_pkt.constprop.11
</ul>
<p><strong><a name="[8b6]"></a>h5_start_conf_retrans_timer</strong>(24 bytes, Stack size 4 btyes, h5.o(.text.h5_start_conf_retrans_timer))<br>
<br>[Stack]<ul><li>Max Depth = 132 
<li>Call Chain = h5_start_conf_retrans_timer &rArr; OsStartTimer &rArr; aos_timer_change  &rArr; krhino_timer_change  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsStartTimer
</ul>
<br>[Called By]<ul>
<li><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_complete_rx_pkt.constprop.11
<li><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_conf_retrans_timeout_handler
</ul>
<p><strong><a name="[8b7]"></a>h5_start_sync_retrans_timer</strong>(20 bytes, Stack size 4 btyes, h5.o(.text.h5_start_sync_retrans_timer))<br>
<br>[Stack]<ul><li>Max Depth = 132 
<li>Call Chain = h5_start_sync_retrans_timer &rArr; OsStartTimer &rArr; aos_timer_change  &rArr; krhino_timer_change  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsStartTimer
</ul>
<br>[Called By]<ul>
<li><a href="#[8ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_sync_cmd
<li><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_complete_rx_pkt.constprop.11
</ul>
<p><strong><a name="[8b8]"></a>h5_retransfer_timeout_handler</strong>(32 bytes, Stack size 8 btyes, h5.o(.text.h5_retransfer_timeout_handler))<br>
<br>[Stack]<ul><li>Max Depth = 100 
<li>Call Chain = h5_retransfer_timeout_handler &rArr; h5_retransfer_signal_event &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[8c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_retransfer_signal_event
</ul>
<p><strong><a name="[8b9]"></a>h5_wait_controller_baudrate_ready_timeout_handler</strong>(80 bytes, Stack size 8 btyes, h5.o(.text.h5_wait_controller_baudrate_ready_timeout_handler))<br>
<br>[Stack]<ul><li>Max Depth = 104 
<li>Call Chain = h5_wait_controller_baudrate_ready_timeout_handler &rArr; hci_skb_queue_tail &rArr; RtbQueueTail  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_free
<li><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<li><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_queue_tail
<li><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
<li><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
</ul>
<p><strong><a name="[8ba]"></a>h5_prepare_pkt.constprop.13</strong>(328 bytes, Stack size 36 btyes, h5.o(.text.h5_prepare_pkt.constprop.13))<br>
<br>[Stack]<ul><li>Max Depth = 124 
<li>Call Chain = h5_prepare_pkt.constprop.13 &rArr; hci_skb_alloc &rArr; RtbAllocate  &rArr; malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_alloc
<li><a href="#[8c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_slip_msgdelim
<li><a href="#[8c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_slip_one_byte
<li><a href="#[8be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_crc_update
</ul>
<br>[Called By]<ul>
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wake_up
</ul>
<p><strong><a name="[8bb]"></a>h5_wake_up</strong>(408 bytes, Stack size 32 btyes, h5.o(.text.h5_wake_up))<br>
<br>[Stack]<ul><li>Max Depth = 160 
<li>Call Chain = h5_wake_up &rArr; OsStartTimer &rArr; aos_timer_change  &rArr; krhino_timer_change  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<li><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_dequeue_head
<li><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_get_data
<li><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_get_data_length
<li><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_get_pkt_type
<li><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_prepare_pkt.constprop.13
<li><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
<li><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_free
<li><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send
<li><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_queue_head
<li><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbGetQueueLen
<li><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_queue_tail
<li><a href="#[8b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsStartTimer
</ul>
<br>[Called By]<ul>
<li><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_conf_req
<li><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_sync_resp
<li><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_sync_req
<li><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_conf_resp
<li><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_acl_data
<li><a href="#[8af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_retransfer_thread
<li><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_complete_rx_pkt.constprop.11
<li><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_cmd
<li><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_receive_msg
</ul>
<p><strong><a name="[8bc]"></a>hci_h5_send_conf_req</strong>(44 bytes, Stack size 8 btyes, h5.o(.text.hci_h5_send_conf_req))<br>
<br>[Stack]<ul><li>Max Depth = 168 
<li>Call Chain = hci_h5_send_conf_req &rArr; h5_wake_up &rArr; OsStartTimer  &rArr; aos_timer_change  &rArr; krhino_timer_change  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_alloc_and_init
<li><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_enqueue
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wake_up
</ul>
<br>[Called By]<ul>
<li><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_complete_rx_pkt.constprop.11
<li><a href="#[8b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_conf_retrans_timeout_handler
</ul>
<p><strong><a name="[8bd]"></a>hci_h5_send_sync_resp</strong>(42 bytes, Stack size 8 btyes, h5.o(.text.hci_h5_send_sync_resp))<br>
<br>[Stack]<ul><li>Max Depth = 168 
<li>Call Chain = hci_h5_send_sync_resp &rArr; h5_wake_up &rArr; OsStartTimer  &rArr; aos_timer_change  &rArr; krhino_timer_change  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_alloc_and_init
<li><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_enqueue
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wake_up
</ul>
<br>[Called By]<ul>
<li><a href="#[8b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_complete_rx_pkt.constprop.11
</ul>
<p><strong><a name="[8be]"></a>h5_crc_update</strong>(48 bytes, Stack size 12 btyes, h5.o(.text.h5_crc_update))<br>
<br>[Called By]<ul>
<li><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_prepare_pkt.constprop.13
<li><a href="#[8c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_receive_msg
</ul>
<p><strong><a name="[8bf]"></a>hci_event</strong>(2 bytes, Stack size 0 btyes, h5.o(.text.hci_event))<br>
<p><strong><a name="[8c0]"></a>h5_hw_init_ready_timeout_handler</strong>(2 bytes, Stack size 0 btyes, h5.o(.text.h5_hw_init_ready_timeout_handler))<br>
<p><strong><a name="[8c1]"></a>h5_slip_one_byte</strong>(172 bytes, Stack size 24 btyes, h5.o(.text.h5_slip_one_byte))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = h5_slip_one_byte &rArr; hci_skb_put </ul>
<br>[Calls]<ul>
<li><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_put
</ul>
<br>[Called By]<ul>
<li><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_prepare_pkt.constprop.13
</ul>
<p><strong><a name="[8c2]"></a>h5_slip_msgdelim</strong>(32 bytes, Stack size 8 btyes, h5.o(.text.h5_slip_msgdelim))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = h5_slip_msgdelim &rArr; hci_skb_put </ul>
<br>[Calls]<ul>
<li><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_put
</ul>
<br>[Called By]<ul>
<li><a href="#[8ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_prepare_pkt.constprop.13
</ul>
<p><strong><a name="[8c3]"></a>h5_enqueue</strong>(152 bytes, Stack size 12 btyes, h5.o(.text.h5_enqueue))<br>
<br>[Stack]<ul><li>Max Depth = 108 
<li>Call Chain = h5_enqueue &rArr; hci_skb_queue_tail &rArr; RtbQueueTail  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_get_data_length
<li><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_free
<li><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_get_pkt_type
<li><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<li><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_queue_tail
<li><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[8bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_conf_req
<li><a href="#[8bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_sync_resp
<li><a href="#[8ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_sync_req
<li><a href="#[8ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_conf_resp
<li><a href="#[8ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_acl_data
<li><a href="#[8c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_send_cmd
</ul>
<p><strong><a name="[8c4]"></a>h5_retransfer_signal_event</strong>(56 bytes, Stack size 16 btyes, h5.o(.text.h5_retransfer_signal_event))<br>
<br>[Stack]<ul><li>Max Depth = 92 
<li>Call Chain = h5_retransfer_signal_event &rArr; aos_mutex_lock &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_lock
<li><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_signal
<li><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_unlock
</ul>
<br>[Called By]<ul>
<li><a href="#[8b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_retransfer_timeout_handler
<li><a href="#[8b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_cleanup
</ul>
<p><strong><a name="[8c5]"></a>OsAllocateTimer</strong>(48 bytes, Stack size 20 btyes, h5.o(.text.OsAllocateTimer))<br>
<br>[Stack]<ul><li>Max Depth = 196 
<li>Call Chain = OsAllocateTimer &rArr; aos_timer_new_ext &rArr; krhino_timer_dyn_create  &rArr; krhino_timer_start  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[968]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<li><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_new_ext
</ul>
<br>[Called By]<ul>
<li><a href="#[8c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_h5_int_init
</ul>
<p><strong><a name="[8c6]"></a>hci_h5_int_init</strong>(372 bytes, Stack size 20 btyes, h5.o(.text.hci_h5_int_init))<br>
<br>[Stack]<ul><li>Max Depth = 216 
<li>Call Chain = hci_h5_int_init &rArr; OsAllocateTimer &rArr; aos_timer_new_ext  &rArr; krhino_timer_dyn_create  &rArr; krhino_timer_start  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[8c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OsAllocateTimer
<li><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_new
<li><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RtbQueueInit
<li><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_new
<li><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_mutex_free
<li><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_task_new_ext
<li><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_open
<li><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_set_event
<li><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_sem_free
</ul>
<p><strong><a name="[8c7]"></a>hci_h5_send_cmd</strong>(76 bytes, Stack size 12 btyes, h5.o(.text.hci_h5_send_cmd))<br>
<br>[Stack]<ul><li>Max Depth = 172 
<li>Call Chain = hci_h5_send_cmd &rArr; h5_wake_up &rArr; OsStartTimer  &rArr; aos_timer_change  &rArr; krhino_timer_change  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_skb_alloc_and_init
<li><a href="#[8c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_enqueue
<li><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aos_timer_stop
<li><a href="#[8bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;h5_wake_up
</ul>
<p><strong><a name="[8cc]"></a>wait_llWaitingIrq.constprop.1</strong>(60 bytes, Stack size 0 btyes, hci_api.o(.text.wait_llWaitingIrq.constprop.1))<br>
<p><strong><a name="[8d0]"></a>adv_scan_schd_idle_exit</strong>(4 bytes, Stack size 0 btyes, hci_tl.o(.text.adv_scan_schd_idle_exit))<br>
<p><strong><a name="[911]"></a>adv_scan_schd_adv_exit</strong>(40 bytes, Stack size 4 btyes, hci_tl.o(.text.adv_scan_schd_adv_exit))<br>
<br>[Stack]<ul><li>Max Depth = 88 
<li>Call Chain = adv_scan_schd_adv_exit &rArr; k_timer_stop &rArr; krhino_timer_stop  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_stop
</ul>
<p><strong><a name="[912]"></a>adv_scan_schd_adv_scan_enter</strong>(36 bytes, Stack size 4 btyes, hci_tl.o(.text.adv_scan_schd_adv_scan_enter))<br>
<br>[Stack]<ul><li>Max Depth = 104 
<li>Call Chain = adv_scan_schd_adv_scan_enter &rArr; k_timer_start &rArr; krhino_timer_change  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_start
</ul>
<p><strong><a name="[913]"></a>adv_scan_schd_adv_enter</strong>(52 bytes, Stack size 4 btyes, hci_tl.o(.text.adv_scan_schd_adv_enter))<br>
<br>[Stack]<ul><li>Max Depth = 104 
<li>Call Chain = adv_scan_schd_adv_enter &rArr; k_timer_start &rArr; krhino_timer_change  &rArr; krhino_buf_queue_send  &rArr; ringbuf_push  </ul>
<br>[Calls]<ul>
<li><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_start
</ul>
<p><strong><a name="[914]"></a>adv_scan_schd_idle_enter</strong>(20 bytes, Stack size 4 btyes, hci_tl.o(.text.adv_scan_schd_idle_enter))<br>
<br>[Calls]<ul>
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</ul>
<p><strong><a name="[921]"></a>adv_scan_schd_scan_exit</strong>(72 bytes, Stack size 4 btyes, hci_tl.o(.text.adv_scan_schd_scan_exit))<br>
<br>[Stack]<ul><li>Max Depth = 28 
<li>Call Chain = adv_scan_schd_scan_exit &rArr; LL_SetExtendedScanEnable &rArr; llSetupExtScan1  &rArr; rf_phy_change_cfg0  </ul>
<br>[Calls]<ul>
<li><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetExtendedScanEnable
<li><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LL_SetScanControl
</ul>
<p><strong><a name="[923]"></a>adv_scan_schd_adv_scan_exit</strong>(116 bytes, Stack size 8 btyes, hci_tl.o(.text.adv_scan_schd_adv_scan_exit))<br>
<br>[Stack]<ul><li>Max Depth = 664 
<li>Call Chain = adv_scan_schd_adv_scan_exit &rArr; hciLESetExtAdvEnable1 &rArr; LL_SetExtAdvEnable  &rArr; LL_SetExtAdvEnable.part.8  </ul>
<br>[Calls]<ul>
<li><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_timer_stop
<li><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetExtendedScanEnable
<li><a href="#[93f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hciLESetExtAdvEnable1
<li><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LL_SetScanControl
<li><a href="#[922]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LL_SetAdvControl
</ul>
<p><strong><a name="[926]"></a>adv_scan_schd_scan_enter</strong>(116 bytes, Stack size 16 btyes, hci_tl.o(.text.adv_scan_schd_scan_enter))<br>
<br>[Stack]<ul><li>Max Depth = 136 
<li>Call Chain = adv_scan_schd_scan_enter &rArr; ulog &rArr; log_get_mutex  &rArr; aos_mutex_lock  &rArr; krhino_mutex_lock  &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[924]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LE_SetExtendedScanEnableCmd1
<li><a href="#[920]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_LL_SetScanControl
<li><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ulog
</ul>
<p><strong><a name="[94f]"></a>h5_recv_data</strong>(4 bytes, Stack size 0 btyes, hci_uart_h5.o(.text.h5_recv_data))<br>
<p><strong><a name="[950]"></a>h5_set_event</strong>(16 bytes, Stack size 0 btyes, hci_uart_h5.o(.text.h5_set_event))<br>
<p><strong><a name="[951]"></a>h5_start</strong>(32 bytes, Stack size 12 btyes, hci_uart_h5.o(.text.h5_start))<br>
<p><strong><a name="[954]"></a>h5_send_data</strong>(16 bytes, Stack size 4 btyes, hci_uart_h5.o(.text.h5_send_data))<br>
<br>[Stack]<ul><li>Max Depth = 24 
<li>Call Chain = h5_send_data &rArr; csi_usart_send &rArr; csi_usart_putchar  </ul>
<br>[Calls]<ul>
<li><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_send
</ul>
<p><strong><a name="[955]"></a>h5_hal_close</strong>(20 bytes, Stack size 4 btyes, hci_uart_h5.o(.text.h5_hal_close))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = h5_hal_close &rArr; csi_usart_uninitialize </ul>
<br>[Calls]<ul>
<li><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_uninitialize
</ul>
<p><strong><a name="[956]"></a>h5_hal_init</strong>(20 bytes, Stack size 4 btyes, hci_uart_h5.o(.text.h5_hal_init))<br>
<br>[Stack]<ul><li>Max Depth = 104 
<li>Call Chain = h5_hal_init &rArr; device_new &rArr; aos_mutex_new  &rArr; aos_malloc  &rArr; yoc_malloc  &rArr; krhino_mm_alloc  &rArr; k_mm_alloc  &rArr; krhino_mblk_alloc  </ul>
<br>[Calls]<ul>
<li><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;device_new
</ul>
<p><strong><a name="[966]"></a>h5_hal_open</strong>(192 bytes, Stack size 16 btyes, hci_uart_h5.o(.text.h5_hal_open))<br>
<br>[Stack]<ul><li>Max Depth = 132 
<li>Call Chain = h5_hal_open &rArr; csi_usart_receive_dma &rArr; csi_dma_alloc_channel  &rArr; target_get_dmac  &rArr; target_get  </ul>
<br>[Calls]<ul>
<li><a href="#[965]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitConnectContext0
<li><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_symrom_setSleepMode
<li><a href="#[87b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitialExtendedAdv
<li><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_initialize
<li><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_config
<li><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;csi_usart_receive_dma
<li><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_gpio_pin_init
<li><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;phy_gpio_fmux_set
</ul>
<p><strong><a name="[975]"></a>char2byte</strong>(48 bytes, Stack size 0 btyes, libc_string_strext.o(.text.char2byte))<br>
<p><strong><a name="[996]"></a>buf_queue_create</strong>(134 bytes, Stack size 36 btyes, k_buf_queue.o(.text.buf_queue_create))<br>
<br>[Stack]<ul><li>Max Depth = 44 
<li>Call Chain = buf_queue_create &rArr; ringbuf_init </ul>
<br>[Calls]<ul>
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[9e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ringbuf_init
</ul>
<br>[Called By]<ul>
<li><a href="#[999]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_fix_buf_queue_create
</ul>
<p><strong><a name="[997]"></a>buf_queue_dyn_create.part.1</strong>(100 bytes, Stack size 0 btyes, k_buf_queue.o(.text.buf_queue_dyn_create.part.1))<br>
<p><strong><a name="[9aa]"></a>krhino_clz32</strong>(70 bytes, Stack size 0 btyes, k_ffs.o(.text.krhino_clz32))<br>
<p><strong><a name="[9ae]"></a>size_to_level</strong>(92 bytes, Stack size 0 btyes, k_mm.o(.text.size_to_level))<br>
<br>[Called By]<ul>
<li><a href="#[9b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_insert
<li><a href="#[9b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_freelist_delete
<li><a href="#[9b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addsize
<li><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
</ul>
<p><strong><a name="[9af]"></a>removesize</strong>(22 bytes, Stack size 0 btyes, k_mm.o(.text.removesize))<br>
<br>[Called By]<ul>
<li><a href="#[9b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_smallblk_free
<li><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
<li><a href="#[9b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_init_mm_head
</ul>
<p><strong><a name="[9b0]"></a>k_mm_freelist_insert</strong>(56 bytes, Stack size 12 btyes, k_mm.o(.text.k_mm_freelist_insert))<br>
<br>[Calls]<ul>
<li><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_to_level
</ul>
<br>[Called By]<ul>
<li><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<li><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
</ul>
<p><strong><a name="[9b1]"></a>k_mm_freelist_delete</strong>(78 bytes, Stack size 12 btyes, k_mm.o(.text.k_mm_freelist_delete))<br>
<br>[Calls]<ul>
<li><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_to_level
</ul>
<br>[Called By]<ul>
<li><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
<li><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
</ul>
<p><strong><a name="[9b2]"></a>k_mm_smallblk_free</strong>(48 bytes, Stack size 8 btyes, k_mm.o(.text.k_mm_smallblk_free))<br>
<br>[Stack]<ul><li>Max Depth = 20 
<li>Call Chain = k_mm_smallblk_free &rArr; krhino_mblk_free </ul>
<br>[Calls]<ul>
<li><a href="#[9c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mblk_free
<li><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc_debug
<li><a href="#[9af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removesize
</ul>
<br>[Called By]<ul>
<li><a href="#[9b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_free
</ul>
<p><strong><a name="[9b3]"></a>addsize</strong>(62 bytes, Stack size 8 btyes, k_mm.o(.text.addsize))<br>
<br>[Calls]<ul>
<li><a href="#[9ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;size_to_level
</ul>
<br>[Called By]<ul>
<li><a href="#[9b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_mm_alloc
</ul>
<p><strong><a name="[9c2]"></a>mutex_release.isra.1</strong>(20 bytes, Stack size 4 btyes, k_mutex.o(.text.mutex_release.isra.1))<br>
<br>[Stack]<ul><li>Max Depth = 40 
<li>Call Chain = mutex_release.isra.1 &rArr; task_pri_change &rArr; ready_list_rm  &rArr; k_err_proc_debug  </ul>
<br>[Calls]<ul>
<li><a href="#[a0f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_pri_change
</ul>
<br>[Called By]<ul>
<li><a href="#[9c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_del
<li><a href="#[9cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mutex_unlock
</ul>
<p><strong><a name="[9cd]"></a>klist_rm</strong>(14 bytes, Stack size 0 btyes, k_pend.o(.text.klist_rm))<br>
<br>[Called By]<ul>
<li><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<li><a href="#[9d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_rm
<li><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_reorder
</ul>
<p><strong><a name="[9ce]"></a>pend_list_add</strong>(42 bytes, Stack size 4 btyes, k_pend.o(.text.pend_list_add))<br>
<br>[Called By]<ul>
<li><a href="#[9d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_to_blk_obj
<li><a href="#[9d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_list_reorder
</ul>
<p><strong><a name="[9d4]"></a>msg_send</strong>(156 bytes, Stack size 0 btyes, k_queue.o(.text.msg_send))<br>
<p><strong><a name="[9e5]"></a>ready_list_init</strong>(78 bytes, Stack size 8 btyes, k_sched.o(.text.ready_list_init))<br>
<br>[Called By]<ul>
<li><a href="#[9e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ready_list_add_tail
<li><a href="#[9eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_head
</ul>
<p><strong><a name="[9e6]"></a>_ready_list_add_tail</strong>(52 bytes, Stack size 4 btyes, k_sched.o(.text._ready_list_add_tail))<br>
<br>[Stack]<ul><li>Max Depth = 12 
<li>Call Chain = _ready_list_add_tail &rArr; ready_list_init </ul>
<br>[Calls]<ul>
<li><a href="#[9e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_init
</ul>
<br>[Called By]<ul>
<li><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<li><a href="#[9ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add
</ul>
<p><strong><a name="[9f2]"></a>sem_give</strong>(106 bytes, Stack size 16 btyes, k_sem.o(.text.sem_give))<br>
<br>[Stack]<ul><li>Max Depth = 40 
<li>Call Chain = sem_give &rArr; pend_task_wakeup &rArr; ready_list_add  &rArr; _ready_list_add_tail  &rArr; ready_list_init  </ul>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<li><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
<li><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</ul>
<br>[Called By]<ul>
<li><a href="#[9f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sem_give
</ul>
<p><strong><a name="[a03]"></a>task_mutex_free.isra.3</strong>(44 bytes, Stack size 16 btyes, k_task.o(.text.task_mutex_free.isra.3))<br>
<br>[Stack]<ul><li>Max Depth = 40 
<li>Call Chain = task_mutex_free.isra.3 &rArr; pend_task_wakeup &rArr; ready_list_add  &rArr; _ready_list_add_tail  &rArr; ready_list_init  </ul>
<br>[Calls]<ul>
<li><a href="#[9cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wakeup
</ul>
<br>[Called By]<ul>
<li><a href="#[a12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_del
<li><a href="#[a13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_del
</ul>
<p><strong><a name="[a04]"></a>task_create.isra.0.part.1.constprop.10</strong>(276 bytes, Stack size 48 btyes, k_task.o(.text.task_create.isra.0.part.1.constprop.10))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = task_create.isra.0.part.1.constprop.10 &rArr; ready_list_add_tail &rArr; _ready_list_add_tail  &rArr; ready_list_init  </ul>
<br>[Calls]<ul>
<li><a href="#[a3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_save
<li><a href="#[a45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_intrpt_restore
<li><a href="#[ab7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<li><a href="#[a3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_stack_init
<li><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create_hook
<li><a href="#[9ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ready_list_add_tail
<li><a href="#[9e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_sched
</ul>
<br>[Called By]<ul>
<li><a href="#[a05]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_create
<li><a href="#[a06]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_task_dyn_create
</ul>
<p><strong><a name="[a22]"></a>klist_rm_init</strong>(18 bytes, Stack size 0 btyes, k_tick.o(.text.klist_rm_init))<br>
<br>[Called By]<ul>
<li><a href="#[a25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_rm
<li><a href="#[a26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</ul>
<p><strong><a name="[a2c]"></a>timer_list_pri_insert.constprop.3</strong>(92 bytes, Stack size 28 btyes, k_timer.o(.text.timer_list_pri_insert.constprop.3))<br>
<br>[Called By]<ul>
<li><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
<li><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_proc
</ul>
<p><strong><a name="[a2d]"></a>cmd_proc</strong>(240 bytes, Stack size 8 btyes, k_timer.o(.text.cmd_proc))<br>
<br>[Stack]<ul><li>Max Depth = 56 
<li>Call Chain = cmd_proc &rArr; krhino_mm_free &rArr; k_mm_free  &rArr; k_mm_smallblk_free  &rArr; krhino_mblk_free  </ul>
<br>[Calls]<ul>
<li><a href="#[a6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;___gnu_csky_case_uqi
<li><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_pri_insert.constprop.3
<li><a href="#[9bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_mm_free
<li><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc_debug
</ul>
<br>[Called By]<ul>
<li><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cmd_proc
</ul>
<p><strong><a name="[a2e]"></a>timer_cmd_proc</strong>(34 bytes, Stack size 8 btyes, k_timer.o(.text.timer_cmd_proc))<br>
<br>[Stack]<ul><li>Max Depth = 64 
<li>Call Chain = timer_cmd_proc &rArr; cmd_proc &rArr; krhino_mm_free  &rArr; k_mm_free  &rArr; k_mm_smallblk_free  &rArr; krhino_mblk_free  </ul>
<br>[Calls]<ul>
<li><a href="#[a2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_proc
</ul>
<br>[Called By]<ul>
<li><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</ul>
<p><strong><a name="[a2f]"></a>timer_cb_proc</strong>(152 bytes, Stack size 24 btyes, k_timer.o(.text.timer_cb_proc))<br>
<br>[Stack]<ul><li>Max Depth = 52 
<li>Call Chain = timer_cb_proc &rArr; timer_list_pri_insert.constprop.3 </ul>
<br>[Calls]<ul>
<li><a href="#[a2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_pri_insert.constprop.3
</ul>
<br>[Called By]<ul>
<li><a href="#[a30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</ul>
<p><strong><a name="[a30]"></a>timer_task</strong>(184 bytes, Stack size 52 btyes, k_timer.o(.text.timer_task))<br>
<br>[Stack]<ul><li>Max Depth = 124 
<li>Call Chain = timer_task &rArr; krhino_buf_queue_recv &rArr; pend_to_blk_obj  &rArr; tick_list_insert  </ul>
<br>[Calls]<ul>
<li><a href="#[99f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_buf_queue_recv
<li><a href="#[a28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;krhino_sys_tick_get
<li><a href="#[a2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cmd_proc
<li><a href="#[9a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;k_err_proc_debug
<li><a href="#[a2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_cb_proc
</ul>
<p><strong><a name="[a42]"></a>__task_switch</strong>(0 bytes, Stack size 0 btyes, src_csky_802_port_s.o(.text.__task_switch))<br>
<p><strong><a name="[a50]"></a>cpu_pwr_child_c_state_update</strong>(40 bytes, Stack size 0 btyes, src_cpu_pwr_hal_lib.o(.text.cpu_pwr_child_c_state_update))<br>
<p><strong><a name="[a51]"></a>cpu_pwr_c_state_capability_set_by_level_</strong>(60 bytes, Stack size 0 btyes, src_cpu_pwr_hal_lib.o(.text.cpu_pwr_c_state_capability_set_by_level_))<br>
<p><strong><a name="[a52]"></a>cpu_pwr_node_find_by_name_</strong>(64 bytes, Stack size 0 btyes, src_cpu_pwr_hal_lib.o(.text.cpu_pwr_node_find_by_name_))<br>
<p><strong><a name="[a53]"></a>cpu_pwr_c_method_set_by_level_</strong>(100 bytes, Stack size 0 btyes, src_cpu_pwr_hal_lib.o(.text.cpu_pwr_c_method_set_by_level_))<br>
<p><strong><a name="[a5f]"></a>cpu_pwr_node_show</strong>(316 bytes, Stack size 0 btyes, src_cpu_pwr_show.o(.text.cpu_pwr_node_show))<br>
<p><strong><a name="[a73]"></a>_fpadd_parts</strong>(332 bytes, Stack size 0 btyes, _addsub_sf.o(.text))<br>
<p><strong><a name="[a9d]"></a>swrite</strong>(62 bytes, Stack size 16 btyes, vsnprintf.o(.text))<br>
<p><strong><a name="[aad]"></a>swrite</strong>(62 bytes, Stack size 16 btyes, vsnprintf_required.o(.text))<br>
<p><strong><a name="[acf]"></a>sgetc</strong>(20 bytes, Stack size 0 btyes, vsscanf_required.o(.text))<br>
<p><strong><a name="[ad0]"></a>sputc</strong>(20 bytes, Stack size 0 btyes, vsscanf_required.o(.text))<br>
<p><strong><a name="[ad2]"></a>PAD.1851</strong>(56 bytes, Stack size 20 btyes, __v2_printfDFHLlMOPpSSsWp.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[ad3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__v2_printf
</ul>
<p><strong><a name="[ad8]"></a>_fpadd_parts</strong>(732 bytes, Stack size 52 btyes, _addsub_df.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[ad9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__adddf3
<li><a href="#[ada]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__subdf3
</ul>
<p><strong><a name="[ae0]"></a>copystring</strong>(38 bytes, Stack size 8 btyes, __dtostr.o(.text))<br>
<br>[Called By]<ul>
<li><a href="#[ae1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__GI___dtostr
</ul>
</body>
</html>
